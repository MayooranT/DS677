{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: dictionary lookup for suffix mapping, list comprehension, multiple base cases in recursion, pattern matching for regular expressions, conditional loop, list initialization\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1__ctor_m2716C5BEDCDB58D5B0C144DA4837DAF99E86D871_gshared (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 * __this, RuntimeObject* ___collection0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var);\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tRuntimeObject* V_0 = NULL;\n\tint32_t V_1 = 0;\n\tRuntimeObject* V_2 = NULL;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tNullCheck((RuntimeObject *)__this);\n\t\tObject__ctor_m88880E0413421D13FD95325EDCE231707CE1F405((RuntimeObject *)__this, /*hidden argument*/NULL);\n\t\tRuntimeObject* L_0 = ___collection0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000f;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentNullException_m539081110B94B71D92C9761B273E617B23B4BBA5((int32_t)6, /*hidden argument*/NULL);\n\t}\n\nIL_000f:\n\t{\n\t\tRuntimeObject* L_1 = ___collection0;\n\t\tV_0 = (RuntimeObject*)((RuntimeObject*)IsInst((RuntimeObject*)L_1, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2)));\n\t\tRuntimeObject* L_2 = V_0;\n\t\tif (!L_2)\n\t\t{\n\t\t\tgoto IL_0050;\n\t\t}\n\t}\n\t{\n\t\tRuntimeObject* L_3 = V_0;\n\t\tNullCheck((RuntimeObject*)L_3);\n\t\tint32_t L_4;\n\t\tL_4 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* System.Int32 System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::get_Count() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_3);\n\t\tV_1 = (int32_t)L_4;\n\t\tint32_t L_5 = V_1;\n\t\tif (L_5)\n\t\t{\n\t\t\tgoto IL_002f;\n\t\t}\n\t}\n\t{\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_6 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_6);\n\t\treturn;\n\t}\n\nIL_002f:\n\t{\n\t\tint32_t L_7 = V_1;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_8 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)(AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)SZArrayNew(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 1), (uint32_t)L_7);\n\t\t__this->set__items_1(L_8);\n\t\tRuntimeObject* L_9 = V_0;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_10 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)__this->get__items_1();\n\t\tNullCheck((RuntimeObject*)L_9);\n\t\tInterfaceActionInvoker2< AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*, int32_t >::Invoke(5 /* System.Void System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::CopyTo(T[],System.Int32) */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_9, (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)L_10, (int32_t)0);\n\t\tint32_t L_11 = V_1;\n\t\t__this->set__size_2(L_11);\n\t\treturn;\n\t}\n\nIL_0050:\n\t{\n\t\t__this->set__size_2(0);\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_12 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_12);\n\t\tRuntimeObject* L_13 = ___collection0;\n\t\tNullCheck((RuntimeObject*)L_13);\n\t\tRuntimeObject* L_14;\n\t\tL_14 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<kcp2k.Kcp/AckItem>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 3), (RuntimeObject*)L_13);\n\t\tV_2 = (RuntimeObject*)L_14;\n\t}\n\nIL_0069:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_0077;\n\t\t}\n\nIL_006b:\n\t\t{\n\t\t\tRuntimeObject* L_15 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_15);\n\t\t\tAckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  L_16;\n\t\t\tL_16 = InterfaceFuncInvoker0< AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<kcp2k.Kcp/AckItem>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 4), (RuntimeObject*)L_15);\n\t\t\tNullCheck((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this);\n\t\t\t((  void (*) (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *, AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5)->methodPointer)((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this, (AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 )L_16, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5));\n\t\t}\n\nIL_0077:\n\t\t{\n\t\t\tRuntimeObject* L_17 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_17);\n\t\t\tbool L_18;\n\t\t\tL_18 = InterfaceFuncInvoker0< bool >::Invoke(0 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var, (RuntimeObject*)L_17);\n\t\t\tif (L_18)\n\t\t\t{\n\t\t\t\tgoto IL_006b;\n\t\t\t}\n\t\t}\n\nIL_007f:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x8B, FINALLY_0081);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_0081;\n\t}\n\nFINALLY_0081:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_19 = V_2;\n\t\t\tif (!L_19)\n\t\t\t{\n\t\t\t\tgoto IL_008a;\n\t\t\t}\n\t\t}\n\nIL_0084:\n\t\t{\n\t\t\tRuntimeObject* L_20 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_20);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var, (RuntimeObject*)L_20);\n\t\t}\n\nIL_008a:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(129)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(129)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x8B, IL_008b)\n\t}\n\nIL_008b:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "List_1_InsertRange_mDEF514565A34924F191DBC38F0E98BE48AD1AB6A_gshared"}, "id": 1, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1__ctor_m2716C5BEDCDB58D5B0C144DA4837DAF99E86D871_gshared (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 * __this, RuntimeObject* ___collection0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var);\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tRuntimeObject* V_0 = NULL;\n\tint32_t V_1 = 0;\n\tRuntimeObject* V_2 = NULL;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tNullCheck((RuntimeObject *)__this);\n\t\tObject__ctor_m88880E0413421D13FD95325EDCE231707CE1F405((RuntimeObject *)__this, /*hidden argument*/NULL);\n\t\tRuntimeObject* L_0 = ___collection0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000f;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentNullException_m539081110B94B71D92C9761B273E617B23B4BBA5((int32_t)6, /*hidden argument*/NULL);\n\t}\n\nIL_000f:\n\t{\n\t\tRuntimeObject* L_1 = ___collection0;\n\t\tV_0 = (RuntimeObject*)((RuntimeObject*)IsInst((RuntimeObject*)L_1, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2)));\n\t\tRuntimeObject* L_2 = V_0;\n\t\tif (!L_2)\n\t\t{\n\t\t\tgoto IL_0050;\n\t\t}\n\t}\n\t{\n\t\tRuntimeObject* L_3 = V_0;\n\t\tNullCheck((RuntimeObject*)L_3);\n\t\tint32_t L_4;\n\t\tL_4 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* System.Int32 System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::get_Count() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_3);\n\t\tV_1 = (int32_t)L_4;\n\t\tint32_t L_5 = V_1;\n\t\tif (L_5)\n\t\t{\n\t\t\tgoto IL_002f;\n\t\t}\n\t}\n\t{\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_6 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_6);\n\t\treturn;\n\t}\n\nIL_002f:\n\t{\n\t\tint32_t L_7 = V_1;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_8 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)(AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)SZArrayNew(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 1), (uint32_t)L_7);\n\t\t__this->set__items_1(L_8);\n\t\tRuntimeObject* L_9 = V_0;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_10 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)__this->get__items_1();\n\t\tNullCheck((RuntimeObject*)L_9);\n\t\tInterfaceActionInvoker2< AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*, int32_t >::Invoke(5 /* System.Void System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::CopyTo(T[],System.Int32) */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_9, (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)L_10, (int32_t)0);\n\t\tint32_t L_11 = V_1;\n\t\t__this->set__size_2(L_11);\n\t\treturn;\n\t}\n\nIL_0050:\n\t{\n\t\t__this->set__size_2(0);\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_12 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_12);\n\t\tRuntimeObject* L_13 = ___collection0;\n\t\tNullCheck((RuntimeObject*)L_13);\n\t\tRuntimeObject* L_14;\n\t\tL_14 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<kcp2k.Kcp/AckItem>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 3), (RuntimeObject*)L_13);\n\t\tV_2 = (RuntimeObject*)L_14;\n\t}\n\nIL_0069:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_0077;\n\t\t}\n\nIL_006b:\n\t\t{\n\t\t\tRuntimeObject* L_15 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_15);\n\t\t\tAckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  L_16;\n\t\t\tL_16 = InterfaceFuncInvoker0< AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<kcp2k.Kcp/AckItem>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 4), (RuntimeObject*)L_15);\n\t\t\tNullCheck((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this);\n\t\t\t((  void (*) (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *, AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5)->methodPointer)((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this, (AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 )L_16, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5));\n\t\t}\n\nIL_0077:\n\t\t{\n\t\t\tRuntimeObject* L_17 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_17);\n\t\t\tbool L_18;\n\t\t\tL_18 = InterfaceFuncInvoker0< bool >::Invoke(0 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var, (RuntimeObject*)L_17);\n\t\t\tif (L_18)\n\t\t\t{\n\t\t\t\tgoto IL_006b;\n\t\t\t}\n\t\t}\n\nIL_007f:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x8B, FINALLY_0081);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_0081;\n\t}\n\nFINALLY_0081:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_19 = V_2;\n\t\t\tif (!L_19)\n\t\t\t{\n\t\t\t\tgoto IL_008a;\n\t\t\t}\n\t\t}\n\nIL_0084:\n\t\t{\n\t\t\tRuntimeObject* L_20 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_20);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var, (RuntimeObject*)L_20);\n\t\t}\n\nIL_008a:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(129)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(129)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x8B, IL_008b)\n\t}\n\nIL_008b:\n\t{\n\t\treturn;\n\t}\n}", "__index_level_0__": 0, "concepts": ["dictionary lookup for suffix mapping", "list comprehension", "multiple base cases in recursion", "pattern matching for regular expressions", "conditional loop", "list initialization"], "parsing_result": [{"instruction": "Create a Python function that computes the factorial of a given non-negative integer."}, {"instruction": "Create a Python function that accepts a list of numbers and a positive integer `k`. The function should return the maximum sum of `k` elements from the list. If the number of elements in the list is less than `k`, the function should return the entire list."}, {"instruction": "Create a Python function that accepts a positive integer `num` and returns all non-negative integers less than `num` that are divisible by either 3 or 5."}, {"instruction": "Create a Python function that determines the maximum depth of a binary tree from a list of node values, where the value `-1` represents a null node. The function should accept a list of integers, representing the values at each node. It should return an integer representing the maximum depth of the tree."}, {"instruction": "Given a string containing an equation of the form \"a op b = c\", where op is an arithmetic operator (+, -, \\*, /), implement a function `evaluate_equation` that evaluates the equation and returns the result as a float.\n\nThe function should accept two strings `a`, `b`, and `op` representing the operands and operator, respectively. The function should raise a `ValueError` if `op` is not one of `+`, `-`, `*`, `/`, or raise `ZeroDivisionError` if `op` is `/` and `b` is equal to `0`.\n\nYou may assume that the input is valid and follows the format described above.\n\nFor example, `evaluate_equation('5', '2', '+')` should return `7.0`, and `evaluate_equation('2', '5', '-') should return `-3.0`."}, {"instruction": "Create a Python function that accepts a string and returns a list of all possible palindrome substrings within the string. The function should return the substrings in lexicographical order, and the substrings should be non-overlapping."}, {"instruction": "Write a Python function that takes an input string and splits it into a list of words based on the following rules:\n- The input string is a valid English sentence, with words separated by spaces.\n- Words can contain letters, digits, and punctuation marks.\n- Words in the input string can be of any case, and there might be spaces between words.\n- Words can be of any length, and the punctuation marks at the end of each word might not follow a space.\n\nThe function should return a list of words from the input string, with all characters in lowercase and no leading or trailing spaces."}, {"instruction": "Create a Python function that returns an integer representing the minimum number of jumps needed to reach the end of a given list of non-negative integers where each element in the list represents the maximum jump distance from the current index.\n\nThe function should accept a list of integers as input and return an integer representing the minimum number of jumps needed to reach the end of the list. If it is not possible to reach the end of the list, the function should return `-1`.\n\nFor example, given the input list `[2, 3, 1, 1, 4]`, the function should return `2` because the optimal strategy is to jump from indices 0 and 3, resulting in a total of 2 jumps."}, {"instruction": "Create a Python function that takes a string of digits and converts it into a list of integers. The function should be able to handle leading zeros in the input string."}, {"instruction": "Write a Python function that computes the Fibonacci sequence using recursion. The function should accept an integer `n` and return the `n`th Fibonacci number."}, {"instruction": "Create a Python function that translates a valid Roman numeral string into an integer. The function should support all Roman numeral values up to 3999.\n\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. Their values are as follows:\n- I = 1\n- V = 5\n- X = 10\n- L = 50\n- C = 100\n- D = 500\n- M = 1000\n\nThe symbols I, X, and C can be repeated up to three times with no limit to the number of repetitions. The same symbol can be subtracted from the next higher value symbol to represent the number.\n\nFor example, the Roman numeral string `'MCMXCIX'` is represented as 1999, and `'IV'` is represented as 4.\n\nThe function should accept a string containing a Roman numeral representation and return an integer representing the value of the numeral. If the input string is not a valid Roman numeral, the function should return `0`."}, {"instruction": "Create a Python function that performs the following tasks:\n1. Take two strings as input, `string1` and `string2`.\n2. Split `string1` into a list of character tokens using the provided `separator` separator.\n3. For each token, convert it to its upper-case counterpart.\n4. For each token, check if it matches the following pattern: `[0-9]+[a-z]+`.\n   If it matches, add it to the `matches` list.\n5. Return the `matches` list.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert match_pattern('123abc', '123') == ['123']\nassert match_pattern('123abcabc', '123') == ['123']\nassert match_pattern('xyc123a', '123') == ['123']\nassert match_pattern('abc123abc', '123') == ['123']\nassert match_pattern('123abcxyz', '123') == []\n```"}, {"instruction": "Create a Python function that computes the nth Fibonacci number using recursion.\n\nThe function should accept a non-negative integer `n` and return the `n`th Fibonacci number. The function should handle edge cases such as negative input and zero input gracefully. It should also handle special cases such as `n = 0` and `n = 1` to ensure correctness in the base case.\n\nFor example, if the function is called with `n = 2`, it should return `1`. If the function is called with `n = 4`, it should return `3`."}, {"instruction": "Develop a Python function that takes a number of positive integers and returns a string representing the Roman numeral equivalent. The function should support all valid Roman numerals from 1 to 3999. For example, `to_roman(4000)` should return `'MMMM'`."}, {"instruction": "Create a Python function that takes a list of integers and returns a new list that sums all adjacent values in the list. If the sum of any adjacent values exceeds 100, the function should return the sum of half of each such pair.\n\nFor example, given the following list:\n\n```python\nmy_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n```\n\nThe function should return the following list:\n\n```python\n[10, 50, 130, 210, 250, 330, 390, 450, 490, 550]\n```"}, {"instruction": "Create a Python function `get_all_strings` that generates all possible strings that can be formed from a given set of characters. The function should accept a string of characters and return a list of all possible strings that can be formed using these characters. The function should handle invalid input gracefully, such as when a character is repeated or when the input string is empty."}, {"instruction": "Create a Python function that receives a number as an input and returns the number of '1' digits in the binary representation of the input number. The function should ignore the input if it is not a valid integer."}, {"instruction": "Create a Python function that returns the number of integer-valued paths from the top-left corner of an `n x m` grid to the bottom-right corner. The grid has the following properties:\n- The top-left corner is always accessible from the grid.\n- The bottom-right corner can only be accessed from the top-right corner.\n- Each cell can only be accessed from cells that follow it in row and column."}, {"instruction": "Create a Python function that finds all the combinations of a given base string and an input string with the same length. The base string should be used as a template to create all combinations."}, {"instruction": "Create a Python function to implement the Fibonacci series in which the first element is 0 and the second is 1. The Fibonacci series is defined as:\n\n$$\n\\text{Fib}(n) = \\begin{cases}\n    \\text{Fib}(n-1) + \\text{Fib}(n-2) & \\text{if } n \\gt 2 \\\\\n    1 & \\text{if } n = 1 \\\\\n    0 & \\text{if } n = 0\n\\end{cases}\n$$"}, {"instruction": "Develop a Python function to validate a string representation of a date in the format `mm/dd/yyyy` (e.g., `09/15/2021`). The function should return `True` if the date is valid, and `False` otherwise.\n\nThe function should consider all possible valid date patterns, including:\n- Month as a number between `1` and `12`\n- Day as a number between `1` and `31`\n- Year as a number between `1000` and `9999`\n\nFor example, the function should pass the following assertions:\n\n```python\nassert is_valid_date('09/15/2021')\nassert not is_valid_date('13/15/2021')\nassert not is_valid_date('15/14/2021')\nassert not is_valid_date('09/32/2021')\nassert not is_valid_date('12/32/2021')\nassert not is_valid_date('02/29/2000')\nassert not is_valid_date('02/29/2020')\n```"}, {"instruction": "Create a Python function to convert a string representation of a Roman numeral into its integer value. The input string can include any combination of letters between 'I' and 'M', and should follow the form of 'MCMXCIX'. The function should return an integer value representing the Roman numeral."}, {"instruction": "Write a Python function that takes a positive integer `n` as input and returns the sum of its digits raised to the power of the number itself. For example, `156` is the input that should return `657`, since `1^1 + 5^5 + 6^6 = 1 + 3125 + 46656 = 46666`."}, {"instruction": "Create a Python function that generates all possible combinations of a given string of digits.\n\nThe function should accept a string of digits (e.g., '1234') and return a list of all possible combinations of the digits as strings, such as ['1', '2', '3', '12', '13', '123', '23', '234', '34', '1234']."}, {"instruction": "Create a Python function to convert a Roman numeral string into its corresponding integer value. The function should support the following mapping between letters and their integer values:\n\n|  Letter  |  Value  |\n|   ----   |  ----   |\n|  I       |   1     |\n|  V       |   5     |\n|  X       |   10    |\n|  L       |   50    |\n|  C       |   100   |\n|  D       |   500   |\n|  M       |   1000  |\n\nThe function should support both capital and lowercase letters in the input string. The function should accept a single input argument, `roman_numeral`, which is a string containing the Roman numeral to be converted. The function should return an integer value representing the corresponding integer representation of the Roman numeral."}, {"instruction": "Create a Python function that reveals whether a specified integer is a happy number. A happy number is a positive integer that eventually reaches the number 1 after a sequence of operations. The sequence of operations for a given number `n` can be defined as follows:\n\n- Take the square of all digits in `n`, and sum their individual values.\n- If the resulting number is equal to `1`, then the number is considered a happy number.\n- Otherwise, repeat the process, recalculating the sum of the squared digits, until either a `1` or a repeating sequence is reached.\n\nHere are some examples of happy numbers:\n- 1, 7, 10, and 13 are all happy numbers because they eventually reach the number `1` after the operations.\n- 89 is not a happy number because it eventually leads to the repeating sequence 82, 68, 100, 1."}, {"instruction": "Implement a Python function that converts a positive integer to its Roman numeral equivalent. The function should use recursion to convert the integer into its equivalent Roman numeral representation."}, {"instruction": "Given a positive integer `n` and a string `s`, implement a Python function `match_substring` that checks if any substring of length `n` in `s` matches the given pattern.\n\nThe pattern can contain wildcards denoted by `?` and `*` characters. The wildcard `?` matches any single character, while `*` matches any sequence of zero or more characters. If a match is found, the function should return `True`; otherwise, it should return `False`."}, {"instruction": "Create a Python function that determines whether a given string is a palindrome. A palindrome is a string that is the same forward and backward. For example, \"racecar\" and \"mom\" are palindromes, but \"dog\" and \"cat\" are not."}, {"instruction": "Write a Python function that accepts a string `text` and returns a list of all words in the text that are of a given `min_length` in length. The function should ignore words that contain non-alphabet characters and perform case-insensitive matching.\n\nFor example, `find_words(text='The rain in spain stays mainly in the plain', min_length=4)` should return `['rain', 'mainly']`."}, {"instruction": "Develop a Python function that recursively splits a string into substrings and returns a list of substrings based on the specified patterns. The function should support splitting strings based on several patterns, including:\n\n- Word boundary (e.g., \"hello world\" -> [\"hello\", \"world\"])\n- Alphanumeric sequence (e.g., \"abc-123\" -> [\"abc\", \"123\"])\n- Numeric sequence (e.g., \"123-abc\" -> [\"123\", \"abc\"])\n- Word character (e.g., \"a-b-c\" -> [\"a\", \"b\", \"c\"])\n\nThe function should also support splitting the string into substrings based on a given delimiter, such as whitespace or hyphens."}, {"instruction": "Create a Python function to determine if a string is a valid IPv4 address. A valid IPv4 address consists of exactly four segments, each containing between 0 and 255 digits. Each segment should be separated by a single dot, and the entire address should be enclosed in double square brackets (e.g., \"[123.456.789.10]\").\n\nIf the string is not a valid IPv4 address, the function should raise a ValueError. Otherwise, the function should return a dictionary containing the four segments of the address."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data type casting, bitwise operations for instruction encoding, pointer arithmetic for instruction decoding\n\n### Task", "fingerprint": null, "content": {"code": "bool testUnpacker(){\r\n\tuint32 inst = 0xdeadface;\r\n\tsize_t unpackerSize = sizeof(Instruction::UNPACKER);\r\n\t//std::cout << \"sizeof(Instruction::UNPACKER) = \" << unpackerSize << endl;\r\n\tif(unpackerSize != sizeof(uint32)){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tInstruction::UNPACKER &inst2= reinterpret_cast<Instruction::UNPACKER &>(inst);\r\n\r\n\tif(inst2.i.op != inst2.j.op){\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}", "docstring": "//char *buffer = new char[length];\r", "function_name": "readFile"}, "id": 3, "seed": "bool testUnpacker(){\r\n\tuint32 inst = 0xdeadface;\r\n\tsize_t unpackerSize = sizeof(Instruction::UNPACKER);\r\n\t//std::cout << \"sizeof(Instruction::UNPACKER) = \" << unpackerSize << endl;\r\n\tif(unpackerSize != sizeof(uint32)){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tInstruction::UNPACKER &inst2= reinterpret_cast<Instruction::UNPACKER &>(inst);\r\n\r\n\tif(inst2.i.op != inst2.j.op){\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}", "__index_level_0__": 1, "concepts": ["data type casting", "bitwise operations for instruction encoding", "pointer arithmetic for instruction decoding"], "parsing_result": [{"instruction": "Design a Python function `decode_instruction` that accepts an unsigned integer as input and returns a `namedtuple` containing the information about the instruction. The input integer should be a little-endian binary encoding of the instruction, which consists of a 4-bit opcode followed by two 5-bit registers, as follows:\n\n```\n00000000000000000000000000000000\n| opcode | reg_a | reg_b |\n```\n\nThe `namedtuple` should contain the `opcode`, `reg_a`, and `reg_b` fields. The opcode field should be a symbolic constant defined by the program, while the register fields should be integer values.\n\nThe function should raise a `ValueError` if the input is not a valid little-endian binary encoding."}, {"instruction": "Create a Python function `decode_instruction` that takes a 32-bit integer as an instruction and returns the instruction's decoded form. The function should return a dictionary with the following keys:\n```python\n{\n    'opcode': 0,\n    'register0': 0,\n    'register1': 0,\n    'register2': 0,\n    'immediate': 0\n}\n```\nThe keys indicate the respective instruction fields that should be populated by the function. The opcode of the instruction is the first 6 bits of the input integer, while the remaining 26 bits are split into 5 groups of 5 bits, representing the other fields."}, {"instruction": "Create a Python function `encode_instruction` that encodes a single machine instruction in binary. It should accept a string of the format \"instruction_name operand1 operand2\" and return a string of 64 bits representing the instruction. The instruction names and operands should be case insensitive and the allowed instructions are:\n- `add`\n- `sub`\n- `mul`\n- `div`\n- `mod`\n- `shl`\n- `shr`\n- `and`\n- `or`\n- `xor`\n\nThe operand data types can be one of the following:\n- `byte`\n- `word`\n- `dword`"}, {"instruction": "Create a Python function `encode_instruction` that accepts a binary string representing an instruction, and returns the encoded instruction, which includes the length of the instruction, the instruction itself, and the opcode (the first bit of the instruction). The opcode should be `0000` for `add`, `0001` for `sub`, `0010` for `mul`, and `0011` for `div`. The function should raise ValueError when the opcode is invalid or the input is not a binary string."}, {"instruction": "Create a Python function to encode a string as a series of 16-bit instructions. The instructions are to be stored in the string as a series of ASCII characters. Byte-order is big-endian. The encoding process should be to use the 4-bit immediate value as the instruction opcode, and the rest of the bits as 8-bit data. This encoding process should be to use the 4-bit immediate value as the instruction opcode, and the rest of the bits as 8-bit data.\n\nFor example, given the input string \"Hello world\", the function should return the string \"H0e3l2o0a0r0l0o0d0e0,0w0r0l0d0\" with the following instructions:\n\n```\nH0e3l2o0a0r0l0o0d0e0,0w0r0l0d0\n01000000 00000011\n01000010 00001110\n01000010 00000101\n01000010 00011011\n01000010 00000100\n01000000 00000011\n01000011 00000111\n01000000 00000100\n```\n\nThe function should handle cases where the input is a string of length divisible by 2 or any remainder with `len(string) % 2 == 1`."}, {"instruction": "Create a Python function that converts a binary encoded instruction string into its decoded equivalent. The input string is the representation of an 8-bit instruction written in machine code. The instruction is represented as 2 characters, where the first character represents the instruction opcode and the second character represents the opcode operands. The function should return a Python dictionary that maps an opcode to the corresponding instruction and its operand bit patterns."}, {"instruction": "Create a Python function `encode_instruction` that encodes a basic instruction into a hexadecimal string. The instruction should take a list of data types (e.g., an integer, a float, etc.) and return a hexadecimal string. Each data type should be encoded into a 4-byte value (big-endian order) and the instructions should be packed into a single 12-byte instruction. For instance, given the list `[1, 0.123, True]` the function should return the string `0x0000000100000001e03f223c00`. The function should also be able to handle the case where the list is empty."}, {"instruction": "Design a Python function to encode and decode instructions from binary to text and vice versa. The function should accept two arguments: an instruction string and a `mode` to specify the desired conversion. The `mode` can be either 'encode' or 'decode', and the function should return the encoded or decoded instruction string, respectively.\n\nTo encode an instruction, the function can use a pre-installed table with instructions and their corresponding binary representations. The function should return the instruction string if the instruction is not found in the table, or raise an `AssertionError` if the instruction is found but the length of the binary string is not equal to 32. To decode an instruction, the function can use a pre-installed table with instructions and their corresponding binary representations. The function should return the instruction string if the binary string is not found in the table, or raise an `AssertionError` if the binary string is found but the length of the instruction is not equal to 12.\n\nThe function should also convert the binary string to uppercase before returning it."}, {"instruction": "Create a Python function `encode_instruction` that converts an unsigned integer to a 32-bit hexadecimal string. The function should accept an unsigned integer and convert it into a 32-bit 0x-prefixed hexadecimal string padded with zeros if necessary. For example, `encode_instruction(1032)` should return the string `'0x404'`, while `encode_instruction(5)` should return the string `'0x5'`."}, {"instruction": "Create a Python function `encode` that converts a Python list, tuple, or dictionary into a string representation that can be used to recreate the original data as a list, tuple, or dictionary. The function should take a single argument, `data`. It should return a single string of text characters that can be used to reconstruct the original data."}, {"instruction": "Design a Python function that implements an assembly instruction decoder for the following architecture:\n\n- register file: the register `R0` is read-only and holds a fixed address that is never modified\n- instruction register: the instruction register `IR` holds an instruction that is executed by the processor\n- memory: the memory address `M[0]` is reserved for storing the program counter (PC)\n\nThe instruction register is a 32-bit binary string of the following format:\n\n- 11 bits for an opcode\n- 5 bits for a register number `rd`\n- 5 bits for a register number `rs1`\n- 5 bits for a register number `rs2`\n\nThe opcode field maps to the following set of 11 instructions:\n\n- `0000001`: fetch the value in register `rs1` and store to register `rd`\n- `0000010`: store the value in register `rs1` to memory address `rd`\n- `0000011`: add the values in registers `rs1` and `rs2` and store to register `rd`\n- `0000100`: subtract the values in registers `rs1` and `rs2` and store to register `rd`\n- `0000101`: load the value at memory address `rs1` to register `rd`\n- `0001000`: branch to address `rs1` if `rd` equals 0\n- `0001001`: branch to address `rs1` if `rd` equals 1\n- `0001010`: branch to address `rs1` if `rd` equals 2\n- `0001011`: branch to address `rs1` if `rd` equals 3\n- `0001100`: branch to address `rs1` if `rd` equals 4\n\nThe function should return a list of names corresponding to the instructions `fetch`, `store`, `add`, `subtract`, `load`, `brz`, `brn`, `brt`, `brf` that correspond to the 11 bit opcode.\n\nThe function should support different input formats:\n\n- as a 32-bit binary string\n- as a 4-item tuple of 32-bit integers"}, {"instruction": "Create a Python function `encode` that takes a list of 32-bit integers as input and returns a list of 8-bit integers where each element of the output represents the index of the most significant 1 bit of its corresponding 32-bit integer in the input. For example, the list [4, 10, 3, 1] should return [1, 1, 0, 0].\n\nCreate another Python function `decode` that takes a list of 8-bit integers and returns a list of 32-bit integers with the same values as its corresponding element in the input. For example, the list [1, 1, 0, 0] should return [4, 10, 3, 1]."}, {"instruction": "Implement a Python function to convert a list of byte instructions in hexadecimal representation to a list of binary instructions. The function should accept a list of strings in hexadecimal representation and return a list of strings in binary representation."}, {"instruction": "Design a Python function that encodes and decodes instructions for a simple stack-based virtual machine. The instructions are a sequence of integers in the form of a list, where each integer represents either a virtual machine operation or a value to be pushed onto the stack. To encode an instruction, first determine the type of instruction (i.e., whether it is a push operation or a pop operation or a return operation) based on the first integer in the instruction. Then, depending on the type, the rest of the integers in the instruction are processed and encoded into a sequence of 0s and 1s using a bitwise operation. For example, given the instruction [1, 1, 1, 1], the function should return `0b0001`, while `[1, 1, 1, 4]` should return `0b0100`. The function should also handle the case where the input instruction does not match the pattern of a valid instruction."}, {"instruction": "Create a Python function `encode_instructions` that takes in a list of instructions as a string and outputs the corresponding `int` representation of those instructions. For example, the instructions `'mov r4, r3'` and `'mov r4, #100'` should both be represented as `1073741900`. The function should also handle instructions with hexadecimal values, as in `'mov r4, #0x100'`."}, {"instruction": "Create a Python function that decodes an instruction of a simple computer from hexadecimal representation to an assembly instruction string. The input represents a one-line assembly instruction encoded as a hexadecimal string. Assume the instruction is encoded in the following format:\n\n- first two digits are the opcode (instruction type)\n- third digit is the register opcode (0-3)\n- last three digits are the operands (indexed by the register opcode)\n\nFor example, the instruction `0x02000003` should decode to a string of \"load 3 from 0 into register 0\" while `0x0200000F` should decode to \"load 8 from 0 into register 2\"."}, {"instruction": "Implement a Python function that translates an instruction string into its binary form using a mapping from instructions to binary strings. The function should accept an instruction string and return the resultant binary string, if it exists in the mapping. Otherwise, the function should return the empty string."}, {"instruction": "Implement a Python function `encode_instructions` that converts a list of instruction strings into a list of integers using a fixed instruction encoding. The function should return a list of integers that correspond to the instruction strings. Each integer should be encoded as a 32-bit unsigned integer. The function should throw a `ValueError` if an invalid instruction string is encountered.\n\nThe instructions should be encoded as follows:\n- `add` instruction: 0b00000001\n- `sub` instruction: 0b00000010\n- `mul` instruction: 0b00000011\n- `div` instruction: 0b00000100\n- `mod` instruction: 0b00000101\n- `print` instruction: 0b00000110\n\nThe function should throw a `ValueError` if an invalid instruction string is encountered."}, {"instruction": "Implement a Python function `generate_instructions` that accepts a list of `Operation` objects and returns a list of tuples of (opcode, operands) for each instruction. The `Instruction` class should have the following properties:\n- `opcode`: the operation (e.g., `add`, `multiply`, `divide`, or `modulo`) to be performed\n- `operands`: the operands to be used in the operation\n- `expected_result`: the expected output of the operation\n- `actual_result`: the actual output of the operation\n\nThe `generate_instructions` function should return a list of tuples of `(opcode, operands)` for each `Instruction` object."}, {"instruction": "Create a Python function `encode_instruction` that encodes a floating-point number as a 32-bit unsigned integer. The function should accept the following arguments:\n\n- `instruction`: the floating-point number to encode\n- `rounding_mode`: how the number should be rounded when encoded (`rne`, `rni`, `rzz`, `rps`, `rme`, `rmz`, `rpc`, `rp`) (default `rne`)\n- `rounding_direction`: how the number should be rounded if the result is infinite (`round_down`, `round_up`, `round_nearest`, `round_to_zero` (default `round_nearest`))\n- `mantissa_width`: how many bits are used to store the mantissa (default `23`)\n- `exponent_width`: how many bits are used to store the exponent (default `8`)\n- `sign_bit`: whether the bit at position `0` of the resulting integer should be used to store the sign of the number (default `True`)"}, {"instruction": "Design a Python function `encode_instruction` that takes an instruction string in the form `\"mnemonic operands\"` and returns a 32-bit unsigned integer. The function should not support any instructions with more than 3 operands. The function should raise a `ValueError` if it encounters an invalid instruction format when parsing the input. The instruction encoding should use the following instructions as mnemonics:\n\n- `add`\n- `sub`\n- `mul`\n- `div`\n- `lt`\n- `gt`\n- `eq`\n\nThe function should support the following operand formats:\n\n- `reg reg`\n- `reg reg, imm`\n- `reg reg, reg`\n- `reg imm`\n\nEach operand should be represented by a 5-bit unsigned integer, with the special values `imm` and `reg` indicating immediate data and register operands, respectively. The function should return an unsigned integer representing the instruction encoding."}, {"instruction": "Create a Python function `decode_instruction` that decodes instruction bytes into an instruction object with a `name` and `arguments` field. The input instruction bytes should be converted to a string and interpreted as a set of bits, with each instruction byte consisting of exactly 16 bits. The function should ignore the most-significant bit in the instruction byte, and it should only consider the lower 15 bits of the byte for decoding.\n\nThe function should first determine the instruction `name` based on the first 4 bits of the instruction byte. Note that instructions can be fetched the same way as data. For example, the instruction `00010001` (hexadecimal) is the instruction `inc_A` and the instruction `01000000` (hexadecimal) is the instruction `dec_A`.\n\nThe function should then determine the `arguments` based on the remaining 11 bits of the instruction byte. The 11 bits can be treated as a 2-dimensional array with two rows and 5 columns. Each argument can be accessed using the following mapping:\n\n- row 0: `A`\n- row 1: `B`\n- column 0: `I`\n- column 1: `J`\n- column 2: `K`\n- column 3: `L`\n- column 4: `M`\n\nThe function should then return a `namedtuple` with the `name` and `arguments` fields. For example, the instruction `00101010` (hexadecimal) should return the object `namedtuple(name='add_J_K', arguments=('A', 'B'))`."}, {"instruction": "Create a Python function `encode_instruction` that takes an `int` representing an instruction in `RISC` language and returns it as an `int` with binary string representation.\n\nThe `RISC` language is a simple instruction encoding standard that has the following three fields:\n\n1. `opcode` - a `4` bit binary string denoting the operation to be performed,\n2. `rd` - a `3` bit binary string denoting the destination register to be used,\n3. `rs` - a `3` bit binary string denoting the source register to be used,\n\nThe `opcode` can be any value from `0` to `15`, and the other two binaries should be `0`s.\n\nThe function should return the encoded instruction in `int` type, with the `opcode` field at the lowest bit and the other two fields at `0`s.\n\nFor example, `encode_instruction(10)` should return `688`."}, {"instruction": "Create a Python function `decode_instruction` that accepts an instruction as a 32-bit integer and returns a string representation of the operation and its parameters. For example, given the input `0b10000000111001010000101100010010`, the function should return 'add, a, b, 5'. The function should be able to decode the following instructions:\n\n```python\n# 32-bit binary integer\n# operation: 0000\nregister a: 11100101\nregister b: 00001011\nregister c: 00010010\n\n# 32-bit binary integer\n# operation: 0001\nregister a: 11100101\nregister b: 11100101\n\n# 32-bit binary integer\n# operation: 0010\nregister a: 11100101\nregister b: 00000000\nregister c: 00000000\n\n# 32-bit binary integer\n# operation: 0011\nregister a: 11100101\nregister b: 00000000\nregister c: 11100101\n\n# 32-bit binary integer\n# operation: 0100\nregister a: 11100101\nregister b: 00000000\nregister c: 00000000\n\n# 32-bit binary integer\n# operation: 0101\nregister a: 11100101\nregister b: 11100101\nregister c: 00000000\n\n# 32-bit binary integer\n# operation: 0110\nregister a: 11100101\nregister b: 11100101\nregister c: 11100101\n```"}, {"instruction": "Create a Python function `get_instruction` that decodes instructions stored in a binary format into a human-readable string. The instructions are represented as a list of bit-strings for each instruction, which may or may not be the same length."}, {"instruction": "Create a Python function for encoding and decoding a set of 8-bit instructions. The function should accept a list of instructions as input and should return a list of bytes. Each instruction is a list of zero or more 8-bit integers. The function should be able to encode and decode instructions of both 8-bit and 16-bit encodings.\n\nFor example, given the input of `[0, 1, 2, 3, 4, 5, 6, 7]` and `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]` respectively, the function should return `bytearray(b'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07')`, `bytearray(b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\\x0B\\x0C\\x0D\\x0E\\x0F\\x10')` respectively.\n\nThe function should also be able to handle cases where the input is not a list of integers, or where some of the input integers are outside of the range [0, 255] (e.g., [0, 256, 257], [0, 256, 257, 258, 258])."}, {"instruction": "Create a Python function that accepts two strings, `program` and `instruction` as input. The function should return the integer bit representation of the instruction as a Python integer that can be used to address the instruction in a program. The function should return `-1` for invalid instructions."}, {"instruction": "Create a Python function `decode_instruction` that accepts a 64-bit integer value representing a computer instruction, and returns a tuple of the instruction type (integer or float), source/destination register indices (integer), and instruction value (float)."}, {"instruction": "Create a Python function `assemble_instruction` that converts a list of bytes into an instruction. The instruction should be a structure of 10 bytes in the following format:\n\n```\n+---+---+---+---+---+---+---+---+---+---+\n| S | S | S | S | S | S | S | S | S | S |\n+---+---+---+---+---+---+---+---+---+---+\n|             R             |     I     |\n+---+---+---+---+---+---+---+---+---+---+\n```\n\n- S is the opcode bit, representing the operation to be performed by the processor.\n- R is the register index, representing the position of the source value in the instruction.\n- I is the immediate value, representing the constant to be used by the instruction.\n\nThe function should accept a list of bytes and return a single byte representing an instruction that can be processed by a simple processor with a 10-byte instruction memory.\n\nFor instance, `assemble_instruction([0, 2, 3, 4, 5, 6, 7, 8, 9, 10])` should return `0x213456789A` (in hex), which corresponds to the following instruction:\n\n```\nS = 0\nR = 2\nI = 3456789A\n```"}, {"instruction": "Create a Python function `encode_instruction` that encodes an instruction memory address and the corresponding operation into a single integer. The function should have two input parameters, `address` and `operation`, each of which is a string."}, {"instruction": "Design a Python function that computes the Fibonacci sequence value for a given index. The function should only accept a single integer input, and it should return a single integer output. The function should raise a ValueError when the input is not an integer or a negative integer."}, {"instruction": "Create a Python function `encode_instruction` that takes an instruction string and returns an integer representing the instruction code. The function should accept the following instructions as inputs as strings: 'nop', 'acc', 'jmp' and 'jnz' for 'no operation', 'accumulate', 'jump', and 'jump if not zero' respectively. The function should raise a ValueError if the input is not among these values.\n\nThe function should also accept 'nop' and 'jmp' as integer values, which correspond to the decimal instructions 0 and 1 respectively.\n\nThe instruction codes should be represented in decimal using bitwise operations for instruction encoding. The function should handle cases where the input is not a valid instruction string or integer."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 5\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: exception handling, list copying, arrays, iterating over a list, error handling, control flow\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_ICollection_CopyTo_mE384ED5CFB72BD40E4ED9118312BBCCA784A85A8_gshared (List_1_t4172DDD081E8C31E82629AD17BC2912ECE329CCD * __this, RuntimeArray * ___array0, int32_t ___arrayIndex1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeArray * L_0 = ___array0;\n\t\tif (!L_0)\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tRuntimeArray * L_1 = ___array0;\n\t\tNullCheck((RuntimeArray *)L_1);\n\t\tint32_t L_2;\n\t\tL_2 = Array_get_Rank_mE9E4804EA433AA2265F9D9CA3B1B5082ECD757D0((RuntimeArray *)L_1, /*hidden argument*/NULL);\n\t\tif ((((int32_t)L_2) == ((int32_t)1)))\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)7, /*hidden argument*/NULL);\n\t}\n\nIL_0012:\n\t{\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tCachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E* L_3 = (CachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E*)__this->get__items_1();\n\t\tRuntimeArray * L_4 = ___array0;\n\t\tint32_t L_5 = ___arrayIndex1;\n\t\tint32_t L_6 = (int32_t)__this->get__size_2();\n\t\tArray_Copy_m3F127FFB5149532135043FFE285F9177C80CB877((RuntimeArray *)(RuntimeArray *)L_3, (int32_t)0, (RuntimeArray *)L_4, (int32_t)L_5, (int32_t)L_6, /*hidden argument*/NULL);\n\t\tgoto IL_0033;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&ArrayTypeMismatchException_tFD610FDA00012564CB75AFCA3A489F29CF628784_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0029;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0029:\n\t{ // begin catch(System.ArrayTypeMismatchException)\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)((int32_t)18), /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_0033;\n\t} // end catch (depth: 1)\n\nIL_0033:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "List_1_System_Collections_IList_Add_mB11B0BE086058B75AABAFE706CC3AAA0012259E8_gshared"}, "id": 4, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_ICollection_CopyTo_mE384ED5CFB72BD40E4ED9118312BBCCA784A85A8_gshared (List_1_t4172DDD081E8C31E82629AD17BC2912ECE329CCD * __this, RuntimeArray * ___array0, int32_t ___arrayIndex1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeArray * L_0 = ___array0;\n\t\tif (!L_0)\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tRuntimeArray * L_1 = ___array0;\n\t\tNullCheck((RuntimeArray *)L_1);\n\t\tint32_t L_2;\n\t\tL_2 = Array_get_Rank_mE9E4804EA433AA2265F9D9CA3B1B5082ECD757D0((RuntimeArray *)L_1, /*hidden argument*/NULL);\n\t\tif ((((int32_t)L_2) == ((int32_t)1)))\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)7, /*hidden argument*/NULL);\n\t}\n\nIL_0012:\n\t{\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tCachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E* L_3 = (CachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E*)__this->get__items_1();\n\t\tRuntimeArray * L_4 = ___array0;\n\t\tint32_t L_5 = ___arrayIndex1;\n\t\tint32_t L_6 = (int32_t)__this->get__size_2();\n\t\tArray_Copy_m3F127FFB5149532135043FFE285F9177C80CB877((RuntimeArray *)(RuntimeArray *)L_3, (int32_t)0, (RuntimeArray *)L_4, (int32_t)L_5, (int32_t)L_6, /*hidden argument*/NULL);\n\t\tgoto IL_0033;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&ArrayTypeMismatchException_tFD610FDA00012564CB75AFCA3A489F29CF628784_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0029;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0029:\n\t{ // begin catch(System.ArrayTypeMismatchException)\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)((int32_t)18), /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_0033;\n\t} // end catch (depth: 1)\n\nIL_0033:\n\t{\n\t\treturn;\n\t}\n}", "__index_level_0__": 2, "concepts": ["exception handling", "list copying", "arrays", "iterating over a list", "error handling", "control flow"], "parsing_result": [{"instruction": "Create a Python function to reverse a string in-place. In other words, the input string should be manipulated in-place and the order of the characters should be reversed without using built-in functions like `str.reverse()`. You should also implement exception handling to detect cases of invalid inputs such as empty strings or strings that cannot be reversed. Finally, ensure that the function handles cases where the input string is of odd length."}, {"instruction": "Create a Python function `simulate_coin_flips(num_flips: int)` that randomly flips a coin `num_flips` times and returns a list of `num_flips` boolean values. The function should simulate coin flips by generating a random number between 0 and 1 and using it to determine whether the coin flip is heads or tails. For example, `simulate_coin_flips(10)` should return a list of 10 booleans representing the results of 10 coin flips, with `True` representing heads and `False` representing tails.\n\nThe function should handle invalid inputs such as negative numbers and non-integer inputs gracefully by raising exceptions or returning `None`. Additionally, the function should handle edge cases such as a single coin flip or no coin flips, returning empty lists or lists of the appropriate length."}, {"instruction": "Write a Python function to count the number of sublists that exist in a given list, where each sublist has a length of 2. Also, ensure the function correctly handles list lengths that are not divisible by 2."}, {"instruction": "Create a Python function that copies a list of lists, but contains multiple levels of nested lists. The function should handle copying nested lists of varying depth and handle errors gracefully. Validate that the input is a list of lists."}, {"instruction": "Create a Python function that receives a list of numbers as input, and returns a new list containing only the odd numbers from the original list. This function should handle any exceptions and edge cases related to the input list. The function should also support iterating over the list multiple times, even if the original list is modified by the user after the function is called."}, {"instruction": "Create a Python function that takes a list of numbers and sorts them in ascending order. The function should use an efficient algorithm to perform the sorting.\n\nSpecifically, the function should use the merge sort algorithm, which divides the list into two halves and recursively sorts each half, then merges two sorted lists to yield a final sorted list. The function should handle erroneous inputs gracefully, such as having a non-numeric value or a list that is empty."}, {"instruction": "Given a list of integers, return a new list that contains elements from the first list that aren't present in the second list. The function should handle duplicate elements in the first list. The function should handle cases where the lists have different sizes.\n\nThe solution should be written using a for loop, but it's allowed to use a list comprehension to simplify the logic."}, {"instruction": "Create a Python function that reverses a list of values by swapping the first and last elements, the second and second-to-last elements, the third and third-to-last elements, and so on until the middle is reached. The function should handle lists of odd and even length, including empty lists. Ensure that the function works correctly when the input is invalid, such as a non-iterable object or a non-numeric value, or when the input is empty."}, {"instruction": "Write a Python function that accepts a list of integers and returns a new list that contains the elements of the original list, repeated n times. If the specified value of n is negative, the function should return a `ValueError` exception. The function should raise an exception if the input list is empty or if `n` is zero.\n\nFor example, given a list `[1, 2, 3]` and `n = 3`, the function should return `[1, 2, 3, 1, 2, 3, 1, 2, 3]`."}, {"instruction": "Develop a Python function `pct_change_from_last` that computes the percent change between each successive element in a sequence. The function should accept a single list of numbers as input and return a list of change percentages.\n\nThe function should raise an exception when passed a list with less than two elements. Additionally, ensure that the function returns a copy of the input list if passed an empty list.\n\nHere are some example usages of the function:\n```\n>>> pct_change_from_last([1, 2, 3, 4, 5])\n[None, 0.2, 0.2, 0.2, 0.2]\n>>> pct_change_from_last([])\n[]\n>>> pct_change_from_last([1])\n[]\n>>> pct_change_from_last([1, 1])\n[0]\n```"}, {"instruction": "Write a Python function that takes a list of integers as input, and returns a new list of integers containing only the unique elements of the input list. The function should use a try-except block to handle errors that may arise, such as if the input is not a list of integers. Additionally, the function should use list comprehension to create a new list with only unique elements."}, {"instruction": "Write a Python function called `combine_arrays` that takes two lists of non-negative integers as input and returns a list containing the numbers from both lists, without duplicates. The function should also print out the number of duplicates for each input list. For example, `combine_arrays([1, 2, 3], [2, 3, 4])` should print `3 duplicates for the first list and 3 duplicates for the second list`."}, {"instruction": "Create a Python function to check if a list of integers is a valid \"lucky\" sequence. The function should return `True` if the list contains an equal number of positive and negative integers, and `False` if the list contains any other combination of positive and negative integers.\n\nThe function should handle cases where the input list is empty or contains no integers. It should also handle cases where the element in the list is not an integer.\n\nUse exception handling to handle any errors that occur during the execution of the function, such as invalid input types or missing elements in the list.\n\nTo ensure that the list is shallow copied, the function should iterate over the list using a for loop and not use the `copy` method.\n\nThe function should also handle cases where the list contains an equal number of positive and negative integers. It should use conditional statements to check if the list has the same number of positive and negative integers."}, {"instruction": "Implement a Python function that returns a list of all possible combinations of two elements in a given list, in an almost-alphabetical order. For example, given the input list `[\"A\", \"B\", \"C\", \"D\"]`, the function should return lists like `[\"A-B\", \"A-C\", \"A-D\", \"B-A\", \"B-C\", \"B-D\", \"C-A\", \"C-B\", \"C-D\", \"D-A\", \"D-B\", \"D-C\"]`.\n\nThe function should handle different types of inputs including empty lists and lists of length 1. Ensure the function handles any errors gracefully and returns default values when necessary."}, {"instruction": "Create a Python function `ordered_ranges` that takes a list of positive integers as input and returns a new list of positive integers that form ordered ranges. A range is defined as a set of consecutive numbers starting from the first element of the list and ending with the last element. The function should return a list of ranges in the following format: \"[Start1, End1], [Start2, End2], ..., [StartN, EndN]\".\n\nFor example, given `[1, 2, 3, 4, 5, 6, 7, 8, 9]`, the output should be `[\"[1, 3]\", \"[4, 6]\", \"[7, 9]\"]`.\n\nIn this challenge, error handling and control flow should be implemented to prevent the input from being corrupted. Additionally, the function should handle invalid inputs gracefully, where the input is not a list of positive integers, or the input is empty."}, {"instruction": "Write a Python function `multiply_by_3_tuples`, which accepts a list of tuples and multiplies the element in each tuple by 3. The function should return a new list of tuples, where the elements are multiplied by 3. Handle errors gracefully and provide informative error messages to the user."}, {"instruction": "Create a Python function to merge 2-dimensional lists of numbers into a 1-dimensional list. The function should handle lists of any length, including empty lists, and should also support lists with different lengths. It should return a single list containing all the numbers from the input lists, in the order they were received. Additionally, it should avoid duplicating any numbers that are present in both lists. For example, given `[[1, 2], [3, 4]]` and `[[1, 2], [3], [4, 5]]`, the function should return `[1, 2, 3, 4, 5]`."}, {"instruction": "Develop a Python function `generate_permutations(arr)` that takes a list of integers and returns all permutations of the elements. The function should return an iterator of lists, where each list represents a permutation of the elements. Duplicates are allowed and the order of the permutations is arbitrary.\n\nThe function should handle both empty and single-element lists properly. It should also handle exceptions such as invalid inputs, edge cases, and error conditions."}, {"instruction": "Develop a Python function `extract_grid_cells` that takes a 2D array of integers as input and extracts a 2D array of the cells inside a grid, where grid cells are connected horizontally or vertically. The function should return the extracted grid as a 2D array of integers.\n\nThe input array `grid` represents a grid with grid cells that are connected either horizontally or vertically. A cell is represented as a pair of coordinates `(r, c)`, where `r` and `c` are the row and column indices of the cell, respectively. The function `extract_grid_cells` should return the extracted grid cells as a 2D array of integers.\n\nConsider the following example to understand the requirements of this problem:\n\n```python\ngrid = [\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9, 10, 11, 12],\n  [13, 14, 15, 16],\n  [17, 18, 19, 20],\n  [21, 22, 23, 24],\n]\n```\n\nThe grid above represents the following 2D array:\n\n```\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n17 18 19 20\n21 22 23 24\n```\n\nThe extracted grid cells should be the following:\n\n```\n(0, 0), (0, 1), (0, 2), (0, 3)\n(1, 0), (1, 1), (1, 2), (1, 3)\n(2, 0), (2, 1), (2, 2), (2, 3)\n(3, 0), (3, 1), (3, 2), (3, 3)\n(3, 3), (4, 3), (5, 3)\n(4, 0), (4, 1), (4, 2)\n(4, 3), (5, 3)\n(5, 0), (5, 1), (5, 2)\n```\n\nThe output of the function `extract_grid_cells` should be:\n\n```\n[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]\n```"}, {"instruction": "Implement a Python function `sort_by_value` that accepts a dictionary and sorts it by the values in descending order. The function should return a list of tuples containing the items in the dictionary and their corresponding values. If the input dictionary is empty, the function should return an empty list.\n\nFor example, the function should accept a dictionary with integers as keys and strings as values, such as `{'a': 'apple', 'b': 'banana', 'c': 'carrot', 'd': 'durian'}` and return a list of tuples such as `[(2, 'carrot'), (1, 'banana'), (5, 'durian'), (4, 'apple')]`.\n\nThe function should handle any keys or values passed to it that cannot be converted to a number, including empty strings or non-numeric values. Additionally, the function should sort the elements in the dictionary in descending order based on the values, and exclude any items that cannot be converted to a number or have empty strings or non-numeric values from consideration."}, {"instruction": "Create a Python function `make_array_cubes` that takes a list of numbers `nums` and returns a new list of integers that represent the cubes of each number in the given list. Handle cases where the input list is empty or contains floating-point numbers with non-integer components.\n\nNote that the input list may contain duplicate elements that must be accounted for."}, {"instruction": "Create a Python function `remove_repeated_elements` that takes a list as input and removes all the repeated elements from it. The function should return a new list with no repeated elements, regardless of the order.\n\nThe function should handle edge cases such as empty lists, lists with no repeated elements, and lists with repeated elements in different orders."}, {"instruction": "Design a Python function `find_pairs_with_sum(arr, target)` that takes in an array of integers and a target sum. The function should find all pairs of integers in the array that sum to the target, and return a list of all the pairs that were found. If no such pairs exist, return an empty list. The elements of the input array should be distinct and should not be used in more than one pair.\n\nFor example, given the array `[1, 2, 3, 4, 6]` and the target sum `6`, the function should return `[1, 5]` (1 + 5 = 6), and `[2, 4]` (2 + 4 = 6).\n\nFeel free to use any data structure and algorithm that you feel is appropriate for this problem. You can also hardcode the expected output for the test cases, but the goal is to design and implement the algorithm."}, {"instruction": "Write a Python function that takes a list as input and returns a new list that contains the elements of the original list, repeated, in order, based on given multiplicities. For example, given the input `L = [1, 2, 3, 2]`, the function should output `[1, 2, 2, 3, 3, 2, 2]`. Additionally, handle cases where the input list contains duplicate elements, in which case the function should output the repeated elements in the correct order.\n\nThe function should handle cases where the input list is empty, includes negative integer multiplicities, or includes elements of non-integer types. Additionally, handle invalid inputs gracefully, such as if the input is not a list or if the input is an empty list."}, {"instruction": "Create a Python function to convert a list of numbers to a list of arrays. The function should accept a list of numbers, where each element in the input is either a scalar value or an array. The output is a list of NumPy arrays where each array contains a list of elements from the input list.\n\nIf the input contains a scalar value, the function should return a one-element array containing that scalar value. If the input contains an array, that array should be returned unchanged. Otherwise, the function should throw an error if the input contains any other type of element. The output should be ordered such that the order of the lists from the input list does not change.\n\nInclude error handling to handle invalid inputs and unrecognized types, such as lists of booleans or strings. Also, consider handling cases where the input list is empty or contains only scalar values."}, {"instruction": "Write a Python function that takes a list of positive integers and returns a list of integers that are the elements of the list that are not repeated. In addition to the list of positive integers, the function also takes a list of positive integers that represent the index of elements in the original list that should be removed. The function should return the original list with the specified elements removed. The order of the elements in the original list should be maintained.\n\nIf any of the elements in the original list are not positive integers, the function should handle the error gracefully and return an empty list. If any element at an index specified in the second list is not an integer, the function should handle the error gracefully and skip the element. If an element in the second list is out of range for the length of the original list, the function should handle the error gracefully and skip the element."}, {"instruction": "Implement a Python function that accepts a list of integers as input and returns a new list of the same size, but with all even-indexed elements replaced by the square of the corresponding odd-indexed element. If either the input list is empty or if an element is not an integer, your function should raise an error.\n\nFor example, given the input list `[1, 2, 3, 4]`, your function should return `[1, 4, 9, 16]`."}, {"instruction": "Develop a Python function `solve_quadratic_equation` that calculates the roots of a quadratic equation. The function should accept two real numbers `a` and `b`, representing the coefficients of the quadratic equation `ax^2 + bx + c = 0`. It should raise an exception if the roots of the equation are complex numbers. The function should return a list of two real numbers representing the roots of the equation, or an empty list if the equation has no real roots.\n\nThe function should handle input errors such as invalid coefficients and invalid operator precedence correctly. Additionally, it should handle error cases like missing or invalid inputs gracefully by returning an empty list or raising an exception."}, {"instruction": "Develop a Python function `transpose` that accepts a two-dimensional array (list of lists) and returns a transposed version of the array. The function should handle any number of dimensions, including one-dimensional arrays. For example, the function should transpose a 2x2 matrix `[['a', 'b'], ['c', 'd']]` to a 2x2 matrix `[['a', 'c'], ['b', 'd']]` and handle 3x3, 3x4, and 4x4 matrices. Additionally, the function should handle invalid inputs such as empty arrays, 1D arrays with only one element, and 2D arrays with inconsistent sizes."}, {"instruction": "Design a Python function that calculates the sum of all unique numbers that are present in either the first half of a given list or in its second half. The function should handle any input that is not a proper list of numbers, including empty lists, lists with all-zero or all-negative numbers, and lists with duplicate elements. Optionally, include error handling to check if the input is a list of numbers.\n\nFor example, given `[-5, 1, 2, 5, 5, 5, 1]`, the function should output `13`."}, {"instruction": "Write a Python function to check if a list of integers is sorted in ascending order. The function should return `True` if the list is sorted in ascending order and `False` otherwise. Ensure the function handles edge cases such as empty lists and lists with only one element."}, {"instruction": "Implement a Python function `copy_list_safely(l)` that takes as input a list and returns a copy of this list without mutating the original list. However, the function should handle the case where the input list is an array or a list of lists by using recursion.\n\nIf the input list is an array, the function should create a copy of this array and return it. If the input list is a list of lists, the function should copy each sub-list by using recursion. The function should handle errors gracefully by returning `None` or throwing an error."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: negative integer shifting, type safety, left shift operator, shift-negative-value-note\n\n### Task", "fingerprint": null, "content": {"code": "constexpr int foo(int a) {\n    return -a << 2; // cxx17-note {{left shift of negative value -10}} \\\n                    // ref-cxx17-note {{left shift of negative value -10}} \\\n                    // cxx17-note {{left shift of negative value -2}} \\\n                    // ref-cxx17-note {{left shift of negative value -2}}\n  }", "docstring": "// cxx17-warning {{shifting a negative signed value is undefined}} \\\n                    // ref-cxx17-warning {{shifting a negative signed value is undefined}} \\\n                    // cxx17-note {{left shift of negative value -1}} \\\n                    // ref-cxx17-note {{left shift of negative value -1}}", "function_name": "negativeShift"}, "id": 7, "seed": "constexpr int foo(int a) {\n    return -a << 2; // cxx17-note {{left shift of negative value -10}} \\\n                    // ref-cxx17-note {{left shift of negative value -10}} \\\n                    // cxx17-note {{left shift of negative value -2}} \\\n                    // ref-cxx17-note {{left shift of negative value -2}}\n  }", "__index_level_0__": 3, "concepts": ["negative integer shifting", "type safety", "left shift operator", "shift-negative-value-note"], "parsing_result": [{"instruction": "Implement a Python class `OverflowCounter` that keeps track of the number of signed integers that cause overflows when being added to the counter. The class should implement the following interface:\n\n- `OverflowCounter.add(a)` \u2013 adds a to the counter\n- `OverflowCounter.read()` \u2013 returns the number of overflows that occurred while adding integers\n\nOverflows are defined as any integer that is bigger than the maximum value of the signed integer for the given bit representation. For example, a 32-bit signed integer has a maximum value of `2147483647`, which is `1 << 31`. Therefore, the integer `2147483648` will cause overflow."}, {"instruction": "Implement a Python class `NegativeInteger` that represents a negative integer where the entire integer is stored as a 32-bit signed integer. Implement the following `operator` methods and the `operator` functions:\n\n- `__add__`\n- `__sub__`\n- `__eq__`\n- `__lt__`\n- `__str__`\n- `abs`\n- `ceil`\n- `floor`\n- `negate`\n- `round`\n\nAdditionally, implement the following functions:\n\n- `is_negative`\n- `is_even`\n\nThe `__sub__` and `__add__` methods should operate on the `int` type to ensure type safety."}, {"instruction": "Design a Python class `IntSequence` that represents a sequence of positive integers. The class should have two methods: `append(number)` and `pop()`. The first method appends the number to the end of the sequence and the second method removes the first element from the sequence. You also write assertions to ensure the input is a non-negative integer."}, {"instruction": "Design a Python class that implements a binary search tree (BST) that stores integers. The BST is defined as follows:\n- every node stores an integer value\n- if a node's left child exists, it must have an integer value smaller than the node's value\n- if a node's right child exists, it must have an integer value larger than the node's value\n\nWrite a Python function that takes a BST and an integer as input, and inserts the integer into the BST if it does not already exist in the BST. Ensure that the function is O(log n) time complexity, where n is the number of nodes in the BST."}, {"instruction": "Design a Python class that implements a binary tree data structure. The binary tree is composed of `Node` instances, each of which stores a value and references to its left and right child nodes. The class should provide the following methods:\n\n- `insert(self, value)`: accepts a value and adds it to the tree, ensuring the tree is balanced\n- `search(self, value)`: accepts a value and returns a boolean indicating whether the value is in the tree\n- `remove(self, value)`: accepts a value and removes it from the tree, ensuring the tree is balanced"}, {"instruction": "Implement a Python class that supports an in-memory 2D array. The rows and column indices are 0-based (a.k.a., `n` and `m` respectively). The class must support the following operations:\n\n- `get(n, m)`: returns the value at position (`n`, `m`) in the array. The function should raise an `IndexError` if the indices are out of range.\n- `set(n, m, value)`: sets the value at position (`n`, `m`) in the array. The function should raise an `IndexError` if the indices are out of range.\n- `shape()`: returns the shape of the array as a tuple.\n- `size()`: returns the size of the array.\n\nWrite assertions to ensure that the array is not accessed out of bounds."}, {"instruction": "Design a Python class that implements a fixed-size stack. The class should support the following methods: `push`, `pop`, and `peek`. The class should support two modes of operation: push and pop. In push mode, when the stack is full, the oldest item is overwritten. In pop mode, when the stack is empty, the empty stack is returned and an error is thrown; otherwise the newest item is popped. The `push` and `pop` methods should support a `mode` argument to specify the mode of operation.\n\nThe push mode can be incorporated into the class implementation using bitwise operators. The pop mode can be incorporated with bitwise operator or using a separate method `pop_mode`."}, {"instruction": "Create a Python class for a Stack data structure that implements the stack operations:\n\n- `push(x)`: pushes an element `x` to the top of the stack\n- `pop()`: pops and returns the top element of the stack\n- `peek()`: returns the top element of the stack\n\nImplement the `push` and `pop` operations in two separate functions that perform the operations. Write assertions to check:\n\n- input for `pop` should be a non-empty stack\n- input for `peek` should be a non-empty stack"}, {"instruction": "Implement a Python class `Int` that is similar to the built-in `int` type but adds a new method `floor_divide` that will convert the integer to a float by shifting the value of the left-most bit (bitwise left shift operation). Make sure that the `floor_divide` method does not overflow.\n\nFor example, if the integer value is 15 (1111 in binary), the floor_divide method should return 0.75 (11/2^2)."}, {"instruction": "Create a Python class that supports counting occurrences of digits in a string. For example, given a string 'hello', the class should return a dictionary where the keys are the digits and the values are the occurrences of this digit in the string. For example, the output should be {'0': 3, '1': 0, '2': 0, '3': 3, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0}."}, {"instruction": "Implement a Python class called `BinaryArray` that represents a fixed-size bit-packed array of 32 bits. The class has two methods:\n\n- `set_bit(i, v)` sets the ith bit of the array to v, where v is either 0 or 1. You should raise a ValueError if `i` is out of range\n- `get_bit(i)` returns the value of the ith bit, where `0 <= i <= 31`\n\nThe class should allow all integer values for `i` and `v`, whether positive or negative, including the special case of `v = -1`. Furthermore, if you try to set a bit that already has a value, the value should be overwritten."}, {"instruction": "Implement a Python class `MyLinkedList` with Python properties and methods. A `MyLinkedList` object is a linked list where each element is an integer. The list is ordered as `HEAD -> ... -> TAIL`. The `MyLinkedList` class should have a `get()` method to retrieve the element at a given index and a `set()` method to set the element at a given index. The `get()` method returns `-1` if the element at the given index does not exist. The `set()` method should insert or update the element at the given index.\n\nFor example:\n```python\nll = MyLinkedList()\nll.set(0, 1) # set the element at index 0 to 1\nll.set(0, 2) # set the element at index 0 to 2\nassert ll.get(0) == 2\nll.set(1, 3) # set the element at index 1 to 3\nassert ll.get(0) == 2\nassert ll.get(1) == 3\n```"}, {"instruction": "Implement a Python class `ShiftedInt` that stores an integer as a string and performs bitwise shifts on both sides of the stored string. The class should have the following methods:\n\n- `ShiftedInt(i)` constructs a ShiftedInt object from an integer.\n- `int` returns the integer stored in the object.\n- `right_shift(n)` performs a right shift on the stored string `n` times.\n- `left_shift(n)` performs a left shift on the stored string `n` times.\n\nEach `ShiftedInt` object should hold an integer that can be negative (i.e., all negative values will be stored in a string with the most significant bit set to `1`). The shift operations should be performed on the stored string in a bitwise manner. You write assertions to ensure the class is type-safe with respect to negative integers."}, {"instruction": "Implement a Python class for a binary search tree that supports inserting, deleting, and querying data."}, {"instruction": "Imagine you have a list of integers `a` of length `n` and you want to create a new list `b` with same length `n` such that `b[i] = a[i] << i`. In other words, the value of `b[i]` is equal to the left shift of the value of `a[i]`.\n\nWrite a Python class for an integer array `IntArray` and its method `left_shift` that takes the list of integers and returns the left shifted list.\n\nFor example, given `a = [1, 2, 3, 4]`, `a.left_shift()` should return `[8, 1, 2, 3]`."}, {"instruction": "Implement a Python class `NegativeInteger` to represent negative integers. Essentially, `NegativeInteger` should be a subclass of the native integer type `int`.\n\n- The class should allow `x + y` and `x * y` for any two instances of `NegativeInteger`.\n- The class should prevent `x * y` from being computed when `x` and `y` are not of the same sign.\n- The class should prevent `x + y` from being computed when `x` and `y` are not of the same sign, or when `y` is negative and `x` is positive or vice versa.\n- The class should prevent `x * y` from being computed when `x` or `y` are negative and `x` is positive or vice versa."}, {"instruction": "Write a Python class to simulate a bank account. The class should have the following properties and methods:\n\n- `balance`: the amount of money in the account\n- `deposit(amount)`: increase the account's balance by `amount`. `amount` can be a float or int, and it should be non-negative. If `amount` is negative, the function should raise a ValueError.\n- `withdraw(amount)`: decreases the account's balance by `amount`. `amount` can be a float or int, and it should be non-negative. If `amount` is negative, the function should raise a ValueError. If the account's balance is less than `amount`, the function should raise a ValueError."}, {"instruction": "Here is a small Python program that implements a simple stack (a.k.a. LIFO) data structure.\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, x):\n        self.items.append(x)\n\n    def pop(self):\n        if len(self.items) > 0:\n            return self.items.pop()\n\n    def peek(self):\n        if len(self.items) > 0:\n            return self.items[-1]\n\n    def is_empty(self):\n        return len(self.items) == 0\n```\n\nHere are some test cases:\n\n```python\n>>> stack = Stack()\n>>> stack.is_empty()\nTrue\n>>> stack.peek()\nNone\n>>> stack.pop()\nTraceback (most recent call last):\n...\nIndexError: pop from an empty stack\n>>> stack.push(5)\n>>> stack.peek()\n5\n>>> stack.push(6)\n>>> stack.peek()\n6\n>>> stack.push(7)\n>>> stack.peek()\n7\n>>> stack.pop()\n7\n>>> stack.peek()\n6\n>>> stack.pop()\n6\n>>> stack.is_empty()\nTrue\n>>> stack.pop()\nTraceback (most recent call last):\n...\nIndexError: pop from an empty stack\n```\n\nImplement a Python class that implements the same functionality as the above Stack class."}, {"instruction": "Implement a Python class `Fraction` for representing rational numbers. The class should be initialized with two arguments, `numerator` and `denominator`.\n\nThe class should have an `__str__` method that returns the string representation in the form of `a/b`, where `a` is the numerator and `b` is the denominator. For example, the string representation of `Fraction(1, 2)` should be `1/2`. The denominator should not be 0.\n\nThe class should also have a `__repr__` method that returns the string representation in the form of `fraction.Fraction(a, b)`, where `a` is the numerator and `b` is the denominator.\n\nThe operators `+`, `-`, `*`, and `/` should be defined to perform fraction addition, subtraction, multiplication, and division, respectively. For example, `Fraction(1, 2) + Fraction(1, 3)` calculates `2/6 + 3/6 = 5/6`. The operator `/` should return a `Fraction` object as its result.\n\nThe class should also have a method `fraction` that takes a positive integer `n` as an argument and returns a `Fraction` object with the lowest possible denominator that equals `n`. For example, `Fraction.fraction(14)` returns `Fraction(7, 2)`."}, {"instruction": "Implement a Python class `BinaryNumber` that can convert a binary number into its equivalent decimal representation. The conversion should be done directly via bitwise operations.\n\n```python\n>>> bn = BinaryNumber('10101')\n>>> bn.decimal_value\n5\n>>> bn = BinaryNumber('-11111')\n>>> bn.decimal_value\n-1\n>>> bn = BinaryNumber('11111')\n>>> bn.decimal_value\n31\n>>> bn = BinaryNumber('-11111')\n>>> bn.decimal_value\n-31\n```"}, {"instruction": "Create a Python class `BinaryTree` that models a binary tree structure. The implementation of the class should take a list of integers as input, but the input may be in any order. The class should contain the following public methods:\n- `insert(self, value)` that inserts a new node with the given value to the tree.\n- `depth_first_traversal(self)` that performs a depth-first traversal of the tree and returns the list of values in order of the nodes visited.\n\nFor example, given the following tree as input:\n\n```\n     1\n   /   \\\n  2     3\n / \\   / \\\n4   5 6   7\n```\n\nThe output for the `depth_first_traversal` method should be `[1, 2, 4, 5, 3, 6, 7]`."}, {"instruction": "Create a Python class `TwoDPoint` that represents a 2D point on a Cartesian plane. The class must support the operations of addition, subtraction, negation, and scalar multiplication. The class should also support equality and inequality testing for two points. If the user tries to negate a 2D point, return a warning message."}, {"instruction": "Create a Python class `Celsius` with a `__init__` method that takes a temperature in degrees Celsius and stores the temperature in a private variable with type `int`. The class should also implement an instance method `to_fahrenheit()` that returns the temperature in degrees Fahrenheit.\n\nFor example, `Celsius(20)` should result in a temperature of `20` degrees Celsius and `Celsius(20).to_fahrenheit()` should return `68` degrees Fahrenheit."}, {"instruction": "Develop a Python class that implements a basic calculator supporting addition, subtraction, multiplication, and division for integers. The class should support both positive and negative integers as inputs. For example, the following are valid expressions and their results:\n\n```python\ncalc = Calculator()\ncalc.add(1, 2)\ncalc.subtract(1, 2)\ncalc.multiply(1, 2)\ncalc.divide(1, 2)\n# Output: 3, -1, 2, 0.5\n```"}, {"instruction": "Implement a Python class `TwoNumberArray` that represents a 1-dimensional array with two positive integer elements initialized to 1. Every time the class instance is initialized, it receives a single integer parameter `size`, which affects the size of the array. The array has two methods:\n- `double_indices()` doubles the indices of the array, so `array[0]` becomes `array[0] * 2`, `array[1]` becomes `array[1] * 2`, and so on.\n- `sum_array()` sums the array and returns the sum.\n\nNote that the class should be initialized with an integer parameter. The only exception is if the value of this parameter is less than 2. In this case, the class should raise an exception."}, {"instruction": "Create a Python class `TwoStackQueue` that implements a queue with two stacks. The operations `enqueue` and `dequeue` should be implemented as if the queue is a FIFO structure."}, {"instruction": "Create a Python class `Int32` that implements a 32-bit fixed-width integer. The class should support integer arithmetic, comparison, and bitwise operations. The class should add a single `shift_left` method, which is an implementation of the shift left operation, a right shift operation, and a negative value shift operation, but for 32-bit integers.\n\nFor example, the following lines of code should work as expected.\n\n```python\nfrom int32 import Int32\n\na = Int32(10)\nb = Int32(-10)\nc = Int32(0)\nd = Int32(-1)\n\nassert a + b == 0\nassert a - b == -20\nassert a & b == 10\nassert a | b == 15\nassert a & c == 0\nassert a | c == 10\nassert a & d == 0\nassert a | d == 15\nassert a >> 1 == 5\nassert b >> 1 == -5\nassert a << 1 == 20\nassert b << 1 == -20\n```"}, {"instruction": "Write a Python class `Shift` that implements the bitwise left shift operator for negative integers. The class should have the following methods:\n\n- `Shift.lshift(a, b)`: takes two integers, `a` and `b`, and returns the result of `a` left shifted by `b` bits. The method should raise an `AssertionError` if `b` is negative.\n\nFor example, `Shift.lshift(-1, 2)` should return -4, as -1 is left shifted by 2 bits from the most significant bit as follows:\n\n```\n    00000000000000000000000000000001 (1)\n<< 2\n-------------------------------------\n    00000000000000000000000000000010 (-2)\n```"}, {"instruction": "Develop a Python class with basic implementation of a stack. The class should support the following operations:\n- `push(value)`: Push a new value onto the stack.\n- `pop()`: Remove and return the most recently added value.\n- `peek()`: Return the most recently added value without removing it.\n- `is_empty()`: Return True if the stack is empty, False otherwise."}, {"instruction": "Create a Python class that represents a bank account. The class should have methods to perform the following actions:\n\n- `deposit(amount)` to add money to the account, if the amount is positive.\n- `withdraw(amount)` to remove money from the account, if the amount is not greater than the current balance.\n- `compute_interest(rate)` to calculate the interest earned and add it to the account balance, where the rate is the annual interest rate. The `rate` is a floating-point value between 0 and 1.\n\nThe class should have the following data fields:\n\n- `balance` to represent the current balance.\n\nFinally, write assertions to ensure the class behaves correctly."}, {"instruction": "Implement a Python class `BitField` that stores a negative integer and provides methods for accessing and setting its bit values.\n\nThe class should support the following operations:\n\n- `__init__`: to initialize the bitfield with a negative integer value\n- `__str__`: to print the bitfield in binary representation\n- `__get__`: to obtain a bit value by the bit number; bit values are stored in the least significant bit first\n- `__set__`: to set a bit to a given value, where 1 is True and 0 is False\n\nIn addition, the class should have the following methods:\n\n- `get_n_bits`: to obtain the value of the given number of bits, starting from the most significant bit\n- `set_n_bits`: to set the value of the given number of bits, starting from the most significant bit\n\nHandle negative values by using a negative integer to store the value. To set a bit, the value is first shifted left by the given bit number and then ORed with the value of the bitfield."}, {"instruction": "Develop a Python class `BinaryList` that implements a generic binary list that dynamically expands when it reaches the limit. The class should support the following operations:\n\n- `BinaryList.insert(index, value)`: inserts a new element at the specified index. If the index is out of bounds, the new element should be appended to the end of the list.\n- `BinaryList.search(value)`: searches the list for a specific value and returns the index of its first occurrence. If the value does not exist, `BinaryList.search` should return -1.\n- `BinaryList.remove(index)`: removes the element at the specified index. If the index is out of bounds, `BinaryList.remove` should raise an exception.\n- `BinaryList.get(index)`: returns the element at the specified index. If the index is out of bounds, `BinaryList.get` should return None.\n\nEnsure that the class is type-safe and rejects values outside of the numerical range."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: boolean expression for reading a digital input, debounce delay, state change detection for digital button inputs\n\n### Task", "fingerprint": null, "content": {"code": "boolean isButtonPressed(void) {\n  // read the state of the switch into a local variable:\n  int reading = digitalRead(buttonPin);\n\n  // check to see if you just pressed the button \n  // (i.e. the input went from LOW to HIGH),  and you've waited \n  // long enough since the last press to ignore any noise:  \n\n  // If the switch changed, due to noise or pressing:\n  if (reading != lastButtonState) {\n    // reset the debouncing timer\n    lastDebounceTime = millis();\n  } \n  \n  if ((millis() - lastDebounceTime) > debounceDelay) {\n    // whatever the reading is at, it's been there for longer\n    // than the debounce delay, so take it as the actual current state:\n\n    // if the button state has changed:\n    if (reading != buttonState) {\n      buttonState = reading;\n\n      // only toggle the LED if the new button state is HIGH\n      if (buttonState == HIGH) {\n        lastButtonState = reading;\n        setRegisterPin(LCD_BTN, HIGH);\n        return true;\n      }else{\n        setRegisterPin(LCD_BTN, LOW);\n      }\n    }\n  }\n\n  // save the reading.  Next time through the loop,\n  // it'll be the lastButtonState:\n  lastButtonState = reading;\n  return false;\n}", "docstring": "//Serial.println(\" Fahrenheit\");", "function_name": "getTemp"}, "id": 14, "seed": "boolean isButtonPressed(void) {\n  // read the state of the switch into a local variable:\n  int reading = digitalRead(buttonPin);\n\n  // check to see if you just pressed the button \n  // (i.e. the input went from LOW to HIGH),  and you've waited \n  // long enough since the last press to ignore any noise:  \n\n  // If the switch changed, due to noise or pressing:\n  if (reading != lastButtonState) {\n    // reset the debouncing timer\n    lastDebounceTime = millis();\n  } \n  \n  if ((millis() - lastDebounceTime) > debounceDelay) {\n    // whatever the reading is at, it's been there for longer\n    // than the debounce delay, so take it as the actual current state:\n\n    // if the button state has changed:\n    if (reading != buttonState) {\n      buttonState = reading;\n\n      // only toggle the LED if the new button state is HIGH\n      if (buttonState == HIGH) {\n        lastButtonState = reading;\n        setRegisterPin(LCD_BTN, HIGH);\n        return true;\n      }else{\n        setRegisterPin(LCD_BTN, LOW);\n      }\n    }\n  }\n\n  // save the reading.  Next time through the loop,\n  // it'll be the lastButtonState:\n  lastButtonState = reading;\n  return false;\n}", "__index_level_0__": 4, "concepts": ["boolean expression for reading a digital input", "debounce delay", "state change detection for digital button inputs"], "parsing_result": [{"instruction": "Construct a Python function `read_button(button)` to read a digital input from a button, where the input is provided as a boolean value. The function should return True if the button is pressed, otherwise False. The function should handle debouncing and bounce, as well as checking for state changes. The function should satisfy the following assertions:\n\n```python\nassert read_button(False) == False\nassert read_button(False) == False\nassert read_button(False) == False\nassert read_button(True) == True\nassert read_button(True) == False\nassert read_button(True) == True\nassert read_button(True) == False\nassert read_button(True) == True\nassert read_button(True) == False\nassert read_button(True) == True\n```"}, {"instruction": "Create a Python function `check_button_presses(button_state, debounce_delay, button_press_duration)` that monitors a digital button input and returns a boolean indicating whether the button has been pressed or not. It should take three arguments:\n- `button_state`: a boolean value indicating the current state of the button (e.g., LOW or HIGH)\n- `debounce_delay`: a positive integer value representing the number of milliseconds to wait after a button state change before registering a button press\n- `button_press_duration`: a positive integer value representing the number of milliseconds that a button must remain pressed before being considered a new button press\n\nThe function should return a boolean indicating the button's current state. The function should also account for any number of input changes in a single function call and handle button press detection properly."}, {"instruction": "Create a Python function `read_input(pin)` that reads the input from a digital input pin. The function should return `True` if the input is high and `False` if it is low. Additionally, the function should apply a debounce delay to the input, such that it only returns `True` when the input is stable for at least 200 ms."}, {"instruction": "Write a Python function `detect_button_press(input, threshold, debounce_ms)` that takes an input `bool` (representing a digital button input), a `threshold` (representing the number of times the input must be active to trigger a press), and a `debounce_ms` (representing the time interval in milliseconds after which the input is considered stable). The function should return `True` if the input is active `threshold` number of times within the time window `debounce_ms`. Otherwise, the function should return `False`.\n\nThe function should accept inputs of `False` and `True` as strings for convenience."}, {"instruction": "Create a Python function that determines whether a button is pressed within a specified time period. The function should accept the following arguments:\n\n- `is_pressed`: a boolean function that returns `True` if the button is pressed, and `False` otherwise\n- `debounce_delay`: the number of milliseconds after which the button is considered pressed\n- `period`: the time period (in milliseconds) within which the button should be considered pressed\n\nThe function should return `True` if the button is pressed within the specified time period, and `False` otherwise."}, {"instruction": "Write a Python function `read_button` that accepts two arguments: `input_pin`, a digital input pin, and `debounce_delay`, an integer representing the minimum duration (in milliseconds) between consecutive button presses. The function should return `True` if the button has been pressed, or `False` otherwise."}, {"instruction": "Create a Python function to check if the digital input from a digital button is pressed within a given debounce delay. The function should accept three arguments: `input_state`, the current input state of the button, `last_state`, the last known state of the button, and `debounce_delay`, the number of milliseconds of the debounce delay. The function should return `True` if the current input state is `1` and the last known state is `0` within the debounce delay, otherwise return `False`."}, {"instruction": "Create a Python function `read_input_with_debounce` that takes a digital input pin number and a debounce delay (in milliseconds) as arguments. The function should continuously read the digital input pin and return `True` or `False` based on input changes. A 1-millisecond delay should be introduced between each read to avoid blocking the execution of the function. The function should ignore any input change that happens within the debounce delay period."}, {"instruction": "Construct a Python function `read_button(button_state)` to read the current status of a digital button. It should accept a boolean argument `button_state` indicating the current state of the button. The function should return a boolean representing the button's pressed status. The function should support debouncing of the input by adding a 100 ms delay after reading the button state. Additionaly, the function should support state change detection, detecting the initial downward state when the button is pressed and the final upward state when the button is released."}, {"instruction": "Create a Python function `is_button_pressed` that takes a `pressed` boolean as an argument, and returns `True` if the button is pressed, and `False` otherwise. The `is_button_pressed` function should check for a pressed button using a 100ms debouncing delay and state change detection. The function should not use any external libraries, and should operate in one line of code."}, {"instruction": "Construct a Python function `read_button_input` that takes a boolean value, `pressed`, indicating whether the input button is currently pressed. The function should return a boolean value indicating whether the button was pressed. The function should also implement a debounce delay to avoid false positives and handle state changes appropriately."}, {"instruction": "Construct a Python function that receives a digital input from the user and returns the digital output based on the following constraints:\n\n- The digital output should be constant down when the input is 0.\n- The digital output should be constant up when the input is 1.\n- The digital output should be toggled between 0 and 1 for every second when the input is 0.\n- The digital output should be toggled between 1 and 0 for every second when the input is 1.\n\nThe function should also return the number of seconds that have elapsed after the last digital output change."}, {"instruction": "Create a Python function that reads a digital input (e.g., a button) from a GPIO pin and returns a boolean value indicating if the button is pressed or not. The function should allow debouncing for the button input to avoid false positives. In addition, the function should detect changes in the button state to handle debounced button presses."}, {"instruction": "Write a function `is_button_pressed(button_state, debounce_delay, previous_state)` that takes the current state of a digital button input, the debounce delay, and the previous state to detect a button press. The function should return `True` if the button is pressed within the specified debounce delay after the previous button state change."}, {"instruction": "Create a Python function `read_digital_input` that takes a binary string representation of a digital input state, such as '0010011110', and returns a boolean value indicating if the input is LOW or HIGH. The function should satisfy the following assertions:\n\n```python\nassert read_digital_input('0010011110') is False\nassert read_digital_input('1111111111') is True\nassert read_digital_input('0000000000') is False\nassert read_digital_input('0011000100') is True\n```"}, {"instruction": "Create a Python function `check_button` that accepts a digital input read from a push button. The function should return `True` if the button is pressed and `False` otherwise. The function should implement a debounce delay and a state change detection, ensuring that the button input is stable and correct.\n\nConsider the following button behavior:\n\n- Press: the button is pressed for 500 ms.\n- Release: the button is released within 500 ms of pressing.\n- Long press: the button is pressed for longer than 500 ms.\n- Release: the button is released after the initial press.\n- Repeat press: the button is pressed repeatedly and released after 500 ms of pressing."}, {"instruction": "Implement a Python function called `detect_button_presses(pin)` that takes a digital input pin as an argument and returns a list of times (in seconds) when the button was pressed. The function should use a debounce delay of 1/5 second for detecting a button press. The function should return an empty list if no button is pressed for more than 3 seconds."}, {"instruction": "Write a Python function `get_interrupt(button, debouncer)` to detect events on a digital button input. The function should accept a `button` argument that represents the current state of the digital button input. The `button` argument should be a boolean value (i.e., either True or False). The `debouncer` argument represents the state of the digital input after a debounce delay. If the `button` and `debouncer` arguments are both True, the function should return a boolean value indicating if the `button` has been pressed. If they are both False, the function should return False. Otherwise, the function should return `None`.\n\nThe debounce delay is the delay after a state change before an event is triggered. The delay should be a floating-point value representing seconds, where a value of 0 indicates no delay. The function should support both short and long delays. For example, `get_interrupt(True, True)` should return True immediately after `get_interrupt(True, False)` returns True.\n\nFor example, the following code should output True, None, and False in a row:\n\n```python\nbutton = True\ndebouncer = True\n\nfor i in range(3):\n    interrupt = get_interrupt(button, debouncer)\n    print(interrupt)\n    button = not button\n    debouncer = not debouncer\n```"}, {"instruction": "Write a Python function `debounced_events(input_pin, button_pin, threshold=100)` that takes three arguments: `input_pin`, an integer indicating the digital input pin, `button_pin`, an integer indicating the digital button input pin, and `threshold`, an integer representing the debounce delay in milliseconds (default 100). The function should return an event stream that detects button presses by reading the state of the input pin and debouncing interrupts. It should output a boolean value `True` for a rising edge and `False` for a falling edge."}, {"instruction": "Construct a Python function to implement the debounce function to prevent button inputs from registering too close together. Each button press should be counted in a 200 ms debounce delay; any button press after the 200 ms delay should reset the counter and start counting again. The function should accept a digital input pin and return a boolean indicating if the button is currently pressed."}, {"instruction": "Implement a Python function to monitor a digital button input. The function should accept a digital input pin number as an argument, and return a bool value indicating whether the button was pressed during the last 50ms. The function should also incorporate a debounce delay of 200ms to avoid false positives when the input is bouncing.\n\nThe function should use a state machine to keep track of the current status of the button input. The button status is one of the following:\n- not pressed\n- pressed\n- bouncing\n\nThe function should continuously check the current status, and update the status based on the following rules:\n- If the status is not pressed, and the input pin reads high, the status should be marked as pressed.\n- If the status is not pressed, and the input pin reads low, the status should be marked as bouncing.\n- If the status is pressed, and the input pin reads low, the status should be marked as not pressed.\n- If the status is bouncing, and the input pin reads high, the status should be marked as not pressed.\n\nThe function should use the threading module to create a separate thread to monitor the input pin, and trigger the button press detection logic in the main thread. The function should return the result of the latest update."}, {"instruction": "Create a Python function `read_digital_input` that accepts a digital input value in the form of a boolean and a debounce delay in milliseconds. The function should return the current state of the input based on the actual input value and the debounced duration. For example, if the input is `False` and the debounced duration is 100 milliseconds, the function should return `True`. If the input is `True` and the debounced duration is 10 milliseconds, the function should return `False`."}, {"instruction": "Create a Python function that accepts a single argument, `debounce: int`, representing the debounce delay in milliseconds. The function should return a function that takes no arguments, and returns a boolean value indicating whether the input is a digital button. The input is a digital button if it is pressed for at least the specified debounce delay, and not pressed otherwise."}, {"instruction": "Create a Python function `read_button_state(button)` that takes a boolean object `button` as input and returns its current state. The function should check if the button state is currently pressed or released, and use a debounce delay of 100 ms to detect the state change. The function should handle invalid input gracefully, such as if it receives a non-boolean `button` object."}, {"instruction": "Write a Python function `check_timeout` that takes three arguments:\n- `timeout`: the max waiting time in seconds\n- `func`: the function whose execution time is measured\n- `args`: the arguments to be passed to the function\n\nThe function should measure the execution time of the function `func` with the given arguments `args`. If the execution time exceeds `timeout` seconds, the function should return `False`. Otherwise, it should execute `func(*args)` and return `True`. If the execution time is less than `timeout` seconds, the function should wait for a short period of time (i.e., `10ms`) to check if the execution time has increased. If it has, the function should recheck the execution time. Otherwise, the function should return `True`."}, {"instruction": "Develop a Python function `process_digital_input(input_signal)` that processes the input signal and returns a boolean value indicating whether the input is active. The function should accept a digital input signal represented as a boolean value, and return True if the input is active. The function should utilize a debounce delay of 100 ms to eliminate noise and false positives. The function should also implement state change detection to avoid returning False while the input is active."}, {"instruction": "Create a Python function `is_btn_pressed(btn_state, debounce_delay)` that takes the state of a digital input and a debounce delay as arguments. The function should return `True` if the input signal is stable (no transition within the debounce delay) and the input is high, or `False` if the signal is low. The function should be robust to false positives and false negatives by ensuring that it correctly recognizes the state transitions.\n\nFor example, given the input `btn_state=1`, `debounce_delay=2`, the function should return\n`True` since the input is stable and the state is high."}, {"instruction": "Create a Python function `debounce(fn, delay=0.1)` that takes a function `fn` and a delay parameter `delay` (default 0.1 s). The function should return a new function that accepts the same arguments as the original `fn` and performs all the usual work, but the function should only be executed after a delay of at least the given number of seconds has elapsed since the last time the new function was called. For example, the following code will only print a message after at least 1 second has passed since the last call to `debounce_func()`:\n\n```python\nfrom functools import partial\nfrom time import time\n\ndef print_message_after_delay(msg, delay=1):\n    def func():\n        print(msg)\n    return partial(func, delay=delay)\n\ndebounce_func = debounce(print_message_after_delay, 1)\ndebounce_func()\ndebounce_func()\ndebounce_func()\ndebounce_func()\ndebounce_func()\ndebounce_func()\n```"}, {"instruction": "Write a Python function `is_button_pressed` that accepts a boolean value representing a digital input and returns a boolean indicating whether the input has changed state since the last call. The function should take a debounce delay (in milliseconds) as an argument. The function should also handle the case where the input has been pressed for a longer duration than the debounce delay."}, {"instruction": "Using the `input()` function, write a Python function `read_digital_input` that reads an input from a digital switch. The function should return `True` if the switch is closed, and `False` if the switch is open. The function should be able to handle the switch bounce and debounce delay, which is the delay between a switch opening and closing. The delay should be specified in milliseconds, and the number of consecutive bounces a switch should have before it is considered closed can be specified as well."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: locking, error handling with exception handling, garbage collection, object finalization, instance method invocation, instance method argument access\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR void PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87 (PairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tbool V_3 = false;\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\t// lock(this) {\n\t\tV_0 = __this;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0005:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_0 = V_0;\n\t\t\tMonitor_Enter_mC5B353DD83A0B0155DF6FBCC4DF5A580C25534C5(L_0, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\t\t// if (swigCPtr.Handle != global::System.IntPtr.Zero) {\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A * L_1 = __this->get_address_of_swigCPtr_2();\n\t\t\tintptr_t L_2 = HandleRef_get_Handle_m095712F299EA36BF75975343C726FA160EE38277((HandleRef_t876E76124F400D12395BF61D562162AB6822204A *)L_1, /*hidden argument*/NULL);\n\t\t\tbool L_3 = IntPtr_op_Inequality_mB4886A806009EA825EFCC60CD2A7F6EB8E273A61((intptr_t)L_2, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\tV_2 = L_3;\n\t\t\tbool L_4 = V_2;\n\t\t\tif (!L_4)\n\t\t\t{\n\t\t\t\tgoto IL_005a;\n\t\t\t}\n\t\t}\n\nIL_0028:\n\t\t{\n\t\t\t// if (swigCMemOwn) {\n\t\t\tbool L_5 = ((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->get_swigCMemOwn_1();\n\t\t\tV_3 = L_5;\n\t\t\tbool L_6 = V_3;\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0048;\n\t\t\t}\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\t// swigCMemOwn = false;\n\t\t\t((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->set_swigCMemOwn_1((bool)0);\n\t\t\t// SharingClientPINVOKE.delete_PairingListener(swigCPtr);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_7 = __this->get_swigCPtr_2();\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(SharingClientPINVOKE_tFF4292D2BC5A9EB345172E6D4F8BE281B3799A1F_il2cpp_TypeInfo_var);\n\t\t\tSharingClientPINVOKE_delete_PairingListener_m3062D45600088FD3230AF5587AC8AB7A4C246B64(L_7, /*hidden argument*/NULL);\n\t\t}\n\nIL_0048:\n\t\t{\n\t\t\t// swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_8;\n\t\t\tmemset(&L_8, 0, sizeof(L_8));\n\t\t\tHandleRef__ctor_mCD64E7F91766FE7602EE34A8CEEF6C1EF4C943BB((&L_8), NULL, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\t__this->set_swigCPtr_2(L_8);\n\t\t}\n\nIL_005a:\n\t\t{\n\t\t\t// global::System.GC.SuppressFinalize(this);\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(GC_tC1D7BD74E8F44ECCEF5CD2B5D84BFF9AAE02D01D_il2cpp_TypeInfo_var);\n\t\t\tGC_SuppressFinalize_m037319A9B95A5BA437E806DE592802225EE5B425(__this, /*hidden argument*/NULL);\n\t\t\t// base.Dispose();\n\t\t\tListener_Dispose_mF59F4962F238FD2A986747D0092EC14293296D30(__this, /*hidden argument*/NULL);\n\t\t\tIL2CPP_LEAVE(0x76, FINALLY_006b);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_006b;\n\t}\n\nFINALLY_006b:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_9 = V_1;\n\t\t\tif (!L_9)\n\t\t\t{\n\t\t\t\tgoto IL_0075;\n\t\t\t}\n\t\t}\n\nIL_006e:\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_10 = V_0;\n\t\t\tMonitor_Exit_m49A1E5356D984D0B934BB97A305E2E5E207225C2(L_10, /*hidden argument*/NULL);\n\t\t}\n\nIL_0075:\n\t\t{\n\t\t\tIL2CPP_RESET_LEAVE(0x76);\n\t\t\tIL2CPP_END_FINALLY(107)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(107)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x76, IL_0076)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t}\n\nIL_0076:\n\t{\n\t\t// }\n\t\treturn;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "PairingListener_Finalize_m82AB68AB825ECE83AA5351C4FBB3A5568D9D1B96"}, "id": 18, "seed": "IL2CPP_METHOD_ATTR void PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87 (PairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tbool V_3 = false;\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\t// lock(this) {\n\t\tV_0 = __this;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0005:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_0 = V_0;\n\t\t\tMonitor_Enter_mC5B353DD83A0B0155DF6FBCC4DF5A580C25534C5(L_0, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\t\t// if (swigCPtr.Handle != global::System.IntPtr.Zero) {\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A * L_1 = __this->get_address_of_swigCPtr_2();\n\t\t\tintptr_t L_2 = HandleRef_get_Handle_m095712F299EA36BF75975343C726FA160EE38277((HandleRef_t876E76124F400D12395BF61D562162AB6822204A *)L_1, /*hidden argument*/NULL);\n\t\t\tbool L_3 = IntPtr_op_Inequality_mB4886A806009EA825EFCC60CD2A7F6EB8E273A61((intptr_t)L_2, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\tV_2 = L_3;\n\t\t\tbool L_4 = V_2;\n\t\t\tif (!L_4)\n\t\t\t{\n\t\t\t\tgoto IL_005a;\n\t\t\t}\n\t\t}\n\nIL_0028:\n\t\t{\n\t\t\t// if (swigCMemOwn) {\n\t\t\tbool L_5 = ((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->get_swigCMemOwn_1();\n\t\t\tV_3 = L_5;\n\t\t\tbool L_6 = V_3;\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0048;\n\t\t\t}\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\t// swigCMemOwn = false;\n\t\t\t((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->set_swigCMemOwn_1((bool)0);\n\t\t\t// SharingClientPINVOKE.delete_PairingListener(swigCPtr);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_7 = __this->get_swigCPtr_2();\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(SharingClientPINVOKE_tFF4292D2BC5A9EB345172E6D4F8BE281B3799A1F_il2cpp_TypeInfo_var);\n\t\t\tSharingClientPINVOKE_delete_PairingListener_m3062D45600088FD3230AF5587AC8AB7A4C246B64(L_7, /*hidden argument*/NULL);\n\t\t}\n\nIL_0048:\n\t\t{\n\t\t\t// swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_8;\n\t\t\tmemset(&L_8, 0, sizeof(L_8));\n\t\t\tHandleRef__ctor_mCD64E7F91766FE7602EE34A8CEEF6C1EF4C943BB((&L_8), NULL, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\t__this->set_swigCPtr_2(L_8);\n\t\t}\n\nIL_005a:\n\t\t{\n\t\t\t// global::System.GC.SuppressFinalize(this);\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(GC_tC1D7BD74E8F44ECCEF5CD2B5D84BFF9AAE02D01D_il2cpp_TypeInfo_var);\n\t\t\tGC_SuppressFinalize_m037319A9B95A5BA437E806DE592802225EE5B425(__this, /*hidden argument*/NULL);\n\t\t\t// base.Dispose();\n\t\t\tListener_Dispose_mF59F4962F238FD2A986747D0092EC14293296D30(__this, /*hidden argument*/NULL);\n\t\t\tIL2CPP_LEAVE(0x76, FINALLY_006b);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_006b;\n\t}\n\nFINALLY_006b:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_9 = V_1;\n\t\t\tif (!L_9)\n\t\t\t{\n\t\t\t\tgoto IL_0075;\n\t\t\t}\n\t\t}\n\nIL_006e:\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_10 = V_0;\n\t\t\tMonitor_Exit_m49A1E5356D984D0B934BB97A305E2E5E207225C2(L_10, /*hidden argument*/NULL);\n\t\t}\n\nIL_0075:\n\t\t{\n\t\t\tIL2CPP_RESET_LEAVE(0x76);\n\t\t\tIL2CPP_END_FINALLY(107)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(107)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x76, IL_0076)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t}\n\nIL_0076:\n\t{\n\t\t// }\n\t\treturn;\n\t}\n}", "__index_level_0__": 5, "concepts": ["locking", "error handling with exception handling", "garbage collection", "object finalization", "instance method invocation", "instance method argument access"], "parsing_result": [{"instruction": "Design a Python program that implements a simple data structure for tracking and manipulating a list of data objects. This program should be able to track the current number of elements, the maximum number of elements allowed, and the average length of elements in the data set. The program should also provide methods for adding or removing individual data objects from the data set, and for calculating the average length of the data objects in the set. The program should handle errors when the number of elements exceeds the maximum number of elements allowed, and when accessing a non-existent data object."}, {"instruction": "Develop a Python program that has a single global lock that protects all access to shared resources by multiple threads. Each thread in the program has a unique resource that is manipulated by a specific thread. Once the thread is done with its resource, it releases the lock so that other threads can access the resource.\n\nThe program should have a class that represents a resource that is shared between threads. The class should have one instance variable, which is a lock that protects access to the shared resource. The class should have two methods: `acquire`, which acquires the lock and `release`, which releases the lock. Each thread should have its own instance of this class and use its own lock to access the shared resource.\n\nFor example, the program should execute the following assertions:\n\n```python\nresource = Resource()\nthread1 = Thread(target=resource.acquire)\nthread2 = Thread(target=resource.acquire)\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\n```"}, {"instruction": "Develop a Python program that periodically checks for the existence of a file whose path is defined as an input string. If the file exists, the program should print the file content while locking the file for writing. If the file does not exist, the program should print the message `'File not found'` and exit."}, {"instruction": "Design a Python program that implements a lock-based resource manager system. The program should accept a list of resource names as arguments when invoked, and manage access to these resources through a lock-based concurrency control mechanism. This program should handle exceptions and provide clear error handling when an unknown resource name is provided."}, {"instruction": "Develop a Python program that creates a list of 1000 integers and then prints the value of the largest integer in the list. The program should handle the situation where the list is populated with a large number of integers, which may not fit in the computer's memory."}, {"instruction": "Implement a Python program that locks and unlocks the access to a shared resource using a semaphore. The program should handle cases where the desired operation (locking or unlocking) times out. Also, include error handling and logging for exceptions that might occur during the execution of the program."}, {"instruction": "Develop a Python program that manages a chemical reactor that contains a number of chemical reactors. Each reactor is represented by a `ChemicalReactor` class that has a `chemical` name and `temperature` in Kelvin. The reactor class also has a method `evolve` that simulates the chemical reaction process and performs temperature adjustments on the reactor.\n\nAdditionally, the program should run multiple instances of the reactor and coordinate their operation. First, synchronize access to the reactor instances via locking. Then, use an exception handler to track any exceptions that might occur during the simulation. Finally, add a finalizer to clean up and close any open files or resources that are used in the program."}, {"instruction": "Write a Python program that implements a thread-safe dictionary with the following properties:\n\n- Insertion of key-value pairs should be thread-safe.\n- Deletion of key-value pairs should be thread-safe.\n- Reading of key-value pairs should be thread-safe.\n\nThe dictionary should be able to handle key-value pairs added and deleted while it is being iterated over.\n\nFor example, the following code should not throw an exception:\n\n```python\nd = ConcurrentDictionary()\n\n# Insertion\nd['key1'] = 'value1'\nd['key2'] = 'value2'\n\n# Deletion\ndel d['key1']\n\n# Iteration\nfor k, v in d.items():\n    pass\n```"}, {"instruction": "Develop a Python program that creates a `Person` object, an `Account` object, and uses the `deposits` and `withdrawals` methods associated with each to simulate a banking operation. All operations should be executed within a single transaction to ensure consistency of the account balance. The program should handle exceptions raised by any unsuccessful operations and print a message describing the operation that caused the exception."}, {"instruction": "Develop a Python program that reads a text file that specifies the class name for each line and creates an instance of that class from a list of input parameters. The file can contain `None` values as placeholders for the arguments. You should handle cases where the class does not exist, the class is not a child of the `object` class, or the arguments are invalid. You should also handle cases where the created instance does not have the expected attributes."}, {"instruction": "Design a Python program that simulates a simple bank account with deposit and withdrawal operations. The program should allow concurrent operations on multiple accounts. Your solution should implement the `Deposit` and `Withdraw` commands and provide locking mechanisms for ensuring atomicity and thread safety."}, {"instruction": "Design a Python program that contains a class named `Race`. The `Race` class should have two properties: `start_time` and `end_time`. The `start_time` and `end_time` should be assigned to the local time to the moment of their creation. You should also create a `start` method that ensures that no new instances of the `Race` class can be created until the current time is later than or equal to the `start_time`. The `start` method should also ensure that no new instances of the `Race` class can be created after the `end_time`."}, {"instruction": "Develop a Python program that models the behavior of a virtual bank account. It should allow users to open and close accounts, deposit and withdraw money, and have a user-defined interest rate. The program should handle exceptions for invalid input and ensure proper account balance."}, {"instruction": "Design a Python program that maintains a list of tasks organized into a priority queue. The program should provide methods for adding new tasks to the queue, removing tasks from the queue based on the specified priority, and displaying the task with the highest priority. Each task should be represented as an object with an assigned priority level. The program should handle exceptions and errors appropriately."}, {"instruction": "Implement a Python program that contains a `Student` class with `name` and `age` attributes. The program should perform a read operation on a file of students in `json` format. The program should read each line in the file and create a `Student` object for each line, and then write it to a new file. You should handle exceptions related to file reading and writing, as well as any validation errors that might arise when parsing the file. In the end, the program should close all open files and perform garbage collection."}, {"instruction": "Develop a Python program that locks and unlocks a resource based on the user's input. The program should read and interpret the user's input. If the input is invalid, the program should gracefully handle the error and output a help message. The program should be able to lock and unlock the resource."}, {"instruction": "Develop a Python program that simulates a lock-based resource manager. It should spawn multiple threads to acquire and release the resource up to a specified capacity. Each thread should obtain the resource by invoking the `acquire` method of a `ResourceManager` class. The `ResourceManager` class should store a variable `acquiring` that keeps track of whether the resource is being acquired or not. When a thread that is not holding the resource tries to acquire the resource and `acquiring` is `False`, the thread should wait until the resource is available. After acquiring the resource, the thread should invoke the `release` method of the `ResourceManager` class to release the resource, and set `acquiring` to `False`."}, {"instruction": "Design a Python program that demonstrates the usage of lock objects to synchronize access to shared resources. The program should consist of two threads: a `Worker` and a `Manager`. The `Worker` thread should run continuously, randomly sleep for a few seconds, and then increment the value of a shared counter that is stored in an instance attribute of a class object. The `Manager` thread should run continuously, randomly sleep for a few seconds, and then decrement the value of the counter. The program should ensure that the value of the counter is never negative, and that both threads run concurrently."}, {"instruction": "Develop a Python program that manages a `Dog` class and its instances. Each `Dog` instance should have a name, breed, age, and weight. The program should ask the user to input the number of dogs and then prompt the user to enter the details for each dog.\n\n- If the user enters an invalid value for any of the dog attributes (e.g., age or weight) the program should prompt the user to re-enter the information.\n- If the user inputs a valid value for the dog attributes, the program should print a table of all the dogs in the following format:\n\n```text\n|NAME     | Breed   | Age | Weight |\n|---------|---------|-----|--------|\n|Bella    | Schnauzer| 3   | 25.5   |\n|Max      | Poodle  | 5   | 24.0   |\n```\n\n- The program should prompt the user to input a command (e.g., 'add' or 'exit') and process the command accordingly, and then repeat the process until the user inputs 'exit'. The program should prompt the user to enter a new command after each successful execution of a command."}, {"instruction": "Develop a Python program that manages a collection of `Resource` objects without explicitly managing the underlying `Resource` instances. The program should detect and handle `Resource` instances that raise exceptions when they are accessed before being initialized."}, {"instruction": "Develop a Python program that simulates a banking environment. Bank accounts have four states: open, close, overdrawn, and locked. The program should track the current state of the account and allow a customer to perform transactions, such as depositing and withdrawing money. Each transaction should be checked for validity and result in an appropriate state change. The program should also ensure that the account is in a valid state before performing transactions."}, {"instruction": "Write a Python program that implements a thread safe counter class. The counter class should have a `value` property that stores an integer value that can be incremented or decremented based on a `positive` flag. The class should keep track of its own `value` and provide methods to increment or decrement this value."}, {"instruction": "Design a Python program that manages the lock status of a shared resource. The program should be able to acquire and release the lock efficiently and handle the cases where multiple processes attempt to acquire or release the lock simultaneously. The program should also handle potential exceptions and handle the cases where certain resources such as file descriptors might no longer be valid by dynamically re-evaluating the target resource before proceeding with lock operations."}, {"instruction": "Design a Python program that maintains a collection of key-value pairs where key is a string and value is an integer. It should support basic operations like adding key-value pairs, removing key-value pairs, and updating the value of a specific key. The program should use a separate thread to continuously monitor for key-value pairs added to the collection, with the key-value pairs being updated in the main thread. If the key-value pair is updated in the main thread, the program should update the value of that key in the thread-safe collection."}, {"instruction": "Develop a Python program that simulates a bank account that can be used as an object. This program should allow users to perform `deposit`, `withdraw`, `balance`, and `transfer` operations on the account, as well as `print` the account information. The program should restrict user interactions with corrupted accounts (e.g., negative balance). Also, the program should manage the garbage collection of the account object when the user terminates the program or the object is no longer in use."}, {"instruction": "Create a Python program that models a virtual classroom environment where students can be enrolled in different courses, and each course has instructors. The program should provide convenient ways for students and instructors to interact with each other in a safe and controlled manner. The program should support the following operations:\n\n- Students can enroll in courses, withdraw from courses, and view their enrollment status.\n- Instructors can view the enrollment status of students in their courses, as well as the grades of students in their courses.\n- Students can submit grades for their courses.\n- Instructors can add students to their courses, and assign grades to the students in their courses.\n\nStudents should be able to view their grades and course enrollment status. Instructors should be able to view the grades of students in a course, and be able to add students to a course, as well as assign grades to the students in a course."}, {"instruction": "Write a Python program that implements a custom `Singleton` class that ensures that only one instance of a class can exist at a time. The class should be thread-safe."}, {"instruction": "Create a Python program that manages a single object defined within the program. When the program starts up, it should lock the object with a named lock. If the program crashes or is terminated, the lock should be released and another program can lock the object."}, {"instruction": "Design a Python program that implements a single-writer multiple-reader lock mechanism. The program should support methods of two classes, `ReaderLock` and `Data`. The `ReaderLock` class should provide methods to acquire a reader lock and release a lock. The `Data` class should implement the data that is being protected by the lock. You should use a `threading.Lock` to implement the lock, and use a `threading.Condition` to synchronize the readers and writers."}, {"instruction": "Develop a Python program that creates two threads, each of which searches for a specific file in a predefined directory. The main thread should wait until both threads finish their processing before proceeding. Each thread should report its final status and output a `log.txt` file containing the same information."}, {"instruction": "Design a Python program that allows developers to build, run, and manage a single-threaded program that creates two threads and prints the count of each character in a user-defined text file using the `threading` module. The program should provide error handling and logging for exceptions that may occur during the program\u2019s execution. You should ensure that the program can handle instances where the text file does not exist or can\u2019t be read.\n\nIn order to create multiple threads, the program should utilize the following functions:\n- `threading.Thread` to create a new thread\n- `threading.Lock` to synchronize the access to the shared resource\n- `threading.enumerate` to retrieve a list of all active threads\n- `threading.Thread.join` to wait for a thread to finish"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: conditional statement, boolean logic, static function declaration, conditional return value\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Pass_resetTextures(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Pass *arg1 = (cc::scene::Pass *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Pass>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->resetTextures();\n    \n    \n    return true;\n}", "docstring": "// js_function", "function_name": "js_cc_scene_Pass_resetUBOs"}, "id": 19, "seed": "static bool js_cc_scene_Pass_resetTextures(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Pass *arg1 = (cc::scene::Pass *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Pass>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->resetTextures();\n    \n    \n    return true;\n}", "__index_level_0__": 6, "concepts": ["conditional statement", "boolean logic", "static function declaration", "conditional return value"], "parsing_result": [{"instruction": "Create a Python class called `VotingClassifier` that implements a simple majority voting classifier. It should have a `fit` method where the input consists of a list of training data `X` and a corresponding list `y` of labels. The `fit` method should make predictions for each training example and store the predicted labels in an instance attribute called `y_hat`. It should also have a `predict` method that returns the majority class from the `y_hat` attribute.\n\nThe `predict` method should return a list of predicted labels for each example in `X`. It should make a prediction by calculating the frequency of labels in `y_hat`. The predicted label should be the class that has the maximum frequency. If several classes have the same maximum frequency, return any of those class labels."}, {"instruction": "Create a Python class called `Car` with the following properties and methods:\n\n- `create_car`: a class method that takes two arguments (speed, color) and creates and returns a new `Car` instance with those properties.\n- `get_speed`: a regular instance method that returns the current speed of the car.\n- `get_color`: a regular instance method that returns the color of the car.\n\nWrite a conditional statement in the class body that checks whether the `speed` is greater than 100 and returns \"OVERLOADED\" if it is. Return value should be \"NORMAL\" if `speed` is less than or equal to 100."}, {"instruction": "Create a Python class `Counter` that provides a counter for incrementing and decrementing numeric values. The class should have a static method `is_negative` that accepts a numeric value as an argument and returns `True` if the value is negative, `False` otherwise. The class should have three methods: `__init__`, `__inc__`, and `__dec__`. `__init__` should initialize the counter to 0. `__inc__` should increment the counter by 1, and `__dec__` should decrement the counter by 1. `__inc__` and `__dec__` should raise an error if the counter is already at the maximum or minimum value. `is_negative` should be a static method that accepts a numeric value as an argument and returns `True` if the value is negative, `False` otherwise."}, {"instruction": "Implement a Python class called `Conditional` that represents a conditional statement. The class should have one static method `generate_code` that takes three arguments: a string `statement`, a list `args`, and a list `values`, and returns a string representation of the conditional statement. The conditional statement should be formatted using the `statement`, `args`, and `values` provided. The class should also have a constructor to initialize the `statement`, `args`, and `values` for the conditional statement.\n\nThe `generate_code` method should return a string representation of the conditional statement by using a conditional statement based on the values of the inputs. The case should be sensitive to the truth value of each element in `values`. For example, if the statement is `\"if a == b\"`, then the `generate_code` method should return `\"if (a == b) [%s]\" % (values[0])` if `values[0]` is True, and it should return `\"if (a == b) [%s]\" % (values[1])` if `values[1]` is True."}, {"instruction": "Develop a Python class `Triangle` that implements a triangle object with three sides of equal length. The object should have a constructor that takes three integer values as arguments and initializes the object's sides with those values. The class should define three static functions:\n\n- `is_valid` that accepts three integer arguments and returns `True` if the provided integer values can create a valid triangle, and `False` otherwise.\n- `area` that accepts a single integer argument and returns the area of a valid triangle that has been initialized with the provided integer value.\n- `perimeter` that accepts a single integer argument and returns the perimeter of a valid triangle that has been initialized with the provided integer value."}, {"instruction": "Create a Python class called `ClassWithStaticMethod` that defines a static method called `is_even` that accepts an integer `x` as an argument and returns `True` if the `x` is even, and `False` otherwise."}, {"instruction": "Create a Python class `ReversedStringIterator` that implements an iterator for an input string. This class should provide two methods: `next()` and `has_next()`. The `next()` method should return the next character in the input string in reverse order. The `has_next()` method should return `True` if there is a next character, otherwise `False`. You should write assertions to verify that the provided string is not empty."}, {"instruction": "Develop a Python class named `SentimentAnalyzer` based on the following specification:\n\n- The `fit` function takes a single argument, `input_text`, which is a string of text containing one or more sentences. It should split the string into individual sentences, and pass each sentence to the `analyze_sentence` function.\n- The `analyze_sentence` function takes a single argument, `sentence`, which is a string representing a single sentence. It should split the sentence into words, and then analyze each word to determine if it is a positive, negative, or neutral word.\n- The static `analyze_word` function takes a single argument, `word`, which is a string representing a single word. The function should return a string representing the sentiment of the word, which can be `'positive'`, `'negative'`,  or `'neutral'`."}, {"instruction": "Write a Python class called `CryptoContext` that acts as a context manager that provides a cryptographic context for a given block cipher algorithm. When the class is instantiated, it takes in an algorithm name and a key data structure that stores the key information. The context manager should return a context manager object that pins the provided key information into a cryptographic context. The context manager should also provide a function called `encrypt` that takes in a byte array, encrypts it with the designated algorithm, and returns the encrypted data."}, {"instruction": "Implement a Python class `Rectangle` that defines a 2D rectangle with four attributes: `x` and `y` are the coordinates of the left-top corner of the rectangle, and `width` and `height` represent its width and height, respectively.\n\nThe class should have two methods: `contains_point(x, y)` that checks whether the given point (x, y) is in the rectangle, and `distance(x, y)` that computes the Euclidean distance between (x, y) and the rectangle center. The method should return a float value representing the distance from (x, y) to the rectangle center, or a tuple of two floats representing the x and y coordinates of a point on the border of the rectangle that is closest to (x, y). The method should return `None` if (x, y) is outside the rectangle."}, {"instruction": "Write a Python class called `MyNumber` that represents a numeric type, with a constructor that takes an integer value as input. The class should have a method called `is_odd` that returns `True` if the current value of the class object is an odd number, and `False` otherwise."}, {"instruction": "Create a Python class `StatTracker` with the following properties:\n\n- `count`: an integer that keeps track of the number of different values entered into the object\n- `sum`: a floating-point number that represents the sum of the different values entered into the object\n- `mean`: a floating-point number that represents the average of the different values entered into the object\n- `minimum`: a float that represents the minimum value entered into the object\n- `maximum`: a float that represents the maximum value entered into the object\n\nFor simplicity, you can assume that the values entered into the object will always be non-negative floating-point numbers.\n\nImplement the following methods in the class:\n\n- `__init__`: takes no arguments, but initializes all the properties to `0`\n- `add(value)`: takes a floating-point number as argument and updates the object's `count`, `sum`, `mean`, `minimum`, and `maximum` properties. `add` should return `None`.\n- `clear()`: resets all the properties to `0`. `clear` should return `None`.\n\nThe class should also support the standard `min()` and `max()` functions for finding the minimum and maximum values."}, {"instruction": "Define a Python class `Square` that represents a square with an integer-valued side length. The class should have three methods: `get_area()`, `get_perimeter()`, and `is_square()`. The first two methods should compute the area and perimeter of the square, respectively. The third method should return `True` if the square is a square (has all its sides equal), and `False` otherwise."}, {"instruction": "Write a Python class `Student` that defines three instance attributes, `name`, `age`, and `score`. The class should have a method `pass_test` that takes no arguments and returns `True` if the score is greater than or equal to 60. Otherwise, it should return `False`. The class should have a class method `get_average_score` that takes a list of `Student` objects and returns the average score of all the students. The method should use a conditional statement with a logical operator to determine if the score of a given `Student` object is greater than or equal to 60. If so, the method should return `True` in a boolean context. Otherwise, it should return `False` in a boolean context."}, {"instruction": "Create a Python class `Employee` to represent an employee in a company. Each employee has a `name`, `job_title`, `salary`, and `allowed_vacation_days`. The `Employee` class should have two static methods: `raise_salary` and `calculate_vacation`. The `raise_salary` method should accept an `Employee` instance and an integer `amount`. It should update the employee's salary by adding the amount to the current salary value, returning the updated salary. The `calculate_vacation` method should accept an `Employee` instance as an argument and return the number of vacation days remaining after allowing 10 days of annual vacation."}, {"instruction": "Create a Python class named `StringNode` and define the following methods:\n\n- `__init__(self, value, next_node=None)`: define an instance of StringNode with a value of type `str` and a pointer to the next node in the linked list.\n- `is_in_list(self, value)`: return `True` if the value is in the linked list, and `False` otherwise.\n- `find(self, value)`: find the `StringNode` object in the linked list that has its value equal to the input `value`, and return it if it exists. If not, return `None`.\n- `insert(self, value)`: create a `StringNode` object with the given `value` and insert it into the front of the linked list.\n- `remove_at(self, index)`: remove the `StringNode` object at the given `index` from the linked list."}, {"instruction": "Write a Python class called `PasswordValidator` with a method `check_password` that takes one argument, `password`, and checks whether it is valid. `check_password` should return `True` if the password is valid, `False` otherwise.\n\nThe password should be considered valid if it satisfies the following conditions:\n\n- It is at least 8 characters long.\n- It contains at least one uppercase letter.\n- It contains at least one lowercase letter.\n- It contains at least one digit.\n- It contains at least one special character.\n\nIf the password does not meet any of the above criteria, it is considered invalid."}, {"instruction": "Implement a Python class for a game of rock-paper-scissors with three choices (rock, paper, and scissors).\n\nThe class should have the following public methods:\n\n- `show_result`: takes two arguments, `player1` and `player2` (both of type `Action`), and returns the result of the game (a string of `'win'`, `'lose'`, or `'draw'`).\n- `show_result`: takes two arguments, `player1` and `player2` (both of type `Action`), and returns the result of the game (a string of `'win'`, `'lose'`, or `'draw'`).\n\nThe class should have the following private methods:\n\n- `is_win`: takes two arguments, `action1` and `action2` (both of type `Action`), and returns a boolean indicating if the first action wins against the second.\n- `is_draw`: takes two arguments, `action1` and `action2` (both of type `Action`), and returns a boolean indicating if the two actions are the same.\n\nThe class should have the following private attributes:\n\n- `name`: a string indicating the name of the game (e.g., `\"rock paper scissors\"`).\n- `actions`: a set of strings indicating the possible actions in the game (e.g., `{\"rock\", \"paper\", \"scissors\"}`).\n\nThe class should have the following public static methods:\n\n- `get_actions`: returns the `actions` attribute of the class.\n- `get_name`: returns the `name` attribute of the class.\n\nThe class should have the following public static attributes:\n\n- `win_actions`: a dictionary mapping the winning actions to their opponents (e.g., `{\"rock\": \"scissors\"}`).\n- `draw_actions`: a dictionary mapping the drawing actions to their opponents (e.g., `{\"rock\": \"rock\", \"paper\": \"paper\", \"scissors\": \"scissors\"}`).\n\nThe class should have the following static function:\n\n- `get_opponent`: takes an action as an argument, and returns the opponent action."}, {"instruction": "Write a Python class called `Color` that represents a color in RGB colorspace. The class should have the following methods:\n\n- `get_red`, `get_green`, and `get_blue`, which return the red, green, and blue channel values of the color object, respectively.\n- `set_red`, `set_green`, and `set_blue`, which take a value between 0 and 255 as an argument and set the corresponding channel value of the color object.\n- `get_hex_string`, which returns the RGB color values in a hexadecimal string.\n- `get_rgb_string`, which returns the RGB color values in a string as \"R,G,B\".\n- `is_dark`, which returns `True` if the color object is dark (less than 128 for all channels), and `False` otherwise.\n- `is_light`, which returns `True` if the color object is light (more than 200 for all channels), and `False` otherwise.\n- `is_gray`, which returns `True` if the color object is gray (all channels are equal), and `False` otherwise."}, {"instruction": "Write a Python class called `MessageStore` that stores a list of `Message` objects. The `Message` class has two attributes, `sender` and `text`. The class should have the following methods:\n\n- `store_message(sender, text)`: stores a new `Message` object with the given `sender` and `text`, or throws `ValueError` if the message is not formatted correctly.\n- `get_messages_from(sender)`: returns a list of `Message` objects from the given `sender`.\n- `get_messages_to(sender)`: returns a list of `Message` objects to the given `sender`.\n- `get_messages_to_from(sender)`: returns a list of `Message` objects to and from the given `sender`."}, {"instruction": "Write a Python class called `BinaryCounter` that keeps track of a binary counter that starts at 0 and increments by 1 for each instance. Each instance of the class should be able to count up to 2^n with the `next()` method. The constructor should accept an integer n as an input so that the counter can count up to 2^n. The class should also provide a static function called `counter_regions` that takes two integers start and end as arguments and returns a list of integers that represent the regions where the counter is incremented."}, {"instruction": "Write a Python class `LoginManager` to validate login credentials using a simple username and password scheme. The class should have a static method called `validate` that takes two arguments, `username` and `password`, and returns `True` if the username and password match the stored values, or `False` otherwise.\n\n```python\nclass LoginManager:\n    # Define a static method 'validate' to perform authentication\n    @staticmethod\n    def validate(username, password):\n        # Your code here\n        pass\n\nprint(LoginManager.validate('admin', ''))  # True\nprint(LoginManager.validate('admin', ''))  # False\n```"}, {"instruction": "Implement a Python class `Conditional` that is able to evaluate the truth value of a Python statement and return the appropriate result. The class should be defined with a static method called `evaluate` that accepts a single argument, `statement`, that is a Python statement that can be evaluated as a boolean.\n\nThe static method should return a Boolean value that indicates the truth value of the given statement. The method should be able to handle the following input scenarios:\n- If `statement` starts with `not`, the method should evaluate the truth value of the given statement after removing the `not` keyword.\n- If `statement` does not start with `not`, the method should evaluate the truth value of the given statement."}, {"instruction": "Implement a Python class called `Thermostat` to control the temperature of a device. The class should have a constructor `__init__` that takes in two arguments: `current_temp` and `target_temp`, representing the current temperature of the device and the target temperature of the device, respectively.\n\nThe class should have the following methods:\n\n- `adjust`: This method should adjust the temperature of the device by a small amount based on the current and target temperature. The method should accept a single argument `step`, which is the amount to adjust the temperature by. The method should return `True` if the temperature is adjusted by a positive amount, and `False` if it is adjusted by a negative amount.\n- `get_current_temp`: This method should return the current temperature of the device as a float value.\n- `get_target_temp`: This method should return the target temperature of the device as a float value.\n\nThe class should also have the following private methods:\n\n- `_check_adjustment_valid`: This private method should take in an argument `step`, which is the amount to adjust the temperature by. The method should return `True` if the adjustment is valid, and `False` if it is invalid. The adjustment is considered valid if the current temperature is within a certain range of the target temperature.\n- `_adjust_temps`: This private method should take in two arguments: `step` and `new_temp`, which are the amount to adjust the temperature by and the new temperature after adjustment, respectively. The method should adjust the `current_temp` and `target_temp` attributes of the class by the given `step` value.\n\nThe class should also have the following static methods:\n\n- `adjusting_valid`: This static method should take in two arguments: `current_temp` and `target_temp`, representing the current temperature and the target temperature of the device, respectively. The method should return `True` if the adjustment is valid, and `False` if it is invalid. The adjustment is considered valid if the current temperature is within a certain range of the target temperature."}, {"instruction": "Write a Python class `BooleanOperator` that defines a binary boolean operator (e.g., `AND`, `OR`, `XOR`). The class should have two attributes, `left` and `right` that store the operands. The class should have a static function called `evaluate` that takes two `BooleanOperator` operands as arguments and returns the result of the evaluation. The evaluation of an `AND` boolean operator should return `True` only if both operands are `True`, otherwise `False`; a `OR` boolean operator should return `True` if either of the two operands are `True`, and `False` otherwise; a `XOR` boolean operator should return `True` only if exactly one of the two operands is `True` and `False` otherwise. You should use a conditional to ensure that the `left` and `right` operands are `BooleanOperator` instances."}, {"instruction": "Implement a Python class `Counter` that keeps track of the number of times a given event occurs. It should have a static method called `add_event` that accepts an event name and increments its corresponding counter by 1. It should also have a `get_count` method that returns the number of times the given event has occurred."}, {"instruction": "Create a Python class called `DecisionTreeClassifier` that implements a decision tree classifier. The class should have the following methods:\n\n- `fit`: A method that fits a decision tree classifier to the training data, represented as a NumPy array of features `X` and a NumPy array of labels `y`.\n- `predict`: A method that makes predictions on the test data based on the fitted model.\n\nEach method should have the following functionalities:\n\n- `fit`: The `fit` method should accept two NumPy arrays, `X` and `y`, representing the training data and labels, respectively. It should fit the decision tree classifier to these data by recursively splitting the data into subsets based on the features and labels.\n- `predict`: The `predict` method should accept a NumPy array, `X_test`, representing test data, and make predictions on these data. It should return a NumPy array of the same shape as `X_test`, containing the predicted labels for each input."}, {"instruction": "Implement a Python class of a univariate linear regression model, which is defined by the equation `y = wx + b` where `x` is the feature vector, `y` is the predicted label, `w` is the weight vector, and `b` is the bias term. The class should have the following methods:\n\n- `fit(self, inputs, labels)` that trains the model using the given inputs and labels. `inputs` and `labels` are either a single input value or a list of input-label pairs.\n- `predict(self, inputs)` that computes the predicted value for each input. `inputs` can be a single value or a list of input values.\n- `score(self, inputs, labels)` that computes the mean squared error of the predicted values for the given inputs and labels.\n- `get_params(self)` that returns a dictionary of the model's parameters (e.g., `{'w': self.w, 'b': self.b}`)."}, {"instruction": "Implement a Python class `CircularBuffer` that stores a fixed-size circular buffer of elements. The class should have two methods:\n\n- `add(elem)`: adds `elem` to the buffer, replacing the oldest element if the buffer is full.\n- `get()`: returns the oldest element in the buffer, if any.\n\nThe class should have a static method `is_full(buffer_size)` that takes an integer argument `buffer_size` and returns a boolean value representing whether the buffer is full."}, {"instruction": "Write a Python class to represent a binary tree. The class should contain a single instance variable `root` to store a reference to the root node of the tree. The class should have the following methods:\n\n- `add_node(key)`: a method to add a node to the tree with the given key. The method should recursively search through the tree to find the appropriate location to insert the new node. If the key already exists in the tree, the method should do nothing.\n- `search(key)`: a method to search for a node in the tree with the given key. The method should recursively search through the tree to find the node with the given key. If the key is not found, the method should return `None`. Otherwise, it should return a reference to the node with the given key."}, {"instruction": "Implement a Python class `ArithmeticOperations` that defines two methods: `add` and `subtract`, which perform basic arithmetic operations such as addition and subtraction. The class should also define two static functions: `check_input_is_valid` and `check_input_length` to validate the correctness of user input.\n\n```python\n>>> op1 = ArithmeticOperations(10, 20)\n>>> op1.add()\n30\n>>> ArithmeticOperations.add(10, 20)\n30\n>>> ArithmeticOperations.check_input_is_valid(10, 20)\nTrue\n>>> ArithmeticOperations.check_input_is_valid(10, 20, 10)\nTrue\n>>> ArithmeticOperations.check_input_is_valid(10, 20, 10, 10)\nFalse\n>>> ArithmeticOperations.check_input_length(10, 20, 10, 10)\n2\n```"}, {"instruction": "Develop a Python class `ShoppingCart` that represents a shopping cart, and include the following functions:\n\n- `__init__(self, name)`: initialize the instance with a name\n- `add_item(self, item, price)`: add a new item to the shopping cart, represented by an `item` string and a `price` float\n- `calculate_total_price(self)`: calculate and return the total price of the items in the shopping cart\n- `name(self)`: return the name of the shopping cart\n- `items(self)`: return a list of the items in the shopping cart\n\nThe class should define the `__str__(self)` function to return a string representation of the shopping cart, i.e., the name of the cart and a formatted listing of the items and their prices."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: API interface design, conditional branching, type-based input validation, data structure initialization\n\n### Task", "fingerprint": null, "content": {"code": "soap_instantiate_ns3__FEDetRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FEDetRequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEDetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEDetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEADetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEADetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECompConsResponse\"))\n\t\treturn soap_instantiate_ns3__FECompConsResponse(soap, n, NULL, NULL, size);\n\tns3__FEDetRequest *p;\n\tsize_t k = sizeof(ns3__FEDetRequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FEDetRequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FEDetRequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FEDetRequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FEDetRequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_in_ns3__FEDetRequest"}, "id": 22, "seed": "soap_instantiate_ns3__FEDetRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FEDetRequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEDetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEDetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEADetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEADetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECompConsResponse\"))\n\t\treturn soap_instantiate_ns3__FECompConsResponse(soap, n, NULL, NULL, size);\n\tns3__FEDetRequest *p;\n\tsize_t k = sizeof(ns3__FEDetRequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FEDetRequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FEDetRequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FEDetRequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FEDetRequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "__index_level_0__": 7, "concepts": ["API interface design", "conditional branching", "type-based input validation", "data structure initialization"], "parsing_result": [{"instruction": "API interface design is an important part of writing high-quality programs. This task involves designing a simple API interface that provides a convenient way to access data structures within a program. The interface should be easy to use and understand, allowing developers to easily add, remove, and update data in the program.\n\nDesign a Python class named `MyAPI` that implements the following API methods:\n\n- `add_data(data_id, data_value)`: add a new data item with an ID and a value\n- `remove_data(data_id)`: remove a data item with a specific ID\n- `update_data(data_id, data_value)`: update a data item with a new value\n- `get_data(data_id)`: return the value of a data item with a specific ID\n\nThese methods should provide the most basic functionality of a data structure. The `add_data` method should check for duplicates before adding a new data item. The `remove_data` method should return `True` if the data item is successfully removed, or `False` if the data item does not exist. The `update_data` method should return `True` if the data item is updated successfully, or `False` if the data item does not exist or the new value is invalid. The `get_data` method should return the value of a data item with a specific ID, or `None` if the data item does not exist.\n\nTo ensure the interface is easy to use, implement proper precondition checks and postcondition assertions for each method. These precondition checks should validate the input parameters and raise exceptions if invalid inputs are passed. Postcondition assertions should verify the state of the program after the method is called and raise exceptions if the postcondition is violated.\n\n#"}, {"instruction": "Write a Python program that parses user input and interacts with a pre-existing API. The program should receive user input using a command-line interface. The program should support two types of input:\n\n- A string representing a URL of a web page (example: `https://github.com/A-Team/interview`)\n- A string representing a file path (example: `input.txt`)\n\nThe program should fetch the web page or read the file, depending on the input type, and display the page contents. The program should also display a menu of options for the user to select a category of content to display:\n\n- All headers (H1 - H6)\n- All paragraphs (P)\n- All text in a specific header (H1, H2, etc.)\n\nThe program should allow the user to navigate through the page content and display subsections of the page as needed. The program should continuously prompt the user for input to navigate through the page content and perform actions as needed.\n\nThe program should handle invalid input, such as invalid URLs, file paths, or input types that cannot be processed by the program. It should also handle any errors that occur during the program execution."}, {"instruction": "Design a Python program that takes user input to modify a local `location_dict` dictionary. The user can enter a command string to perform a specific action, with the following format: `\"action space location1 space location2\"`. The action can be any one of the following: `add`, `remove`, `check`, `move`, `print`, `quit`.\n\nThe location1 and location2 are strings corresponding to location names in the dictionary. For example, the first line should correspond to `\"add city California\"`. When the user types in `\"check California\"`, the program should display the message `The location California is not in the dictionary.`"}, {"instruction": "Design a Python program that takes a string of comma-separated inputs that represent the `x` and `y` coordinates of points on a 2D plane. Parse each input as a tuple `(x, y)` using a conditional loop that iterates over the list of inputs until the end. Then, calculate the distance between each pair of points and generate a report with the corresponding distances. Write assertions to ensure the input is a non-empty list of strings.\n\nThe program should also generate an output report that lists the distances in ascending order."}, {"instruction": "Write a Python program to simulate a simple online game. The game should be able to accept user input and display the results of executing the program. The main interfaces of the game are as follows:\n\n- Start the game: the program prompts the user for a player name and a game type.\n- Play the game: the program prompts the user to enter a guess (e.g., 1 to 6) or \"exit\" to end the game.\n- End the game: the program displays various statistics after the game is over (e.g., total number of guesses, number of wins, and win percentage).\n\nThe game should also ensure that the user enters valid input (e.g., guess must be an integer between 1 and 6, or \"exit\"). The game should also handle unexpected user inputs gracefully (e.g., game type not supported)."}, {"instruction": "Create a Python program `random_series_gen.py` that reads a file with the numbers of a random series and prints a random series with specified number of entries (e.g., the number of entries in the file). The program should be able to handle input files with numbers up to 100,000 entries.\n\nAllow the user to choose the maximum number of random numbers generated in the series. If the user enables the debug mode, the program should enable additional output to check the internal data structures. The program should be able to handle both positive and negative numbers."}, {"instruction": "Design a Python program to compute the sum of the digits in a number. The program should take a positive integer as input and print the sum of its digits.\n\n- The input should be validated to ensure it is a positive integer.\n- The digits in the input should be extracted and added to a running total sum."}, {"instruction": "Design a Python program that reads data from an external API and stores the data in a pickle file. Write assertions to ensure the program is valid, that is, that the user can run the program and that the expected output is produced.\n\nThe program should take a single argument: the base URL for an API that returns a JSON object that contains a list of movie data, as well as the URL for the pickle file to be saved. The program should fetch the data from the API endpoint and save it to the pickle file. The program should use a conditional branching statement to determine the validity of the input URL that is passed in. If the URL is valid, the program should fetch the data from the API and save it to the pickle file. If the URL is invalid, the program should print a message to the user and exit."}, {"instruction": "Develop a Python program that manages a list of products with their prices and a list of client orders with the product ID and quantity. The program should prompt the user to choose an option and perform the corresponding actions:\n\n- `1` - display the product list (with product ID and price)\n- `2` - display the order list (with product ID and quantity)\n- `3` - add a new product to the product list\n- `4` - add a new order to the order list\n- `5` - quit\n\nThe product list should be stored in a dictionary, where the key is the product ID and the value is the product price. The order list should be stored in a list of dictionaries, where each dictionary represents an order with the product ID and quantity."}, {"instruction": "Write a Python program that takes a non-empty string as input and checks whether the parentheses in the string are balanced. There are three types of parentheses: [], {}, and (). The program should solve the problem without any external libraries or modules. For example, given \"{[()]} {()}\", the program should return True, while for \"([)]\" the program should return False."}, {"instruction": "Create a Python program that reads a range of integers from the command-line arguments and creates a list of all the primes in that range. The program should be written in such a way that it can be easily extended to support different input types and ranges.\n\nThe program flow should include:\n\n- Checking the validity of the input arguments by using conditional branching and type-based input validation.\n- Initializing the list of primes with the first prime number 2.\n- Iterating over the input range and checking if each number is a prime by using a while loop.\n- If the number is prime, append it to the list of primes.\n- Printing the list of primes to the console.\n\nThis program should be robust against unexpected input. It should gracefully handle missing or invalid input arguments, unexpected input types, and invalid input ranges."}, {"instruction": "Design and implement a Python program that takes a list of integers as input and returns the list of indices for each group of three consecutive elements that sum up to zero. For example, given [-3, 3, 2, 1, 0, -1, 2, 3, 4, 5], the program should return [[0, 2, 4], [0, 3, 5]]."}, {"instruction": "Design a Python program that allows users to interact with the aforementioned API. The program should output a menu of options, prompt users to enter an option, and execute the appropriate action until the user quits. You should also include assertions to ensure input validation."}, {"instruction": "Design a Python program that implements an API for calculating a certain type of statistics over a list of numbers. The API should consist of the following functions: `calculate_mean`, `calculate_median`, `calculate_mode`, `calculate_variance`, and `calculate_std_dev`. Each function should take a list of numbers as input and return a floating-point number representing the calculated statistic. The program should work with any type of list of numbers, including lists of integers, floats, or complex numbers.\n\nThe program should also provide a simple user interface where users can enter a list of numbers and receive the calculated statistics as a response. This interface should be designed to support input with different types of data, including lists of numbers, integers, floats, and even strings.\n\nThe program should prompt users to enter a list of numbers or a string representing a list of numbers separated by commas or spaces. The program should then use the API functions to calculate the requested statistics and display the results to the user."}, {"instruction": "Write a Python program that reads an input string and a target string from the command line arguments. The program should check if the target string is a subsequence of the input string. The program should return `True` if the target string is a subsequence, `False` otherwise.\n\nThe program should raise an `ArgumentError` exception if the input is not a string. It should raise a `ValueError` exception if the input string is not an alphabetical string. The program should raise a `ValueError` exception if the target string is not an alphabetical string.\n\nThe program should also print out a helpful message indicating the error type and the error message."}, {"instruction": "Write Python code to implement a simple CLI (command line interface) that allows the user to enter a list of integers, where the input list is continuously updated. After the user enters a single integer, the CLI should calculate the sum of the integers and display the sum. Note that the user can enter a list of integers, and the CLI should calculate the sum of these integers and display the sum.\n\nThe CLI should read user input and perform logic based on the command that the user enters. For example, the CLI should process the `exit` command to exit the program or any other command to process a list of integers.\n\nUse a `while` loop to process the input until the user enters the `exit` command. The CLI should also handle errors when the user inputs invalid commands or inputs invalid integers.\n\nIt is recommended to read user input using `input()`, a Python built-in function, and convert the input string to an integer using `int()`."}, {"instruction": "Design an API for an image processing application that allows users to load and modify images in specific pixel coordinates. The API should expose only high-level functionality, hiding the details of the image data structure and underlying data manipulation. The API should support basic transformations including resizing, rotating, and flipping.\n\nThe API should provide a single function called `modify_image(image, transform)` that takes an image data structure and a `transform` dictionary as arguments. The `transform` dictionary defines a specific transformation operation, such as rotation, with key-value pairs. Each key defines the operation to be performed, such as `rotate` or `flip`. Each value is a list of arguments specific to the operation, such as `degrees` for rotation or `axis` for flipping.\n\nThe `modify_image` function should return the result of the specified transformation. This implementation requires checking the input for valid image data structure and transform type and provided operation arguments. Additionally, ensure that a valid transformation operation is specified."}, {"instruction": "Design an API interface for stock performance analysis. The interface should allow users to retrieve performance data for a given stock, perform calculations on the data, and visualize the results. The API should provide a uniform interface for different types of performance calculations. It should also provide a method for selecting the data source (e.g., the Yahoo Finance API) for retrieving and processing the data."}, {"instruction": "Develop a Python program that accepts input from a user and performs various operations with it. The program should ask for user input to specify which operation to run:\n\n- Add: append a new item to a list\n- Remove: remove an item from a list\n- Print: print the current list\n\nEach of these operations should be implemented as a separate method or function without relying on global variables. The program should continue asking the user to input an operation until the user decides to quit the program."}, {"instruction": "Design a Python program that reads a list of integers from the command line and prints the list in reverse order. Only integers should be considered valid; non-integer input should be ignored and not printed. Write assertions to ensure the input is a list of integers."}, {"instruction": "Design a Python program that implements a simple calculator that follows the following rules:\n\n- Addition: two numbers separated by a plus sign `+`.\n- Subtraction: two numbers separated by a minus sign `-`.\n- Multiplication: two numbers separated by an asterisk `*`.\n- Division: two numbers separated by a forward slash `/`.\n- Exponentiation: two numbers separated by a caret `^`.\n- Parenthesized expression: a number or expression within parentheses `()`: `(3)`, `((3 + 5) * 4)`.\n- Validity: a string should be a valid expression if it contains valid operands and operators, and a user-defined function must be called if it is a valid function name.\n- Case sensitivity: both function names and operator symbols are case-sensitive.\n- Order of precedence: the order of operations is not specified.\n\nThe program should perform the calculation and return the result as a single output.\n\nFor example, the input expression `3 + 5 * 4 ^ (3 - 5)` should return the result 111. The program must be able to handle the following cases:\n\n- invalid operands (e.g., `3 +` or `3 + 5 * 4 ^ (3 - 5)`).\n- invalid operator symbols (e.g., `3 + 5 * 4 ^ (3 - 5)`).\n- invalid function names (e.g., `3 + 5 * 4 ^ (3 - 5)` or `3 + 5 * 4 ^ sqrt(3 - 5)`).\n\nThe program must be robust to the following inputs:\n\n- invalid expressions (e.g., `3 + 5 * 4 ^ (3 - 5)` or `3 + 5 * 4 ^ (3 - 5) +`).\n- valid expressions with leading whitespaces (`3 + 5 * 4 ^ (3 - 5)` or ` 3 + 5 * 4 ^ (3 - 5)`).\n- valid expressions with trailing whitespaces (`3 + 5 * 4 ^ (3 - 5)` or `3 + 5 * 4 ^ (3 - 5) `).\n- valid expressions with multiple whitespaces (`3 + 5 * 4 ^ (3 - 5)` or `3 + 5 * 4 ^ (3 - 5)   +`).\n- valid expressions with extraneous whitespaces (`3 + 5 * 4 ^ (3 - 5)` or `3 + 5 * 4 ^(3 - 5)`).\n- valid expressions with invalid whitespaces (`3 + 5 * 4 ^ (3 - 5)` or `3 + 5 * 4 ^ (3 - 5)` or `3 + 5 * 4 ^ (3 - 5) +`)."}, {"instruction": "Design a Python program that takes an input of 1) a positive integer `n` representing the side length of a square matrix, and 2) a string representing the direction of the spiral matrix, either `clockwise` or `counterclockwise`. The program should output a spiral matrix of size `n x n` with the numbers counting upward from 1 to `n * n`. The program should also enforce the `clockwise` or `counterclockwise` constraints, depending on the direction input.\n\nImplement special-case handling for invalid inputs, such as negative numbers, non-alphabetical strings, and empty strings."}, {"instruction": "Write a Python program that implements a simple calculator that can perform basic operations like addition, subtraction, multiplication, and division. Design the program so that it can compute the result of any valid mathematical expression that consists of numbers and operators.\n\nThe program should prompt the user to enter an expression, which must be a well-formed mathematical expression. The program should evaluate the expression and print the result to the console. Use a dictionary to keep track of the operations with their corresponding functions. Additionally, provide assertions to check if the expression is well-formed."}, {"instruction": "Implement a Python program to read a CSV file containing 4 columns - name, height, weight, and gender. Read the data and output the following information, in order of the first name in alphabetical order:\n\n- Total count of males and females\n- Average height and weight by gender\n- Names of people with heights above the median and by gender\n\nDefine the `Gender` enum class within the program and ensure the input data is validated against the enum class."}, {"instruction": "Write a Python program that takes user input for a number of elements, and creates a new list of numbers that is within the range of the input elements. The program should create a new list of numbers based on the input such that:\n\n- If the input is positive, the new list should be the input from 1 to the input.\n- If the input is negative, the new list should be the input from 0 to the input.\n- If the input is 0, the program should raise an error."}, {"instruction": "Using the API endpoints and data types described below, create a Python program that retrieves data from the API and prints the results to the console.\n\nData type: `Meal`:\n- `id`: string\n- `name`: string\n- `description`: string\n\nData type: `Recipe`:\n- `id`: string\n- `name`: string\n- `description`: string\n- `ingredients`: list of strings\n- `meal`: `Meal` object\n\nData type: `Meal`:\n- `id`: string\n- `name`: string\n- `description`: string\n- `recipes`: list of `Recipe` objects\n\nThe program should request user input to specify a meal name. The program should then retrieve the selected meal from the API and print its name, id, and description. Next, the program should request user input to specify a recipe name. The program should then retrieve that recipe from the API and print its name, id, description, and the list of ingredients. Finally, the program should print the meal's name and the recipe's name and ingredients."}, {"instruction": "Write a Python program that prompts the user for a positive integer `n`, and prints a [Pascal's triangle](https://en.wikipedia.org/wiki/Pascal%27s_triangle) of that height."}, {"instruction": "Design a Python program that takes a list of integers, `ints`, as input. The program should return the number of positive integers, `positive_count`, and the number of negative integers, `negative_count`, that appear in the list. The program should also return the sum of all positive integers and the sum of all negative integers."}, {"instruction": "Design an API interface for a program that manages a list of contacts in a phone book. The program provides the following functionalities:\n- add a new contact to the phone book with a unique identifier\n- retrieve a list of all stored contacts\n- retrieve a list of all stored contacts whose last names start with a specified character\n- update the phone number for a given contact\n- delete a contact from the phone book\n\nWrite assertions to ensure the correctness of input and output values, and define appropriate exception classes for program errors."}, {"instruction": "Write a Python program to implement a generic API for a database that stores `name` and `value` pairs. The API should implement the following operations:\n\n- `put(name, value)`: add a new `name` and its `value` to the database. If a `name` already exists, overwrite the previous `value`.\n- `get(name)`: return the corresponding `value`. If the `name` is not found, return `None`.\n- `remove(name)`: remove the `name` from the database.\n\nThe API should support multiple clients that can execute these operations concurrently, with no concurrency control. Additionally, write assertions to ensure the API is thread-safe."}, {"instruction": "Write an API function that accepts a single string argument, and returns a list of integers containing all unique pairs of indices for the string where the character at that index appears at least twice. The function should print the pairs in ascending order, and each pair should be represented by two integers separated by a space.\n\nFor example, given the input \"abcabcbb\", the output should be [0, 1], [1, 2], [2, 5], and [3, 4]."}, {"instruction": "Write a Python program that accepts a JSON string of key-value pairs as input and returns its corresponding dictionary. The input string is a series of JSON pairs separated by comma (\",\"). The JSON pairs are key-value pairs separated by a colon (\":\"). The key and value are always in double quotes.\n\nFor example, given the input string `{\"name\":\"Alex\", \"age\":30}`, the program should return a dictionary with the same key-value pairs."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 4\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: hash table manipulation and lookup, managed heap object, thread synchronization, monitoring\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool KeyHandler_ValueExists_mF5375C620ADF2D5B81AFA657D39C7DFB42F73EFF (KeyHandler_tB9094857C733957C9D709512D2AD478828B119FF * __this, String_t* ___name0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&String_t_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tString_t* L_0 = ___name0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\tString_t* L_1 = ((String_t_StaticFields*)il2cpp_codegen_static_fields_for(String_t_il2cpp_TypeInfo_var))->get_Empty_5();\n\t\t___name0 = L_1;\n\t}\n\nIL_000a:\n\t{\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_2 = __this->get_values_5();\n\t\tV_0 = L_2;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_3 = V_0;\n\t\tMonitor_Enter_mBEB6CC84184B46F26375EC3FC8921D16E48EA4C4(L_3, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_4 = __this->get_values_5();\n\t\tString_t* L_5 = ___name0;\n\t\tNullCheck(L_4);\n\t\tbool L_6;\n\t\tL_6 = VirtFuncInvoker1< bool, RuntimeObject * >::Invoke(19 /* System.Boolean System.Collections.Hashtable::Contains(System.Object) */, L_4, L_5);\n\t\tV_2 = L_6;\n\t\tIL2CPP_LEAVE(0x34, FINALLY_002a);\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_7 = V_1;\n\t\t\tif (!L_7)\n\t\t\t{\n\t\t\t\tgoto IL_0033;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_8 = V_0;\n\t\t\tMonitor_Exit_mA776B403DA88AC77CDEEF67AB9F0D0E77ABD254A(L_8, /*hidden argument*/NULL);\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x34, IL_0034)\n\t}\n\nIL_0034:\n\t{\n\t\tbool L_9 = V_2;\n\t\treturn L_9;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "KeyHandler_Flush_m56255985F7D2CBDE0231B579C9795A56B516F3C7"}, "id": 26, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool KeyHandler_ValueExists_mF5375C620ADF2D5B81AFA657D39C7DFB42F73EFF (KeyHandler_tB9094857C733957C9D709512D2AD478828B119FF * __this, String_t* ___name0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&String_t_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tString_t* L_0 = ___name0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\tString_t* L_1 = ((String_t_StaticFields*)il2cpp_codegen_static_fields_for(String_t_il2cpp_TypeInfo_var))->get_Empty_5();\n\t\t___name0 = L_1;\n\t}\n\nIL_000a:\n\t{\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_2 = __this->get_values_5();\n\t\tV_0 = L_2;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_3 = V_0;\n\t\tMonitor_Enter_mBEB6CC84184B46F26375EC3FC8921D16E48EA4C4(L_3, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_4 = __this->get_values_5();\n\t\tString_t* L_5 = ___name0;\n\t\tNullCheck(L_4);\n\t\tbool L_6;\n\t\tL_6 = VirtFuncInvoker1< bool, RuntimeObject * >::Invoke(19 /* System.Boolean System.Collections.Hashtable::Contains(System.Object) */, L_4, L_5);\n\t\tV_2 = L_6;\n\t\tIL2CPP_LEAVE(0x34, FINALLY_002a);\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_7 = V_1;\n\t\t\tif (!L_7)\n\t\t\t{\n\t\t\t\tgoto IL_0033;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_8 = V_0;\n\t\t\tMonitor_Exit_mA776B403DA88AC77CDEEF67AB9F0D0E77ABD254A(L_8, /*hidden argument*/NULL);\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x34, IL_0034)\n\t}\n\nIL_0034:\n\t{\n\t\tbool L_9 = V_2;\n\t\treturn L_9;\n\t}\n}", "__index_level_0__": 8, "concepts": ["hash table manipulation and lookup", "managed heap object", "thread synchronization", "monitoring"], "parsing_result": [{"instruction": "Develop a Python class `HashTable` that implements a hash table. The class should support different operations such as adding a key-value pair, removing a key, updating an existing key-value pair, looking up the key and returning the associated value, and removing all entries from the hash table.\n\nThe class should manage the internal state of the hash table through a `ManagedHeap` object. The `ManagedHeap` object should manage the internal state of the hash table through thread-safe operations.\n\nThe class should also support monitoring of various properties of the hash table, such as the total number of entries, the number of buckets, the number of entries per bucket, and the total number of collisions."}, {"instruction": "Implement a Python class `ConcurrentHash` that can manage multiple hash tables, with each hash table having a unique key. The class should support adding a new hash table and retrieving a hash table by its key. The class must also support concurrent access to the hash tables provided that each hash table is assigned to a thread and each thread can only access a hash table that belongs to it. Utilize the Python `threading` module to manage the threads. Add support for error logging and monitoring."}, {"instruction": "Develop a Python class `CacheManager` that serves as a cache manager for a particular cache. The class should maintain a cache of key-value mappings and enable the following operations:\n- `set(key, value)`: set the (key, value) pair in the cache. If the key already exists, replace its value.\n- `get(key)`: return the value of the (key, value) pair if it exists. If not, return `None`.\n- `delete(key)`: delete the (key, value) pair if it exists.\n\nThe class should support thread-safe operations. Additionally, the class should maintain a `cache_size` that serves as the size limit for the cache. If the cache size is exceeded, the class should evict the least recently used key-value pair to make room for the new ones. The class should also support the following methods for monitoring:\n- `cache_info()`: return the current number of key-value pairs and the size of the cache.\n- `most_recently_used()`: return the key of the most recently used key-value pair (without removing the pair from the cache)."}, {"instruction": "Create a Python class `MyMutex` that implements a simple mutex lock and unlock method. The class should support multiple threads trying to acquire the lock at the same time. The behavior of the `lock` and `unlock` methods should be consistent and predictable."}, {"instruction": "Develop a Python class `ConcurrentHashMap` which acts as a thread-safe implementation of a hash table that is capable of managing multiple threads concurrently. The class should be able to add and remove elements from the hash table in a thread-safe manner, and should also be able to return a value associated with a key without blocking other threads.\n\nSpecifically, the class `ConcurrentHashMap` should implement the following methods:\n- `put(self, key, value)` - adds the key-value pair to the hash table, overwriting any previous value if the key already exists\n- `get(self, key)` - returns the value associated with the specified key, or `None` if the key is not present\n- `remove(self, key)` - removes the key-value pair from the hash table, returning the corresponding value\n\nThe `ConcurrentHashMap` class should consist of a single class `ConcurrentHashMap` with the following methods:\n- `put(self, key, value)` - adds the key-value pair to the hash table, overwriting any previous value if the key already exists. This method should be thread-safe.\n- `get(self, key)` - returns the value associated with the specified key, or `None` if the key is not present. This method should be thread-safe.\n- `remove(self, key)` - removes the key-value pair from the hash table, returning the corresponding value. This method should be thread-safe.\n\nThe class should use the `Node` class as the internal implementation for hash table entries, and should use the `NodeManager` class as the internal implementation for the hash table. You can assume that the keys are unique."}, {"instruction": "Create a Python class `ManagedHeap` that manages a priority queue of integers. The class should offer two methods: `insert(item)` and `get_min()`. The `insert` method adds an item into the priority queue. The `get_min` method returns the minimum item in the queue, and removes it from the queue. The `ManagedHeap` class should encapsulate the underlying data structure as a private member variable. The class should provide a `print` method to print the data structure.\n\nThe `ManagedHeap` class should offer a `monitor` method that monitors the current status of the heap. The method should return a tuple of `(total_memory, peak_memory)` where `total_memory` is the total memory used by the object and `peak_memory` is the peak memory usage observed during the lifetime of the object. The `monitor` method should update the peak memory usage whenever the `ManagedHeap` object is created or manipulated.\n\nEnsure that the `ManagedHeap` class is thread-safe with respect to its methods. In particular, it should ensure that it is safe to call `insert` and `get_min` from different threads concurrently."}, {"instruction": "Design a Python class `MTQueue` that implements a multi-threaded queue. The class should support inserting and extracting elements of type `int` from a queue. The class should support multiple threads inserting and extracting elements. The class should handle errors and exceptions gracefully, including handling concurrent insertions and extractions without blocking.\n\nThe class should maintain internal state of a queue of `int` elements. Each thread should have its own queue of `int` elements, which is synchronized with the queue of the class. The class should provide methods for managing the queue, including insertion and extraction of elements.\n\nThe class should also support monitoring the internal state of the queue. The class should provide methods for monitoring the queue size, number of elements, and waiting time for all threads to finish their operations."}, {"instruction": "Implement a Python class `ThreadPool` that manages a thread pool of `max_threads` threads that process work jobs submitted to the thread pool. The class should offer the following functionalities:\n- `add_job(func: Callable, *args, **kwargs)`: add a work job to the queue so that a thread can pick it up and process it\n- `shutdown(self)`: stop all threads in the pool from processing new jobs\n- `shutdown_now(self)`: immediately stop all threads in the pool, regardless of their current status\n- `wait_completion(self)`: wait for all the threads in the pool to finish executing their current job"}, {"instruction": "Develop a Python class `ThreadPool` that manages a pool of worker threads. The class should support simple, non-blocking task submission and management. Each thread should accept a task function and an argument that is passed to the task function. The class should also support health monitoring of the threads. Submit a sample task that outputs the sum of all numbers within the range `[0-1000000000]` and measure its time."}, {"instruction": "Design a Python program that implements a simple hash table data structure. The hash table should support basic operations such as `get`, `set`, and `delete`, where the hash table is accessed through an API.\n\nThe hash table should be implemented as a managed heap object. Each hash table entry should consist of a `key` and a `value`, and the `key` should be a string and the `value` should be an object of type `User`. The `User` class should have properties such as `name`, `age`, and `height`, and should be associated with a unique `user_id` that is generated by the hash table and is used to identify the user object.\n\nThe hash table should be thread-safe to ensure proper synchronization. Each thread accessing the hash table should be able to use the API to retrieve and update the data. The hash table should be monitored and logged to ensure proper operation."}, {"instruction": "Implement a Python class `Bank` that manages a bank account balance. The class should allow updating the account balance by depositing or withdrawing amount, while other threads should be able to check for updates to the account balance. Provide clear error handling and logging to monitor exceptions that might occur during the bank balance update."}, {"instruction": "Develop a Python class `ThreadMonitor` that is associated with a list of threads and stores the active threads and their associated identifiers. The class should expose a method `get_active_threads` that returns the list of currently active threads. The class should provide methods for adding and removing threads to the list and for fetching the active threads.\n\nThe class should support multiple threads that are constantly updating the list of active threads. Ensure that `get_active_threads` returns an up-to-date view of the active threads. Use `threading.Lock` to ensure thread-safe operations on the list.\n\nThe class should provide the ability to monitor the active threads and log their states. The state of each thread should be monitored by a separate thread. The `ThreadMonitor` class should track the time since each thread was last active. You should define a separate `ThreadState` class to encapsulate the state information for each thread."}, {"instruction": "Develop a Python class `Cache` that implements a simple in-memory key-value cache. The class should support arbitrary objects as values. It should be able to support multiple threads of execution simultaneously, and each thread should be able to perform lookups on its own local cache without interference from other threads.\n\nThe class should have the following methods:\n- `__init__(self, max_size: int)`: constructs a new `Cache` instance with a given maximum size.\n- `get(self, key: str) -> object`: returns the value for the given key from the cache or `None` if it is not present.\n- `put(self, key: str, value: object)`: stores a new entry for the given `key` and `value` in the cache. If the cache is full, the least recently used entry should be evicted to make room for the new entry, while storing it in the cache.\n- `stats(self) -> str`: returns a human-readable string with information about the current cache state (size, current number of entries, and number of lookups and inserts).\n\nThe class should handle error cases when the given key is not found in the cache or when the cache is full."}, {"instruction": "Design a Python class `Monitor` that implements a simple monitor using a hash table to store the currently monitored resources. The class should allow multiple threads to simultaneously monitor different resources and handle thread safe access to the shared monitor.\n\nWhen a thread wants to monitor a resource, it first needs to check if that resource is already being monitored by some other thread. If not, the thread is given a handle to monitor it, which is a managed heap object that allows other threads to access the resource. The thread should be able to retrieve the current value of the monitored resource and also be notified when the value of the resource changes.\n\nThe class should include error handling to manage invalid inputs and exceptions. It should also include methods to start and stop the monitor threads, in which case it should release any resources allocated for monitoring."}, {"instruction": "Develop a Python class `GreenThread` that emulates the green threading model. It should support creating and joining threads, as well as stopping and resuming threads. The class should also keep track of the currently running thread and its status (running, stopped, or suspended). The class should provide convenient methods for creating and manipulating thread objects, as well as a static method to return the currently running thread."}, {"instruction": "Develop a Python class `ManagedList` that is similar to a Python list. However, the class should provide additional methods for adding and removing elements, and maintaining the synchronization between the list's internal state and the external world. The class should implement the `__len__` and `__getitem__` methods, and support adding and removing elements to it using the `append` and `remove` methods.\n\nThe class should maintain two internal states: a managed heap object that represents the list's internal state, and a lock object (typically a `threading.RLock`) that is used to ensure the integrity of the list. The class should also support thread-safe read and write access to the managed heap object. The class should be thread-safe and provide all the functionalities of a Python list, including list operations for adding and removing elements.\n\nThe class should handle errors and handle internal state changes efficiently. For example, adding an element to a full list should trigger an exception, and removing an element from an empty list should return an appropriate error. Synchronization between the external world and the list's internal state should be maintained effectively to prevent data corruption or synchronization issues."}, {"instruction": "Develop a Python class `Account` that manages a `balance` and a `rate`. The class should support depositing, withdrawing, and getting the current balance of the account. The class will be used by multiple threads to deposit or withdraw money. All operations should be atomic and thread-safe.\n\nDevelop a Python class `AccountManager` that maintains a `rate` and a list of `Account` objects. The object should support depositing, withdrawing, and getting the current balance of the accounts. It should be able to handle threads that request the balance of the accounts and threads that request the deposit/withdraw operations on the accounts. You should ensure that the class is thread-safe."}, {"instruction": "Implement a thread-safe hash table with `get`, `put`, and `delete` methods. The hash table should support multiple concurrent read and write operations. The user should be able to get the value associated with a certain key or set the value associated with a certain key.\n\nDesign a Python class to implement a thread-safe hash table, which should allow concurrent execution of `get`, `put`, and `delete` methods. The class should maintain internal state of a table that stores key-value pairs. The `get`, `put`, and `delete` methods should support concurrent execution."}, {"instruction": "Develop a Python program that implements a `MinHeap` class for managing a collection of `HeapItem` objects, where a `HeapItem` stores a priority value and an object. The `MinHeap` class should present a single method for enqueueing `HeapItem` objects. The class should also provide methods for dequeueing the `HeapItem` with the smallest priority value and for clearing the entire queue. Implement the `MinHeap` class using a managed heap object that wraps a Python list. The managed heap object should support removal of the head element from the heap and support insertion of new elements by updating the size."}, {"instruction": "Design a Python class `ConcurrentHash` that maintains a key-value mapping for multi-threaded applications. The class should support adding, removing, and updating values for a given key, as well as looking up a value given a key. A concurrent implementation means that the class should be thread-safe and thus multiple threads can safely perform operations on the class. The class should be generic and allow different types of keys and values.\n\nThe class should maintain a heap internally, which should be used to prevent threads from starving and ensuring thread-safe operation. The class should also be monitored and provide metrics to measure the performance and latency of the class."}, {"instruction": "Develop a Python class `QueueManager` that supports enqueuing and dequeuing data from a queue. The class should be able to handle multiple concurrent queues, with each queue having its own unique key, and ensure thread-safe access to the queue.\n\nThe class should support the following operations:\n- `enqueue(self, queue_key: str, data: str)`: Enqueue a new item into the queue with the specified key.\n- `dequeue(self, queue_key: str)`: Dequeue an item from the queue with the specified key, blocking until an item becomes available.\n- `peek(self, queue_key: str)`: Return the next item in the queue without dequeuing it, if available.\n\nThe class should handle errors gracefully, such as when accessing an invalid queue key or when trying to dequeue from an empty queue. Additionally, implement the `__str__` method to provide an overview of the current state of the queue manager."}, {"instruction": "Develop a Python class `UserManager` that manages a set of users, including their usernames and hashed passwords. The class should provide functions to register new users, log in existing users, and password reset.\n\nThe class should support concurrent access for multiple users. The class should handle authentication failures gracefully by rejecting users who are not registered or invalid password attempts. When a user logs in successfully, the class should maintain the user's authentication session, allowing them to access protected resources.\n\nThe class should also provide a mechanism to monitor the number of active users and the number of failed login attempts. This information should be captured in a log file or database."}, {"instruction": "Develop a Python class `GarbageCollector` that operates as a garbage collector for a runtime environment. The class should maintain a managed heap that is an underlying data structure that stores all the objects created by the runtime environment. The heap should be a dictionary that maps object IDs to objects. The class should also have a method `collect()` that, when called, performs a garbage collection by deallocating all the objects in the managed heap that are marked to be deleted."}, {"instruction": "Develop a Python class `Timecard` that manages timecards and its associated data. The class should store a list of `time_entries` objects, each of which represents a time interval during which the employee worked. A `time_entries` object is defined by a start time, an end time, and a reason for working during that time.\n\nThe class should support the following operations:\n- adding new time entries\n- retrieving all entries\n- retrieving an entry by the corresponding timestamps\n- retrieving the entries that exceed a certain number of hours\n- removing all entries that exceed a certain number of hours\n\nThe class should support concurrent access from multiple threads, ensure thread safety, and provide monitoring for the number of threads accessing it at any given time."}, {"instruction": "Develop a Python class `ConcurrentHashMap` that implements a concurrent hash map with an underlying `dict` data structure. The constructor of this class takes an integer `size` to define the number of buckets in the hash map. The class should support insertion, lookup, and deletion operations on the hash map. Management of the hash map's thread-safety is handled by using a managed heap object to avoid unnecessary locking cost; therefore, the class should impose sufficient locking to ensure thread-safety. The class should include an internal counter that counts the number of threads acquiring the lock, as well as a counter that monitors the number of concurrently running threads."}, {"instruction": "Develop a Python class `PerfectHash` that implements the perfect hash function. The class should maintain a hash table containing `(key, value)` pairs where `value` is an integer and `key` is a string. The class should support adding, removing, and retrieving elements from the hash table. The class should handle collisions by using a separate chaining technique.\n\nThe class should also support the following operations on the hash table:\n- `list`: return the entries in the hash table as a list of `(key, value)` tuples.\n- `lookup(key)`: return the value associated with the specified key.\n- `insert(key, value)`: insert a new `(key, value)` pair into the hash table.\n- `remove(key)`: remove the entry associated with the specified key from the hash table.\n\nThe hash function uses the following formula to compute the hash value for a given key: `hash_value = hash(key) % table_size`."}, {"instruction": "Develop a Python class `ConcurrentDictionary` that implements a concurrently accessible key-value store. The class should support inserting, retrieving, and deleting key-value pairs. All operations should be thread-safe, meaning that multiple threads can safely access and modify the dictionary concurrently.\n\nThe class should support monitoring of the number of operations performed by different threads. Additionally, implement a cleanup operation that removes stale entries from the dictionary after a set `timeout` period, where stale entries are defined as those that haven't been accessed for the specified period."}, {"instruction": "Design a Python class that represents a live monitor of a resource. The class should be able to keep track of and manage the status of multiple resources and report the status of each resource to a client. The class should support creating threads that periodically check for status updates of each resource, and the client should be able to query the status of a resource at any time. The class should handle issues such as resource failure and resource availability."}, {"instruction": "Develop a Python class `AccountManager` that manages accounts and their transactions. Each account is represented by an object of `Account` class (see below). The class should provide functionality for creating, fetching, and deleting accounts. Each account has an associated list of `Transaction` objects that stores the transactions performed on the account. It should also support adding, updating, and deleting transactions.\n\nThe `Account` object should be thread-safe, and all the operations on it should be protected with proper synchronization mechanisms. All `Account` objects should share a common `Transaction` list, so that all modifications to the transactions are visible to all accounts.\n\nThe `AccountManager` class should also provide functionality for monitoring and reporting on the accounts and transactions. The class should maintain a `Monitor` object that tracks the number of accounts and transactions that have been created, deleted, and updated. The `Monitor` object should provide methods to report on the total number of accounts, transactions, and created transactions per time interval. The `Monitor` object should also provide methods to return a list of all accounts in the manager along with the number of transactions associated with each one.\n\nDefine the `Account` and `Transaction` classes yourself."}, {"instruction": "Design a Python class `SmartCalculator` that offers advanced mathematical operations at a high level of abstraction. The class should support basic mathematical operations such as addition, subtraction, multiplication, and division. The class should also support more advanced operations, such as exponentiation, logarithms, factorials, and trigonometric functions. The class should use a hash table to store state variables and thread-safe synchronization to ensure that operations are performed atomically.\n\nThe class should handle erroneous inputs gracefully, such as handling non-numeric inputs, division by zero, and unexpected errors. Additionally, it should provide a `log` method that collects diagnostic information. The `log` method should return a list of strings, where each string shows the state of the object at a particular moment."}, {"instruction": "Develop a Python class that represents a generic hash table with the following properties:\n- Hash table should automatically grow when full\n- Hash table should automatically shrink when empty\n- Hash table should support specified types of data operations\n- Hash table should retain the order of insertion\n- Hash table should support concurrent read operations\n- Hash table should support concurrent write operations\n- Hash table should efficiently handle large hash tables\n- Hash table should be thread-safe\n- Hash table should support public and private methods"}, {"instruction": "Develop a Python class `HashTable` that implements a hash table (a dictionary) and supports basic operations such as insertion, lookup, and deletion. The class should provide a lock (mutex) for thread synchronization and a thread-safe implementation of `get()`. It should also store the capacity of the hash table and the number of items in the dictionary.\n\nThe class should be initialized with a maximum capacity for the hash table. If the user attempts to insert a new item into a full hash table, the function should raise a `HashFull` exception. Additionally, the `HashFull` exception should be handled gracefully, such as with a queue of items waiting to be processed."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 4\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: numerical bounds checking, QP formulation, linearization, discretization\n\n### Task", "fingerprint": null, "content": {"code": "LinearQuadraticStage approximateStage(OptimalControlProblem& optimalControProblem, TrajectoryRef start, StateTrajectoryRef end,\n                                      bool isInitialTime) {\n  const auto modelData = approximateIntermediateLQ(optimalControProblem, start.t, start.x, start.u, MultiplierCollection());\n\n  // checking the numerical properties\n  const auto errSize = checkSize(modelData, start.x.rows(), start.u.rows());\n  if (!errSize.empty()) {\n    throw std::runtime_error(\"[[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errSize);\n  }\n  const std::string errProperties =\n      checkDynamicsProperties(modelData) + checkCostProperties(modelData) + checkConstraintProperties(modelData);\n  if (!errProperties.empty()) {\n    throw std::runtime_error(\"[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errProperties);\n  }\n\n  LinearQuadraticStage lqStage;\n  const auto dt = end.t - start.t;\n\n  lqStage.cost = modelData.cost;\n  lqStage.cost *= dt;\n\n  // Linearized Dynamics after discretization: x0[k+1] + dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k])\n  lqStage.dynamics = approximateDynamics(modelData, start, dt);\n  // Adapt the offset to account for discretization and the nominal trajectory :\n  // dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k]) - x0[k+1]\n  lqStage.dynamics.f -= end.x;\n\n  lqStage.constraints = approximateConstraints(modelData, isInitialTime);\n\n  return lqStage;\n}", "docstring": "// checking the numerical properties", "function_name": "getLinearQuadraticApproximation"}, "id": 29, "seed": "LinearQuadraticStage approximateStage(OptimalControlProblem& optimalControProblem, TrajectoryRef start, StateTrajectoryRef end,\n                                      bool isInitialTime) {\n  const auto modelData = approximateIntermediateLQ(optimalControProblem, start.t, start.x, start.u, MultiplierCollection());\n\n  // checking the numerical properties\n  const auto errSize = checkSize(modelData, start.x.rows(), start.u.rows());\n  if (!errSize.empty()) {\n    throw std::runtime_error(\"[[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errSize);\n  }\n  const std::string errProperties =\n      checkDynamicsProperties(modelData) + checkCostProperties(modelData) + checkConstraintProperties(modelData);\n  if (!errProperties.empty()) {\n    throw std::runtime_error(\"[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errProperties);\n  }\n\n  LinearQuadraticStage lqStage;\n  const auto dt = end.t - start.t;\n\n  lqStage.cost = modelData.cost;\n  lqStage.cost *= dt;\n\n  // Linearized Dynamics after discretization: x0[k+1] + dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k])\n  lqStage.dynamics = approximateDynamics(modelData, start, dt);\n  // Adapt the offset to account for discretization and the nominal trajectory :\n  // dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k]) - x0[k+1]\n  lqStage.dynamics.f -= end.x;\n\n  lqStage.constraints = approximateConstraints(modelData, isInitialTime);\n\n  return lqStage;\n}", "__index_level_0__": 9, "concepts": ["numerical bounds checking", "QP formulation", "linearization", "discretization"], "parsing_result": [{"instruction": "Here is a logistic regression function to determine the probability of a binary outcome:\n\n$$\nP(y) = \\frac{1}{1 + e^{a_0 + a_1 \\cdot x + a_2 \\cdot x^2 + a_3 \\cdot x^3}}\n$$\n\nWrite a Python function that estimates the parameters by minimizing the average loss."}, {"instruction": "Suppose a function $f(x)$ has a domain $x \\in [-100, 100]$. To minimize the function $f(x)$, find $x$ that minimizes $f(x)$.\n\nThe function $f(x)$ can be represented by a QP optimization problem as follows:\n\n$$\n\\begin{aligned}\n\\text{minimize } & f(x) \\\\\n\\text{subject to } & -100 \\leq x \\leq 100\n\\end{aligned}\n$$\n\nThe QP problem can be linearized by employing Lagrange multipliers. The resulting linear problem can be solved using standard numerical optimization algorithms."}, {"instruction": "Develop a Python function that finds the maximum sum of contiguous sub-arrays of a given array of integers. The function should take a single argument, the array of integers, and return the maximum sum."}, {"instruction": "In this challenge, you will be given a function $f:\\mathbb{R}\\rightarrow\\mathbb{R}$, and you should find the value of $x$ that maximizes $f(x)$ subject to the constraint that $x \\in [5, 9]$.\n\nIf you're not familiar with the QP problem, you can think of it as a generalization of the well-known linear programming problem, where the objective function is quadratic.\n\nYou should use the Quadratic Programming solver from `cvxopt` to solve the QP problem, and apply the [linearization](https://en.wikipedia.org/wiki/Linearization) technique to convert the nonlinear constraint to a linear one. Note that linearization may not be possible for any given constraint. You should also [discretize](https://en.wikipedia.org/wiki/Discretization) the range of $x$ to be searched."}, {"instruction": "We are given the following QP problem:\n\n$$\n\\max_{x \\in \\mathbb{R}} c^T x \\\\\ns.t. Ax \\leq b \\\\\nx \\geq 0\n$$\n\nwhere:\n- $c = [1, 2, 3]$,\n- $A = \\begin{bmatrix}\n    1 & 1 & 1 \\\\\n    1 & 0 & 1 \\\\\n    1 & 1 & 0\n  \\end{bmatrix}$, and\n- $b = [1, 2, 3]$.\n\nCreate a Python function that solves this QP problem using gradient descent and returns the optimal solution $x^*$. You should select a learning rate $\\alpha$ and implement a maximum number of iterations `max_iter` to achieve convergence."}, {"instruction": "A quadratic program is a mathematical optimization problem that can be stated in the following form:\n\n$$\n\\begin{align}\n\\text{minimize} & \\quad c^T x + \\frac{1}{2} x^T Q x + b^T x + c_0 \\\\\n\\text{subject to} & \\quad Ax \\leq b \\\\\n\\end{align}\n$$\n\nWrite a Python function to solve the following problem:\n\n$$\n\\begin{align}\n\\text{minimize} & \\quad x_1 + x_2 + x_3 \\\\\n\\text{subject to} & \\quad 2x_1 + 2x_2 + x_3 \\leq 1 \\\\\n& \\quad x_1 + 6x_2 + 2x_3 \\geq 2 \\\\\n& \\quad x_1 + 3x_2 + 4x_3 \\geq 1 \\\\\n& \\quad 0 \\leq x_i \\leq 4\n\\end{align}\n$$"}, {"instruction": "Given a positive integer, `n`, find the number of ways to break it into a sum of non-negative integers that sum to `n`.\n\n**Examples:**\n- Input: `n = 4` --> Output: `4`\n- Input: `n = 5` --> Output: `7`\n- Input: `n = 6` --> Output: `10`\n\nAdditionally, provide a detailed explanation for the algorithm you propose."}, {"instruction": "Consider the following quadratic programming problem:\n\n$$\n\\begin{aligned}\n\\text{minimize } & -x_1 \\cdot x_2 \\\\\n\\text{subject to } & x_1 + x_2 \\leq 1 \\\\\n                    & x_1 \\leq 1 \\\\\n                    & x_2 \\leq 1 \\\\\n\\end{aligned}\n$$\n\n- Write a Python function to implement this problem using the quadratic programming formulation.\n- Discretize the domain of this problem so that the optimal solution can be found.\n- Implement a Python function to find the discrete solution to the above problem.\n- Verify the solution using a numerical solver."}, {"instruction": "Write a Python function to calculate the volume of a paraboloid with a given `height` and `width` as the bottom and top. Utilize the following equations:\n\n$$\nV = \\frac{1}{3} \\cdot (height \\cdot width)^2\n$$\n\nThe function should use the `scipy.integrate` module to evaluate the volume with `scipy.integrate.dblquad` function."}, {"instruction": "Write a Python function that takes two integers, `a` and `b`, as arguments and returns the maximum value that can be obtained by applying the following formula to both arguments:\n\n$$\na \\cdot b + \\sqrt{a + b}\n$$\n\nThe function should return -1 if the formula cannot be applied to the given arguments due to numerical overflow. The formula cannot be linearized and transformed into a simpler form without loss of information, so QP formulation is also a required solution here."}, {"instruction": "A plastic bag can contain between 0 and 30 grams of sugar. Write a Python function `max_sugar_in_bag(weight_sugar: float, weight_bag: float, sugar_density: float)` that returns the maximum sugar weight that can be packed into a plastic bag with a given sugar density and volume. The function should take in the following arguments:\n\n- `weight_sugar`: the weight of the sugar in grams\n- `weight_bag`: the volume of the bag in liters\n- `sugar_density`: the density of the sugar in grams per liter\n\nFor the purpose of this problem, assume that the volume of the bag is the same as the weight of the bag."}, {"instruction": "Write a Python function to return the smallest possible integer value that can be obtained by concatenating the digits of a positive integer `num` in any order. The function should return `0` if `num` is a negative integer.\n\nThe function should leverage the following mathematical properties:\n\n- The smallest integer value that can be obtained by concatenating the digits of a positive integer `num` in any order is the product of the smallest and largest digit in `num`.\n- If the number of digits in `num` is odd, the smallest possible integer value is derived by selecting the smallest digit from `num`.\n- If the number of digits in `num` is even, the smallest possible integer value is the product of the smallest two digits in `num`, where the product is formed by starting from the left.\n- In the case where the number of digits in `num` is 1, the smallest possible integer value is the only digit in `num`.\n\nThe function should leverage these properties to calculate the smallest possible integer value that can be obtained by concatenating the digits of `num` in any order."}, {"instruction": "Consider the following QP problem:\n\n$$\n\\begin{aligned}\n\\min_{x_1, x_2, x_3} & 2x_1^2 + 5x_2^2 - 3x_3^2 \\\\\n\\text{s.t.} & 3x_1 + x_2 + x_3 \\leq 1 \\\\\n& 2x_1 + x_2 + 2x_3 \\leq 2 \\\\\n& x_1 + 2x_2 + 5x_3 \\leq 5 \\\\\n& x_1, x_2, x_3 \\geq 0\n\\end{aligned}\n$$\n\nWrite a Python function that returns the optimal values of $x_1$, $x_2$, and $x_3$ for a given $a$, $b$, and $c$."}, {"instruction": "Solve the following quadratic programming problem: given a 2D point $p$ (that is, a point with coordinates $(x, y)$), find the minimum distance $d$ from $p$ to $c_1$ and $c_2$ (that is, the centers of two circles) that are defined by the following equations:\n\n$$\nd^2 = (p_x - c_1)^2 + (p_y - c_1)^2 - r_1^2\n$$\n\n$$\nd^2 = (p_x - c_2)^2 + (p_y - c_2)^2 - r_2^2\n$$\n\nwhere $r_1$ and $r_2$ are the radii of the corresponding circles."}, {"instruction": "There is a function `f = 10^x` that encodes the logarithm function. Given the function `f`, implement a function `approximate_logarithm` that approximates the logarithm of a given number x using the following formula:\n\n$$\n\\log x = \\sum_{n=1}^{\\infty} \\frac{1}{2n-1} \\cdot (-1)^{n-1} \\cdot \\frac{x^{2n-1}}{n}\n$$\n\nThe function should return the approximation of the logarithm of `x` to the accuracy of 1e-4. Use the `Decimal` class and the `getcontext` function to handle float precision."}, {"instruction": "Given a list of numbers `list1`, write a Python function to return the most common element in the list within the bounds of `list1` with a tolerance `tolerance` in percent (e.g., 5% tolerance, 1000% tolerance). The function should use linear interpolation to determine the most proximal value in the list of numbers within the tolerance range."}, {"instruction": "Given a function `f(x)` with analytic bounds, find the minimum of `f(x)` within the bounds. The function must be analytic and satisfy the constraints:\n\n$$\nf(x) \\geq 0 \\quad \\forall x \\in [a, b]\n$$\n\nThe function `f(x)` is analytically defined and bounded by `a` and `b`. `a` and `b` are assumed to be positive constants and `a < b` such that `a < x_min < b`.\n\nUse QP formulation to find the minimum of `f(x)` over the interval `[a, b]`. Then, linearize the QP formulation using Taylor Expansion and discretize the linearized formulation to find the minimum."}, {"instruction": "Find the maximum value of a function with a specific constraint. Let's define the function as follows:\n$$\nf(x) = (x + 1)^2 - (x - 1)^2\n$$\n\nThe constraint is that $f(x) \\leq 15$ for $x \\in [-2, 2]$."}, {"instruction": "Given an arbitrary-sized integer array `nums`, find the subarray (not necessarily contiguous) that has the maximum sum, where the subarray is defined by two indices, `left` and `right`. Return the indices of the subarray."}, {"instruction": "Given a 2D point `p` and a grid size `grid_size`, write a Python function `is_within_bounds` that determines whether the point `p` is within the boundary of a 2D grid with a certain size `grid_size` or not. The function should return `True` if the point is within the boundary, or `False` otherwise."}, {"instruction": "Create a Python function that finds the value of $e$ based on the following QP (quadratic programming) formulation:\n\n$$\nminimize \\quad \\frac{1}{2}x^2 + 2x + 3\n$$\n\nsubject to:\n\n$$\n-10 \\leq x \\leq 10\n$$\n\nConsider the bounds of this optimization problem to be finite and known. As such, you can assume that the QP problem is well-posed and has a unique optimal solution. Additionally, the problem can be solved using a standard QP solver that finds the optimal solution to the QP problem."}, {"instruction": "Write a Python function to solve a fixed-point iteration in a single-variable function that has a closed-form of the form $x = g(x)$ or $x = f(g(x))$ for a given function $f(x)$ and tolerance $e$, where $g(x)$ is a differentiable function. The function should return the root $x$ and the number of iterations required to converge to this root."}, {"instruction": "Develop a Python function that uses the QP formulation to compute the optimal time to complete a given distance with a given car speed and acceleration limits. The function should take three arguments: `distance`, `car_speed`, and `acceleration`. The function must return the optimal time to complete the given distance. The QP formulation is as follows:\n\n\\begin{align}\n    \\min_{t} \\hspace{5mm} & t^2 \\\\\n    \\text{s.t.} \\hspace{5mm} & t \\ge 0 \\\\\n    & t = \\frac{2s}{u} + \\frac{a^2}{2u^2} + \\frac{s}{u^2} \\\\\n    & 60 \\le t \\le 90 \\\\\n    & 40 \\le \\frac{2s}{u} \\le 50 \\\\\n    & \\frac{a^2}{u^2} \\le 10 \\hspace{5mm} \\text{(conservative safety margin)}\n\\end{align}\n\nThe `distance` and `car_speed` arguments are in kilometers, while the `acceleration` argument is in kilometers per second squared. The objective function is the squared time, which we seek to minimize. The constraints are as follows:\n\n- `t` must be positive.\n- The time must be between 60 and 90 seconds.\n- The time must be within 40 seconds of the distance divided by the car speed.\n- The acceleration must be less than 10 kilometers per second squared.\n\nThis QP formulation is linear, and it can be expressed as a discretized problem as follows:\n\n- Discretize the time variable using 100 steps, spaced evenly between 60 and 90 seconds.\n- Discretize the distance variable using 100 steps, spaced evenly between 0 and the given `distance` argument in kilometers.\n- For each possible discrete time and distance combination, evaluate the objective function to obtain the objective function value.\n- Take the discrete values of the objective function and pick the minimum value as the optimal time."}, {"instruction": "Write a Python function that takes a floating-point number, `x`, and returns the value of $x^p$ as defined by the following conditions:\n\n- $x > 0$, $p > 0$: $f(x, p) = x^p$\n- $x < 0$, $p > 0$: $f(x, p) = -x^p$\n- $x < 0$, $p < 0$: $f(x, p) = (-x)^p$"}, {"instruction": "A quadratic programming problem (QP) is defined as follows:\n\n$$\n\\min_{x \\in \\mathbb{R}^n} \\quad c^T x + \\frac{1}{2} x^T Q x\n$$\n\nsubject to\n\n$$\nAx \\leq b,\n$$\n\nwhere $x \\in \\mathbb{R}^n$, $c \\in \\mathbb{R}^n$, and $Q \\in \\mathbb{R}^{n \\times n}$. The problem can be solved by finding the global minimum of the objective function $f(x) = c^T x + \\frac{1}{2} x^T Q x$ subject to the constraint set $Ax \\leq b$.\n\nIt is often the case that the constraint set is not convex, which means that a global minimum may not exist. In such cases, it is common to linearize the problem by discretizing the continuous variables into smaller intervals, which enables a large class of convex optimization problems to be solved.\n\nIn this exercise, you will be given a QP problem and a discretization method for solving it. You are required to implement the discretization method, which should be a function that takes $n$ as input and returns a list of $n$ intervals, each of which is a tuple of the form `(lower_bound, upper_bound)`. The function should choose the lower and upper bounds based on the following constraints:\n\n- The first interval should be `(0, 0)`, which represents the minimum of the objective function $f(x) = c^T x + \\frac{1}{2} x^T Q x$ when $x$ is a zero vector.\n- The last interval should be `(c, \\infty)`, which represents the maximum of the objective function $f(x) = c^T x + \\frac{1}{2} x^T Q x$ when $x$ is a vector with all elements equal to $c$.\n- For all other intervals, the lower and upper bounds should be derived from the QP problem by solving a quadratic programming problem of the following form:\n\n$$\n\\min_{x \\in \\mathbb{R}^n} \\quad c^T x + \\frac{1}{2} x^T Q x\n$$\n\nsubject to\n\n$$\nAx \\leq b,\n$$\n\nand then linearizing the problem with a Taylor series expansion.\n\nYour function should define the continuous variables $x$ as a list of $n$ 5-bit chunks, which should be defined as `x = [x_1, x_2, ..., x_n]`. The 5-bit chunks should be encoded in the following manner:\n\n- First, the 5-bit chunks should be encoded into a 5-bit integer `x_int` using the following formula:\n\n$$\nx_int = \\sum_{i=1}^{n} x_{i-1} \\cdot 31^{i-1}\n$$\n\nwhere `x_{i-1}` is the $i^{\\text{th}}$ 5-bit chunk of `x`.\n\n- Next, the 5-bit encoded integer `x_int` should be split into $n$ 5-bit chunks `x_1`, `x_2`, ..., `x_n` using the following formula:\n\n$$\nx_{i} = \\left\\lfloor\\frac{x_int}{31^i}\\right\\rfloor \\quad \\text{mod} \\quad 31\n$$\n\nwhere $x_{i}$ is the $i^{\\text{th}}$ 5-bit chunk of `x`.\n\nFinally, the lower and upper bounds for the $i^{\\text{th}}$ interval should be calculated using the following formula:\n\n$$\nx_i = \\left( \\frac{1}{31} \\right)^i \\cdot \\left( \\frac{c}{2} \\right)^{i-1} \\quad \\text{mod} \\quad 31\n$$\n\nwhere $x_i$ is the $i^{\\text{th}}$ interval's lower bound.\n\nThe upper bound for the $i^{\\text{th}}$ interval should be calculated similarly, except with the `c` in the exponent replaced by `b`.\n\nThe function should return a list of intervals, each of which is a tuple of the form `(lower_bound, upper_bound)`."}, {"instruction": "Write a Python function `find_critical_points` that takes a continuous function `f` as input. Using the second order Taylor approximation, calculate the critical points of the function by sampling multiple points on a grid and checking if the approximation is close enough to $f(x)$. For the sake of simplicity, assume that the function is monotonic and the input function is bounded."}, {"instruction": "Write a Python function to determine whether a 2-D point lies inside a polygon. The polygon is a closed curve defined by an array of its vertices.\n\nThe function should accept 2 arguments: `point`, a tuple of 2 coordinates, and `polygon`, an array of tuples representing the vertices of the polygon. The function should return a boolean indicating whether the point is inside the polygon or not.\n\nThe polygon is represented as an array of N vertex tuples, where the first vertex is connected to the last vertex. For example, `[(-1, 3), (2, 4), (-2, -2)]` represents a polygon with 3 vertices."}, {"instruction": "A square is defined by two vertical and two horizontal lines. Two squares are said to overlap if they have at least one point in common. Write a Python function `square_overlap` that takes two squares as arguments and returns `True` if the two squares overlap and `False` otherwise. Assume that the squares are represented as a pair of tuples, each tuple containing the coordinates of the two vertical and two horizontal lines (x0, y0, x1, y1 and x2, y2, x3, y3)."}, {"instruction": "Write a Python function to calculate the value of $e^x$ using the Taylor series expansion:\n\n$$\ne^x = 1 + \\frac{x}{1!} + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\ldots\n$$\n\nThe input parameter `x` is a floating-point number representing the power of $e$. Exponential functions are often used in many real-world scenarios, such as calculating the value of the natural logarithm or trigonometric functions. The Taylor series expansion provides a concise way to compute the value of $e^x$ efficiently."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: embedded script functionality, typemap\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Model_updateLightingmap(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Model *arg1 = (cc::scene::Model *) NULL ;\n    cc::Texture2D *arg2 = (cc::Texture2D *) NULL ;\n    cc::Vec4 *arg3 = 0 ;\n    cc::Vec4 temp3 ;\n    \n    if(argc != 2) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 2);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Model>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,2,SWIGTYPE_p_cc__Texture2D\"); \n    // %typemap(in) SWIGTYPE&\n    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,3,SWIGTYPE_p_cc__Vec4\");\n    arg3 = &temp3;\n    \n    (arg1)->updateLightingmap(arg2,(cc::Vec4 const &)*arg3);\n    \n    \n    return true;\n}", "docstring": "// %typemap(in) SWIGTYPE*", "function_name": "js_cc_scene_Model_updateWorldBoundsForJSBakedSkinningModel"}, "id": 38, "seed": "static bool js_cc_scene_Model_updateLightingmap(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Model *arg1 = (cc::scene::Model *) NULL ;\n    cc::Texture2D *arg2 = (cc::Texture2D *) NULL ;\n    cc::Vec4 *arg3 = 0 ;\n    cc::Vec4 temp3 ;\n    \n    if(argc != 2) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 2);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Model>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,2,SWIGTYPE_p_cc__Texture2D\"); \n    // %typemap(in) SWIGTYPE&\n    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,3,SWIGTYPE_p_cc__Vec4\");\n    arg3 = &temp3;\n    \n    (arg1)->updateLightingmap(arg2,(cc::Vec4 const &)*arg3);\n    \n    \n    return true;\n}", "__index_level_0__": 10, "concepts": ["embedded script functionality", "typemap"], "parsing_result": [{"instruction": "Create a Python class with a method `evaluate()` that takes in a mathematical expression as a string and returns the value of the expression.\n\nThe expression is composed of numbers, operators, and parentheses. The numbers and operators are separated by exactly one space. The expression may contain any number of parentheses.\n\nThe operation priorities are as follows:\n\n- `+`\n- `-`\n- `*`\n- `/`\n- `**`\n\nFor example:\n\n- `2 + 6 * 4 = 2 + 6 * 4 = 2 + 24 = 26`\n- `100 - 40 + 4 * (2 + 5) * 20 = 100 - 40 + 4 * (2 + 5) * 20 = 100 - 40 + 4 * (7) * 20 = 100 - 40 + 280 = 240`"}, {"instruction": "Create a Python program that executes an embedded script written in the Python programming language, using the Python typemap for embedded script functionality. This program should read an input file containing the script and execute it. Ensure error handling to manage invalid inputs (e.g., nonexistent file, nonPython file, etc.) and include clear logging for successful execution."}, {"instruction": "Implement a Python class that represents a point in a two-dimensional space. Each point is defined by two coordinates, `x` and `y`. The class should also contain a method `get_distance` that calculates the distance of a point from the origin. The class should also contain a method `move` that accepts a new set of coordinates and updates the point's coordinates accordingly."}, {"instruction": "Implement a Python class that provides functionality for performing mathematical operations on a list of numbers. The class should enable basic operations such as addition, subtraction, multiplication, division, and exponentiation. Additionally, the class must support additional operations such as finding the minimum or maximum value, calculating the sum of the elements, or determining whether the list contains a specific element."}, {"instruction": "Implement a Python class with a method `execute_script(filename)` that executes a script from a file with valid Python code. This method should handle errors and exceptions caused by badly formatted Python code, e.g., missing opening or closing parentheses, invalid variable names, or invalid usages of operators. Utilize Python's built-in `compile` and `exec` functions to execute the script from the file."}, {"instruction": "Write a Python class with a method `get_max_overlap(seq1, seq2)`, where `seq1` and `seq2` are two overlapping sequences of numerical values. Use an embedded scripting language to validate that these sequences are of the same type, and compute the maximum overlap of the sequences. The method should return the maximum overlap and the sequences that intersect at that maximum."}, {"instruction": "Implement a Python class that utilizes the `py4j` library to create a connection between a Python program and a Java program. The Java program should run an embedded script to perform a computation on a list of numbers. Once the computation finishes, the Python program should be able to retrieve the output from the Java program and return the result as a Python list."}, {"instruction": "Create a Python class that includes an embedded scripting language that can be used to execute instructions in the syntax of a simple scripting language. The scripting language will support variable assignment, arithmetic operations, and conditional branching. Include support for user-defined function calls as well as built-in methods and functions. Utilize Python's `typemap` functionality to map the embedded language to Python."}, {"instruction": "Develop a Python class with a method `find_all_occurrences(s, pattern)` that returns the indices of all occurrences of a given pattern (a string) within a given string `s`. The method should handle missing/invalid inputs, as well as searching within a large text file."}, {"instruction": "Develop a Python class that stores a dictionary of data in a format specified by a file. The class should be able to interpret the data from the file and store it in a manner that is optimized for read operations. Additionally, the class should be able to execute embedded script statements within the data files and update the stored data accordingly. Provide error handling and logging to manage exceptions that might occur during processing."}, {"instruction": "Implement a Python class that accepts a valid Python script as input and executes it. The script should be able to access the global and local variables defined in the class. The class should accept a custom typemap that replaces certain built-in Python types, such as `int` or `list`."}, {"instruction": "Create a Python class representing a block of text with the following properties, which allow it to be used in various contexts:\n\n- read and write access to the string representation\n- conversion to HTML: `<p>text</p>`\n- conversion to markdown: `**text**`\n- conversion to JSON: `{\"text\":\"text\"}`\n- conversion to YAML: `text: text`\n- conversion to plain text: `text`\n\nFor example,\n\n```\nBlock(\"Hello world!\")\n\"Hello world!\"\n\"<p>Hello world!</p>\"\n\"**Hello world!**\"\n\"text: Hello world!\"\n{\"text\": \"Hello world!\"}\n---\nHello world!\n---\n```"}, {"instruction": "Implement a Python class to represent a shape. A shape has an area method and a typemap. The typemap specifies the name of a script that should be used to calculate the area of the shape. For example, a typemap could specify `AreaScript` in the `typemap` dictionary to indicate that the `AreaScript` class should be used to calculate the area."}, {"instruction": "Implement a Python class with a method `parse_csv(filename)` that takes a filename as input and returns a list of lists representing the CSV formatted contents. This method should handle all parsing errors and ensure the returned list is consistent across all columns."}, {"instruction": "Implement a Python class with a method `execute_embedded_script(script_text)` that evaluates a mathematical expression from a text string using an embedded Python interpreter. The expression syntax should be valid Python code, with operators `+`, `-`, `*`, `/`, and parentheses as necessary. This method should return the result of the evaluation. Ensure this method handles invalid input correctly, such as missing operators or parentheses. You may use any built-in Python functions or methods, but not third-party libraries."}, {"instruction": "Develop a Python class that supports embedding and running of Python code within the class. The class should have a method `evaluate(code)` that takes a string `code` as an input and evaluates it as Python code. A typical use case would be to embed this class within a larger Python script and allow users to run snippets of code from within the larger script."}, {"instruction": "Write a Python class that is a wrapper around an embedded script written in JavaScript that can be executed. The class should expose a method `run(script)` that executes the script, with the option to pass in a `params` dictionary of arguments to be passed into the script."}, {"instruction": "Implement a Python class that encapsulates a series of key-value pairs. The class should provide a method `get_values()` that returns a list of all value objects that match a specified key, and a method `get_keys()` that returns a list of all key objects that match a specified value."}, {"instruction": "Implement a Python class that contains a custom object type that can be used in a code editor. This new object type should be able to represent mathematical expressions and be used as a template to dynamically generate LaTeX code for a given expression. Support at least two math operators (`+`, `-`, `*`, `/`) and a single function (log) on floating-point numbers."}, {"instruction": "Implement a Python class that represents a generic data type with a specified type and an ID. The class should provide functionality to embed a script file containing a Python function or class definition that accepts arguments and returns a value. The class should also allow for the embedding of multiple scripts into a single instance."}, {"instruction": "Create a Python class that implements an interpreter for a simple scripting language with the following features:\n\n- An interpreter that executes the commands found in a script.\n- A stack (list) of variables that can be set and accessed from within the script.\n- `print` statements that print values to the console.\n- The following commands that manipulate the stack:\n  - `push`, `pop`, `dup`, `swap`, `add`, `sub`, `mul`, `div`, and `mod`\n- Variables that are set in the script are accessible in subsequent commands.\n- All commands and variables are read from an input file containing one command per line.\n- Error handling to manage exceptions and invalid commands.\n- Clean and modular code structure that is easy to read and maintain."}, {"instruction": "Create a Python class with a method `evaluate(expr)` that takes in an expression string and evaluates it using the built-in Python `eval` function. Ensure that the method correctly handles cases where the expression is syntactically invalid or if the expression contains an undefined variable. The method should return the result of the evaluation, or `None` if the evaluation cannot be completed."}, {"instruction": "Design a Python class to support an embedded scripting language. The class should have a method `eval(script)` that evaluates the given script and returns the result. The class should handle exceptions that might occur during the evaluation of the script."}, {"instruction": "Implement a Python class with a method `play` that takes a string representing a video file path and plays the video file in the browser. A video file can be a video file or an embedded HTML5 video element. The method should take advantage of the HTML5 video element's built-in functionality to play the video."}, {"instruction": "Develop a Python class that accepts a Python script as a string, parses the given script into an abstract syntax tree (AST), and provides methods to evaluate the values of expressions within the script. Implement the Python AST nodes yourself, and consider using the `ast` module to parse the script into an AST."}, {"instruction": "Implement a Python class that executes embedded Python scripts as methods. The class should contain a method `execute(script_path)` that takes a path to a Python script and executes it as a Python function. It should also contain a method `embed(function_name, args)` that executes an embedded Python script (`function_name(args)`) as a Python function. The class should accept a function name, its arguments, and a path to an embedded script as constructor parameters.\n\nThe class should handle invalid function names, paths to non-existent script files, and invalid arguments in the embedded script. Include logging and error handling to manage exceptions and provide detailed error messages."}, {"instruction": "Implement a Python class that supports an embedded scripting language. The scripting language should be able to execute other Python functions and classes and return their output. The class should have a method `run_script(script)` that runs the given string as a script and returns the output of the script. The embedded script should accept single-line and multi-line commands."}, {"instruction": "Implement a Python class `Spiderman` with two methods `crawl()` and `scrape()` that are used to search for and retrieve new URLs from an input URL. Use the `crawlib` API and BeautifulSoup to scrape the content of each new URL.\n\nDefine a `SpidermanScripter` class that wraps a `Spiderman` instance and provides an interface to execute functions on the `Spiderman` instance. This class should allow the user to execute `crawl()` and `scrape()` functions with parameters that are passed as arguments to the class methods."}, {"instruction": "Implement a Python class with a method `launch_embedded_script(script_name)` that executes an embedded Python script with the given name. This method should handle file existence and file read operations, as well as providing appropriate error handling and logging."}, {"instruction": "Design a Python class that encapsulates a JSON file with unique identifiers associated with each object. The class should allow for the addition, removal, and modification of objects in the file and the efficient storage of these objects in a dictionary (i.e., key-value pairs). Separate the attributes of the objects from the class (e.g., `name`, `age`) and the unique identifiers (e.g., `id` and `last_name`). The class should also provide functionality for accessing and updating the attributes associated with an object."}, {"instruction": "Design a Python class that represents the `Math` programming language. The class should allow embedding arbitrarily complex Python code into `Math` expressions. The class should support basic arithmetic operations including `+`, `-`, `*`, `/`, `^`, and built-in functions `abs`, `sin`, `cos`, `tan`. Build in the following functionality to support the Math language:\n\n- allow any valid Python code to be embedded in any expression as long as it does not use any built-in functions\n- support the creation of nested expressions within expressions\n- allow type conversions to be specified using a typemap"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: plane-aabb intersection, plane-aabb intersection tests, modular arithmetic, bounding box construction, AABB collision detection\n\n### Task", "fingerprint": null, "content": {"code": "GTEST_TEST(AabbTest, PlaneOverlap) {\n  // The aabb is *not* defined at the origin of the hierarchy frame.\n  const Vector3d p_HoBo_H = Vector3d{0.5, 0.25, -0.75};\n  const Vector3d half_width{1, 2, 3};\n  Aabb aabb_H{p_HoBo_H, half_width};\n\n  // Use brute force to find the position of the \"lowest\" corner of the box\n  // measured from Ho and expressed in frame P. \"Lowest\" means the corner with\n  // the smallest z-component. Note: the \"z-component\" trick only works because\n  // we expect the plane to be Pz = 0.\n  auto lowest_corner = [&half_width, &p_HoBo_H](const RotationMatrixd& R_PH) {\n    Vector3d p_HoCmin_P =\n        Vector3d::Constant(std::numeric_limits<double>::infinity());\n    for (const double x_sign : {-1.0, 1.0}) {\n      for (const double y_sign : {-1.0, 1.0}) {\n        for (const double z_sign : {-1.0, 1.0}) {\n          const Vector3d signs{x_sign, y_sign, z_sign};\n          const Vector3d p_BoC_H = half_width.cwiseProduct(signs);\n          const Vector3d p_HoC_P = R_PH * (p_HoBo_H + p_BoC_H);\n          if (p_HoC_P(2) < p_HoCmin_P(2)) {\n            p_HoCmin_P = p_HoC_P;\n          }\n        }\n      }\n    }\n    return p_HoCmin_P;\n  };\n\n  // Test epsilon is the product of three factors:\n  //  - machine epsilon\n  //  - Two orders of magnitude attributed to the various transformations.\n  //  - A scale factor that is the maximum of (box size, p_HoBo, p_PoHo)\n  const double kEps = 300 * std::numeric_limits<double>::epsilon();\n  // An arbitrary collection of orientations for the box's hierarchy frame H\n  // in the plane frame P.\n  std::vector<AngleAxisd> R_PHs{\n      AngleAxisd{0, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitZ()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 7, Vector3d{1, 2, 3}.normalized()},\n      AngleAxisd{7 * M_PI / 6, Vector3d{-1, 2, -3}.normalized()},\n      AngleAxisd{12 * M_PI / 7, Vector3d{1, -2, 3}.normalized()}\n  };\n  // An arbitrary collection of poses of the plane in the query frame Q.\n  std::vector<RigidTransformd> X_QPs{\n      RigidTransformd{},  // Identity matrix.\n      RigidTransformd{\n          RotationMatrixd{AngleAxisd{M_PI / 4, Vector3d{1, 2, 3}.normalized()}},\n          Vector3d{1, 2, 3}},\n      RigidTransformd{RotationMatrixd{AngleAxisd{\n                          12 * M_PI / 7, Vector3d{-1, -1, 3}.normalized()}},\n                      Vector3d{-3, -1, 2}}\n  };\n  for (const auto& angle_axis_PH : R_PHs) {\n    const RotationMatrixd R_PH{angle_axis_PH};\n    const Vector3d p_HoCmin_P = lowest_corner(R_PH);\n    for (const auto& X_QP : X_QPs) {\n      // Define the plane in the query frame Q.\n      const Vector3d& Pz_Q = X_QP.rotation().col(2);\n      Plane<double> plane_Q{Pz_Q, X_QP.translation()};\n\n      // We position Ho such that Cmin lies on the z = 0 plane in Frame P. Given\n      // we know p_HoCmin_P, we know its current z-value. To put it at zero, we\n      // must displace it in the negative of that z value. The x- and y-values\n      // don't matter, so we pick values we know not to be zero.\n      {\n        // Place the minimum corner just \"above\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Place the minimum corner just \"below\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n\n      // We repeat the same task but with Cmax. Cmax is the reflection of Cmin\n      // over Bo (the origin of the box). We'll express all vectors in the P\n      // frame so we can place that corner just above and below the Pz = 0\n      // plane using the same trick as documented above.\n      const Vector3d p_HoBo_P = R_PH * p_HoBo_H;\n      const Vector3d p_HoCmax_P = p_HoCmin_P + 2 * (p_HoBo_P - p_HoCmin_P);\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it up epsilon to\n        // guarantee intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it down epsilon to\n        // guarantee _no_ intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n    }\n  }\n}", "docstring": "// (if expect_overlap is false) or inside (if true).", "function_name": "GTEST_TEST"}, "id": 40, "seed": "GTEST_TEST(AabbTest, PlaneOverlap) {\n  // The aabb is *not* defined at the origin of the hierarchy frame.\n  const Vector3d p_HoBo_H = Vector3d{0.5, 0.25, -0.75};\n  const Vector3d half_width{1, 2, 3};\n  Aabb aabb_H{p_HoBo_H, half_width};\n\n  // Use brute force to find the position of the \"lowest\" corner of the box\n  // measured from Ho and expressed in frame P. \"Lowest\" means the corner with\n  // the smallest z-component. Note: the \"z-component\" trick only works because\n  // we expect the plane to be Pz = 0.\n  auto lowest_corner = [&half_width, &p_HoBo_H](const RotationMatrixd& R_PH) {\n    Vector3d p_HoCmin_P =\n        Vector3d::Constant(std::numeric_limits<double>::infinity());\n    for (const double x_sign : {-1.0, 1.0}) {\n      for (const double y_sign : {-1.0, 1.0}) {\n        for (const double z_sign : {-1.0, 1.0}) {\n          const Vector3d signs{x_sign, y_sign, z_sign};\n          const Vector3d p_BoC_H = half_width.cwiseProduct(signs);\n          const Vector3d p_HoC_P = R_PH * (p_HoBo_H + p_BoC_H);\n          if (p_HoC_P(2) < p_HoCmin_P(2)) {\n            p_HoCmin_P = p_HoC_P;\n          }\n        }\n      }\n    }\n    return p_HoCmin_P;\n  };\n\n  // Test epsilon is the product of three factors:\n  //  - machine epsilon\n  //  - Two orders of magnitude attributed to the various transformations.\n  //  - A scale factor that is the maximum of (box size, p_HoBo, p_PoHo)\n  const double kEps = 300 * std::numeric_limits<double>::epsilon();\n  // An arbitrary collection of orientations for the box's hierarchy frame H\n  // in the plane frame P.\n  std::vector<AngleAxisd> R_PHs{\n      AngleAxisd{0, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitZ()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 7, Vector3d{1, 2, 3}.normalized()},\n      AngleAxisd{7 * M_PI / 6, Vector3d{-1, 2, -3}.normalized()},\n      AngleAxisd{12 * M_PI / 7, Vector3d{1, -2, 3}.normalized()}\n  };\n  // An arbitrary collection of poses of the plane in the query frame Q.\n  std::vector<RigidTransformd> X_QPs{\n      RigidTransformd{},  // Identity matrix.\n      RigidTransformd{\n          RotationMatrixd{AngleAxisd{M_PI / 4, Vector3d{1, 2, 3}.normalized()}},\n          Vector3d{1, 2, 3}},\n      RigidTransformd{RotationMatrixd{AngleAxisd{\n                          12 * M_PI / 7, Vector3d{-1, -1, 3}.normalized()}},\n                      Vector3d{-3, -1, 2}}\n  };\n  for (const auto& angle_axis_PH : R_PHs) {\n    const RotationMatrixd R_PH{angle_axis_PH};\n    const Vector3d p_HoCmin_P = lowest_corner(R_PH);\n    for (const auto& X_QP : X_QPs) {\n      // Define the plane in the query frame Q.\n      const Vector3d& Pz_Q = X_QP.rotation().col(2);\n      Plane<double> plane_Q{Pz_Q, X_QP.translation()};\n\n      // We position Ho such that Cmin lies on the z = 0 plane in Frame P. Given\n      // we know p_HoCmin_P, we know its current z-value. To put it at zero, we\n      // must displace it in the negative of that z value. The x- and y-values\n      // don't matter, so we pick values we know not to be zero.\n      {\n        // Place the minimum corner just \"above\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Place the minimum corner just \"below\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n\n      // We repeat the same task but with Cmax. Cmax is the reflection of Cmin\n      // over Bo (the origin of the box). We'll express all vectors in the P\n      // frame so we can place that corner just above and below the Pz = 0\n      // plane using the same trick as documented above.\n      const Vector3d p_HoBo_P = R_PH * p_HoBo_H;\n      const Vector3d p_HoCmax_P = p_HoCmin_P + 2 * (p_HoBo_P - p_HoCmin_P);\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it up epsilon to\n        // guarantee intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it down epsilon to\n        // guarantee _no_ intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n    }\n  }\n}", "__index_level_0__": 11, "concepts": ["plane-aabb intersection", "plane-aabb intersection tests", "modular arithmetic", "bounding box construction", "AABB collision detection"], "parsing_result": [{"instruction": "Write a Python function that takes a set of minimum bounding boxes and returns a set of intersecting boxes. Test this function for 100000 random bounding boxes to ensure its correctness."}, {"instruction": "Write a Python function named `aabb_collision` that takes two arguments, `a_min` and `a_max`, representing a bounding-box (AABB) of a first object, and `b_min` and `b_max`, representing a bounding-box of a second object, and returns a boolean value indicating if these two objects collide. The function should consider two objects as colliding when at least one axis of their AABBs intersect."}, {"instruction": "Write a Python function that calculates the time to collision between two bounding boxes in the 2D plane. Each bounding box is a 4-tuple that represents the plane containing the box: `[xmin, xmax, ymin, ymax]`."}, {"instruction": "Implement a Python function that takes a ray and an axis-aligned bounding box (AABB) defined by the 6-dimensional Cartesian coordinates `(x1, y1, z1, x2, y2, z2)` and checks if the ray intersects with the AABB. The ray is defined by the origin `(x0, y0, z0)` and the direction `(dx, dy, dz)`."}, {"instruction": "Write a Python function `aabb_collision_detection` that takes two bounding boxes `aabb1` and `aabb2` (each composed of a center point and a size) as parameters. Check if `aabb1` and `aabb2` intersect and report if they do."}, {"instruction": "Create a Python function that takes four points, `p0`, `p1`, `p2`, and `p3`, and returns true if these four points are in a counter-clockwise direction, which represents a convex polygon. The function should utilize modular arithmetic and validate the points for convexity based on the equation:\n\n$$\n\\begin{bmatrix}\nx_0 & y_0 & 1 \\\\\nx_1 & y_1 & 1 \\\\\nx_2 & y_2 & 1 \\\\\nx_3 & y_3 & 1\n\\end{bmatrix} \\times\n\\begin{bmatrix}\nA \\\\\nB \\\\\nC\n\\end{bmatrix} = 0\n$$\n\nwhere $A + B + C = 0$."}, {"instruction": "- Implement a Python function `plane_aabb_intersection` that takes a `Plane` object as input and returns a `Point` object representing the intersection point of the given `Plane` and the AABB.\n- Implement a Python function `plane_aabb_is_intersecting` that takes a `Plane` object as input and returns a boolean value that indicates whether the `Plane` intersects the AABB."}, {"instruction": "Design a Python function that computes the intersection between two axis-aligned bounding boxes (AABBs) defined by their vertex points. The function should return `True` if the AABBs intersect, and `False` otherwise.\n\nFor example, given the AABBs `(min_x, max_x, min_y, max_y) = (0, 10, 0, 10)` and `(min_x, max_x, min_y, max_y) = (5, 15, 5, 15)`, the function should return `True`."}, {"instruction": "Write a Python function `aabb_intersects_aabb` that takes two 3D axis-aligned bounding boxes defined by 6 floating-point numbers as parameters and returns `True` if they intersect, `False` otherwise. Name the 6 parameters `xmin`, `ymin`, `zmin`, `xmax`, `ymax`, and `zmax` respectively for each axis."}, {"instruction": "Write a Python function `aabb_intersects` that takes two AABBs and returns `True` if the two AABBs intersect and `False` otherwise. Ensure that the function implements efficient detection of plane-plane intersection tests and AABB-AABB intersection tests."}, {"instruction": "Write a Python function to check if a given plane intersects with a given axis-aligned bounding box (AABB). The function should return `True` if the plane intersects with the AABB and `False` if it does not."}, {"instruction": "Write a Python function `aabb_collision_detection(box1, box2)` that takes two axis-aligned bounding boxes (`box1`, `box2`) as arguments and returns `True` if `box1` and `box2` collide. Define the `Plane` class by implementing three-component planes and the `AABB` class with a constructor for building a bounding box from its three corner points. Use modular arithmetic to compute the signs of the three components of a vector."}, {"instruction": "Write a Python function that takes a point, a bounding box, and a plane as arguments and checks if the point lies inside or outside the bounding box. Your function should utilize the following components within the bounding box:\n\n1. Minimum and maximum x, y, and z coordinates\n2. Aabb collision detection (utilize the AABB collision detection algorithm)"}, {"instruction": "Develop a Python function `is_intersecting` that takes three arguments: `aabb1`, a bounding box object describing the first AABB, `aabb2`, a bounding box object describing the second AABB, and `tolerance`, a positive number representing the allowed tolerance for intersection detection. The function should return a boolean value based on whether the two AABBs are intersecting."}, {"instruction": "Design a Python function that takes a bounding box represented as a 2D array of four numbers `[l, r, b, t]` and a plane in 3D represented as normal vectors `(n_x, n_y, n_z, d)` to check whether the plane and the bounding box intersect. Extend the function to take an arbitrary number of planes to check if the bounding box and all planes intersect."}, {"instruction": "Create a Python function that takes a 3-dimensional bounding box (`Box3D`) and a 4-dimensional plane (`Plane`) as inputs and returns `True` if the bounding box intersects with the given plane and `False` otherwise. Consider the case when the bounding box is partially obscured by the plane and the plane is partially obscured by the bounding box. Enable error handling for invalid inputs."}, {"instruction": "Design a Python function that takes a plane of 3D space and an axis-aligned bounding box (AABB) and determines if the plane intersects the AABB."}, {"instruction": "Design a Python function that takes two 2D axis-aligned bounding boxes (AABB) and checks whether they intersect each other. Include error handling to handle cases such as invalid input or if one of the bounding boxes does not intersect the other."}, {"instruction": "Create a Python function that takes a bounding box (AABB) and two planes and returns the intersection of the two planes if they intersect. You can assume the planes are normalized, i.e., the plane equation has the form `a x + b y + c z + d = 0`. If the function encounters an intersection, it should return a new bounding box that encompasses the intersection. Otherwise, it should return `None`."}, {"instruction": "Implement a Python function `plane_aabb_intersection(p1, n1, p2, n2)` that returns `True` if the given two planes `p1` and `n1` and `p2` and `n2` intersect, and `False` otherwise. Define a `Plane` class for the given equation."}, {"instruction": "Write a Python function `aabb_intersection` that takes two 3D axis-aligned bounding boxes as input and returns True if they intersect, otherwise False.\n\nUse the following plane-AABB intersection test from [Wikipedia](https://en.wikipedia.org/wiki/Hyperplane-affine_hull_test) as a reference:\n\n> For a plane $p = ax + by + cz + d = 0$ and a set of points $\\{x_i, y_i, z_i\\}$ in three-dimensional space, the plane intersects the points if and only if $d \\geq \\min_{i \\in \\{1, ..., N\\}} \\left[ax_i + by_i + cz_i\\right]$."}, {"instruction": "Design a Python function that takes a plane (its normal vector and a point on the plane) and an axis-aligned bounding box (AABB) and checks if the two entities intersect. Ensure the function is efficient and can handle degenerate cases (e.g., the point and the plane are identical) without throwing errors."}, {"instruction": "Implement a Python function `aabb_collides` that takes two axis-aligned bounding boxes (`AABB`) and checks for intersection. The input parameters are `aabb_a` (top-left, bottom-right) and `aabb_b` (top-left, bottom-right). Ensure the function is robust against invalid inputs of negative dimensions."}, {"instruction": "Write a Python function `aabb_intersect` that takes four arguments: `box_a`, a 3-element list for the minimum and maximum coordinates of the first box; `box_b`, a 3-element list for the minimum and maximum coordinates of the second box; `plane_normal`, a 3-element list for the normal vector of the plane; and `plane_point`, a 3-element list for a point on the plane. The function should return `True` if the two boxes intersect, `False` otherwise. Utilize modular arithmetic to simplify the function's implementation, and leverage the properties of AABB collision detection."}, {"instruction": "Write a Python function to check if two axis-aligned bounding boxes (`AABB`) from the point of view of a given plane intersect. The function should handle corner-to-corner, edge-to-edge, edge-to-corner, and corner-to-edge cases."}, {"instruction": "Design a Python function that determines whether a 3D plane intersects a 3D axis-aligned bounding box (AABB) or not. The function should also handle cases where the plane is coplanar with the AABB."}, {"instruction": "Write a Python function that takes a plane and an axis-aligned bounding box object and determines if the two objects intersect. Return whether the plane intersects the axis-aligned bounding box and the orientation of the intersection.\n\nThe AABB object takes two points to create its initial bounding box. It has a method to update the bounding box whenever a new point gets inserted.\n\nThe plane takes a normal vector representing the direction of the plane and a plane point representing the position of the plane. You can define the plane using three points to represent a plane equation `Ax + By + Cz + D = 0`."}, {"instruction": "Write a Python function that takes the following parameters: two 3-D planes and a 3-D bounding box specified as a center point and a bounding box size (width, height, depth). The function should return whether the specified bounding box collides with the specified planes."}, {"instruction": "Implement a Python function that takes two axis-aligned bounding-boxes (AABB) and reports whether they are intersecting, i.e., their bounding-boxes overlap.\n\nFor example, given the following AABBs:\n\n```\nbox1 = (1, 10, 10, 0, 10, 20)\nbox2 = (2, 12, 12, 0, 12, 22)\n```\n\nThe function should return `True` because their bounding-boxes overlap when they touch or touch their sides."}, {"instruction": "Write a Python function that determines whether two oriented axis-aligned bounding boxes (AABBs) intersect or not. Assume that the `AABBs` are represented as a combination of a 3-element vector as the center coordinate and a 3-element vector as the length of each axis (width, height, and depth). The function should return `True` if there is at least one intersection between the two boxes with each other and `False` otherwise."}, {"instruction": "Write a Python function that takes two pairs of three-dimensional coordinates that represent a bounding box (AABB) and returns true if one AABB intersects another.\n\nFor example, given AABBs (0, 0, 0)--(1, 1, 1) and (2, 2, 2)--(3, 3, 3), the function should return true because the first AABB is within the second. On the other hand, given AABBs (0, 0, 0)--(3, 3, 3) and (4, 4, 4)--(5, 5, 5), the function should return false because the second AABB is not within the first."}, {"instruction": "Implement a Python function that takes a plane and an axis-aligned bounding box as arguments. The function should return `True` if the plane intersects the bounding box, or `False` otherwise."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: string manipulation, string concatenation, substring extraction, character encoding\n\n### Task", "fingerprint": null, "content": {"code": "string cc_smart_shorten(string& s, int limiter){\n    //s = s.substr(0, limiter * 2);\n    int nl_pos = s.find_first_of(\"<\");\n    s = s.substr(0, nl_pos);\n    if(s.size() <= limiter) return s;\n\n    string ret = s.substr(0, limiter);\n    if(nl_pos <= limiter) return ret;\n\n    for(int i = limiter; i < s.size(); ++i){\n        if(i < s.size() - 3){\n            if(s[i] == -17 && s[i+1] == -68 && s[i+2] == -116) break;\n            if(s[i] == -29 && s[i+1] == -128 && s[i+2] == -126) break;\n            if(s[i] == ',' || s[i] == '.') break;\n        }\n        ret += s[i];\n    }\n\n    return ret;\n}", "docstring": "/* Exit immediately */", "function_name": "database_fatal"}, "id": 41, "seed": "string cc_smart_shorten(string& s, int limiter){\n    //s = s.substr(0, limiter * 2);\n    int nl_pos = s.find_first_of(\"<\");\n    s = s.substr(0, nl_pos);\n    if(s.size() <= limiter) return s;\n\n    string ret = s.substr(0, limiter);\n    if(nl_pos <= limiter) return ret;\n\n    for(int i = limiter; i < s.size(); ++i){\n        if(i < s.size() - 3){\n            if(s[i] == -17 && s[i+1] == -68 && s[i+2] == -116) break;\n            if(s[i] == -29 && s[i+1] == -128 && s[i+2] == -126) break;\n            if(s[i] == ',' || s[i] == '.') break;\n        }\n        ret += s[i];\n    }\n\n    return ret;\n}", "__index_level_0__": 12, "concepts": ["string manipulation", "string concatenation", "substring extraction", "character encoding"], "parsing_result": [{"instruction": "Write a Python function that takes a string and a character as input, and returns a new string that consists of the character repeated a specified number of times. The string should be formed of character sequences of the form \"[character]x[count]\", where \"x\" represents the character, and [count] represents the number of repetitions. For example: `string_repeat(\"cat\", 10)` should return `\"catcatcatcatcatcatcatcatcatcat\"`."}, {"instruction": "Write a Python function `parse_sentence` that takes a sentence as a string argument and returns a Python dictionary where the keys are unique words in the sentence and the values are the number of occurrences the words in the sentence. Words are defined as a sequence of alphabetic characters separated by non-alphabetic characters. In other words, all spaces are non-alphabetic characters. Use a dictionary to avoid repetition and sort the dictionary in ascending order of keys.\n\nFor example:\n\n- Input: `\"The cat sat on the mat\"` --> Output: `{'Cat': 1, 'Mat': 1, 'Sat': 1, 'The': 1, 'on': 1}`\n- Input: `\"  hey  hello hey\"` --> Output: `{'Hello': 1, 'hey': 2}`"}, {"instruction": "Write a Python function that takes a string as input and returns a new string with a \"1337\" encoding applied to each character. The encoding follows this pattern:\n- Characters in the range `[a-j]` are encoded as `[0-9]`,\n- Characters in the range `[k-z]` are encoded as `[10-35]`,\n- Characters in the range `[A-J]` are encoded as `[36-61]`,\n- Characters in the range `[K-Z]` are encoded as `[62-97]`,\n- All the special characters are encoded as `[98-122]` (space, period, comma, etc.).\n\nFor example: `'Python' --> '23176590722250859176725'`"}, {"instruction": "Write a Python function to process and extract information from a country-specific currency code, using the following format: `[prefix][digits].[digits]`. Here are some examples of valid codes:\n- EUR39.89: EUR is the currency prefix, 39.89 is the amount in cents\n- GBP-3.90: GBP is the currency prefix, 3.90 is the amount in pence\n\nThe function should work with the following operations:\n- `parse_currency(code: str) -> str`: extracts the amount from the currency code.\n- `parse_currency_prefix(code: str) -> str`: extracts the currency prefix from the currency code.\n- `format_currency(currency_prefix: str, amount: float) -> str`: formats the currency code, given the currency prefix and the amount."}, {"instruction": "Write a Python function `word_substitution` that takes two arguments: `text`, a string containing text with multiple words, and `replacements`, a dictionary with keys as words, and their corresponding values as the replacements. The function should replace each word in the `text` string with its corresponding replacement from the `replacements` dictionary."}, {"instruction": "Write a Python function that takes a list of strings as input, and returns a single string with all the input concatenated, separated by commas and a space after the last string. For example: `join_strings([\"Hello\", \"world\"])` should return `\"Hello, world\"`."}, {"instruction": "Write a Python function that implements a simple text editor. The function should read the input from a file, create a list of words, and print them in a single paragraph. The function should allow the user to remove, replace, or add words, and then print the results.\n\nYour function should handle the following commands:\n- `add`: append a word to the end of the list\n- `remove`: remove a word from the end of the list\n- `replace`: replace a word in the list with a new word\n- `print`: prints the list to the screen in a single paragraph\n- `exit`: exits the function"}, {"instruction": "Create a Python function to convert a string of digits into a list of base-10 integers. The input string should only contain digits in the range 0-9. The function should return the base-10 integer representation of the input string.\n\nSpecifically, the function should handle the following scenarios:\n- Digit strings containing leading zeros should be treated as invalid\n- Digit strings containing characters other than 0-9 should be treated as invalid\n- Digit strings containing more than 10 characters should be truncated and treated as invalid"}, {"instruction": "Write a Python function that is able to transform a list of integers into a list of strings representing the corresponding ASCII characters for each integer. The function must work for inputs of any size and should not utilize built-in ASCII and character encoding functions."}, {"instruction": "Write a Python function `format_word_count(word_count)` that accepts a dictionary of words and their counts as input, and returns a formatted string showing the word in bold, followed by its count in parentheses. The word and its corresponding count are separated by a colon and a space. Here is an example of a word count dictionary:\n\n```\n{\n    'apple': 2,\n    'banana': 1,\n    'cherry': 4,\n}\n```\nThe function should return the following formatted string:\n```\n'apple: (2)'\n'banana: (1)'\n'cherry: (4)'\n```"}, {"instruction": "Develop a Python function `make_nice_string(original_string)` that takes an input string and normalizes it into a canonical form, where all characters are lowercase, punctuation is removed, and empty spaces are replaced with underscores. The function should return a string that is no longer than 15 characters long. If the input string is longer than 15 characters, it should be truncated so that the first and last 7 characters remain."}, {"instruction": "Create a Python function that takes a string as input and outputs a string with the first letter capitalized and the rest of the letters lowercase. The function should handle special cases such as \"a\", \"I\", \"the\", and \"A\" as the first word of the input."}, {"instruction": "Write a Python function that takes a string as input and returns the length of the longest substring without repeating characters. For example:\n\n- Input: \"abcabcbb\" --> Output: 3 (Output: \"abc\", Max Length: 3)\n- Input: \"bbbbb\" --> Output: 1 (Output: \"b\", Max Length: 1)\n- Input: \"pwwkew\" --> Output: 3 (Output: \"wke\", Max Length: 3)"}, {"instruction": "Given a string that consists of an integer followed by a character, extract the character and the integer from the string."}, {"instruction": "Create a Python function to print a simplified version of a Huffman tree, where the nodes are labeled with their character representation and their frequencies, and unlabeled nodes are replaced with periods. The function should handle the case when the tree is empty, or when the node's frequency is zero. Ensure the function produces output with the correct indentation levels for each node."}, {"instruction": "Write a Python function `generate_password(n)` that generates a n-character password using the following rules:\n- the password is comprised of lowercase letters, special characters, and digits\n- the password is at least 12 characters long\n- there must be a minimum of 4 characters of each type\n- the password must contain at least one uppercase letter, one special character, and one digit"}, {"instruction": "Write a Python function that takes a string as input and returns the longest palindromic substring of the string. For example, `longest_palindrome(\"racecar\")` should return `\"racecar\"`."}, {"instruction": "Write a Python function to calculate the number of vowels in a given string. Use a string literal of 1000 characters to evaluate the performance of your solution."}, {"instruction": "Write a Python function `encode_string` that takes two arguments: `start_string` and `key`. The function should return a new string where each character is encoded using the key, which is a string of characters that is shifted by a certain number of indices. The encoded string should be comprised of the characters in `start_string` transformed according to the rules of the key.\n\nThe encoding rules are as follows:\n- The first character in the key determines how many characters to shift the characters in the string; the key's first character is always the number that determines the shift.\n- The characters in the key are used cyclically to shift all characters in the string.\n- If the shift is greater than the length of the key, repeat the key to obtain the shifted indices.\n- If the string contains any invalid characters, ignore them and continue to encode the remaining valid characters.\n\nThe encoded string should be formed by concatenating the encoded characters in the order in which they appear in the string.\n\nThis function should handle the following cases:\n- When the key is empty, return the empty string.\n- When the start string is empty, return the empty string.\n- When the key contains any non-numeric characters, return the empty string.\n- When the key is a single character, return the start string.\n\n#"}, {"instruction": "Develop a Python function that converts a binary string into an integer. The binary string may be padded, or separated by additional characters, such as whitespace or commas. Utilize the `ord` function to convert each character to its integer ASCII value. Note that the binary string is stored in the least significant bit of each character."}, {"instruction": "Write a Python function to combine two strings into one new string, where the first half of the string is used as the first half of the new string, and the second half of the string is used as the second half of the new string."}, {"instruction": "Develop a Python function `truncate(string, n)` that takes a string and an integer `n`. The function should return a string that has at most the first `n` characters from the input string. If the input string has fewer than `n` characters, the entire input string should be returned."}, {"instruction": "Create a Python function to encode a string into a sequence of ASCII characters based on a dictionary of character mappings. The function should take a string and return a string with encoded characters. The dictionary maps the original characters to their encoding counterparts. All the characters that are not explicitly mapped to other characters should be encoded as the format of a two-digit hexadecimal number. For example, `encode_string(\"hello world\")` should return `'h\\x65l\\x6clo w\\x6frld'`."}, {"instruction": "Develop a Python function that takes an input string containing a sequence of client IDs and batch IDs, and outputs a new string containing the client IDs and batch IDs separated by spaces."}, {"instruction": "Develop a Python function `shuffle_words` that takes a string representing a sentence as its input and returns a string with the words of the sentence randomly shuffled. You can assume that all the words in the sentence are separated by spaces. Use the random module to shuffle the words in the sentence."}, {"instruction": "Develop a Python function `generate_random_string` that accepts a string argument `prefix` and returns a random string using the following rules:\n- The string length is 100 characters long, randomly generated from the ASCII set (32 - 126)\n- The string starts with the prefix argument, and then an arbitrary integer between 0 and 100\n- The string contains exactly 20 characters that are not letters, numbers, or whitespace\n- The string contains 50 characters that are all lowercase letters\n- The string contains 25 letters that are all uppercase letters\n- The string contains 30 characters that are digits\n- The string contains exactly 50 characters that are letters, digits, or dots"}, {"instruction": "Develop a Python function `filter_unique_words` that takes a string as input and returns a list of words that do not repeat, based on the restrictions applied to the input string:\n- all words in the output list must be unique\n- words must not be repeated in the output list\n- words may be separated by spaces or other non-word characters\n- words may be case-insensitive\n\nThe function should also handle special cases such as empty strings, single-character strings, and strings containing punctuation."}, {"instruction": "Given a string of ASCII characters, reverse the string and return the resulting string, which has exactly the same length. You are allowed to utilize the following methods:\n- `copy()`\n- `replace()`\n- `append()`\n- `split()`\n- `join()`\n- `reverse()`\n- `reversed()`\n- `capitalize()`\n- `count()`\n- `startswith()`\n- `endswith()`\n- `find()`\n- `rfind()`\n- `startswith()`\n- `strip()`\n- `rstrip()`\n- `startswith()`\n- `strip()`"}, {"instruction": "Write a Python function that accepts a string from user input and returns a version of the string with words and their lengths in a list. For example, given the input `\"The quick brown fox jumps over the lazy dog.\"`, the function should return `['The', '4', 'quick', '5', 'brown', '5', 'fox', '5', 'jumps', '6', 'over', '4', 'the', '4', 'lazy', '3', 'dog', '3']`. Remove any leading or trailing whitespace."}, {"instruction": "Create a function to translate a string from the Latin alphabet to the Cyrillic alphabet. The function should return a string in the Cyrillic alphabet if the corresponding Latin alphabet character is provided as input. If a character is not included in the dictionary, the function should return the original character."}, {"instruction": "Write a Python function that takes a string of even length and returns a new string of the same length with its characters in reverse order."}, {"instruction": "Write a Python function `remove_consecutive_duplicates` that takes a string as an input and returns a string with consecutive duplicates removed. For example, `remove_consecutive_duplicates('aaabbbcccddd')` should return `'abcd'`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: static function declaration, class initialization, function definition\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_SubModel_update(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SubModel *arg1 = (cc::scene::SubModel *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::SubModel>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->update();\n    \n    \n    return true;\n}", "docstring": "// js_dtoroverride", "function_name": "js_delete_cc_scene_SubModel"}, "id": 45, "seed": "static bool js_cc_scene_SubModel_update(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SubModel *arg1 = (cc::scene::SubModel *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::SubModel>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->update();\n    \n    \n    return true;\n}", "__index_level_0__": 13, "concepts": ["static function declaration", "class initialization", "function definition"], "parsing_result": [{"instruction": "Design a Python program that implements a simple object-oriented web crawler that recursively follows hyperlinks on a website and collects all hyperlinks and their URLs.\n\nThe program should handle cases where the input URL is malformed or is not a valid URL."}, {"instruction": "Create a Python program that initializes and prints a class with a single static function. The class should have a single attribute, `attribute`, and a single function, `function`, that is a static function."}, {"instruction": "Create a Python program that reads two files containing lists of integers: one list representing the x-coordinates of a 2D skeleton points and the other list representing the y-coordinates. The program should compute the Euclidean distance between each pair of points in the list and return the mean and standard deviation of these distances."}, {"instruction": "Create a Python program to solve all combinations of the same three values in a list of three-element tuples. For example, given `[(1, 2, 3), (4, 5, 6), (7, 8, 9)]`, the program should output `[(1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 6, 7), (1, 6, 8), (1, 6, 9), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 6, 7), (2, 6, 8), (2, 6, 9), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 6, 7), (3, 6, 8), (3, 6, 9)]`."}, {"instruction": "Implement a Python class that represents the geometric shapes with perimeter and area, with a static method to calculate the area for a rectangular shape. The class should include an `__init__` method to initialize the shape, and a class method to compute the perimeter of a shape."}, {"instruction": "Design a Python program that implements a function to detect if a given integer is prime. For example, the function should return `False` for 13 and `True` for 29. Include error handling to manage invalid inputs."}, {"instruction": "Design a Python program to implement the Fibonacci sequence. The sequence is defined as `F(n) = F(n - 1) + F(n - 2)`, where `F(0) = 0` and `F(1) = 1`. The program should allow the user to input a positive integer `n` and output the Fibonacci sequence up to the `n`th term.\n\nFor example, if the user inputs 5, the program should return the series `[0, 1, 1, 2, 3]`."}, {"instruction": "Create a Python program that implements a function to calculate the Euclidean distance between two points. The function should take two tuples as input and return the Euclidean distance between them.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert euclidean_distance((1, 1), (1, 1)) == 0\nassert euclidean_distance((1, 1), (-1, -1)) == 2\nassert euclidean_distance((0, 0), (3, 4)) == 5\n```"}, {"instruction": "Create a class to represent a rectangular coordinate system with x and y axes. The class should have methods to compute the distance between two points, determine the orientation of a line segment, and return the middle point of a rectangle."}, {"instruction": "Create a Python program that implements a matrix class with a static function that computes the product of two matrices using the following algorithm:\n- If the matrices are not of the same size, raise a ValueError.\n- If the matrices are of the same size, compute the product using the following algorithm:\n    - Initialize the product matrix to be an empty matrix of the same size.\n    - For each row of the product matrix, perform a dot product with the corresponding row of the second matrix.\n    - Return the product matrix."}, {"instruction": "Implement a Python program that initializes two linked lists, `list1` and `list2`, by randomly populating each list with 100 integers between 0 and 1,000. Then, perform the following operations successively:\n- Add the contents of `list1` to `list2`\n- Remove the first 10 elements from `list1`\n- Remove the last 10 elements from `list2`\n- Repeat until both lists are empty"}, {"instruction": "Design a Python class to represent a stopwatch that can start, pause, and reset a timer. The class should have a `start` function to set a start time for the timer, and a `pause` function to set a pause time for the timer, and a `reset` function to set both start and pause times to `None`. The class should also have a `read` function to return the time elapsed since the start of the timer. When the timer is reset, the `start` function should accept a `new_start` parameter to override the current start time."}, {"instruction": "Implement a Python program to track and print the current state of a bank account. It should initialize with a given balance and an initial interest rate.\nThe program should allow the user to deposit or withdraw money. Each deposit or withdrawal should have a projected interest rate of 0.1% per day.\nThe program should print the current balance and projected balance after every deposit or withdrawal.\nIf the user tries to withdraw more than the balance, the program should raise an exception with a custom message."}, {"instruction": "Create a Python program that implements the [Damerau\u2013Levenshtein distance](https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance) between two strings. The Damerau\u2013Levenshtein distance is a measure of the minimal number of insertions, deletions, substitutions, and transpositions of characters needed to change one string into another. The algorithm should use dynamic programming to find the minimum number of operations to transform one string into another."}, {"instruction": "Implement a Python program that reads in data from a file, converts it to a list of strings, and outputs the list. The program should use a decorator to print the number of lines and characters in the input file."}, {"instruction": "Create a Python program that implements computing the distance between two longitude & latitude coordinates. Assume the Earth is a perfect sphere with radius of 6371 km. Assume the coordinates are given in degrees.\n\nFor example, the program should pass the following assertions:\n\n```python\nassert compute_distance(37.7772, -122.4168, 37.8084, -122.2775) == 5.371861818692899\n```"}, {"instruction": "Create a Python program that implements a class `Triangle` with three fields `a`, `b`, and `c` representing sides of a triangle, and a function `is_valid()` to verify the triangle is valid (the sum of any two sides must be greater than the third). Create another static function `classify()` that takes a triangle and outputs its type in string format. Use the following types: equilateral triangle, isosceles triangle, acute triangle, right triangle, or obtuse triangle. For example, the program should pass the following assertions:\n\n```python\nassert Triangle(2, 2, 2).is_valid() == True\nassert Triangle(2, 2, 3).is_valid() == False\nassert Triangle(2, 2, 2).classify() == 'equilateral triangle'\nassert Triangle(2, 3, 2).classify() == 'isosceles triangle'\nassert Triangle(3, 4, 5).classify() == 'right triangle'\nassert Triangle(6, 8, 10).classify() == 'obtuse triangle'\n```"}, {"instruction": "Create a Python program that initializes an array with integers that are the Fibonacci sequence.\n\nThe first two Fibonacci numbers are 0 and 1, and each subsequent number is the sum of the previous two. This sequence continues indefinitely. For example, the sequence 0, 1, 1, 2, 3, 5, 8, 13, ... is generated by `f(0) = 0`, `f(1) = 1`, `f(k) = f(k-1) + f(k-2)` for `k >= 2`.\n\nThe program should initialize an array of size `n` with the first `n` Fibonacci numbers, where `n` is an integer greater than or equal to 2.\n\nFor example, given `n = 10`, the program should output: `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]`."}, {"instruction": "Implement a Python program to determine whether a given string is a valid Python identifier.\n\nValid identifiers must follow the following rules:\n\n- must start with a letter ('a'--'z' or 'A'--'Z') or an underscore ('_')\n- must consist of letters, numbers ('0'--'9'), or underscores ('_')\n- can contain letters, numbers ('0'--'9'), or underscores ('_') after the first character\n- cannot be a reserved word in Python\n\nFor example, the program should pass the following assertions:\n\n```python\nassert is_identifier('foo')\nassert is_identifier('fo_')\nassert is_identifier('_fo_')\nassert is_identifier('foo_bar')\nassert is_identifier('foo1')\nassert is_identifier('Foo')\nassert is_identifier('1foo')\nassert not is_identifier('1')\nassert not is_identifier(' ')\nassert not is_identifier('()')\nassert not is_identifier('foo()')\nassert not is_identifier('1foo()')\nassert not is_identifier('None')\n```"}, {"instruction": "Design a Python program that implements the [Singly Linked List](https://www.geeksforgeeks.org/data-structures/linked-list/singly-linked-list/) data structure. The class should have the methods `insert`, `delete`, and `search` to perform various operations on the list. The method `insert` should take the elements to be inserted as input and return the list after appending the elements. The method `delete` should take an element to be deleted as input and return the list after deleting the element. The method `search` should take an element to be searched for as input and return `True` if the element is found and `False` otherwise."}, {"instruction": "Implement a Python program that takes a number of integers as inputs and outputs the minimum element, maximum element, and the sum of all elements."}, {"instruction": "Design a Python program that accepts a file path and a search word as input. The program should read the content of the file and return the number of times the search word appears in the file. The search word should be case-insensitive. Include error handling to manage invalid inputs such as invalid file paths or invalid search words."}, {"instruction": "Create a Python class that implements a bank account with the following features:\n- There are two types of accounts: checking and savings. Both types have a default interest rate of 0.1%.\n- Checking accounts can be created with a non-negative balance, while savings accounts can be created with a non-negative interest rate and an initial balance of 0.\n- Checking accounts have a withdraw method that deducts a non-negative amount from the balance without changing the interest rate.\n- Savings accounts have a withdraw method that deducts a non-negative amount from the balance and updates the interest rate, e.g., account with a rate of 0.1% changes to 0.11% after a withdrawal of 100.\n- Checking and savings accounts have a `get_balance` method that returns their balance."}, {"instruction": "Implement a Python program that performs the following tasks:\n- creates a Triangle class with three attributes: height, base, and sides\n- calculates the area and perimeter of the triangle based on the aforementioned attributes\n- initializes the class via the provided `Triangle` function\n- provides access to the attributes via getter functions, and assigns values to the attributes via setter functions; setters should not allow invalid values\n- uses a static method to calculate the centroid of the triangle\n- uses a class method to calculate the area of the triangle\n- uses a regular method to calculate the perimeter of the triangle"}, {"instruction": "Create a Python program that defines a class to represent a bank account. This class should have a static method (class method) to calculate the interest earned on an account by a specified amount. The interest rate should be 1.5% for the first 1000 USD and 1.2% for all other amounts."}, {"instruction": "Design a Python program that keeps track of the total number of added and deleted objects in a class. When an object is added to a class, it should automatically increment the added count. Similarly, when an object is deleted from the class, the deleted count should be incremented. Use a static function to increment the respective counts and a class member to retrieve the total counts."}, {"instruction": "Implement a Python class that represents a player of the game of Nim. The class should have two data attributes: `num_stones`, which indicates the number of stones in the pile to begin with, and `score`, which indicates the number of stones the player has taken away from the pile. The class should also have two methods: `take_stones`, which takes away `num_stones` stones from the pile, and `play_round`, which takes away a random number of stones from the pile."}, {"instruction": "Design a Python program that implements a simple \"Todo List\". It should meet the following criteria:\n- It should accept command line arguments defining the type of operation to be performed, the list item to be added or removed, and the list to be modified.\n- It should support operations like: \"add\" (adds a new list item), \"remove\" (removes a list item), \"list\" (lists all the list items), and \"quit\" (exits the program).\n- It should handle invalid user input (e.g., unsupported operation or empty input).\n- It should accept any list item name, including empty strings.\n- It should support multiple lists.\n- It should handle errors with respect to unsuccessful list item updates.\n- It should handle errors with respect to unsuccessful list item deletions."}, {"instruction": "Create a class that represents an image file. Each image file has a name, a list of pixels, and a width and a height.\nThe class should contain a constructor that accepts file name as an argument and reads the file into a list of pixels and computes the width and height."}, {"instruction": "Create a Python program that implements a single-linked list. Each node of the list should store an arbitrary Python object and a reference to its successor.\n\nThe program should be able to:\n- iterate over the list from the head to the tail\n- delete a node from the list\n- insert a node before/after an existing node\n- create a new list"}, {"instruction": "Create a Python class `Person` that implements the following functionality:\n- A `Person` should be initialized with a `name` and a `birthday`\n- The `birthday` attribute should be a string in the format `\"YYYY-MM-DD\"`\n- A `Person` should have a `age` attribute that returns the age of the `Person` in years given the current date as a string in the format `\"YYYY-MM-DD\"`"}, {"instruction": "Implement a Python program that performs a search for all files with a given extension within a specified directory and subdirectories.\nThe program should recursively search for files with the specified extension in all subdirectories of the specified directory.\nFor each file found, the program should print the file's path and size in bytes as a formatted string.\nThe program should handle invalid input by displaying an error message and exiting."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: file I/O, file conversion, C++ pointer arithmetic, dynamic memory allocation\n\n### Task", "fingerprint": null, "content": {"code": "GLuint createTFF1DTexture(const char* filename)\n{\n\t// read in the user defined data of transfer function\n\tifstream inFile(filename, ifstream::in);\n\tif (!inFile)\n\t{\n\t\tcerr << \"Error openning file: \" << filename << endl;\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tconst int MAX_CNT = 10000;\n\tGLubyte *tff = (GLubyte *)calloc(MAX_CNT, sizeof(GLubyte));\n\tinFile.read(reinterpret_cast<char *>(tff), MAX_CNT);\n\tif (inFile.eof())\n\t{\n\t\tsize_t bytecnt = inFile.gcount();\n\t\t*(tff + bytecnt) = '\\0';\n\t\tcout << \"bytecnt \" << bytecnt << endl;\n\t}\n\telse\n\t{\n\t\tcout << filename << \" read failed \" << endl;\n\t}\n\tGLuint tff1DTexture;\n\tglGenTextures(1, &tff1DTexture);\n\tglBindTexture(GL_TEXTURE_1D, tff1DTexture);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n\tglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\tglTexImage1D(GL_TEXTURE_1D, 0, GL_RGBA8, 256, 0, GL_RGBA, GL_UNSIGNED_BYTE, tff);\n\tfree(tff);\n\treturn tff1DTexture;\n}", "docstring": "// Create the shader program", "function_name": "createShaderProgram"}, "id": 46, "seed": "GLuint createTFF1DTexture(const char* filename)\n{\n\t// read in the user defined data of transfer function\n\tifstream inFile(filename, ifstream::in);\n\tif (!inFile)\n\t{\n\t\tcerr << \"Error openning file: \" << filename << endl;\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tconst int MAX_CNT = 10000;\n\tGLubyte *tff = (GLubyte *)calloc(MAX_CNT, sizeof(GLubyte));\n\tinFile.read(reinterpret_cast<char *>(tff), MAX_CNT);\n\tif (inFile.eof())\n\t{\n\t\tsize_t bytecnt = inFile.gcount();\n\t\t*(tff + bytecnt) = '\\0';\n\t\tcout << \"bytecnt \" << bytecnt << endl;\n\t}\n\telse\n\t{\n\t\tcout << filename << \" read failed \" << endl;\n\t}\n\tGLuint tff1DTexture;\n\tglGenTextures(1, &tff1DTexture);\n\tglBindTexture(GL_TEXTURE_1D, tff1DTexture);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n\tglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\tglTexImage1D(GL_TEXTURE_1D, 0, GL_RGBA8, 256, 0, GL_RGBA, GL_UNSIGNED_BYTE, tff);\n\tfree(tff);\n\treturn tff1DTexture;\n}", "__index_level_0__": 14, "concepts": ["file I/O", "file conversion", "C++ pointer arithmetic", "dynamic memory allocation"], "parsing_result": [{"instruction": "Develop a Python program that reads a binary file containing a C++ `int` array and converts the bytes into a Python `list` of `int`s using the `from_bytes` method."}, {"instruction": "Create a Python program to parse a text file containing C++ code and produce an equivalent Python program. The Python program should follow the same syntax rules as the C++ code. The program should include the necessary imports, function definitions, and class definitions to support execution of the original C++ code.\n\nThe program should print the converted Python code to the console, which can be read and executed directly by a Python interpreter."}, {"instruction": "Develop a Python program that reads a CSV file containing stock market data and calculates the daily returns for a given stock symbol. The program should support retrieving the data from an external source (e.g., Google Finance or Yahoo Finance) and output the daily returns to a CSV file."}, {"instruction": "Develop a Python program that reads a text file containing lines of data formatted according to a specific pattern. The file must contain only one line per record and must be formatted consistently. The program should parse the file line by line and output a new file containing the parsed records in a specific format. Each record in the output file should be formatted as a C++ struct containing the fields specified in the original file."}, {"instruction": "Develop a Python program that reads a CSV file and converts it to a JSON file. The program will take two command line arguments: the path to the CSV file and the path to the output JSON file. The script should read the CSV file line by line and parse each line into a dictionary. The script should transfer each dictionary to a JSON file, write a new line after each dictionary, and close the CSV and JSON files."}, {"instruction": "Write a Python program that reads a CSV file containing a list of products and prices. The file should be read line by line, split into its columns using the comma delimiter, and stored into a list of dictionaries. The program should iterate over the list of dictionaries to calculate the total sum of all prices and print the result to the console. The program should handle any format and type of CSV file and gracefully handle any invalid input data."}, {"instruction": "Develop a Python program that converts a text file containing integers separated by spaces to its binary representation, one bit per line, and saves the resulting binary numbers to a separate file."}, {"instruction": "Develop a Python program that converts text files containing one number per line to files containing one binary data per line. Each line in the output file should contain a single 32-bit unsigned integer representing the corresponding integer in the input file. Handle exceptions and errors in an appropriate manner."}, {"instruction": "Write a Python program that reads a text file containing a list of integers delimited by commas and converts the contents to a single line of comma-separated numbers using C++ pointer arithmetic."}, {"instruction": "Develop a Python program that reads a text file containing a list of numbers separated by commas and converts it to a list of integers. The program should ensure data integrity by identifying incorrect input formats and handling exceptions as needed."}, {"instruction": "Develop a Python program that reads a text file containing multiple lines of text and writes the same lines of text to another text file in reverse order. Implement the program in such a way that it is easily extensible to support additional file formats such as CSV or JSON."}, {"instruction": "Improve the Python program from Example 8 to convert each command from a shell script into a Python script. The script should be placed in a directory with the same name as the input script.\n\nEnable the conversion to work for any file that is executable and has a different file extension than `.sh` (`.sh` is a common extension for shell scripts).\n\nUse pointers and dynamic memory allocation to allocate sufficient memory for the converted Python script."}, {"instruction": "Develop a Python program that reads a text file containing a matrix of integers and converts it into a Numpy array. The program should support multiple matrix sizes and handle errors gracefully. Provide clear error handling and logging to manage exceptions that might occur during the conversion."}, {"instruction": "Develop a Python program that reads an image in the PPM format and calculates the average color values for each pixel. The program should output a new file in PPM format that contains the original image with the averaged color values for each pixel."}, {"instruction": "Implement a Python program to convert a C++ program to Python. The program should read a C++ program, parse and translate the code into the Python language. The translated code should be written into a new file with a `.py` extension. The program should provide clear error handling and logging to manage exceptions that might occur during the conversion."}, {"instruction": "Develop a Python program that converts a text file containing user-defined data in a specific format into a CSV file using a specific delimiter. The program should support multiple input formats including JSON, CSV, and other formats. Additionally, the program should handle exceptions and log errors appropriately."}, {"instruction": "Develop a Python program that reads information from a text file and converts the information into a Python dictionary, using the following format:\n\n```\nName: \nAge: 30\nGender: M\n```\n\nEach line contains a key-value pair, where the key and value are separated by a colon. The program should read the file line by line and convert each line into a key-value pair using Python's built-in `dict.update` method. The program should also handle invalid lines by printing a message indicating the line number and the error. If the key already exists in the dictionary, the value associated with the key should be updated with the new value from the line. Finally, the program should print the final dictionary, converting each item into a string and joining them with newlines."}, {"instruction": "Develop a Python program that reads a CSV file containing a list of stocks and their corresponding prices in the format \"ticker,price\". The program should convert the file to an equivalent JSON file. The format for the JSON file should be a list of objects, each corresponding to a stock, with each object containing a key \"ticker\" and a key \"price.\""}, {"instruction": "Develop a Python program that reads a text file containing a list of integers separated by newlines and converts the file to a binary representation by writing the integers in binary format to a new file. Use C++ pointer arithmetic and dynamic memory allocation to correctly handle the input and output files."}, {"instruction": "Create a Python program that reads a text file containing a list of floating-point numbers and converts the numbers to their hexadecimal equivalents. The program should also generate a new text file containing the hexadecimal numbers obtained after the conversion. Use the `hex()` function for converting the numbers from float to hex. Ensure correct error handling and logging to manage exceptions that might occur during file I/O operations."}, {"instruction": "Develop a Python program that reads a text file containing a C++ code snippet and converts it into a valid Python program. Utilize string slicing to extract the C++ code, preprocess it, and generate a valid Python program."}, {"instruction": "Create a Python program that reads a CSV file containing a list of users with their ages. Convert the file to a JSON file containing a list of JSON objects containing the user details. Perform error handling to manage exceptions and missing input files."}, {"instruction": "Create a Python script that reads an input file with binary content and converts the binary data to a text file containing the corresponding bits of ASCII characters. The conversion should be done using C++ pointers to achieve maximum efficiency."}, {"instruction": "Implement a Python program that reads a binary file containing data in the following format: 4-byte int, 4-byte int, 4-byte int, 4-byte int, 4-byte int. The file should be read a line at a time and each line should be converted to a C++ struct containing int, float, and double values. Store the data in a C++ Map container within the program to provide fast lookup for the data stored in the file."}, {"instruction": "Develop a Python program that converts a JSON file, written in JavaScript Object Notation (JSON) format, to a CSV file, using the Python standard library and the JSON module."}, {"instruction": "Develop a Python program that reads a text file containing tab-separated values and converts the data into a new CSV (comma-separated values) file with the same row count. The program should perform the following tasks:\n\n- Read the input file and load all its contents into memory as a list of strings.\n- Perform any necessary pre-processing or sanitization on the data.\n- Extract the data from each line and convert it into comma-separated columns.\n- Write the converted data to a new CSV file."}, {"instruction": "Write a Python program that accepts two integer values, `min` and `max`, from the user and calculates the sum of the squares of all integers in the range `[min, max]`. The program should print the sum of squares to the standard output."}, {"instruction": "Implement a Python program that reads a text file containing integer values and calculates the sum of all positive integers in the file using C++ pointers. The program should perform the following tasks:\n\n- Read the file line by line and convert the text to integer values.\n- Use C++ pointers to calculate the sum of all positive integers in the file.\n- Print the final calculated sum to the console."}, {"instruction": "Develop a Python program that converts a text file containing a series of numbers in decimal notation to the equivalent binary representation in a new file. Provide clear error handling and logging to manage exceptions that might occur during the conversion process."}, {"instruction": "Create a Python program that converts a text file into a NumPy array of shape `(8, 8)` containing zeroes and ones. The task should utilize the NumPy library and make use of powerful array manipulation capabilities. The program should read the input file line by line and update the array based on the input. Treat the input as text and convert each line of the file into a NumPy array of shape `(8, 8)` using NumPy's `fromstring` function.\n\nThe input file should contain eight lines of text each representing the rows of a 8x8 grid. Each line should contain a binary string of length 8 representing a single row of the grid. The program should iterate over each line of the input file, convert it to its corresponding NumPy array of shape `(8, 8)`, and then update the global NumPy array `input_array` accordingly."}, {"instruction": "Create a Python program that reads a CSV file containing student information and converts it into a JSON file. The program should convert each line of the CSV file into a dictionary containing the student information. Each dictionary should be appended to a list. The final JSON file should be written as a single JSON object by serializing the list of dictionaries into a single string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: setting up the ESP8266 WiFi module, using the MDNS service, conditional compilation to select the clock frequency, WiFi setup\n\n### Task", "fingerprint": null, "content": {"code": "void setup(void){\n  pinMode(2, OUTPUT);\n  randomSeed(10);\n  strip.begin();\n  strip.show();\n\n  //server.on(\"/\", handleRoot);\n  \n    server.on(\"/RainbowCycle\", [](){\n    val = 2;\n    Serial.println(\"RainbowCycle\");\n    rainbowCycle(20);\n  });\n  \n  server.on(\"/Rainbow\", [](){\n    val = 3;\n    Serial.println(\"Rainbow\");\n    rainbow(20);  \n  });\n    server.on(\"/ChaseRainbow\", [](){\n    val = 4;\n    Serial.println(\"ChaseRainbow\");\n    theaterChaseRainbow(50);\n  });\n  \n    server.on(\"/2_Color\", [](){\n     Serial.println(\"2_Color\");\n     doubleColor = 1;\n  });\n\n  server.begin();\n  Serial.println(\"HTTP server started\");\n  \n  Serial.begin(115200);\n  EEPROM.begin(512);\n  delay(10);\n  Serial.println();\n  Serial.println();\n  Serial.println(\"Startup\");\n  // read eeprom for ssid and pass\n  Serial.println(\"Reading EEPROM ssid\");\n  String esid;\n  for (int i = 0; i < 32; ++i)\n    {\n      esid += char(EEPROM.read(i));\n    }\n  Serial.print(\"SSID: \");\n  Serial.println(esid);\n  Serial.println(\"Reading EEPROM pass\");\n  String epass = \"\";\n  for (int i = 32; i < 96; ++i)\n    {\n      epass += char(EEPROM.read(i));\n    }\n  Serial.print(\"PASS: \");\n  Serial.println(epass);  \n  if ( esid.length() > 1 ) {\n      // test esid \n      //WiFi.mode(WIFI_AP_STA);\n      //WiFi.disconnect();\n      //delay(100);\n      WiFi.begin(esid.c_str(), epass.c_str());\n      WiFi.config(IPAddress(192,168,8,187), IPAddress(192,168,8,1), IPAddress(255,255,255,0),IPAddress(192,168,8,1));\n      if (testWifi()) {\n        launchWeb(0);\n        return;\n      }\n  }\n  setupAP();\n/*  \n  WiFi.begin(ssid, password);\n  WiFi.config(IPAddress(192,168,1,187), IPAddress(192,168,1,1), IPAddress(255,255,255,0),IPAddress(192,168,1,1));\n  Serial.println(\"\");\n\n  // Wait for connection\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"Connected to \");\n  Serial.println(ssid);\n  Serial.print(\"IP address: \");\n  Serial.println(WiFi.localIP());\n\n  if (MDNS.begin(\"esp8266\")) {\n    Serial.println(\"MDNS responder started\");\n  }\n  */\n  #if defined (__AVR_ATtiny85__)\n    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);\n  #endif\n\n  \n\n}", "docstring": "//", "function_name": "handleRoot"}, "id": 48, "seed": "void setup(void){\n  pinMode(2, OUTPUT);\n  randomSeed(10);\n  strip.begin();\n  strip.show();\n\n  //server.on(\"/\", handleRoot);\n  \n    server.on(\"/RainbowCycle\", [](){\n    val = 2;\n    Serial.println(\"RainbowCycle\");\n    rainbowCycle(20);\n  });\n  \n  server.on(\"/Rainbow\", [](){\n    val = 3;\n    Serial.println(\"Rainbow\");\n    rainbow(20);  \n  });\n    server.on(\"/ChaseRainbow\", [](){\n    val = 4;\n    Serial.println(\"ChaseRainbow\");\n    theaterChaseRainbow(50);\n  });\n  \n    server.on(\"/2_Color\", [](){\n     Serial.println(\"2_Color\");\n     doubleColor = 1;\n  });\n\n  server.begin();\n  Serial.println(\"HTTP server started\");\n  \n  Serial.begin(115200);\n  EEPROM.begin(512);\n  delay(10);\n  Serial.println();\n  Serial.println();\n  Serial.println(\"Startup\");\n  // read eeprom for ssid and pass\n  Serial.println(\"Reading EEPROM ssid\");\n  String esid;\n  for (int i = 0; i < 32; ++i)\n    {\n      esid += char(EEPROM.read(i));\n    }\n  Serial.print(\"SSID: \");\n  Serial.println(esid);\n  Serial.println(\"Reading EEPROM pass\");\n  String epass = \"\";\n  for (int i = 32; i < 96; ++i)\n    {\n      epass += char(EEPROM.read(i));\n    }\n  Serial.print(\"PASS: \");\n  Serial.println(epass);  \n  if ( esid.length() > 1 ) {\n      // test esid \n      //WiFi.mode(WIFI_AP_STA);\n      //WiFi.disconnect();\n      //delay(100);\n      WiFi.begin(esid.c_str(), epass.c_str());\n      WiFi.config(IPAddress(192,168,8,187), IPAddress(192,168,8,1), IPAddress(255,255,255,0),IPAddress(192,168,8,1));\n      if (testWifi()) {\n        launchWeb(0);\n        return;\n      }\n  }\n  setupAP();\n/*  \n  WiFi.begin(ssid, password);\n  WiFi.config(IPAddress(192,168,1,187), IPAddress(192,168,1,1), IPAddress(255,255,255,0),IPAddress(192,168,1,1));\n  Serial.println(\"\");\n\n  // Wait for connection\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"Connected to \");\n  Serial.println(ssid);\n  Serial.print(\"IP address: \");\n  Serial.println(WiFi.localIP());\n\n  if (MDNS.begin(\"esp8266\")) {\n    Serial.println(\"MDNS responder started\");\n  }\n  */\n  #if defined (__AVR_ATtiny85__)\n    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);\n  #endif\n\n  \n\n}", "__index_level_0__": 15, "concepts": ["setting up the ESP8266 WiFi module", "using the MDNS service", "conditional compilation to select the clock frequency", "WiFi setup"], "parsing_result": [{"instruction": "Design a Python class `ESP8266Clock` that implements a clock using the ESP8266 WiFi module. The class should support one method: `setup()` to configure the ESP8266 WiFi module and set up the MDNS service.\n\nThe class will use a configuration file to store the SSID and the password of the WiFi network. The class should use conditional compilation to select the clock frequency (32 or 16 MHz) based on the ESP8266's physical configuration.\n\nThe class should also support the following functions: `get_time()`, `set_time()`, `get_date()`, and `set_date()`. The functions should handle all the edge cases for both the time and the date components. Finally, the class should implement the `__str__()` method to display the current time and the date."}, {"instruction": "Create a Python class `ESP8266MDNSClient` that connects to the local WiFi network and maintains a connection to a MDNS-enabled server. When the class is instantiated, it should connect to the local WiFi network using credentials already stored on the ESP8266 module. The class should support a `ping(self, host: str)` method, which sends a ping to a particular MDNS-enabled host. The class should also support a `set_hostname(self, hostname: str)` method, which allows the ESP8266 to change its device name in the local network."}, {"instruction": "Create a Python class `WiFiClock` that implements a clock with the following properties:\n- the current time is represented by 32-bit unsigned integers\n- the time is incremented by one every second\n- the clock is automatically synced with NTP server\n- the clock can be set manually by the user\n\nCreate a subclass `WiFiClock_ESP12` that extends `WiFiClock` to work with an ESP8266-based clock, and a subclass `WiFiClock_ESP32` that extends `WiFiClock` to work with an ESP32-based clock.\n\nThe `WiFiClock` class should be generic and support both ESP8266 and ESP32 chips. The clock be set using the `set_time` method on the `WiFiClock` class, which will call the appropriate class-specific method on its instance. The `WiFiClock` class should be abstract."}, {"instruction": "Design a Python class `ESP8266WiFi` that allows a user to set up and connect to an ESP8266 WiFi module. The class should also support setting up an MDNS service for easy access.\n\nThe class should set up the clock frequency of the ESP8266 module to either `80 MHz` or `160 MHz`. The class should also support conditional compilation to select the clock frequency, and include pre-defined constants for the two frequencies.\n\nThe class should have methods to configure the WiFi module and enable MDNS."}, {"instruction": "Develop a Python library for a clock that uses the ESP8266 as a WiFi access point. The library should be capable of sending and receiving NTP time updates from a remote server and setting the local time accordingly. The library should offer the following functionalities:\n- setting the clock time\n- getting the current time in the POSIX format\n- sending NTP time updates to a remote server\n- establishing TCP connection with a remote server\n- setting up an MDNS service that responds to queries coming from the remote server\n\nThe library should be structured in such a way that it can be easily adapted to any other platform by selectively importing functionality from the `esp8266` module or by using the `wifi` module. All the functions should be implemented as class methods."}, {"instruction": "Develop a Python class `ESP8266` that implements a simple API for interacting with the ESP8266 WiFi module. The class should configure the module to use the `ESP8266` WiFi driver, enable the MDNS service, and display information on the connected WiFi network.\n\nThe class should also handle errors gracefully, such as invalid commands and connection failures. Additionally, it should support conditional compilation to select the clock frequency."}, {"instruction": "Develop a Python class `ESP8266` that connects to the WiFi network and provides a mechanism to set the clock frequency of the ESP8266 module. The class should offer methods to set the clock frequency of the ESP8266 module to `8MHz` or `16MHz`, and the class should automatically select the appropriate frequency based on the number of pins on the ESP8266 module. Your class should have a main method, `main`, that allows users to input desired clock frequency and sets the clock frequency of the ESP8266 accordingly."}, {"instruction": "Develop a Python class `ESP8266WiFi` that provides a simple interface for controlling the ESP8266 WiFi module using MicroPython. The class should support setting up the ESP8266 module to connect to a WiFi access point and provide the service name `esp8266` so that it can be accessed through the hostname.\n\nThe class should be able to handle connection failures, allowing the user to retry the connection up to a maximum number of times. The class should also be able to handle timeouts, allowing the user to manually change the timeout duration between each retry.\n\nThe class should provide an internal state that stores the current WiFi connection status and the WiFi access point information. It should also provide a method `connect` to establish a connection to the access point and a method `status` to get the connection status.\n\nThe class should handle errors gracefully, such as improper input validation and connection failures. It should also support conditional compilation to select the correct frequency for the ESP8266 module based on the microcontroller hardware."}, {"instruction": "Using the example ESP8266 code, develop a Python class that allows users to setup the WiFi module for a specific network. The class should allow users to set up the network's SSID, password, and IP address. The class should also provide the ability to detect the WiFi module's IP address and check if a device can be connected to it."}, {"instruction": "Develop a Python program that runs on an [ESP8266](https://en.wikipedia.org/wiki/ESP8266), a WiFi microcontroller. The program first sets up WiFi using the hard-coded WiFi credentials. After that, it initializes the MDNS service and starts updating its own IP address every 5 seconds. The program also displays its IP address on the serial port, and it prints a message every 10 seconds.\n\nHere are some tips for the implementation:\n- To set up the ESP module, you'll need a separate source file like `esp-config.py` that contains the WiFi credentials, as well as a system-dependent configuration file, such as `esp8266-config.py`.\n- For the MDNS service, you'll need to initialize the package `mdns` and set up a `SimpleService` object.\n- To set up the ESP module, make sure to have the ESP module connected to the serial port and to the 3.3V power supply. Also, remember to modify the `esp8266-config.py` file to ensure the correct pinout.\n- The program should run on the ESP module, so don't forget to comment out the `if __name__ == '__main__'` block that runs on your computer."}, {"instruction": "In this task, you'll get to practice everything you've learned so far in this chapter. You are going to implement a Python class that acts as a clock, with the following features:\n\n- WiFi connection to a pre-existing network (e.g., Maker WiFi)\n- Settings of the time (e.g., hours, minutes, and seconds)\n- Multifunctional clock display\n- Multifunctional clock WiFi configuration\n- Multifunctional clock functionality to change the time\n\nThe class should be compatible with the ESP8266 microcontroller. To make it possible, you should use the preprocessor directives `#if` and `#endif` to select the correct microcontroller clock frequency (160 MHz or 80 MHz) at compile time. You should also call the ESP8266's `WiFi.begin` function to connect to an existing network. Otherwise, the clock will not be able to connect to WiFi.\n\nAll the clock's functionality should be controlled through the same Python script. The program should launch the GUI and offer functionalities to the clock's user. You may choose any GUI framework of your choice."}, {"instruction": "Write a Python class `ESP8266` that implements a client for the ESP8266 WiFi module. This class should handle the WiFi setup, and maintain a connection to a remote server. The server is expected to be either a web server or an MQTT server.\n\nYou can take inspiration from the example provided in this [link](https://github.com/dhylands/ESP8266-MQTT-Python-Example).\n\nThe class should handle the following operations:\n- `ESP8266.connect(server: str, client_id: str, port: int=1883)`: connects to the server, using the MQTT protocol\n- `ESP8266.publish(topic: str, message: str)`: publishes the message to the given topic\n- `ESP8266.subscribe(topic: str)`: subscribes to the given topic\n- `ESP8266.receive(timeout: float, msg_callback: Callable)`: receives messages from the server, and calls the `msg_callback` function\n\nThe `msg_callback` function should have the following signature: `def msg_callback(topic: str, message: str) -> None`\n\nThe class should also handle erroneous inputs."}, {"instruction": "Develop a Python class `ESP8266WiFi` that offers advanced tools for interacting with the ESP8266 WiFi chip. The class should allow setting up the WiFi module and communicating with it through a socket-based TCP connection. Additionally, the class should support using the MDNS service to advertise the WiFi module's availability via its hostname.\n\nThe class should handle setting up the WiFi module with the `setup_wifi(self)` method. The method should take a hostname and a password as arguments and connect to the WiFi network. After the connection is established, the method should initialize the MDNS service with the hostname provided. The class should support communicating with the WiFi module through a socket-based TCP connection with the `connect_socket(self)` method. The method should take a hostname and a port number as arguments and establish the TCP connection. The class should also support using the MDNS service to discover the WiFi module via its hostname with the `discover_socket(self)` method. The method should return the port number of the socket.\n\nThe class should also handle setting up the clock frequency with the `setup_clock(self, freq: int)` method. The method should take a frequency in Hertz as an argument and set up the clock frequency accordingly. The class should support checking the current clock frequency with the `get_clock(self)` method. The method should return the current clock frequency in Hertz.\n\nThe class should handle error handling properly, such as establishing the correct connection, detecting the correct port number, setting up the correct clock frequency, and gracefully handling errors when the connection is not established. Additionally, the class should support conditional compilation to select the clock frequency based on the build configuration, such as using the 80 MHz version of the clock when building for the ESP-01 module.\n\nThe class should handle setting up the ESP8266 WiFi module correctly such that the connection to the WiFi network and the MDNS service are properly established. It should also handle setting up the clock frequency correctly to achieve the desired frequency. The class should handle errors properly if there is any, such as not being able to connect to the WiFi network or setting up the MDNS service."}, {"instruction": "Develop a Python class `ESP8266WiFi` that represents an ESP8266 WiFi module over WiFi and provides basic WiFi functionalities, including establishing connection to a WiFi network, sending and receiving data, and performing other basic WiFi activities. The class should support both connecting to and disconnecting from a WiFi network. The class should also handle the connection issues and adapt to different connection states.\n\nThe class should have two main methods, both of which are **required in the class interface**:\n- `connect(self, SSID: str, password: str)`: to establish a connection to the specified WiFi network.\n- `disconnect(self)`: to disconnect from the current network.\n\nIn addition, the class should include `is_connected` and `get_ip_address` methods to verify the connection and the IP address of the module.\n\nIn order to run the class successfully, you should consider the following requirements:\n- Use the ESP8266 WiFi module without any modification to implement the class. You should be able to connect to and disconnect from WiFi networks using the built-in WiFi module on the module.\n- The `connect` method should return the connection status. It should return `True` if the connection is established successfully, and `False` otherwise.\n- The `get_ip_address` method should return the IP address of the module as a string.\n- The WiFi network name (SSID) must be valid as per the requirements of the module.\n- The password must be valid as per the requirements of the module."}, {"instruction": "Design an ESP8266 project that initializes the ESP8266 WiFi module, connects to the WiFi network, and then displays the current time from the MDNS service. Write the code in an `esp8266_time.py` file with a single `main` function."}, {"instruction": "Write a Python class `ESP8266WiFi` that implements the `set_up` function for connecting to a Wi-Fi network. The function should return a boolean indicating the success or failure of the connection. Use the `Machine` class to create the ESP8266 device. Use the `network` module to set up the Wi-Fi connection."}, {"instruction": "Design a Python class to interface with the ESP8266 WiFi module. The class should support setting up the module as a station and connecting to a WiFi network. Additionally, it should facilitate the use of the MDNS service to provide a functioning DNS server within the network. The class should have a few configurable settings, including the WiFi network credentials.\n\nThe class should be able to be compiled for a specific clock frequency (80 MHz or 160 MHz) based on a conditional compilation flag."}, {"instruction": "Design a class `ESP8266` that implements the ESP8266 WiFi module. The class should have the following public methods:\n- `setup()`: sets up the ESP8266 WiFi module with the following specifications: SSID, password, IP address, subnet mask, and gateway IP\n- `start_mdns(name)`: uses the MDNS service to register the name `name` with the ESP8266 module\n- `reconnect()`: reestablishes the connection to the WiFi access point\n- `connect(ssid, password)`: connects to the WiFi access point with specified SSID and password\n- `loop()`: waits for the module to establish the connection to the access point. If the connection is established, it should return `True` and if not, it should return `False`. The WiFi module should be in station mode, and it should connect to the first WiFi access point it finds in its scan results. The method should run indefinitely until the connection is established.\n- `send_to_mdns(message)`: sends a message `message` to the MDNS service. The message should be formatted as \"ESP8266:message\", where `message` is the content of the message.\n\nThe class should handle erroneous inputs gracefully, such as if `name` is an empty string, and the class should be able to run without any user interaction."}, {"instruction": "Develop a Python class that manages the ESP8266 WiFi module. The class should support the following operations:\n- Initialize the module.\n- Connect to a WiFi network using the given SSID and password.\n- Disconnect from the currently connected network.\n- Set the clock frequency to either 80 or 160 MHz.\n- Set up a MDNS service that advertises the module's local IP address."}, {"instruction": "Design a Python class `ESP8266` that is an interface for controlling the ESP8266 WiFi module through the UART interface. The class should support the basic set of operations commonly used with the WiFi module: `ESP8266.connect`, `ESP8266.disconnect`, `ESP8266.set_password`, `ESP8266.get_mac_address`, `ESP8266.get_ip_address`, `ESP8266.set_hostname`, `ESP8266.get_hostname`, `ESP8266.start_ap`, `ESP8266.stop_ap`, and `ESP8266.soft_reset`. The class should also offer methods for handling WiFi connection status and error handling. For example, `ESP8266.connect` should return `True` if the connection is established successfully and `False` if the connection fails.\n\nYou write the class implementation using the languages with the most chances of encountering the ESP8266. You may use e.g. `def` for function implementation, `class` for class definition, or `type` for static member definition.\n\nAdditionally, you write the class implementation to use the MDNS service for registering the hostname with the local network. For detailed information about the MDNS service, you may refer to [this article](https://techtutorialsx.com/2016/07/20/esp8266-esp32-mdns-multicast-dns/)."}, {"instruction": "Design a Python class `ESP8266WiFi` that can handle the setup and configuration of the ESP8266 WiFi module. It should support both the setup of static IP addresses and the use of the built-in DNS server (using the mDNS service). The class should support different clock frequencies (32MHz or 80MHz) and either serial or SPI interfaces for communicating with the module."}, {"instruction": "Design a Python class `Clock` that implements a digital clock with a built-in LED display using the ESP8266 and MDNS service. The display should be a 4x7 dot matrix module that can be read by external software. The LEDs should show a 24-hour clock with a leading zero on the left and display AM/PM when needed. The class should also support automatic time synchronization using NTP."}, {"instruction": "Design a Python class `WifiClock` that implements a clock functionality on ESP8266 devices with integrated WiFi module. The class should maintain basic information about the clock, including the current time and a WiFi network connection. The class should support retrieving the current time from a time server, updating the screen display, and sending data to the cloud.\n\nThe class should handle asynchronous operations like connecting to WiFi networks and retrieving time from a time server. Additionally, the class should support conditional compilation to select the clock frequency based on the available clock resources. The class should handle the setup and configuration of the ESP8266 WiFi module, including setting up the MDNS service, setting up the WiFi credentials, and configuring the network settings."}, {"instruction": "Develop a Python class `WiFiClock` that mimics a clock that displays the current time using the ESP8266 WiFi module. The class should support WiFi setup and MDNS service registration. The class should implement the `__str__` method to return a formatted string showing the current time, and the `__main__` method to run the clock."}, {"instruction": "Design a Python class `ESP8266Clock` that can handle the clock functions of the Espressif ESP8266 microcontroller. The class should support the following functions:\n- `ESP8266Clock.set_time(self, seconds_since_epoch: int)`: Set the current time to the given `seconds_since_epoch` value.\n- `ESP8266Clock.get_time(self, seconds_since_epoch: int)`: Return the current time in seconds since the epoch.\n- `ESP8266Clock.set_timezone(self, timezone: int)`: Set the current timezone in minutes.\n- `ESP8266Clock.get_timezone(self)`: Return the current timezone in minutes.\n- `ESP8266Clock.set_clock_frequency(self, mhz: int)`: Set the clock frequency of the microcontroller.\n\nIn the `ESP8266Clock` class, implement two methods to handle the time. The first method `get_time` should return the current time in seconds since the epoch. The second method `set_time` should set the current time to the given `seconds_since_epoch` value.\n\nIn the `ESP8266Clock` class, implement two methods to handle the timezone. The first method `get_timezone` should return the current timezone in minutes. The second method `set_timezone` should set the current timezone in minutes.\n\nIn the `ESP8266Clock` class, implement three methods to handle the frequency. The first method `get_clock_frequency` should return the current clock frequency of the microcontroller. The second and third methods `set_clock_frequency` should set the clock frequency of the microcontroller."}, {"instruction": "Design a Python program that sets up an ESP8266 WiFi module to respond to an HTTP GET request on the ESP8266's \"hostname\".\n\nThe Python program should first read a configuration file (with the file name \"config.json\") to obtain the following information:\n- `wifi_ssid`: the SSID of the WiFi network to connect to\n- `wifi_password`: the password of the WiFi network to connect to\n- `hostname`: the name of the ESP8266 device, in the form of \"esp8266-<hostname>\".\n\nThen, the program should register the ESP8266 device as an MDNS responder, and publish the hostname on the network. When an HTTP GET request is received by ESP8266, the program should respond with the current time that the ESP8266 has.\n\nThe program should operate on the ESP8266's default clock frequency, without the need of conditional compilation. The program should be portable and adhere to the latest available specifications of the ESP8266."}, {"instruction": "Develop a Python class `LightBulb` that represents a light bulb with a digital switch. The class must support switching on/off and dimming the light bulb.\n\nThe `LightBulb` class takes two arguments: `pin` and `pwm_pin`. `pin` indicates the GPIO pin number that controls the switch. `pwm_pin` indicates the GPIO pin number that controls the brightness of the light bulb. For example, `LightBulb(4, 5)` creates the light bulb with switch on GPIO4 and bulb on GPIO5.\n\nThe class must support setting the brightness of the light bulb between 0 and 100%.\n\nThe class must support setting the mode of the light bulb to on/off. The on/off mode will be used if the `pwm_pin` is not set.\n\nThe class must support switching the light bulb on and off.\n\nThe class must support dimming the light bulb from 0 to 100% (inclusive).\n\nThe class must support setting a different PWM frequency with the `set_pwm_freq` method.\n\nThe class should support the following method: `set_pwm_freq(freq: int)`.\n\nThe method should set the frequency of the PWM signal generated by `pwm_pin` to `freq` Hertz. Use the `T1_PRESCALER` macro to select the clock frequency.\n\nThe class must maintain an internal state that is used to store the current brightness (0-100%) and current mode (on/off).\n\nThe class must support the following method: `get_brightness(self) -> int`.\n\nThe method should return the current brightness (0-100%).\n\nThe class must support the following method: `get_mode(self) -> bool`.\n\nThe method should return the current mode (on/off).\n\nThe class must support the following method: `is_on(self) -> bool`.\n\nThe method should return `True` if the light bulb is switched on, `False` otherwise.\n\nThe class must support the following method: `switch_on(self)`.\n\nThe method should turn the light bulb on. It should set the mode to on/off.\n\nThe class must support the following method: `switch_off(self)`.\n\nThe method should turn the light bulb off. It should set the mode to on/off.\n\nThe class must support the following method: `switch_toggle(self)`.\n\nThe method should toggle the light bulb on/off (from on to off or from off to on). It should set the mode to on/off.\n\nThe class must support the following method: `dim(self, percent: int)`.\n\nThe method should set the brightness to the specified `percent` (0-100%). It should set the mode to dimming.\n\nThe class must support the following method: `set_brightness(self, percent: int)`.\n\nThe method should set the brightness to the specified `percent` (0-100%). It should set the mode to dimming.\n\nThe class must handle the case where the parameters are outside the valid range (0-100%).\n\nThe class must support the following method: `get_pwm_freq(self) -> int`.\n\nThe method should return the current PWM frequency (in Hertz).\n\nThe class must support the following method: `set_pwm_freq(self, freq: int)`.\n\nThe method should set the frequency of the PWM signal generated by `pwm_pin` to `freq` Hertz. Use the `T1_PRESCALER` macro to select the clock frequency.\n\nThe class must support the following method: `set_pwm_duty(self, duty: int)`.\n\nThe method should set the duty cycle of the PWM signal generated by `pwm_pin` to `duty` percent.\n\nThe class must support the following method: `get_pwm_duty(self) -> int`.\n\nThe method should return the current duty cycle (percent) of the PWM signal generated by `pwm_pin`."}, {"instruction": "Develop a Python class `ESP8266WiFi` that can be used to configure and control an ESP8266 WiFi module. The class should support the following operations:\n\n- Setting up the module for WiFi operations by specifying the WiFi access credentials\n- Connecting to an access point and setting up MDNS service for easy identification on the local network\n- Sending messages to the serial port of the module\n\nThe class should handle erroneous inputs gracefully, such as incorrect input formats or non-existing access points. Additionally, implement the `__str__` method to return a formatted string showing the current state of the module and its parameters."}, {"instruction": "Design a Python class `ESP8266WiFi` to create and configure a WiFi connection from your Python program on the ESP8266 module. The class should support multiple WiFi connections at the same time, and each connection should be managed automatically with the `auto_connect()` method. Additionally, the class should handle the MDNS service for easy WiFi connectivity.\n\nThe class should define the following methods:\n- `def __init__(self):`\n- `def set_ap_mode(self, ssid: str, password: str):`\n- `def set_station_mode(self, ssid: str, password: str):`\n- `def get_mac(self):`\n- `def auto_connect(self):`\n- `def create_ap_on_boot(self):`\n\nThe class should also support conditional compilation to select the clock frequency of the ESP8266 module. Note that the clock frequency must be set explicitly before compiling the program, e.g., `idf.py build -Dfreq=80`."}, {"instruction": "Design a Python class `ESP8266` that offers basic tools to interact with ESP8266 WiFi modules. The class should support setting up the module with a WiFi access point, connecting to the access point, and automatically discovering the MDNS service of a specific device. The class should support setting the clock speed of the ESP module, which is either 160MHz or 80MHz depending on the compilation flags.\n\nThere are two main steps to set up the WiFi module:\n1. Setting up the WiFi access point. The class should support setting up the access point by either providing the SSID and password, or by asking the user to enter the SSID and password manually. The class should handle errors gracefully.\n2. Connecting to the access point. The class should be able to check if the module is connected to the access point (this is useful for debugging).\n\nThe class should handle errors gracefully.\n\nThe class should support automatic discovery of the MDNS service of a specific device by either providing the host name of the device, or by asking the user to enter the host name manually. The class should handle errors gracefully.\n\nThe class should support setting the clock speed of the ESP module, which is either 160MHz or 80MHz depending on the compilation flags. The class should support setting the clock speed of the ESP module using the `rtc_clk_freq_set` function. The class should handle errors gracefully.\n\nDefine the class `ESP8266` as a subclass of `object` and use the `__init__` method to compile the class."}, {"instruction": "Design a Python class to connect to a WiFi access point, set the MDNS hostname, and run a MDNS service on the ESP8266. Using conditional compilation, the class can be used to either drive the ESP8266\u2019s internal clock at 16 MHz or the default 80 MHz."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: data structure changes as a result of loops (such as sorting), dynamic data structures, integer overflow\n\n### Task", "fingerprint": null, "content": {"code": "void YY(int i) // |\n{\n    punto da = strade[i];\n    punto a = strade[i+1];\n    \n    bool swapped = false;\n    // sempre dal basso verso l'alto\n    if ( a.y < da.y) swap(da, a),swapped = true;;\n    \n    punto *prima = lower_bound(fx, fx+F, da, cmpX);\n    punto *ultima = upper_bound(fx, fx+F, a, cmpX);\n    ultima--;\n    \n    if (prima == fx+F || prima->x != da.x|| ultima < prima)\n    { l_senza += pointDist(strade[i], strade[i+1]); return; }\n    \n    int ind_prima = prima - fx;\n    int ind_ultima = ultima - fx;\n    \n    error(ind_prima);\n    error(ind_ultima);\n    \n    int RMQY = rmq_x(ind_prima,ind_ultima);\n    error(RMQY);\n    smax(max_dist, RMQY);\n    if ( !swapped){\n        smax(max_dist, l_senza+ pointDist(strade[i], (*prima)));\n        l_senza = pointDist((*ultima), a);}\n    else\n    {\n        smax(max_dist, l_senza+ pointDist(strade[i], (*ultima)));\n        l_senza = pointDist((*prima), da);\n    }\n    error(max_dist);\n}", "docstring": "// sempre da sx a dx", "function_name": "XX"}, "id": 50, "seed": "void YY(int i) // |\n{\n    punto da = strade[i];\n    punto a = strade[i+1];\n    \n    bool swapped = false;\n    // sempre dal basso verso l'alto\n    if ( a.y < da.y) swap(da, a),swapped = true;;\n    \n    punto *prima = lower_bound(fx, fx+F, da, cmpX);\n    punto *ultima = upper_bound(fx, fx+F, a, cmpX);\n    ultima--;\n    \n    if (prima == fx+F || prima->x != da.x|| ultima < prima)\n    { l_senza += pointDist(strade[i], strade[i+1]); return; }\n    \n    int ind_prima = prima - fx;\n    int ind_ultima = ultima - fx;\n    \n    error(ind_prima);\n    error(ind_ultima);\n    \n    int RMQY = rmq_x(ind_prima,ind_ultima);\n    error(RMQY);\n    smax(max_dist, RMQY);\n    if ( !swapped){\n        smax(max_dist, l_senza+ pointDist(strade[i], (*prima)));\n        l_senza = pointDist((*ultima), a);}\n    else\n    {\n        smax(max_dist, l_senza+ pointDist(strade[i], (*ultima)));\n        l_senza = pointDist((*prima), da);\n    }\n    error(max_dist);\n}", "__index_level_0__": 16, "concepts": ["data structure changes as a result of loops (such as sorting)", "dynamic data structures", "integer overflow"], "parsing_result": [{"instruction": "Create a Python function that sorts an arbitrary array of integers in ascending order. The function should take a list of integers as an input and return the resulting sorted list. Do not use the built-in `sorted()` method to sort the array.\n\nThe function should satisfy the following assertions:\n\n```python\nassert sort_array([1, 2, 3]) == [1, 2, 3]\nassert sort_array([3, 2, 1]) == [1, 2, 3]\nassert sort_array([1, 1, 2, 3, 3]) == [1, 1, 2, 3, 3]\nassert sort_array([3, 1, 2, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n```"}, {"instruction": "Implement a Python function that periodically reads a numeric value from a file, keeps it as long as the file is open, and returns a list of all values read from the file. The function should ensure that the following assertions are met:\n\n- values are read in an efficient way without using an external data structure\n- no operations should be performed on the file outside the function\n- the file should not be available for reading after the function returns\n- if the file is not available, the function should raise an exception\n\nFor example:\n```python\nassert read_file('test_data.txt') == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert read_file('empty_file.txt') == []\ntry:\n    read_file('nonexistent_file.txt')\nexcept FileNotFoundError as e:\n    pass\n```"}, {"instruction": "Implement a Python function `generate_prime_factors(n)` that returns a list of prime factors of a given integer `n`. The function should handle cases where `n` is 0 or 1 and raise a ValueError if `n` is not a positive integer."}, {"instruction": "Create a Python program that uses a list of integers as input and returns a new list containing the sorted numbers, with the largest number appearing first. The sorting is performed in-place, meaning that the original list should not change. If there are multiple elements with the same value, they should be sorted in ascending order."}, {"instruction": "Create a Python function that takes a list of numbers and returns a list of lists, where the inner lists contain all the odd numbers starting from the beginning of the original list and having a length of 1, 3, 5, 7, 9, and so on.\n\nFor example, given a list of `[3, 4, 5, 1, 2, 6, 7, 8, 9, 10]`, the function should return `[[3, 5, 7, 9], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]`."}, {"instruction": "Design a Python function `get_most_active_users(log)` to find the most active users given a log of user actions. The log should be a list of tuples of the form `(timestamp, user, action)`, where `timestamp` is the UNIX timestamp of the action, `user` is the username of the user who performed the action, and `action` is a string indicating the action that the user took. The function should return a list of the top `N` active users in the log where `N` is an input argument of the function.\n\nFor example, given the following log:\n\n```python\nlog = [\n    (1598692354, 'user1', 'viewed'),\n    (1598692354, 'user2', 'viewed'),\n    (1598692354, 'user2', 'viewed'),\n    (1598692354, 'user2', 'viewed'),\n    (1598692354, 'user2', 'viewed'),\n    (1598692354, 'user3', 'viewed'),\n    (1598692354, 'user3', 'viewed'),\n    (1598692354, 'user3', 'viewed'),\n    (1598692354, 'user4', 'viewed'),\n    (1598692354, 'user4', 'viewed'),\n    (1598692354, 'user5', 'viewed'),\n    (1598692354, 'user5', 'viewed'),\n    (1598692354, 'user5', 'viewed'),\n    (1598692354, 'user5', 'viewed'),\n    (1598692354, 'user2', 'viewed'),\n    (1598692354, 'user2', 'viewed'),\n    (1598692354, 'user2', 'viewed'),\n    (1598692354, 'user2', 'viewed'),\n    (1598692354, 'user2', 'viewed'),\n]\n```\n\nthe function should return `['user5', 'user2', 'user3', 'user4', 'user1']` as the top 5 most active users in the log."}, {"instruction": "Implement a Python function that computes the Longest Common Substring (LCS) of two strings, and returns the length of this string. The function should utilize a dynamic programming approach to improve time and memory complexity.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert lcs_length('abc', 'def') == 0\nassert lcs_length('abc', 'abc') == 3\nassert lcs_length('abc', 'ab') == 2\nassert lcs_length('abc', 'abcd') == 3\n```"}, {"instruction": "Write a Python function that takes a list of integers from user input and outputs the majority element (if present) and its count. If there is no majority element, the function should output `None`.\n\nThe majority element is an element that appears more than `n / 2` times in a list of elements of length `n`, where `n` is the number of elements in the list. In the case of a tie, the function should return the element that appears first in the list.\n\nThe function should satisfy the following assertions:\n\n```python\nassert majority([1, 2, 1, 2, 2, 1]) == (1, 3)\nassert majority([1, 2, 2, 1, 2, 2, 1]) == (2, 4)\nassert majority([2, 3, 4, 1, 2, 2]) is None\nassert majority([1, 2, 3]) is None\n```"}, {"instruction": "Create a Python function that sorts a list of integers based on the highest number of unique prime factors it has. For example, the list `[2, 3, 4]` should be sorted as `[3, 2, 4]`, since it has 2 unique prime factors `[2, 3]`, whereas `[4, 5, 6]` has 3 unique prime factors `[2, 3, 5]`, which is higher. Use a dynamic data structure (list, linked list, tree, etc.) to store and update the number of unique prime factors in a linear time complexity."}, {"instruction": "Implement a Python function to sort an array of integers by the number of leading zeros. Consider each number as a string of its binary representation. For example, given an array `[1, 2, 0, 0, 0, 3, 0, 4, 0, 5]` with length 10, the function should return `[0, 0, 0, 0, 0, 1, 2, 3, 4, 5]` without changing the order of the other elements."}, {"instruction": "Implement a Python function that takes a list of integers as input and returns a list of all possible subsets of the input list."}, {"instruction": "Implement a Python function `count_words(text)` that takes a string `text` and returns a sorted list of words in `text` with their frequencies. The list should be sorted by word frequencies in descending order, where words with equal frequencies should be sorted alphabetically.\n\nThe function should handle special cases such as URLs, numbers, and punctuations. The function should also ignore capitalization differences."}, {"instruction": "Create a Python function that randomly generates a list of integers between 0 and 2000 and outputs the range of integers that occur in the list. Your function should use a while loop along with an auxiliary data structure that stores the counts of each integer in the list.\n\nThe function should raise a ValueError if the sum of counts of all integers exceeds 2^32 + 1."}, {"instruction": "Implement a Python function that finds the connected components in a given undirected graph represented as an adjacency list.\n\nFor example, given the following input graph:\n\n```\n0 -> 1\n1 -> 0, 2\n2 -> 1, 3\n3 -> 2\n```\n\nThe function should return:\n\n```\n[0, 2]\n[1, 3]\n```\n\nIn this case, the vertices 0 and 2 are connected to each other but not to vertices 1 and 3.\n\nRegardless of the input graph, the function should handle the following edge cases:\n\n- empty graphs,\n- self-loops,\n- multiple edges between vertices,\n- vertices with non-positive indices, and\n- directed graphs."}, {"instruction": "Create a Python function that reverses the order of items in a list. The function should use at least one of four different data structures to store and manipulate the items.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert reverse_order([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert reverse_order(['a', 'b', 'c', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a']\nassert reverse_order([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1]\nassert reverse_order(['a', 'b', 'c', 'd', 'e', 'f']) == ['f', 'e', 'd', 'c', 'b', 'a']\n```"}, {"instruction": "Write a Python function that sorts a list of integers, using merge sort. The function should return a list of the sorted integers.\n\nThe function should satisfy the following assertions:\n\n```python\nassert merge_sort([1, 3, 5, 2, 4]) == [1, 2, 3, 4, 5]\nassert merge_sort([]) == []\n```"}, {"instruction": "Write a Python function that accepts a list of integers and returns their averages in groups of a given size. If the list contains less than the required size, return an empty list.\n\nFor example, given the following list `lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`, the function should return the following averages: `[1.5, 4.5, 7.5, 10.5]`."}, {"instruction": "Create a Python function that takes a list of integers in the range [0, 10) and rearranges them into groups of contiguous integers in the range [0, 10) and returns a list of these groups. For example, given the list [1, 3, 5, 7, 8, 9, 2, 6], the function should return [[1], [2, 6], [3, 5, 7, 8, 9]]."}, {"instruction": "Create a Python function that determines if a given positive integer can be expressed as a sum of two or more consecutive positive integers (i.e., the series of integers starting from 1 and proceeding sequentially). If the input integer is a prime number, the function should return False.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert can_be_sum_of_consecutive_pos_integers(1) == False\nassert can_be_sum_of_consecutive_pos_integers(2) == True\nassert can_be_sum_of_consecutive_pos_integers(3) == False\nassert can_be_sum_of_consecutive_pos_integers(4) == True\nassert can_be_sum_of_consecutive_pos_integers(5) == True\nassert can_be_sum_of_consecutive_pos_integers(6) == True\nassert can_be_sum_of_consecutive_pos_integers(7) == True\nassert can_be_sum_of_consecutive_pos_integers(8) == True\nassert can_be_sum_of_consecutive_pos_integers(9) == False\nassert can_be_sum_of_consecutive_pos_integers(10) == False\n```"}, {"instruction": "Create a Python function that prints the longest increasing subsequence of a given list of integers. The subsequence should be in the form of a list, where each element is no smaller than its predecessor. If there is no increasing subsequence, the function should print an empty list. The function should also correctly handle infinite and negative integers.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert find_longest_increasing_subsequence([1, 7, 3, 2, 5, 8, 4, 10, 9]) == [1, 2, 3, 4, 5, 8, 9]\nassert find_longest_increasing_subsequence([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert find_longest_increasing_subsequence([5, 4, 3, 2, 1]) == []\nassert find_longest_increasing_subsequence([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert find_longest_increasing_subsequence([]) == []\n```"}, {"instruction": "Implement a Python function that accepts a list of integers `L` and a number `k` and returns the number of distinct sub-lists of size `k` in `L` that have the maximum sum.\n\nFor example, given a list `[1, 2, 3, 4, 5, 6]` and a number `k=2`, the function should return `5`, since there are five sub-lists of size `2` in `L` that have the maximum sum: `[1, 2]`, `[2, 3]`, `[3, 4]`, `[4, 5]`, and `[5, 6]`"}, {"instruction": "Implement a Python program that sorts an array of integers using the `merge_sort` algorithm. Use a list comprehension to filter out and count the number of elements that were swapped during the sort. Ensure that the program can handle huge-scale arrays with large integers."}, {"instruction": "Create a Python function that computes the maximum sum of a contiguous subsequence of a list of numbers. The function should satisfy the following assertions:\n\n```python\nassert max_sum([1, 2, 3, 4]) == 10\nassert max_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\nassert max_sum([4, 3, -1, 5, -6, 1]) == 7\n```"}, {"instruction": "Implement a Python function that takes a list of numbers from user input with duplicates and removes all duplicates while retaining the order of the original elements. The function should return a new list without changing the original list. Use a dictionary to store the counts of each unique element in the input list.\n\nThe function should satisfy the following assertions:\n\n```python\nassert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert remove_duplicates([5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5]\nassert remove_duplicates([5, 5, 5, 5, 5, 5, 5, 5]) == [5]\n# Note that the order of the elements in the output list may vary, as it is not guaranteed by the function.\n```"}, {"instruction": "Create a Python function that finds the largest possible sum of consecutive elements in a list of integers. Do not use any sorting or other data structure sorting functions.\n\nThe function should raise an OverflowError if the input list contains integers that cannot be represented as a 32-bit signed integer.\n\nFor example, given the input list [-2, -1, 5, 6, 4], the function should return 11 (5 + 6)."}, {"instruction": "Create a Python function that implements a modified version of the Sieve of Eratosthenes algorithm. The function should take a positive integer `n` as a parameter and return a list of all primes from 2 to `n` (inclusive). The function should use a dynamic data structure to keep track of the current set of candidate primes. It should also handle cases where `n` is less than 2, in which case the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert sieve(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\ntry:\n    sieve(10)\nexcept ValueError as e:\n    pass\n```"}, {"instruction": "Create a Python function that takes a list of integers and returns the maximum difference between two elements such that the second element is strictly greater than the first. If the input list is empty or only contains one element, the function should return `None`. If the maximum difference between two elements is zero, the function should return 0. The function should not modify the input list."}, {"instruction": "Implement a Python function that converts a list of integers to a list of integers representing the decimal equivalent of each binary string in the list. The function should handle invalid binary strings and return an empty list if there are no valid binary strings in the input.\n\nFor example:\n\n```python\nassert to_decimal_list([\"0000\", \"0001\", \"0010\", \"0011\", \"0100\", \"0101\", \"0110\", \"0111\"]) == [0, 1, 2, 3, 4, 5, 6, 7]\nassert to_decimal_list([\"1\", \"0\", \"1\", \"0\", \"1\"]) == [1, 0, 1, 0, 1]\nassert to_decimal_list([\"0000\", \"0001\", \"0001\", \"1000\", \"1101\"]) == []\n```"}, {"instruction": "Implement a Python function that takes a string and returns the index of the first occurrence of the first repeating character in the string. If the string has no repeating characters, the function should return -1. The function should also handle cases where the input string is empty or None.\n\nFor example, the first repeating character in the following strings is 'd' at index 0:\n\n```python\nassert first_repeating_character('abc') == 0\nassert first_repeating_character('abcdef') == -1\nassert first_repeating_character('') == -1\n```"}, {"instruction": "Implement a Python function `simulate(data, rounds)` that simulates the game of slots that is played by popular children's games such as \"Wheel of Fortune\" and \"Big-Wheel Roulette\".\n\nThe function takes two input arguments: `data` and `rounds`. `data` is a Python list of integers that represents the symbols on the wheel, and `rounds` is the number of rounds of the game to be played.\n\nThe function should simulate the game of slots by selecting a random symbol from `data` for each round and printing it:\n\n- If the selected symbol is 1, the player wins the round and earns one point.\n- If the selected symbol is 0, the player loses the round and earns no points.\n- If the selected symbol is -1, the player loses all accumulated points from the previous rounds and earns no points.\n\nThe function should print the number of points accumulated by the player after each round.\n\nThe function should return the final accumulated points after the game is complete.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert simulate([1, 1, 1, 1, 1], 2) == 5\nassert simulate([1, 1, 1, 1, 1, 0], 4) == 1\nassert simulate([1, 1, 0, 0, 0], 3) == -2\nassert simulate([0, 0, 0], 5) == 0\n```"}, {"instruction": "Implement a Python function that computes the sum of absolute differences between adjacent elements in a list, where each absolute difference is computed as the absolute value of the difference between the two elements.\n\nFor example, if the input list is `[1, 2, 3, 4, 5]`, the function should return the following differences:\n\n```\n1 - 2 = |-1| = 1\n2 - 3 = |-1| = 1\n3 - 4 = |-1| = 1\n4 - 5 = |-1| = 1\n```\n\nThe total sum of these differences is `1 + 1 + 1 + 1 = 4`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: conditional logic, iteration, string concatenation, integer to string conversion, string to integer conversion, string sort, memoization\n\n### Task", "fingerprint": null, "content": {"code": "SumsOfAllDigit sumAlldigit(string strLimitNum,map<string,SumsOfAllDigit> &memoMap)\n{\t\n\t//Memoization \ud65c\uc6a9\n\tmap<string, SumsOfAllDigit>::iterator iter =memoMap.find(strLimitNum);\n\tif (iter != memoMap.end())\n\t{\t\t\n\t\treturn iter->second;\n\t}\n\tSumsOfAllDigit result;\n\t//\ud55c\uc790\ub9bf\uc218\uc77c \uacbd\uc6b0\n\tif (strLimitNum.length() == 1)\n\t{\n\t\t//int num = strLimitNum.at(0)-'0';\n\t\tint num = atoi(strLimitNum.c_str());\n\t\tfor (int i = 0; i <= num; i++)\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += 1;\n\t\t}\n\t\treturn result;\n\t}\n\t//---------------\uc5ec\uae30\uae4c\uc9c0 \uae30\uc800\n\tchar tempBuf[11];\n\n\t//\"\uccab\uc790\ub9bf\uc218\ub9cc\uc788\uace0 \ub098\uba38\uc9c0 0\uc758 \ud569\uacc4\" + \"\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ubd80\ud130 \ub9cc\ub4e0 \uc22b\uc790\uc758 \ud569\uacc4\"\n\t//\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ud569\uacc4\uad6c\ud558\uae30\n\tstring subDigits= strLimitNum.substr(1, strLimitNum.length() - 1);\n\tint subDigitsNum =atoi(subDigits.c_str());//\ub9e8\uc55e\uc790\ub9ac\ub97c \uc81c\uc678\ud55c \uc22b\uc790\n\tint firstDigitNum = strLimitNum.at(0) - '0';//\ub9e8\uc55e\uc790\ub9ac \uc22b\uc790\n\tif (0 == subDigitsNum)//\ub9e8 \uc55e\uc790\ub9ac \ube7c\uace0 \ub2e4 0\uc77c \uacbd\uc6b0\n\t{\n\t\tstring digitsOfNines;//\ud55c \uc790\ub9bf\uc218\uac00 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsOfNines.push_back('9');\n\t\tSumsOfAllDigit sumsOfNumberWithStartingOne;//\ud55c \uc790\ub9bf\uc218 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790\uc758 \ud569\uacc4\n\t\tint numberWithStartingOne = atoi(digitsOfNines.c_str()) + 1;\n\t\tsumsOfNumberWithStartingOne = sumAlldigit(digitsOfNines, memoMap);//9...\uc758 \uac83 \uad6c\ud558\uae30\n\t\t//sumsOfNumberWithStartingOne.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t\t\n\t\t//\ub9e8\uc55e\uc790\ub9ac \uc218\ub97c \ub2e4 \ub354\ud558\uae30\n\t\t//for (int i = 1; i < firstDigitNum; i++)//1\ubd80\ud130\uc778 \uc774\uc720\ub294 \ub9e8\uc55e\uc790\ub9ac\ub294 0\uc744 \uc148\ud558\uc9c0 \uc54a\uc544\uc11c\n\t\tfor (int i = 0; i < firstDigitNum; i++)//\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += numberWithStartingOne;//\n\t\t}\n\t\tresult.m_sumsOfDigit[firstDigitNum] += 1;\n\t\tresult = result + (sumsOfNumberWithStartingOne * firstDigitNum) ;//\ub9e8\uc55e\uc790\ub9ac\uc218\ub9cc \ubc14\ub00c\uba74\uc11c \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\tresult.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t}\n\telse\n\t{\n\t\tstring digitsWithAllZeroExceptFirst;//\ub9e8\uc55e\uc790\ub9ac \uc81c\uc678 0\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tdigitsWithAllZeroExceptFirst.push_back(strLimitNum.at(0));\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsWithAllZeroExceptFirst.push_back('0');\n\t\t//subDigits\uc758 \uc55e\uc790\ub9ac\uac00 0\uc77c \uacbd\uc6b0\ub300\ube44\n\t\tsprintf(tempBuf, \"%d\", atoi(subDigits.c_str()));\n\t\t//SumsOfAllDigit subDigitsSum = sumAlldigit(subDigits, memoMap);\n\t\tSumsOfAllDigit subDigitsSum = sumAlldigit(string(tempBuf), memoMap);\n\t\tresult = sumAlldigit(digitsWithAllZeroExceptFirst, memoMap) + subDigitsSum;\n\n\t\tsprintf(tempBuf, \"%d\", subDigitsNum);\n\t\t\n\t\tresult.m_sumsOfDigit[0] += ((subDigitsNum )* ((int)subDigits.length() - (int)string(tempBuf).length()))- (int)string(tempBuf).length();//-1\uc740 0\uc774 \uc911\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\t\n\t\tresult.m_sumsOfDigit[firstDigitNum] += subDigitsNum;//0\uc77c\ub54c\ub294 \ub354\ud574\uc838\uc11c \uc628\ub2e4.\uc148\ud558\uc9c0 \ub9d0\uac83\n\t}\n\n\t\n\t\n\t//Memoization \n\tmemoMap.insert(pair<string, SumsOfAllDigit>(strLimitNum, result));\n\treturn result;\n}", "docstring": "//result.printAllSums();", "function_name": "main"}, "id": 52, "seed": "SumsOfAllDigit sumAlldigit(string strLimitNum,map<string,SumsOfAllDigit> &memoMap)\n{\t\n\t//Memoization \ud65c\uc6a9\n\tmap<string, SumsOfAllDigit>::iterator iter =memoMap.find(strLimitNum);\n\tif (iter != memoMap.end())\n\t{\t\t\n\t\treturn iter->second;\n\t}\n\tSumsOfAllDigit result;\n\t//\ud55c\uc790\ub9bf\uc218\uc77c \uacbd\uc6b0\n\tif (strLimitNum.length() == 1)\n\t{\n\t\t//int num = strLimitNum.at(0)-'0';\n\t\tint num = atoi(strLimitNum.c_str());\n\t\tfor (int i = 0; i <= num; i++)\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += 1;\n\t\t}\n\t\treturn result;\n\t}\n\t//---------------\uc5ec\uae30\uae4c\uc9c0 \uae30\uc800\n\tchar tempBuf[11];\n\n\t//\"\uccab\uc790\ub9bf\uc218\ub9cc\uc788\uace0 \ub098\uba38\uc9c0 0\uc758 \ud569\uacc4\" + \"\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ubd80\ud130 \ub9cc\ub4e0 \uc22b\uc790\uc758 \ud569\uacc4\"\n\t//\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ud569\uacc4\uad6c\ud558\uae30\n\tstring subDigits= strLimitNum.substr(1, strLimitNum.length() - 1);\n\tint subDigitsNum =atoi(subDigits.c_str());//\ub9e8\uc55e\uc790\ub9ac\ub97c \uc81c\uc678\ud55c \uc22b\uc790\n\tint firstDigitNum = strLimitNum.at(0) - '0';//\ub9e8\uc55e\uc790\ub9ac \uc22b\uc790\n\tif (0 == subDigitsNum)//\ub9e8 \uc55e\uc790\ub9ac \ube7c\uace0 \ub2e4 0\uc77c \uacbd\uc6b0\n\t{\n\t\tstring digitsOfNines;//\ud55c \uc790\ub9bf\uc218\uac00 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsOfNines.push_back('9');\n\t\tSumsOfAllDigit sumsOfNumberWithStartingOne;//\ud55c \uc790\ub9bf\uc218 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790\uc758 \ud569\uacc4\n\t\tint numberWithStartingOne = atoi(digitsOfNines.c_str()) + 1;\n\t\tsumsOfNumberWithStartingOne = sumAlldigit(digitsOfNines, memoMap);//9...\uc758 \uac83 \uad6c\ud558\uae30\n\t\t//sumsOfNumberWithStartingOne.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t\t\n\t\t//\ub9e8\uc55e\uc790\ub9ac \uc218\ub97c \ub2e4 \ub354\ud558\uae30\n\t\t//for (int i = 1; i < firstDigitNum; i++)//1\ubd80\ud130\uc778 \uc774\uc720\ub294 \ub9e8\uc55e\uc790\ub9ac\ub294 0\uc744 \uc148\ud558\uc9c0 \uc54a\uc544\uc11c\n\t\tfor (int i = 0; i < firstDigitNum; i++)//\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += numberWithStartingOne;//\n\t\t}\n\t\tresult.m_sumsOfDigit[firstDigitNum] += 1;\n\t\tresult = result + (sumsOfNumberWithStartingOne * firstDigitNum) ;//\ub9e8\uc55e\uc790\ub9ac\uc218\ub9cc \ubc14\ub00c\uba74\uc11c \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\tresult.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t}\n\telse\n\t{\n\t\tstring digitsWithAllZeroExceptFirst;//\ub9e8\uc55e\uc790\ub9ac \uc81c\uc678 0\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tdigitsWithAllZeroExceptFirst.push_back(strLimitNum.at(0));\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsWithAllZeroExceptFirst.push_back('0');\n\t\t//subDigits\uc758 \uc55e\uc790\ub9ac\uac00 0\uc77c \uacbd\uc6b0\ub300\ube44\n\t\tsprintf(tempBuf, \"%d\", atoi(subDigits.c_str()));\n\t\t//SumsOfAllDigit subDigitsSum = sumAlldigit(subDigits, memoMap);\n\t\tSumsOfAllDigit subDigitsSum = sumAlldigit(string(tempBuf), memoMap);\n\t\tresult = sumAlldigit(digitsWithAllZeroExceptFirst, memoMap) + subDigitsSum;\n\n\t\tsprintf(tempBuf, \"%d\", subDigitsNum);\n\t\t\n\t\tresult.m_sumsOfDigit[0] += ((subDigitsNum )* ((int)subDigits.length() - (int)string(tempBuf).length()))- (int)string(tempBuf).length();//-1\uc740 0\uc774 \uc911\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\t\n\t\tresult.m_sumsOfDigit[firstDigitNum] += subDigitsNum;//0\uc77c\ub54c\ub294 \ub354\ud574\uc838\uc11c \uc628\ub2e4.\uc148\ud558\uc9c0 \ub9d0\uac83\n\t}\n\n\t\n\t\n\t//Memoization \n\tmemoMap.insert(pair<string, SumsOfAllDigit>(strLimitNum, result));\n\treturn result;\n}", "__index_level_0__": 17, "concepts": ["conditional logic", "iteration", "string concatenation", "integer to string conversion", "string to integer conversion", "string sort", "memoization"], "parsing_result": [{"instruction": "Implement a Python class with a method `get_largest_number_memoized(n)` that returns the largest numeric string of a given length. Utilize memoization to store already found strings in a list within the class to avoid recalculating strings for multiple method calls. Ensure the method efficiently updates and references this list to find new strings as needed."}, {"instruction": "Implement a Python class with a method `is_palindrome(str)`, which returns `True` for palindromic strings and `False` otherwise. Utilize memoization to store and reference results of previous `is_palindrome` calls to avoid re-checking for same strings."}, {"instruction": "Implement a Python class `StringList` that stores a list of strings. Implement operations like `push()`, `pop()`, `insert()`, `delete()`, `sort()`, and `reverse()`. The `push()`, `pop()`, `insert()`, and `delete()` functions should utilize `__iadd__()`, `__isub__()` for mutating the list, and `__add__()`, `__sub__()`, and `__repr__()` for returning the list in a string. The `sort()` function should utilize the string sort function `__lt__()`. The `reverse()` function should reverse the list in-place by using `__iadd__()` and `__isub__()`. Use memoization to improve performance when sorting multiple times in a row."}, {"instruction": "Implement a Python class with a method `find_permutation_memoized(string)` that returns the lexicographically next permutation of a given string, and raises an `IndexError` when given the last permutation. Implement the method by using memoization to store already found permutations.\n\nThe method should also provide the ability to convert the string to an integer and revert the string to the original order.\n\nFor example, given `'abc'`, the function should return `['abc', 'acb', 'bac', 'bca', 'cab', 'cba']` and `'acb'`."}, {"instruction": "Design a Python class that implements a Tic-Tac-Toe game. The class should have methods to allow a player to mark an unoccupied cell in the game board with a specified symbol, to check if the game is won, and to check if the game is over (i.e., whether the game continues or has been won or lost). Use memoization to implement the logic of checking if any player has won."}, {"instruction": "Implement a Python class with a method `find_longest_unique_substring(string)` that returns the length of the longest unique substring in a string. The substring should be at least 2 characters long.\n\nFor example, given `string = 'abcabcbb'`, the function should return `3` as the longest unique substring is `abc`."}, {"instruction": "Implement a Python class that stores a list of strings and returns a dictionary mapping each string to its corresponding sorted index. Design the class in such a way that the dictionary is updated in constant time with new strings.\n\nFor example, given `[\"cat\", \"dog\", \"bat\", \"cat\"]` and the method calls:\n- `append(\"cat\")` returns `{\"cat\": 0}`\n- `append(\"dog\")` returns `{\"cat\": 0, \"dog\": 1}`\n- `append(\"bat\")` returns `{\"cat\": 0, \"dog\": 1, \"bat\": 2}`"}, {"instruction": "Design a Python class that implements a stack data structure. Utilize Python's built-in methods to avoid defining any methods outside the class. Ensure your implementation supports `push`, `pop`, and `peek` operations."}, {"instruction": "Implement a Python class `DataDictionaries` that stores a dictionary of dictionaries in a tree-like manner. The class should have methods that allow for efficient lookup, insertion, and deletion of dictionaries.\n\nThe class should enable multiple dictionaries to be stored at the same level. For example, if the tree is `root -> level1 -> level2 -> level3`, there should be methods to add, remove, and look up dictionaries at each level.\n\nThe class should also enable efficient insertion of nested dictionaries, and the insertion should be reflected in the tree structure. For example, if the tree is `root -> level1 -> level2 -> level3`, the insertion `root -> level1 -> level2 -> level3 -> level4` should be reflected as `root -> level1 -> level2 -> level3 -> level4`.\n\nIt should be possible to do all these operations in constant time. Utilize memoization to improve performance wherever applicable."}, {"instruction": "Design a Python class that implements a String ADT using a linked list and memoization. The class should contain the methods `append(str)`, `insert(index, str)`, `pop(index)`, and `count(str)`. You can use the built-in `str` methods `find`, `join`, and `split` to support these methods. Additionally, you should implement the methods `sort` and `reverse` with time complexity of O(n)."}, {"instruction": "Design a Python class that implements a calculator that supports addition, subtraction, multiplication, and division. The class should support real numbers and should be capable of efficiently handling large, large numbers. The class should also support memoization to save previously calculated values to avoid redundant calculations."}, {"instruction": "Implement a Python class to sort strings based on numeric values. For instance, given the input `['100', '2', '3', '1', '10']`, the output should be the same list but sorted based on their numeric values. String sorting should be case-insensitive and, for ties, the strings are sorted alphabetically."}, {"instruction": "Implement a Python class `DataSorter` that takes two arguments: `values`, a list of integers, and `key`, a function that computes a key for each value in `values`. The class should have a method `sort()` that utilizes the `key` function to sort the `values` list and returns a sorted list.\n\nDesign the class to utilize memoization to avoid recomputing the `key` function for values already in the list. Additionally, consider preserving sorting order in case of duplicates, ensuring that the function is properly handled with string values."}, {"instruction": "Implement a Python class with a method `find_min_partition(n, k)` that takes a positive integer n and returns a list of k positive integers that add up to n. Utilize memoization to avoid recalculation of the final list. The method should handle cases where k cannot be a valid partition of n.\n\nFor example, given n = 7 and k = 3, the method should return `[1, 1, 5]`. Note that `1+1+5=7` is the only valid partition. The method should also return an empty list `[]` for invalid partitions."}, {"instruction": "Implement a Python class, `ArraySort`, that allows for creating and sorting an array of integers. The array is stored in the class using a list, and the sorting algorithm is defined by a series of different sorting methods. The class should have a `sort(method)` method that takes the name of a sorting method and sorts the array in-place. There should be four sorting methods defined: `bubble`, `selection`, `insertion`, and `merge`."}, {"instruction": "Implement a Python class `Stack` with a method `max_of_all` that returns the maximum value of all elements in the stack without using `max`."}, {"instruction": "Implement a Python class with a method `calculate_fib(n)` that takes a positive integer `n` and calculates the n-th Fibonacci number. Use memoization to avoid redundant calculations for the same Fibonacci number."}, {"instruction": "Implement a Python class that stores a list of 10 random integers in its `__init__` method. The class should also provide methods to access the list in ascending order, in descending order, or in random order. Make sure the class is not externally modifiable. The class should utilize memoization to quickly retrieve the list in the desired order."}, {"instruction": "Design a Python class with a method `find_word_count(self, text)` that takes a text string and returns a list of tuples where each tuple represents a word and its count. The method should ignore case, spaces, and punctuation. Utilize memoization to avoid extra calculations for repeated function calls with similar inputs.\n\nFor example, given `text = \"Hello, world!\"` the method should return `[(Hello, 1), (world, 1)]`."}, {"instruction": "Implement a Python class with a method `count_words(sentence)` that takes a sentence as an input and returns an integer representing the total number of unique words in the sentence. The class should also implement a method `sort_words(sentence)` that takes a sentence as an input and returns, in alphabetical order, a list of all unique words in the sentence. The method should be memoized wherever possible.\n\nFor example, given the following input:\n\n```\nsentence = 'Hello, how are you today? This problem is an easy one.'\n```\n\nThe class should return:\n\n```\nunique_words = ['Hello', 'are', 'easy', 'is', 'how', 'problem', 'today', 'you']\n```"}, {"instruction": "Implement a Python class that takes two integer inputs, `m` and `n`, and generates all possible m-digit and n-digit (m < n) numbers, in ascending order, that contain each digit at least once. \n\nFor example, given `m = 2` and `n = 3`, the class should generate the following 16 numbers:\n\n```\n111, 112, 113, 114, 115, 122, 123, 124, 125, 133, 134, 135, 144, 145, 155, 222\n```\n\nThe method should be able to handle `m` and `n` being of any size, and should be able to check if numbers generated are valid in ascending order."}, {"instruction": "Implement a Python class with a method `convert_to_english` that takes a string representation of a number and returns its corresponding English word. The method should return the word when the number is positive and should raise an exception if the number is negative or is not a valid integer. Utilize a dictionary to store commonly used English words and analytically derive a string conversion rule to convert numbers to English words. Make sure to check for edge cases that will not be covered by the rule, such as consecutive zeroes. Additionally, consider the use of memoization to reduce the runtime of the function."}, {"instruction": "Implement a Python class that computes and stores the Levenshtein distance between two strings. The class should also implement a method `is_anagram(s1, s2)`, which returns `True` if s1 and s2 are anagrams and `False` otherwise. The string comparison should be case-insensitive and Unicode-aware. Utilize memoization to store previously computed Levenshtein distances."}, {"instruction": "Implement a Python class with a method `find_missing(A)` that returns the integer missing from an array, where the array contains the integers from 0 to n in order. The method should be implemented in such a way that it uses a constant amount of memory to output the missing integer."}, {"instruction": "Implement a Python class with a method `get_sum_of_n_numbers(n)` that computes the sum of `n` natural numbers. The method should use memoization to store the previous results of the same calculation. Utilize conditional statements to handle various cases where `n` is either 0 or negative."}, {"instruction": "Implement a Python class `SortedList` that implements a list with a sorted order and allows insertion, deletion, and random access in logarithmic time complexity. The `SortedList` should be implemented as a linked list with a sentinel node at the front of the list."}, {"instruction": "Implement a Python class with a method `find_duplicate` that takes an integer array and returns the first duplicate value. For example, given `array = [1, 1, 2, 3, 4]` the method should return 1.\n\nIn addition to the class, design appropriate assertions to ensure the input is an array of valid integers."}, {"instruction": "Implement a Python class that keeps track of the running mean of a series of numbers. The class should have the following methods:\n- `add_number(number)`: adds a new number to the series and updates the running mean\n- `get_mean()`: returns the current average value based on the running sum and count\n\nImplement the class so that the average can be calculated in an efficient way."}, {"instruction": "Design a Python class that implements a queue using Python lists. The class should have `enqueue`, `dequeue`, and `size` methods. The `enqueue` method should add a string to the end of the list and the `dequeue` method should remove and return the first element of the list. The `size` method should return the length of the list.\n\nUtilize memoization to speed up the `size` method as much as possible."}, {"instruction": "Write a Python class that implements a classic sorting algorithm called bubble sort. The algorithm iterates through the elements in an array and compares each pair of adjacent elements. If the value of the first element is greater than the value of the second element, the elements are swapped; otherwise, the values remain unchanged. This process is repeated for each element of the array until the sorted order is achieved.\n\nFor example, given `[11, 19, 15, 3, 2, 4, 8]` as the input, the class should return the sorted array `[2, 3, 4, 8, 11, 15, 19]`. The class should also support multiple initialization methods for providing the array as an input."}, {"instruction": "Implement a Python class that contains a method `find_all_anagrams(word, text)` that takes two strings and returns all the positions in `text` where the anagrams of `word` begin. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase.\n\nFor example, given 'foo' and 'barfoofoooof', the function should return [3, 6] because those are the only two positions where the anagrams 'foo' appear."}, {"instruction": "Implement a Python class with a method `find_first_repeated_char(string)` that takes a string as an input and returns the first occurrence of a repeated character in the string. If no repeated character exists in the string, return `None`.\n\nIn this implementation, you may use string concatenation, string sort, and memoization."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterators, an iterator interface implementation, exception handling, error handling\n\n### Task", "fingerprint": null, "content": {"code": "void List_1_AddEnumerable_m1553189708_gshared (List_1_t3612285922 * __this, RuntimeObject* ___enumerable0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_AddEnumerable_m1553189708_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tRuntimeObject* V_1 = NULL;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tRuntimeObject* L_0 = ___enumerable0;\n\t\tNullCheck((RuntimeObject*)L_0);\n\t\tRuntimeObject* L_1 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<System.Int32>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 20), (RuntimeObject*)L_0);\n\t\tV_1 = (RuntimeObject*)L_1;\n\t}\n\nIL_0007:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_001a;\n\t\t}\n\nIL_000c:\n\t\t{\n\t\t\tRuntimeObject* L_2 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tint32_t L_3 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<System.Int32>::get_Current() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 21), (RuntimeObject*)L_2);\n\t\t\tV_0 = (int32_t)L_3;\n\t\t\tint32_t L_4 = V_0;\n\t\t\tNullCheck((List_1_t3612285922 *)__this);\n\t\t\t((  void (*) (List_1_t3612285922 *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3612285922 *)__this, (int32_t)L_4, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\tRuntimeObject* L_5 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_5);\n\t\t\tbool L_6 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t3774429009_il2cpp_TypeInfo_var, (RuntimeObject*)L_5);\n\t\t\tif (L_6)\n\t\t\t{\n\t\t\t\tgoto IL_000c;\n\t\t\t}\n\t\t}\n\nIL_0025:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x35, FINALLY_002a);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t2748878030 *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_7 = V_1;\n\t\t\tif (L_7)\n\t\t\t{\n\t\t\t\tgoto IL_002e;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\nIL_002e:\n\t\t{\n\t\t\tRuntimeObject* L_8 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_8);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t4289139908_il2cpp_TypeInfo_var, (RuntimeObject*)L_8);\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x35, IL_0035)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t2748878030 *)\n\t}\n\nIL_0035:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "List_1_System_Collections_IList_set_Item_m37152599_gshared"}, "id": 64, "seed": "void List_1_AddEnumerable_m1553189708_gshared (List_1_t3612285922 * __this, RuntimeObject* ___enumerable0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_AddEnumerable_m1553189708_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tRuntimeObject* V_1 = NULL;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tRuntimeObject* L_0 = ___enumerable0;\n\t\tNullCheck((RuntimeObject*)L_0);\n\t\tRuntimeObject* L_1 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<System.Int32>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 20), (RuntimeObject*)L_0);\n\t\tV_1 = (RuntimeObject*)L_1;\n\t}\n\nIL_0007:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_001a;\n\t\t}\n\nIL_000c:\n\t\t{\n\t\t\tRuntimeObject* L_2 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tint32_t L_3 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<System.Int32>::get_Current() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 21), (RuntimeObject*)L_2);\n\t\t\tV_0 = (int32_t)L_3;\n\t\t\tint32_t L_4 = V_0;\n\t\t\tNullCheck((List_1_t3612285922 *)__this);\n\t\t\t((  void (*) (List_1_t3612285922 *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3612285922 *)__this, (int32_t)L_4, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\tRuntimeObject* L_5 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_5);\n\t\t\tbool L_6 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t3774429009_il2cpp_TypeInfo_var, (RuntimeObject*)L_5);\n\t\t\tif (L_6)\n\t\t\t{\n\t\t\t\tgoto IL_000c;\n\t\t\t}\n\t\t}\n\nIL_0025:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x35, FINALLY_002a);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t2748878030 *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_7 = V_1;\n\t\t\tif (L_7)\n\t\t\t{\n\t\t\t\tgoto IL_002e;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\nIL_002e:\n\t\t{\n\t\t\tRuntimeObject* L_8 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_8);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t4289139908_il2cpp_TypeInfo_var, (RuntimeObject*)L_8);\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x35, IL_0035)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t2748878030 *)\n\t}\n\nIL_0035:\n\t{\n\t\treturn;\n\t}\n}", "__index_level_0__": 18, "concepts": ["iterators", "an iterator interface implementation", "exception handling", "error handling"], "parsing_result": [{"instruction": "Write a Python function that implements a chunk-based iterator that returns elements of the input list chunk by chunk. The function should take three arguments: `data`, a list of elements, `size`, the number of elements in each chunk, and `chunk_num`, the number of chunks the data should be split into. The function should raise an arithmetic exception if `chunk_num` is negative or 0. Otherwise, the function should return an iterator that produces `size` elements for each chunk from `data`."}, {"instruction": "Given a list of numbers, create a Python generator function that yields the \"next\" number in the Fibonacci sequence. The function should continue until the last item in the list is reached. The function should handle error conditions gracefully and return an `StopIteration` exception."}, {"instruction": "After reviewing the Python docs, you have come up with a new idea to implement the `__iter__` and `__next__` methods in your own class, `InfiniteIterator`. The class should implement an infinite iterator that, when iterated, returns an infinite list of values. The list starts with the first value and increments by one every time the iterator is called.\n\nThe class should raise an `StopIteration` exception when the iterator is exhausted, so that its usage in the `for` loop properly terminates."}, {"instruction": "Create a Python function that takes a list of integers and generates an iterator that returns the product of all the integers in the list. The function should also handle the case where the list is empty."}, {"instruction": "For this exercise, you will implement a very basic key-value storage system in Python. The storage is implemented as an object with a `store` method that takes a key and a value as input. The storage also supports retrieving the value associated with a given key. The storage is not thread-safe since it depends on a global variable to keep track of the number of stored elements.\n\nWrite a Python function `kv_storage` that takes a list of key-value pairs as input, and returns a `KeyValueStorage` object. The object should have a method `store(self, key, value)` that stores the key-value pair and a method `retrieve(self, key)` that returns the value associated with the key. The object should handle input validation and raise exceptions appropriately."}, {"instruction": "Create a Python function that takes a text string as input and returns an iterator that produces the characters of the text string one by one. Each character should be yielded as a `str` object. If the input string is empty, the function should raise a `StopIteration` exception."}, {"instruction": "Write a concise Python function that takes a list of integers as input. The function should return a new list consisting of the squared value of each item in the original list. In addition, raise a ValueError if a negative integer is found in the input list."}, {"instruction": "Create a Python function that counts the number of vowels in a string without using any built-in functions like `str.count`. Also, the function should work with Unicode strings. The function should be case-insensitive and handle invalid input gracefully."}, {"instruction": "Write a Python function that takes a list of numbers as the input. The function should return an iterator over the list, where each element is increased by 1. The function should raise an exception if the input is not a list of numbers. Ensure that the list is not modified by the function."}, {"instruction": "Create a Python function `get_max_element_iter` that takes an iterable as an input. The function should return the maximum value of the iterable using the iterator interface. The function should support both list and generator as data sources. If the iterable is empty, an empty list or generator, or if the iterable does not support the iterator interface, the function should raise an error."}, {"instruction": "Develop a Python function `sort_by_length_and_value` that takes an iterable of integers and returns a sorted list of tuples where each tuple contains the integer's length and its value. Here are the expected results for the following inputs:\n- `sort_by_length_and_value([1, 2, 3, 4, 5]) == [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]`\n- `sort_by_length_and_value([1, 2, 3, 4, 5, 6]) == [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]`\n- `sort_by_length_and_value([1, 2, 3, 4, 5, 6, 7]) == [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)]`\n- `sort_by_length_and_value([1, 1, 1, 1, 1, 1]) == [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]`\n- `sort_by_length_and_value([2, 2, 2, 2, 2, 2]) == [(2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2)]`\n- `sort_by_length_and_value([1, 3, 2, 4, 5, 6, 7, 8]) == [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8)]`\n\nThe function should raise an `AssertionError` if the input iterable contains duplicate values."}, {"instruction": "Implement a Python function that accepts a list of strings. The function should return an iterator that provides the elements of the list in a randomized order, without duplicates. Implement the `__next__` method to return each element in the randomized order. The function should raise an `EmptyIteratorError` when the iterator is exhausted."}, {"instruction": "Write a Python function `reverse_word` that takes a word and returns it in reversed order. For example, given the word 'hello', the function should output 'olleh'."}, {"instruction": "Implement a Python function `is_vowel_generator` that can be used to generate all vowels from the Latin alphabet. The function should return an object that can be used in a for loop to iterate over the vowels. The function should be robust to any invalid input."}, {"instruction": "Create a Python function `nearest_prime` that takes a single argument, `n`, which is a positive integer. The function should search for the nearest prime number that is less than the input, `n`, and return it. The function should handle a `ValueError` when the input is invalid (e.g., a negative integer). Additionally, the function should raise `ValueError` if the input is 1 and the input is 2."}, {"instruction": "Write a Python function to reverse the characters in a string. The function should verify the input string is of type `str` and raise a type error if it is not. The function should handle invalid input gracefully, such as when the value is not of type `str` or when it is an empty string. The function should also handle any exceptions that may be raised during the execution of the code."}, {"instruction": "Write a Python function `filter_by_length` that takes two arguments: a list of strings and a positive integer. The function should return an iterator that iterates over the list of strings and yields only those strings that have a length equal to the given integer. The function should handle errors for the following cases:\n- If the list of strings is not provided, the function should raise a `TypeError` exception.\n- If the provided list contains non-string objects, the function should raise a `TypeError` exception.\n- If the integer is not provided or is not a positive integer, the function should raise a `ValueError` exception."}, {"instruction": "Create a Python function to apply a function on each element of a list, and return the result in a new list. The function must accept two arguments: the list to iterate over, and a function to apply to each element. For instance, the function should process the following list: `[1, 2, 3, 4, 5]` and return `[2, 4, 6, 8, 10]`."}, {"instruction": "Develop a Python function `print_list_elements` that takes a `list` as an argument and prints all the elements in the list one by one, until an exception occurs. The function should raise a `ValueError` if the list is empty."}, {"instruction": "Implement Python iterators for class `FizzBuzzIterator` that iterates through an input range to generate a sequence of numbers with the following rules:\n- For each number that is divisible by 3, replace it with the string \"Fizz\"\n- For each number that is divisible by 5, replace it with the string \"Buzz\"\n- For each number that is divisible by 3 and 5, replace it with the string \"FizzBuzz\"\n\nFor example, when the input range is (1, 15), the iterator should output \"1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz\".\n\nNote that the iterator should raise `StopIteration` when it reaches the end of the input range."}, {"instruction": "Write a Python function `decode_webp` that implements the WebP image decoder. This function should take a byte array representing the WebP image data and return a tuple of the image's width and height, in that order. The WebP image data should be decoded to an RGB image with the following code:\n\n```python\nfrom PIL import Image\n\n# decode webp image to RGB image\nrgb_image = Image.frombytes('RGB', image.size, image.data[12:])\n\n# crop decoded RGB image to image with correct size\nrgb_image = rgb_image.crop((image.size[0] - width,\n                            0, image.size[0], image.size[1]))\n```\n\nThe function should handle any data that is not a valid WebP image gracefully."}, {"instruction": "Create a Python function `my_range` that takes three integers `start`, `stop`, and `step` as its arguments. The function should return an iterator that can produce a sequence of numbers in the range from `start` to `stop` (excluding `stop`) at the specified `step`. The function should handle any errors that may occur during the iteration."}, {"instruction": "Write a Python function that implements a simple iterator interface for a list of strings. The function should take a list of strings as input and return an iterator object, which supports the following two methods: `next()` and `hasnext()`. For example, given the list `['one', 'two', 'three']`, the following code could be used to iterate over the list:\n\n```python\niterator = make_iterator(['one', 'two', 'three'])\nwhile(iterator.hasnext()):\n    print(iterator.next())\n```\n\nThe function should handle cases where the list is empty, and should raise `StopIteration` if the iterator goes out of bounds. The function should also handle a variety of input errors including handling incorrect input types."}, {"instruction": "Write an iterator class that iterates through all possible permutations of the given string. The iterator should exclude the string '0' from the results, and it should handle the case of an empty string."}, {"instruction": "Implement a Python function `stack` that is similar to the stack data structure in C++ where push and pop operations are allowed. The function should support the following operations:\n1. `push(val)` - pushes a value onto the stack\n2. `pop()` - pops the most recently-pushed value\n3. `peek()` - returns the most recently-pushed value without modifying the stack\n4. `is_empty()` - return True if the stack is empty, False otherwise\n\nFor example, the function should pass the following assertions:\n```python\nstack = stack()\nprint(stack.peek())\nprint(stack.is_empty())\nstack.push('a')\nstack.push('b')\nstack.push('c')\nprint(stack.peek())\nprint(stack.pop())\nprint(stack.peek())\nprint(stack.is_empty())\nstack.push('d')\nstack.push('e')\nprint(stack.pop())\nprint(stack.is_empty())\nstack.push('f')\nprint(stack.pop())\nprint(stack.is_empty())\nstack.push('g')\nprint(stack.pop())\nprint(stack.is_empty())\nprint(stack.peek())\n```"}, {"instruction": "Create a Python function that groups a list of numbers into an iterator object that returns lists of consecutive numbers. Let's say the input list is `[1,2,3,4,5,6,7]`, and you want to break it into groups of three. In this case, the output should be `[1,2,3], [4,5,6], [7]`. The function should support both positive and negative group sizes. If the list length is not divisible by the group size, last group will be smaller than the others. If group size is negative, the function should throw an error."}, {"instruction": "Design a Python function that generates an infinite sequence of Fibonacci numbers."}, {"instruction": "Create a Python function that reads lines from a file, splits each line into words, and returns a list of words. The function should handle file reading errors, user input errors, and any other exceptions that may occur in the program. The function should also return an empty list when the input file is empty."}, {"instruction": "Write a Python function `to_roman` that takes an integer and returns the corresponding Roman numeral. Number ranges from 1 to 3999.\n\nThe function should raise a `ValueError` if the input is not an integer between 1 and 3999.\n\nA Roman numeral is represented by its corresponding integer value. For example:\n\n| Roman Numeral | Integer Value |\n| ------------- | ------------- |\n| I | 1 |\n| II | 2 |\n| III | 3 |\n| IV | 4 |\n| V | 5 |\n| VI | 6 |\n| VII | 7 |\n| VIII | 8 |\n| IX | 9 |\n| X | 10 |\n| L | 50 |\n| C | 100 |\n| D | 500 |\n| M | 1000 |\n| CM | 900 |\n| XC | 90 |\n| IV | 4 |\n| IX | 9 |\n| IV | 4 |\n| IX | 9 |\n\nWhen the number is smaller than 4000, return the corresponding Roman numeral."}, {"instruction": "Implement a Python function `count_iterator` that takes a list and an iterator as arguments, and returns the total number of elements in the list that are found in the iterator's iteration. The function should support any type of iterator that has an `iterator.__next__` method.\n\nThe function should handle input validation and error handling for situations where the list and the iterator are not iterable or the iterator has no `next` method."}, {"instruction": "Develop a Python function that takes two arguments, a target value and a list of positive integers. The function should return an iterator over the indices of the positive integers in the list that are greater than the target. If the target value is greater than all the integers in the list, the function should return an empty iterator."}, {"instruction": "Re-implement the Python `iter` function to provide an iterator interface for a custom iterable object.\n\nFor example, given the following class definition:\n\n```python\nclass Iterable:\n    def __init__(self, values):\n        self.__values = values\n        self.__index = 0\n\n    def __iter__(self):\n        return Iterator(self.__values, self.__index)\n\nclass Iterator:\n    def __init__(self, values, index):\n        self.__values = values\n        self.__index = index\n\n    def __next__(self):\n        if self.__index < len(self.__values):\n            value = self.__values[self.__index]\n            self.__index += 1\n            return value\n        else:\n            raise StopIteration()\n```\n\nThe following code should produce the result `1, 3, 5`:\n\n```python\nvalues = [1, 2, 3, 4]\niterable = Iterable(values)\niterator = iter(iterable)\n\ntry:\n    print(next(iterator))\n    print(next(iterator))\n    print(next(iterator))\nexcept StopIteration:\n    pass\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: time complexity analysis, Big-O notation, time complexity for different data structures, time complexity for different algorithms, time complexity analysis for recursive algorithm, time complexity analysis for common algorithms, time complexity analysis for common data structures, time complexity analysis for common data structure operations, time complexity analysis for common data structure operations using recursion, time complexity analysis for common data structure operations using stack, time complexity analysis for common data structure operations using queue, time complexity analysis for common data structure operations using linked list, time complexity analysis for common data structure operations using tree, time complexity analysis for common data structure operations using hash table, time complexity analysis for common data structure operations using array, comparison of different time complexities, Big-O notation for recursive algorithms, Big-O notation for common algorithms, Big-O notation for common data structures, Big-O notation for common data structure operations, Big-O notation for common data structure operations using recursion, Big-O notation for common data structure operations using stack, Big-O notation for common data structure operations using queue, Big-O notation for common data structure operations using linked list, Big-O notation for common data structure operations using tree, Big-O notation for common data structure operations using hash table, Big-O notation for common data structure operations using array, comparison of different time complexities\n\n### Task", "fingerprint": null, "content": {"code": "double NeuroSimSubArrayReadLatency(SubArray *subArray) {\t// For 1 weighted sum task on selected columns\n\tif (!param->NeuroSimDynamicPerformance) { return 0; }\t// Skip this function if param->NeuroSimDynamicPerformance is false\n\tif (subArray->cell.memCellType == Type::SRAM) {   // SRAM\n\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->capRow1, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->precharger.CalculateLatency(1e20, subArray->capCol, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->senseAmp.CalculateLatency(subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\tif (subArray->shiftAddEnable) {\n\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\t// There are numReadPulse times of shift-and-add\n\t\t}\n\t\tdouble resPullDown = CalculateOnResistance(subArray->cell.widthSRAMCellNMOS * subArray->tech.featureSize, NMOS, subArray->inputParameter.temperature, subArray->tech);\n\t\tdouble tau = (subArray->resCellAccess + resPullDown) * (subArray->capCellAccess + subArray->capCol) + subArray->resCol * subArray->capCol / 2;\n\t\ttau *= log(subArray->tech.vdd / (subArray->tech.vdd - subArray->cell.minSenseVoltage / 2));   /* one signal raises and the other drops, so cell.minSenseVoltage/2 is enough */\n\t\tdouble gm = CalculateTransconductance(subArray->cell.widthAccessCMOS * subArray->tech.featureSize, NMOS, subArray->tech);\n\t\tdouble beta = 1 / (resPullDown * gm);\n\t\tdouble colRamp = 0;\n\t\tsubArray->colDelay = horowitz(tau, beta, subArray->wlDecoder.rampOutput, &colRamp) * subArray->numRow * subArray->numReadPulse * subArray->activityRowRead;\n\n\t\treturn \tsubArray->wlDecoder.readLatency +\n\t\t\t\tsubArray->precharger.readLatency +\n\t\t\t\tsubArray->colDelay +\n\t\t\t\tsubArray->senseAmp.readLatency +\n\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\tsubArray->shiftAdd.readLatency;\n\n\t} \n    else {\t// eNVM\n\t\tif (subArray->digitalModeNeuro) {\t// Digital eNVM, row by row operation\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tif(subArray->parallelRead == true) \n                {   // for the parallel readout\n                    //void NewSwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {\t// For simplicity, assume shift register is ideal\n                    double capToDrive=MAX(subArray->capRow2,subArray->capRow1);\n                    double resToDrive=subArray->resRow;\n                    subArray->wlBlSwitchMatrix.CalculateLatency(1e20, capToDrive, resToDrive, subArray->numReadPulse * subArray->activityRowRead, 1);\n                   \n                    // only need the wl-bl decoder\n                    double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n                    // subArray->colDelay = 2.3 * subArray->resCol * capBL; //column delay\n                    \n                    // Calculate column latency\n\t\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;  // assume the 15~20% voltage drop is enough for sensing\n \n                    // the read circuit\n                    // The input capacitance of the read circuit\n                    double Cin_ReadCircuit = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\n                    // Use the maximum read current to determine the readpulsewidth\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n                    subArray->cell.readPulseWidth = Cin_ReadCircuit * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\n                    // Delay at the Mux the mux is driving the read circuit\n                    double colRamp=0;\n                    subArray->mux.CalculateLatency(colRamp, Cin_ReadCircuit, 1); // the drive resistance should be the input resistance of the read circuit, the cap is the cap of\n\n                    // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n                    int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n                    int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n                    subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n                    subArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n                    subArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n                   if (subArray->shiftAddEnable) {\n                       // two shift adders are needed. one to add\n                       subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n                   }\n                                \n                   return  MAX(subArray->wlBlSwitchMatrix.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n                           subArray->readCircuit.readLatency +\n                           subArray->subtractor.readLatency +\n                           subArray->colDelay+ // need furthercheck\n                           subArray->shiftAdd.readLatency;                \n                }\n                else {\n                   double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n\t\t\t\t   subArray->wlDecoder.CalculateLatency(1e20, subArray->capRow2, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\t\t\t   double colRamp = 0;\n\t\t\t\t   // double tau = subArray->resCol * capBL / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t   // subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t   // subArray->colDelay = 2.3 * subArray->resCol * capBL;\n\t\t\t\t   double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n                   subArray->colDelay = tau * 0.2 * subArray->numColMuxed * subArray->numRow * subArray->numReadPulse;                   \n                   subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t   // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\t   int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\t   int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n\t\t\t\t   subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n\t\t\t\t   double capInputLoad = capBL + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\t   subArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\t   if (subArray->shiftAddEnable) {\n\t\t\t\t\t   subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n                        subArray->colDelay+\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n                }\n                        \n\t\t\t} else {        // Cross-point\n\t\t\t\tdouble wlDecoderLoad = subArray->colDecoderDriver.capInvInput + subArray->colDecoderDriver.capTgGateN + subArray->colDecoderDriver.capTgGateP;\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, wlDecoderLoad, NULL, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderDriver.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow1, subArray->capRow1, subArray->resRow, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tdouble colRamp = 0;\n\t\t\t\t// double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t// subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t// subArray->colDelay = 2.3 * subArray->resCol * subArray->capCol;\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n                subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t// Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\tint numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\tint numInput = numAdder * subArray->numCellPerSynapse;\n\t\t\t\tsubArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP*numInput, 1, 1);\n\t\t\t\tdouble capInputLoad = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\tsubArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency + subArray->wlDecoderDriver.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency);\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t} else {\t// Analog eNVM\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->wlDecoderOutput.capNorInput, NULL, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderOutput.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow2, subArray->resRow, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->blSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);    // Don't care write\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n                    // Cin is the capacitance to collect the charge\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\t// the maximum read current\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlDecoderOutput.readLatency +\n\t\t\t\t\t\tsubArray->blSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency + \n                        subArray->colDelay;\n\n\t\t\t} else {\t\t// Cross-point\n\t\t\t\tsubArray->wlSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\tdouble Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n                // the column delay\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t}\n\t}\n}", "docstring": "// calculate the area from Subarray class", "function_name": "NeuroSimSubArrayArea"}, "id": 65, "seed": "double NeuroSimSubArrayReadLatency(SubArray *subArray) {\t// For 1 weighted sum task on selected columns\n\tif (!param->NeuroSimDynamicPerformance) { return 0; }\t// Skip this function if param->NeuroSimDynamicPerformance is false\n\tif (subArray->cell.memCellType == Type::SRAM) {   // SRAM\n\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->capRow1, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->precharger.CalculateLatency(1e20, subArray->capCol, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->senseAmp.CalculateLatency(subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\tif (subArray->shiftAddEnable) {\n\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\t// There are numReadPulse times of shift-and-add\n\t\t}\n\t\tdouble resPullDown = CalculateOnResistance(subArray->cell.widthSRAMCellNMOS * subArray->tech.featureSize, NMOS, subArray->inputParameter.temperature, subArray->tech);\n\t\tdouble tau = (subArray->resCellAccess + resPullDown) * (subArray->capCellAccess + subArray->capCol) + subArray->resCol * subArray->capCol / 2;\n\t\ttau *= log(subArray->tech.vdd / (subArray->tech.vdd - subArray->cell.minSenseVoltage / 2));   /* one signal raises and the other drops, so cell.minSenseVoltage/2 is enough */\n\t\tdouble gm = CalculateTransconductance(subArray->cell.widthAccessCMOS * subArray->tech.featureSize, NMOS, subArray->tech);\n\t\tdouble beta = 1 / (resPullDown * gm);\n\t\tdouble colRamp = 0;\n\t\tsubArray->colDelay = horowitz(tau, beta, subArray->wlDecoder.rampOutput, &colRamp) * subArray->numRow * subArray->numReadPulse * subArray->activityRowRead;\n\n\t\treturn \tsubArray->wlDecoder.readLatency +\n\t\t\t\tsubArray->precharger.readLatency +\n\t\t\t\tsubArray->colDelay +\n\t\t\t\tsubArray->senseAmp.readLatency +\n\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\tsubArray->shiftAdd.readLatency;\n\n\t} \n    else {\t// eNVM\n\t\tif (subArray->digitalModeNeuro) {\t// Digital eNVM, row by row operation\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tif(subArray->parallelRead == true) \n                {   // for the parallel readout\n                    //void NewSwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {\t// For simplicity, assume shift register is ideal\n                    double capToDrive=MAX(subArray->capRow2,subArray->capRow1);\n                    double resToDrive=subArray->resRow;\n                    subArray->wlBlSwitchMatrix.CalculateLatency(1e20, capToDrive, resToDrive, subArray->numReadPulse * subArray->activityRowRead, 1);\n                   \n                    // only need the wl-bl decoder\n                    double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n                    // subArray->colDelay = 2.3 * subArray->resCol * capBL; //column delay\n                    \n                    // Calculate column latency\n\t\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;  // assume the 15~20% voltage drop is enough for sensing\n \n                    // the read circuit\n                    // The input capacitance of the read circuit\n                    double Cin_ReadCircuit = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\n                    // Use the maximum read current to determine the readpulsewidth\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n                    subArray->cell.readPulseWidth = Cin_ReadCircuit * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\n                    // Delay at the Mux the mux is driving the read circuit\n                    double colRamp=0;\n                    subArray->mux.CalculateLatency(colRamp, Cin_ReadCircuit, 1); // the drive resistance should be the input resistance of the read circuit, the cap is the cap of\n\n                    // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n                    int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n                    int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n                    subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n                    subArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n                    subArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n                   if (subArray->shiftAddEnable) {\n                       // two shift adders are needed. one to add\n                       subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n                   }\n                                \n                   return  MAX(subArray->wlBlSwitchMatrix.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n                           subArray->readCircuit.readLatency +\n                           subArray->subtractor.readLatency +\n                           subArray->colDelay+ // need furthercheck\n                           subArray->shiftAdd.readLatency;                \n                }\n                else {\n                   double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n\t\t\t\t   subArray->wlDecoder.CalculateLatency(1e20, subArray->capRow2, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\t\t\t   double colRamp = 0;\n\t\t\t\t   // double tau = subArray->resCol * capBL / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t   // subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t   // subArray->colDelay = 2.3 * subArray->resCol * capBL;\n\t\t\t\t   double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n                   subArray->colDelay = tau * 0.2 * subArray->numColMuxed * subArray->numRow * subArray->numReadPulse;                   \n                   subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t   // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\t   int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\t   int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n\t\t\t\t   subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n\t\t\t\t   double capInputLoad = capBL + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\t   subArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\t   if (subArray->shiftAddEnable) {\n\t\t\t\t\t   subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n                        subArray->colDelay+\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n                }\n                        \n\t\t\t} else {        // Cross-point\n\t\t\t\tdouble wlDecoderLoad = subArray->colDecoderDriver.capInvInput + subArray->colDecoderDriver.capTgGateN + subArray->colDecoderDriver.capTgGateP;\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, wlDecoderLoad, NULL, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderDriver.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow1, subArray->capRow1, subArray->resRow, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tdouble colRamp = 0;\n\t\t\t\t// double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t// subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t// subArray->colDelay = 2.3 * subArray->resCol * subArray->capCol;\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n                subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t// Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\tint numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\tint numInput = numAdder * subArray->numCellPerSynapse;\n\t\t\t\tsubArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP*numInput, 1, 1);\n\t\t\t\tdouble capInputLoad = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\tsubArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency + subArray->wlDecoderDriver.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency);\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t} else {\t// Analog eNVM\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->wlDecoderOutput.capNorInput, NULL, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderOutput.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow2, subArray->resRow, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->blSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);    // Don't care write\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n                    // Cin is the capacitance to collect the charge\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\t// the maximum read current\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlDecoderOutput.readLatency +\n\t\t\t\t\t\tsubArray->blSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency + \n                        subArray->colDelay;\n\n\t\t\t} else {\t\t// Cross-point\n\t\t\t\tsubArray->wlSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\tdouble Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n                // the column delay\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t}\n\t}\n}", "__index_level_0__": 19, "concepts": ["time complexity analysis", "Big-O notation", "time complexity for different data structures", "time complexity for different algorithms", "time complexity analysis for recursive algorithm", "time complexity analysis for common algorithms", "time complexity analysis for common data structures", "time complexity analysis for common data structure operations", "time complexity analysis for common data structure operations using recursion", "time complexity analysis for common data structure operations using stack", "time complexity analysis for common data structure operations using queue", "time complexity analysis for common data structure operations using linked list", "time complexity analysis for common data structure operations using tree", "time complexity analysis for common data structure operations using hash table", "time complexity analysis for common data structure operations using array", "comparison of different time complexities", "Big-O notation for recursive algorithms", "Big-O notation for common algorithms", "Big-O notation for common data structures", "Big-O notation for common data structure operations", "Big-O notation for common data structure operations using recursion", "Big-O notation for common data structure operations using stack", "Big-O notation for common data structure operations using queue", "Big-O notation for common data structure operations using linked list", "Big-O notation for common data structure operations using tree", "Big-O notation for common data structure operations using hash table", "Big-O notation for common data structure operations using array", "comparison of different time complexities"], "parsing_result": [{"instruction": "Implement a Python class `TimeComplexityAnalyzer` with a method `analyze_time_complexity(data)` that takes a `data` argument with different data structures and different operations to analyze the time complexity of these operations, and returns a `namedtuple` with the following fields:\n\n- `data_structure`: the string for the data structure name (e.g., `dict`, `list`, `set`, etc.)\n- `operation`: the string for the operation name (e.g., `get`, `append`, `pop`, etc.)\n- `time_complexity`: the Big-O notation for the time complexity of the operation\n\nThe `data` argument is a dictionary of data structures as keys and the operations as values, each operation is itself a dictionary of operations with their respective time complexities."}, {"instruction": "Implement a Python class to represent a binary search tree data structure. The data structure should support insertion (i.e., to add a new element), deletion (i.e., to remove an existing element), and find (i.e., to check if a given element is in the data structure) operations. The internal nodes of the tree should be defined as `TreeNode` objects, with the left and right children as `TreeNode` objects. The `TreeNode` class should have the following attributes:\n\n- `value` - the value for the node\n- `left` - a reference to the left child node\n- `right` - a reference to the right child node\n\nThe class should also have the following functions:\n\n- `insert(self, value)` - inserts a new node with the given value into the tree\n- `delete(self, value)` - deletes the node with the given value from the tree\n- `find(self, value)` - searches for the given value from the tree and returns the node containing the value, if found; otherwise, returns `None`\n\nYou should ensure the tree is a balanced binary search tree using the following rules:\n\n- The height of a node is the number of nodes on the longest path from that node to a leaf node; the height of the tree is the height of the root node\n- The difference in height between the left and right subtree of each node must be at most 1\n- All leaves are at the same depth"}, {"instruction": "Implement a Python class called `TimeComplexityAnalysis` that analyzes the time complexity of common algorithms and data structures on different inputs. Specifically, create a constructor to initialize a list of `namedtuple` objects. The objects should store the name of the algorithm and data structure, the time complexity of the algorithm, the time complexity of the data structure, and the input size for the analysis. Ensure the class is able to analyze time complexity using different data structures and algorithms."}, {"instruction": "Implement a Python class with methods to assess the time complexity of common algorithms, common data structures, and common data structure operations. The class should have methods that take as input a `list`, `set`, `dict`, `str`, `int`, `tuple`, or `bytes` object. Their implementations should contain `assert` statements to ensure the input is of the correct type. You should compute the time complexity for each method using the [Wall time](https://docs.python.org/3/library/time.html#time.process_time) function."}, {"instruction": "Design a Python class that implements a queue that supports:\n\n- initially empty\n- inserting elements using `enqueue(e)`\n- removing elements using `dequeue()`\n- returning the size of the queue using `size()`\n- returning whether the queue is empty using `is_empty()`\n\nThe class should be implemented with Big-O notation runtime complexity. After the class is defined, write assertions to ensure the correctness of the code."}, {"instruction": "Design a Python class `TimeComplexity` that stores time complexity data for different data structures and algorithms. The class should be able to run different algorithms (such as insertion sort, selection sort, bubble sort, binary search, and merge sort) on different data structures (such as array, linked list, stack, queue, binary search tree, and hash table) to measure their time complexity. The class should also provide common methods to read common data structures and algorithms from a text file. The class should have methods to return the time complexity of insertion sort, selection sort, bubble sort, binary search, and merge sort on a given array, sorted array, reverse-sorted array, linked list, stack, queue, binary search tree, and hash table.\n\nFor instance, given the following content from a text file:\n```\n# Insertion Sort Time Complexity\narray_insertion_sort - O(N)\narray_insertion_sort - O(N^2)\n\n# Selection Sort Time Complexity\narray_selection_sort - O(N)\narray_selection_sort - O(N^2)\n```\nthe class should have the following methods:\n```python\nTimeComplexity.get_time_complexity_for_array_insertion_sort()\nTimeComplexity.get_time_complexity_for_array_insertion_sort()\n```\n\nand the return values should be:\n```\n'O(N)'\n'O(N^2)'\n```"}, {"instruction": "Analyze the time complexities for the following algorithms and data structures:\n\n- linear search on a list of a fixed size\n- linear search on a list of a variable size\n- binary search on a list of a fixed size\n- binary search on a list of a variable size\n- quick sort on a list of a fixed size\n- quick sort on a list of a variable size\n- merge sort on a list of a fixed size\n- merge sort on a list of a variable size\n- bubble sort on a list of a fixed size\n- bubble sort on a list of a variable size\n- insertion sort on a list of a fixed size\n- insertion sort on a list of a variable size\n- counting sort on a list of a fixed size\n- counting sort on a list of a variable size\n- selection sort on a list of a fixed size\n- selection sort on a list of a variable size\n- heap sort on a list of a fixed size\n- heap sort on a list of a variable size\n- quick sort using recursion on a list of a fixed size\n- quick sort using recursion on a list of a variable size\n- quick sort using stack on a list of a fixed size\n- quick sort using stack on a list of a variable size\n- quick sort using queue on a list of a fixed size\n- quick sort using queue on a list of a variable size\n- quick sort using linked list on a list of a fixed size\n- quick sort using linked list on a list of a variable size\n- quick sort using binary tree on a list of a fixed size\n- quick sort using binary tree on a list of a variable size\n- quick sort using hash table on a list of a fixed size\n- quick sort using hash table on a list of a variable size\n- quick sort using array on a list of a fixed size\n- quick sort using array on a list of a variable size\n\nFor each data structure and algorithm, calculate and analyze the time complexity in Big-O notation. You should include a brief summary of the Big-O notation analysis along with evidence for your analysis."}, {"instruction": "Design a Python class to represent a binary tree. The binary tree is defined as a structure where each node has a left and right child, but not necessarily a parent, and the tree has a root node. The class should support the following methods:\n\n```python\ndef __init__(self, data):\n    ...\ndef count_nodes(self):\n    ...\n```\n\nWrite assertions to ensure the class has the correct properties."}, {"instruction": "Design a Python class with a method `time_complexity_analysis(n)` that returns the time complexity of a function `time_complexity_example(n)` in Big-O notation. The function should be implemented so that the time complexity of the `time_complexity_example` function is proportional to `n^3`."}, {"instruction": "Design a Python class to implement a cache. The class should have the following methods:\n\n- `store(key, value)`: add a new data entry to the cache, replacing an existing one if the key already exists\n- `get(key)`: return the value associated with the key, or None if the key does not exist\n- `delete(key)`: delete the value associated with the key if it exists\n\nThe class must guarantee that the cache does not exceed the capacity limit, where a data entry is deleted if the cache is full and a new data entry cannot be added to the cache. Additionally, the class should guarantee that the cache maintains the order that data entries are added to the cache.\n\nThe class should also support the following:\n\n- `size()`: return the number of entries in the cache\n- `capacity()`: return the limit of the cache\n- `clear()`: delete all entries from the cache"}, {"instruction": "Analyze the time complexity of the following algorithms, using Big-O notation:\n\n- Bubble sort\n- Selection sort\n- Insertion sort\n- Merge sort\n- Quick sort\n- Radix sort\n- Linear search\n- Binary search\n- Breadth-first search\n- Depth-first search"}, {"instruction": "Analyze time complexity for different data structures and algorithms based on different Big-O notation."}, {"instruction": "Analyze the performance of different algorithms, data structures, and operations for a real-world application that can be described by a series of tasks. For example, you can study a task that is performed when retrieving data from a database, where different data structures are used for different purposes, and the algorithms used to perform each task are different."}, {"instruction": "Design a Python `TimeComplexity` class to analyze the time complexities of a given algorithm in terms of Big-O notation. This class should be initialized with a function name and a set of arguments, and it should represent the time complexity of the algorithm given the arguments. The class should have various methods to compute time complexities of different algorithms. You can assume the complexity of the algorithm is computed by counting the number of time units it takes to execute the algorithm given the input arguments. The class should be able to handle the common time complexity analysis for recursive algorithms, common algorithms, common data structures, common data structure operations, and common data structure operations using recursion."}, {"instruction": "Create a Python class with a method `calculate_time_complexity(self)` to return a string containing the Big-O notation for the most complex time complexity of the algorithm that executes in the method `add_edge(self, from_vertex, to_vertex)`. You should use the following characters for the notation:\n\n- O(1)\n- O(1/2)\n- O(1/3)\n- O(1/4)\n- O(1/5)\n- O(2)\n- O(3)\n- O(5)\n- O(7)\n- O(10)\n- O(20)\n- O(30)\n- O(50)\n- O(100)\n- O(N)\n- O(N**2)\n- O(N**3)\n- O(N**5)\n- O(N**10)\n- O(N**20)\n- O(N**30)\n- O(N**50)\n- O(N**100)\n- O(N**1000)\n\nNote: if the time complexity is equivalent for multiple Big-O notations, return the one that has the smallest value (e.g., O(N**2) is smaller than O(N))."}, {"instruction": "Implement a Python class that supports the following operations with respect to a binary tree:\n\n- `insert(value)`: insert a new node with value into the tree\n- `delete(value)`: delete a node with value from the tree\n- `search(value)`: search a node with value from the tree and return its pointer\n- `inorder_traversal()`: return an array of values in inorder traversal of the tree\n- `preorder_traversal()`: return an array of values in preorder traversal of the tree\n- `postorder_traversal()`: return an array of values in postorder traversal of the tree\n\nDetermine the time complexity for each operation using Big-O notation. You are welcome to select the data structures and algorithms for implementing these operations as you see fit."}, {"instruction": "Implement a Python class `TimeComplexity` with a method `compute_time_complexity(self, n)` that computes the time complexity of a method (a Python function) for a given input size `n`. The method should return the corresponding Big-O notation for the method. For instance, for the following method:\n\n```python\ndef linear_search(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n    return -1\n```\n\nthe method should return `O(n)`."}, {"instruction": "Write a class `TimeComplexity` that has a method `calculate_time_complexity(n, m)` that takes two integers as input, `n` and `m`, and returns a named tuple of time complexity for different operations on different data structures. The data structures and operations are defined as follows:\n\n- dictionary: `n` is the number of elements and `m` is the number of operations. Operations are `get`, `set`, `pop`, `in`\n- linked list: `n` is the number of elements and `m` is the number of operations. Operations are `insert_at_head`, `insert_at_tail`, `insert_after_node`, `delete_at_head`, `delete_at_tail`, `delete_after_node`, `lookup_at_head`, `lookup_at_tail`, `lookup_after_node`\n- stack: `n` and `m` are the same as defined for linked list. Operations are `push`, `pop`, `peek`\n- queue: `n` and `m` are the same as defined for linked list. Operations are `enqueue`, `dequeue`, `peek`\n- heap: `n` is the number of elements and `m` is the number of operations. Operations are `insert`, `delete_min`, `lookup_min`\n- binary search tree: `n` and `m` are the same as defined for linked list. Operations are `insert`, `delete`, `lookup`\n- AVL tree: `n` and `m` are the same as defined for linked list. Operations are `insert`, `delete`, `lookup`\n- red-black tree: `n` and `m` are the same as defined for linked list. Operations are `insert`, `delete`, `lookup`"}, {"instruction": "Develop a Python class `TimeComplexity` with a method `calculate_time_complexity(data_structure, algorithm, n_repeats)` that takes three arguments: `data_structure`, `algorithm`, and `n_repeats`, where `data_structure` is a string representing a data structure, `algorithm` is a string representing an algorithm, and `n_repeats` is an integer representing the number of times to repeat the function call. The function should measure the time complexity of the `algorithm` using the given `data_structure` in `n_repeats` number of times."}, {"instruction": "Design a Python class named `TimeComplexity` to store different types of time complexities and perform basic operations on different types of data structures. The class should provide API such that each public method should take a data structure as an argument and return a `time` object. Each public method should perform the required operation on the provided data structure. In addition, the class should have public `get_best_time_complexity(data_structure_list, algorithm_list)` method that takes a list of data structures and a list of algorithms, and computes the `best_time_complexity` of each algorithm when using each data structure. The method should then return the `time` object representing the best time complexity of each algorithm for each data structure."}, {"instruction": "Analyze the run time complexity of the following common sorting algorithms:\n\n- merge sort\n- quick sort\n- insertion sort\n- bubble sort\n- selection sort\n- heap sort\n\nFor each algorithm, analyze the time complexity for different input data structures:\n\n- array\n- linked list\n- tree\n- hash table\n\nFor each algorithm, analyze the time complexity for different operations on the input data structures:\n\n- insertion\n- deletion\n- search\n\nFor each algorithm, analyze the time complexity for different implementations of the operations:\n\n- iterative\n- recursive\n\nFor each algorithm, analyze the time complexity for different implementations of the data structures:\n\n- stack\n- queue\n- linked list\n- tree\n- hash table\n- array"}, {"instruction": "Develop a Python class to model two-dimensional cartesian coordinate points, with two attributes: `x` and `y`, which represent the horizontal and vertical coordinates respectively. The class should have a method `calc_distance(p1, p2)`, which computes the Euclidean distance between two points."}, {"instruction": "Design a Python class that implements a string-based key-value store. The implementation of the class should have the following properties:\n\n- the keys should be strings and must be unique\n- values should be of any type\n- keys and values should be limited to a fixed length of 128 characters\n- when accessing a nonexistent key, the returned value should be None\n- the get() method should return None when the key does not exist\n\nThe class should have the following public methods:\n\n- `get(key)`: return the value of `key`.\n- `set(key, value)`: add/replace the value for `key`.\n- `delete(key)`: remove the key and its associated value.\n- `contains(key)`: check if the key exists in the store.\n- `size()`: return the number of keys in the store.\n- `clear()`: remove all stored entries.\n- `keys()`: return a list of keys in the store.\n\n> Note: the class must be implemented as a single class with the above public methods and no additional methods."}, {"instruction": "Implement a Python class with a method `compute_estimate(n)` that returns a tuple of the time complexity of the algorithm used in the class and the time complexity of the input data. The input data should be an input value `n` that the algorithm utilizes to compute the time complexity. The computed complexity should be an instance of the `namedtuple` `TimeComplexity`."}, {"instruction": "Design a Python class `TimeComplexityCalculator` that takes a `TimeComplexityCalculatorCallable` as an input, and calculates the time complexity of different algorithms, data structures, and data structure operations. The time complexity is defined as the number of basic operations required for the algorithm to run. For example, the time complexity of an algorithm that runs `n` times and takes `O(n + 1)` to complete is `O(n + 1)`. You should also calculate the time complexity for recursive algorithms. The class should be able to identify common time complexities and return their Big-O notation in the form of `(time complexity, notation)`. Finally, the class should be able to identify the time complexity for common data structures and return their Big-O notation in the form of `(time complexity, notation)`.\n\nSpecifically, you should implement the following class methods for the `TimeComplexityCalculatorCallable` interface:\n\n- `TimeComplexityCalculatorCallable#get_complexity(data, k)` - the function that analyzes a data structure or an algorithm and returns the time complexity as a string. The method should accept two inputs: `data`, the data structure or algorithm, and `k`, the number of repetition of the algorithm or data structure operations.\n- `TimeComplexityCalculatorCallable#get_notation(complexity)` - the function that returns a string representation of the time complexity in the form of `O(a)` or `O(an)`. The method should accept a string representation of the time complexity as input.\n\nThe `TimeComplexityCalculatorCallable` is a general interface for analyzing the performance of algorithms and data structures. It should be used when you need to calculate the time complexity of an algorithm or a data structure. The calculator itself can be used to analyze different algorithms and data structures and return their time complexity in different forms."}, {"instruction": "Analyze time complexity of the following algorithms and data structures, and compare the results for different data structures and algorithms.\n\n- computing the sum of n numbers\n- searching a value in a sorted array of n elements\n- searching a value in an unsorted array of n elements\n- searching a value in a binary search tree of n elements\n- deleting a value from a binary search tree of n elements\n- retrieving the n-th element from a list of n elements\n- retrieving the n-th element from a sorted array of n elements\n- stack push\n- queue push\n- queue pop\n- stack pop\n- binary search tree insertion\n- binary search tree deletion\n- binary search tree search\n- binary search tree get_min\n- binary search tree get_max\n- linked list push\n- linked list pop\n- linked list search\n- linked list get_min\n- linked list get_max\n- array push\n- array pop\n- array search\n- array get_min\n- array get_max\n- hash table insertion\n- hash table deletion\n- hash table search"}, {"instruction": "Develop a Python class, `ComplexityCounter`, that counts different types of time complexities for algorithms and data structures. Create methods with the following specifications:\n\n- `count_time_complexity(algorithm, data_structure, operation)` - This method counts the time complexity of a specific algorithm and data structure operation. The arguments are:\n    - `algorithm` - The name of the algorithm, such as \"merge sort\".\n    - `data_structure` - The name of the data structure, such as \"list\".\n    - `operation` - The name of the data structure operation, such as \"insert\", \"remove\", or \"search\".\n- `count_time_complexity_recursive(algorithm, data_structure, operation)` - This method counts the time complexity of a specific algorithm and data structure operation using recursion. The arguments are:\n    - `algorithm` - The name of the algorithm, such as \"merge sort\".\n    - `data_structure` - The name of the data structure, such as \"list\".\n    - `operation` - The name of the data structure operation, such as \"insert\", \"remove\", or \"search\".\n- `count_time_complexity_using_stack(algorithm, data_structure, operation)` - This method counts the time complexity of a specific algorithm and data structure operation using a stack. The arguments are:\n    - `algorithm` - The name of the algorithm, such as \"merge sort\".\n    - `data_structure` - The name of the data structure, such as \"list\".\n    - `operation` - The name of the data structure operation, such as \"insert\", \"remove\", or \"search\".\n- `count_time_complexity_using_queue(algorithm, data_structure, operation)` - This method counts the time complexity of a specific algorithm and data structure operation using a queue. The arguments are:\n    - `algorithm` - The name of the algorithm, such as \"merge sort\".\n    - `data_structure` - The name of the data structure, such as \"list\".\n    - `operation` - The name of the data structure operation, such as \"insert\", \"remove\", or \"search\".\n- `count_time_complexity_using_linked_list(algorithm, data_structure, operation)` - This method counts the time complexity of a specific algorithm and data structure operation using a linked list. The arguments are:\n    - `algorithm` - The name of the algorithm, such as \"merge sort\".\n    - `data_structure` - The name of the data structure, such as \"list\".\n    - `operation` - The name of the data structure operation, such as \"insert\", \"remove\", or \"search\".\n- `count_time_complexity_using_tree(algorithm, data_structure, operation)` - This method counts the time complexity of a specific algorithm and data structure operation using a tree. The arguments are:\n    - `algorithm` - The name of the algorithm, such as \"merge sort\".\n    - `data_structure` - The name of the data structure, such as \"list\".\n    - `operation` - The name of the data structure operation, such as \"insert\", \"remove\", or \"search\".\n- `count_time_complexity_using_hash_table(algorithm, data_structure, operation)` - This method counts the time complexity of a specific algorithm and data structure operation using a hash table. The arguments are:\n    - `algorithm` - The name of the algorithm, such as \"merge sort\".\n    - `data_structure` - The name of the data structure, such as \"list\".\n    - `operation` - The name of the data structure operation, such as \"insert\", \"remove\", or \"search\".\n- `count_time_complexity_using_array(algorithm, data_structure, operation)` - This method counts the time complexity of a specific algorithm and data structure operation using an array. The arguments are:\n    - `algorithm` - The name of the algorithm, such as \"merge sort\".\n    - `data_structure` - The name of the data structure, such as \"list\".\n    - `operation` - The name of the data structure operation, such as \"insert\", \"remove\", or \"search\"."}, {"instruction": "Implement a Python class `TimeComplexity` that has a method `calculate_time_complexity(algorithm)` that computes and returns a `namedtuple` with the following fields:\n\n- `time_complexity`: the time complexity of the algorithm\n- `best_case`: a list of `namedtuple`s, where each `namedtuple` represents the data structure and time complexity of best case scenario for that data structure\n- `worst_case`: a list of `namedtuple`s, where each `namedtuple` represents the data structure and time complexity of worst case scenario for that data structure\n- `average_case`: a list of `namedtuple`s, where each `namedtuple` represents the data structure and time complexity of average case scenario for that data structure\n\n#"}, {"instruction": "Implement a Python class with methods `compute_time_for_different_data_structures(algorithm_name, data)` that returns the time complexity for the algorithm in Big-O notation using the given `data` to perform the specific `algorithm_name`. The `data` argument can be a list of integers, a string, a dictionary, or a nested list. For each of the data types, you should implement time complexity analysis using Big-O notation for some common algorithms and data structures. In addition, you should implement time complexity analysis for a recursive algorithm using a stack as a data structure and another recursive algorithm using a queue as a data structure."}, {"instruction": "Create a Python class with a method `time_complexity_analysis(complexity_level, data_structure, common_framework, common_algorithm)` that analyzes the complexity of specific data structure and algorithm implementations and returns the time complexity of the input data structure and algorithm. The input arguments are, in order, a complexity level to analyze, a data structure to analyse, a common framework to use to analyze a data structure, and a common algorithm to use to analyze a data structure. The complexity level can be specified as \"linear\", \"quadratic\", \"cubic\", \"exponential\", or \"factorial\". The method should return a `namedtuple` as `<data_structure>_time_complexity = <complexity_level>`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: static keyword, function overload, custom C++ function implementation, swig typemap\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_Scene_autoReleaseAssets_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::Scene *arg1 = (cc::Scene *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::Scene>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"Scene_autoReleaseAssets_set,2,SWIGTYPE_bool\"); \n    cc_Scene_autoReleaseAssets_set(arg1,arg2);\n    \n    \n    return true;\n}", "docstring": "// %typemap(in) bool", "function_name": "js_cc_Scene_onBatchCreated"}, "id": 66, "seed": "static bool js_cc_Scene_autoReleaseAssets_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::Scene *arg1 = (cc::Scene *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::Scene>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"Scene_autoReleaseAssets_set,2,SWIGTYPE_bool\"); \n    cc_Scene_autoReleaseAssets_set(arg1,arg2);\n    \n    \n    return true;\n}", "__index_level_0__": 20, "concepts": ["static keyword", "function overload", "custom C++ function implementation", "swig typemap"], "parsing_result": [{"instruction": "Write a C++ class `MyString` that offers basic functionality of a string. This class follows the C++ standard library string implementation, but with some modifications. The class should support string initialization with a variety of input types, string concatenation, string comparison, string length, and string substrings. The class should provide methods to reverse the string, find the maximum and minimum characters in the string, and find the number of occurrences of a given character in the string.\n\nInclude error handling to ensure the correctness of the class's implementation."}, {"instruction": "Implement a Python class `Stack` that represents a stack data structure in Python. The class should support push and pop operations. Implement the classes `__init__`, `__str__`, and `__len__` methods to support standard Python syntax. The class should also provide a static method `is_empty` that returns `True` if the stack is empty.\n\nWrite a Python function that takes a Python function, a list of inputs, and a list of expected outputs. The function should call the target function with each input in turn and compare it with the corresponding expected output. The function should return `True` if all the calls return correct results and `False` otherwise."}, {"instruction": "Design a Python class `Vector` that represents a mathematical vector in 2D space. The class should store the vector coordinates in instance variables and provide methods for performing operations on the vector such as addition and subtraction. The class should support operator overloading and provide a `dot_product` method.\n\nWrite a Python class `Matrix` that represents a mathematical matrix in 2D space. The class should store the matrix rows in a list and provide methods for performing operations on the matrix such as matrix multiplication and transposition. The class should support operator overloading for matrix addition and multiplication, and provide a `dot_product` method.\n\nWrite a C++ implementation of the `dot_product` method in the `Matrix` class. The C++ implementation should be wrapped with SWIG and exposed to Python as a method call."}, {"instruction": "Implement a Python class and a C++ class to perform complex mathematical operations. The class should support operations like addition (+), subtraction (-), multiplication (\\*), division (/), and exponentiation (**). The class should also support the unary + operator, which should return the same value of the underlying C++ class. The Python class should handle type conversions between the two classes, while the C++ class should enforce the type constraints.\n\nFor example, given the following C++ class:\n```c++\nclass Complex {\nprivate:\n    float real;\n    float imaginary;\npublic:\n    Complex(float r = 0, float i = 0);\n    float getReal() const;\n    float getImaginary() const;\n    Complex operator+(const Complex& other) const;\n    Complex operator-(const Complex& other) const;\n    Complex operator*(const Complex& other) const;\n    Complex operator/(const Complex& other) const;\n    Complex operator^(const Complex& other) const;\n    Complex operator+(float s);\n    Complex operator-();\n};\n```\n\nThe Python class should be able to define instances of this class and perform the following operations:\n```python\nc1 = Complex(1, 2)  # c1 = Complex(1, 2)\nc2 = Complex(3, 4)  # c2 = Complex(3, 4)\n\n# Addition\nc3 = c1 + c2\nprint(c3.real, c3.imaginary)  # 4 6\n\n# Subtraction\nc4 = c1 - c2\nprint(c4.real, c4.imaginary)  # -2 -2\n\n# Multiplication\nc5 = c1 * c2\nprint(c5.real, c5.imaginary)  # -5 -10\n\n# Division\nc6 = c1 / c2\nprint(c6.real, c6.imaginary)  # 0.33333 0.33333\n\n# Exponentiation\nc7 = c1 ** c2\nprint(c7.real, c7.imaginary)  # 7 -16\n\n# Unary +\nc8 = +c1\nprint(c8.real, c8.imaginary)  # 1 2\n\n# Unary -\nc9 = -c1\nprint(c9.real, c9.imaginary)  # -1 -2\n```\n\nNote that the operators `+`, `-`, `*`, `/`, and `**` should be overloaded to work with the class instances. Also, the unary operator `+` should be implemented as a custom C++ function. Ensure that the Python class supports type conversions between the two classes."}, {"instruction": "Implement a Python class `Rectangle` that stores two corner points of a rectangle, which are represented as (x1, y1) and (x2, y2), where (x1, y1) represents the top-left corner and (x2, y2) represents the bottom-right corner. The class should support several operations, such as determining whether a point is contained in the rectangle, determining the area, or determining whether two rectangles overlap.\n\nImplement a C++ class `Rectangle` with the same interface as in the Python class. Use a decorator to mark the Python `Rectangle` class as a C++ class, and use SWIG to generate C++ headers that can be used to generate a Python wrapper. The wrapper should be able to call Python functions in the original `Rectangle` class.\n\nNote that this task is more challenging than the previous ones. You should carefully consider the following:\n- The original Python class should be written in Python 3 or above.\n- The generated C++ class should support all function signatures of the original Python class.\n- The generated Python wrapper must call the original `Rectangle` class functions.\n- The generated C++ wrapper must call the original Python wrapper."}, {"instruction": "Write a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `[opname]:[arg]` where `[opname]` is one of the following:\n- `pre`: adds a prefix to the string\n- `suf`: adds a suffix to the string\n- `low`: converts the entire string to lowercase\n- `upp`: converts the entire string to uppercase\n- `rep`: replaces a specific character with another\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it."}, {"instruction": "Develop a Python class to represent a two-dimensional Cartesian coordinate system in 3D space. The class should support operations such as translation, rotation, and projection. Define a custom C++ function to calculate the distance between two points using Euclidean norm. Provide an implementation for the Python class using a `swig` wrapper and a typemap to allow the C++ function to be called from within the Python class."}, {"instruction": "Create a Python class called `Rectangle` that contains two instances variables, `length` and `width`, representing the length and width of a rectangle object. The class should implement two methods: `area` and `perimeter`. The area of a rectangle is its length times its width and the perimeter is the sum of its length and width.\n\nFurthermore, the class should implement three functions that calculate the perimeter, area, and both, using `C++` functions. The functions should be implemented with function overloading and the implementations should be wrapped by the `swig` package. This should be done through a custom typemap (see [this tutorial](http://www.swig.org/Doc1.3/Advanced.html#Advanced_typemaps) for more information on typemaps). For the `C++` functions, the implementation should be based on the `C++` standard library rather than a custom implementation."}, {"instruction": "Develop a Python class `C` that offers a static method `f` that implements a `f` function in C++. Additionally, implement a `f` function in C++ that takes a 32-bit integer as input and returns another 32-bit integer as output. The class should expose these two functions as one, which is possible using swig."}, {"instruction": "Develop a Python class `Rectangle` that defines a rectangular geometric shape with vertices at four corners, represented by two points: `Point(x, y)`. The class constructor takes two `Point` objects to form the vertices of the rectangle. The class should also support the following operations:\n- `get_area`: calculate the area of the rectangle\n- `get_perimeter`: calculate the perimeter of the rectangle\n- `get_vertices`: return the four vertices of the rectangle\n- `move`: move the rectangle to a new location defined by a movement vector\n\nEnsure that the class is encapsulated properly, with attributes and methods marked as private. Also, implement the ability to overload the `+` operator to add two `Rectangle` objects together, resulting in a new `Rectangle` that represents the resultant rectangle of their overlapping areas."}, {"instruction": "Implement a C++ class `Math` that offers advanced mathematical operations. The class should maintain an internal state that is an empty string. The class should support adding, subtracting, and multiplying floating-point numbers, calculating square roots, and obtaining the greatest common divisor (GCD) of two numbers. All the operations are communicated through a central function: `perform_operation(self, op: str, num1: float, num2: float)`.\n\nThe function `perform_operation` interprets the operations specified in the form of `\"[opname]:[arg1],[arg2]\"`. Here are the detailed formats for each operation, explained through examples:\n- Addition: `perform_operation(\"add:3.14,5.12\")`\n- Subtraction: `perform_operation(\"subtract:3.14,5.12\")`\n- Multiplication: `perform_operation(\"multiply:3.14,5.12\")`\n- Square root: `perform_operation(\"sqrt:3.14\")`\n- Greatest common divisor: `perform_operation(\"gcd:3.14,5.12\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\nThe C++ code should be compiled into a shared library (`.so`) file and used from Python as a regular Python module. The exported function should be named `perform_operation`."}, {"instruction": "Implement a Python class `Polynomial` that offers advanced tools for manipulating polynomials. The class should maintain a list of coefficients in descending order of power. The class should support addition, subtraction, multiplication, and division of polynomials, as well as other operations such as evaluation at a specific point, polynomials with custom coefficients, and polynomials with integer powers.\n\nDevelop a C++ implementation of the `Polynomial` class to be used in a Python wrapper using the `SWIG` tool. Your wrapper should support function overloading to allow calling the `Polynomial` methods with different arguments, such as `Polynomial(Polylist)` vs `Polynomial(int, int)`, and `Polynomial(int, int, int)`. Add support for typemaps to the `Polynomial` class, so that you can operate with polynomials with custom coefficients.\n\nAfter the C++ implementation is complete, use the `pytest` package to test the wrapper and ensure its functionality."}, {"instruction": "Develop a Python class `Matrix` that stores a two-dimensional grid of numeric elements. The class should support matrix addition, multiplication, and element access. The class should support matrix addition and multiplication operations using the class methods `add` and `multiply`, respectively. The multiplication operation should be delegated to a function `multiply` that is defined in the class.\n\nThe class should also include a `static` method `from_string` that initializes a Matrix object using the provided string representation of the matrix. The string should be formatted as a list of strings, where each string corresponds to a row of the matrix. Each character in the row string should represent a numeric element of the matrix. The method should handle erroneous inputs such as invalid character inputs or if there are multiple rows or columns. The class should support element access using the `[]` operator.\n\nThe class should include a `swig` typemap definition to support an efficient implementation of the `multiply` method using C++ code."}, {"instruction": "Design a Python class `Complex` that implements a complex number. The class should support instantiation, addition, multiplication, and other operations. The addition and multiplication should be implemented as operator overloads."}, {"instruction": "Write a Python class `Vector` that represents a vector in two-dimensional space. It should support basic vector operations such as addition, subtraction, and dot product. In addition, implement a `magnitude` method to compute the length of the vector. The class should provide a static method `from_magnitude` that uses a C++ function to create a vector from its magnitude and angle. Ensure that the class supports polymorphic behavior, and that the `magnitude` method can be overridden by subclasses."}, {"instruction": "Design a Python class `PyWrapper` that wraps a C++ function `cpp_function` that takes a single integer argument and returns an integer result. The class should support overloading the addition operator for two instances of `PyWrapper` so that the result is the sum of the wrapped function calls.\n\nThe class should also expose the wrapped function as a static member function `cpp_function` in a C++ wrapper `PyWrapperCpp` implemented as a C++ class. Note that a static member function cannot be overloaded. To work around this constraint, use the `static` keyword in Python to declare the member function as static.\n\nThe solution should include three files: `pywrapper.py` containing the Python wrapper class, `pywrapper_cpp.i` containing the C++ wrapper interface, and `pywrapper_cpp.cpp` containing the C++ wrapper implementation. The C++ wrapper should be implemented using the C++11 `std::function` template and `PYBIND11_MAKE_OP_OVERLOAD`. The class should be tested using the `pytest` framework."}, {"instruction": "Develop a Python class `AddressBook` with methods `create_entry`, `get_entry`, and `delete_entry`. The class should use a list to store the address book entries. Each entry is represented as a dictionary with four keys: `name`, `phone_number`, `email`, and `address`. The `name` and `phone_number` keys are mandatory, while `email` and `address` are optional.\n\nThe class should support the following behaviors:\n- The class should be instantiated with an iterable object containing the address book entries as its argument, which is typically built from a text file. The class should read the contents of the file and populate the address book entries. The class should handle exceptions and provide appropriate error messages if the file is not found or read with errors.\n- The class should expose the following methods:\n  - `create_entry(self, name, phone_number, email=None, address=None)`: Accepts a name, phone number, and optional email and address as arguments, and creates an entry from them. The entry should be added to the address book in the appropriate location.\n  - `get_entry(self, name)`: Accepts a name as an argument and returns the entry associated with it. The entry should be looked up in the address book and returned if found. If not found, the method should return `None`.\n  - `delete_entry(self, name)`: Accepts a name as an argument and deletes the entry associated with it from the address book. If the entry is not found, an error message should be printed.\n\nThe class should also support the following behaviors:\n- The class should support function overloading. Namely, the `get_entry` method should accept either a string or a list of strings as an argument, and it should return the entry associated with it if the entry exists. If the entry is not found, the method should return `None`, or it should return `None` for each entry in the list if not found.\n- The class should implement `create_entry`, `get_entry`, and `delete_entry` in a custom C++ implementation, using a C++ extension module written in C++ using the SWIG tool, and a NumPy typemap."}, {"instruction": "Design a Python class `Vector` that represents a 3-dimensional vector and provides operations for addition, subtraction, dot product, and cross product. Implement the operations using C++ functions defined in a C++ library."}, {"instruction": "Implement a Python class that represents a simple calculator. The class should contain a function `calculate(self, operation: str, *args: float)` that takes a string of the form `operation:` and a list of numbers as arguments. The operation must be one of the following:\n- addition: `+`\n- subtraction: `-`\n- multiplication: `*`\n- division: `/`\n- exponentiation: `**`\n- square root: `sqrt`\n\nThe calculator should support both single- and multi-argument operations. The calculator should automatically determine the type of each argument (integers or floats) based on the operation and input order.\n\nThe class should also provide static methods for computing the following values:\n- absolute value: `abs(x)`\n- power of two: `pow2(n)`\n\nThe class should handle all possible errors gracefully, such as invalid operations, division by zero, and argument type mismatch. It should also provide a `__str__` method to display the operation and argument list in a human-readable format.\n\nFinally, implement the class using C++ and wrap it with the [SWIG](http://swig.org/) wrapper in a Python module."}, {"instruction": "Implement a Python class `PyCalc` that represents a simple calculator with operations `+, -, *, /, %`. The class should support the following operations:\n- `PyCalc(x)` initializes the calculator with an initial value `x`.\n- `add(x)` adds `x` to the value.\n- `sub(x)` subtracts `x` from the value.\n- `mult(x)` multiplies the value by `x`.\n- `div(x)` divides the value by `x`.\n- `mod(x)` returns the remainder of the value when divided by `x`.\n- `clear()` resets the calculator to the initial value of `0`.\n\nImplement the class in Python and also create a C++ class `C++Calc` that wraps the Python class `PyCalc`. `C++Calc` should provide a minimal interface for the calculator, and should support all the operations defined in the Python class."}, {"instruction": "Develop a Python class `PyCpp` that wraps a C++ class `CppClass` with a simple interface. The class should support two methods: `add` and `get`, where `add` takes two arguments and adds them, and `get` returns the result of the last `add` operation. The class should also allow addition of lists of integers. Furthermore, when using the `add` method with multiple arguments, the class should be able to add them one-by-one, i.e., the second argument is added to the first, the third argument to the second, and so on.\n\nTo achieve this, define the `add` method as a static method with a C++-defined overloaded function `static int add(int a, int b) { return a + b; }` in the C++ implementation. The `add` method in Python should be implemented using swig and a custom typemap."}, {"instruction": "Develop a Python class `Image` that stores information about an image in terms of its height, width, and pixel intensities. The class should support reading and writing images from a file, converting the image to grayscale, and performing various image operations.\n\nImplement the following custom methods:\n\n- `write_image` that takes a string filename as an argument and saves the image to the specified file.\n- `to_grayscale` that converts the image to grayscale by taking the average of the red, green, and blue components for each pixel.\n- `rotate_image` that takes an angle in degrees as an argument and rotates the image counterclockwise by the specified angle.\n\nUse the SWIG library to generate a function wrapper for the C++ classes of the `Image` class. The wrapper should also include the C++ function definitions from the original library."}, {"instruction": "Implement a Python class that represents an address, and an address book that stores multiple addresses. The class should support adding and removing addresses, searching for addresses by name, and serializing the address book to disk.\n\nThe class should be implemented using a C++ class that represents an address and a C++ class that stores multiple addresses. The class should also supply a static function that takes the directory path of a binary file and serializes the address book to the file.\n\nThe interface of the `Address` class should be:\n```py\nclass Address:\n    def __init__(self, name, street, city, state, zipcode):\n        # ...\n\n    def __str__(self):\n        # ...\n\n    def __eq__(self, other):\n        # ...\n```\n\nThe interface of the `AddressBook` class should be:\n```py\nclass AddressBook:\n    def __init__(self):\n        # ...\n\n    def add_address(self, address: Address):\n        # ...\n\n    def remove_address(self, name: str):\n        # ...\n\n    def find_address(self, name: str):\n        # ...\n\n    def save(self, path: str):\n        # ...\n\n    @staticmethod\n    def load(path: str):\n        # ...\n```"}, {"instruction": "Rewrite the Python class `MyString` from Example 2 using the `ctypes` module and a C++ class implementation. The C++ implementation should be declared in a separate C++ header file. Use `ctypes` to wrap the C++ implementation and expose it as a function-callable Python class. Use SWIG to generate a Python wrapper for the C++ class implementation."}, {"instruction": "Write a Python class named `Student` with attributes `first_name`, `last_name`, `age`, `gender`, `gpa` (grade point average), and a method `print_info` to display the information of one student. The class should also have a static method `report`, which takes a list of students as an argument and prints the information of each student in the list.\n\nThe class should be implemented by wrapping a C++ class with SWIG. The `Student` class should have a wrapper function `get_info` that takes a `Student` object and returns a string representing the information. The `report` method should be implemented by calling the `print_info` method passed as a callback function to the `get_info` function.\n\nThe `report` function should be implemented as a Python extension function that takes a list of `Student` objects as input and prints the information of each student in the list."}, {"instruction": "Implement a C++ class `Point` that represents points in 2-D space. The class should support adding two points together and returning the square of their Euclidean distance. Include a `static` method `distance` that calculates Euclidean distance between two points. Implement the two operations in C++ using Python's SWIG and typemaps."}, {"instruction": "Develop a Python class `Calculator` that offers simple operations on two integers: addition, subtraction, multiplication, and division. The class should support the standard operator overloading to provide a syntax like `a + b` and `a - b`, where `a` and `b` are instances of the `Calculator` class. Additionally, the class should provide dedicated functions for each of the operations, such as `add(a, b)`, `subtract(a, b)`, and so on. The class should implement the default operation `()` as an alias for the addition operation.\n\nThe class should define a C++ class `Calculator` that corresponds to it. To this end, create a C++ header file `Calculator.hpp` that defines the public interface of the class. The implementation of the `Calculator` class should be defined in another C++ source file `Calculator.cpp`. The header file should also contain the boilerplate code required to make the class visible to Python.\n\nThen, create a swig interface file `calculator.i` that declares the C++ class `Calculator` and exposes it to Python. The file should also define the `Calculator` class as a Python class with the same name, along with the appropriate special methods.\n\nFinally, employ swig to generate the Python bindings from these files. Include swig command-line options to enable the C++ static keyword, as well as include the appropriate typemap for custom C++ function implementations."}, {"instruction": "Write a Python class `PyPerson` that encapsulates a person's name, age, and gender. The class should be able to perform name and age validation checks by using predefined user-defined functions. The class should also provide a function to print the person's information in the following format: `[Name]: [Age]: [Gender]`.\n\nCreate a Python program that reads the data for a set of people from a text file and stores them in a Python list of `PyPerson` objects. The program should then print an alphabetical list of the person's information formatted as specified above. Include robust error handling to manage exceptions such as invalid file paths, invalid gender inputs, and out-of-range age inputs."}, {"instruction": "Implement a Python class `Statistics` that offers advanced statistical tools for computing descriptive statistics. The static methods in the class should calculate the sum, mean, variance, and standard deviation of a given list of numbers. The methods should handle invalid or empty input gracefully. Incorporate the appropriate typemap to provide Python bindings for C++ functions."}, {"instruction": "Implement a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nDefine three overloaded functions to support prefix, suffix, and character replacement operations. Each operation should accept a string argument and perform the corresponding operation.\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it."}, {"instruction": "Implement a Python class that encapsulates a C++ class `Product`. The class should have a static method named `get_price_per_unit` that accepts a `Product` instance and returns the price per unit including tax. The class should also support overloading of the `+` operator to add two `Product` instances. You may choose to use SWIG to interface between Python and C++."}, {"instruction": "Develop a Python class `Vector` that mimics the functionality of C++'s `std::vector`. The class should maintain a dynamic array of floating-point values and provide methods to initialize the array, add elements to the end, insert elements at a specified index, and delete elements at a specified index. The class should also include a method `resize(self, new_size: int)` to dynamically resize the array to the specified size.\n\nAll the operations should be implemented through wrapper function calls in the C++ implementation. The wrapper functions should have the same names as the methods in Python. The wrapper functions should use `std::vector` to store data internally.\n\nIn the class definition, include the `static` keyword for the wrapper functions to ensure that they are not tied to any particular objects. However, the wrapper functions should be overloaded using function overloading.\n\nUse SWIG to generate Python bindings for the C++ implementation, including the custom typemap to correctly handle the `Vector` class."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: multithreading, error handling with exceptions, object construction, function composition\n\n### Task", "fingerprint": null, "content": {"code": "int client() {\n\t/*\n\tSimple udp client\n\t*/\n\tstruct sockaddr_in si_other;\n\tint s, slen = sizeof(si_other);\n\tchar buf[1500];\n\tchar message[BUFLEN];\n\tWSADATA wsa;\n\tchar ip_address[20];\n\n\tprintf(\"input the IP address, for default press d\\n\");\n\tscanf(\"%s\", ip_address);\n\tif (strcmp(ip_address, \"d\") == 0)\n\t\tstrcpy(ip_address, SERVER);\n\n\t//Initialise winsock\n\tprintf(\"\\nInitialising Winsock...\");\n\tif (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)\n\t{\n\t\tprintf(\"Failed. Error Code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\tprintf(\"Initialised.\\n\");\n\n\t//create socket\n\tif ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == SOCKET_ERROR)\n\t{\n\t\tprintf(\"socket() failed with error code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//setup address structure\n\tmemset((char *)&si_other, 0, sizeof(si_other));\n\tsi_other.sin_family = AF_INET;\n\tsi_other.sin_port = htons(PORT);\n\tsi_other.sin_addr.S_un.S_addr = inet_addr(ip_address);\n\n\tAS_FIELDS* asfieldo = (AS_FIELDS*)malloc(sizeof(AS_FIELDS));\n\tasfieldo->a = s;\n\tasfieldo->b = slen;\n\tasfieldo->si_other = si_other;\n\tDWORD myThreadID, dwExit= 0;\n\tHANDLE myHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\n\tchar c;\n\tgetchar();\n\n\tdo {\n\t\t// menu\n\t\tprintf(\"CLIENT MENU:\\n\");\n\t\tprintf(\"t - text message:\\n\");\n\t\tprintf(\"c - change connection:\\n\");\n\t\tprintf(\"f - send faulty packet:\\n\");\n\t\tprintf(\"d - doimplementacia:\\n\");\n\t\tprintf(\"e - exit program:\\n\");\n\t\tc = getchar();\n\t\tgetchar();\n\t\tswitch (c) {\n\t\tcase 't':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_text(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'c':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tchange_conn(s, si_other, slen);\n\t\t\tc = 'e';\n\t\t\tbreak;\n\t\tcase 'f':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_faulty_packet(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'd':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tdoimplementacia(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'e':\n\t\t\treturn 1;\n\t\t}\n\t} while (c != 'e');\n\t\n\tclosesocket(s);\n\tWSACleanup();\n\treturn 0;\n}", "docstring": "//try to receive some data, this is a blocking call", "function_name": "send_text"}, "id": 69, "seed": "int client() {\n\t/*\n\tSimple udp client\n\t*/\n\tstruct sockaddr_in si_other;\n\tint s, slen = sizeof(si_other);\n\tchar buf[1500];\n\tchar message[BUFLEN];\n\tWSADATA wsa;\n\tchar ip_address[20];\n\n\tprintf(\"input the IP address, for default press d\\n\");\n\tscanf(\"%s\", ip_address);\n\tif (strcmp(ip_address, \"d\") == 0)\n\t\tstrcpy(ip_address, SERVER);\n\n\t//Initialise winsock\n\tprintf(\"\\nInitialising Winsock...\");\n\tif (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)\n\t{\n\t\tprintf(\"Failed. Error Code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\tprintf(\"Initialised.\\n\");\n\n\t//create socket\n\tif ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == SOCKET_ERROR)\n\t{\n\t\tprintf(\"socket() failed with error code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//setup address structure\n\tmemset((char *)&si_other, 0, sizeof(si_other));\n\tsi_other.sin_family = AF_INET;\n\tsi_other.sin_port = htons(PORT);\n\tsi_other.sin_addr.S_un.S_addr = inet_addr(ip_address);\n\n\tAS_FIELDS* asfieldo = (AS_FIELDS*)malloc(sizeof(AS_FIELDS));\n\tasfieldo->a = s;\n\tasfieldo->b = slen;\n\tasfieldo->si_other = si_other;\n\tDWORD myThreadID, dwExit= 0;\n\tHANDLE myHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\n\tchar c;\n\tgetchar();\n\n\tdo {\n\t\t// menu\n\t\tprintf(\"CLIENT MENU:\\n\");\n\t\tprintf(\"t - text message:\\n\");\n\t\tprintf(\"c - change connection:\\n\");\n\t\tprintf(\"f - send faulty packet:\\n\");\n\t\tprintf(\"d - doimplementacia:\\n\");\n\t\tprintf(\"e - exit program:\\n\");\n\t\tc = getchar();\n\t\tgetchar();\n\t\tswitch (c) {\n\t\tcase 't':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_text(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'c':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tchange_conn(s, si_other, slen);\n\t\t\tc = 'e';\n\t\t\tbreak;\n\t\tcase 'f':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_faulty_packet(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'd':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tdoimplementacia(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'e':\n\t\t\treturn 1;\n\t\t}\n\t} while (c != 'e');\n\t\n\tclosesocket(s);\n\tWSACleanup();\n\treturn 0;\n}", "__index_level_0__": 21, "concepts": ["multithreading", "error handling with exceptions", "object construction", "function composition"], "parsing_result": [{"instruction": "Write a Python class, `MultiThreadDownloader`, that provides a convenient way to download multiple files concurrently. The class should accept a list of URLs, a maximum number of concurrent downloads, and a callback function that is called for each downloaded file. The class should also include a method to start downloading the files. The class should handle error conditions, such as file access errors and network errors, by using a proper exception handling strategy.\n\nImplement the class by using the Python threading module, which provides the necessary tools for multithreading and error handling. The class should contain a list of URLs, the maximum number of concurrent downloads, and a callback function for each downloaded file. The class should also contain a queue of URLs and a dictionary to store the downloaded files. When the class is instantiated, the constructor should initialize the list of URLs and the maximum number of concurrent downloads. The class should also include a method, `download_files()`, that starts downloading the files in the list using multithreading. The `download_files()` method should use a while loop to check if the queue is empty. If the queue is not empty, the method should pop the next URL from the queue and create a `Thread` object to download the file using the `urllib.request.urlretrieve()` function. The `Thread` object should be added to a pool of threads using the Python `threading.Thread` class. The method should wait for the thread to complete using the `thread.join()` method. Once the thread is finished, the method should call the callback function for the downloaded file, passing the file path and the downloaded contents as arguments.\n\nThe class should also include a method, `add_file(url)`, that adds a new URL to the list of URLs. The method should append the URL to the queue, and the `download_files()` method should pick up the new URL when it checks the queue.\n\nThe class should provide a method, `set_callback(callback)`, that sets the callback function for the downloaded files. The method should set the callback function for the `download_files()` method."}, {"instruction": "Develop a Python class `ThreadWorker` that manages a task for asynchronous execution. The class should support running the task asynchronously on multiple threads and return the results once the task is completed. The class should have a method `submit_task` that accepts a function as an argument. The method should be responsible for managing the task execution, catching any errors that might occur during execution, and returning the result.\n\nThe class should also support the ability to add additional custom threads to the worker to handle additional tasks. The class should also provide a method to get the current status of the worker, indicating whether the task has been completed or not. All the methods should be implemented using multithreading to ensure that multiple threads are used for asynchronous execution."}, {"instruction": "Create a Python class `WorkerPool` that manages a pool of workers, which are individual threads. The workers should accept an arbitrary function `f` and a list `args` of arguments for the function. The workers should execute the function with the given arguments in parallel, returning the results afterwards. The class should support adding workers to the pool, removing workers from the pool, as well as querying the pool for the number of free and busy workers.\n\nImplement the class using multithreading to achieve parallel execution for the workers. Handle exceptions gracefully and track the number of free and busy workers in the pool. Provide clear error handling for unexpected inputs, such as invalid function or arguments, and ensure that the pool is not corrupted after handling errors."}, {"instruction": "Design a Python class `FileWatcher` that subscribes to a file and monitors changes. The class should support multiple file subscriptions, detecting changes in the file and logging them.\n\nTo work properly, the class should handle exceptions and provide clear error messages. Additionally, it should allow for function composition, where multiple functions can be composed together to handle the change events.\n\nThe class should also be able to handle multiple subscriptions to different files."}, {"instruction": "Design a Python class `ThreadPool` that manages a pool of worker threads for performing asynchronous operations. Each thread is configured with a corresponding task function that is assigned to it. The thread pool supports adding a task function to the queue, waiting for a result, and aborting the pool. It also provides the class methods `submit(self, func, *args, **kwargs)` and `wait()` to allow functions to be submitted to the pool and wait for the results, respectively.\n\nThe class should be implemented with the following attributes:\n- `self.queue`: a queue object used to manage tasks.\n- `self.pool`: a list of worker threads, each configured with a task function.\n- `self.active_job`: an integer variable that keeps track of the number of active tasks.\n- `self.wait_jobs`: a list of task results waiting to be returned.\n\nIt should also support the following class methods:\n- `submit(self, func, *args, **kwargs)`: submits a task function to the queue and starts the corresponding worker thread.\n- `wait()`: waits for all active tasks to complete before returning a list of all task results.\n\nThe class should handle errors gracefully and log exceptions with a warning message."}, {"instruction": "Design a Python class called `MultiThreadExec` that allows the user to run multiple threads concurrently and collect results in the main thread. The class should support running multiple threads in parallel, which can be specified through the `threads` argument when initializing the class. Each thread runs a separate task, which can be specified by using the `runnable` argument. For example, the following code creates a `MultiThreadExec` instance with two threads and a 3-second sleep task:\n```\nexecutor = MultiThreadExec(\n    threads=2, runnable=functools.partial(time.sleep, 3))\n```\nThe class should handle exceptions gracefully, such as when a thread is unable to run due to invalid arguments. Additionally, the class should provide a `join` method to wait for all threads to finish running."}, {"instruction": "Create a Python class called `PotentialField` that represents a two-dimensional potential field. The class should support the following operations:\n- `update_boundary`: update the boundary of the field with the specified coordinates and radius\n- `compute_potential`: compute the potential at a given coordinate\n\nThe `update_boundary` method should take three arguments: `x`, `y`, and `radius`. The `compute_potential` method should take two arguments: `x` and `y`. The `update_boundary` method should override the boundary with a cylinder. The radius represents the maximum distance from the boundary to which the field is defined. The field should be computed based on the potential function `f(r) = r^2` where `r` is the distance from the boundary. This potential function represents a radial attraction force, which is induced by the boundary.\n\nThe `compute_potential` method should compute the potential at a given coordinate `x` and `y` by evaluating the potential function on a grid of equally-spaced coordinates. The grid should be created by first converting the boundary into a set of points. Then, the potential at each point should be computed using the potential function and the coordinate `x` and `y`. Finally, the potential should be averaged over the entire grid.\n\nThe `update_boundary` method should return a `Boundary` object that encapsulates the properties of the boundary including the radius. The `compute_potential` method should return a float representing the potential at the specified coordinate.\n\nThe class should handle all exceptions and errors properly, ensuring consistency in the results when different operations are applied to the same instance."}, {"instruction": "Develop a Python class `AdaptiveQueue` that implements a queue data structure for storing integers. The class has two important attributes: a maximum capacity and a queue list. The maximum capacity specifies the maximum number of elements that can be stored in the queue. The queue list stores the elements of the queue as a Python list.\n\nThe class should be able to add elements to the queue, remove elements from the queue, and retrieve the size of the queue. Additionally, the class should support manual dequeueing (when the queue is empty) and automatic dequeueing (when the queue is full). When the queue is full, the class should automatically remove the oldest elements (the first elements in the queue) to make room for new elements.\n\nThe class should also support the following behaviors:\n- Store new elements in the queue when the queue is empty.\n- Remove elements from the queue when the queue is full and the dequeue method is called.\n- Raise an exception when the dequeue method is called on an empty queue.\n\nThe class should handle erroneous inputs gracefully, such as negative integers for capacity or empty strings for the initialization. Additionally, implement the `__str__` method to return a formatted string showing the current size and list of elements in the queue."}, {"instruction": "Develop a Python program that initializes a series of threads for processing data. Each thread should read data from a file and perform a complex operation on each line of the file. The program should handle exceptions that may arise during the execution of the tasks. It should also be able to recover from such failures, ideally by re-executing the same task.\n\nThe program should be implemented as a class with the following features:\n\n- It should be able to read data from a file containing one task per line.\n- It should be able to perform a complex operation on each line of the file.\n- It should be able to handle exceptions that may arise during the execution of the tasks.\n- It should be able to recover from such failures by re-executing the same task."}, {"instruction": "Develop a Python class `TaskManager` that manages a collection of tasks. The class should expose methods for adding, querying, and removing tasks. All the functionalities are composed of other methods. The class should allow for the definition of tasks to be passed in as function objects, which are executed in parallel. Each task can be scheduled to run at a later time.\n\nThe class should have methods for adding tasks to the task collection. These methods take a function object and an optional time offset, and schedule the task to be executed at that time. The class should also have methods for removing tasks from the collection.\n\nAll the functionalities are composed of other methods. The class should expose methods that allow for task collection querying and retrieval. These methods take a function object or a time offset as an argument to find matching tasks in the collection.\n\nThe class should have a method that allows for the execution of all tasks, without waiting for their completion. The method should handle errors gracefully by printing out an error message for tasks that cannot be executed."}, {"instruction": "Create a Python class that emulates a simple bank account, using multithreading to simulate a concurrent environment. The class should support the following operations:\n- `create_account(self, balance)`: Create an account with a specified initial balance. The method should return the account number that is assigned to this account.\n- `deposit(self, account_number, amount)`: Deposit money in an account with a specified account number. The method should return the current balance after the deposit and raise an exception if the account does not exist or if the deposit amount is negative.\n- `withdraw(self, account_number, amount)`: Withdraw money in an account with a specified account number. The method should return the current balance after the withdrawal and raise an exception if the account does not exist, if the withdrawal amount exceeds the account balance, or if the withdrawal amount is negative.\n- `transfer(self, from_account_number, to_account_number, amount)`: Transfer money from an account with a specified `from_account_number` to an account with a specified `to_account_number`. The method should return the current balance after the transfer and raise an exception if any of the accounts do not exist, if the transfer amount exceeds the balance in the `from_account_number` account, or if the transfer amount is negative.\n\nThe class should maintain a list of all accounts that have been created and keep track of the current balance of each account. The class should handle exceptions and errors in a consistent and logical way, ensuring that the user is informed of any problems that occur during the execution of the operations."}, {"instruction": "Develop a class `Incrementor` that supports incrementing an integer `count` in parallel. The class should support setting a starting value for `count` and a number of `threads`. The class should also allow setting the increment step size for all threads. Each worker thread should increment `count` by the step size, until `count` reaches the specified maximum value. The class should handle concurrent access to the `count` variable by multiple threads, ensuring that the value remains consistent across all threads.\n\nThe class should be prepared for handling errors in the concurrent access to the `count` variable. For example, the maximum value of `count` might be too high for the number of threads used, or an invalid increment step size might be used. The class should provide error handling mechanisms to gracefully handle these exceptions and provide meaningful error messages to the user.\n\nThe class should also provide a central method `run()` that executes all the threads in parallel and returns a list of the total counts for each thread.\n\nThe `run()` method should be protected against any unexpected errors. The class should provide error handling mechanisms to gracefully handle any unexpected exceptions.\n\n#"}, {"instruction": "Create a Python class called `DataCluster` that represents a collection of numerical data points. The class should provide various methods for manipulating and accessing the data, such as adding new data points, removing data points, finding the mean, calculating the standard deviation, and filtering outliers. The class should also support multithreading, where multiple threads can access and manipulate the data simultaneously.\n\nThe class should encapsulate the data points as a list, and provide appropriate getter and setter methods for accessing the list. It should also provide methods for adding and removing data points, such as `add_data(self, data)`, `remove_data(self, data)`, and `remove_all_data(self)`. It should also provide methods for calculating the mean, standard deviation, and filtering outliers, such as `get_mean(self)`, `get_std(self)`, and `filter_outliers(self, outlier_cutoff)`.\n\nThe class should also provide methods for multithreading, such as `parallel_add_data(self, data_list)`, which adds a list of data points in parallel, and `parallel_remove_data(self, data_list)`, which removes a list of data points in parallel. It should also use the `concurrent.futures` module to handle multithreading.\n\nThe class should also provide error handling for incorrect input data, such as when the input is not a list of numerical data points. The class should also provide logging for debugging."}, {"instruction": "Develop a Python class that runs as a background process and manages a web server that receives requests from other processes and sends back the response. The class should support various operation modes such as single-threaded (with a single request at a time) and multi-threaded (with multiple requests handled in parallel). The operations are conducted through the `start_server` method, which accepts the required parameters to run the server. The class should handle errors and exceptions so that the server process can continue to function even if it encounters an error or crash.\n\nCome up with a detailed design of the class by considering the following aspects:\n- How should the class handle the request?\n- What operations should the class support?\n- How should the class handle errors and exceptions?\n- How should the server begin running?"}, {"instruction": "Design a Python class `Calculator` with two fields, `x` and `y`, and an `add` method that adds the two values and returns the result. The class should also support subtracting two values and multiplying them. You should employ a multithreaded approach to handle heavy computations. Each thread should be initialized with a specific pair of operands, and the result should be returned upon completion.\n\nThe class should also implement the `__init__` method to accept a list of operations as input. These operations should be applied sequentially to the operands in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Addition: `Calculator([1, 2])`\n- Subtraction: `Calculator([\"subtract:3\"])`\n- Multiplication: `Calculator([\"multiply:3\"])`\n\nFor each operation, convert the operand to an integer and perform the specific mathematical operation. If an operation is not supported, the class should throw an exception to notify the user about the error."}, {"instruction": "Design a Python class `FibonacciGenerator` that computes the Fibonacci sequence of a given length. The class should support multithreading and provide a convenient way to access the sequence.\n\nThe class has two internal attributes: `thread_lock` and `sequence`. The `thread_lock` ensures that only one thread can access the sequence at a time. The `sequence` stores the generated Fibonacci sequence.\n\nThe class constructor accepts a single argument, `length`, representing the desired sequence length. The constructor initializes the `sequence` attribute as an empty list, and then starts a new thread to generate the sequence in the background.\n\nThe `generate_sequence` method is responsible for generating the sequence, by iteratively computing the next Fibonacci number using the previous two numbers.\n\nThe `get_sequence` method is responsible for providing the sequence to the caller. It checks if the `sequence` attribute is empty, and if so, waits for the thread to generate the sequence before returning it.\n\nThe `wait_for_sequence` method is used internally by the `get_sequence` method to wait for the sequence to be available, before returning it.\n\nThe `set_sequence` method is used by the `generate_sequence` method to set the sequence attribute. This method is invoked by the `wait_for_sequence` method, which checks if the `sequence` attribute is empty before returning.\n\nThe `run` method is invoked by the `generate_sequence` method to start the thread. It calls the `wait_for_sequence` method to wait for the sequence to be available, and then generates the sequence using the `generate_sequence` method."}, {"instruction": "Develop a Python class `StringQueue` that provides basic functionality for managing a queue of strings. The class should maintain an internal state that is initially an empty queue. The class should support adding new strings to the queue through a `put` method and removing strings from the queue through a `get` method. Additionally, the class should support customizing the queue's behavior through a `set_policy` method that accepts two arguments: a `policy_func` and a `policy_args` parameter. The `set_policy` method should be called prior to any `put` or `get` operations.\n\nThe `policy_func` parameter is a function that takes the current queue state as input and returns a boolean indicating whether to allow the `put` or `get` operation to proceed. The `policy_args` parameter is a tuple of arguments that are passed to the `policy_func` function. The queue policy function should be composed with the `put` and `get` operations. The queue should continue to function normally if the policy function returns `True`, but it should be blocked if the policy function returns `False`.\n\nThe class should handle erroneous inputs gracefully, such as incorrect policy function formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the queue and the current queue policy."}, {"instruction": "Design a Python class `WebScraper` to handle web scraping operations. The class should provide a central method `scrape_website(url: str, num_pages: int)` to perform web scraping on a specific website. The method should return an array of strings containing the content of the specified number of pages, or raise a `NotEnoughPagesException` exception when the specified number of pages is not available.\n\nImplement a function `scrape_pages_concurrently(urls: List[str], num_pages: int)` that executes `scrape_website` in parallel using multithreading. The function should return an array of strings containing the content of the specified number of pages after scraping all the available pages."}, {"instruction": "Develop a Python class `ConcurrentDownloader` that enables concurrent downloads of multiple files in separate threads. The class should support downloading files from the specified URLs in parallel using multithreading. It should handle errors gracefully by catching exceptions and printing error messages, while providing a high-level API for initiating the downloads.\n\nThe class should have a constructor that accepts a list of URLs and a concurrency level as input parameters. The class should also have a method `download_files` that performs the actual downloading of files in parallel and returns a list of `threading.Thread` objects. Each thread in the list should be used to download a single file, and the `download_files` method should wait for all threads to complete before returning.\n\nThe implementation of the `download_files` method should be based on a strategy that allows multiple threads to download files concurrently without blocking each other. This strategy involves creating a `threading.Semaphore` object with a concurrency level of `concurrency_level`, which controls the number of concurrent threads at any given time. The `download_files` method can then use the semaphore to control access to the shared resources, and each thread can acquire a lock on the semaphore before attempting to download a file. When all threads have acquired a lock, they can start downloading the files in parallel, and the semaphore can be released after each thread is done downloading. This way, multiple threads can download files concurrently without blocking each other.\n\nThe constructor of the class should also take a `max_attempts` parameter that specifies the maximum number of attempts to download a file before raising an exception. If the maximum number of attempts is exceeded, the `download_files` method should raise an exception. This provides a mechanism to handle scenarios where a file may temporarily be unavailable or encounter errors during the download process.\n\nFinally, the `ConcurrentDownloader` class should have a `download_and_verify` method that combines the functionality of `download_files` and `verify_downloads` to download and verify multiple files in parallel. This method should accept a URL list, a concurrency level, and a maximum number of attempts as input parameters. The method should use the `download_files` and `verify_downloads` methods to download and verify the files, and return a list of 2-element tuples containing the URL and verification status. The `download_and_verify` method should also handle errors gracefully by catching exceptions and printing error messages.\n\nThe `download_and_verify` method should work as follows:\n\n1. The method should create a `threading.Semaphore` object with a concurrency level of `concurrency_level`.\n2. The method should use the `download_files` method to download the files in parallel.\n3. After downloading all files, the method should use a for loop to iterate over each file URL.\n4. For each URL, the method should create a thread that calls the `verify_download` method to verify the download of the file.\n5. After all threads are created, the method should use the `semaphore` semaphore to control access to the shared resources, and each thread can acquire a lock on the semaphore before attempting to verify the download.\n6. If the file URL is verified successfully, the method should update the corresponding entry in the tuple list with the verified status.\n7. Otherwise, the method should raise an exception and print an error message.\n\nThe `download_and_verify` method should return the list of 2-element tuples containing the URL and verification status."}, {"instruction": "Create a Python class that manages a collection of items. The class should support item retrieval and removal, as well as item insertion and deletion. The insertion and removal operations should be performed in a separate thread, while the retrieval operation is executed in the main thread. The execution of the retrieval operation should be synchronized with the insertion and removal operations. If necessary, you can use a lock or a conditional variable to manage the synchronization.\n\nAdditionally, implement the class with the following methods:\n- `set_capacity(self, capacity: int)` - Sets the capacity for the collection.\n- `get_count(self)` - Returns the number of items in the collection.\n- `get_capacity(self)` - Returns the capacity of the collection."}, {"instruction": "Write a Python class to simulate a website error logging system. The class should be initialized with the name of the error domain, such as a website name. The class should support logging errors to the error log file, and support dynamic logging frequency, which can be set during the construction. When an error is logged, the class should write the error information to the log file in the following format: \"[timestamp] [error domain] [error message]\". The timestamp should be formatted using the `datetime.datetime.now()` function.\n\nThe class should handle errors gracefully and log the error to the error log file, using `try` and `except` blocks. Additionally, the class should implement a `log_error` method, which takes the error message as an argument, and logs it to the error log file."}, {"instruction": "Write a Python class `Timeout` that mimics the behavior of a timeout. The `Timeout` class should accept a function as an argument, and its execution should be terminated after a specified time limit (in seconds), or after the function execution finishes. If the function execution is terminated, the `Timeout` class should raise a `TimeoutError` exception. Implement the `__call__` method to execute the function, and use a separate thread to check the function's execution status and trigger the `TimeoutError` exception if necessary."}, {"instruction": "Develop a Python class `WordFrequencyCounter` that counts the frequency of unique words in a list of strings. The class should maintain an internal state that is initially an empty dictionary. The class should support two methods:\n- `update_counts(self, word_list: List[str])` that updates the internal state of the class by adding word counts from the given list. Each word in the list should be added to the internal dictionary with an initial value of 1 for the first time. This method should be non-blocking and run in parallel with other updates.\n- `get_counts(self) -> Dict[str, int]` that returns the updated internal state as a dictionary of word counts. This method should be blocking and wait for the updates to complete before returning the result.\n\nThe class should handle erroneous inputs gracefully, such as incorrect input formats and empty lists, and use exceptions for error handling. Additionally, implement the `__str__` method to return a formatted string showing the current frequency counts."}, {"instruction": "Develop a Python class `MultiThread` that manages multiple threads for computation. The class should support starting and stopping threads, as well as adding and removing threads from the pool of existing threads.\n\nEach thread is represented by a function and its arguments. The function is invoked by a threading pool with the specified arguments, returning a result from the function call. The class should handle exceptions gracefully and provide clear error messages in the event of unexpected behavior.\n\nThe implementation should consider the case where threads are not added and removed, only started or stopped. This requirement is essential for correctly managing the threads."}, {"instruction": "Develop a Python class `SynchronizedQueue` that implements a thread-safe queue. The class should support enqueueing and dequeueing operations on the queue, as well as a custom `is_empty` method to determine if the queue is empty. The class should also provide a `to_list` method to return the list of elements in the queue. Enqueueing and dequeueing operations should be performed in thread-safe manner using multithreading. Additionally, the class should provide error handling and exception management in case of improper use."}, {"instruction": "Create a Python program that runs a simulation of a multi-threaded queueing system. Each thread in the simulation spawns a new instance of a `Process` object and executes a `run()` method. The `Process` object has a `capacity` attribute that determines the maximum number of tasks the process can handle at a time. The `run()` method generates random tasks with different processing times and each task is assigned to a available process. The `Process` object blocks when there are no available processes or when a process is already processing a task, in which case the task is placed in the `waiting_queue`. When a process has finished processing a task, it releases the lock on it and the next task is assigned to it if there is any.\n\nThe program should run until no more tasks are available and after each `Process` object finishes all the tasks in the `waiting_queue`. The simulation should continue until all processes are terminated."}, {"instruction": "Create a Python class `ParallelCalculator` that supports execution of multiple mathematical operations in parallel. Each operation is a function that takes two floating-point numbers as arguments and returns their sum, product, or quotient. The class should maintain an internal state that is initially an empty list of operations. The class should provide a method `apply_operation(self, op: Callable[[float, float], float])` that executes the operation passed as an argument and appends the function to the internal list. Additionally, the class should provide a method `calculate(self, operand1: float, operand2: float, op: str)` that executes the operations in the list and returns the result as a float. The method `calculate` should handle input validation by checking the argument types and validating the operation argument.\n\nThe class should handle erroneous inputs gracefully, such as incorrect input types or mismatched operation names. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it."}, {"instruction": "Develop a Python class `UrlReader` that manages a URL (string) and a proxy (string) and returns a response from the URL using the proxy. The class should have a constructor that takes a URL and a proxy as arguments, validates the input using assertions, and sets the internal state of the class accordingly.\n\nThe class should also have a method `read_json` that reads a JSON response from the URL. The method should handle exceptions and errors gracefully.\n\nThe class should support multiple threads, so that multiple requests can be made simultaneously with different URLs and proxies."}, {"instruction": "Design a Python class `Vector` that represents a vector in 2-dimensional space. The class should be initialized with a pair of coordinates as `(x, y)` tuples. The class should support the following operations:\n- `Vector.add(x, y)`: add a scalar `x` to the vector's `x` coordinate and a scalar `y` to the `y` coordinate\n- `Vector.subtract(x, y)`: subtract a scalar `x` from the vector's `x` coordinate and a scalar `y` from the `y` coordinate\n- `Vector.multiply(x, y)`: multiply the vector's `x` coordinate by a scalar `x` and the `y` coordinate by a scalar `y`\n- `Vector.length()`: calculate the length of the vector\n- `Vector.add(vector)`: add another vector to the current one\n- `Vector.subtract(vector)`: subtract another vector from the current one\n- `Vector.multiply(vector)`: multiply the vector by another vector\n- `Vector.equals(vector)`: check if two vectors are equal\n- `Vector.clone()`: create a copy of the vector\n- `Vector.print()`: print the vector\n\nThe class should handle errors and exceptions gracefully, such as value errors, type errors, and invalid input. Additionally, implement the `__str__` method to return a formatted string representing the current vector."}, {"instruction": "Design a Python class `ConcurrentTaskManager` for managing multiple concurrent tasks. The class should support adding and removing tasks from the manager and managing the execution of all the tasks in a separate thread. The class should ensure that all tasks are executed sequentially, regardless of which thread initiates the execution of each task. It should also support handling exceptions and terminating tasks that might encounter errors during execution.\n\nThe `ConcurrentTaskManager` class should have the following public methods:\n- `add_task(function: Callable, *args, **kwargs)` - Adds a task to the manager, specifying the function to be executed and the arguments to be passed to the function.\n- `remove_task(id: int)` - Removes the task from the manager with the specified ID.\n- `execute(timeout: float)` - Executes all the tasks in a separate thread, with the specified timeout."}, {"instruction": "Develop a Python class `FibonacciNumber` that computes Fibonacci numbers based on the Fibonacci formula. The class should maintain an internal state that is initially set to 0. The class should provide methods to generate the next Fibonacci number, returning a tuple with the current Fibonacci number and the next one. Define custom exceptions for invalid inputs and other unforeseen circumstances. Provide a class constructor that initializes the class with a starting number.\n\nWrite tests to ensure that the class works as expected, including corner cases and error handling."}, {"instruction": "Develop a Python class `DataCollector` that provides a mechanism for concurrent data collection and processing. The class should maintain a collection of data, represented as a list of key-value pairs in a dictionary format. The class should support adding new data to the collection with a key and value as arguments, and retrieving the entire collection. The collection should be updated concurrently by multiple threads of execution, each of which can add new data to the collection.\n\nThe class should handle potential errors gracefully, such as duplicate keys, illegal input, and concurrent modification of the collection. Additionally, it should provide a method `process_data` that accepts a function as an argument, and processes the data concurrently by applying the function to each entry in the collection. The method `process_data` should also handle erroneous inputs gracefully and report any exceptions that occur during the processing."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: SOAP, SOAP server programming, binary string hashing, type conversion, default argument handling, error handling\n/README.md\n# Web Mining\nWeb Mining Project for the course \"Web Mining for Science\"\n\n## How to run\n\n### Download the project\n\nDownload the project at the terminal with:\n\n```\ngit clone https://github.com/sanchezciv/web-mining\n```\n\n### Install the required packages\n\nThe project requires [Python](https://www.python.org/) and [Flask](https://flask.palletsprojects.com/en/2.1.x/).\n\nFor this purpose, a virtual environment is required. Create one with the following command:\n\n```\npython -m venv venv\n```\n\nTo activate the virtual environment, execute:\n\n```\nsource venv/bin/activate\n```\n\nThen, install the dependencies with:\n\n```\npip install -r requirements.txt\n```\n\n### Run the web application\n\nTo run the web application, execute:\n\n```\npython app.py\n```\n\nYou should get the message:\n\n```\nRunning on http://localhost:5000/ (Press CTRL+C to quit)\n```\n\n### Using the application\n\nThe application contains two main pages.\n\n1. `/` (Home): In this page, you can select the topic to search for in the selected search engine.\n2. `/results` (Results): In this page, you can see the results from the selected search engine for the selected topic.\n/app.py\nfrom flask import Flask, render_template, request, url_for\nimport requests\n\napp = Flask(__name__)\n\n# Dictionary with the search engines and the URL's for each\nsearch_engines = {\n    \"google\" : \"https://www.google.com/search?q={0}&hl=en&tbm=bks\", \"bing\" : \"https://www.bing.com/search?q={0}&hl=en-US&cc=us&setlang=en-US&go=&qs=n&form=QBLH&pq={0}&sc=8-41&sk=&cvid=7C57389B74C042618919C8B20140B149\", \"yahoo\" : \"https://search.yahoo.com/search?p={0}&fr=uh3_wmp_tp_res_search&ei=UTF-8&va_h=l\", \"duckduckgo\" : \"https://duckduckgo.com/?q={0}&t=h_&ia=web\", \"yandex\" : \"https://yandex.com/search/?lr=213&text={0}\", \"ask\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"bing_image\" : \"https://www.bing.com/images/search?q={0}&FORM=HDRSC2\", \"yandex_image\" : \"https://yandex.com/images/search?lr=213&text={0}\", \"ask_image\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"google_image\" : \"https://www.google.com/search?tbm=isch&q={0}\"\n}\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\", search_engines=search_engines)\n\n@app.route(\"/results\", methods=[\"POST\"])\ndef results():\n    topic = request.form[\"topic\"]\n    search_engine = request.form[\"search_engine\"]\n    url = search_engines[search_engine].format(topic)\n    r = requests.get(url)\n    html_page = r.text\n    return render_template(\"results.html\", topic=topic, search_engine=search_engine, html=html_page)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\n### Task", "fingerprint": null, "content": {"code": "soap_in__ns1__loginCmsResponse(struct soap *soap, const char *tag, _ns1__loginCmsResponse *a, const char *type)\n{\n\t(void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_in(soap, tag, 0, NULL))\n\t\treturn NULL;\n\ta = (_ns1__loginCmsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_afip__ns1__loginCmsResponse, sizeof(_ns1__loginCmsResponse), soap->type, soap->arrayType, afip_instantiate, afip_fbase);\n\tif (!a)\n\t\treturn NULL;\n\tif (soap->alloced && soap->alloced != SOAP_TYPE_afip__ns1__loginCmsResponse)\n\t{\tsoap_revert(soap);\n\t\t*soap->id = '\\0';\n\t\treturn (_ns1__loginCmsResponse *)a->soap_in(soap, tag, type);\n\t}\n\tif (soap->alloced)\n\t\ta->soap_default(soap);\n\tsize_t soap_flag_loginCmsReturn1 = 1;\n\tif (soap->body && *soap->href != '#')\n\t{\n\t\tfor (;;)\n\t\t{\tsoap->error = SOAP_TAG_MISMATCH;\n\t\t\tif (soap_flag_loginCmsReturn1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))\n\t\t\t{\tif (soap_in_std__string(soap, \"ns1:loginCmsReturn\", &a->_ns1__loginCmsResponse::loginCmsReturn, \"xsd:string\"))\n\t\t\t\t{\tsoap_flag_loginCmsReturn1--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsoap_check_result(soap, \"ns1:loginCmsReturn\");\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t\tsoap->error = soap_ignore_element(soap);\n\t\t\tif (soap->error == SOAP_NO_TAG)\n\t\t\t\tbreak;\n\t\t\tif (soap->error)\n\t\t\t\treturn NULL;\n\t\t}\n\t\tif (soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t\tif ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginCmsReturn1 > 0))\n\t\t{\tsoap->error = SOAP_OCCURS;\n\t\t\treturn NULL;\n\t\t}\n\t}\n\telse if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')\n\t{\tsoap->error = SOAP_OCCURS;\n\t\treturn NULL;\n\t}\n\telse\n\t{\ta = (_ns1__loginCmsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_afip__ns1__loginCmsResponse, SOAP_TYPE_afip__ns1__loginCmsResponse, sizeof(_ns1__loginCmsResponse), 0, afip_finsert, afip_fbase);\n\t\tif (soap->body && soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\treturn a;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_out__ns1__loginCmsResponse"}, "id": 73, "seed": "soap_in__ns1__loginCmsResponse(struct soap *soap, const char *tag, _ns1__loginCmsResponse *a, const char *type)\n{\n\t(void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_in(soap, tag, 0, NULL))\n\t\treturn NULL;\n\ta = (_ns1__loginCmsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_afip__ns1__loginCmsResponse, sizeof(_ns1__loginCmsResponse), soap->type, soap->arrayType, afip_instantiate, afip_fbase);\n\tif (!a)\n\t\treturn NULL;\n\tif (soap->alloced && soap->alloced != SOAP_TYPE_afip__ns1__loginCmsResponse)\n\t{\tsoap_revert(soap);\n\t\t*soap->id = '\\0';\n\t\treturn (_ns1__loginCmsResponse *)a->soap_in(soap, tag, type);\n\t}\n\tif (soap->alloced)\n\t\ta->soap_default(soap);\n\tsize_t soap_flag_loginCmsReturn1 = 1;\n\tif (soap->body && *soap->href != '#')\n\t{\n\t\tfor (;;)\n\t\t{\tsoap->error = SOAP_TAG_MISMATCH;\n\t\t\tif (soap_flag_loginCmsReturn1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))\n\t\t\t{\tif (soap_in_std__string(soap, \"ns1:loginCmsReturn\", &a->_ns1__loginCmsResponse::loginCmsReturn, \"xsd:string\"))\n\t\t\t\t{\tsoap_flag_loginCmsReturn1--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsoap_check_result(soap, \"ns1:loginCmsReturn\");\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t\tsoap->error = soap_ignore_element(soap);\n\t\t\tif (soap->error == SOAP_NO_TAG)\n\t\t\t\tbreak;\n\t\t\tif (soap->error)\n\t\t\t\treturn NULL;\n\t\t}\n\t\tif (soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t\tif ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginCmsReturn1 > 0))\n\t\t{\tsoap->error = SOAP_OCCURS;\n\t\t\treturn NULL;\n\t\t}\n\t}\n\telse if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')\n\t{\tsoap->error = SOAP_OCCURS;\n\t\treturn NULL;\n\t}\n\telse\n\t{\ta = (_ns1__loginCmsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_afip__ns1__loginCmsResponse, SOAP_TYPE_afip__ns1__loginCmsResponse, sizeof(_ns1__loginCmsResponse), 0, afip_finsert, afip_fbase);\n\t\tif (soap->body && soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\treturn a;\n}", "__index_level_0__": 22, "concepts": ["SOAP", "SOAP server programming", "binary string hashing", "type conversion", "default argument handling", "error handling\n/README.md\n# Web Mining\nWeb Mining Project for the course \"Web Mining for Science\"\n\n## How to run\n\n### Download the project\n\nDownload the project at the terminal with:\n\n```\ngit clone https://github.com/sanchezciv/web-mining\n```\n\n### Install the required packages\n\nThe project requires [Python](https://www.python.org/) and [Flask](https://flask.palletsprojects.com/en/2.1.x/).\n\nFor this purpose", "a virtual environment is required. Create one with the following command:\n\n```\npython -m venv venv\n```\n\nTo activate the virtual environment", "execute:\n\n```\nsource venv/bin/activate\n```\n\nThen", "install the dependencies with:\n\n```\npip install -r requirements.txt\n```\n\n### Run the web application\n\nTo run the web application", "execute:\n\n```\npython app.py\n```\n\nYou should get the message:\n\n```\nRunning on http://localhost:5000/ (Press CTRL+C to quit)\n```\n\n### Using the application\n\nThe application contains two main pages.\n\n1. `/` (Home): In this page", "you can select the topic to search for in the selected search engine.\n2. `/results` (Results): In this page", "you can see the results from the selected search engine for the selected topic.\n/app.py\nfrom flask import Flask", "render_template", "request", "url_for\nimport requests\n\napp = Flask(__name__)\n\n# Dictionary with the search engines and the URL's for each\nsearch_engines = {\n    \"google\" : \"https://www.google.com/search?q={0}&hl=en&tbm=bks\"", "\"bing\" : \"https://www.bing.com/search?q={0}&hl=en-US&cc=us&setlang=en-US&go=&qs=n&form=QBLH&pq={0}&sc=8-41&sk=&cvid=7C57389B74C042618919C8B20140B149\"", "\"yahoo\" : \"https://search.yahoo.com/search?p={0}&fr=uh3_wmp_tp_res_search&ei=UTF-8&va_h=l\"", "\"duckduckgo\" : \"https://duckduckgo.com/?q={0}&t=h_&ia=web\"", "\"yandex\" : \"https://yandex.com/search/?lr=213&text={0}\"", "\"ask\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\"", "\"bing_image\" : \"https://www.bing.com/images/search?q={0}&FORM=HDRSC2\"", "\"yandex_image\" : \"https://yandex.com/images/search?lr=213&text={0}\"", "\"ask_image\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\"", "\"google_image\" : \"https://www.google.com/search?tbm=isch&q={0}\"\n}\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\"", "search_engines=search_engines)\n\n@app.route(\"/results\"", "methods=[\"POST\"])\ndef results():\n    topic = request.form[\"topic\"]\n    search_engine = request.form[\"search_engine\"]\n    url = search_engines[search_engine].format(topic)\n    r = requests.get(url)\n    html_page = r.text\n    return render_template(\"results.html\"", "topic=topic", "search_engine=search_engine", "html=html_page)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)"], "parsing_result": [{"instruction": "Your task is to implement two web applications that have the following functionalities:\n\n- A web application (Flask application) to search for books from the Google Books API (https://developers.google.com/books/docs/v1/using) or the Microsoft Azure Books API (https://docs.microsoft.com/en-us/azure/search/search-get-started-azure-books-python) and parse the returned data, and display the results in a web page.\n- A web application (Flask application) that search for images from the Google Images API (https://developers.google.com/image-search/v1/jsondevguide) and the Microsoft Azure Search API (https://docs.microsoft.com/en-us/azure/search/search-what-is-azure-search) and displays the results in a web page.\n\nThe web application should contain the following:\n\n- a homepage with a search form that has a text field for the user to input a book, and a dropdown menu for the user to select the search engine they would like to use. The dropdown menu includes a list of the search engines you will implement.\n- a results page that displays the results from the selected search engine for the selected book.\n- the web application should contain at least one unit test.\n\n### Requirements\n\nFor the web application, your team should use the following packages:\n\n- Flask (https://flask.palletsprojects.com/en/2.1.x/)\n- requests (https://pypi.org/project/requests/)\n- pytest (https://docs.pytest.org/en/latest/)\n\nWe will evaluate your code based on the technical documentation of your packages, the tests you implemented, and the quality of your code. We will also evaluate the functionality and the design of your web application.\n\n### Submission\n\nYour submission should contain the following:\n- the code for the web application, including the HTML templates, CSS files, and any other assets.\n- a README.md file that describes how to run the web application, and any other instructions you find necessary.\n- a Python script that runs the unit tests for your web application."}, {"instruction": "The task is to develop a web application that allows users to search for a\ntopic of their choice on one of the search engines, and get the results as HTML\ncode. The web application should consist of two main pages:\n\n1. Home: This page should allow the user to select the topic to search for and\n   the search engine to use.\n2. Results: This page should display the results from the selected search engine\n   for the selected topic.\n\nThe application should utilize the Flask framework and utilize the request\nand render_template functions to render HTML templates.\n\n## Requirements\n\nThe web application should have the following features:\n\n- The user should be able to select the topic to search for and the search\n  engine to use.\n- The user should be able to submit a search request and receive the results as\n  HTML code.\n- The user should be able to view the results on the Results page.\n- The application should be able to handle errors and exceptions appropriately.\n- The application should be robust and efficient./app.py\nfrom flask import Flask, render_template, request, url_for\nimport requests\n\napp = Flask(__name__)\n\n# Dictionary with the search engines and the URL's for each\nsearch_engines = {\n    \"google\" : \"https://www.google.com/search?q={0}&hl=en&tbm=bks\", \"bing\" : \"https://www.bing.com/search?q={0}&hl=en-US&cc=us&setlang=en-US&go=&qs=n&form=QBLH&pq={0}&sc=8-41&sk=&cvid=7C57389B74C042618919C8B20140B149\", \"yahoo\" : \"https://search.yahoo.com/search?p={0}&fr=uh3_wmp_tp_res_search&ei=UTF-8&va_h=l\", \"duckduckgo\" : \"https://duckduckgo.com/?q={0}&t=h_&ia=web\", \"yandex\" : \"https://yandex.com/search/?lr=213&text={0}\", \"ask\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"bing_image\" : \"https://www.bing.com/images/search?q={0}&FORM=HDRSC2\", \"yandex_image\" : \"https://yandex.com/images/search?lr=213&text={0}\", \"ask_image\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"google_image\" : \"https://www.google.com/search?tbm=isch&q={0}\"\n}\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\", search_engines=search_engines)\n\n@app.route(\"/results\", methods=[\"POST\"])\ndef results():\n    topic = request.form[\"topic\"]\n    search_engine = request.form[\"search_engine\"]\n    url = search_engines[search_engine].format(topic)\n    r = requests.get(url)\n    html_page = r.text\n    return render_template(\"results.html\", topic=topic, search_engine=search_engine, html=html_page)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)"}, {"instruction": "1\n\n#### Properties\n\n- category: program implementation\n- language: Python\n- difficulty: easy\n- concepts: SOAP, SOAP server programming, binary string hashing, type conversion, default argument handling, error handling\n\n#### Task\n\nCreate a SOAP server that returns the Fibonacci numbers for a given sequence length.\n\n##"}, {"instruction": "Write a web application in Python that accepts a topic and a search engine as parameters and returns the results from that topic in the selected search engine.\nYou should be able to select the topic and search engine from a form on the home page, and then display the results from the selected search engine on another page.\n/requirements.txt\nclick==8.0.1\nFlask==2.0.1\ngunicorn==20.1.0\nitsdangerous==2.0.1\nJinja2==3.0.1\nMarkupSafe==2.0.1\nWerkzeug==2.0.1\nrequests==2.26.0"}, {"instruction": "ing\n\nThe project includes a collection of tasks for you to complete.\n\nEach task is a method that is defined in a class. The class itself is defined in a separate file.\n\nThe task is defined by the following properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "1 (60%)\n\nImplement a web application with a form that allows the user to search for a topic of interest in a given search engine of your choice. The search engine should be selected from a dropdown menu using the SelectField Flask extension. The results should be displayed in a table format.\n\n### Task 2 (40%)\n\nAdd a search engine of your choice to the list of search engines available in the dropdown menu.\n/README.md\n/app.py\nfrom flask import Flask, render_template, request, url_for\nimport requests\n\napp = Flask(__name__)\n\n# Dictionary with the search engines and the URL's for each\nsearch_engines = {\n    \"google\" : \"https://www.google.com/search?q={0}&hl=en&tbm=bks\", \"bing\" : \"https://www.bing.com/search?q={0}&hl=en-US&cc=us&setlang=en-US&go=&qs=n&form=QBLH&pq={0}&sc=8-41&sk=&cvid=7C57389B74C042618919C8B20140B149\", \"yahoo\" : \"https://search.yahoo.com/search?p={0}&fr=uh3_wmp_tp_res_search&ei=UTF-8&va_h=l\", \"duckduckgo\" : \"https://duckduckgo.com/?q={0}&t=h_&ia=web\", \"yandex\" : \"https://yandex.com/search/?lr=213&text={0}\", \"ask\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"bing_image\" : \"https://www.bing.com/images/search?q={0}&FORM=HDRSC2\", \"yandex_image\" : \"https://yandex.com/images/search?lr=213&text={0}\", \"ask_image\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"google_image\" : \"https://www.google.com/search?tbm=isch&q={0}\"\n}\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\", search_engines=search_engines)\n\n@app.route(\"/results\", methods=[\"POST\"])\ndef results():\n    topic = request.form[\"topic\"]\n    search_engine = request.form[\"search_engine\"]\n    url = search_engines[search_engine].format(topic)\n    r = requests.get(url)\n    html_page = r.text\n    return render_template(\"results.html\", topic=topic, search_engine=search_engine, html=html_page)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)"}, {"instruction": "1\nWrite a Web application that allows users to search for documents on the internet using a configurable search engine (see the list of available search engines on the first page). You should use the Google search engine as the default search engine.\n\n### Task 2\nUse a third-party Web API (e.g., the [Google Knowledge Graph API](https://developers.google.com/knowledge-graph)) to find the title of the search result from a given URL. For example, if a user searches for \"\" on Google, the application should display the title of the search result for the given URL."}, {"instruction": "Create a web application that provides a web interface to the search engines provided in the list above. The user should be able to search for a topic and select the search engine. The results should be presented as HTML code and colored accordingly."}, {"instruction": "1\nWrite a visualization script to plot the number of results for each search engine, using a bar chart.\n\n### Task 2\nWrite a visualization script to plot the time taken to obtain the result pages in each search engine, using a bar chart.\n\n### Task 3\nWrite a visualization script to plot the average number of results returned by each search engine, using a bar chart.\n\n### Task 4\nWrite a visualization script to plot the average time taken to obtain the result pages for each search engine, using a bar chart.\n\n### Task 5\nCreate a deep copy of the project, and implement a functional interface to execute the previous tasks on a single script.\n\n### Task 6\nEnhance the application to include the following search engines:\n\n- Google Scholar (https://scholar.google.co.uk/scholar?hl=en&as_sdt=0%2C5&q={0}&btnG=)\n- Google Scholar (https://scholar.google.co.uk/citations?hl=en&as_sdt=0%2C5&view_op=search_authors&mauthors={0}&btnG=)\n- Google Scholar (https://scholar.google.co.uk/scholar?hl=en&as_sdt=0%2C5&q={0}&btnG=)\n- Google Scholar (https://scholar.google.co.uk/citesearch?hl=en&as_sdt=0%2C5&q={0}&btnG=)\n\n### Task 7\nEnhance the project to include several topics to search for.\n\n### Task 8\nEnhance the project to include several search engines to search in.\n\n### Task 9\nEnhance the project to include several findings from each search engine.\n\n### Task 10\nEnhance the project to include several time frames to search for.\n/requirements.txt\ncertifi==2023.7.22\ncharset-normalizer==3.1.0\nclick==8.1.6\nFlask==2.2.5\nidna==3.4\nitsdangerous==2.1.2\nJinja2==3.1.2\njoblib==1.2.0\nMarkupSafe==2.1.2\nnltk==3.8.1\nnumpy==1.24.2\npython-dateutil==2.8.2\nregex==2023.8.8\nrequests==2.31.0\nsix==1.16.0\ntqdm==4.65.0\nurllib3==1.26.14\nWerkzeug==2.2.3\n/app.py\nfrom flask import Flask, render_template, request, url_for\nimport requests\n\napp = Flask(__name__)\n\n# Dictionary with the search engines and the URL's for each\nsearch_engines = {\n    \"google\" : \"https://www.google.com/search?q={0}&hl=en&tbm=bks\", \"bing\" : \"https://www.bing.com/search?q={0}&hl=en-US&cc=us&setlang=en-US&go=&qs=n&form=QBLH&pq={0}&sc=8-41&sk=&cvid=7C57389B74C042618919C8B20140B149\", \"yahoo\" : \"https://search.yahoo.com/search?p={0}&fr=uh3_wmp_tp_res_search&ei=UTF-8&va_h=l\", \"duckduckgo\" : \"https://duckduckgo.com/?q={0}&t=h_&ia=web\", \"yandex\" : \"https://yandex.com/search/?lr=213&text={0}\", \"ask\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"bing_image\" : \"https://www.bing.com/images/search?q={0}&FORM=HDRSC2\", \"yandex_image\" : \"https://yandex.com/images/search?lr=213&text={0}\", \"ask_image\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"google_image\" : \"https://www.google.com/search?tbm=isch&q={0}\"\n}\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\", search_engines=search_engines)\n\n@app.route(\"/results\", methods=[\"POST\"])\ndef results():\n    topic = request.form[\"topic\"]\n    search_engine = request.form[\"search_engine\"]\n    url = search_engines[search_engine].format(topic)\n    r = requests.get(url)\n    html_page = r.text\n    return render_template(\"results.html\", topic=topic, search_engine=search_engine, html=html_page)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)"}, {"instruction": "1:\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: request-response cycle, query parameters, template rendering, form submission, response rendering\n\n### Task\nDevelop a Python program that implements a web application with a simple search form. The search form must accept a search query and a search engine as input. The search query must be submitted to the web search engine specified by the search engine selection, and the results from the search engine should be rendered in the web application."}, {"instruction": "1\n\nTo be developed by the students.\n\n### Task 2\n\nTo be developed by the students.\n\n### Task 3\n\nTo be developed by the students.\n\n### Task 4\n\nTo be developed by the students.\n\n### Task 5\n\nTo be developed by the students.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n## Acknowledgments\n\n* Hat tip to anyone whose code was used\n* Inspiration\n* etc\n/app.py\nfrom flask import Flask, render_template, request, url_for\nimport requests\n\napp = Flask(__name__)\n\n# Dictionary with the search engines and the URL's for each\nsearch_engines = {\n    \"google\" : \"https://www.google.com/search?q={0}&hl=en&tbm=bks\", \"bing\" : \"https://www.bing.com/search?q={0}&hl=en-US&cc=us&setlang=en-US&go=&qs=n&form=QBLH&pq={0}&sc=8-41&sk=&cvid=7C57389B74C042618919C8B20140B149\", \"yahoo\" : \"https://search.yahoo.com/search?p={0}&fr=uh3_wmp_tp_res_search&ei=UTF-8&va_h=l\", \"duckduckgo\" : \"https://duckduckgo.com/?q={0}&t=h_&ia=web\", \"yandex\" : \"https://yandex.com/search/?lr=213&text={0}\", \"ask\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"bing_image\" : \"https://www.bing.com/images/search?q={0}&FORM=HDRSC2\", \"yandex_image\" : \"https://yandex.com/images/search?lr=213&text={0}\", \"ask_image\" : \"https://www.ask.com/web?o=0&q={0}&qo=0&l=dir&s=pl.web\", \"google_image\" : \"https://www.google.com/search?tbm=isch&q={0}\"\n}\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\", search_engines=search_engines)\n\n@app.route(\"/results\", methods=[\"POST\"])\ndef results():\n    topic = request.form[\"topic\"]\n    search_engine = request.form[\"search_engine\"]\n    url = search_engines[search_engine].format(topic)\n    r = requests.get(url)\n    html_page = r.text\n    return render_template(\"results.html\", topic=topic, search_engine=search_engine, html=html_page)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: Image rotation, OpenCV's matrix operations, C++ introspection, image processing\n\n### Task", "fingerprint": null, "content": {"code": "cv::Mat matRotateClockWise180(cv::Mat src) { //\u987a\u65f6\u9488180\n    //0: \u6cbfX\u8f74\u7ffb\u8f6c\uff1b >0: \u6cbfY\u8f74\u7ffb\u8f6c\uff1b <0: \u6cbfX\u8f74\u548cY\u8f74\u7ffb\u8f6c\n    flip(src, src, 0);// \u7ffb\u8f6c\u6a21\u5f0f\uff0cflipCode == 0\u5782\u76f4\u7ffb\u8f6c\uff08\u6cbfX\u8f74\u7ffb\u8f6c\uff09\uff0cflipCode>0\u6c34\u5e73\u7ffb\u8f6c\uff08\u6cbfY\u8f74\u7ffb\u8f6c\uff09\uff0cflipCode<0\u6c34\u5e73\u5782\u76f4\u7ffb\u8f6c\uff08\u5148\u6cbfX\u8f74\u7ffb\u8f6c\uff0c\u518d\u6cbfY\u8f74\u7ffb\u8f6c\uff0c\u7b49\u4ef7\u4e8e\u65cb\u8f6c180\u00b0\uff09\n    flip(src, src, 1);\n    return src;\n    //transpose(src, src);// \u77e9\u9635\u8f6c\u7f6e\n}", "docstring": "// std::cout<<\"\u7f29\u653e\u5c3a\u5bf8 (\" << w << \", \"<<h<<\")\"<<std::endl;", "function_name": "resize_img"}, "id": 81, "seed": "cv::Mat matRotateClockWise180(cv::Mat src) { //\u987a\u65f6\u9488180\n    //0: \u6cbfX\u8f74\u7ffb\u8f6c\uff1b >0: \u6cbfY\u8f74\u7ffb\u8f6c\uff1b <0: \u6cbfX\u8f74\u548cY\u8f74\u7ffb\u8f6c\n    flip(src, src, 0);// \u7ffb\u8f6c\u6a21\u5f0f\uff0cflipCode == 0\u5782\u76f4\u7ffb\u8f6c\uff08\u6cbfX\u8f74\u7ffb\u8f6c\uff09\uff0cflipCode>0\u6c34\u5e73\u7ffb\u8f6c\uff08\u6cbfY\u8f74\u7ffb\u8f6c\uff09\uff0cflipCode<0\u6c34\u5e73\u5782\u76f4\u7ffb\u8f6c\uff08\u5148\u6cbfX\u8f74\u7ffb\u8f6c\uff0c\u518d\u6cbfY\u8f74\u7ffb\u8f6c\uff0c\u7b49\u4ef7\u4e8e\u65cb\u8f6c180\u00b0\uff09\n    flip(src, src, 1);\n    return src;\n    //transpose(src, src);// \u77e9\u9635\u8f6c\u7f6e\n}", "__index_level_0__": 23, "concepts": ["Image rotation", "OpenCV's matrix operations", "C++ introspection", "image processing"], "parsing_result": [{"instruction": "Implement a Python function that performs clockwise 90-degree rotation on an input image. The function should accept an image as a numpy array, rotate the image 90 degrees clockwise, and return the resulting image."}, {"instruction": "Design a Python function that takes an input image represented as a 2D array of integers and a rotation angle, and returns a new image that has been rotated by the specified angle. Rotation should be performed clockwise, with 90 degrees being the default."}, {"instruction": "Implement an image rotation function in Python that takes an image in an array format and rotates it by `90 degrees` clockwise. The function should accept an integer `n` as an argument, which defines the number of times the image should be rotated. The function should handle any values of `n` that are not multiples of `90`."}, {"instruction": "Develop a Python function `rotate_image` that uses OpenCV's matrix operations to rotate an image by 90 degrees in clockwise direction. The function should take an image as an input and return the rotated image as the result."}, {"instruction": "Implement a Python function that performs image rotation of an input ndarray of size `M X N` by `degrees`. The function should rotate the image by `degrees` degrees in a clockwise direction."}, {"instruction": "Create a Python function that rotates an image `img` 90 degrees in counter-clockwise direction. The function should handle cases where the input image cannot be rotated and should return an empty image. This function should use image rotation operations from OpenCV. You may use C++ introspection to determine the input image's type and shape."}, {"instruction": "Develop a Python function that accepts an image path as input and rotates the image 90 degrees clockwise. The function should preserve the aspect ratio of the image and implement a simple algorithm for computing the rotation. The function should also handle errors such as unsupported file formats, invalid image paths, and image processing failures."}, {"instruction": "Develop a Python function that performs a 90-degree clockwise rotation on an input image. The function should accept an image path as an input and return an output image after rotation. The solution should include robust error handling to validate the input image and handle exceptions that might occur during the rotation process."}, {"instruction": "Write a Python function that takes an input image, `img`, and a rotation angle in degrees `angle`, and returns a rotated copy of the original. The function should also provide a robust error handling to validate the input image and the `angle` value."}, {"instruction": "Implement a Python function to rotate an image by 90 degrees clockwise without using any built-in image rotation functions. The function should accept a binary image represented by a NumPy array and a boolean flag `clockwise`. If `clockwise` is `True`, the image should be rotated by 90 degrees clockwise. Otherwise, the image should be rotated by 90 degrees counterclockwise."}, {"instruction": "Write a Python function called `rotate_image` that takes an image as input and returns a 90-degree rotated version of the image. This function should use OpenCV's matrix operations to rotate the image. A rotation matrix can be constructed using the following formula:\n\n`[[cos\u03b8, -sin\u03b8], [sin\u03b8, cos\u03b8]]`\n\nThe function should also support anti-clockwise rotations of `90, 180, 270` degrees."}, {"instruction": "Create a Python function that takes an image in NumPy format and its rotation angle in degrees as inputs, and outputs a rotated image. The function should use OpenCV's matrix operations to perform the rotation, and must be able to handle both positive and negative angles."}, {"instruction": "Create a Python function `rotate_90_clockwise` that performs a clockwise 90-degree rotation on a two-dimensional array representing an image. The function should accept a 2D array of integers representing a grayscale image, and return a new array containing the rotated image. The function should use OpenCV's matrix operations to perform the rotation, and it should be implemented in C++ to take advantage of its introspection capabilities, allowing it to rotate images of any dimension and data type."}, {"instruction": "Develop a Python function `rotateImage` that takes a 2D array and an integer `N` as input, representing a square image of size `N x N`. The function should rotate the image by 90 degrees clockwise, using only N-1 matrix operations."}, {"instruction": "Implement a Python function that rotates an image by 90 degrees clockwise. The function takes a 2D matrix as input and returns a 2D matrix that represents the rotated image. For example, given the following 2D matrix:\n\n```\n[[1, 2, 3, 4],\n [5, 6, 7, 8],\n [9, 10, 11, 12],\n [13, 14, 15, 16]]\n```\n\nThe function should return the following 2D matrix after rotating the image 90 degrees clockwise:\n\n```\n[[13, 9, 5, 1],\n [14, 10, 6, 2],\n [15, 11, 7, 3],\n [16, 12, 8, 4]]\n```"}, {"instruction": "Implement a Python function called `rotate_image` that rotates an input image clockwise by 90 degrees. The function should accept an `ndarray` of shape `(width, height)` and return an `ndarray` of the same shape with the image rotated by 90 degrees clockwise. The function should also handle cases where the input image is not square and to deal with invalid inputs."}, {"instruction": "Design a Python function called `rotate_image` that takes a 2D array representing an image as input and rotates it by 90 degrees clockwise. The function should return a new 2D array, rotated clockwise, reflecting the original shape."}, {"instruction": "Implement a Python function called `rotate_image` that takes an `n x n` image represented as a 2D array and a positive integer `k` as arguments. The function should rotate the image by `k` clockwise rotations, where each rotation is a 90-degree counterclockwise turn. The function should return a copy of the rotated image."}, {"instruction": "Design a Python function that takes an input image and a desired rotation angle as arguments. The function should rotate the image by the specified angle using OpenCV's built-in transform functions, and return the resulting rotated image.\n\nThis implementation uses C++ introspection to determine the data type of the image. The function should handle most common cases such as uint8, uint16, and float, as well as grayscale, color, and other combinations. The implementation should also support different interpolation methods, such as nearest-neighbor interpolation, bilinear interpolation, and others."}, {"instruction": "Develop a Python function that accepts an image as input and rotates it 90 degrees clockwise in OpenCV. The function should use matrix operations in OpenCV to perform the rotation."}, {"instruction": "Design a Python function that takes in an image represented as a 2-D array and rotates it 90 degrees clockwise. You can also use OpenCV's built-in `cv2.rotate()` function to accomplish this task."}, {"instruction": "Write a Python function called `rotate_image` that takes an input image and a rotation angle in degrees as arguments. The function should rotate the input image by the specified angle and return the resulting transformed image. The transformation should be implemented using OpenCV's matrix operations and should be efficient enough to process large images in real-time. The function should handle boundary cases such as rotation angles that are not multiples of 90 degrees or a negative angle."}, {"instruction": "Write a Python function that takes an image as input, rotates it 90 degrees clockwise, and outputs the resulting rotated image. The function should use OpenCV to implement image rotation."}, {"instruction": "Implement a Python function `rotate_image` that accepts an image represented as a 2D array of pixels, rotates it by 90 degrees in the counter-clockwise direction, and returns the new array. The input image should be a square and can have any size between 1 and 1000, with pixels encoded as a triplet of integer values between 0 and 255 for a total of 765 bytes per pixel.\n\nThe function should use a C++ library or library extension to perform rotation efficiently. The function should use OpenCV's matrix operations and other techniques to rotate the image without any library-specific code. The function should also ensure that the image is not modified in-place, and that the output array is allocated for the new image."}, {"instruction": "In this task, you will implement an image rotation function using OpenCV. The function should accept an image as input, a rotation angle in degrees, and a boolean flag indicating whether the image should be flipped before rotating (clockwise or counterclockwise).\n\nYour solution should apply the rotation to the image using the OpenCV functions `cv2.getRotationMatrix2D` and `cv2.warpAffine`. It should also consider the default interpolation method used by `cv2.warpAffine` and use the OpenCV interpolation methods `cv2.INTER_NEAREST`, `cv2.INTER_LINEAR`, `cv2.INTER_AREA`, `cv2.INTER_CUBIC`, and `cv2.INTER_LANCZOS4`.\n\nYou should also consider the case when the image is flipped before rotation and the angle is not a multiple of 90 degrees. For these cases, you should first flip the image using `cv2.flip` and then perform the rotation using `cv2.warpAffine`."}, {"instruction": "Develop a Python function that takes a 2D image matrix as input and returns a rotated version of it by 90 degrees clockwise. The input should be a two-dimensional NumPy array with integer values between 0 and 255 representing grayscale pixels in a monochrome image. The output should be the same shape matrix with the same number of rows and columns, but rotated by 90 degrees clockwise.\n\nThe function should handle cases where the input is not a two-dimensional NumPy array or where the input matrix is not square. It should also handle cases where the input array is a 2D array but the shape is not a valid image matrix."}, {"instruction": "Write a Python function called `rotate_image` that takes an input image and a rotation angle as arguments. The function should rotate the image about its center by the specified angle using OpenCV's `getRotationMatrix2D` and `warpAffine` methods.\n\nThe function should return the rotated image as a NumPy array."}, {"instruction": "Develop a Python function called `rotate_image` that takes an `ndarray` of an image and a value representing the number of clockwise rotations to perform on it. The function should return the rotated image, using the OpenCV library."}, {"instruction": "Implement a Python function called `rotate_image` that takes an `m x n` image and a `rotation_angle` as input. The function should rotate the image by the specified angle in degrees and return the rotated image. This function should use OpenCV's built-in functionality to perform the rotation, and it should not assume the image format or size."}, {"instruction": "Develop a Python function that rotates an input image by 90 degrees clockwise using the OpenCV library. The function should take an input image and a corresponding flag `clockwise` as arguments. The function should return the rotated image. The function should handle any input image size, up to a maximum of 1000 x 1000 pixels in dimensions. The function should also handle cases where the `clockwise` flag is set to `False` or invalid values are provided.\n\nThis solution requires the use of OpenCV's matrix operations, which are available in C++. This function uses C++ introspection to get the image size and data type, to convert the image to a `numpy` array, and to perform the rotation."}, {"instruction": "Implement a Python function `rotate_image_clockwise` that takes an `NxN` image matrix, represented as a list of `N` lists, and rotates it clockwise by 90 degrees. The function should return the rotated image matrix as a new list of `N` lists.\n\nYou can leverage the `cv2` library and its `cv2.transpose()` and `cv2.flip()` functions to solve this problem. Remember to handle the edge cases of the image's dimensions carefully."}, {"instruction": "Write a Python function to rotate an image by 90 degrees clockwise or counterclockwise. The function should support multiple image formats (PNG, JPG, BMP etc.) and should return an image object."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: array initialization, variable declaration and assignment, object-oriented programming, input validation, conditional statement\n\n### Task", "fingerprint": null, "content": {"code": "void ReadDS3231()\n{\n\tsecondNoDst = Clock.getSecond();\n\tminuteNoDst = Clock.getMinute();\n\thourNoDst   = Clock.getHour(h12, PM);\n\tdayNoDst    = Clock.getDate();\n\tmonthNoDst  = Clock.getMonth(Century);\n\tyearNoDst   = Clock.getYear();\n//  temperature = Clock.getTemperature();\n\tsecond = secondNoDst;\n\tminute = minuteNoDst;\n\tday    = dayNoDst;\n\tmonth  = monthNoDst;\n\tyear   = yearNoDst;\n\tif (NowInDST())\n\t{\n\t\thour = hourNoDst + 1;\n\t\tif (hour >= 24)\n\t\t{\n\t\t\thour = 1;\n\t\t}\n\t}\n\telse\n\t{\n\t\thour = hourNoDst;\n\t}\n\n\tif (mode == LED_TEST_MODE)\n\t{\n\t\treturn;\n\t}\n\tif (bWriteOnSerial)\n\t{\n\t\tShowDateTimeOnSerial();\n\t}\n}", "docstring": "//Set the year (Last two digits of the year)", "function_name": "SetDS3231"}, "id": 82, "seed": "void ReadDS3231()\n{\n\tsecondNoDst = Clock.getSecond();\n\tminuteNoDst = Clock.getMinute();\n\thourNoDst   = Clock.getHour(h12, PM);\n\tdayNoDst    = Clock.getDate();\n\tmonthNoDst  = Clock.getMonth(Century);\n\tyearNoDst   = Clock.getYear();\n//  temperature = Clock.getTemperature();\n\tsecond = secondNoDst;\n\tminute = minuteNoDst;\n\tday    = dayNoDst;\n\tmonth  = monthNoDst;\n\tyear   = yearNoDst;\n\tif (NowInDST())\n\t{\n\t\thour = hourNoDst + 1;\n\t\tif (hour >= 24)\n\t\t{\n\t\t\thour = 1;\n\t\t}\n\t}\n\telse\n\t{\n\t\thour = hourNoDst;\n\t}\n\n\tif (mode == LED_TEST_MODE)\n\t{\n\t\treturn;\n\t}\n\tif (bWriteOnSerial)\n\t{\n\t\tShowDateTimeOnSerial();\n\t}\n}", "__index_level_0__": 24, "concepts": ["array initialization", "variable declaration and assignment", "object-oriented programming", "input validation", "conditional statement"], "parsing_result": [{"instruction": "Create a Python function called `find_minimum_absolute_difference` that takes an array of integers as an input and returns the minimum absolute difference between any two elements in the array. The function should accept a single argument, the input array, and return the minimum absolute difference between two elements in the array. It should raise an error if the input array is empty or if the input array contains zero or negative elements."}, {"instruction": "Create a Python function `find_prime_factors_by_prime_division` that finds the prime factors of a positive integer. The function should use the Sieve of Eratosthenes algorithm to find prime numbers up to the square root of the input number.\n\nIt should accept a positive integer `num` as input, and it should return a list of integers representing the prime factors of `num`. The function should throw a ValueError if the input is not a positive integer.\n\nUse the function to find the prime factors of the input number, and compare the result with the expected output using assertions."}, {"instruction": "Develop a Python function that accepts an array of integers `nums` and a number `k` as inputs. The function should return a dictionary where each key-value pair represents a subarray of `nums` of length `k` and the value is the product of the elements in the subarray. The subarrays should be ordered based on their first element's index and not based on their values.\n\nThe function should validate the inputs to ensure that `nums` is a non-empty list of integers and `k` is a positive integer. If either of these validations fail, the function should return an empty dictionary."}, {"instruction": "Create a Python function `is_valid_triangle` that determines if a set of three numbers can form a valid triangle. The function should accept three integers representing the lengths of the three sides of a triangle and return a Boolean value indicating whether the input is valid."}, {"instruction": "Write a Python function `get_unique_chars` that takes a string input and returns the unique characters in that string. The function should return the characters in the same order as they appear in the input string. The function should automatically validate the input string and handle empty strings or those containing no unique characters."}, {"instruction": "Develop a Python function called `count_occurrences` that takes a Python list of numbers and a value divided by ten as arguments. The function should return a dictionary where the key is the number divided by ten and the value is the count of occurrences of that number divided by ten in the list."}, {"instruction": "Create a Python function called `find_flight` that takes a list of flight objects and returns the flight object with the longest duration. A flight object has a `duration` attribute that is a datetime.timedelta object that specifies the duration of the flight. The function should return None if the list of flights is empty. Accounts for invalid flight durations.\n\nFor example, given a list of flights:\n\n```python\nflights = [\n    Flight(duration=datetime.timedelta(hours=3, minutes=20)),\n    Flight(duration=datetime.timedelta(hours=6, minutes=40)),\n    Flight(duration=datetime.timedelta(hours=1, minutes=20)),\n    Flight(duration=datetime.timedelta(hours=3)),\n    Flight(duration=datetime.timedelta(hours=2, minutes=40)),\n]\n```\n\nThe function should return the last flight in the list, Flight(duration=datetime.timedelta(hours=6, minutes=40))."}, {"instruction": "Create a Python function called `find_missing_number` that takes a non-empty array of unique numbers and returns the missing number from the sequence. The sequence contains all numbers from 1 to `n`, where `n` is the length of the array. The function should return the missing number, or `-1` if all numbers from 1 to `n` are present in the array. The function should handle cases where the length of the array is less than `n` or the array contains non-unique numbers."}, {"instruction": "Write a Python function called `validate_password` that checks if a provided password meets certain criteria. It should return True if the password is valid and False otherwise. The function should accept a string, `password`, and return True if it satisfies the following criteria:\n\n- The password must be at least 8 characters long and consist of alphanumeric characters, including special characters such as !, @, #, and so on.\n- The password must contain at least one uppercase letter, one lowercase letter, and one special character.\n- The password cannot contain consecutive identical characters.\n- The password cannot contain common or weak passwords such as \"\", \"\", and so on.\n- Any other criteria you choose."}, {"instruction": "Create a Python function `calculate_quantile_sums` that takes a list of integers and a float `quantile` as arguments. The function should use a for loop to calculate the cumulative quantile sum of the input list using the provided `quantile`. For example, `calculate_quantile_sums([1, 2, 3, 4], 0.5)` should return `2.5`."}, {"instruction": "Create a Python function `create_n2_array` that initializes a two-dimensional array of size `n` by `m` with random numbers generated from uniform distribution between 0 and 1. The function should accept two integer arguments `n` and `m`, which specify the dimensions of the array."}, {"instruction": "Create a Python function `find_max_cont_sum` that finds the maximum contiguous sum of a given list of integers. The function should take an input argument `nums` and return the maximum sum.\n\nFor example, given the list `[1, -2, 3, 4, -10, 2]`, the function should return `7` since it is the maximum sum of the list that includes both `4` and `2`."}, {"instruction": "Develop a Python function `linear_regression_with_gradient_descent` that performs linear regression using the gradient descent algorithm. It should accept a NumPy array of feature data `X`, a NumPy array of target values `y`, an initial parameter vector `theta_0`, an initial learning rate `eta_0`, a stopping condition `tolerance`, and an epoch count `epochs`. The function should return the final parameter vector `theta_final` and the list of `theta_history` (containing all intermediate parameter vectors).\n\nIn the context of linear regression, the parameter vector `theta` represents the model coefficients, and the `theta_0` and `eta_0` parameters are the initial guess for these values. The learning rate `eta` represents the step size or size of the gradient descent steps. The epoch count `epochs` is the maximum number of iterations or cycles for the gradient descent algorithm to run. The stopping condition `tolerance` is used to determine when to stop the algorithm."}, {"instruction": "Create a Python function `calculate_median` that takes an unsorted list of integers as input and computes the median value. The function should return the median value as a float. The function should handle errors to ensure the input is a valid non-empty list of integers."}, {"instruction": "Create a Python function called `find_running_sum` that accepts a list of integers, returns a list of running sums of the input list, and raises an error if the input is not a list or if any element in the list is not an integer. If the input is valid, the function should use a nested loop to calculate the running sum of each element in the list, and return the result as a list of integers."}, {"instruction": "Develop a Python function `median_array_of_arrays` that computes the median of a list of arrays, where each array has the same number of elements. It should take an array of arrays `input` as an argument and return the median of each of these arrays as a new array.\n\nYou should implement your function using object-oriented programming (OOP) and use the `sorted` and `round` functions from the standard library. Ensure that your function raises a ValueError if the input has less than two elements."}, {"instruction": "Create a Python function called `find_unique_numbers` that takes a list of numbers as a parameter and returns a list of unique numbers in the provided list. The function should first remove all duplicate numbers from the input list. Then it should determine the number of unique numbers in the list by checking if the length of the input list is equal to the length of the list after removing duplicates. If the lengths are different, the function should return an empty list. Otherwise, it should return the unique numbers in the input list."}, {"instruction": "Create a Python function `smooth_array` that takes a one-dimensional NumPy array `data` as an argument and returns a new array with the same size that is smoothed by weighting each element using a Gaussian kernel. The function should accept three parameters: `sigma` (the standard deviation of the Gaussian kernel), `window_size` (the size of the Gaussian kernel), and `data` (the input array). It should return a new array with the same size as `data` containing the smoothed values. The function should use NumPy\u2019s `convolve` operation to compute the smoothed values based on the Gaussian kernel."}, {"instruction": "Create a Python function called `array_flip` that takes an array of integers `a` as an argument and returns a new array of the same size where each element is replaced with the value at the corresponding index in `a` after it has been flipped (reversed). If the length of the array is odd, the middle element of the original array should be placed at the middle position of the new array after it has been flipped.\n\nFor example, the following array:\n\n```python\na = [1, 2, 3, 4, 5]\n```\n\nshould return the following array:\n\n```python\n[5, 4, 3, 2, 1]\n```"}, {"instruction": "Create a Python function that takes a positive integer `n` as input and returns the sum of all the numbers in the Fibonacci sequence up to the `nth` term. The function should also print the first `n` Fibonacci numbers and return it as a list.\n\nTo test your function, you can use the following code:\n\n```python\nn = int(input(\"Enter a positive integer: \"))\n\nsum = sum_fibonacci(n)\nprint(\"The sum of the first\", n, \"Fibonacci numbers is\", sum)\nprint(\"The first\", n, \"Fibonacci numbers are\", fibonacci(n))\n```\n\nYour function should handle invalid inputs such as negative integers or zero."}, {"instruction": "Create a Python function to calculate the geometric mean of an array of numbers using the formula for calculating the geometric mean. The function should accept a single array of numbers as input, and it should raise a ValueError if the input array is empty or contains any negative numbers."}, {"instruction": "Create a Python function that takes an integer `n` and generates an `n x n` (square) matrix filled with increasing integers starting from 1. The increase should be by 1 for each row, while the column should increase by `n` for each row."}, {"instruction": "Create a Python function called `find_max_sum_subarray` that finds the maximum sum of a contiguous subarray in an array of numbers. The function should accept an array of numbers as an argument and return the maximum sum of the subarray."}, {"instruction": "Develop a Python function called `get_max_value_rows` that takes two arrays of equal length as arguments and returns the maximum value of each row in a single array. The function should find the maximum value of each row in the second array and store it in the first array. The function should return the first array after the operation."}, {"instruction": "Create a Python function that takes a string `name` as an argument and converts it to the format \"first-initial.last-name\". The function should handle both capitalized and non-capitalized names, and should raise an exception if the input is not a non-empty string."}, {"instruction": "Implement a Python function called `get_shuffled_permutation` that takes a positive integer `n` as input and returns a shuffled permutation of the integers 1 to `n` as output. The function should return an array containing the shuffled permutation and make use of the inbuilt `shuffle` function from the `random` module. The function should also ensure that the input is a positive integer and raise an exception if it is not a positive integer."}, {"instruction": "Develop a Python function `parse_and_filter_data` that extracts data from a CSV file into a list of dictionaries, where each dictionary represents a row of data. The function should take the path of a CSV file as an input and return a list of dictionaries.\n\nThe function should parse the CSV file into a list of dictionaries using the built-in library `csv` and take care of any potential errors and exceptions that might occur during processing. It should also validate the input file path and guarantee that the file exists before attempting to read it.\n\nFurthermore, the function should allow filtering the data by specifying a specific column name and a value to match. The function should iterate over the list of dictionaries and return a subset of the data that matches the specified column name and value. If no value is specified, the function should return all data.\n\nNote that the function should rely on built-in Python libraries and standard Python syntax, without relying on third-party libraries."}, {"instruction": "Write a Python function called `flatten_nested_list` that takes a nested list containing any number of nested lists and returns a flattened list containing only the items from the deepest level. The function should handle nested lists of different depths, regardless of the number of levels. For example, given the input `[[1, 2], [3, [4, 5]], [6]]`, the function should return the flattened list `[1, 2, 3, [4, 5], 6]`."}, {"instruction": "Create a Python function that takes an array of integers as input and returns a list of integers representing the longest increasing subsequence. The subsequence should be composed of consecutive values in the input array, where the first index of the subsequence should be less than or equal to the last index.\n\nEach element in the input array represents a possible value in the subsequence. The function should determine the subsequence by finding the longest increasing subsequence among all possible subsequences that can be generated using the elements in the input array.\n\nThis function should return a list of integers representing the longest increasing subsequence in the input array. The subsequence should be generated by finding all possible subsequences and selecting the longest one based on the length of the subsequence.\n\nThe function should be implemented using object-oriented programming (OOP), with the main function being an instance method of a class called `LongestIncreasingSubsequence`. The class should contain a method called `longest_subsequence` that takes an array of integers as input and returns a list of integers representing the longest increasing subsequence.\n\nThe function should be written in such a way that it can handle any input array of integers and can be used as a standalone function or as an instance method of the `LongestIncreasingSubsequence` class."}, {"instruction": "Develop a Python function `parse_ip_address` with the following requirements:\n\n- It takes a string argument that represents an IPv4 address in `A.B.C.D` format, where `A`, `B`, `C`, and `D` are numbers between 0 and 255.\n- It should validate the input string to ensure that it conforms to the IPv4 address format.\n- It should return a tuple of integers representing the corresponding integer values for each part of the IP address.\n- It should handle invalid input cases such as:\n  - Invalid input format (e.g., missing or extra parts, not all numbers, etc.)\n  - Out of bounds values (e.g., numbers outside the range of 0 to 255)."}, {"instruction": "Implement a Python function `initialize_array` that initializes a 2-dimensional NumPy array of integers of size `num_rows` x `num_columns` with random integers between 0 and 100. It should take two arguments, `num_rows` and `num_columns`, and return the initialized array. An array of integers is created by randomly assigning a random integer between 0 and 100 to each element of the array.\n\nThis function should handle invalid inputs such as negative row and column counts, and return an empty array if an invalid input is passed."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: XML parsing and element-specific type definition\n\n### Task", "fingerprint": null, "content": {"code": "soap_in_ns3__ArrayOfMoneda(struct soap *soap, const char *tag, ns3__ArrayOfMoneda *a, const char *type)\n{\n\t(void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_in(soap, tag, 0, NULL))\n\t\treturn NULL;\n\ta = (ns3__ArrayOfMoneda*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_afip_ns3__ArrayOfMoneda, sizeof(ns3__ArrayOfMoneda), soap->type, soap->arrayType, afip_instantiate, afip_fbase);\n\tif (!a)\n\t\treturn NULL;\n\tif (soap->alloced && soap->alloced != SOAP_TYPE_afip_ns3__ArrayOfMoneda)\n\t{\tsoap_revert(soap);\n\t\t*soap->id = '\\0';\n\t\treturn (ns3__ArrayOfMoneda *)a->soap_in(soap, tag, type);\n\t}\n\tif (soap->alloced)\n\t\ta->soap_default(soap);\n\tif (soap->body && *soap->href != '#')\n\t{\n\t\tfor (;;)\n\t\t{\tsoap->error = SOAP_TAG_MISMATCH;\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t{\tif (soap_in_std__vectorTemplateOfPointerTons3__Moneda(soap, \"ns3:Moneda\", &a->ns3__ArrayOfMoneda::Moneda, \"ns3:Moneda\"))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t\tsoap->error = soap_ignore_element(soap);\n\t\t\tif (soap->error == SOAP_NO_TAG)\n\t\t\t\tbreak;\n\t\t\tif (soap->error)\n\t\t\t\treturn NULL;\n\t\t}\n\t\tif (soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\telse\n\t{\ta = (ns3__ArrayOfMoneda *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_afip_ns3__ArrayOfMoneda, SOAP_TYPE_afip_ns3__ArrayOfMoneda, sizeof(ns3__ArrayOfMoneda), 0, afip_finsert, afip_fbase);\n\t\tif (soap->body && soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\treturn a;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_out_ns3__ArrayOfMoneda"}, "id": 87, "seed": "soap_in_ns3__ArrayOfMoneda(struct soap *soap, const char *tag, ns3__ArrayOfMoneda *a, const char *type)\n{\n\t(void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_in(soap, tag, 0, NULL))\n\t\treturn NULL;\n\ta = (ns3__ArrayOfMoneda*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_afip_ns3__ArrayOfMoneda, sizeof(ns3__ArrayOfMoneda), soap->type, soap->arrayType, afip_instantiate, afip_fbase);\n\tif (!a)\n\t\treturn NULL;\n\tif (soap->alloced && soap->alloced != SOAP_TYPE_afip_ns3__ArrayOfMoneda)\n\t{\tsoap_revert(soap);\n\t\t*soap->id = '\\0';\n\t\treturn (ns3__ArrayOfMoneda *)a->soap_in(soap, tag, type);\n\t}\n\tif (soap->alloced)\n\t\ta->soap_default(soap);\n\tif (soap->body && *soap->href != '#')\n\t{\n\t\tfor (;;)\n\t\t{\tsoap->error = SOAP_TAG_MISMATCH;\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t{\tif (soap_in_std__vectorTemplateOfPointerTons3__Moneda(soap, \"ns3:Moneda\", &a->ns3__ArrayOfMoneda::Moneda, \"ns3:Moneda\"))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t\tsoap->error = soap_ignore_element(soap);\n\t\t\tif (soap->error == SOAP_NO_TAG)\n\t\t\t\tbreak;\n\t\t\tif (soap->error)\n\t\t\t\treturn NULL;\n\t\t}\n\t\tif (soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\telse\n\t{\ta = (ns3__ArrayOfMoneda *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_afip_ns3__ArrayOfMoneda, SOAP_TYPE_afip_ns3__ArrayOfMoneda, sizeof(ns3__ArrayOfMoneda), 0, afip_finsert, afip_fbase);\n\t\tif (soap->body && soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\treturn a;\n}", "__index_level_0__": 25, "concepts": ["XML parsing and element-specific type definition"], "parsing_result": [{"instruction": "Create a Python function to parse and validate XML documents that contain a `<user>` element nested within an `<account>` element. Each `<user>` element has an `id` and a `name` attribute, and the `<account>` element has a `userCount` attribute. The `userCount` attribute should be a number and the `id` and `name` attributes should be non-empty strings.\n\nYou should create a class for each XML element, and define a function to validate the contents of each element. The function should return `True` if the XML document is valid and `False` otherwise.\n\nYou should use the standard library to parse the XML and iterate over the XML document's elements using `ElementTree`. You should not use any third-party libraries such as `lxml`."}, {"instruction": "Create a Python function that extracts the text content of all elements in a specified XML document. The function should take two arguments: a string representing the file path and an element name. The function should return a list of strings, where each string is the text content of a single element.\n# Continuous Integration and Deployment\n\n## Overview\nContinuous integration (CI) and continuous deployment (CD) are techniques that automate the build and deployment of software systems. CI systems, such as Jenkins and Travis CI, enable developers to integrate their code changes into a shared repository, like GitHub, and automatically test and build the software. The continuous build ensures that all the necessary steps, such as compilation and testing, are performed to ensure the code is ready for deployment. This reduces the risk of introducing bugs into the system, and enables developers to make changes more quickly, enabling faster development cycles. Continuous integration also allows developers to benefit from early feedback from the team on their changes, and ensures that the builds are ready for deployment to test environments or production.\n\nOn the other hand, continuous deployment, such as with Heroku, automatically deploys changes to a production environment once the build finishes. This process is completely automated, ensuring that the server is ready to be used by users. The continuous deployment process can be integrated with CI systems to ensure that builds are tested and ready for deployment before they are deployed. It also enables the team to benefit from early feedback on their changes, and provides visibility into the status of the deployment process.\n\nIn summary, CI and CD are techniques that automate the build and deployment of software systems. Jenkins, Travis CI, and Heroku are examples of CI systems that are used to integrate code changes into a shared repository, and build and deploy the software. Continuous deployment, such as with Heroku, allows developers to make changes and launch them into production more quickly, ensuring that the server is ready for use by users.\n\n## Benefits\nContinuous integration and continuous deployment can be beneficial in the software development lifecycle (SDLC). In the SDLC, developers work on features and fix bugs in isolation, with each change being tested by other members of the team. When the changes are ready to be integrated into the main codebase, continuous integration tools are used to integrate the changes into a shared repository, such as GitHub, and automatically test and build the software. The continuous build ensures that all the necessary steps, such as compilation and testing, are performed to ensure the code is ready for deployment. This reduces the risk of introducing bugs into the system, and enables developers to make changes more quickly, enabling faster development cycles. Continuous integration also allows developers to benefit from early feedback from the team on their changes, and ensures that the builds are ready for deployment to test environments or production.\n\nOn the other hand, continuous deployment, such as with Heroku, allows developers to make changes and launch them into production more quickly, ensuring that the server is ready for use by users. The continuous deployment process can be integrated with CI systems to ensure that builds are tested and ready for deployment before they are deployed. It also enables the team to benefit from early feedback on their changes, and provides visibility into the status of the deployment process.\n\n## Advantages\nContinuous integration and continuous deployment can be beneficial in the software development lifecycle (SDLC). In the SDLC, developers work on features and fix bugs in isolation, with each change being tested by other members of the team. When the changes are ready to be integrated into the main codebase, continuous integration tools are used to integrate the changes into a shared repository, such as GitHub, and automatically test and build the software. The continuous build ensures that all the necessary steps, such as compilation and testing, are performed to ensure the code is ready for deployment. This reduces the risk of introducing bugs into the system, and enables developers to make changes more quickly, enabling faster development cycles. Continuous integration also allows developers to benefit from early feedback from the team on their changes, and ensures that the builds are ready for deployment to test environments or production.\n\nOn the other hand, continuous deployment, such as with Heroku, allows developers to make changes and launch them into production more quickly, ensuring that the server is ready for use by users. The continuous deployment process can be integrated with CI systems to ensure that builds are tested and ready for deployment before they are deployed. It also enables the team to benefit from early feedback on their changes, and provides visibility into the status of the deployment process.\n\n## Disadvantages\nContinuous integration and continuous deployment can be disadvantageous in the software development lifecycle (SDLC). In the SDLC, developers work on features and fix bugs in isolation, with each change being tested by other members of the team. When the changes are ready to be integrated into the main codebase, continuous integration tools are used to integrate the changes into a shared repository, such as GitHub, and automatically test and build the software. The continuous build ensures that all the necessary steps, such as compilation and testing, are performed to ensure the code is ready for deployment. This reduces the risk of introducing bugs into the system, and enables developers to make changes more quickly, enabling faster development cycles. Continuous integration also allows developers to benefit from early feedback from the team on their changes, and ensures that the builds are ready for deployment to test environments or production.\n\nOn the other hand, continuous deployment, such as with Heroku, allows developers to make changes and launch them into production more quickly, ensuring that the server is ready for use by users. The continuous deployment process can be integrated with CI systems to ensure that builds are tested and ready for deployment before they are deployed. It also enables the team to benefit from early feedback on their changes, and provides visibility into the status of the deployment process."}, {"instruction": "Create a Python function to parse a string in XML format and return a dictionary representation of the result. The function should traverse the XML tree and identify nodes with specific element names and return a dictionary representation of these nodes. The dictionary representation should include the node name as a key and the parsed text content as its value.\n\nThe XML content should be specified as a string input, and the function should return a dictionary containing the nodes specified by the element names, with their text content as the corresponding values. The function should handle special cases, such as empty tags, self-closing tags, attributes, and text content within tags."}, {"instruction": "Given a string representation of a tree data structure in XML, implement a Python function `parse_xml` that parses the XML string and returns a Python dictionary representing the parsed XML tree.\n\nThe tree may contain multiple `root` elements, each having a name and a list of child elements. The child elements may also be `root` elements or `leaf` elements, each having a name and a value (a string).\n\nFor example, the following XML string:\n\n```xml\n<root>\n  <child>Element 1</child>\n  <child>\n    <grandchild>Element 2</grandchild>\n  </child>\n  <leaf>Element 3</leaf>\n</root>\n```\n\nshould be parsed into the following Python dictionary:\n\n```python\n{\n  'root': [\n    'child', [\n      {\n        'grandchild': 'Element 2',\n      },\n    ],\n    'leaf', 'Element 3',\n  ],\n}\n```\n\nIn case of a malformed XML string or an empty string, the function should raise a ValueError."}, {"instruction": "Create a Python function to parse a string representation of a simple XML document into a Python data structure. The input string should be a valid XML document, with each XML element on a separate line. The document should be parsed and represented as a Python dictionary or list with one key per XML element. The value of each key should be a dictionary or list of dictionaries with the same structure as the parent element.\n\nFor example, for the following XML document:\n```\n<document>\n    <title>My Title</title>\n    <body>\n        <section>\n            <header>This is a header</header>\n            <paragraph>This is a paragraph</paragraph>\n        </section>\n    </body>\n</document>\n```\nThe function should return a Python dictionary with three keys: 'document', 'title', and 'body'. The value for 'document' should be a dictionary with a single key, 'body', and the value for 'body' should be a list of dictionaries containing two elements, one for 'title' and one for 'paragraph'. The value for 'title' should be a dictionary with a single key, 'text', and the value of this key should be the string 'My Title'. The value for 'paragraph' should be a dictionary with a single key, 'text', and the value for this key should be the string 'This is a paragraph'."}, {"instruction": "Create a Python function that processes a list of strings and returns a list of all elements in the list formed by concatenating the elements in the original list. The resulting list should be sorted by the length of each element.\n\nFor example, given the input `['apples', 'apples', 'bananas', 'oranges']`, the program should return `['apples', 'oranges', 'apples', 'bananas']`."}, {"instruction": "Write a Python function that takes an XML string as input and returns a Python dictionary representation of the XML. The dictionary should have a key for each element in the XML. The values for each element key should be the text content of the corresponding element. The function should follow the following rules:\n\n- If the XML element contains child elements, the value of the corresponding dictionary key should be a list of the corresponding element itself.\n- If the XML element contains attributes, the value of the corresponding dictionary key should be a dictionary of the attributes.\n- The values for all child elements should be recursively updated with the same structure.\n- If the XML element does not contain any text content or child elements, the value of the corresponding dictionary key should be `None`.\n\nHere is a sample XML string and its corresponding dictionary representation:\n\n```xml\n<root>\n    <name>John</name>\n    <age>24</age>\n    <hobbies>\n        <hobby>Soccer</hobby>\n        <hobby>Basketball</hobby>\n    </hobbies>\n    <favoriteFood>\n        <food>Pizza</food>\n        <food>Burger</food>\n        <food>Noodles</food>\n    </favoriteFood>\n</root>\n```\n\n```python\n{\n    'root': {\n        'name': 'John',\n        'age': '24',\n        'hobbies': [\n            'Soccer',\n            'Basketball'\n        ],\n        'favoriteFood': {\n            'food': [\n                'Pizza',\n                'Burger',\n                'Noodles'\n            ]\n        }\n    }\n}\n```"}, {"instruction": "Write a Python function that validates an XML document against a provided schema. The function should take two arguments:\n- `doc` is a string representation of the XML document\n- `schema` is a string representation of the XML schema\n\nThe function must parse both the XML document and schema and validate the document against the schema using the `xmlschema` module. The function should return a boolean value indicating whether the document is valid against the schema. The function should also handle validation errors and provide appropriate error messages if validation fails."}, {"instruction": "Implement a Python function that parses an XML file and returns a Python dictionary representation of the XML document. The function should accept two arguments: the path to the XML file and an optional `root_name` argument which represents the name of the root element in the XML document. If the `root_name` argument is specified, then the corresponding dictionary node should be the root node of the parsed XML document. If not, then the dictionary should be represented by the XML document itself.\n\nFor example, the following XML file:\n\n```xml\n<xml-root>\n    <name></name>\n    <age>34</age>\n    <gender>Male</gender>\n    <hobbies>\n        <hobby>Reading</hobby>\n        <hobby>Running</hobby>\n    </hobbies>\n</xml-root>\n```\n\nshould be parsed to the following dictionary:\n\n```python\n{\n    'name': '',\n    'age': 34,\n    'gender': 'Male',\n    'hobbies': ['Reading', 'Running']\n}\n```"}, {"instruction": "Write a Python function to read an XML file and return a list of dictionaries, where each dictionary describes a table row. The function should take the following arguments:\n\n- `file_path`: A string representing the path to the XML file.\n- `table_name`: A string representing the name of the table to parse.\n\nThe function should return a list of dictionaries, where each dictionary describes a table row and the keys are the column names. The function should parse only the table with the specified `table_name`. The function should also remove any duplicate rows."}, {"instruction": "Create a Python function that parses and extracts the data from a specified XML file. The function should return the parsed XML document as an object. The function should support the following element types:\n\n- `bookstore`\n- `book`\n- `title`\n- `author`\n- `year`\n- `price`\n- `description`"}, {"instruction": "Implement a Python function called `get_page_title` that takes a URL as an argument and returns the value of the `<title>` element, if it exists, otherwise returns `None`. You can assume the provided URL is valid and the title is not empty or malformed. The function should be robust to any extraneous whitespace and special character in the title, and should be written with the following assumptions in mind:\n\n- The input string should be parsed using `xml.etree` and `etree.parse`.\n- The `title` element should be selected using `xpath`.\n- The title should be returned as a string without any leading or trailing whitespace.\n- The function should return `None` if the given URL cannot be parsed or the title element is not found."}, {"instruction": "Write a Python function that finds a given string within a series of XML documents and returns a `namedtuple` representing the number of matches alongside the number of unique strings found.\n\nThe function should accept two arguments: a `path` to an XML file or directory, and a `target` string. The function should search for the `target` string within the XML documents and return a `namedtuple` containing the number of occurrences found and the number of unique strings found within the XML documents.\n\nThe function should read in an XML file or directory and search for the target string in each XML document. It should return a `namedtuple` that contains the total number of occurrences and a list of unique strings found within the XML documents."}, {"instruction": "Create a Python function that parses a string of XML data and returns a dictionary representation of the data in the form of a tree with named nodes, where each node contains a string value and a dictionary of child nodes. For example:\n\n```python\nxml_data = \"\"\"\n<books>\n    <book>\n        <title>The Hitchhiker's Guide to the Galaxy</title>\n        <author></author>\n        <year>1979</year>\n    </book>\n    <book>\n        <title>Life, the Universe and Everything</title>\n        <author></author>\n        <year>2019</year>\n    </book>\n</books>\n\"\"\"\n\ntree = parse_xml(xml_data)\n```\n\nThe `parse_xml` function should return a nested dictionary with the following structure:\n\n```python\n{\n    \"books\": {\n        \"book\": [\n            {\n                \"title\": \"The Hitchhiker's Guide to the Galaxy\",\n                \"author\": \"\",\n                \"year\": \"1979\",\n            },\n            {\n                \"title\": \"Life, the Universe and Everything\",\n                \"author\": \"\",\n                \"year\": \"2019\",\n            },\n        ]\n    }\n}\n```\n\nThe function should be able to handle all of the following scenarios:\n\n- XML data that is not well-formed: the function should raise a `ValueError` exception and return an empty dictionary in such cases.\n- XML data that is empty: the function should return an empty dictionary if the input string is empty.\n- XML data that contains invalid syntax: the function should raise a `ValueError` exception and return an empty dictionary in such cases.\n- XML data that contains nested nodes of the same name: the function should raise a `ValueError` exception and return an empty dictionary in such cases.\n- XML data that contains only a single node: the function should return a dictionary representation of the node as the top-level dictionary.\n- XML data that contains text nodes directly under nodes: the function should raise a `ValueError` exception and return an empty dictionary in such cases."}, {"instruction": "Write a Python function to parse an XML string and extract the data from each element using the `ElementTree` module. The function should take a string input containing an XML document and return a list of dictionaries, where each dictionary contains the data from one element."}, {"instruction": "Write a Python function that parses an XML string and returns a simplified version. The function should handle nested elements, attributes, and text content of an XML document.\nThe function should return a dictionary where the key is the name of the element, and the value is a dictionary containing the attributes and text content of the element.\nThe function should output the simplified version of the input XML string.\n\nFor example, the function should return the following dictionary for the following input XML string:\n\n```xml\n<root>\n    <child val=\"1\">\n        <subchild val=\"1\"/>\n        <subchild val=\"2\"/>\n        <subchild val=\"3\"/>\n    </child>\n    <child val=\"2\">\n        <subchild val=\"4\"/>\n        <subchild val=\"5\"/>\n        <subchild val=\"6\"/>\n    </child>\n</root>\n```\n```python\n{\n    'root': {\n        'child': [\n            {'val': '1', 'subchild': [{'val': '1'}, {'val': '2'}, {'val': '3'}]},\n            {'val': '2', 'subchild': [{'val': '4'}, {'val': '5'}, {'val': '6'}]}\n        ]\n    }\n}\n```"}, {"instruction": "Write a Python function to parse and extract the parameters from an XML document. Each element in the XML document is represented by an object of class `XmlElement`. Each element stores a list of child elements with the same tag and a dictionary of name-value pairs representing attributes for the element.\n\nThe `XmlElement` class has the following attributes:\n\n- `tag`: the tag name for the element\n- `content`: the content of the element (string)\n- `attrs`: a dictionary of name-value pairs representing attributes for the element\n- `children`: a list of child elements with the same tag\n\nThe function should return a list of all `XmlElement` objects in the XML document."}, {"instruction": "Design a Python function based on the XSD schema below that validates and parses an XML document using the `xmlschema` module.\n\n```xml\n<?xml version=\"1.0\"?>\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\" attributeFormDefault=\"unqualified\">\n  <xs:element name=\"Student\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"First\" type=\"xs:string\"/>\n        <xs:element name=\"Last\" type=\"xs:string\"/>\n        <xs:element name=\"Age\" type=\"xs:int\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>\n```"}, {"instruction": "Create a Python function to parse an XML string and return a dictionary representation of it. The function should handle the following XML types:\n- `<user>`\n- `<user><name>...</name><age>...</age></user>`\n- `<user><name>...</name></user><user><name>...</name></user>`\n- `<user><name>...</name><age>...</age></user><user><name>...</name></user>`\n\nThe output dictionary should contain a key-value pair for each user element, where the key is the user's name and the value is the corresponding user's age. In cases where a user has either a name or an age, but not both, the value for that user should be `'None'`."}, {"instruction": "Implement a function `parse_xml` that parses a given XML string and returns a `namedtuple` containing the following information:\n\n- `root`: the XML root name\n- `attributes`: a dictionary with the root node's attributes\n- `children`: a list of `namedtuple` objects, each representing an XML element and its attributes and children\n\nThe `parse_xml` function should return `None` if the input XML string is not valid.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_xml('<x a=\"b\" c=\"d\" e=\"f\"></x>') ==\nNamedTuple(\n    root='x',\n    attributes={'a': 'b', 'c': 'd', 'e': 'f'},\n    children=[]\n)\nassert parse_xml('<x><x1/><x2><x3/></x2><x4></x4></x>') ==\nNamedTuple(\n    root='x',\n    attributes={},\n    children=[\n        NamedTuple(\n            root='x1',\n            attributes={},\n            children=[]\n        ),\n        NamedTuple(\n            root='x2',\n            attributes={},\n            children=[\n                NamedTuple(\n                    root='x3',\n                    attributes={},\n                    children=[]\n                )\n            ]\n        ),\n        NamedTuple(\n            root='x4',\n            attributes={},\n            children=[]\n        )\n    ]\n)\nassert parse_xml('<x a=\"b\" c=\"d\" e=\"f\"><x1/><x2><x3/></x2><x4></x4></x>') ==\nNamedTuple(\n    root='x',\n    attributes={'a': 'b', 'c': 'd', 'e': 'f'},\n    children=[\n        NamedTuple(\n            root='x1',\n            attributes={},\n            children=[]\n        ),\n        NamedTuple(\n            root='x2',\n            attributes={},\n            children=[\n                NamedTuple(\n                    root='x3',\n                    attributes={},\n                    children=[]\n                )\n            ]\n        ),\n        NamedTuple(\n            root='x4',\n            attributes={},\n            children=[]\n        )\n    ]\n)\n```"}, {"instruction": "Design a Python function that parses an XML string and extracts the elements of a specified type. The function should return a list of elements in the document, each represented as a dictionary. Each element dictionary should include the element name, its attributes, and its text content, if any. The function should return an empty list if the XML string contains no elements of the specified type."}, {"instruction": "Create a Python function that takes an XML string as input and returns a dictionary where each key is the XML element tag name, and each value is the corresponding text content. You should handle both open-tag and close-tag based XML elements.\n\nFor example, given the XML input:\n\n```xml\n<root>\n    <tag1>This is the content of tag1.</tag1>\n    <tag2>This is the content of tag2.</tag2>\n</root>\n```\n\nThe function should return the following dictionary:\n\n```python\n{'root': None, 'tag1': 'This is the content of tag1.', 'tag2': 'This is the content of tag2.'}\n```"}, {"instruction": "Create a Python function to parse an XML data string and return a dictionary representation of the XML file. The function should handle nested tags and attributes correctly. The function should also handle cases where the XML structure is invalid."}, {"instruction": "Create a Python function that accepts an XML string as input and returns a dictionary of key-value pairs where the keys are the XML element names and the values are the text content contained inside the elements.\n\nFor example, given the input `<root><foo>bar</foo><foo>baz</foo></root>`, the function should return `{'root': '', 'foo': ['bar', 'baz']}`"}, {"instruction": "Create a Python function that extracts the content from a specific XML element within an XML string. The function should return a list of extracted content items.\n\nFor example, given the following XML string:\n\n```xml\n<root>\n    <user>\n        <name>\n            <first>John</first>\n            <last>Doe</last>\n        </name>\n        <age>28</age>\n    </user>\n</root>\n```\n\nThe function should extract the content of the `<name>` element and return the following list: `['John', 'Doe']`."}, {"instruction": "Create a Python function to parse a string representation of an XML document and return the root element name and a dictionary of attribute-value pairs. The function should handle XML documents that have a single root element, and nested elements that are not self-closing. The function should also handle processing instructions, comments, and other elements and attributes that are not supported by the XML specification.\n\nThe function should return the root element name, and a dictionary of attribute-value pairs for the root element."}, {"instruction": "Create a Python function that parses an XML string and returns a dictionary of element names and the number of times they occur.\n\nFor example, if the input XML is:\n```xml\n<root>\n    <person>\n        <name></name>\n        <age>30</age>\n        <address>\n            <city>Orlando</city>\n            <state>FL</state>\n        </address>\n    </person>\n    <person>\n        <name></name>\n        <age>35</age>\n        <address>\n            <city>Miami</city>\n            <state>FL</state>\n        </address>\n    </person>\n</root>\n```\nThen, the function should return a dictionary with the following structure:\n```python\n{\n    'root': 1,\n    'person': 2,\n    'name': 2,\n    'age': 2,\n    'address': 2,\n    'city': 2,\n    'state': 2\n}\n```"}, {"instruction": "Design a Python function to parse an XML document and retrieve a list of all element names. The function should only return the element names that are child elements of the root element, not child elements of child elements. The function should write a unit test to ensure that it correctly parses the XML document."}, {"instruction": "Create a Python function to parse a given XML string and extract all instances of a specific element that occur within a specific namespace. The function should return a list of all matching elements along with their values.\n\nFor example, the function should accept the following input:\n```\n\"\"\"\n<root>\n    <data1>\n        <data2>\n            <data3>\n                <value>20.5</value>\n            </data3>\n            <data4>\n                <value>12.5</value>\n                <value>15.8</value>\n            </data4>\n        </data2>\n        <data5>\n            <value>42.0</value>\n            <value>44.5</value>\n        </data5>\n    </data1>\n    <data1>\n        <data2>\n            <data3>\n                <value>10.0</value>\n            </data3>\n            <data4>\n                <value>10.5</value>\n                <value>10.8</value>\n            </data4>\n        </data2>\n        <data5>\n            <value>20.5</value>\n            <value>21.5</value>\n        </data5>\n    </data1>\n</root>\n\"\"\"\n```\n\nThe function should parse this XML string and return the following `list` of `namedtuple` instances:\n```\n[\n    Element(data3=[Element(value=20.5)], data4=[Element(value=12.5), Element(value=15.8)], data5=[Element(value=42.0), Element(value=44.5)]),\n    Element(data3=[Element(value=10.0)], data4=[Element(value=10.5), Element(value=10.8)], data5=[Element(value=20.5), Element(value=21.5)])\n]\n```\n\nNote that the functions should not contain any hard-coded values or other predefined names. The function should be able to accept any XML input string and parse its contents."}, {"instruction": "Create a Python function to parse a sample XML string and extract the value of the `name` attribute and the text content of the `age` element. The XML is shown below:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<student>\n    <name></name>\n    <age>24</age>\n</student>\n```"}, {"instruction": "Create a Python function to parse an XML document into a dictionary data structure. The function should accept a string representing a valid XML document, and return a dictionary representing the parsed XML data.\n\nThe returned dictionary should have the following structure:\n\n```python\n{\n  'root': {\n    'children': [\n      {\n        'tag': 'tag_name1',\n        'attributes': {\n          'key1': 'value1',\n          'key2': 'value2'\n        },\n        'content': 'content_text1'\n      },\n      {\n        'tag': 'tag_name2',\n        'attributes': {\n          'key3': 'value3',\n          'key4': 'value4'\n        },\n        'content': 'content_text2'\n      }\n    ]\n  }\n}\n```\n\nThe example XML document:\n\n```xml\n<root>\n  <tag_name1 key1=\"value1\" key2=\"value2\">content_text1</tag_name1>\n  <tag_name2 key3=\"value3\" key4=\"value4\">content_text2</tag_name2>\n</root>\n```\n\nshould be parsed into the above dictionary structure."}, {"instruction": "Create a Python function to parse an XML string and convert it into a Python object. The input XML string should be a string representation of a valid XML file. The function should return an object whose type depends on the root element in the XML file. For example, it should return a `dict` if the root element is `<dict>`, a `list` if the root element is `<list>`, and so on. This implementation requires parsing XML using an XML parser and defining a Python type for each XML element according to the element name and the attribute values."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: casting of shared pointers, dynamic cast of shared pointers, bound checking of shared pointers\n\n### Task", "fingerprint": null, "content": {"code": "SharedPtr<T> dynamic_pointer_cast(const SharedPtr<U> &sp){\n    //SharedPtr<T> tmpPtr(sp);\n    //couldn't use sp.objPtr because it is private\n    //T* tempPtr = dynamic_cast<T*>(sp.get());\n\n    SharedPtr<T> tempPtr(sp);\n    tempPtr.set(dynamic_cast<T*>(sp.get()));\n    return tempPtr;\n}", "docstring": "//couldn't use sp.objPtr because it is private", "function_name": "static_pointer_cast"}, "id": 89, "seed": "SharedPtr<T> dynamic_pointer_cast(const SharedPtr<U> &sp){\n    //SharedPtr<T> tmpPtr(sp);\n    //couldn't use sp.objPtr because it is private\n    //T* tempPtr = dynamic_cast<T*>(sp.get());\n\n    SharedPtr<T> tempPtr(sp);\n    tempPtr.set(dynamic_cast<T*>(sp.get()));\n    return tempPtr;\n}", "__index_level_0__": 26, "concepts": ["casting of shared pointers", "dynamic cast of shared pointers", "bound checking of shared pointers"], "parsing_result": [{"instruction": "Develop a Python class `Animal` with a `feed(self)` method that prints a feeding message. Develop a Python class `Dog` that extends the `Animal` class and overrides the feeding method to print a dog-specific message. Develop a Python class `Cat` that extends the `Animal` class and overrides the feeding method to print a cat-specific message.\n\nImplement a Python class `AnimalFactory` that maintains a collection of shared pointers to animals. The class should have a method `add_animal(self, animal: Animal)` that accepts an animal object as an argument and adds it to the collection. The `AnimalFactory` class should also have a method `feed_animals(self)` that iterates over the collection and feeds each animal in it."}, {"instruction": "Create a Python class `SharedPointer` that manages a reference count, and has methods to obtain a reference to the underlying data object. This class should support reference counting, where the reference count is maintained in a member variable. The class should provide methods to obtain a shared pointer to the data object.\n\nThe class should be generic, so that it can reference any data type. This means that it should be possible to create a shared pointer to any data type by simply passing the data type into the constructor. Additionally, the class should provide methods to check if the object has at least one reference.\n\nThe class should also ensure that a `SharedPointer` object cannot be accessed after it has been deleted. This can be achieved by using a shared pointer implementation that manages a weak count for the data object, where a weak count represents the number of shared pointers that are still pointing to the data object. The weak count is maintained in a member variable and can be viewed or updated using a getter method. Whenever a shared pointer is created, it should increment the weak count. If the weak count reaches zero, the data object is deleted."}, {"instruction": "Design a Python class `SharedCounter` that allows multiple instances of the class to maintain a counter for the number of times a given method is called. The class should provide a method `increment_by_reference` that increments the counter for the given method. The method `get_counter_value` of the class `SharedCounter` returns the current value of the counter.\n\nThe class `SharedCounter` should utilize shared pointers for its internal data structures. It should also provide a method `get_counter_value` that returns the current value of the counter. Additionally, the class should provide a method `increment_by_reference` that increments the counter for the given method."}, {"instruction": "Implement a Python class `SharedCounter` that maintains a shared count variable that is shared among multiple instances of the class. The class should support the following operations:\n- increment: increment the count by 1\n- decrement: decrement the count by 1\n- reset: reset the count to 0\n- get_count: return the current count value\n\nAt any instance, the count should be non-negative and should not exceed 2^31 - 1 (2,147,483,647). Ensure the count is not accidentally decremented below 0, which should be prevented by the implementation.\n\nThe class should be equipped with a `classmethod`, `get_instance`, which returns a shared instance of `SharedCounter`. The class should implement a `__repr__` method that returns a string representation of the class instance."}, {"instruction": "Implement a Python class `SharedCounter` with a method `inc_by(self, n)` that increments the current value of the counter by n. The class should use a shared pointer implementation as the underlying implementation for the counter, guaranteeing thread-safe access and memory management. In order to achieve this, the class should utilize smart pointers such as `shared_ptr` from the `std` Python module to handle the shared ownership and memory management of the counter.\n\nThe `inc_by` method should not only increment the counter value by n, but also update the shared pointer's reference count so that other threads can access the counter without blocking. Additionally, the `inc_by` method should raise an error if the provided argument n is negative or if the counter's value exceeds the maximum value allowed. The maximum value of the counter should be specified as a class attribute named `MAX_COUNT`. Additionally, the class should provide a `reset` method that resets the counter to 0.\n\nThe class should also provide a factory function `make_shared_counter()` that creates a new `SharedCounter` instance and returns a `shared_ptr` to it. This function should be implemented as a static method of the class."}, {"instruction": "Implement a Python class `Base` that defines a base class with a method `calculate_area()` that returns a float representing the area of the object. Implement a Python class `Rectangle` that inherits from `Base` and overrides the `calculate_area()` method to return the area of the rectangle (width * height). Implement a Python class `Square` that inherits from `Base` and overrides the `calculate_area()` method to return the area of the square (width * width).\n\nThe class `Base` should define a static method `convert_to_base()` that takes a `Base` pointer as input. The method should return a `shared_ptr` to an `Base` object that is a dynamically created copy of the input object. The class `Base` should define a static method `convert_to_base()` that takes a `Rectangle` pointer as input. The method should return a `shared_ptr` to an `Base` object that is a dynamically created copy of the input object. The class `Base` should define a static method `convert_to_base()` that takes a `Square` pointer as input. The method should return a `shared_ptr` to an `Base` object that is a dynamically created copy of the input object.\n\nThe class `Base` should define a virtual method `get_area()` that returns the area of the object as computed by the `calculate_area()` method. The class `Rectangle` and `Square` should define a virtual method `get_area()` that returns the area of the object as computed by the `calculate_area()` method."}, {"instruction": "Implement a Python class `Shape` that defines the abstract base class for geometric shapes. The class should provide a method `get_area()` to calculate the area of the shape and a method `get_perimeter()` to calculate the perimeter of the shape. The class should also define two abstract methods `get_type()` and `get_description()` to return the shape's type and its description. The class should also share a static method `is_instance(shape)` to check whether a given instance is an instance of the `Shape` class. The class should handle any exceptions that may occur during the shape creation and any errors in retrieving the area or perimeter."}, {"instruction": "Implement a Python class called `SharedCounter` that tracks the number of shared pointers to a resource. The class should store a reference to the resource and maintain a counter of the number of shared pointers to it. The class should expose a `clone()` method that returns a new SharedCounter object with the same resource and same number of shared pointers. The class should also support the `operator++()` and `operator--()` operators to increment and decrement the number of shared pointers, respectively. Additionally, the class should overload the `operator=` and `operator==` operators to handle the assignment and equality comparisons.\n\nA `SharedCounter` object should only be compared with other `SharedCounter` objects that reference the same resource. If the comparison is attempted with another object that references a different resource, the behavior is undefined."}, {"instruction": "Implement a Python class to represent a 2D coordinate (x, y) in a Cartesian plane. Create a class method `make_grid(width, height)` to return a grid of width * height coordinates, where all coordinates are located at the integer coordinates (x, y), where (0, 0) is the top-left corner. Create a class method `find_closest(coordinates, target)` to calculate the distance between a given coordinate and all the coordinates in the grid, and return the coordinate with the minimum distance."}, {"instruction": "Improve and extend the previous example by adding the following constraints:\n- The library should only allow a maximum of 1000 unique pointers to be created by the user.\n- The library should prevent creation of a shared pointer that points to an existing pointer that is already present in the library.\n- The library should throw an exception when a shared pointer is created that is over the maximum limit."}, {"instruction": "Implement a Python class to wrap a shared pointer to a memory allocation. The class must provide the following operations:\n- `__init__(self, ptr: int)`: initialize the object with a pointer to a shared memory allocation.\n- `cast(self, cls)`: cast the shared pointer into a shared pointer of a specific type. This operation should be able to handle upcast and downcast scenarios.\n- `deref(self)`: dereference the shared pointer and return the value pointed to by the pointer.\n- `get_ptr(self)`: get the value of the internal pointer."}, {"instruction": "Design a Python class that implements the concept of an abstract base class. This class should maintain a collection of shared pointers to other classes. The class should support adding and removing element from this collection through methods: `add(shared_ptr)` and `remove(shared_ptr)`. The class should also support querying the current size of the collection through a getter method: `get_size()`.\n\nImplement the `add` and `remove` methods as well as `get_size` so that they enforce pointer bounds and prevent insertion or removal of invalid pointers."}, {"instruction": "Implement a Python class `Rectangle` that represents a rectangular object with a top-left position and a height and width. The class should support retrieving the position of the top-left corner, the bottom-right corner, the width, and the height. Additionally, the class should support extending a rectangle by a specified amount in all directions and shrinking by the same amount. Ensure that the rectangle does not overlap with any other rectangles.\n\nThe class should be implemented using shared pointers and smart pointers (e.g., `std::shared_ptr` in C++ and `shared_ptr` in Python), and the shared pointers should be defined as class members."}, {"instruction": "Create a Python class `Vector2D` to represent a two-dimensional vector. The class should support adding two vectors together and returning the magnitude of a vector. Create a constructor that accepts two integer coordinates as arguments, and a method `add` that adds a second vector to the current vector. Additionally, create a method `magnitude` that returns the magnitude of a vector.\n\nThe class should have an additional constructor to accept a single integer value as argument, which is used as both the x and y coordinates of the vector. Create a method `is_bound` to check if the vector is bound and thus has valid coordinates.\n\nUse smart pointers (e.g., `shared_ptr`, `unique_ptr`) as necessary to avoid memory leaks. Ensure that the class deletes the object when its last reference is removed."}, {"instruction": "Implement a Python class `SharedCounter` that maintains a shared counter for multiple instances. The counter should start at 0 and increment by 1 each time a new instance is created. The class also supports incrementing the counter by a specific amount and resetting the counter to 0.\n\nThe class should have a private attribute `counter` that stores the current value of the counter. The class should also have a protected attribute `next_id` that stores the next available instance ID. The class should provide static methods `get_instance_next_id()` and `get_instance_count()` for generating an instance ID and counting the number of instances, respectively.\n\nThe class should provide a static method `get_instance_by_id()` that searches for an instance with a specific ID and returns it if found. The class should provide a method `increment(self, by=1)` that increments the counter by the specified amount, while a method `reset(self)` should set the counter to 0.\n\nThe class should be initialized with a pre-defined instance ID and a pre-defined counter value. The class should support creating multiple instances of itself with different IDs.\n\nAdditionally, the class should support dynamic casting of its instances to check the type of other instances. You can use the `isinstance()` function for checking the type of objects.\n\nFinally, the class should provide a method `is_valid()` that checks if the instance is valid. An instance is valid if its ID matches its instance ID, and its counter matches the stored counter.\n\nThe class should provide assertions for all the preconditions and postconditions of the methods.\n\nThe class should be provided with assertions to test the various features of the class."}, {"instruction": "Implement a Python class that represents a point in a 2D plane. The class should maintain two data members, `x` and `y`, that store the coordinates of the point. Provide two methods, `__str__` and `distance_to_origin`, that print the coordinates of the point and the distance between it and the origin (0, 0), respectively."}, {"instruction": "Implement C++ class `Shape` with a pure virtual method `virtual Area() \u2192 double = 0` that returns the area of the shape.\n\nImplement a Python class `Circle` that inherits from `Shape` that defines a constructor that takes in a radius as an argument. The class should override the `Area` method to calculate the area of the circle.\n\nImplement a Python class `Square` that inherits from `Shape` that defines a constructor that takes in a side length as an argument. The class should override the `Area` method to calculate the area of the square.\n\nCreate a Python function `calculate_shape_area(shape)` that takes in a `Shape` object and returns its area. The function should utilize the dynamic cast of the shape object to check if the shape is a `Circle` or a `Square`. If the shape is a `Circle`, it should calculate the area based on the radius of the circle. Otherwise, if the shape is a `Square`, it should calculate the area based on the side length of the square."}, {"instruction": "Develop a Python class `Base` with a constructor that takes an argument `name`, and a method `get_name` that returns the name. The class `Base` should be abstract, and it should be subclassed for other classes.\n\nThe subclass `Derived` should inherit from `Base` and implement a method `get_name` to return the name plus a message \"is a Derived\".\n\nThe class `Singleton` should inherit from `Base` and implement a method `get_name` to return the name plus a message \"is a Singleton.\"\n\nThe class `Subclass` should inherit from `Derived` and implement a method `get_name` to return the name plus a message \"is a Subclass.\"\n\nThe class `Derived` should also contain a static method `get_name` that returns the name plus a message \"is a Derived.\"\n\nThe class `Singleton` should also contain a static method `get_name` that returns the name plus a message \"is a Singleton.\"\n\nThe singleton instance of `Singleton` should be accessible via `Singleton.instance()`.\n\nAll classes should support casting of shared pointers to the class type, casting of shared pointers to the subclass, casting of shared pointers to the base, and casting of shared pointers to the singleton.\n\nCasting of shared pointers to the class type should return an instance of the class if the shared pointer points to a valid object, or return `None` otherwise.\n\nCasting of shared pointers to the subclass should return an instance of the subclass if the shared pointer points to a valid object, or return `None` otherwise.\n\nCasting of shared pointers to the base should return an instance of the base class if the shared pointer points to a valid object, or return `None` otherwise.\n\nCasting of shared pointers to the singleton should return the singleton instance if the shared pointer points to the singleton, or return `None` otherwise.\n\nCasting of shared pointers to the singleton should raise a `TypeError` exception if the shared pointer does not point to the singleton.\n\nBound checking on the shared pointer should raise a `ValueError` exception if the `get` method is called on a `None` pointer."}, {"instruction": "Implement a Python class `Vehicle` that represents a vehicle. The class should support the following operations:\n- `__init__(self, make: str, model: str, year: int)`: Constructor that initializes the vehicle's make, model and year.\n- `__str__(self)`: String representation of the vehicle.\n- `get_make(self)`: Returns the vehicle's make.\n- `get_model(self)`: Returns the vehicle's model.\n- `get_year(self)`: Returns the vehicle's year.\n- `get_cost(self)`: Returns the estimated cost of the vehicle.\n- `get_description(self)`: Returns a description of the vehicle in the form of a string.\n\nImplement subclasses of `Vehicle` with specific properties and behaviors:\n- `Car`: Represents a car vehicle.\n- `Truck`: Represents a truck vehicle.\n- `Motorcycle`: Represents a motorcycle vehicle.\n\nEach class should have a `get_cost` method that returns the estimated cost of the vehicle based on its properties and characteristics. Additionally, provide an implementation of the `__str__` method for each class that returns the description of the vehicle.\n\nThe class `Vehicle` should support shared ownership of all subclasses. For instance, a `Car` object can be passed to a function as a parameter of the type `Vehicle` without an explicit cast. Similarly, a `Vehicle` object can be returned from a function as a value of the type `Vehicle` without an explicit cast."}, {"instruction": "Create a Python class `SharedCounter` that manages a count and provides shared access to the count. The class should support incrementing the count by a given value, incrementing the count by 1, and resetting the count to a given value. Create a `get_count()` method that retrieves the current count value.\n\nThe class should store the count in a member variable `self._count` of type `int`. The class must protect this variable using Python's [property decorator](https://docs.python.org/3/library/functions.html#property) for setter and getter methods, as well as a private `set_count()` method for internal operations.\n\nThe class should support shared access to the count value through a shared pointer of type `shared_ptr<int>`. Each shared pointer should have a reference count of zero after initialization, and increment the count by 1 upon acquisition.\n\nThe class should also ensure that the count is not incremented or decremented beyond the range of the `int` type, otherwise raise a `ValueError`.\n\nImplement the class in a way that allows both integer and `shared_ptr<int>` types to be used as parameters to the count incrementing methods. Write assertions to test the class."}, {"instruction": "Design a Python class `SharedPointer` that represents a shared pointer. The class should support basic operations of getting the stored value and assigning a new value to the pointer. Additionally, the class should provide the capability of checking if two pointers are pointing to the same value. The class should provide a static method `all_equal` that returns `True` if all of the pointers in the list are pointing to the same value."}, {"instruction": "Implement a Python class that inherits from `list` to manage a list of unique pointers to class objects. The class should support the following operations:\n\n- `add(self, pointer: object)`, where `pointer` can be either an object or a derived class instance. This operation adds a unique pointer to the list if the pointer is not already present in the list, and raises an exception if the pointer is already present.\n- `contains(self, pointer: object)`, where `pointer` is the unique pointer to be checked. This operation returns `True` if the pointer is found in the list, and `False` otherwise.\n- `remove(self, pointer: object)`, where `pointer` is the unique pointer to be removed. This operation removes the pointer from the list if it is present.\n\nThe class should work properly for any type of objects that can be cast to the `object` class. The class should use `isinstance` and `issubclass` functions to check the type of the input objects. Additionally, any operation that modifies the list should ensure that the list is sorted and that the pointers are unique."}, {"instruction": "Implement a Python class `SharedPointer` that manages a shared pointer to an object. The class should support referencing by integer index, shared pointer addition and subtraction, and pointer equality checking. The class should also support dynamically casting to a subclass of its shared pointer. Similar to the `shared_ptr` C++ class, `SharedPointer` should maintain a list of shared pointers and their corresponding integer index for each object. The class should handle all types of `shared_ptr` error conditions gracefully."}, {"instruction": "Design a Python class `Point` that represents a two-dimensional point in Cartesian coordinates. It should have two instance attributes `x` and `y`, which are initialized to 0. The class should have a static method `create_point(x_val, y_val)` which accepts two numeric values and returns a `Point` object with the specified coordinates. Additionally, the class should be able to handle the following kinds of inputs:\n\n- Two numeric values: the values are used as the `x` and `y` coordinates of the new point, respectively.\n- A tuple or a list of two numeric values: the first value is used as the `x` coordinate, and the second value is used as the `y` coordinate.\n\nThe class should be able to handle the following kinds of errors:\n\n- Incorrect input: the input should be a numeric value or a tuple or a list of two numeric values, but no other type is allowed.\n- Invalid coordinates: the `x` and `y` coordinates should be non-negative numbers, but they can be `0`, in which case the coordinates are considered to be equal to zero.\n\nConstruct an assertion to ensure the class handles invalid input gracefully."}, {"instruction": "Design a Python class that represents a shared pointer, similar to the one in C++. The class should include a constructor that accepts a raw pointer as a parameter to initialize the shared pointer. It should also include a destructor and an overloaded equality operator to manage the reference count for the shared pointer.\n\nWhen constructing a shared pointer, the reference count is initialized to 1. On each method call, the reference count is checked and incremented by 1 if the shared pointer is not null. On each destructor call, the reference count is decremented by 1. When the reference count reaches 0, the shared pointer is set to nullptr.\n\nThe class should also implement a method to dynamically cast a shared pointer to another type that inherits from the class. The method should check if the shared pointer is not null and if the conversion is possible and return a new shared pointer of the target type.\n\nFinally, the class should implement a method to check if two shared pointers are equal. The method should return true if the shared pointers are pointing to the same object, or false otherwise. The class should include precondition checks to ensure that the shared pointers are not null."}, {"instruction": "Create a Python class called `CustomList` which extends the functionality of the built-in list. The class should have the following methods:\n- `__init__()` to initialize the `CustomList` object and store the initial list of items\n- `__getitem__()` to access an item in the `CustomList` object by indexing and slice notation\n- `__setitem__()` to insert a new item into the `CustomList` object by indexing and slice notation\n- `__len__()` to return the length of the `CustomList` object\n- `__delitem__()` to remove an item from the `CustomList` object by indexing and slice notation\n- `__repr__()` to return a string representation of the `CustomList` object\n- `__str__()` to return a string representation of the `CustomList` object\n- `__contains__()` to check whether a given item is present in the `CustomList` object\n- `__iter__()` to create an iterator for the `CustomList` object\n- `__add__()` to add two `CustomList` objects together\n\nUse the [shared pointer](https://en.cppreference.com/w/cpp/memory/shared_ptr) class of C++ to ensure thread safety of the methods. Additionally, add bounds checking to each method to prevent out-of-bounds access."}, {"instruction": "Implement a Python class for a generic tree structure. Each tree node must store a string value and a list of child nodes. The class should support the following operations:\n- `add_child(value)`: adds a new child node with `value` as its string value\n- `get_node_by_value(value)`: returns the node with `value` as its string value\n- `get_children()`: returns all child nodes\n\nThe class should support the following operations on node objects:\n- `get_value()`: returns the string value of the node\n- `get_children()`: returns the list of child nodes\n\nEach node object should also be able to cast to the base class `TreeNode`. The class should handle error conditions gracefully, such as null pointers or invalid node values."}, {"instruction": "Implement a Python class `Shape` that represents a geometric shape. The class has two subclasses: `Circle` and `Rectangle`. Each subclass has a method `calculate_area` that calculates the area of the shape. The main class has a method `get_largest_shape` that returns the largest shape among all the shapes passed as argument. The method should return an instance of the `Shape` class, which is the largest of the passed instances. Use the `isinstance` function to determine the type of the argument.\n\nThe `Circle` class takes a single argument, the radius, and has a method `calculate_area` that returns the area of the circle. The `Rectangle` class takes two arguments, the width and the height, and has a method `calculate_area` that returns the area of the rectangle.\n\nIf more than one shape has the same area, the `get_largest_shape` method should return the instance of the `Shape` class that is the largest. If all the shapes passed as arguments have the same area, the `get_largest_shape` method should return the first instance of the `Shape` class that is passed as an argument."}, {"instruction": "Build a Python class `Child` that inherits from `Parent` with an additional method `set_child(self, child)`. This method takes a `Parent` object as input and uses a shared pointer to hold a strong reference to the `Parent` object. The method should handle `ValueError` exceptions by checking for the validity of the input object, and should not allow assignments of invalid `Parent` instances to `Child` objects. The class should also implement the `__del__` method that utilizes the shared pointer to release the `Parent` object from the heap."}, {"instruction": "Use the shared pointer class from the `std::shared_ptr` in C++ to create a shared pointer and use dynamic cast to check for an instance of a base class. The solution should be based on templates."}, {"instruction": "Implement a Python class `SharedList` that encapsulates a list of integer values. The class should maintain a pointer to the list, which is shared with all instances. Each instance of the class should have its own local copy of the pointer. The class should offer a method `add(self, value: int)` to add a new element to the list. This method should clone the shared pointer and add the new value to the local copy, while ensuring that the shared copy is not modified unexpectedly.\n\nThe class should have a static method `convert(shared_list: SharedList, value: int) -> SharedList` that transforms a `SharedList` instance into a new `SharedList` instance containing all the unique elements of the original list, with the same order. Here, the `SharedList` class stores a `shared_ptr` to the actual list, which can be passed as an argument to the static method. The method `convert` should create a new `SharedList` instance, where each element is a unique value from the original list.\n\nThe class should have other methods to get the total count of elements in the list and to get a list with all the unique elements. These methods should not modify the shared copy of the list.\n\nThe class should have a `__str__` method that returns a string representation of the list of values, separated by commas and surrounded by square brackets."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: switch statement, conditional branching, pin manipulation, argument checking\n\n### Task", "fingerprint": null, "content": {"code": "int keyboard() {\n\n  int touche = 5555;\n  /* Principe on balaye les colonne et on tcheck si une ligne est appuy\u00e9e\n     = 14 ; # = 15 ; A = 19 ; B = 18 ; C = 17 ;  D = 16 */\n  // colonne des 1 4 7 *\n  digitalWrite(13, LOW);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 14; // *\n  if (!digitalRead(10)) touche = 7;\n  if (!digitalRead(2)) touche = 4;\n  if (!digitalRead(0)) touche = 1;\n\n  // colonne des 2 5 8 0\n  digitalWrite(13, HIGH);\n  digitalWrite(12, LOW);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 0;\n  if (!digitalRead(10)) touche = 8;\n  if (!digitalRead(2)) touche = 5;\n  if (!digitalRead(0)) touche = 2;\n\n  // colonne des 3 6 9 #\n  digitalWrite(13, HIGH);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, LOW);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 15; // #HTTPClient\n  if (!digitalRead(10)) touche = 9;\n  if (!digitalRead(2)) touche = 6;\n  if (!digitalRead(0)) touche = 3;\n\n  // colonne des A B C D\n  digitalWrite(13, HIGH);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, LOW);\n\n  if (!digitalRead(3)) touche = 16; //D\n  if (!digitalRead(10)) touche = 17; // C\n  if (!digitalRead(2)) touche = 18; // B\n  if (!digitalRead(0)) touche = 19; // A\n  return touche;\n\n}", "docstring": "// Initialisation du WIFI", "function_name": "setup"}, "id": 91, "seed": "int keyboard() {\n\n  int touche = 5555;\n  /* Principe on balaye les colonne et on tcheck si une ligne est appuy\u00e9e\n     = 14 ; # = 15 ; A = 19 ; B = 18 ; C = 17 ;  D = 16 */\n  // colonne des 1 4 7 *\n  digitalWrite(13, LOW);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 14; // *\n  if (!digitalRead(10)) touche = 7;\n  if (!digitalRead(2)) touche = 4;\n  if (!digitalRead(0)) touche = 1;\n\n  // colonne des 2 5 8 0\n  digitalWrite(13, HIGH);\n  digitalWrite(12, LOW);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 0;\n  if (!digitalRead(10)) touche = 8;\n  if (!digitalRead(2)) touche = 5;\n  if (!digitalRead(0)) touche = 2;\n\n  // colonne des 3 6 9 #\n  digitalWrite(13, HIGH);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, LOW);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 15; // #HTTPClient\n  if (!digitalRead(10)) touche = 9;\n  if (!digitalRead(2)) touche = 6;\n  if (!digitalRead(0)) touche = 3;\n\n  // colonne des A B C D\n  digitalWrite(13, HIGH);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, LOW);\n\n  if (!digitalRead(3)) touche = 16; //D\n  if (!digitalRead(10)) touche = 17; // C\n  if (!digitalRead(2)) touche = 18; // B\n  if (!digitalRead(0)) touche = 19; // A\n  return touche;\n\n}", "__index_level_0__": 27, "concepts": ["switch statement", "conditional branching", "pin manipulation", "argument checking"], "parsing_result": [{"instruction": "Implement a Python class `Pin` that encapsulates the logic for pin input and validation. The class should store a pin number (a positive integer between 1000 and 9999) and validate it based on the following rules:\n\n- The pin should be validated by checking its length. It should contain exactly 4 digits.\n- The pin should be validated by checking the sum of its digits. The sum should be equal to the last digit of the pin.\n- The pin should be validated by checking the parity of its digits. The parity of the sum should be equal to the parity of the last digit of the pin."}, {"instruction": "Implement a Python class that models an LED display using a 7-segment display with four digits (0--9). Each digit in the display is represented by a string of four characters: `0 1 0 0` represents the digit 0, and `1 1 1 1` represents the digit 9. Each digit can be lighted up/off individually.\n\nThe class should support the following operations:\n\n- `display(digit, on/off)` turns the specified digit on/off\n- `display_all(on/off)` turns all digits on/off\n- `insert_digit(digit, position)` inserts the specified digit in the display at the specified position\n- `remove_digit(position)` removes the digit in the specified position\n- `flip_digits(positions)` flips all digits in the specified positions, where `positions` is a list or tuple of positions\n- `flip_all()` flips all digits on the display\n- `switch_digits(from, to)` switches the digits at the specified positions, where `from` is a list or tuple of positions and `to` is a list or tuple of target positions"}, {"instruction": "Create a Python class called `Switch` that implements a simple switch-case statement. The class should have an `__init__` method that takes in two arguments: `default` and `mappings`, where `default` is the default case of the switch statement and `mappings` is a dictionary mapping case values to instructions.\n\nThe class should have a method called `run` that takes in an argument `value` and returns the result of executing the instructions specified in the `mappings` for the case `value`, or returns `default` if no case matches.\n\nThe class should also have a method called `run_all` that takes in a list of `values` and returns a list of results corresponding to running `run` on each value in `values`.\n\nThe `run` method should use a `switch` statement to check for each case value in `mappings` and return the corresponding instruction, or return `default` if no case value matches.\n\nThe `run_all` method should use a `for` loop to iterate over each value in `values` and execute the `run` method on each value. It should return a list of results corresponding to running `run` on each value.\n\nThe class should have a method called `run_all_all` that takes in a list of `cases` and returns a list of results corresponding to running `run` on each case in `cases`.\n\nThe `run_all_all` method should use nested `for` loops to iterate over each case in `cases` and execute the `run` method on each case. It should return a list of results corresponding to running `run` on each case.\n\nThe `run_all_all` method should check for each case in `cases` for duplicate case values and raise a `ValueError` if any case values are duplicated.\n\nThe class should also have a method called `run_all_all_all` that takes in a list of `cases` and returns a list of results corresponding to running `run` on each case in `cases`.\n\nThe `run_all_all_all` method should use a `while` loop to repeatedly execute the `run_all_all` method until no more changes are made to the `cases` list. It should return a list of results corresponding to running `run` on each case in `cases`.\n\nThe `run_all_all_all` method should check for each case in `cases` for duplicate case values and raise a `ValueError` if any case values are duplicated."}, {"instruction": "Design a Python class for a generic game player that can be used to track player's game statistics such as number of games played, number of wins, and number of losses. The class should support the following operations:\n\n- `PlayerStats()` - initializes a new player with zero game statistics and zero rank.\n- `get_rank()` - returns the player's rank as determined by its win percentage.\n- `rank_up()` - increases the player's rank by one based on the win percentage.\n- `rank_down()` - decreases the player's rank by one based on the win percentage.\n- `played(games, wins, losses)` - increments the player's game statistics based on the input arguments.\n- `reset()` - resets the player's game statistics to zero.\n\nThe win percentage of a player is calculated as `wins / (wins + losses)` and the player's rank is based on the following criteria:\n\n- 100% win percentage and 0 games played is rank 1\n- 75% win percentage and 0 games played is rank 2\n- 50% win percentage and 0 games played is rank 3\n- 25% win percentage and 0 games played is rank 4\n- 0 win percentage and 0 games played is rank 5\n- 0 win percentage and 10 games played is rank 6\n- 0 win percentage and 100 games played is rank 7\n\nUse the `switch` statement to map each win percentage to its corresponding rank. Use multiple conditional branches to determine the rank based on the number of games played and the win percentage."}, {"instruction": "Create a Python class called `Pin`. A `Pin` object should encapsulate pin-related information such as name, number, and color. Each `Pin` object should expose methods to perform various pin operations, such as `move()`, `rotate()`, and `switch()`. The `move()` method should allow the `Pin` object to change its position according to the provided `x` and `y` values. The `rotate()` method should allow the `Pin` object to change its angle by the specified `deg` value. The `switch()` method should allow the `Pin` object to toggle its `on` state.\n\nTo support simple pin usage, the `Pin` class should provide a `switch()` method that accepts a string argument representing the pin's name. The provided name should be used to find the `Pin` instance and then call its `switch()` method. If no `Pin` is found with the specified name, the method should raise an `InvalidPinNameError`.\n\nFor example, the following code should allow a `Pin` object to be created, moved, and toggled based on a pin name:\n\n```python\n# Create a Pin object with name \"Pin1\" and color \"Red\".\npin1 = Pin(\"Pin1\", \"Red\")\n\n# Move the Pin1's position by (1, 0).\npin1.move(1, 0)\n\n# Rotate the Pin1 by 90 degrees.\npin1.rotate(90)\n\n# Switch the Pin1's on/off state.\npin1.switch()\n\n# Create a Pin object with name \"Pin2\" and color \"Blue\".\npin2 = Pin(\"Pin2\", \"Blue\")\n\n# Switch the Pin2 on/off state by calling its switch() method.\npin2.switch()\n\n# Try to switch the Pin3 on/off state by calling its switch() method.\n# Since Pin3 does not exist, the switch() method should raise an exception.\ntry:\n    pin3.switch()\nexcept InvalidPinNameError:\n    print(\"Invalid Pin Name exception occurred\")\n```"}, {"instruction": "Create a Python class called `Pin` to represent a 4-digit PIN code. Design the class to satisfy the following requirements:\n\n- The class should provide a constructor to accept input as a string of four digits, and initialize the PIN code. If the input is invalid, an appropriate error message should be reported.\n- For PIN codes with 4-digit values, the class should have a property called `digits` that returns the digits of the PIN code. This property should be able to return a list of 4 integers.\n- The class should have an instance method called `check_match(pin)` that validates a potential match against the PIN code. The method should accept a `Pin` object as an argument and return `True` if the PIN matches the PIN code, and `False` otherwise.\n- The class should have a class method called `check_code_length(pin)` that validates a potential match against the PIN code. The method should accept a `Pin` object as an argument and return `True` if the PIN code has a length of 4 digits."}, {"instruction": "Write a Python class called `BitSwitch` to represent a bit switch with four states: `OFF`, `RED`, `YELLOW`, and `GREEN`. The `BitSwitch` class should provide methods to:\n\n- `switch_on()`: switch the switch to `RED` state and set the time to the current time.\n- `switch_off()`: switch the switch to `OFF` state and clear the time.\n- `switch_to_red()`: switch the switch to `RED` state and set the time to the current time.\n- `switch_to_yellow()`: switch the switch to `YELLOW` state and set the time to the current time.\n- `switch_to_green()`: switch the switch to `GREEN` state and set the time to the current time.\n- `is_on()`: check if the switch is on.\n- `is_off()`: check if the switch is off.\n- `is_red()`: check if the switch is in `RED` state.\n- `is_yellow()`: check if the switch is in `YELLOW` state.\n- `is_green()`: check if the switch is in `GREEN` state.\n- `is_ready()`: check if the switch is ready to switch to the next state.\n- `switch_next()`: check if the switch is ready to switch to the next state, otherwise switch the switch to the next state.\n- `time_elapsed()`: returns the elapsed time since the switch was last switched.\n\nThe implementation should include proper error handling for cases where the switch is not in any of the supported states."}, {"instruction": "Create a Python class that implements a fixed-size queue. The queue should support `enqueue`, `dequeue`, `peek`, and `clear` operations. The queue should be implemented using a 1-dimensional array with a fixed capacity, where the front of the queue is represented by the index of the first element in the array and the rear of the queue is represented by the index of the last element in the array. The queue should use a `size` property to keep track of the number of elements in the queue. The queue should raise an error when attempting to `dequeue` or `peek` when the queue is empty."}, {"instruction": "Create a Python class called `Switch` that allows users to define and execute switch case statements. The class should have two methods: `add_case(arg)` and `execute()` to add new cases and execute a case with the argument provided during `execute()` call.\n\n### Assumptions\n- The argument of each `execute()` call should be an integer.\n- The argument provided should be checked for correctness and an error should be thrown if its type is not integer.\n- The `execute()` call should throw an error if a matching case statement is not found.\n- The `add_case(arg)` method should not accept any other arguments except for a required integer argument.\n- If a case with the argument that was provided to `add_case()` is already defined, the `add_case()` method should throw an error.\n- The `add_case(arg)` method should throw an error if the argument provided is not an integer.\n- The `add_case()` method should throw an error if the argument provided is a negative integer."}, {"instruction": "Implement a Python class `AsyncPool` that can be used to execute asynchronous tasks concurrently. The class should be initialized with a `pool_size` parameter that specifies the number of concurrent tasks that can be executed. The class should provide a method called `submit(func, args)` that accepts a function and its arguments as arguments. The method should return a `Future` object, representing the asynchronous task, that can be used to check the status of the task and retrieve its result.\n\nThe class should also allow for setting an optional `timeout` parameter that specifies the maximum time allowed for the task to complete. If the task does not complete within the specified timeout, the `Future` object representing the task should be considered as timed out and a `TimeoutError` should be raised.\n\nThe class should also allow for checking the status of the `Future` object. The `is_done()` method should return `True` if the task is completed, `False` otherwise. The `is_pending()` method should return `True` if the task is not completed, `False` otherwise. The `is_timed_out()` method should return `True` if the task has timed out, `False` otherwise.\n\nThe class should also provide a `get_result()` method to retrieve the result of the task. If the task is completed successfully, the method should return the result of the task. Otherwise, if the task is timed out or if the task has not completed yet, the method should raise an `Exception` indicating the status of the task.\n\nThe class should also provide a `cancel()` method that can be used to cancel the task if it is not yet completed. If the task is already completed, the method should return `False`, indicating that the task cannot be canceled. Otherwise, the method should return `True`, indicating that the task has been successfully canceled.\n\nFinally, the class should provide a `join()` method that can be used to wait for the completion of all tasks in the pool. The method should wait for the completion of all tasks in the pool. It should return a list of the results of the tasks in the pool, in the same order as the tasks were submitted."}, {"instruction": "Write a Python class called `AtmMachine` that implements an ATM machine. The class should contain the following methods:\n\n- `insert_money(amount)`\n- `withdraw_money(amount)`\n- `get_balance()`\n\nThe `insert_money` method takes an integer parameter `amount` that represents the amount of money to be inserted into the machine. The `withdraw_money` method should take an integer parameter `amount` that represents the amount of money to be withdrawn from the machine. The `get_balance` method should return the current balance in the machine.\n\nThe ATM machine should support the following operations:\n\n- `insert_money`: Insert specified amount of money.\n- `withdraw_money`: Withdraw specified amount of money.\n- `get_balance`: Display the current balance.\n\nThe ATM machine should have the following limitations:\n\n- The machine can only hold a maximum of 1000 cents.\n- The machine can only process 2-digit amounts.\n- The machine can only withdraw denominations of 10, 20, 50, 100, 500, or 1000 cents.\n- The machine does not support overdrafts.\n\nThe class should raise appropriate exceptions for invalid inputs, such as:\n\n- Invalid amount of money to be inserted or withdrawn.\n- Attempted withdrawal of more money than the current balance.\n- Attempted withdrawal of a denomination not supported by the machine.\n- Attempted withdrawal of more than 1000 cents."}, {"instruction": "Write a Python class to represent a simple calculator with the following operations:\n\n- addition\n- subtraction\n- multiplication\n- division\n- modulus\n- exponentiation\n\nThe instance methods of the calculator should accept two or three arguments, where the second and third arguments are optional. The second argument is the divisor for division and modulus operations, and the third argument is the exponent for exponentiation. For the third argument of the exponentiation operation, the default value should be 2. The calculator should also implement the following operations:\n\n- addition assignment\n- subtraction assignment\n- multiplication assignment\n- division assignment\n- modulus assignment\n- negation\n\nThe methods should satisfy the following assertions:\n\n```python\nassert Calculator().addition(1) == 1\nassert Calculator().addition(1, 2) == 3\nassert Calculator().addition(5, -3) == 2\nassert Calculator().addition(5.5, -3.5) == 2.0\n\nassert Calculator().subtraction(1) == -1\nassert Calculator().subtraction(1, 2) == -1\nassert Calculator().subtraction(5, -3) == 8\nassert Calculator().subtraction(5.5, -3.5) == 9.0\n\nassert Calculator().multiplication(1) == 1\nassert Calculator().multiplication(1, 2) == 2\nassert Calculator().multiplication(5, -3) == -15\nassert Calculator().multiplication(5.5, -3.5) == -18.75\n\nassert Calculator().division(1) == 1\nassert Calculator().division(1, 2) == 0.5\nassert Calculator().division(5, -3) == -1.6666666666666667\nassert Calculator().division(5.5, -3.5) == -1.6666666666666667\n\nassert Calculator().modulus(1) == 0\nassert Calculator().modulus(1, 2) == 1\nassert Calculator().modulus(5, -3) == 2\nassert Calculator().modulus(5.5, -3.5) == 2.5\n\nassert Calculator().exponentiation(1) == 1\nassert Calculator().exponentiation(1, 2) == 1\nassert Calculator().exponentiation(5, -3) == 0.03125\nassert Calculator().exponentiation(5.5, -3.5) == 0.0004918032786885246\n\nassert Calculator().addition_assignment(1) == 1\nassert Calculator().addition_assignment(1, 2) == 3\nassert Calculator().addition_assignment(5, -3) == 2\nassert Calculator().addition_assignment(5.5, -3.5) == 2.0\n\nassert Calculator().subtraction_assignment(1) == -1\nassert Calculator().subtraction_assignment(1, 2) == -1\nassert Calculator().subtraction_assignment(5, -3) == 8\nassert Calculator().subtraction_assignment(5.5, -3.5) == 9.0\n\nassert Calculator().multiplication_assignment(1) == 1\nassert Calculator().multiplication_assignment(1, 2) == 2\nassert Calculator().multiplication_assignment(5, -3) == -15\nassert Calculator().multiplication_assignment(5.5, -3.5) == -18.75\n\nassert Calculator().division_assignment(1) == 1\nassert Calculator().division_assignment(1, 2) == 0.5\nassert Calculator().division_assignment(5, -3) == -1.6666666666666667\nassert Calculator().division_assignment(5.5, -3.5) == -1.6666666666666667\n\nassert Calculator().modulus_assignment(1) == 0\nassert Calculator().modulus_assignment(1, 2) == 1\nassert Calculator().modulus_assignment(5, -3) == 2\nassert Calculator().modulus_assignment(5.5, -3.5) == 2.5\n\nassert Calculator().negation(1) == -1\nassert Calculator().negation(-1) == 1\nassert Calculator().negation(0) == 0\nassert Calculator().negation(0.0) == 0.0\n```"}, {"instruction": "Implement a Python class called `BinaryTree` that represents a binary tree with integer node values. The class should have methods `insert`, `traverse`, and `find_max` to insert, traverse, and retrieve the maximum value in a binary tree, respectively. `traverse` should take an optional argument `visit_order` to specify the traversal order (in-order, pre-order, or post-order). The class should also have an attribute `root` representing the root node of the tree."}, {"instruction": "Implement the `Pin` class, which represents a physical 4-digit PIN code. The `Pin` class should be able to identify valid pins and generate pseudo-random pin codes. The object's constructor takes a 4-digit pin code as input (a 4-digit integer) and verifies that the pin is valid. The class should provide an appropriate error message when the input is not a 4-digit integer.\n\nThe `Pin` class should also implement the following methods:\n\n- `verify(pin)`, which takes another pin code as input and returns `True` if the input pin matches the original pin and `False` otherwise.\n- `generate(pin, count)`, which takes two input arguments, the original pin code, and the number of pseudo-random pin codes to generate. The method should return a list of `count` pseudo-random pin codes.\n- `generate_one(pin)`, which takes a single input argument, the original pin code, and generates a pseudo-random pin code. The method should return a single pseudo-random pin code.\n\nThe `Pin` class should provide three ways of generating valid, pseudo-random pin codes:\n\n- `generate_one_in_range(pin, start, end)`, which generates a pseudo-random pin code within a specified range, `start` and `end` inclusive. The pin code should be a valid pin code and it should be unique among all the other pseudo-random pin codes generated so far.\n- `generate_one_with_no_repeats(pin, max_count)`, which generates a pseudo-random pin code that does not repeat any of the previous `max_count` pseudo-random pin codes generated. The pin code should be a valid pin code and it should be unique among all the other pseudo-random pin codes generated so far.\n- `generate_one_with_no_dups(pin, max_count, max_range_size)`, which generates a pseudo-random pin code that has no repeats and no gaps in the pin code sequence. The pin code should be a valid pin code and it should be unique among all the other pseudo-random pin codes generated so far.\n\nThe `Pin` class should provide a way to check if a pin code is valid. The class should detect invalid pin codes (i.e., a pin code that does not have exactly 4 digits) as soon as it is created."}, {"instruction": "Implement a Python class called `Switcher` that can be used to toggle between a number of defined values. The class should have a `get` method that takes an index as input and returns the corresponding value set at that index. The class should have a `set` method that takes two arguments: an index and a value, and is used to set the specified value at the given index. The class should have a `toggle` method that takes an index as input and toggles the value at that index. The class should have an `on` method that takes an index as input and sets the value at that index to `True`. The class should have an `off` method that takes an index as input and sets the value at that index to `False`. The class should have a `count_on` method that returns the number of values set to `True`. The class should not allow any negative indexes or indices that exceed the maximum index. The class should validate its input arguments and raise appropriate exceptions if invalid arguments are provided."}, {"instruction": "Create a Python class called `MySwitch` (or `MySwitchClass`) that allows users to specify a function to be invoked when the switch is triggered. The class should support the following operations:\n\n- Set a function to be called when the switch is triggered.\n- Trigger the switch, passing it an argument if necessary.\n- Disconnect the switch from its function. This operation should clear the function that is currently being triggered.\n\nThe switch should support multiple pins of different types, each pin can be a `switch`, `button`, or `pin`, and the pins can be connected in a `series` or `parallel` configuration."}, {"instruction": "Design a Python class called `Pin` that represents a 4-digit pin number. This class should provide methods to check if two Pin objects are equivalent, and also provide a method to generate a new pin based on an existing pin, by performing an operation on a single digit (i.e., addition, subtraction, or replacement). The class should also provide a factory method that returns a new `Pin` based on a specified digit and a comparison operator.\n\nFor example, given a Pin object `pin1` with value \"1234\", the following actions should be performed:\n\n```python\npin1.is_equal(pin2)\n>>> False\npin1.get_new_pin(9, 'replace')\n>>> Pin(\"1294\")\npin1.get_new_pin(9, 'add')\n>>> Pin(\"1235\")\npin1.get_new_pin(9, 'subtract')\n>>> Pin(\"1224\")\n```"}, {"instruction": "Create a Python class that represents a digital watch. The watch should be able to display and manipulate time in the 24-hour format (HH:MM), where the hour is represented by two digits and the minute by a single digit. Implement the following methods and operators:\n\n- `str`\n- `__init__`\n- `__str__`\n- `__add__`\n- `__radd__`\n- `__iadd__`\n- `__sub__`\n- `__rsub__`\n- `__isub__`\n- `__mul__`\n- `__rmul__`\n- `__imul__`\n- `__truediv__`\n- `__rtruediv__`\n- `__itruediv__`\n- `from_str`\n- `set_from_str`\n- `from_time`\n- `set_from_time`\n- `set_time`\n- `add_time`\n- `sub_time`\n- `from_hhmm`\n- `set_from_hhmm`\n- `from_hhmmss`\n- `set_from_hhmmss`\n- `set_hour`\n- `set_minute`\n- `set_second`\n- `time_in_seconds`\n- `time_in_minutes`\n- `time_in_hours`\n- `add_hhmm`\n- `sub_hhmm`\n- `add_hhmmss`\n- `sub_hhmmss`\n- `add_minutes`\n- `add_seconds`\n- `sub_minutes`\n- `sub_seconds`\n- `switch_time_mode`\n\nThe class should also support the following operations:\n\n- `add`\n- `sub`\n- `floordiv`\n- `truediv`\n- `mod`\n- `divmod`\n- `pow`\n- `matrix_mul`\n- `neg`\n\nThe following operators should be overloaded to provide an intuitive and consistent interface for the class:\n\n- `+`\n- `-`\n- `/`\n- `//`\n- `%`\n- `*`\n- `**`\n- `@`\n- `+=`\n- `-=`\n- `/=`\n- `//=`\n- `%=`\n- `*=`\n- `**=`\n- `@=`\n\nThe class should implement time arithmetic using the 24-hour format with the following constraints:\n\n- Every hour is represented by two digits, starting from 00 to 23.\n- The minute and second fields are represented by single digits.\n- An hour can be incremented without affecting the minute and second fields.\n- Minute and second can be incremented without affecting the hour field.\n- An hour can be decremented without affecting the minute and second fields.\n- Minute and second can be decremented without affecting the hour field.\n- The time can be directly represented by an integer in seconds, minutes, or hours.\n- The time can be represented by an integer in hours and minutes, or an integer in hours, minutes, and seconds.\n- The time can be represented by a string in time mode hh:mm, hh:mm:ss, or hhmm, hhmmss.\n- The time can be represented by a string in time mode hh:mm and a second integer in hours.\n- The time can be represented by two integers in hours and minutes, or an integer in hours, minutes, and seconds.\n- The time can be represented by a string in 24-hour mode hh:mm and an integer in hours.\n- The time can be represented by two integers in hours and minutes, or an integer in hours, minutes, and seconds.\n- The time can be represented by a string in 24-hour mode hhmm and an integer in hours.\n- The time can be represented by two integers in hours and minutes, or an integer in hours, minutes, and seconds.\n- The time can be represented by a string in 24-hour mode hhmmss and an integer in hours.\n- The time can be represented by two integers in hours and minutes, or an integer in hours, minutes, and seconds.\n\nAdditionally, the class should support the following operations:\n\n- `switch_time_mode`\n- `from_str`\n- `set_from_str`\n- `from_time`\n- `set_from_time`\n- `set_time`\n- `add_time`\n- `sub_time`\n- `from_hhmm`\n- `set_from_hhmm`\n- `from_hhmmss`\n- `set_from_hhmmss`\n- `set_hour`\n- `set_minute`\n- `set_second`\n- `time_in_seconds`\n- `time_in_minutes`\n- `time_in_hours`\n- `add_hhmm`\n- `sub_hhmm`\n- `add_hhmmss`\n- `sub_hhmmss`\n- `add_minutes`\n- `add_seconds`\n- `sub_minutes`\n- `sub_seconds`\n\nThe following operations should be implemented with the appropriate restrictions and error handling:\n\n- `add`\n- `sub`\n- `floordiv`\n- `truediv`\n- `mod`\n- `divmod`\n- `pow`\n\nTo implement the `pow` operation, the class should verify the input (exponent) is an integer and greater than 0. Additionally, the base should be checked for validity, as well as the negative sign for the exponent. For the operation to be valid, the base should be greater than 0 and the exponent should be an integer. If the operation is invalid, the class should return the error message \"Invalid operation: base or exponent should be positive.\"\n\nThe following operations should be implemented with the appropriate restrictions and error handling:\n\n- `matrix_mul`\n- `neg`\n\nTo implement the `matrix_mul` operation, the class should verify that the input (right-hand side) is an integer, and the left-hand side is a 2-D list of integers. If the operation is invalid, the class should return the error message \"Invalid operation: invalid matrix for multiplication.\"\n\nThe `neg` operation should invert the sign of the time, retaining the absolute value of the time. For example, if the current time is 12:34, then the output should be -12:34."}, {"instruction": "Create a Python class `BankAccount` that represents a bank account. The class should have `balance`, `interest_rate`, and `withdraw` attributes which are integers representing the initial balance, interest rate, and the amount of money to withdraw, respectively. The `withdraw` method should withdraw the amount of money from the bank account if it is greater than the balance. The `interest_rate` attribute is a class-level constant representing the interest rate of a bank account. The `balance` attribute is a class-level variable that keeps track of the total balance of all bank accounts. The class should have a `__str__` method that returns a string representation of the bank account, which includes the balance and interest rate."}, {"instruction": "Implement a Python class for a simple calculator that supports the four basic arithmetic operations: addition, subtraction, multiplication, and division. The class should provide a method `compute(x, y)` to perform each operation on two operands, which should be non-negative integers. Additionally, the class should provide a method `switch()` that allows changing the operation being performed. For example, `compute(x, y)` should be able to compute `x + y`, `x - y`, `x * y`, and `x / y` based on the operation stored in the class."}, {"instruction": "Implement a Python class to control a traffic light system that consists of three traffic lights (red, yellow, and green), each of which has a different time interval for its lights to be active. The class should have two methods: `start` and `stop`, where `start` sets the current traffic light to the first light, and `stop` stops the traffic lights from blinking.\n\nOn each traffic light, the method `start` should set the light's time interval to the time interval of the traffic light and then start the light to blink. The method `stop` should stop the traffic light from blinking.\n\nThe class should be able to handle different inputs, such as whether to use different traffic light time intervals, or whether to use different signals at different times. It should also handle cases where the time intervals for the traffic lights are invalid and return an error message."}, {"instruction": "Implement a Python class called `Switch` that has the following behavior:\n\n- The class should be initialized with a collection of case values (e.g., `True`, `False`, `'a'`, `'b'`, `'c'`) and corresponding functions (e.g., `func1`, `func2`, `func3`, `func4`, `func5`). The functions should have the same number of arguments as the class, and can take any type of argument.\n- Each call to the class should return the result of the corresponding function, depending on the case value.\n- The class should handle invalid arguments (e.g., when the case value is not in the collection of case values) and raise an exception."}, {"instruction": "Create a Python class called `Pin` with a constructor that takes a `string` input as an argument and stores it as the instance variable `pin`. The class should have a method `check_pin` that takes an input string `code` and returns a boolean value indicating whether the input `code` matches the stored `pin`.\n\nAdditionally, the `Pin` class should have a nested class `Exception` that inherits from `Exception` and has two properties: `name` and `message`, which are both strings. The `Pin` class should have a method `check_pin` that takes an input string `code` and returns a boolean value indicating whether the input `code` matches the stored `pin`.\n\nImplement a `Pin` class with a `check_pin` method that takes an input string `code` and returns a boolean value indicating whether the input `code` matches the stored `pin`.\n\nFor example, given the following `Pin` object:\n\n```python\nmy_pin = Pin('1234')\n```\n\nThe `check_pin` method should return `True` for the following inputs:\n\n```python\nmy_pin.check_pin('1234')\nmy_pin.check_pin('12345')\n```\n\nHowever, `check_pin` should return `False` for the following inputs:\n\n```python\nmy_pin.check_pin('4321')\nmy_pin.check_pin('123')\n```"}, {"instruction": "Implement a Python class named `Tile` that represents a tiling pattern for a given size. Each `Tile` object is initialized with two input arguments: a `pattern` string and a `size` integer representing the size of the tiling pattern. The `pattern` string specifies the color of the tiles in the tiling pattern and can contain any of the following characters:\n\n- `0`: black tile\n- `1`: white tile\n- `2`: transparent tile\n\nThe `size` argument defines the number of tiles in the tiling pattern. The `Tile` class should have the following public methods:\n\n- `render()`: render the tiling pattern to an output string.\n- `transform(direction)`: rotate the tiling pattern `direction` (`'l'` or `'r'`) times, where `'l'` denotes left rotation and `'r'` denotes right rotation.\n\nThe `render()` method should render the tiling pattern to an output string based on the `pattern` string. Each `1` in the `pattern` string should be replaced by a black tile and each `2` should be replaced by a transparent tile. The `transform()` method should rotate the tiling pattern `direction` times. When the `direction` is `'l'`, the tiling pattern should be rotated to the left by one tile position. When the `direction` is `'r'`, the tiling pattern should be rotated to the right by one tile position. Both the `render()` and `transform()` methods should return the output string representation of the tiling pattern."}, {"instruction": "Implement a Python class `Pin` that represents a four-digit PIN code. The class should be initialized with a 4-digit integer, which is the PIN code. The class should provide the following operations:\n\n- `check` checks whether a specified 4-digit integer is a valid PIN code.\n- `validate` validates the PIN code by incrementing the value of each digit in the PIN by 1.\n- `increment` increments the value of each digit in the PIN by 1.\n- `decrement` decrements the value of each digit in the PIN by 1.\n\nThe class should be able to handle cases where the PIN code is invalid or within the valid range, as well as invalid input to the operations. The class should also validate the input before each operation to ensure that it is appropriate for the operation."}, {"instruction": "Implement a Python class called \"Elevator\" that simulates an elevator. The class should have a method called `move` that takes an input argument specifying the floor number the elevator should move to. The method should set the current floor to the input floor number and increment the floor counter by 1. Employ a switch statement to handle the following actions:\n\n- If the current floor is the destination floor, do nothing.\n- If the current floor is greater than the destination floor, move towards the destination floor by decrementing the current floor counter by 1 until the current floor is less than or equal to the destination floor.\n- If the current floor is less than the destination floor, move towards the destination floor by incrementing the current floor counter by 1 until the current floor is greater than or equal to the destination floor.\n\nInclude error handling to ensure valid input arguments are provided."}, {"instruction": "Implement a Python class called `Switch` for the functionality of a switch statement. A switch statement is a control flow structure that evaluates an expression and branches based on the value of the expression. The class should have the following properties:\n\n- `cases`: a dictionary that maps the expression to the result value to be returned (similar to a switch statement in C/C++). Each key in the dictionary maps to a value and is associated with a condition that must evaluate to `True` to return the associated value.\n- `default`: the value to be returned if no case in `cases` matches the expression (similar to the `default` branch in switch statements).\n\nThe class should support the following operations:\n\n- `Switch(default)`: constructs a `Switch` object with a default value.\n- `Switch.case(key, value)`: adds a case to `cases` with the given key and value.\n- `Switch.default(value)`: adds a default case to `cases` with the given value.\n- `Switch.check(expression)`: checks if the expression can be evaluated and if so, returns the associated value from `cases` or `default`.\n\nThe class should satisfy the following assertions:\n\n```python\nswitch = Switch(0)\nassert switch.check(0) == 0\nassert switch.check(1) == 0\nassert switch.check(2) == 0\n\nswitch = Switch(0)\nswitch.case(1, 1)\nassert switch.check(1) == 1\nassert switch.check(2) == 0\n\nswitch = Switch(0)\nswitch.case(1, 1)\nswitch.case(2, 2)\nassert switch.check(1) == 1\nassert switch.check(2) == 2\n\nswitch = Switch(0)\nswitch.case(1, 1)\nswitch.case(2, 2)\nswitch.default(3)\nassert switch.check(1) == 1\nassert switch.check(2) == 2\nassert switch.check(3) == 3\nassert switch.check(4) == 3\n```"}, {"instruction": "Implement a Python class called `Switch` to perform switch-like operations in a program using the `switch` keyword. The `switch` statement branches to a specified case statement based on a variable's value. The `Switch` class should accept a variable and a function when constructed, and execute the function when the variable matches a specified case value.\n\nThe `Switch` class should implement the following three methods:\n\n- `case(value)` to declare a new case value. The function should return the `Switch` object, allowing for method chaining.\n- `default(function)` to define the default case function when the variable does not match any declared case values. The function should be executed when the `switch` statement is executed.\n- `switch(value)` to execute the case function based on the given value.\n\nThe `Switch` class should also implement the following three methods to check the variable's value:\n\n- `is_case()` to check if the variable matches a case value.\n- `is_default()` to check if the variable is a default case.\n- `is_empty()` to check if there are any declared case values.\n\nThe `Switch` class should also check for invalid inputs such as passing an invalid argument to `case` or `default` or calling `switch` with an invalid argument."}, {"instruction": "Create a Python class `Switch` that allows for conditional branching based on specified conditions. The class should provide methods for creating and executing case blocks and conditional blocks. The class also provides built-in error handling for arguments that do not meet the class's specifications."}, {"instruction": "Implement a Python class for a simple calculator that supports the following operations:\n\n- addition `+`\n- subtraction `-`\n- multiplication `*`\n- division `/`\n- modulo `%`\n- integer division `//`\n\nThe class should have a constructor that takes a single input string argument that represents an expression to be evaluated and another method called `evaluate()` that returns the result of the expression.\n\nThe expression can contain standard mathematical operators (`+', '-', '*', '/', '%', '//'), as well as `()`. The input string can contain spaces, but should not contain any other special characters.\n\nThe class should have a static method `tokenize()` that takes a string argument and returns a list of string tokens that represent the parsed expression.\n\nThe class should have a static method `apply_operation()` that takes a list of string tokens and a single string operation as input and returns the result of applying the corresponding operation to the operands.\n\nThe class should have a `switch()` method that takes a single string argument representing an operator and returns the function that corresponds to the operator. For example, if the operator is `+`, the `switch()` method should return the function `lambda x, y: x + y`.\n\nThe class should have a `check_args()` method that takes a list of string tokens and a string operation as input and returns a boolean indicating whether the arguments are valid for the operation.\n\nThe class should have a `check_operator()` method that takes a single string argument representing an operator and returns a boolean indicating whether the operator is valid.\n\nThe class should have an `evaluate()` method that takes a list of string tokens as input and returns the result of the expression.\n\nThe class should have a `check_tokens()` method that takes a list of string tokens as input and returns a boolean indicating whether the tokens are valid.\n\nThe class should have a `parse_expr()` method that takes a string argument representing an expression and returns a list of string tokens that represents the parsed expression."}, {"instruction": "Implement a Python class `Pin` to represent a PIN entry device that has 4-digit PIN code, with 1000ms of pin entry time. The class should be able to check if a PIN string is valid, and provide an error message if it is not. The class should implement the following public methods:\n\n- `enter_pin(pin)`: accepts a string of 4 digits as a parameter and returns True if the PIN is valid, and False otherwise. \n- `check_pin_length(pin)`: accepts a string of 4 digits as a parameter and returns True if the length of the PIN is 4, and False otherwise.\n- `check_pin_timing(pin)`: accepts a string of 4 digits as a parameter and returns True if the timing of the pin entry is less than 1000ms, and False otherwise.\n- `check_pin_code(pin)`: accepts a string of 4 digits as a parameter and returns True if the PIN is either 1234 or 4321, and False otherwise."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: copy operations, bitwise operations, function composition\n\n### Task", "fingerprint": null, "content": {"code": "float MX_HAND_GetScalarGyro(void)\r\n{\r\n    float gyro[ 3 ];\r\n    float ans = 0;\r\n\r\n    /*\r\n    while (!MX_HAND_HW_getData(acc, gyro)) {\r\n\r\n    }\r\n    */\r\n    memcpy(gyro, stashed_gyro, sizeof(gyro));\r\n\r\n    for (int i = 0; i < 3; i++) {\r\n        if (i != 0) {\r\n            ans += gyro[ i ] * gyro[ i ];\r\n        }\r\n    }\r\n\r\n    return sqrtf(ans);\r\n}", "docstring": "/*\r\n    bool isSwing = false;\r\n\r\n    if (isSwing && !p->bActive[ HAND_ID_Clash ]) {\r\n        p->bActive[ HAND_ID_Clash ]      = true;\r\n        p->u32TimeStamp[ HAND_ID_Clash ] = time;\r\n    }\r\n\r\n    if (!isSwing && p->bActive[ HAND_ID_Clash ]) {\r\n        p->bActive[ HAND_ID_Clash ] = false;\r\n    }\r\n    return p->bActive[ HAND_ID_Clash ];\r\n    */", "function_name": "MX_HAND_isClash"}, "id": 92, "seed": "float MX_HAND_GetScalarGyro(void)\r\n{\r\n    float gyro[ 3 ];\r\n    float ans = 0;\r\n\r\n    /*\r\n    while (!MX_HAND_HW_getData(acc, gyro)) {\r\n\r\n    }\r\n    */\r\n    memcpy(gyro, stashed_gyro, sizeof(gyro));\r\n\r\n    for (int i = 0; i < 3; i++) {\r\n        if (i != 0) {\r\n            ans += gyro[ i ] * gyro[ i ];\r\n        }\r\n    }\r\n\r\n    return sqrtf(ans);\r\n}", "__index_level_0__": 28, "concepts": ["copy operations", "bitwise operations", "function composition"], "parsing_result": [{"instruction": "Write a Python function to compute the 2's complement of a 32-bit signed integer. The function should make use of bitwise operators to perform the necessary computations.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic."}, {"instruction": "Create a Python function `flip_bit(bits, bit_index)` that flips the specified bit in the given bit sequence and returns the new bit sequence. The function should use bitwise operations for its implementation."}, {"instruction": "Create a Python function `copy(list)` that copies a list of integers by manipulating the individual bits of the integers. The function should return a new integer array with the same content as the original list. Solve the problem in two lines of code as much as possible."}, {"instruction": "Create a Python function to reverse the order of bits in a given binary integer. For instance, the bit sequence 00001101 should be reversed to 11010000."}, {"instruction": "Create a Python function `chunk(data)` to divide a list of integers into equal-sized groups, where each group contains the original integers from the input list in order. The function should satisfy the following assertions:\n\n```python\nassert chunk([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert chunk([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\nassert chunk([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]]\n```"}, {"instruction": "Implement a Python function `check_prime` that takes an integer as input and checks whether it is a prime number. The function should return `True` if the input is a prime number, `False` otherwise."}, {"instruction": "Create a Python function that accepts two strings of the same length as input, and produces a string with the characters in the same positions of both strings, with the second string's characters superimposed in the first string. For example, `superimpose_strings('abc', 'xyz')` should return `'axbycz'`."}, {"instruction": "Create a Python function `flip_bits(x, y)` that returns the bitwise complement of the two given integers. Employ bitwise operations for this operation."}, {"instruction": "Create a Python function to implement the `and` operator for boolean values. The function should return `True` if both input arguments are `True` and `False` otherwise. Employ bitwise operations for this task."}, {"instruction": "Create a Python function `encode_binary_string(bin_str)` to encode a given binary string `bin_str` into a `list` of integers. The encoded string is a series of integers, where each integer represents the bits of the original string in binary, arranged from the least significant to the most significant bit. The function should return an encoded `list` of integers, where each integer represents the bits of the original string in binary."}, {"instruction": "Write a Python function to perform the bitwise XOR operation on a list of integers. The function should return a list with the same number of items and each item is the XOR of the corresponding items in the input list.\n\nImplement this function using bitwise operators and function composition."}, {"instruction": "Create a Python function `is_prime(num)` that determines whether the given number is a prime number. A prime number is a positive integer that is only divisible by itself and 1."}, {"instruction": "Create a Python function called `copy_and_convert(bits: bytes)` that accepts a sequence of bytes and performs a bitwise copy of the data. Each byte is interpreted as a 8-bit unsigned integer. The function should perform the following operations on the input:\n- Interpret each byte as a 8-bit unsigned integer.\n- Reverse each byte's bit order.\n- Perform a bitwise copy of the input bytes.\n\nFinally, the function should return the converted bytes."}, {"instruction": "Create a Python function that performs a deep copy of a dictionary in O(n) time and O(1) additional space. The function should return a new dictionary containing the same keys and values as the original, but with their own copies. It should support any type of key and value and handle nested dictionaries and lists."}, {"instruction": "Create a Python function to perform a deep copy of a nested list, where each element is either a list or a number. The function should return a copy of the original list that contains the same elements and also matches the structure of the original list."}, {"instruction": "Create a Python function `negative_numbers(numbers)` that filters a list of numbers to return only the negative ones.\n\nThe function should satisfy the following assertions:\n\n```python\nassert negative_numbers([1, 2, -3, -4, 5]) == [-3, -4]\nassert negative_numbers([1, 2, 3, 4, 5]) == []\nassert negative_numbers([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert negative_numbers([-1, -2, 3, 4, 5]) == []\n```"}, {"instruction": "Design a Python function to perform a bitwise copy operation. The function should take two arguments `source` and `target`, which are either integers or other bitwise-copyable objects. The function should not return anything. Instead, it should copy the bits from `source` to `target` and should return `target`. The function should utilize the bitwise-copy operation to implement the copying process."}, {"instruction": "Design a Python function `reverse_pairs` that accepts a list of integers and returns a list of all pairs of indices that are in reverse order. For example, given a list of integers `[1, 2, 3, 4, 5]`, the function should return a list of lists: `[[0, 1], [1, 0], [2, 3], [3, 2]]`.\n\nSolve the problem using function composition, with less than 10 lines of code."}, {"instruction": "Create a Python function to check if a given integer is a power of two. The function should return `True` if the number is a power of two and `False` otherwise. Consider the following power of two numbers: 2, 4, 8, 16, 32, 64, 128, and so on.\n\nHighlight the following:\n\n- The function should be implemented using a single logical line of code.\n- The function should not use any conditional logic or loops.\n- The function should not use any mathematical functions or libraries.\n- The function should use only bitwise operations.\n- The function should not rely on any third-party libraries or other functions."}, {"instruction": "Construct a Python function `get_decimal(binary)` to decode a string of binary digits into its decimal value. The function should handle the following cases:\n\n- The input string should be a string of exactly 16 characters.\n- The input string should be made up of only 0s and 1s.\n- The input string should have no leading or trailing whitespace.\n- The input string should represent a valid binary number."}, {"instruction": "Create a Python function `is_prime(n)` that verifies whether a given number is prime. A number is prime if it is greater than 1 and it cannot be divided by any integer between 2 and its square root, inclusive."}, {"instruction": "Create a Python function that converts a string of binary digits into an integer. The function should accept a string of '0's and '1's as input, and should return the decimal equivalent of the binary number. The function should raise a ValueError if the input contains any invalid characters other than '0' and '1'."}, {"instruction": "Construct a Python function that swaps two integers without using any additional variables."}, {"instruction": "Create a Python function `int_to_binary(int)` that returns a string representation of a 32-bit integer's binary representation. Use bitwise operations and function composition to avoid using `bin` or `format` as the only built-in function calls."}, {"instruction": "Create a Python function to merge two lists of numbers into a single list by adding the two numbers whose indices are the same. The function should accept a comparison function that returns `True` when the numbers are considered equal. For example, given two lists [1, 2, 3] and [4, 5, 6], the function should return [5, 7, 9]."}, {"instruction": "Create a Python function called `bit_flip(num, bits)` that takes an integer `num` and int `bits` as inputs and returns a new integer representing the same value as `num`, except with every `bits` bits flipped. For example, the function should pass the following assertions:\n\n```python\nassert bit_flip(0b10101010, 2) == 0b11111111\nassert bit_flip(0b10101010, 3) == 0b10001000\nassert bit_flip(0b10101010, 4) == 0b10000000\nassert bit_flip(0b10101010, 5) == 0b00000000\n```"}, {"instruction": "Create a Python function `str_xor_encrypt(s)` that performs bitwise XOR encryption on the ASCII value representation of the input string `s`. Use the technique of composing functions, where the input to the first function is the output of the second function."}, {"instruction": "Create a Python function `xor_shift` to perform a pairwise XOR (exclusive-or) operation on two lists of the same length. The function should apply the XOR operation to each pair of elements from the input lists and return a new list of the results."}, {"instruction": "Write a Python function to swap the bits in an 8-bit integer. For example, the function should swap the bits in `135` and return `85`."}, {"instruction": "Design Python functions to encode a string into a sequence of 8-bit encoded characters. The 8-bit character is formed by concatenating 2 ASCII characters. These ASCII characters represent 4 bits of original data. Do not use any built-in string concatenation functions."}, {"instruction": "Create a Python function that performs a copy operation on a given list. The function should return a copy of the original list, without modifying the original data structure.\n\nFor example, the function should pass the following assertions:\n\n```python\ntest_list = [1, 2, 3, 4, 5, 6]\nassert copy_list(test_list) == [1, 2, 3, 4, 5, 6]\nassert test_list == [1, 2, 3, 4, 5, 6]\n```"}, {"instruction": "Create a Python function `modify_bits(x, mask, b)` that takes three integers `x`, `mask`, and `b` as arguments, and computes `(x & ~mask) | (b & mask)` by using bitwise operations."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: safe number decimal conversion, string formatting, binary arithmetic operations, floating point representation\n\n### Task", "fingerprint": null, "content": {"code": "std::string safe_number_to_string(const SafeNumber& a) {\n\tconst auto& val = compress_number(a);\n\tif (!safe_number_is_valid(val))\n\t\treturn NaN_str;\n\tif (safe_number_is_zero(val))\n\t\treturn \"0\";\n\tstd::stringstream ss;\n\tif (!val.sign) {\n\t\tss << \"-\";\n\t}\n\t// x = p.q\n\tauto e10 = uint64_pow(10, val.e);\n\tconst auto& e10_uint = simple_uint128_create(0, e10);\n\tconst auto& pq = simple_uint128_divmod(val.x, e10_uint);\n\tconst auto& p = pq.div_result;\n\tconst auto& q = pq.mod_result;\n\tss << simple_uint128_to_string(p, 10, 0);\n\n\tauto decimal_len = val.e;\n\tif (!simple_uint128_is_zero(q)) {\n\t\tauto decimal = simple_uint128_to_string(q, 10, decimal_len);\n\t\tss << \".\" << decimal;\n\t}\n\treturn ss.str();\n}", "docstring": "// r.x = r.x* 10 + big_a/big_b, big_a = (big_a % big_b) * 10, r.e += 1, Repeat this step until r.e >= 16 or big_a == 0 or rx > largest_x", "function_name": "safe_number_div"}, "id": 97, "seed": "std::string safe_number_to_string(const SafeNumber& a) {\n\tconst auto& val = compress_number(a);\n\tif (!safe_number_is_valid(val))\n\t\treturn NaN_str;\n\tif (safe_number_is_zero(val))\n\t\treturn \"0\";\n\tstd::stringstream ss;\n\tif (!val.sign) {\n\t\tss << \"-\";\n\t}\n\t// x = p.q\n\tauto e10 = uint64_pow(10, val.e);\n\tconst auto& e10_uint = simple_uint128_create(0, e10);\n\tconst auto& pq = simple_uint128_divmod(val.x, e10_uint);\n\tconst auto& p = pq.div_result;\n\tconst auto& q = pq.mod_result;\n\tss << simple_uint128_to_string(p, 10, 0);\n\n\tauto decimal_len = val.e;\n\tif (!simple_uint128_is_zero(q)) {\n\t\tauto decimal = simple_uint128_to_string(q, 10, decimal_len);\n\t\tss << \".\" << decimal;\n\t}\n\treturn ss.str();\n}", "__index_level_0__": 29, "concepts": ["safe number decimal conversion", "string formatting", "binary arithmetic operations", "floating point representation"], "parsing_result": [{"instruction": "Design a Python class called `SafeNumber` that represents a safe number object that can be initialized with a string representation of any integer and can perform various operations on it. The class should support addition, subtraction, multiplication, division, modulo, and power operations, and should be able to perform conversions to and from decimal and binary representations. The class should also correctly handle special cases such as division by zero, underflow and overflow, and rounding errors."}, {"instruction": "Create a Python class to represent a floating point number with a given number of decimal places, and allow for mathematical operations with other floating point numbers of the same number of decimal places. The class should include appropriate constructors to set the number of decimal places, as well as methods for converting the floating point number to a string and back. It should also include appropriate methods for the addition, subtraction, multiplication, and division operations, ensuring consistent behavior with respect to rounding and imprecision."}, {"instruction": "Design a Python class `BinaryNumber` that can represent binary numbers and perform arithmetic operations on them.\n\nIt should support the following operations:\n\n- `BinaryNumber.from_decimal(int)` - Create a `BinaryNumber` instance from a decimal number.\n- `BinaryNumber.from_binary(str)` - Create a `BinaryNumber` instance from a binary string.\n- `BinaryNumber.from_bits(list)` - Create a `BinaryNumber` instance from a list of bits.\n- `BinaryNumber.bits` - Get the binary representation of the `BinaryNumber` as a list of bits.\n- `BinaryNumber.int` - Get the decimal representation of the `BinaryNumber` as an integer.\n- `BinaryNumber.__add__(BinaryNumber)` - Add two `BinaryNumber` instances and return the result as a new `BinaryNumber` instance.\n- `BinaryNumber.__sub__(BinaryNumber)` - Subtract a `BinaryNumber` from another one and return the result as a new `BinaryNumber` instance.\n- `BinaryNumber.__mul__(BinaryNumber)` - Multiply two `BinaryNumber` instances and return the result as a new `BinaryNumber` instance.\n- `BinaryNumber.__lt__(BinaryNumber)` - Compare two `BinaryNumber` instances and return a boolean indicating if the first is less than the second."}, {"instruction": "Create a Python class `SafeDecimal` that represents an arbitrary-precision decimal number. It should support basic mathematical operations such as addition, subtraction, multiplication, and division. The class should also provide the `from_float` class method that can convert floating point numbers into `SafeDecimal` instances.\n\nThe `SafeDecimal` class should support basic mathematical operations such as addition, subtraction, multiplication, and division. The class should provide the `from_float` class method that can convert floating point numbers into `SafeDecimal` instances."}, {"instruction": "Create a Python class `Decimal` that represents a decimal number, either integer or fractional. An instance of the class should be initialized with an optional integer or fractional part. The class should provide the following methods:\n\n- `get_integer_part` : returns the integer part of the number\n- `get_fractional_part` : returns the fractional part of the number\n- `get_magnitude` : returns the magnitude of the number, where magnitude is the absolute value with respect to the sign bit\n- `get_sign` : returns the sign of the number, 1 if positive, -1 if negative\n- `decimal_to_binary_string` : returns the binary representation of the number in the form of a string\n- `to_decimal` : converts a binary string to its equivalent decimal representation\n\nImplement the class according to the property requirements:\n\n- Each binary string is 32 characters long, and the leading and trailing zeros are omitted.\n- The sign bit should be the most significant bit in the binary string.\n- The number should be a valid floating point number, including the case where the binary string represents a fractional part.\n- The method `decimal_to_binary_string` should return a string with the binary representation of the number in the following format:\n  - If the number is an integer, the string should have a leading 0, followed by the binary part of the number, and ending with the sign bit.\n  - If the number is a fractional part, the string should have a leading 1, followed by the binary part of the number, and ending with the sign bit."}, {"instruction": "Create a Python class called `Decimal` that represents a signed decimal number with a fractional part. The class should have the following methods:\n\n- `__init__(self, numerator, denominator)`: initialize the decimal number with the numerator and denominator.\n- `to_binary(self)`: convert the decimal number to a binary string.\n- `to_decimal(self)`: convert the decimal number to a decimal string.\n\nWrite assertions to ensure the class is working as intended."}, {"instruction": "Create a Python class to represent a scientific number based on a base-10 representation. The class should support the following operations on scientific numbers:\n- addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`)\n- exponentiation (`**`), modulus (`%`), floor division (`//`), left shift (`<<`), and right shift (`>>`)\n- equality testing (`==`), inequality testing (`!=`), less-than testing (`<`), greater-than testing (`>`), and less-than-or-equal testing (`<=`)\n- negation (`-`)\n- conversion to a binary string (`__str__`)\n\nThe class should define `__init__`, `__str__`, `__add__`, `__sub__`, `__mul__`, `__truediv__`, `__pow__`, `__mod__`, `__floordiv__`, `__lshift__`, `__rshift__`, `__eq__`, `__ne__`, `__lt__`, `__gt__`, `__le__`, `__neg__`, and `__str__` methods. The `__init__` method should accept an integer `number` and an integer `base` as arguments. The `__str__` method should return the `number` as a base-10 string. The `__add__`, `__sub__`, `__mul__`, and `__truediv__` methods should perform addition, subtraction, multiplication, and division on the `number` attribute values. The `__pow__`, `__mod__`, and `__floordiv__` methods should perform exponentiation, modulus, and floor division on the `number` attribute values. The `__eq__`, `__ne__`, `__lt__`, `__gt__`, and `__le__` methods should perform equality, inequality, less-than, greater-than, and less-than-or-equal testing on the `number` attribute values. The `__neg__` method should perform a negative sign on the `number` attribute value. The `__str__` method should convert the `number` attribute value into a base-10 representation in the specified `base` (default 10)."}, {"instruction": "Implement a Python class called `Decimal` to represent a decimal number in a fixed-point format with a specified precision and scaling factor. The class should support basic arithmetic operations using the `+`, `-`, and `*` operators, and the `__str__` method to convert the object to a string representation.\n\nThe class should support initialization with a specified precision and scaling factor, and the `Decimal` class should be able to handle inputs of type `int`, `float`, `str`, and `Decimal` objects. The class should also support addition, subtraction, and multiplication of `Decimal` objects, and the results should be rounded to the specified precision after performing the arithmetic operation.\n\nThe `Decimal` class should also support string representation of the decimal number using the `format` method, which should follow a specified format specifier and apply the rounding rules according to the specified precision.\n\nFor example, the following code should print the result of \"151100 + 220000 = 371100\" after the arithmetic operation:\n\n```python\nfrom decimal import Decimal\n\nd1 = Decimal(151100, precision=5, scaling_factor=3)\nd2 = Decimal(220000, precision=5, scaling_factor=3)\n\nresult = d1 + d2\nprint(\"151100 + 220000 =\", result)\n```"}, {"instruction": "Create a Python class that implements a safe number decimal type. The class should provide methods for various decimal operations that perform safe arithmetic operations."}, {"instruction": "Write a Python class called `SafeDecimal` that implements a decimal number class that is guaranteed to only contain digits 0-9 and only contain one decimal place. This class should support basic mathematical operations (+, -, \\*, /) and should be able to handle any size of numbers and decimal places.\n\nThe class should support initialization with a string representation of a decimal number, and should provide access to the following attributes:\n\n- `value`: the decimal number represented as a string (e.g., \"123.45\")\n- `whole`: the integer part of the decimal number (e.g., 123)\n- `fractional`: the decimal part of the decimal number (e.g., 0.45)\n\nThe class should provide the following methods:\n\n- `add(other)`: adds `other` to the current decimal number\n- `sub(other)`: subtracts `other` from the current decimal number\n- `mul(other)`: multiplies the current decimal number by `other`\n- `div(other)`: divides the current decimal number by `other`\n\nThe class should provide the following special methods:\n\n- `add_str(value)`: adds a string representation of a decimal number to the current decimal number\n- `sub_str(value)`: subtracts a string representation of a decimal number from the current decimal number\n- `mul_str(value)`: multiplies the current decimal number by a string representation of a decimal number\n- `div_str(value)`: divides the current decimal number by a string representation of a decimal number\n\nThe class should provide the following special methods:\n\n- `__str__()`: returns a string representation of the decimal number\n- `__repr__()`: returns a string representation of the decimal number\n- `__eq__(other)`: returns whether the current decimal number is equal to `other`\n- `__ne__(other)`: returns whether the current decimal number is not equal to `other`\n- `__lt__(other)`: returns whether the current decimal number is less than `other`\n- `__le__(other)`: returns whether the current decimal number is less than or equal to `other`\n- `__gt__(other)`: returns whether the current decimal number is greater than `other`\n- `__ge__(other)`: returns whether the current decimal number is greater than or equal to `other`\n\nThe class should provide the following static methods:\n\n- `from_str(value)`: creates a SafeDecimal object from a string representation of a decimal number\n- `to_str(value)`: converts a SafeDecimal object to a string representation of the number\n- `to_float(value)`: converts a SafeDecimal object to a Python float value\n\nThe class should use the smallest number of arithmetic operations (addition, subtraction, multiplication, and division) to calculate the result of a mathematical operation.\n\nFor example, given the SafeDecimal class and the following code:\n\n```python\na = SafeDecimal.from_str(\"123.45\")\nb = SafeDecimal.from_str(\"5.67\")\nc = a + b\nprint(c)\n```\n\nThe output should be \"129.12\"."}, {"instruction": "Create a Python class `Number` that represents a mathematical number with a fixed precision, where the value of the number is stored as an integer and the precision is specified in bits. The class should provide methods for addition, subtraction, multiplication, and division, as well as string formatting.\n\nFor example, given the class `Number` with precision of 32 bits, the following assertions should be valid:\n\n```python\nn = Number(1024, 8)\nassert n.value == 1024\nassert str(n) == '1024.0'\nassert n.precision == 8\n\nn += 128\nassert n.value == 1024 + 128\nassert str(n) == '1152.0'\n\nn -= 64\nassert n.value == 1152 - 64\nassert str(n) == '1088.0'\n\nn *= 1024\nassert n.value == 1088 * 1024\nassert str(n) == '1127680.0'\n\nn /= 1024\nassert n.value == 1127680 / 1024\nassert str(n) == '1097.0'\nassert n.precision == 8\n```"}, {"instruction": "Design a Python class that can perform safe conversions between integer and decimal numbers. The class should support the following operations:\n\n- `int_to_dec(input)`: convert an integer to its decimal representation. The input should be a non-negative integer.\n- `dec_to_int(input)`: convert a decimal number to its integer representation. The input should be a non-negative decimal number.\n\nThe `int_to_dec` and `dec_to_int` functions should handle conversions between signed integers and floating-point numbers, and should return `None` if the input is invalid. The class should also have a constructor that takes a single argument, `base`, representing the base of the number system being used (e.g., `base = 2` for binary, `base = 10` for decimal, and `base = 16` for hexadecimal)."}, {"instruction": "Implement the `Decimal` class that can perform decimal-based arithmetic operations, such as addition, subtraction, multiplication, and division. The class should have the following properties:\n\n- `Decimal` instances are immutable.\n- Instances support basic arithmetic operations: addition, subtraction, multiplication, and division.\n- Instances support comparison operators: equality, inequality, less than, greater than, and less than or equal to.\n- Instances support addition, subtraction, multiplication, and division with other `Decimal` instances and integers.\n- Instances convert to a float when cast to a `float` type.\n- Instances support comparison with `0`, `0.0`, `None`, `NaN`, and `Infinity`.\n- Instances support comparison with other `Decimal` instances, integers, floats, and strings.\n- Instances implement the `__str__` and `__repr__` special methods.\n- Instances can be pickled and unpickled."}, {"instruction": "Create a Python class called `SafeDecimal` that wraps a decimal number with extra safety features for decimal arithmetic. The class should support the following operations:\n\n- `+`: addition\n- `-`: subtraction\n- `*`: multiplication\n- `/`: division\n- `**`: exponentiation\n- `//`: floor division\n- `abs`: absolute value\n- `round`: rounding\n\nThe class should also provide a constructor that accepts a `float` type number and a `digits` parameter that controls the number of decimal digits to be maintained. It should raise an exception if the digits parameter is not a positive integer.\n\nThe class should implement the `__str__` and `__float__` methods to convert the decimal number into a string and a float format, respectively. It should also implement the `__repr__` method to return the class representation as a string."}, {"instruction": "Create a Python class `Decimal` that implements decimal arithmetic operations. The class should support basic operations such as addition, subtraction, multiplication, division, and comparison."}, {"instruction": "Create a Python class called `Decimal` that implements a decimal number system with its own arithmetic operations and conversion to/from a string representation. The class should have the following properties:\n\n- A private attribute called `_value` that stores the decimal number as an integer.\n- A public property called `value` that returns the decimal number in string form.\n- A public property called `positive` that returns a boolean value indicating whether the decimal number is positive or negative.\n- A private method called `_validate_number` that validates a string representation of a decimal number and returns the corresponding integer value.\n- A public method called `add` that adds two decimal numbers and returns the resulting decimal number.\n- A public method called `subtract` that subtracts two decimal numbers and returns the resulting decimal number.\n- A public method called `multiply` that multiplies two decimal numbers and returns the resulting decimal number.\n- A public method called `floor_divide` that performs a floor division of two decimal numbers and returns the resulting decimal number.\n- A public method called `power` that raises a decimal number to a specified power and returns the resulting decimal number.\n- A public method called `to_string` that converts a decimal number to its string representation."}, {"instruction": "Design a Python class that represents a safe number system based on decimal, implemented as a base 10 integer. The class should support basic arithmetic operations: addition, subtraction, multiplication, division, and power. The class should also support integer division and integer power, and should raise an error for other operations (e.g., square root).\n\nThe class should also support the following:\n\n- float to integer conversion, where the resulting integer is rounded down to the nearest whole number.\n- integer to float conversion, where the resulting floating point number is rounded to one decimal place.\n\nThe class should also support string formatting for the number's string representation. For example, the following should be true:\n\n```python\nnumber = SafeNumber(20)\nassert str(number) == '20'\nassert int(number) == 20\nassert float(number) == 20.0\n```"}, {"instruction": "Design a Python class `DecimalConverter` with a method `convert` to convert a decimal number to a binary number. The class should take a float number and return the binary equivalent as a string. Implement the method with the following inputs:\n\n- `self`: the DecimalConverter instance calling the method\n- `number`: the decimal number to be converted\n\nThe `convert` method should use bitwise operations and string formatting to convert the number to binary representation, accounting for safe decimal conversion and rounding. The implementation should maintain the same rounding behavior as a normal decimal to binary conversion. For example, `DecimalConverter(1.1).convert()` should return `'1.0011001100110011001100110011001100110011001100110100110011001101'` and `DecimalConverter(1.99999).convert()` should return `'1.1001100110011001100110011001100110011001100110011010011001100111'`."}, {"instruction": "Create a Python class `SafeDecimal` that represents a safe decimal number with a high precision and robustness to floating point imprecisions.\n\nThe class should have the following methods:\n\n- `safe_str`: returns a string representation of the safe decimal number (`__str__` method)\n- `safe_float`: returns the floating point representation of the safe decimal number (`__float__` method)\n- `safe_add`: adds a safe decimal number to the current safe decimal number and returns a new safe decimal number.\n- `safe_multiply`: multiplies the current safe decimal number with another safe decimal number and returns a new safe decimal number.\n\nFor example, the following code should return a safe decimal number for 1.0999999999999999999999999999999999999:\n\n```python\nfrom safe_decimal import SafeDecimal\n\nsafe_decimal = SafeDecimal('1.1')\nprint(safe_decimal.safe_str)\nsafe_decimal = safe_decimal.safe_add(SafeDecimal('0.9'))\nprint(safe_decimal.safe_str)\n```"}, {"instruction": "Create a Python class `Decimal` that represents a decimal number. The class should have at least two methods: `from_str` and `to_str`, which convert a string to `Decimal` and vice versa. This class has a hidden member variable `value`, which is used to store the decimal number.\n\nThe `from_str` method should accept a string representation of decimal number, and convert it to `Decimal` instance. The method should handle the following invalid input formats:\n\n- Numbers with leading or trailing whitespaces\n- Numbers with leading or trailing decimal points\n- Numbers containing invalid characters (other than decimal digits)\n\nOtherwise, the method should use the `Decimal` constructor to create the `Decimal` instance.\n\nThe `to_str` method should convert `Decimal` instance to a string representation of decimal number, using the `format` method to format the number with up to 14 digits after the decimal point. The method should return `None` if the `Decimal` instance is invalid.\n\nThe `Decimal` class should define the `__eq__`, `__ne__`, `__lt__`, `__le__`, `__gt__`, and `__ge__` operators for equality and comparison operations. It should also support the `+`, `-`, `*`, `/`, `//`, `%`, and `**` operators."}, {"instruction": "Create a Python class `Decimal` that represents a fixed-point decimal number. The class should have attributes for the integer part of the number and the decimal part, as well as a class constant `DIGITS` to represent the number of digits after the decimal point. The class should have methods for the following operations:\n\n- `__init__()`: initializes the class with a given integer part and a sequence of digits for the decimal part.\n- `__str__()`: converts the class into a string representation of the number.\n- `__add__()`: adds two `Decimal` objects with the same `DIGITS`, returning a `Decimal` object.\n- `__sub__()`: subtracts two `Decimal` objects with the same `DIGITS`, returning a `Decimal` object.\n- `__mul__()`: multiplies two `Decimal` objects with the same `DIGITS`, returning a `Decimal` object.\n- `__truediv__()`: divides two `Decimal` objects with the same `DIGITS`, returning a `Decimal` object.\n\nThe class should provide a precondition check for division operations when the divisor is not zero."}, {"instruction": "Design a Python class that represents a safe number with a floating point value. The class should have the following methods:\n\n- `safe_number(value)` - create a new safe number with the specified value\n- `to_decimal()` - convert the safe number to a decimal number (using IEEE-754 floating point representation)\n\nThe conversion to decimal should be done using binary arithmetic operations and the bitwise operators. The class should also be able to represent numbers in scientific notation with the format `1e+3`, where `1` is the integer part, `e` is the scientific notation indicator, and `3` is the exponent. The class should keep track of the sign of the number (positive or negative) and discard any trailing zeros.\n\nFor example, the class should convert `safe_number(100e-2)` to `1.0` and `safe_number(100e3)` to `100000.0`."}, {"instruction": "Create a Python class `SafeNumber` that represents a decimal number in a safe way:\n- Decimal numbers can be very large or very small, and may be in scientific notation (e.g., 1e12).\n- Decimal numbers can be very close to zero, and may be represented by floating-point numbers with limited precision.\n- Decimal numbers can be represented in binary, for example, 0b10111000100010110111110110000101.\n\nThe `SafeNumber` class should support the following operations:\n- `parse(string)`: Parse a string and return a SafeNumber object.\n- `str(SafeNumber)`: Return a string representation of the SafeNumber.\n- `eq(SafeNumber, SafeNumber)`: Returns True if two SafeNumber objects are equal.\n- `add(SafeNumber, SafeNumber)`: Returns the sum of two SafeNumber objects.\n- `sub(SafeNumber, SafeNumber)`: Returns the difference of two SafeNumber objects.\n- `mul(SafeNumber, SafeNumber)`: Returns the product of two SafeNumber objects.\n- `div(SafeNumber, SafeNumber)`: Returns the quotient of two SafeNumber objects.\n- `mod(SafeNumber, SafeNumber)`: Returns the remainder of two SafeNumber objects.\n- `pow(SafeNumber, SafeNumber)`: Returns the power of two SafeNumber objects.\n- `abs(SafeNumber)`: Returns the absolute value of a SafeNumber object.\n- `neg(SafeNumber)`: Returns the negation of a SafeNumber object.\n- `floor_div(SafeNumber, SafeNumber)`: Returns the floor division of two SafeNumber objects.\n- `lshift(SafeNumber, int)`: Returns the left bitwise shift of a SafeNumber object by a specified number of bits.\n- `rshift(SafeNumber, int)`: Returns the right bitwise shift of a SafeNumber object by a specified number of bits.\n- `bitor(SafeNumber, SafeNumber)`: Returns the bitwise OR of two SafeNumber objects.\n- `bitand(SafeNumber, SafeNumber)`: Returns the bitwise AND of two SafeNumber objects.\n- `bitxor(SafeNumber, SafeNumber)`: Returns the bitwise XOR of two SafeNumber objects.\n- `log(SafeNumber)`: Returns the natural logarithm of a SafeNumber object.\n- `log10(SafeNumber)`: Returns the logarithm to base 10 of a SafeNumber object.\n- `log2(SafeNumber)`: Returns the logarithm to base 2 of a SafeNumber object.\n- `sqrt(SafeNumber)`: Returns the square root of a SafeNumber object.\n- `sin(SafeNumber)`: Returns the sine of a SafeNumber object.\n- `cos(SafeNumber)`: Returns the cosine of a SafeNumber object.\n- `tan(SafeNumber)`: Returns the tangent of a SafeNumber object.\n- `asin(SafeNumber)`: Returns the arc sine of a SafeNumber object.\n- `acos(SafeNumber)`: Returns the arc cosine of a SafeNumber object.\n- `atan(SafeNumber)`: Returns the arc tangent of a SafeNumber object.\n- `sinh(SafeNumber)`: Returns the hyperbolic sine of a SafeNumber object.\n- `cosh(SafeNumber)`: Returns the hyperbolic cosine of a SafeNumber object.\n- `tanh(SafeNumber)`: Returns the hyperbolic tangent of a SafeNumber object.\n- `asinh(SafeNumber)`: Returns the hyperbolic arc sine of a SafeNumber object.\n- `acosh(SafeNumber)`: Returns the hyperbolic arc cosine of a SafeNumber object.\n- `atanh(SafeNumber)`: Returns the hyperbolic arc tangent of a SafeNumber object."}, {"instruction": "Create a Python class that models a number in decimal notation. It should be able to perform basic arithmetic operations like addition, subtraction, multiplication, and division. The class should also provide an interface to convert the number to its binary representation.\n\nThe class should handle the following decimal ranges: negative numbers, integers, and fractions. It should also handle floating point numbers when performing arithmetic operations."}, {"instruction": "Create a Python class called `Decimal` that represents a signed 64-bit floating-point number with a precision of 15 decimal digits. Provide methods for addition, subtraction, multiplication, and division. The class should allow conversions between a string representation of the number and the number itself. The class should raise an `OverflowError` if an operation results in an overflow."}, {"instruction": "Create a Python class `BigDecimal` that represents a decimal number with arbitrary precision. The class should allow the user to initialize a `BigDecimal` object with a string representing its value. It should also provide methods to add, subtract, multiply, and divide decimal numbers represented by `BigDecimal` objects."}, {"instruction": "Create a Python class `SafeFloat` to represent a safe floating-point number that can be converted from any string representation of a floating-point number. The `SafeFloat` should be safe in that it should only accept valid string representations of floating-point numbers and convert them to the corresponding internal floating point representation. This representation should be accurate and in the correct format for IEEE 754 with a 64-bit binary floating point number. The `SafeFloat` should also provide convenient methods to convert the internal representation to a string representation, and compare two `SafeFloat` objects for equality based on their underlying representation."}, {"instruction": "Create a Python class called `SafeDecimal` that implements decimal arithmetic operations and supports safe number conversion. The class should have two public methods, `__add__` and `__mul__`, that support addition and multiplication operations for decimal numbers. The class should also have a method called `to_int` that converts the decimal number to an integer.\n\nThe class should support safe number conversion by using the `Decimal` class from the `decimal` module. It should also support formatting and arithmetic operations using the `Decimal` class."}, {"instruction": "Create a Python class `Decimal` that implements arbitrary precision decimal numbers, supporting operations such as addition, subtraction, multiplication, division, and comparison. The class should support arbitrary precision numbers and also support conversion to and from binary float numbers. The class should be able to handle large numbers with thousands of digits, and it should also support arbitrary precision division with an arbitrary precision divisor."}, {"instruction": "Create a Python class called `Decimal` that represents a decimal number in the form of a string representation. The class should contain the following methods:\n\n- `__init__(self, value)`: initializes the Decimal object with a string representation.\n- `__str__(self)`: returns the string representation of the Decimal instance.\n- `__repr__(self)`: returns the string representation of the Decimal instance for debugging purposes.\n- `__add__(self, other)`: returns the sum of the current Decimal instance and another Decimal instance.\n- `__sub__(self, other)`: returns the difference of the current Decimal instance and another Decimal instance.\n- `__mul__(self, other)`: returns the product of the current Decimal instance and another Decimal instance.\n- `__truediv__(self, other)`: returns the quotient of the current Decimal instance and another Decimal instance.\n\nThe class should also support the following operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`. Support for the following operations between two Decimal objects should be defined: `+`, `-`, `*`, `/`, `//`, `%`, `**`.\n\nThe class should also support the following operations between a Decimal object and a numeric literal: `+`, `-`, `*`, `/`, `//`, `%`, `**`, and the unary `+` and `-` operators. For example, `Decimal('10') + 10` should return a Decimal instance with the value 20.\n\nImplement the `__add__`, `__sub__`, `__mul__`, `__truediv__`, `__floordiv__`, `__mod__`, and `__pow__` methods to perform the corresponding arithmetic operations on Decimal instances. For division and modulo operations, the class should support Python's default behavior of rounding up when the result is not an integer.\n\nThe class should also support the following operations between two Decimal objects: `+`, `-`, `*`, `/`, `//`, `%`, `**`, and the unary `+` and `-` operators. For example, `Decimal('10') + 10` should return a Decimal instance with the value 20."}, {"instruction": "Create a Python class `Fraction` that represents fractions. The class should have a constructor that accepts two integers and stores them as a numerator and denominator. The class should have instance methods for addition, subtraction, multiplication and division."}, {"instruction": "Create an implementation of a decimal number class in Python that supports basic operations such as addition, subtraction, multiplication, division, and comparison operators. The class should support float and int numbers as well as a boolean flag to determine whether the class should throw exceptions or return NaN for operations with unsupported types. The class should also support a custom string format for the numbers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: binary search, floating point error checking, floating point rounding error checking\n\n### Task", "fingerprint": null, "content": {"code": "Vector2f eval_time_spline(double t)\n{\n\tassert(t >= 0. && t <= t_max);\n\t\n\t//Do a binary search to find t coordinate for time value\n\tfloat lo = 0., hi = 1.;\n\tVector3f pt;\n\twhile(abs(lo - hi) > 1e-6)\n\t{\n\t\tfloat m = lo + (hi - lo) * .5;\n\t\tpt = eval_spline(m);\n\t\t\n\t\tif(pt.z() > t)\n\t\t\thi = m;\n\t\telse\n\t\t\tlo = m;\n\t}\n\t\n\t//Return the value of the spline at this time\n\treturn Vector2f(pt.x(), pt.y());\n}", "docstring": "//Validate data (assert that path is monotonic)", "function_name": "read_control_points"}, "id": 101, "seed": "Vector2f eval_time_spline(double t)\n{\n\tassert(t >= 0. && t <= t_max);\n\t\n\t//Do a binary search to find t coordinate for time value\n\tfloat lo = 0., hi = 1.;\n\tVector3f pt;\n\twhile(abs(lo - hi) > 1e-6)\n\t{\n\t\tfloat m = lo + (hi - lo) * .5;\n\t\tpt = eval_spline(m);\n\t\t\n\t\tif(pt.z() > t)\n\t\t\thi = m;\n\t\telse\n\t\t\tlo = m;\n\t}\n\t\n\t//Return the value of the spline at this time\n\treturn Vector2f(pt.x(), pt.y());\n}", "__index_level_0__": 30, "concepts": ["binary search", "floating point error checking", "floating point rounding error checking"], "parsing_result": [{"instruction": "Develop a Python program to test the correctness of the binary search algorithm for searching for an element in a sorted list. The program should prompt the user to enter the sorted list and the target value, and print out the index of the target value if it is found, or `-1` otherwise. Ensure that the program catches and handles floating point comparisons that may result in numerical errors. Additionally, ensure the program handles cases where the target value is not present in the list, in which case it should return `-1`."}, {"instruction": "Develop a Python program that accepts two floating point numbers and an operator (plus, minus, or times) as input. The program should perform the specified arithmetic operation on the two numbers and output the result. The program should have robust error handling to check for invalid inputs such as invalid operator and NaN results. Additionally, the program should handle the binary search, floating point error checking, and rounding error checking in a single method to avoid repeating the same checks for each operation. This implementation can be achieved through creating a `class` with a single method, and calling the method from the main program."}, {"instruction": "Implement a Python program that determines whether a given floating-point number is within a range of known upper and lower bounds, accounting for any potential rounding errors. This program should include robust error handling to check for invalid inputs and invalid ranges.\n\nThe program should first accept two floating-point numbers as input: the upper and lower bounds. Then, the program should prompt the user to enter a floating-point number to be checked. The program should continue to prompt the user for input until the user enters a valid number within the specified range.\n\nIf the number is within the range, the program should print \"The number is within the range.\" Otherwise, the program should print \"The number is not within the range.\"\n\nThe program should use the standard binary search algorithm to determine whether the number is within the range. The program should also detect any potential round-off errors in the floating-point arithmetic and handle them appropriately."}, {"instruction": "Write a Python program that determines whether a given floating point number is within a specified tolerance of a valid integer. The program should prompt the user to input a floating point number, and then enter a tolerance value. It should then check if the inputted number is within the tolerance of an integer and output the result.\n\nInclude error handling to handle invalid input such as strings, negative numbers, and NaN values to ensure proper operation. Additionally, consider edge cases such as `0` and `1.0` to ensure proper rounding behavior.\n\nYou can use the `abs()` function to calculate the absolute value of a number, and the `math.isclose()` function to check if two floating point numbers are close enough to each other."}, {"instruction": "Write a Python program that performs binary search on a sorted array of numbers. The program should provide a way to check whether the number is found at the array's index or not, and return the index if found. The binary search algorithm should handle the case where the input array is empty or the target is not found, providing appropriate message for the error condition. The program should also check for floating-point errors caused by comparisons between floating-point numbers and round-off errors."}, {"instruction": "Write a Python program that calculates the distance between two points on a two-dimensional plane. The points are specified as a list of floating point numbers, with the first two elements representing the x- and y-coordinates of the points. The program should output the distance between the two points, rounded to the nearest integer. Ensure that the program uses accurate floating point arithmetics and checks for rounding errors."}, {"instruction": "Design a Python program that takes a floating point number as input and returns a list of tuples `(n, k)` representing the number of digits to the left and right of the decimal point after a binary operation (addition, subtraction, multiplication, division, square root) applied to the input number.\n\nFor example, given `75.4`, the program should output `[(8, 2), (10, 2)]` since the number of digits to the left and right of the decimal point after `75.4` is increased by 2 after applying the square root operation."}, {"instruction": "Write a Python program to find roots of a quadratic equation using the following formula:\n\n![image](https://user-images.githubusercontent.com/14830/139563868-2684f3f9-2223-4ed7-a037-00e890174934.png)\n\nIn the formula, `c` is the discriminant (determinant) of the quadratic equation. The program should take three command-line arguments: `a` (coefficient of x^2), `b` (coefficient of x), and `c` (constant). The program should check if the input is valid (correctly formatted) and provide an appropriate error message if this is not the case. If the input is correct, the program should output the roots of the equation (if there are any). If the roots are complex, the program should output the real part and imaginary part of the roots separately."}, {"instruction": "Construct a Python program that performs a binary search on a given array of floating point numbers. The program should accept the floating point target value and the array of floating point numbers as input. The program should also accept an optional tolerance value as a second argument. If the tolerance is not provided or is negative, the default tolerance value of 0.01 should be used. The program should output the target index in the array if it is found within the tolerance range, or -1 otherwise.\n\nInclude error handling to manage unexpected inputs such as invalid array sizes or array elements that are not of type `float`, and to handle floating point rounding errors and errors such as `ValueError` and `IndexError`. Ensure that the program ensures the target value and tolerance values are consistent with the type `float` and that the tolerance is within a valid range."}, {"instruction": "Implement a Python program that asks the user for a floating-point value and determines whether it is a valid number or not. The program should meet the following requirements:\n- The program should prompt the user for a floating-point value.\n- If the input is not a floating-point value, it should prompt the user again and again until a valid input is received.\n- The program should check if the input is a valid floating-point number using the `isfinite()` and `isclose()` functions.\n- If the input is a valid floating-point number, the program should print a message indicating that it is a valid number."}, {"instruction": "Design a Python program that finds a number within a given range that is closest to an input target, while avoiding floating point rounding error. The program should accept a target number as input and output the closest number that is in the range. The solution should be robust to input range boundaries, and should handle floating point numbers with precision issues appropriately."}, {"instruction": "Implement a Python program that implements a binary search on a given array of floating point numbers with 64-bit precision. The program should allow for the following behaviors:\n\n- Should return the index of the target value in the array if it exists.\n- Should return None if the target value does not exist.\n- Should print out the index of the target value before returning if the target value exists, to facilitate debugging.\n\nThe program should implement the following assertions:\n\n```python\nassert binary_search(array=[-1.0, -0.5, 0, 0.5, 1.0], target=-0.5) == 1\nassert binary_search(array=[-1.0, -0.5, 0, 0.5, 1.0], target=1.1) == None\nassert binary_search(array=[-1.0, -0.5, 0, 0.5, 1.0], target=0) == 2\n```"}, {"instruction": "Write a Python program that takes a target value and a sorted list of floating-point numbers as input. The program should return the index of the target value in the list, or `-1` if the value is not found. Perform binary search, but account for floating-point error checking to ensure that the target value is actually in the list. Additionally, check for rounding error to ensure the returned index is accurate.\n\nFor example, given the target value `1.55` and the sorted list `[1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9]`, the program should return `5` because the target value is found at index `5` with the value `1.5`. However, if the target value `1.5499999999999999` is provided, the program should return `-1` because the value is not found in the list."}, {"instruction": "Construct a Python program that performs integer multiplication by implementing the straightforward method of repeated addition. The program should first prompt for two positive integers and then output the result of the multiplication operation. The program should handle error cases, such as negative inputs, and provide helpful error messages to guide the user to correct the input. Ensure the program is robust against floating point arithmetic errors and rounding issues."}, {"instruction": "Construct a Python program that performs a binary search on an unsorted list of numbers. The program should output the index of the target element in the list, if found. If the element is not found, the program should output '-1'. The program should include error handling to handle invalid input data such as empty lists, repeated elements, or non-numeric elements in the list.\n\nFor example, given the list `[1, 2, 3, 4, 5]` and the target element `2`, the program should return `1`."}, {"instruction": "Write a Python program that performs binary search on a sorted array of floating-point numbers. The program should accept a target value and return the index of the first element in the array that is equal to or larger than the target. Ensure the program handles cases where the target value is outside the bounds of the array."}, {"instruction": "Implement a Python program that performs a binary search on a sorted list of integers. The program should also check for floating point equality, floating point error checking, and floating point rounding error checking. Include robust error handling to validate inputs and check for correctness of the search process."}, {"instruction": "Construct a Python program that reads a file containing a series of floating point numbers, and outputs the sum and average of the numbers in the file. The program should include error handling to prevent invalid inputs and handle floating point errors such as overflow and underflow. Ensure the program also detects specific values such as NaN and Infinity and handles them appropriately."}, {"instruction": "Develop a Python program that evaluates a mathematical expression provided by the user. The program should support expressions with floating point numbers, operands, and operators (+, -, *, /). The evaluation should be performed according to the infix-to-postfix rule. The program should handle errors in the expression input, such as incorrect operator usage or invalid operands. It should also ensure that all operations are performed with the correct precision.\n\nFor example, given an input `3 + 2 * 5 / 6`, the program should output the correct result `3.5` (using floating point numbers to handle rounding errors)."}, {"instruction": "Construct a Python program that reads in three numbers `a`, `b`, and `c` from the user and determines whether the quadratic equation `ax2 + bx + c = 0` has zero, one, or two real roots. The program should use binary search to check whether there are any real roots, and if so, output all roots. The program should handle invalid inputs such as negative values for `a` or `b`, and make sure `b2 - 4ac` is not imaginary."}, {"instruction": "Design a Python program that performs a binary search on a sorted array of floating point numbers. The program should prompt the user to input the target value to be searched, and output the index of the target value within the array, if it exists. If the target value is not found, output the closest value to the target that is within the array. If there are multiple closest values, print only the first one.\n\nInclude robust error handling to validate the input value, and handle the case where the target value is not within the array."}, {"instruction": "Implement a Python program that takes two floating-point numbers as input, `x` and `y`, and computes the value of `x + y` using the summation formula `x + y = x + 2y - y`. Include error handling to handle cases where `y` is close to zero."}, {"instruction": "Write a Python program that takes a floating-point number as input, and outputs both the doubled number and the square root of the number. Ensure that the floating-point error is handled correctly by performing double and square root calculations using the built-in Python `pow` function. Additionally, include robust error handling to check for invalid inputs, such as non-numeric values or negative numbers.\n\nDefine the function `get_double_and_sqrt(num)` to handle inputs and perform calculations. This function should return a tuple of two values: `double_num`, representing the doubled value of the input number, and `sqrt_num`, representing the square root of the input number."}, {"instruction": "Write a Python program that accepts two floating-point numbers `x` and `y`, and determines whether `x` is close to `y`, within a specified tolerance. The program should handle cases where `x` and `y` are large, but within tolerance, and where they are large but outside tolerance. The program should also check for floating point error and roundoff errors.\n\nSpecifically, the program should follow these steps:\n- Check for `x` being close to `y` by calculating the relative error `(x - y) / y`.\n- Check for floating point errors by comparing the absolute value of `x` and `y`.\n- Check for roundoff errors by creating a copy of `x` with its last digit truncated.\n- Output the result of each check.\n\nThe program should include robust error handling for invalid inputs, such as `x` or `y` being `0`."}, {"instruction": "Implement a Python program that accepts two floating point numbers as input and performs simple mathematical operations on them. The program should accept the operation as a single character from a set of predefined operations. Use a Python dictionary to represent a mapping between the operation and its corresponding function. Ensure that the program handles any errors that may occur during the execution of the operations.\n\nFor example, given the input `2.5 1.5 +` the program should output `4.0` as the sum of the two floating point numbers `2.5` and `1.5`. Similarly, given the input `2.5 1.5 -` the program should output `1.0` as the difference between the two numbers."}, {"instruction": "Implement a Python program that computes the square root of a given number. The program should handle floating point numbers with a tolerance of 0.0001. The program should confirm the solution by checking that the square of the solution is within the tolerance of the original number.\n\nThe program should output the solution to the console and determine whether the solution is correct. If the solution is correct, the program should also output the square of the solution."}, {"instruction": "Implement a Python program that demonstrates the effect of floating point rounding, where the input is a list of numbers that are within a specified range:\n- `[-1, 1]` for `float16`\n- `[0, 1]` for `float32`\n- `[0, 2]` for `float64`\n\nThe program should calculate the average of all of the numbers within the range and output the result along with the total number of elements in the list. Additionally, ensure that the program handles corner cases such as all numbers being exactly the same or the list being empty."}, {"instruction": "Write a Python program that implements a binary search algorithm to find the position of a target value in a sorted array. The program should report if the target value is present or not. Additionally, the program should handle potential floating point rounding errors, and provide useful error messages to indicate the source of the error. The program should include robust error handling to detect if the target value is missing from the array."}, {"instruction": "Construct a Python program that reads a sequence of floating point numbers from standard input and outputs the average and standard deviation of the numbers. The program should accept negative numbers, and should handle floating point rounding errors. The solution should also include robust error handling to ensure that the input is a valid floating point number."}, {"instruction": "Implement a Python program that demonstrates how floating point numbers can behave differently from pure integer numbers. The program should include error checking and contain robust error handling to prevent unexpected behavior.\n\nThe program should perform various calculations involving floating point numbers and integers, including:\n- Comparing the results of floating point calculations to their integer counterparts.\n- Checking for overflow conditions and underflow.\n- Checking for floating point rounding errors.\n\nThe program should include robust error handling for invalid inputs. For example, it should be able to handle inputs that are strings or other non-numeric types."}, {"instruction": "Create a Python program that implements a binary search algorithm to locate a target value in a sorted array. The program should output the index of the target in the array, or `-1` if the target is not found. The program should provide robust error handling to validate the input and handle overflow cases."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 5\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: string creation, creation of new folders and directories, creation of a new directory, input validation with assertions, exception handling\n\n### Task", "fingerprint": null, "content": {"code": "static inline bool create_directory(string &path)\n{\n    assert(path.length() > 0);\n    //\u76f8\u5bf9\u8def\u5f84\n    if ('/' != path[0])\n    {\n        char abs_path[MAX_PATH_LEN];\n        getcwd(abs_path, MAX_PATH_LEN);\n        string cur_dir(abs_path);\n        path = cur_dir + \"/\" + path;\n    }\n    //\u521b\u5efa\u6587\u4ef6\u5939\n    try\n    {\n        mkdir(path.c_str(), S_IRWXU);\n        LOG(DEBUG) << \"CREATE DIR=\" << path << \" SUCCEED\";\n        return true;\n    }\n    catch (exception &err_msg)\n    {\n        LOG(ERROR) << \"CREATE DIR=\" << path << \" FAILED\"\n                   << \"error msg:\" << err_msg.what();\n    }\n    return false;\n}", "docstring": "//LOG(DEBUG)<<\"HEX STRING OF BYTES_BUF:\"<<buf.str();", "function_name": "trans_bytes_to_string"}, "id": 113, "seed": "static inline bool create_directory(string &path)\n{\n    assert(path.length() > 0);\n    //\u76f8\u5bf9\u8def\u5f84\n    if ('/' != path[0])\n    {\n        char abs_path[MAX_PATH_LEN];\n        getcwd(abs_path, MAX_PATH_LEN);\n        string cur_dir(abs_path);\n        path = cur_dir + \"/\" + path;\n    }\n    //\u521b\u5efa\u6587\u4ef6\u5939\n    try\n    {\n        mkdir(path.c_str(), S_IRWXU);\n        LOG(DEBUG) << \"CREATE DIR=\" << path << \" SUCCEED\";\n        return true;\n    }\n    catch (exception &err_msg)\n    {\n        LOG(ERROR) << \"CREATE DIR=\" << path << \" FAILED\"\n                   << \"error msg:\" << err_msg.what();\n    }\n    return false;\n}", "__index_level_0__": 31, "concepts": ["string creation", "creation of new folders and directories", "creation of a new directory", "input validation with assertions", "exception handling"], "parsing_result": [{"instruction": "Design a Python function `mkdir_path(path)` that creates a new directory structure according to the given string path. For instance, given the input `'/tmp/my/new/directory'`, the function should create the directory structure `/tmp/my/new/directory` if it does not exist already. Your implementation must handle the following scenarios:\n\n- path is a relative path\n- path contains non-ASCII characters\n- path contains invalid Unicode characters\n- path contains a leading slash, but the target directory already exists\n- path contains multiple consecutive slashes\n- path contains a trailing slash\n\nUse assertions to validate the input, and use exception handling to handle any raised errors."}, {"instruction": "Design a Python function to create an empty folder (folder with an empty file `info.txt`) under a given folder path. The folder name cannot be empty and the function should raise an `AssertionError` when this condition is not met. Write assertions to ensure the input is a non-empty string."}, {"instruction": "Develop a Python function `get_directory_size(path)` that computes the total size in bytes of all files in a directory, including files in subdirectories, by recursively walking through the specified directory. The function should return a `namedtuple` with two fields: `size` and `files`, where `files` is an array of the names of all the files in the directory (not including subdirectories). You can assume that all input paths are valid and exist. You should write assertions to ensure the input is a valid path name."}, {"instruction": "Write a Python function to create a new directory, given the path to that directory (e.g., `../temp/testdir`), recursively if the path does not exist. After the directory is created, the function should return the full path to the directory. The function should raise an `OSError` if the directory already exists or if a required parent directory does not exist."}, {"instruction": "Implement a Python function `create_folders(path)` for creating a new directory structure with the following rules:\n\n- Every folder that is created in the process must contain a README file, which is a text file that contains a brief description of the folder\n- The names of the folders and files are created in the order of their appearance. For instance, if the input is 'directory_a/directory_b/directory_c/readme.txt', the directory structure should be:\n    - directory_a\n    - directory_a/directory_b\n    - directory_a/directory_b/directory_c\n    - directory_a/directory_b/directory_c/readme.txt\n- The input string should not contain any special characters except slashes (/)\n- You may use `os` and `os.path` modules to implement your function\n- Write assertions to check that the input is a valid path and that the function does not throw any errors\n- Handle any possible errors that may arise from the creation of new directories and files\n\nFor example, the function should pass the following assertions:\n\n```python\nassert create_folders('directory_a/directory_b/directory_c/readme.txt') == [('directory_a', 'directory_b', 'directory_c', 'readme.txt')]\nassert create_folders('directory_a/directory_b/readme.txt') == [('directory_a', 'directory_b', 'readme.txt')]\nassert create_folders('directory_a/readme.txt') == [('directory_a', 'readme.txt')]\nassert create_folders('readme.txt') == [('readme.txt')]\n```"}, {"instruction": "Design a Python function that creates a new folder structure and files in a given input string directory path. The function should create a new directory with the provided name and create (in the new directory) new files named 'file1.txt', 'file2.txt', ..., 'fileN.txt' with the contents being the input string. The function should support the following errors:\n- the input string contains characters that are not allowed in file names, such as non-ASCII characters\n- the input string contains characters that are not allowed in file names, such as Windows reserved characters\n- the input string is not a valid directory path, such as a path that is not absolute nor relative\n- the input string is pointing to an existing directory"}, {"instruction": "Construct a Python function `create_directories(path)` that creates all the directories required to build a new path. The function should obey the following rules when creating the new path:\n- the new path should not exist\n- the new path should not contain any non-alphanumeric characters besides the forward slash (`/`) character\n- the new path should not contain any consecutive forward slashes (`//`)\n\nFor example, given the input `\"/a/b/c/d\"`, the function should create directories `a`, `a/b`, `a/b/c`, and `a/b/c/d` in the current working directory."}, {"instruction": "Write a Python function `create_folder(path)` that creates folders and subfolders to the given path.\nThe path is made of a series of folder names separated by forward slashes ('/'). The function should create all the intermediate folders if they do not exist yet. It should raise an exception if the provided path is not valid (e.g., does not end with a forward slash).\n\nFor example, the following assertions should pass:\n\n```python\ncreate_folder('/home/user/project/my_file.py')\ncreate_folder('/home/user/project/module/submodule1')\ncreate_folder('/home/user/project/module/submodule2/subsubmodule')\n```"}, {"instruction": "Design a Python function that creates a new folder with a specified name and subfolders in a specified parent folder. The function should return the path of the new folder.\n\nThe function should support both relative and absolute paths. When the parent folder does not exist, the function should raise an exception."}, {"instruction": "Design a Python function `create_dirs(path: str)` that creates a directory structure from a given path string. The function should create a new directory at the path provided by the input and any necessary parent directories. It should recursively create intermediate directories as needed. For example, given the input path `path = '/tmp/python/example/example.txt'`, the function should create the following directory structure:\n\n```\n/tmp\n  /python\n    /example\n      /example.txt\n```\n\nIf a directory already exists at the given path, the function should return without any changes. If the path is invalid, the function should raise a ValueError."}, {"instruction": "Implement a Python function `mkdir_p(path)` that creates a new directory at the specified path. The function should check if the parent directory already exists, and if not, call the `mkdir_p` function recursively to create it. The function should also handle the case where the path is invalid or already exists. It should raise an exception `FileNotFoundError` when provided with an invalid path, and `OSError` when provided with a directory that already exists. The function should return nothing."}, {"instruction": "Implement a Python program that recursively creates new directories given as folder names. The input string should be composed of a sequence of folders and a file name, where the file name is appended to the last folder. The program should create all the necessary intermediate directories by recursively creating intermediate directories. The folder names can contain only lowercase letters, digits, and underscore. The intermediate folders are separated by slashes (/) and the file name is separated by an underscore (_) from the last folder. The program should support the following simple cases:\n\n```python\nassert create_folder(\"foldername1/foldername2/foldername3/filename\") == True\nassert create_folder(\"foldername1/foldername2/foldername3/_filename\") == True\nassert create_folder(\"foldername1/foldername2/foldername3/filename_\") == True\nassert create_folder(\"foldername1/foldername2/foldername3/_filename_\") == True\nassert create_folder(\"foldername1/foldername2/foldername3/filename_\") == True\nassert create_folder(\"foldername1/foldername2/foldername3/_filename\") == True\n```\n\nThe program should handle erroneous inputs gracefully, such as incorrect folder names or file names. Additionally, implement the `__str__` method to return a formatted string showing the status of the folder creation operation, and the status of the operation for each intermediate folder during the procedure."}, {"instruction": "Construct a Python function to create a new folder named `test_folder` under the current working directory. The function should create the folder and populate it with a file named `test_file` containing the string `\"This is a test file.\"`. The function should handle all exceptions that might occur during the process, such as file or directory creation failures."}, {"instruction": "Develop a Python function to create a new folder with the name specified by a string, either from the current working folder or from another folder.\n- If the folder name has no special characters, the function should create a folder with the given name.\n- If the folder name contains special characters, the function should firstly create a new directory with a random name and then create a folder with the name specified.\n\nValidate the input as follows:\n- If the input is of type `str`, the function should pass and create the folder.\n- If the input is of type `int`, the function should return an error with the corresponding message."}, {"instruction": "Develop a Python function `create_directory(path)` to create a directory specified by the input string `path`. The function should create the parent directory along with the directory itself if it does not exist yet. For example, given the path `'/foo/bar/baz'`, the function should create the directories `/foo/bar` and `/foo/bar/baz` if they do not exist. If any of the parent directories already exist, the function should raise an exception without creating any new directories.\n\nThe function should raise an appropriate exception when the input string is invalid or if the directory already exists."}, {"instruction": "Construct a Python function `create_directory(path, recursive=False)` to create a directory with the given path. The function should create all the folders in the path if they do not exist, and it should not create any folders if the input path does not contain any new folder names. The function should handle the scenario when a non-empty directory already exists.\n\nAdditionally, the function should allow the caller to specify whether it should use recursion to create the missing folders. If `recursive` is `True`, then the function should create all the missing folders along the path. Otherwise, it should only create the immediate parent folders.\n\nThe function should return a `NameError` if the input string is invalid, such as if it contains invalid characters. It should raise an `OSError` if the system call fails. For all the other exceptions, the function should print a descriptive error message and exit."}, {"instruction": "Write a function to create new directories and subdirectories with the given names. The function should support the following input:\n- a path string\n- 0-2 subdirectories\n- 0-3 levels of subdirectories\n\nGiven the input path `'root/sub1/sub2/sub3'`, the function should create a folder structure as follows:\n\n```\nroot/\n\u251c\u2500\u2500 sub1/\n\u2502   \u251c\u2500\u2500 sub2/\n\u2502   \u2502   \u2514\u2500\u2500 sub3/\n\u2502   \u2514\u2500\u2500 sub3/\n\u2514\u2500\u2500 sub3/\n```\n\nFor example, the following assertions should pass:\n\n```python\nassert create_directories('root') == ['root']\nassert create_directories('root/sub1') == ['root', 'root/sub1']\nassert create_directories('root/sub1/sub2') == ['root', 'root/sub1', 'root/sub1/sub2']\nassert create_directories('root/sub1/sub2/sub3') == ['root', 'root/sub1', 'root/sub1/sub2', 'root/sub1/sub2/sub3']\n```\n\nThe function should throw an `AssertionError` if any of the subdirectories already exist."}, {"instruction": "Create a Python function to create a new directory at a given path. The function should also create any intermediate subdirectories if they do not exist yet. For example, the path `a/b/c` would create the directories `a` and `a/b` if they do not exist. The function should handle the following errors:\n- if the path is invalid, raise a `ValueError`\n- if the path is absolute but not at the root, raise a `ValueError`\n- if the path cannot be created, raise an `OSError`\n\nThe function should satisfy the following assertions:\n\n```python\ncreate_folder('/tmp/foo')\ncreate_folder('/tmp/a/b/c')\ncreate_folder('/tmp/a/b/c/d/e/f')\ntry:\n    create_folder('/tmp/a/b/c/d/e/f/g')\nexcept OSError as e:\n    pass\ntry:\n    create_folder('/tmp')\nexcept ValueError as e:\n    pass\ntry:\n    create_folder('/tmp/a/b')\nexcept ValueError as e:\n    pass\n```"}, {"instruction": "Develop a Python function to create a new directory at the specified path, if it does not exist. If the path is invalid, the function should return a `ValueError` message. For the new directory, the name is composed of the combination of the last two parts of the path, concatenated with a unique number. The function should also check whether the directory already exists before creating it."}, {"instruction": "A Python function `create_directory(path)` should accept a string with a directory path, then create the directory and all its parent directories if they do not exist. If the directory already exists, the function should raise an `FileExistsError` exception.\n\nUse one of the following three approaches to handle the exception and implement the function:\n- Use `os.makedirs`\n- Use `os.mkdir` and handle the error\n- Create a new function `create_directory` that calls `os.makedirs` and `os.mkdir` one after the other to create the directories"}, {"instruction": "Construct a Python function `create_folder(path)` that creates a new folder inside the current working directory and returns the path of the created folder. The function should print an error if the folder already exists. Additionally, implement a function `create_folder_tree(path)` that creates a folder and all its parent folders to the given path."}, {"instruction": "Construct a Python function `create_directory(path)` to create the directory specified by the path. The function should perform the following steps:\n1. Create the new directory if it does not already exist.\n2. Check that the input path is valid and is not a file.\n3. Ensure the parent directory of the new directory exists.\n4. Ensure the directory is marked as a folder.\n\nThe function should handle erroneous inputs gracefully, such as when the path is an existing file or contains characters that are not allowed in file names. Additionally, implement a `__str__` method to return a formatted string indicating the state of the directory.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert create_directory(\"NewDir\") == \"NewDir created successfully\"\ntry:\n    create_directory(\"newDir\")\nexcept ValueError as e:\n    pass\nassert create_directory(\"NewDir2\") == \"NewDir2 created successfully\"\ntry:\n    create_directory(\"NewDir3/NewDir4\")\nexcept ValueError as e:\n    pass\ntry:\n    create_directory(\"NewDir3/NewDir4/NewDir5\")\nexcept ValueError as e:\n    pass\n```"}, {"instruction": "Construct a Python function `make_directory(path)` to create a directory with the given name. The function should accept a relative or absolute path to a new directory, and should create the directory with the appropriate permissions. You should use exception handling to ensure the function does not crash when handling invalid input. Additionally, the function should handle the case when the directory already exists. Additionally, the function should handle the case when the path is a directory, but not the requested file.\n\nUse assertions to test the function with the following cases:\n\n```python\ntry:\n    make_directory('./testfolder/testfile.txt')\nexcept FileExistsError as e:\n    print('File exists')\nexcept IsADirectoryError as e:\n    print('Not a file')\nmake_directory('./testfolder')\n```"}, {"instruction": "Construct a Python function that creates a new folder on the current directory, given the name of the new folder. The function should handle invalid inputs gracefully, such as when the folder name already exists or when the folder name contains invalid characters. Additionally, the function should raise an error if the current directory is not writable."}, {"instruction": "Create a Python function that creates a new directory with a given name, along with its subdirectories and files. The function should handle erroneous inputs gracefully, such as invalid input or input that is already occupied by another file or directory. The function should also throw exceptions in case of insufficient permission to create the new directory.\n\nWrite a few examples of how to use the function to create a directory structure as shown in the diagram below.\n\n![Example 9](https://i.imgur.com/b0zN7fL.png)"}, {"instruction": "Write a Python function to create a new directory named `new_directory` in current working directory, and within the directory, create a file named `new_file` with the content `This is a new file!`. The function should accept an input string `message` that is the content of the new file.\n\nThe function should handle the following cases:\n- the input string is empty\n- the input string is longer than 100 characters\n- the input string contains any of the following special characters: `~!@#$%^&*()_+`-=`{[]};:'\"<>/?|\\`\n\nIf any of the above cases is detected, the function should raise an exception."}, {"instruction": "Develop a Python function `create_directory_tree(root_dir: str)` of a directory structure that is nested to the specified depth. The function should create a set of new directories and subdirectories according to the specified depth. The function should accept the root directory name as an input, and should raise an exception if the input is a relative path. The function should create the entire directory structure from scratch. In case of failure, the function should rollback and return a list of directories that have been created successfully and any other subdirectories that were created but are not completed.\n\nThe function should validate the input before generating the entire directory structure. The function should also handle exceptions such as failure to create directories and invalid inputs gracefully, using the logging module to capture all the relevant information."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: formatting a duration object, string concatenation with QStringList, string formatting, string length\n\n### Task", "fingerprint": null, "content": {"code": "QString formatDurationStr(std::chrono::seconds dur)\n{\n    using days = std::chrono::duration<int, std::ratio<86400>>; // can remove this line after C++20\n    const auto d{std::chrono::duration_cast<days>(dur)};\n    const auto h{std::chrono::duration_cast<std::chrono::hours>(dur - d)};\n    const auto m{std::chrono::duration_cast<std::chrono::minutes>(dur - d - h)};\n    const auto s{std::chrono::duration_cast<std::chrono::seconds>(dur - d - h - m)};\n    QStringList str_list;\n    if (auto d2{d.count()}) str_list.append(QObject::tr(\"%1 d\").arg(d2));\n    if (auto h2{h.count()}) str_list.append(QObject::tr(\"%1 h\").arg(h2));\n    if (auto m2{m.count()}) str_list.append(QObject::tr(\"%1 m\").arg(m2));\n    const auto s2{s.count()};\n    if (s2 || str_list.empty()) str_list.append(QObject::tr(\"%1 s\").arg(s2));\n    return str_list.join(\" \");\n}", "docstring": "// no default case, so the compiler can warn about missing cases", "function_name": "ConnectionTypeToQString"}, "id": 114, "seed": "QString formatDurationStr(std::chrono::seconds dur)\n{\n    using days = std::chrono::duration<int, std::ratio<86400>>; // can remove this line after C++20\n    const auto d{std::chrono::duration_cast<days>(dur)};\n    const auto h{std::chrono::duration_cast<std::chrono::hours>(dur - d)};\n    const auto m{std::chrono::duration_cast<std::chrono::minutes>(dur - d - h)};\n    const auto s{std::chrono::duration_cast<std::chrono::seconds>(dur - d - h - m)};\n    QStringList str_list;\n    if (auto d2{d.count()}) str_list.append(QObject::tr(\"%1 d\").arg(d2));\n    if (auto h2{h.count()}) str_list.append(QObject::tr(\"%1 h\").arg(h2));\n    if (auto m2{m.count()}) str_list.append(QObject::tr(\"%1 m\").arg(m2));\n    const auto s2{s.count()};\n    if (s2 || str_list.empty()) str_list.append(QObject::tr(\"%1 s\").arg(s2));\n    return str_list.join(\" \");\n}", "__index_level_0__": 32, "concepts": ["formatting a duration object", "string concatenation with QStringList", "string formatting", "string length"], "parsing_result": [{"instruction": "Create a Python class that represents a duration in hours, minutes, and seconds. The class should be initialized with a duration in seconds. The class should include a method called `to_string` that returns a formatted string of the duration in the form of `\"hh:mm:ss\"`. The method should handle cases where the duration is negative, zero, or exceeds 24 hours. The class should also include a static method called `from_string` that takes a formatted string of the duration and returns a Duration object. For example, the following assertions should pass:\n\n```python\nassert Duration.from_string('24:00:00').to_string() == '24:00:00'\nassert Duration.from_string('25:00:00').to_string() == '00:00:00'\nassert Duration.from_string('00:00:00').to_string() == '00:00:00'\nassert Duration.from_string('1:00:00').to_string() == '01:00:00'\n```"}, {"instruction": "Create a Python class that implements a duration object that can be initialized with a floating point number of seconds and then converted to a string representation of the corresponding time duration in the form \"{hours}:{minutes}:{seconds}\". The duration should be formatted as \"00:00:00\" if the corresponding time is less than 1 second. The conversion should handle cases where the floating point number of seconds is truncated due to precision loss.\n\nFor example, the constructor should pass the following assertions:\n\n```python\nduration = Duration(61.5)\nassert duration.to_string() == '00:01:01.5'\nduration = Duration(728)\nassert duration.to_string() == '02:01:28'\nduration = Duration(54.3)\nassert duration.to_string() == '00:00:54.3'\nduration = Duration(3661)\nassert duration.to_string() == '01:01:01'\n```"}, {"instruction": "Design a Python class that models a duration of time in seconds in a form of a tuple of integers `(hours, minutes, seconds)`. The class should support initialization, comparison, and conversion to a string format.\n\nThe `__str__` method should display the duration in the format `HHH:MM:SS`. For example, the duration `120:5:13` should be formatted as `02:05:13`.\n\nThe `__eq__` method should return `True` if the two duration objects are equal, `False` otherwise.\n\nThe `__lt__` method should return `True` if the duration object on the left side of the operator is less than the duration object on the right side, `False` otherwise.\n\nThe `__add__` method should return the sum of two duration objects as a new duration object.\n\nThe `__sub__` method should return the difference between two duration objects as a new duration object."}, {"instruction": "Design a Python class called `Duration` that represents a duration in hours, minutes, and seconds and has a method called `format` that returns a formatted string representing the duration. The format should be `'HH:MM:SS'`, where each part of the format is padded with leading zeros if necessary.\n\nFor example, given `Duration(2, 30, 45)`, the function should return `'02:30:45'`."}, {"instruction": "Create a Python class named `Duration` that represents a duration of time in hours, minutes, and seconds. The class should have the following public methods:\n\n- `add(self, duration)`: add another duration object to the current one\n- `subtract(self, duration)`: subtract another duration object from the current one\n- `to_string(self)`: convert the duration object into a string in the form of `hh:mm:ss`\n\nThe `Duration` class should support the addition and subtraction of `Duration` objects by including an `__add__` and `__sub__` method, respectively. The `__add__` method should return a new duration object that is the sum of the two durations while the `__sub__` method should return a new duration object that is the difference between the two durations.\n\nThe `__str__` method should take the duration object and return a formatted string in the form of `hh:mm:ss`, where `hh` stands for hours, `mm` for minutes, and `ss` for seconds."}, {"instruction": "Implement a Python class called `Duration` that takes a duration in seconds as an argument. The class should have the following properties:\n\n- `seconds`: number of seconds that the duration covers.\n- `hours`: number of hours that the duration covers.\n- `minutes`: number of minutes that the duration covers.\n- `seconds_remaining`: number of seconds remaining in the duration.\n\nThe class should also have the following methods:\n\n- `to_string()`: returns a string representing the duration, e.g., `'3h 20min 5s'`\n- `to_qstring()`: returns a `QString` representing the duration, e.g., `QString('2:20:05')`\n- `add(other)`: adds another duration to the current duration and returns the result.\n- `subtract(other)`: subtracts another duration from the current duration and returns the result.\n\nThe `to_string()` and `to_qstring()` methods should have a time complexity of $O(1)$ and output the duration in the format `hh:mm:ss`. The `add()` and `subtract()` methods should have a time complexity of $O(1)$ and also take $O(1)$ time to perform addition or subtraction according to the specified operation."}, {"instruction": "Design a Python class to store a duration in days, hours, minutes, and seconds. The class should have at least two methods:\n\n- a method that takes a string and converts it into a duration object\n- a method that takes a duration object and converts it into a string\n\nThe string should be formatted as `d:hh:mm:ss` where `d` is the number of days, `hh` is the number of hours, `mm` is the number of minutes, and `ss` is the number of seconds.\n\nFor example, given the string `12:34:56:78`, the class should return `12 days, 3 hours, 4 minutes, 56 seconds, and 78 milliseconds`."}, {"instruction": "Create a Python class called `Duration` that tracks time in seconds. The class should support addition, subtraction, and multiplication operations. When the class is initialized, it should take three arguments: `hours`, `minutes`, and `seconds`. The class should also support comparison operations.\n\nHere is an example of the expected behavior:\n\n```python\n# initialize a Duration object with 1 hour, 2 minutes, and 3 seconds\nduration = Duration(1, 2, 3)\n# add another Duration object with 4 hours, 5 minutes, and 6 seconds\nduration = duration + Duration(4, 5, 6)\n# format the duration into a string in the following format: 1h2m3s\nprint(f'{duration}')\n# initialize two Duration objects with 3 hours, 4 minutes, and 5 seconds\nduration1 = Duration(3, 4, 5)\nduration2 = Duration(3, 4, 5)\n# subtract the two Duration objects\nduration = duration1 - duration2\n# format the duration into a string in the following format: 0h0m0s\nprint(f'{duration}')\n# multiply the Duration object with 2\nduration = duration * 2\n# format the duration into a string in the following format: 0h0m10s\nprint(f'{duration}')\n```\n\nThe expected output is:\n\n```\n1h2m3s\n0h0m0s\n0h0m10s\n```"}, {"instruction": "Create a Python class named `Duration` that represents a duration of time, including a number of hours, minutes, and seconds. The class should have an initializer method that takes three parameters. It should also implement the following methods:\n\n- `format()` - returns a string in the format `[hours:]minutes:seconds`\n- `to_seconds()` - returns the total number of seconds represented by the duration"}, {"instruction": "In C++, the time duration is represented as a combination of hours, minutes, and seconds. For example, 1 hour, 2 minutes and 3 seconds can be represented as `1h, 2m, 3s` or `1h2m3s`. The actual format of the time string is flexible and can be anything that uniquely identifies the duration without ambiguity. For example, 1 hour, 2 minutes and 3 seconds can be represented as 1h2m3s, 1:02:03, 1:02:03:00, 3:02, etc. The longest duration string is 23:59:59:999, 23 hours, 59 minutes, 59 seconds, and 999 milliseconds.\n\nWrite a C++ class called `Duration` that represents time duration as a combination of hours, minutes, and seconds, and supports the operators `+` and `-` to add and subtract durations. The class should also provide a constructor that takes a string that represents a duration. Finally, design the class to allow the duration to be output as a string with the most appropriate format."}, {"instruction": "Redesign the Duration class from the previous assignment. Instead of storing the time duration as a single integer value, the class should keep track of the hours, minutes, and seconds separately. The class should provide various member functions and operator overloads to perform mathematical operations on durations. The class should also provide a string representation of the duration as a `QString` object, which should be in the following format.\n\n```\nHH:MM:SS\n```\n\nFor example, the string representation of the Duration `Duration(3, 5, 7)` should be `03:05:07`."}, {"instruction": "Write a Python class called Duration that represents a duration in seconds.\n\nThe class should have two methods:\n\n- `__init__(self, seconds)` initializes the duration object with the specified number of seconds.\n- `__str__(self)` returns the formatted duration string as \"h:mm:ss.sss\" where \"h\" represents hours, \"mm\" represents minutes, and \"ss.sss\" represents microseconds.\n\nFor example, the following code should output \"2:30:01.123\":\n\n```python\nduration = Duration(1501123)\nprint(duration)\n```\n\nThe class should support arithmetic operations such as adding durations, subtracting a duration from another, and comparing durations.\n\n```python\nduration1 = Duration(123456789)\nduration2 = Duration(123456)\nduration1 + duration2\nduration1 - duration2\nduration1 < duration2\nduration1 > duration2\n```"}, {"instruction": "Design a Python class to represent a duration. It should support the following operations:\n\n- initialization: take a string representing a duration in the form `<hours>:<minutes>:<seconds>`\n- equal comparison: check if two duration objects are equal\n- lower comparison: check if one duration object is smaller than another\n- string representation: returns a string in the form `<hours>:<minutes>:<seconds>`\n\nThis class should include unit tests to verify the correctness of the implementation.\n\nFor example, the following assertions should pass:\n\n```python\nduration1 = Duration(hours=1, minutes=30, seconds=10)\nduration2 = Duration(hours=1, minutes=30, seconds=10)\nassert duration1 == duration2\n\nduration3 = Duration(hours=1, minutes=30, seconds=11)\nassert duration1 < duration3\n```"}, {"instruction": "Implement a Python class that represents a duration stored as a pair of `hours` and `minutes` and has a `seconds` property. It should have the following methods:\n\n- `add` to add a number of seconds to the duration,\n- `sub` to subtract a number of seconds from the duration,\n- `totalSeconds` to return the total number of seconds in the duration, and\n- `toString` to return a formatted string representation of the duration, e.g., \"1 hour 30 minutes 5 seconds\".\n\nThe class should be immutable. All instance methods should return a new duration object after the operation is executed. The implementation should include robust error handling to handle invalid inputs, such as negative seconds or minutes."}, {"instruction": "Create a Python implementation of the `Duration` class. The class should represent a duration expressed in hours, minutes, and seconds with a default value of 0 hours, 0 minutes, and 0 seconds. The class should define `self.hours`, `self.mins`, and `self.secs` as private attributes that can be read and set, and should be initialized with the given values. The class should also define two special methods:\n\n- `__add__` that adds two `Duration` objects together. The new `Duration` should have `self.hours` plus `other.hours`, `self.mins` plus `other.mins`, and `self.secs` plus `other.secs`.\n- `__sub__` that subtracts `other` from `self`. The new `Duration` should have `self.hours` minus `other.hours`, `self.mins` minus `other.mins`, and `self.secs` minus `other.secs`.\n\nThe `__sub__` method should be implemented as if the result of subtracting `other` from `self` is negative, the returned `Duration` object should have `self.hours` minus `abs(other.hours)`, `self.mins` minus `abs(other.mins)`, and `self.secs` minus `abs(other.secs)`. The class should also define the following special methods:\n\n- `__str__` that returns the `Duration` in the format `hours:mins:secs`\n- `__repr__` that returns the object in the format `\"Duration(hours=hours, mins=mins, secs=secs)\"`\n\nFor example, the following code should print the `Duration` object with 1 hour, 15 minutes, and 30 seconds:\n\n```python\nDuration(hours=1, mins=15, secs=30)\n```"}, {"instruction": "Create a Python class that represents a duration of time with hours, minutes, and seconds. The class should have an `output` method that formats the duration into a string that includes hours, minutes, and seconds. The class should also include a `parse_duration` class method that takes a string in the format 'HH:MM:SS' and returns a `Duration` object.\n\nFor example, the following code:\n\n```python\nDuration.parse_duration('22:30:30')\n```\n\nshould output the following:\n\n```python\nDuration(hh=22, mm=30, ss=30)\n```"}, {"instruction": "Given a duration object with attributes for hours, minutes, and seconds, implement a class that formats the object as a string. The class should implement a method called `to_string` that returns a string that is formatted as HH:MM:SS.\n\nFor example, given a duration object that represents 1 hour, 2 minutes, and 3 seconds, the class should return the string '01:02:03'."}, {"instruction": "Create a Python class to represent a duration, which is a timespan that consists of a number of hours, minutes, and seconds. The class should support addition and subtraction of durations, and it should be able to format itself into a human-readable string.\n\nFor example, the following code should produce the following output:\n\n```python\nduration = Duration(hours=1, minutes=30, seconds=17)\nprint(duration)\n# Output: 1h 30m 17s\n```"}, {"instruction": "Create a Python class that represents a duration. This class should have attributes for hours, minutes, and seconds. The class should have the following methods:\n\n- `__init__`, which takes as input a duration string in the format 'h:m:s' and parses it to initialize the duration object. The input string may have a space between the time units. If the input string is invalid, the duration object should be initialized to 0:0:0.\n- `__str__`, which returns a formatted string representation of the duration object. The formatted string should use the format 'h:m:s', where 'h', 'm', and 's' are the hours, minutes, and seconds, respectively, padded with zeros if necessary.\n- `to_seconds`, which returns the total number of seconds in the duration object."}, {"instruction": "Construct a Python class that represents a duration, with attributes for hours, minutes, and seconds. The class should provide the following public methods:\n\n- `__init__(self, secs)`: constructor that takes a number of seconds as an argument and sets the attributes accordingly.\n- `__str__(self)`: converts the duration into a string representation with the format \"hh:mm:ss\".\n- `__add__(self, other)`: adds two durations and returns a new duration object.\n- `__eq__(self, other)`: compares two duration objects and returns a boolean indicating whether they are equivalent.\n- `__lt__(self, other)`: compares two duration objects and returns a boolean indicating whether the first is less than the second.\n- `__gt__(self, other)`: compares two duration objects and returns a boolean indicating whether the first is greater than the second.\n- `__le__(self, other)`: compares two duration objects and returns a boolean indicating whether the first is less than or equal to the second.\n- `__ge__(self, other)`: compares two duration objects and returns a boolean indicating whether the first is greater than or equal to the second.\n\nThe class should also provide appropriate exception handling and error messages for invalid inputs.\n\nFor example, given a `Duration` object with the following attributes: `hours = 2`, `minutes = 10`, and `seconds = 20`, the program should print `2:10:20` when called with `print(duration)`. Similarly, given two `Duration` objects with the following attributes: `hours = 2`, `minutes = 10`, and `seconds = 20`, and `hours = 1`, `minutes = 0`, and `seconds = 0`, the program should print `3:10:20` when called with `print(duration1 + duration2)`."}, {"instruction": "Design a Python class to represent a duration in seconds. The class should provide methods that add or subtract durations, convert to seconds, and format the duration into a human-readable string. The class should be robust to invalid inputs and handle edge cases such as negative durations.\n\nFor example, the following code snippet should execute without raising any exceptions:\n\n```python\nduration = Duration(hours=1)\nduration.subtract(seconds=3600)\nassert duration.seconds == 3600\nduration = Duration(seconds=3601)\nduration.add(hours=1)\nassert duration.seconds == 3601\nduration = Duration(minutes=1)\nduration.subtract(seconds=59)\nassert duration.seconds == 60\nduration = Duration(days=1)\nduration.subtract(hours=24)\nassert duration.seconds == 0\n```"}, {"instruction": "Design a class `Duration` to manage time durations in hours, minutes, and seconds. Inside the class, have methods to add, subtract, and convert a duration object to a string.\n\nThe `Duration` class should also implement the following string formatting features:\n\n- A format string that uses the format specifier `'%H'` to represent hours, `'%M'` to represent minutes, and `'%S'` to represent seconds.\n- A format string that uses the format specifier `'h'` to represent hours, `'m'` to represent minutes, and `'s'` to represent seconds, where the first letter is lowercase.\n\nThe `Duration` class should use string concatenation to support outputting a duration object in both formats.\n\nFor example, given a `Duration` object `duration` with hours, minutes, and seconds respectively 3, 45, 30, calling `str(duration)` with the format string `'%H:%M:%S'` should return the string `'03:45:30'`. Similarly, calling `str(duration)` with the format string `'h:m:s'` should return the string `'3:45:30'`."}, {"instruction": "Create a C++ class called `Duration` that models a duration as a number of hours, minutes, and seconds. The class should have a constructor that takes the number of hours, minutes, and seconds as arguments. It should also have a method `display()` that prints the duration in the HH:MM:SS format. The output should include a leading `0` for hours when necessary.\n\nThe class should also have a method `add_to(Duration& target)` that takes an object of type `Duration` as argument and adds it to the current object. The method should return a reference to the current object for method chaining.\n\nFor example, the following code should print `1 day, 1 hour, 2 minutes, 30 seconds`:\n\n```cpp\nDuration duration{0, 0, 0};\nDuration addend{1, 2, 30};\nduration.add_to(addend).display();\n```"}, {"instruction": "Create a Duration class that stores an amount of time as hours, minutes, and seconds. Create a program that can add two durations, subtract two durations, and print a duration in the format 'hh:mm:ss'. The program should handle cases where the absolute sum of the duration is greater than 24 hours (24 hours and 1 minute are considered as 1 day)."}, {"instruction": "Create a C++ class named `Duration` that represents a duration of time in hours, minutes, and seconds. The class should have a constructor with three arguments: hours, minutes, and seconds. When the class is initialized using a string formatted with the `hh:mm:ss` format, the class should be able to parse the string and store the individual components of the duration. Otherwise, an exception should be raised. The class should also have a member function `ToString` that returns the duration in the formatted `hh:mm:ss` string."}, {"instruction": "Design a Python class that represents a duration of time in seconds. The class must include the following attributes:\n\n- `self.seconds`: the number of seconds in the duration\n- `self.minutes`: the number of minutes in the duration\n- `self.hours`: the number of hours in the duration\n- `self.days`: the number of days in the duration\n\nThe class must also include the following methods:\n\n- `self.add(other)`: add the other duration to `self` and return the result\n- `self.subtract(other)`: subtract the other duration from `self` and return the result\n- `self.is_valid_duration()`: return `True` if `self` represents a valid duration, `False` otherwise\n\nThe class must also define a string representation for outputting a formatted string representation of the class.\n\nThe class should support the following operations with a valid duration object:\n\n```python\nduration1 = Duration(3661)\nduration2 = Duration(300)\nduration3 = duration1.add(duration2)\nprint(duration3)  # '3691s'\nduration3 = duration1.subtract(duration2)\nprint(duration3)  # '3631s'\n```"}, {"instruction": "Create a Duration class that stores time in seconds as an integer.\nThe class should have an initialization function that takes time in seconds as an integer.\nAdditionally, the class should have two methods: one that returns the time in seconds as an integer and the other that returns a QString that displays the time in the format \"hh:mm:ss\".\n\nFor example, given time=60, the object should be able to perform the following operations:\n\n```python\nprint(obj.time())  # prints 60\nprint(obj.display())  # prints 0:01:00 as a QString\n```"}, {"instruction": "Design a Python class that represents a duration of time. The class should include the following properties:\n\n- `seconds`: the number of seconds in the duration\n- `minutes`: the number of minutes (computes its value from `seconds`)\n- `hours`: the number of hours (computes its value from `minutes`)\n- `days`: the number of days (computes its value from `hours`)\n\nThe class should offer the following methods:\n\n- `__str__`: a string representation of the duration formatted as `'d:hh:mm:ss'`\n- `format`: a string representation of the duration formatted as `'d days, hh hours, mm minutes, ss seconds'`\n\nThe class should also include a static method that converts a string representation of a duration into a `Duration` object.\n\nFor example, the following code should pass:\n\n```python\nfrom tests import Test\ntest = Test()\ntest.run_tests(Duration.parse_duration)\n```"}, {"instruction": "Design a Python class that represents a duration (time interval) with hours, minutes, and seconds. The class should support basic arithmetic operations, such as `duration_1 + duration_2` and `duration_1 - duration_2`. Also, the class should support formatting the duration in a human-readable format, such as \"2h 3m 4s\". The class should be defined with appropriate member functions and data members, and it should include the appropriate unit tests to ensure correctness and extendability."}, {"instruction": "Design a Python class named `Duration` that represents a duration of time, such as a number of seconds, minutes, hours, or days, and supports arithmetic operations such as adding and subtracting durations. Each instance of `Duration` should be initialized with a proper duration in seconds or a valid string representation. The `Duration` object should also support formatting the duration in human-readable form, including appropriate units for seconds, minutes, hours, and days.\n\nThe provided code snippet demonstrates how to initialize and manipulate a `Duration` object based on a number of seconds or a string representation:\n\n```python\n>>> from duration import Duration\n>>> duration = Duration(3600) # Initialize a Duration object with 1 hour\n>>> duration.seconds # Output the number of seconds in this duration\n3600\n>>> duration + 300 # Add 5 minutes to the duration\nDuration(3650)\n>>> duration - Duration(300) # Subtract 5 minutes from the duration\nDuration(3570)\n>>> duration.format() # Format the duration as a string in human-readable form\n'1 hour'\n```"}, {"instruction": "Design a Python class that represents a time duration, given as three integers, `hour`, `minute`, and `second` in the format of `HH:MM:SS` where each unit is 0--59. The class should implement comparison operators (`==`, `<`, `>`, `<=`, `>=`) to determine the order of two durations, and the ability to format the duration into a string. Additionally, it should support the `str()` built-in function to provide a string representation of the duration.\n\nFor example, given a duration object `d` created with `d = Duration('01:15:30')`, the following assertions should pass:\n\n```python\nassert d == Duration('01:15:30')\nassert d > Duration('01:14:30')\nassert d != Duration('01:15:31')\nassert str(d) == '01:15:30'\n\n```"}, {"instruction": "Create a class called `Duration` that represents a time duration in seconds. The class should include methods to format the duration in a string with a standard format, parse a string with a standard format into a `Duration` object, and add two `Duration` objects together.\n\nThe standard format should be:\n\n```\n[d:]hh:mm:ss\n```\n\nFor example, a duration of 1501s should be formatted as `'0:0:25:01'` and a duration of 120000 seconds should be formatted as `'0:20:00:00'`.\n\n`Duration` objects should support addition with the `+` operator. The `+` operator should return a new `Duration` object that represents the sum of the two operands. The `+` operator should handle cases where there are only days, minutes, or seconds in the duration.\n\nThe `Duration` class should have error handling for invalid inputs to its `parse` method. The `parse` method should return `None` if the input string is not a valid duration."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: HTTP request and response handling, thread creation for asynchronous requests, header manipulation, base path declaration, dictionary based request parameter extraction, error handling with exceptions, URL string formatting, freeing of memory dynamically allocated to handle string arrays, data type conversions, conditional branching for asynchronous request execution, \n\n### Task", "fingerprint": null, "content": {"code": "static bool updateInstallationHelper(char * accessToken,\n\tstd::string id, UpdateInstallationObject body, std::string xEmbarcaderoApplicationId, std::string xEmbarcaderoAppSecret, std::string xEmbarcaderoMasterSecret, \n\tvoid(* handler)(UpdatedInstallationObject, Error, void* )\n\t, void* userData, bool isAsync)\n{\n\n\t//TODO: maybe delete headerList after its used to free up space?\n\tstruct curl_slist *headerList = NULL;\n\n\t\n\t{\n\t\tstring headerString(\"X-Embarcadero-Application-Id: \");\n\t\theaderString.append(stringify(&xEmbarcaderoApplicationId, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\t{\n\t\tstring headerString(\"X-Embarcadero-App-Secret: \");\n\t\theaderString.append(stringify(&xEmbarcaderoAppSecret, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\t{\n\t\tstring headerString(\"X-Embarcadero-Master-Secret: \");\n\t\theaderString.append(stringify(&xEmbarcaderoMasterSecret, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\tstring accessHeader = \"Authorization: Bearer \";\n\taccessHeader.append(accessToken);\n\theaderList = curl_slist_append(headerList, accessHeader.c_str());\n\theaderList = curl_slist_append(headerList, \"Content-Type: application/json\");\n\n\tmap <string, string> queryParams;\n\tstring itemAtq;\n\t\n\tstring mBody = \"\";\n\tJsonNode* node;\n\tJsonArray* json_array;\n\n\tif (isprimitive(\"UpdateInstallationObject\")) {\n\t\tnode = converttoJson(&body, \"UpdateInstallationObject\", \"\");\n\t}\n\t\n\tchar *jsonStr =  body.toJson();\n\tnode = json_from_string(jsonStr, NULL);\n\tg_free(static_cast<gpointer>(jsonStr));\n\t\n\n\tchar *jsonStr1 =  json_to_string(node, false);\n\tmBody.append(jsonStr1);\n\tg_free(static_cast<gpointer>(jsonStr1));\n\n\tstring url(\"/installations/{id}\");\n\tint pos;\n\n\tstring s_id(\"{\");\n\ts_id.append(\"id\");\n\ts_id.append(\"}\");\n\tpos = url.find(s_id);\n\turl.erase(pos, s_id.length());\n\turl.insert(pos, stringify(&id, \"std::string\"));\n\n\t//TODO: free memory of errormsg, memorystruct\n\tMemoryStruct_s* p_chunk = new MemoryStruct_s();\n\tlong code;\n\tchar* errormsg = NULL;\n\tstring myhttpmethod(\"PUT\");\n\n\tif(strcmp(\"PUT\", \"PUT\") == 0){\n\t\tif(strcmp(\"\", mBody.c_str()) == 0){\n\t\t\tmBody.append(\"{}\");\n\t\t}\n\t}\n\n\tif(!isAsync){\n\t\tNetClient::easycurl(InstallationsManager::getBasePath(), url, myhttpmethod, queryParams,\n\t\t\tmBody, headerList, p_chunk, &code, errormsg);\n\t\tbool retval = updateInstallationProcessor(*p_chunk, code, errormsg, userData,reinterpret_cast<void(*)()>(handler));\n\n\t\tcurl_slist_free_all(headerList);\n\t\tif (p_chunk) {\n\t\t\tif(p_chunk->memory) {\n\t\t\t\tfree(p_chunk->memory);\n\t\t\t}\n\t\t\tdelete (p_chunk);\n\t\t}\n\t\tif (errormsg) {\n\t\t\tfree(errormsg);\n\t\t}\n\t\treturn retval;\n\t} else{\n\t\tGThread *thread = NULL;\n\t\tRequestInfo *requestInfo = NULL;\n\n\t\trequestInfo = new(nothrow) RequestInfo (InstallationsManager::getBasePath(), url, myhttpmethod, queryParams,\n\t\t\tmBody, headerList, p_chunk, &code, errormsg, userData, reinterpret_cast<void(*)()>(handler), updateInstallationProcessor);;\n\t\tif(requestInfo == NULL)\n\t\t\treturn false;\n\n\t\tthread = g_thread_new(NULL, __InstallationsManagerthreadFunc, static_cast<gpointer>(requestInfo));\n\t\treturn true;\n\t}\n}", "docstring": "//TODO: free memory of errormsg, memorystruct", "function_name": "getInstallationsHelper"}, "id": 119, "seed": "static bool updateInstallationHelper(char * accessToken,\n\tstd::string id, UpdateInstallationObject body, std::string xEmbarcaderoApplicationId, std::string xEmbarcaderoAppSecret, std::string xEmbarcaderoMasterSecret, \n\tvoid(* handler)(UpdatedInstallationObject, Error, void* )\n\t, void* userData, bool isAsync)\n{\n\n\t//TODO: maybe delete headerList after its used to free up space?\n\tstruct curl_slist *headerList = NULL;\n\n\t\n\t{\n\t\tstring headerString(\"X-Embarcadero-Application-Id: \");\n\t\theaderString.append(stringify(&xEmbarcaderoApplicationId, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\t{\n\t\tstring headerString(\"X-Embarcadero-App-Secret: \");\n\t\theaderString.append(stringify(&xEmbarcaderoAppSecret, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\t{\n\t\tstring headerString(\"X-Embarcadero-Master-Secret: \");\n\t\theaderString.append(stringify(&xEmbarcaderoMasterSecret, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\tstring accessHeader = \"Authorization: Bearer \";\n\taccessHeader.append(accessToken);\n\theaderList = curl_slist_append(headerList, accessHeader.c_str());\n\theaderList = curl_slist_append(headerList, \"Content-Type: application/json\");\n\n\tmap <string, string> queryParams;\n\tstring itemAtq;\n\t\n\tstring mBody = \"\";\n\tJsonNode* node;\n\tJsonArray* json_array;\n\n\tif (isprimitive(\"UpdateInstallationObject\")) {\n\t\tnode = converttoJson(&body, \"UpdateInstallationObject\", \"\");\n\t}\n\t\n\tchar *jsonStr =  body.toJson();\n\tnode = json_from_string(jsonStr, NULL);\n\tg_free(static_cast<gpointer>(jsonStr));\n\t\n\n\tchar *jsonStr1 =  json_to_string(node, false);\n\tmBody.append(jsonStr1);\n\tg_free(static_cast<gpointer>(jsonStr1));\n\n\tstring url(\"/installations/{id}\");\n\tint pos;\n\n\tstring s_id(\"{\");\n\ts_id.append(\"id\");\n\ts_id.append(\"}\");\n\tpos = url.find(s_id);\n\turl.erase(pos, s_id.length());\n\turl.insert(pos, stringify(&id, \"std::string\"));\n\n\t//TODO: free memory of errormsg, memorystruct\n\tMemoryStruct_s* p_chunk = new MemoryStruct_s();\n\tlong code;\n\tchar* errormsg = NULL;\n\tstring myhttpmethod(\"PUT\");\n\n\tif(strcmp(\"PUT\", \"PUT\") == 0){\n\t\tif(strcmp(\"\", mBody.c_str()) == 0){\n\t\t\tmBody.append(\"{}\");\n\t\t}\n\t}\n\n\tif(!isAsync){\n\t\tNetClient::easycurl(InstallationsManager::getBasePath(), url, myhttpmethod, queryParams,\n\t\t\tmBody, headerList, p_chunk, &code, errormsg);\n\t\tbool retval = updateInstallationProcessor(*p_chunk, code, errormsg, userData,reinterpret_cast<void(*)()>(handler));\n\n\t\tcurl_slist_free_all(headerList);\n\t\tif (p_chunk) {\n\t\t\tif(p_chunk->memory) {\n\t\t\t\tfree(p_chunk->memory);\n\t\t\t}\n\t\t\tdelete (p_chunk);\n\t\t}\n\t\tif (errormsg) {\n\t\t\tfree(errormsg);\n\t\t}\n\t\treturn retval;\n\t} else{\n\t\tGThread *thread = NULL;\n\t\tRequestInfo *requestInfo = NULL;\n\n\t\trequestInfo = new(nothrow) RequestInfo (InstallationsManager::getBasePath(), url, myhttpmethod, queryParams,\n\t\t\tmBody, headerList, p_chunk, &code, errormsg, userData, reinterpret_cast<void(*)()>(handler), updateInstallationProcessor);;\n\t\tif(requestInfo == NULL)\n\t\t\treturn false;\n\n\t\tthread = g_thread_new(NULL, __InstallationsManagerthreadFunc, static_cast<gpointer>(requestInfo));\n\t\treturn true;\n\t}\n}", "__index_level_0__": 33, "concepts": ["HTTP request and response handling", "thread creation for asynchronous requests", "header manipulation", "base path declaration", "dictionary based request parameter extraction", "error handling with exceptions", "URL string formatting", "freeing of memory dynamically allocated to handle string arrays", "data type conversions", "conditional branching for asynchronous request execution", ""], "parsing_result": [{"instruction": "Write a Python function to perform an HTTP request to the Google Maps API to find the driving directions between two addresses. The function should take as input two addresses and return a list of driving directions, where each direction is a string representation of a driving leg with information like distance, duration, and start and end locations.\n\nDesign the function so that it handles the following cases, where `address_from`, `address_to`, and `api_key` are strings containing addresses and API keys respectively:\n- Input addresses are empty: throw a `ValueError` exception with appropriate message\n- Invalid API key: throw a `ValueError` exception with appropriate message\n- Both addresses are the same: return an empty list of directions\n- Both addresses are in the same city: return the driving directions between the two addresses\n- Both addresses are in different cities: perform a reverse geocoding to find the latitude and longitude of the two addresses. Then, make the HTTP request to the Google Maps API to find the directions."}, {"instruction": "Design a Python function that sends multiple requests to the same URL, with the determined URL being constructed dynamically based on the parameters passed to the function.\n\nThe function should take a dictionary of parameter names and values and send the corresponding HTTP request to the determined URL. Additionally, the function should allow for multiple requests to be sent asynchronously to the same URL. The function should utilize threads to handle asynchronous requests.\n\nThe function should handle the following error cases:\n\n- the parameter dictionary is empty\n- a parameter name or value provided is not of type `str`\n- the determined URL is not of type `str`\n- the determined URL is not a valid HTTP URL\n\nThe function should handle all exceptions gracefully. Additionally, ensure the function frees the memory dynamically allocated to handle the string arrays passed to it."}, {"instruction": "Design a Python function that takes a URL as input and returns a response from the HTTP request made with the `requests` library. The function should accept a callback function that is executed upon completion of the request. In case the request is unsuccessful, the callback function should receive an error message as input."}, {"instruction": "Write a Python function that makes an HTTP GET request to a web API endpoint and returns the response. The function should handle both dictionaries and lists for JSON data.\n\nThe function should use the `requests` library, to which you should import the `get` function. The function should accept the URL string and dictionary of headers as arguments. The function should handle HTTP errors gracefully. Additionally, the function should return a dictionary with the `data` and `status` keys.\n\nThis challenge should be solved in two lines of code."}, {"instruction": "Design a Python function to obtain the current weather information of a given city (or of the city of the user), based on the user's IP address. The function should return a Python dictionary with four key-value pairs: `city`, `temperature`, `condition`, and `humidity`.\n\nThe function should utilize HTTP requests and make the following GET requests to the relevant websites:\n- [IP API](https://ipapi.co/) to obtain the city name from the IP address.\n- [OpenWeatherMap](https://openweathermap.org/) to obtain the current temperature, weather condition, and humidity of a given city.\n\nThe function should handle exceptions such as HTTP errors, invalid city names, and invalid IP addresses by printing the appropriate error messages."}, {"instruction": "Design a Python function to make an HTTP GET request to a REST API with a specified URL, with the specified parameter values, and use the response to calculate the MD5 digest of a resource.\n\nUse an asynchronous pattern to make concurrent requests for a set of resource URLs, and parse the responses to produce a list of MD5 digests of the corresponding resources."}, {"instruction": "Design a Python program that sends HTTP GET requests to the URL \"https://httpbin.org/anything/\". The program should accept a list of query parameters as a string of comma-separated key-value pairs. The server should respond with the body of the request specified by the query parameters. The program should handle errors gracefully by printing a meaningful error message."}, {"instruction": "Design a Python function to retrieve information from a remote API, which is accessed asynchronously via HTTP requests. The function should take the base URL of the request, a dictionary of parameters to be sent, and the expected response data type. The function should return a dictionary containing the response content, and the HTTP status code. It should raise an exception if the status code is not 200 or 201.\n\nThe parameters are sent as key-value pairs in the request body. The response content is a JSON string that is converted into a Python dictionary. The function should handle HTTP status codes 200 and 201.\n\nThe function should be able to send requests to multiple endpoints, such as a login endpoint and a data retrieval endpoint.\n\nThe function should support a synchronous call to the API (the `blocking` argument is set to `True` by default). It should also support asynchronous calls via threads or processes.\n\nThe function should handle any exceptions that may occur during the execution of the HTTP requests.\n\nThe function should be able to extract the response content as a Python dictionary or list.\n\nThe function should be able to handle different response data types. It should be able to handle errors gracefully.\n\nThe function should support multiple requests being sent concurrently."}, {"instruction": "Design a Python function that makes asynchronous HTTP requests to a REST API. The function should return the `json` response and the `status` code as a tuple. The function should handle HTTP errors and any other unexpected exceptions. The final result should be a tuple containing the response and status code in a single tuple.\n\nThe function should accept a `base_url`, a `path` to request, and a `payload` as arguments. The `payload` is a dictionary of request parameters. The `base_url` is the root URL of the REST API. The `path` is a relative path to request to the REST API. For instance, if the `base_url` is `https://jsonplaceholder.typicode.com` and the request path is `/posts/1`, the full URL to request is `https://jsonplaceholder.typicode.com/posts/1`.\n\nThe function should create a thread for each request to asynchronously execute the request and return the response and status code of the request. The function should use a dictionary to store the response codes and requests executed so far. The function should handle multiple requests concurrently.\n\nThe function should print the response code and response for each request, along with the overall status of the function execution. The function should handle unexpected exceptions and print the exception stack trace. The function should free the memory dynamically allocated to handle string arrays."}, {"instruction": "Create a Python function that sends requests to an API endpoint and collects the result. The function should accept a URL string and any optional parameters to send as a dictionary. The function should handle errors gracefully and return the result of the API call.\n\nUtilize the `requests` module to send HTTP requests. Manage response and error conditions with exceptions. Utilize proper URL encoding for parameter values."}, {"instruction": "Implement a Python function for a simple HTTP server that listens for requests on a given port and responds to them with a web page.\n\nYour server should be able to handle multiple requests asynchronously, similar to how Python's `asyncio` module would handle multiple concurrent requests. A sample request is shown below:\n\n```\nGET / HTTP/1.1\nHost: localhost:8000\n\n```\n\nYour server should respond to requests with the following pages:\n\n- If the request is a GET request for the `/` path, return a page that shows the URL with all of its parameters in the format of `a=5, b=3`\n- If the request is a POST request for the `/` path, return the string `POST request made`\n\nNote that your page should contain the HTTP request headers in an HTML table. You should also free the memory allocated for the request headers when your server finishes handling the request."}, {"instruction": "Design a Python function to fetch data from the [Bitcoin Price Index API](https://www.coingecko.com/en/api/documentation) and print the latest price of Bitcoin on a given day. Use the following functions to achieve this:\n- `get_day(year, month, day)` returns a list of prices of Bitcoin on a given day.\n- `get_last_price()` returns the latest price of Bitcoin.\n\nThe functions should also handle requests to the API, return error codes, and handle exceptions gracefully."}, {"instruction": "Design a Python function that takes a list of URLs as input and makes asynchronous HTTP requests to them. The function should return a list of response statuses, where each status is a tuple consisting of the URL and the response status code.\n\nAfter making the HTTP requests, the function should free up the memory dynamically allocated to store the response bodies, which are in the form of a string array.\n\nThe function should handle cases where HTTP requests fail, such as when the URL is invalid or the server is unavailable. Ensure the function gracefully handles such errors and returns meaningful data instead of causing an exception."}, {"instruction": "Design a Python function that acts as a web client to a remote server. The function should accept a JSON-formatted URL and receive a JSON-formatted response, executing an asynchronous GET request in the background and awaiting the response. If the function times out before receiving a response from the server, it should raise an exception.\n\nThe input URL should contain at least the following:\n\n- protocol: HTTP or HTTPS\n- host: domain name or IP address\n- path: directory path for the file(s)\n- query string: additional parameters to be sent as part of the request\n\nFor example, the URL `http://api.exchangeratesapi.io/latest?base=USD` should be interpreted as follows:\n\n- protocol: `http`\n- host: `api.exchangeratesapi.io`\n- path: `/latest`\n- query string: `base=USD`\n\nThe function should use the `requests` module to handle HTTP requests, and return the JSON response received from the server in a dictionary."}, {"instruction": "Write a Python program that handles HTTP requests and responses. The program should create a new thread for each request it receives. The program should maintain a list of all active requests in a queue. The program should handle requests from an external source and respond with the appropriate status code and response body. The program should handle exceptions appropriately. The program should gracefully shut down when all requests are completed."}, {"instruction": "Design a Python function that accepts a user-defined URL and fetches the URL's response. The function will execute HTTP requests in parallel using threads and return the results of multiple requests. The process will terminate when all responses have been received.\n\nThe function will be tested with multiple URL links, each of which will return the same response. The function should handle errors gracefully and return the response data required for further processing."}, {"instruction": "Create a Python program that requests data from an external server and prints the values received. The program should retrieve the data from a URL, parse it, and print the result. The program should support two modes of operation: synchronous and asynchronous. The asynchronous mode should create a thread for each request."}, {"instruction": "Design a Python function that handles HTTP requests synchronously and returns a dictionary of keys and values associated with the request response. The function should ensure that the URL provided has the following properties:\n- protocol is HTTP\n- has a host name\n- has a path\n- has a query string\n- has a port number\n\nThe function should handle all errors with an appropriate exception, such as a missing protocol or a missing host name.\n\nThe function should support a basic GET request. The function should parse the request URL and the request body, and return the appropriate request response. The function should also handle multiple requests with different request bodies and HTTP methods. The function should also support freeing the memory that was dynamically allocated to handle string arrays."}, {"instruction": "Design a Python function to retrieve the content of a web page from a specified URL. The function should use HTTP GET request to fetch the content from a remote server and return the response in string format. The function should handle exceptions when the server cannot be reached or when the server returns an error code. Additionally, the function should handle asynchronous requests for multiple URLs in parallel, as long as the number of requests is less than or equal to the number of available threads."}, {"instruction": "Create a Python program to handle HTTP requests and responses. The program should accept a command line argument that specifies a path to a JSON file containing HTTP request parameters. The JSON file should contain a dictionary of request parameters. The program should asynchronously create and execute a GET request to the path specified by the URL parameter of the request parameters using the requests module. The body of the response should be converted into a byte array and sent to the standard output.\n/examples/example_4/example_4.py\n\"\"\"\nWrite a Python function that takes a list of strings and returns a new list with asterisks (*) \nappended to element strings that occur more than once.\n\nExample:\nInput: ['a', 'a', 'b', 'a', 'c']\nOutput: ['a', 'a*', 'b', 'a**', 'c']\n\"\"\"\n\ndef encode_strings(strings):\n    # TODO: implement this function\n    pass/examples/example_5/example_5.py\n\"\"\"\nImplement a Python class with a method \"find_nth_prime_memoized(n)\" that returns the nth prime number, where n\nis a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid\nrecalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to\nfind new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\nExample:\nInput: find_nth_prime_memoized(2)\nOutput: 3\n\"\"\"\n\nclass Primes:\n    # TODO: implement this class\n    pass/examples/example_2/example_2.py\n\"\"\"\nCreate a Python function that takes a list of integers and returns the number of distinct elements in the list\nwhere the second element of the pair is at least greater than the first by \"growth_ratio\" and the indices of the\nelements are within a specified \"maximum_distance\" from each other.\n\nExample:\nInput: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], growth_ratio = 3, maximum_distance = 2\nOutput: 5\n\nExplanation: The pairs (1, 4), (1, 7), (2, 5), (2, 8), and (3, 6) satisfy the criteria.\n\"\"\"\n\ndef count_pair_indices(values: list, growth_ratio: int, maximum_distance: int):\n    # TODO: implement this function\n    pass/examples/example_1/example_1.py\n\"\"\"\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character\nrepresents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the\n5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ\nbitwise operations for this encoding process.\n\nExample:\nInput: 12345\nOutput: '12345*?9Y!'\n\nExplanation: The function splits the 5-bit chunks of 12345 into ['1', '2', '3', '4', '5*?9Y!'], which is returned.\nThe '*' character represents the continuation bit. The function treats '*' as a special character that indicates the\nnext chunk should be appended to the previous chunk. If the input integer has an odd number of digits, add an 'X'\ncharacter to the end of the encoded string before returning. Else, ignore it.\n\"\"\"\n\ndef encode_integer_5_bit_chunks(n: int) -> str:\n    # TODO: implement this function\n    pass/examples/example_8/example_8.py\n\"\"\"\nHere are two special formulas:\n\nf_1(a, b) = (a + 1) * (b + 1) - 1\nf_2(k) = (k + 1)^2 / 2 + k + 1\n\nWrite a Python function to return f_2(f_1(a, b)) for given a and b.\n\nExample:\nInput: a = 1, b = 2\nOutput: 10\n\nExplanation: f_2(f_1(1, 2)) = f_2((1 + 1) * (2 + 1) - 1) = 10\n\"\"\"\n\ndef special_formula(a: int, b: int) -> int:\n    # TODO: implement this function\n    pass/examples/example_6/example_6.py\n\"\"\"\nImplement a Python class \"StringEnhancer\" that offers advanced tools for managing a string. The class should\nmaintain an internal state that is initially an empty string. The class should support extending the string with\nadditional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters\nwithin the string. All the operations are communicated through a central method: \"apply_operation(self, operation: str)\".\n\nThe method \"apply_operation\" interprets the operations specified in the form of \"[opname]:[arg]\". Here are the detailed\nformats for each operation, explained through examples:\n- Prefix addition: apply_operation(\"prefix:Hello, \")\n- Suffix addition: apply_operation(\"suffix: World!\")\n- Lowercase conversion: apply_operation(\"lower:\")\n- Uppercase conversion: apply_operation(\"upper:\")\n- Character replacement: apply_operation(\"replace:a->e\")\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally,\nimplement the \"__str__\" method to return a formatted string showing the current value of the string and a list of operations\nthat have been applied to it.\n\nExample:\nInput: StringEnhancer(\"Hello world\").apply_operation(\"lower:\")\nOutput: 'hello world'\n\nExplanation: The original string is 'Hello world'. The \"lower:\" operation is applied to convert the string to all lowercase.\nThe new string becomes 'hello world'. The last operation applied is \"lower:\".\n\"\"\"\n\nclass StringEnhancer:\n    # TODO: implement this class\n    pass"}, {"instruction": "Write a Python function to execute the following HTTP request to fetch the most recent Weather Underground data in the US for a specified zipcode.\n\n```\nGET /api/<apikey>/conditions/q/<zipcode>.json HTTP/1.1\nHost: api.wunderground.com\n```\n\nThe function should accept the API key and the zipcode as arguments, and return the temperature for the zipcode in Fahrenheit.\n\nThe function should handle errors gracefully:\n- If the zipcode is invalid, it should throw an exception with a user-friendly message.\n- If the API key is invalid or not provided, it should throw an exception with a user-friendly message.\n- If the request cannot be completed, it should throw an exception with a user-friendly message.\n\nThe function should handle the HTTP response status code appropriately:\n- If the response status code is not 200, it should throw an exception with a user-friendly message.\n- If the response status code is 200, it should return the temperature in Fahrenheit."}, {"instruction": "Create a Python function that accepts a URL as input and returns the value of the `Content-Length` header from the response. Use the `requests` library to send the HTTP GET request and extract the response."}, {"instruction": "Design a Python function that accepts a URL for an HTTP GET request and returns its response body.\n\nThe function should parse the URL and extract the base path, path parameters, and query parameters from it. This information is then used to construct the final URL to request. The URL is then handed to a separate thread to handle the request asynchronously.\n\nThe function then waits to receive a response from the thread, checks the status code, and extracts the response body from the thread's memory."}, {"instruction": "Design a Python function to make an HTTP request to a website using the `requests` library to retrieve a webpage's content, and calculate the length of the returned content.\n\nThis function should use a thread to make the HTTP request to the website in the background, while the main thread continues to wait for the request to complete. It should handle cases where the request is not successful, such as a 404 not found error, and handle errors gracefully.\n\nIt should handle the case where the website is unavailable, and also ensure that the response is valid. Additionally, it should handle the case where the server responds with a 5xx status code."}, {"instruction": "Write a Python function that takes a URL as input and returns the HTTP response code, response headers, and content as Python strings."}, {"instruction": "Design a Python function that makes a GET request to an arbitrary `url` using a specific `url_template` (if any). The function should return a dictionary of data extracted from the response."}, {"instruction": "Develop a Python function to perform an HTTP request to a given server and extract the response headers.\n\nThe function should take three arguments:\n- the base URL of the server (e.g., http://127.0.0.1:5000/)\n- a URL path (e.g., /api/v1/prime/get)\n- a dictionary of request parameters (e.g., {'value': 1})\n\nEnsure the function handles errors gracefully."}, {"instruction": "Create a Python function that requests a website and retrieves its HTML (HyperText Markup Language), and return the text content of the HTML document. The function should handle errors gracefully by printing the error code and message to the console."}, {"instruction": "Design a Python function that performs a HTTP GET request to a remote endpoint and returns the response status code, headers, and body. Utilize the threading module to perform asynchronous request execution. Handle errors gracefully with exceptions. The function should accept a base_url and an optional path_template argument. The default path_template should be \"download/latest.json\"."}, {"instruction": "Make an HTTP GET request (using a library of your choice) to the [GitHub API](https://docs.github.com/en/rest) to retrieve information about the user `alexeypa01`. With the information extracted, organize the information in a structured way and return it."}, {"instruction": "Design a function to consume the [Star Wars API](https://swapi.dev/). This function should return the result of a `GET` request to the specified API URL for the specified character. The function should handle errors gracefully, such as connection failures and invalid responses from the API. Additionally, the function should handle requests in an asynchronous manner using threads to avoid blocking the event loop."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: recursive tree structure traversal, recursive tree structure creation\n\n### Task", "fingerprint": null, "content": {"code": "BNPosi<T> InPost(T* inOrder, T* postOrder, int size, BNPosi<T> parent) {\n\tif (size < 1)\treturn nullptr;\n\tBNPosi<T> x = new BinNode<T>(*(postOrder + size - 1), parent);\n\tif (size == 1)\treturn x;\n\n\t/*\u5bf9\u4e24\u4e2a\u5e8f\u5217\u8fdb\u884c\u5207\u5206\uff1a\n\t\u5bfb\u627epostOrder[size-1]\u5728inOrder\u4e2d\u7684\u4f4d\u7f6einBound\n\tinOrder[0, inBound)\u4e3a\u5de6\u5b50\u5e8f\u5217\t\tinOrder[inBound+1, size)\u4e3a\u53f3\u5b50\u5e8f\u5217\n\tpostOrder[0, inBound)\u4e3a\u5de6\u5b50\u5e8f\u5217\t\tpostOrder[inBound, size-1)\u4e3a\u53f3\u5b50\u5e8f\u5217*/\n\tint inBound = 0;\n\tfor (T* t = inOrder; *t != postOrder + size - 1; t++, inBound++);\n\n\tx->lchild = InPost(inOrder, postOrder, inBound, x);\t\t//\u9012\u5f52\u91cd\u6784\u5de6\u5b50\u6811\n\tx->rchild = InPost(inOrder + inBound + 1, postOrder + inBound, size - inBound - 1, x);\t\t//\u9012\u5f52\u91cd\u6784\u53f3\u5b50\u6811\n\treturn x;\n}", "docstring": "//\u9012\u5f52\u91cd\u6784\u53f3\u5b50\u6811", "function_name": "PreIn"}, "id": 122, "seed": "BNPosi<T> InPost(T* inOrder, T* postOrder, int size, BNPosi<T> parent) {\n\tif (size < 1)\treturn nullptr;\n\tBNPosi<T> x = new BinNode<T>(*(postOrder + size - 1), parent);\n\tif (size == 1)\treturn x;\n\n\t/*\u5bf9\u4e24\u4e2a\u5e8f\u5217\u8fdb\u884c\u5207\u5206\uff1a\n\t\u5bfb\u627epostOrder[size-1]\u5728inOrder\u4e2d\u7684\u4f4d\u7f6einBound\n\tinOrder[0, inBound)\u4e3a\u5de6\u5b50\u5e8f\u5217\t\tinOrder[inBound+1, size)\u4e3a\u53f3\u5b50\u5e8f\u5217\n\tpostOrder[0, inBound)\u4e3a\u5de6\u5b50\u5e8f\u5217\t\tpostOrder[inBound, size-1)\u4e3a\u53f3\u5b50\u5e8f\u5217*/\n\tint inBound = 0;\n\tfor (T* t = inOrder; *t != postOrder + size - 1; t++, inBound++);\n\n\tx->lchild = InPost(inOrder, postOrder, inBound, x);\t\t//\u9012\u5f52\u91cd\u6784\u5de6\u5b50\u6811\n\tx->rchild = InPost(inOrder + inBound + 1, postOrder + inBound, size - inBound - 1, x);\t\t//\u9012\u5f52\u91cd\u6784\u53f3\u5b50\u6811\n\treturn x;\n}", "__index_level_0__": 34, "concepts": ["recursive tree structure traversal", "recursive tree structure creation"], "parsing_result": [{"instruction": "Implement a Python program that takes a positive integer `n` as input and outputs a tree with `n` layers. Each layer from the top to the bottom should be represented by `*` characters. The tree should be printed with a space in between layers. The top layer should contain `n` `*` characters, the second layer should contain `n - 1` `*` characters, and so on.\n\nFor example, given the input `4`, the program should print:\n```\n*     *     *     *\n*   *   *   *\n* * * * * *\n```"}, {"instruction": "Design a program that takes an input integer `n` as a command-line argument and prints a binary tree of height `n` that consists of `n` leaves. Each of the leaves should contain the sequence of numbers from `1` to `n`. The children of a node should be traversed from left to right.\n\nFor example, for an input of `3` the output should be:\n\n```\n1\n2 3\n4 5 6\n7 8 9 10 11 12 13 14 15\n```"}, {"instruction": "Design a Python program that constructs a hierarchical tree structure from a series of strings provided by the user. After reading in the strings, the program should print the tree structure with each level of indentation set by the tree depth. When the user inputs an empty string, the program should stop reading in strings and print the tree.\n\nFor example if the input strings are `[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\"]`, the output should be:\n```\na\nb\nc\nd\ne\nf\n```"}, {"instruction": "Create a Python program that constructs a tree structure of nested Python dictionaries and lists based on the provided input string. The input string is a JSON-like data structure that contains nested lists and dictionaries with integer keys. For example, the input string `'[[1, 2, {\"a\": 10}], 3, 4, {\"b\": 100}, 5]` should be transformed into the nested Python data structure `[1, 2, {\"a\": 10}, 3, 4, {\"b\": 100}, 5]`."}, {"instruction": "Create a Python program that takes a string representing a tree structure as input and outputs a diagram of the structure. The tree structure is a string representation of a tree with a root node, followed by a list of child nodes. Each child node is a string representing a child node in the same format as the root. For example, here is a string representation of a tree:\n\n```python\n'root-a-root-a-root-b-root-c-root-c-root-d'\n```\n\nShould produce\n\n```\nroot\n\u251c\u2500\u2500 a\n\u251c\u2500\u2500 b\n\u2514\u2500\u2500 c\n    \u2514\u2500\u2500 d\n```"}, {"instruction": "Create a Python program that generates an arbitrary tree structure and traverses the tree to output the nodes.\n\nYou can use the `Tree` class provided below as a starting point.\n\n```python\nclass Tree:\n    def __init__(self, data):\n        self.data = data\n        self.children = []\n\n    def add_child(self, obj):\n        self.children.append(obj)\n\n    def __repr__(self):\n        return f'Tree({self.data})'\n\n    def __iter__(self):\n        return self.preorder()\n\n    def preorder(self):\n        yield self\n        for child in self.children:\n            yield from child.preorder()\n\n    @staticmethod\n    def from_list(tree):\n        \"\"\"\n        Create a Tree object from a list of tree nodes.\n        \"\"\"\n        return None\n```"}, {"instruction": "Create a Python program that prints a tree with the specified number of rows, where each row contains one more item than the previous one. The item on a row is a tree of nodes that gets longer and longer until it reaches the end of the row. The tree on the last row should be the shortest.\n\nFor example, given the input `rows = 4` the program should print the following:\n```\nO\nOO\nOOO\nOOOO\n```"}, {"instruction": "Write a Python program that prints a chemical graph, where each node is linked to its parent (if any) by an arrow that indicates the connection. The graph should be constructed from a dictionary where each key is a node and its corresponding value is a list of child nodes.\n\nFor example, given the following dictionary:\n```python\n{'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F', 'G'], 'D': ['H']}\n```\nThe output should be:\n```\nA\n|\n|--B\n|--C\n|\n|--D\n|  |--H\n|\n|--E\n|\n|--F\n|  |--G\n```"}, {"instruction": "Write a Python program that outputs the result of following algorithm for a given integer n:\n1. Use a tree structure to create a binary tree with n nodes.\n2. Traverse the tree depth-first and print the node values (with a space between each printed value)."}, {"instruction": "Construct a Python program that reads a set of unique words from a text file and constructs a tree data structure representing the word roots. The tree structure is represented as a dictionary mapping each root word to its list of children that are all the word roots that are formed by adding a single letter to the root word. For example, given the set of words `['pisa', 'park', 'piano']`, the tree structure would be represented as follows:\n\n```\np: ['pi']\ni: ['pi', 'pia', 'pina', 'pisa', 'pia']\na: ['pia', 'pina']\nn: ['pina', 'pina']\no: ['pina']\n```\n\nThe program should output the root words and their child word lists."}, {"instruction": "Design a Python program that takes a binary tree as input, which can have any number of levels, and outputs a textual representation of the tree as a tree diagram. The tree diagram should include the node values as well as the horizontal branches. The solution should include robust error handling to validate the input tree and ensure nodes have values that are integers."}, {"instruction": "Write a Python program that takes a tree structure as input and outputs a list of all the nodes in the tree. Use a recursive function to do the traversal."}, {"instruction": "Create a Python program to build a tree structure of `n` nodes with `n` branches. Each node in the tree should have two fields: `value` and `children`. The root node should be the deepest, or bottom, node in the tree. Write assertions to verify that the tree created is valid."}, {"instruction": "Write a Python program to create a directory structure from a list of directory names provided by the user. The program should create directories based on the provided structure and no duplicate directories should exist. The program should use recursion to generate the entire directory structure."}, {"instruction": "Write a Python program that takes a string of parentheses as input and checks if the string is balanced. A string is balanced if the parentheses in the string are balanced and each one is matched by another one. The string is balanced if parentheses are balanced and matched up correctly. The program should print a message indicating whether the input string is balanced.\n\nFor example:\n```\nGiven the string: \"()\"\nThe string is balanced!\n\nGiven the string: \")(\"\nThe string isn't balanced.\n```"}, {"instruction": "Write an iterative and a recursive solution to a program that outputs a tree of a specified depth and width. The tree should be created using a recursive function that takes a tree depth as a parameter, and the depth of the tree and the width of the tree should be printed out after each tree structure traversal to illustrate the intended behavior.\n\nThe sample output of the program should look as follows:\n\n```\n********\n********\n*         *\n*         *\n*         *\n*         *\n*         *\n********\n********\n*             *\n*             *\n*             *\n*             *\n********\n*             *\n*             *\n*             *\n********\n```"}, {"instruction": "Write a Python program that takes a number of nested folders and subfolders as input. The program should create a directory structure to mirror the input (each folder is subfolder of the previous folder in the path) and then move all files from the source folder into the new directory structure."}, {"instruction": "Implement a Python program that outputs the tree in a text format as shown in the examples below. The program should take a list of file names as input.\n\n```\n$ cat input.txt\n/home/tanmay/workspace/\n/home/tanmay/workspace/app/\n/home/tanmay/workspace/app/src/\n/home/tanmay/workspace/app/src/main/\n/home/tanmay/workspace/app/src/main/java/\n/home/tanmay/workspace/app/src/main/java/tanmay/\n/home/tanmay/workspace/app/src/main/java/tanmay/App.java\n/home/tanmay/workspace/app/src/main/resources/\n/home/tanmay/workspace/app/src/test/\n/home/tanmay/workspace/app/src/test/java/\n/home/tanmay/workspace/app/src/test/java/tanmay/\n/home/tanmay/workspace/app/src/test/java/tanmay/AppTest.java\n```\n\n```\n$ tree_printer.py input.txt\n/home/tanmay/workspace/\n|-- app\n|   |-- src\n|   |   |-- main\n|   |   |   |-- java\n|   |   |   |   `-- tanmay\n|   |   |   |       `-- App.java\n|   |   `-- resources\n|   `-- test\n|       |-- java\n|       |   `-- tanmay\n|       |       `-- AppTest.java\n|       `-- resources\n```\n\n```\n$ tree_printer.py input.txt -r\n/home/tanmay/workspace/app/src/test/java/tanmay/AppTest.java\n/home/tanmay/workspace/app/src/main/java/tanmay/App.java\n/home/tanmay/workspace/app/src/main/resources/\n/home/tanmay/workspace/app/src/test/resources/\n/home/tanmay/workspace/app/src/test/java/tanmay/\n/home/tanmay/workspace/app/src/main/java/tanmay/\n/home/tanmay/workspace/app/src/test/\n/home/tanmay/workspace/app/src/\n/home/tanmay/workspace/app/\n/home/tanmay/workspace/\n```"}, {"instruction": "Write a Python program to visualize a tree structure of a directory. The program should take a single argument: a path to a directory.\n\nThe program should print out a tree of the directory structure, with the following properties:\n* each tree node is represented by a line\n* the root node of the tree is printed on the first line\n* each tree \"branch\" is indented by 2 spaces\n* each child node of a parent is printed on the same line of the parent\n* the structure of the tree should be printed in preorder traversal order (first child, then siblings)\n\nFor example, if the directory structure is:\n```\n|- d1\n    |- d1.1\n    |   |- f1.txt\n    |   |- f2.txt\n    |- d1.2\n    |   |- f3.txt\n    |- f4.txt\n|- d2\n    |- d2.1\n    |   |- f5.txt\n    |- f6.txt\n|   |- f7.txt\n```\nthen the program should print:\n```\nd1\n    \u251c\u2500\u2500 d1.1\n    \u2502   \u251c\u2500\u2500 f1.txt\n    \u2502   \u2514\u2500\u2500 f2.txt\n    \u2514\u2500\u2500 d1.2\n        \u251c\u2500\u2500 f3.txt\n        \u2514\u2500\u2500 f4.txt\nd2\n    \u251c\u2500\u2500 d2.1\n    \u2502   \u2514\u2500\u2500 f5.txt\n    \u251c\u2500\u2500 f6.txt\n    \u2514\u2500\u2500 f7.txt\n```"}, {"instruction": "Design a Python program that uses recursion to traverse a tree of custom objects. The tree is represented as a dictionary, where the keys are the object names and the values are dictionaries of attribute names and values. The program should report the structure of the tree and output the object names in a human-readable format."}, {"instruction": "Write a Python program that accepts a positive integer `n` and a string `t` as input. The program should build a tree structure of nested parent-child nodes, where the input integer value represents the number of the child nodes of the current node. The starting node is represented by an empty string, while the input string `t` encodes the value of the child nodes of each parent node. For instance, given `n = 3` and `t = '123'` the program should build the following tree structure:\n\n```\n    1\n  / | \\\n2   3  4\n```\n\nThe tree structure should be built recursively. Each child node will be represented by the next two values in the input string, and the first value is the number of children of the current node."}, {"instruction": "Write a Python program to traverse a tree of file paths in a system, starting from the root directory, and output a list of all files and directories names in the system."}, {"instruction": "Construct a Python program that creates a tree structure based on a string of characters that represent nodes and their relationships. Empty branches within the tree are represented by a dot ('.'). For example, the input string `ACDB.E.FG.` should create the following tree:\n\n```\n    A\n   / \\\n  B   C\n / \\   \\\nD   E   .\n    /   \\\n   F    G\n```\n\nThe program should output the tree as a string representation, where each node is represented by its parent and its child nodes. For example, the output for the tree above should be:\n\n```\nA: B, C\nB: D\nC: E, G\nD:\nE:\nG:\n```\n\nEach node is separated with a newline and its child nodes are separated by a comma. If a child node is empty (e.g., D in the tree above), then print a dot ('.') instead."}, {"instruction": "Write a Python program that takes a string `s` as input (consisting of only lowercase English letters) and outputs the number of valid binary trees that can be created using all of the characters in the string.\n\nNote that a binary tree is valid if the ordering of the `s` characters is preserved in the final tree structure. For example, the strings `abc` and `cba` have the same character order and therefore both are valid. On the other hand, the string `cbab` is not valid because the character 'b' appears before 'a' in the string.\n\nThe solution should include robust error handling to validate the input and print an error message for invalid inputs."}, {"instruction": "Construct a Python program that processes a tree of nodes provided by the user. The program should output the sum of all the nodes in the tree. The solution should include robust error handling to validate the input tree. For example, given the input `['1', '2', '3', ['4', '5', '6'], '7']`, the program should output `28` since `1 + 2 + 3 + 4 + 5 + 6 + 7 = 28`."}, {"instruction": "The following is a Python program that defines a recursive tree structure of integers. Each integer in the tree has a set of pointers associated with it. Create another Python program that creates a tree from a list of integers and a list of pointers, where each pointer in the list is a list of integers that specify all the indices of the integers that the pointer refers to.\n\n```python\nclass Tree:\n    def __init__(self, value):\n        self.value = value\n        self.children = []\n\n    def add_child(self, node):\n        self.children.append(node)\n\n    def print(self):\n        print(self.value)\n        for child in self.children:\n            child.print()\n\n    def get_num_leaves(self):\n        if len(self.children) == 0:\n            return 1\n        num_leaves = 0\n        for child in self.children:\n            num_leaves += child.get_num_leaves()\n        return num_leaves\n```"}, {"instruction": "Write a Python program that generates a tree structure from the input data (a text file) as follows:\n- The program should create a tree structure using the input file.\n- Every line in the file represents a parent-child relationship.\n- The program should read the relationships from the file into a data structure.\n- Each line of the input file contains exactly two names, separated by a dash.\n- The first name is always the parent, and the second name is the child.\n- The program should maintain this data structure and output the tree visualization to the console in a textual format.\n- The visualization should display the parent-child relationships for each node on multiple lines as follows:\n```\n+-- A (parent)\n|   +-- B (child)\n|   +-- C (child)\n+-- D (parent)\n    +-- E (child)\n```"}, {"instruction": "Write a Python program to determine if a given binary tree is a perfect binary tree. A perfect binary tree is defined as a binary tree where all leaves are at the same level, and each internal node has exactly two children."}, {"instruction": "Design a Python program that processes a tree-shaped structure, which is shown below by a dictionary with nested dictionaries. The top-level keys are sections of the structure, and the values are sub-sections. Each value is a dictionary or list of dictionaries, representing a tree with arbitrary depth. Your program should print out a list of all strings that are values (not keys) in the tree, and their respective depth.\n\n```\n{\n    'section 1': {\n        'sub_section 1': {\n            'value 1': 'value 1',\n            'value 2': 'value 2'\n        },\n        'sub_section 2': {\n            'value 1': 'value 1',\n            'value 2': 'value 2'\n        },\n        'sub_section 3': ['value 1', 'value 2', 'value 3']\n    },\n    'section 2': 'value 1',\n    'section 3': ['value 1', 'value 2', 'value 3']\n}\n```\n\nThe program should output the following:\n\n```\nvalue 1 -- section 2\nvalue 2 -- section 1\nvalue 3 -- section 3\n```"}, {"instruction": "Design a Python program that creates a tree structure with a specified depth and number of nodes. The program should print the tree structure in the following format:\n- root at the top\n- children of root level are indented one level\n- children of a depth level are indented two levels, and so on\n- the last child of a parent node is indented one level within its level, and so on\n\nFor example, given the input `3, 4`, the program should output the following tree structure:\n```\n\n       0\n     /   \\\n    1    2\n   /  \\  /  \\\n  3   4 5   6\n         \\\n         7\n```"}, {"instruction": "Create a Python program that prints all files in a specified directory, as well as any files within subdirectories therein. The program should implement the tree structure traversal recursively."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 5\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: function overloading, cocos2d-x function input validation, cocos2d-x Vector2 type check, local to global variable conversion\n\n### Task", "fingerprint": null, "content": {"code": "static int _cocos2d_PhysicsBody_setVelocity(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsBody *self = nullptr;\n    cocos2d::Vec2 arg1;       /** velocity */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsBody\");\n    olua_check_cocos2d_Vec2(L, 2, &arg1);\n\n    // void setVelocity(const cocos2d::Vec2 &velocity)\n    self->setVelocity(arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "docstring": "// void setTag(int tag)", "function_name": "_cocos2d_PhysicsBody_setTag"}, "id": 128, "seed": "static int _cocos2d_PhysicsBody_setVelocity(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsBody *self = nullptr;\n    cocos2d::Vec2 arg1;       /** velocity */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsBody\");\n    olua_check_cocos2d_Vec2(L, 2, &arg1);\n\n    // void setVelocity(const cocos2d::Vec2 &velocity)\n    self->setVelocity(arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "__index_level_0__": 35, "concepts": ["function overloading", "cocos2d-x function input validation", "cocos2d-x Vector2 type check", "local to global variable conversion"], "parsing_result": [{"instruction": "Develop a Python function `convert_cocos2d_x_to_cocos2d_js` that interacts with the cocos2d game engine. The function should accept a `cocos2d.Vec2` object as an argument, which is usually used in cocos2d-x C++ code. The function should return a `cocos2d.Vec2` object in the same format that cocos2d-js expects.\n\nThe function should ensure that the input `cocos2d.Vec2` object is valid and not `None` before converting it to the required format. It should also handle local-to-global coordinate conversions when necessary.\n\nThis function is useful for converting between the two popular game engines, particularly when dealing with collisions and other game physics events."}, {"instruction": "Write a Python function that accepts a `cocos2d-x` `Vector2` object as input and converts it to the global coordinate system. The function should validate the input using the `is_valid` method, and return None if the input is invalid. Otherwise, the function should convert the input Vector2 to global coordinates, using the following formula:\n\n$$\n\\vec{v} = \\begin{bmatrix}\n    \\vec{o} & \\vec{p} \\\\\n    \\vec{a} & \\vec{b} \\\\\n\\end{bmatrix} \\cdot \\vec{v}\n$$\n\nHere, $\\vec{o}$ and $\\vec{p}$ are the origin and position of the vector, respectively. $\\vec{a}$ and $\\vec{b}$ are the local axes of the vector, and the dot product $\\cdot$ is the generalized matrix product."}, {"instruction": "Create a Python function called `local_to_global` that takes a single argument, a Cocos2D `Vector2` object. The function should handle invalid input types or out-of-bound inputs gracefully. The function should convert a local `Vector2` point to a global coordinate system."}, {"instruction": "Implement a Python function `convert_local_to_global` that converts a `cocos2d-x::Vector2` type input to its global equivalent. The function should accept a `cocos2d-x::Node*` as input, and return a `cocos2d-x::Vector2` instance containing the global equivalent of the input `cocos2d-x::Vector2` type.\n\nThe input `cocos2d-x::Node*` may be a direct reference to a `cocos2d-x::Node`, or an ancestor `cocos2d-x::Node` that contains the target `cocos2d-x::Vector2` type. In the latter case, the function should traverse the hierarchy of parents starting from the given `cocos2d-x::Node*` until a reference to an ancestor `cocos2d-x::Node` is found that contains the input `cocos2d-x::Vector2` type. If no matching ancestor `cocos2d-x::Node` is found, the function should return the input directly.\n\nThe function should also handle cases where the input `cocos2d-x::Vector2` type is not a local `cocos2d-x::Node` type and return the input directly."}, {"instruction": "Given a Python function `convex_polygon_area` that accepts a list of `cocos2d-x.Vector2` objects as input, return the area of a convex polygon corresponding to the input points. This function should work with both clockwise and counter-clockwise input points, and should be robust to invalid inputs."}, {"instruction": "Implement a Python function `get_pygame_world_coordinates` using cocos2d-x that takes a space-separated input string with two values representing the `x` and `y` coordinates of a point in the Pygame world, and returns its equivalent coordinates in the world of cocos2d-x. The function should handle invalid input gracefully, ensuring that the input values are numeric, and that a valid conversion exists. Additionally, it should handle different coordinate systems, such as local to global and global to local coordinates."}, {"instruction": "Develop a Python function `local_to_global` that converts a point (in 2D space) defined by an input Vector2 or a list of Vector2s into its corresponding global coordinates. The function should handle conversion of a 2D point from its local coordinate system to the global coordinate system, as well as the conversion of a list of points from their local coordinate systems to the global ones. The function should accept a single Vector2 or a list of Vector2s as input, ensuring proper input validation. Additionally, the function should use overloading to handle different input formats, including Vector2 objects, tuples of x and y coordinates, and lists of Vector2 objects.\n\nThe conversion algorithm is as follows:\n- If the input is a Vector2, the function should compute the global coordinates of that point using the local to global transformation matrix M.\n- If the input is a list of Vector2s, the function should compute the global coordinates of each point in the list using the same transformation matrix."}, {"instruction": "Write a Python function that implements a function overloading for the `cocos2d` `Vec2` type. The function should accept two vectors as arguments and return their sum. The function should return a `Vec2` type that is defined in the `cocos2d` library. This function can be used with vectors that are local to a parent object or global vectors."}, {"instruction": "Implement a Python function named `convert_cocos2d_x_points` that takes a list of cocos2d-x `Vector2` objects as input and converts the points to a list of global coordinates, as required by the cocos2d-x API. The function should support conversion of both local and global coordinates.\n\nThe function should handle invalid input gracefully, such as input points that could not be converted or input vectors that could not be converted to cocos2d-x `Vector2` type. Additionally, ensure the function is well-documented to explain what the function does and how it works."}, {"instruction": "Develop a Python function that generates a `cocos2d-x` sprite that encapsulates a target object. The function should accept a `cocos2d-x` vector as input, and return a `cocos2d-x` sprite that is positioned based on the vector. This function is designed to be overloaded for different input types and output types.\n\n- For input types that are not `cocos2d-x` vectors, the function should return `None`.\n- For inputs that are `cocos2d-x` vectors, the function should return a `cocos2d-x` sprite that is positioned at the input vector.\n\nThe function should handle corner cases, such as a vector that is (0, 0), and input types that are not vectors."}, {"instruction": "Implement a Python function `get_screen_space_position` that can efficiently convert a cocos2d-x `Point` or `Rect` object to its corresponding local and global positions on a cocos2d-x `Node` object. It should take in a `cocos2d-x` `Node` object, a `cocos2d-x` `Point` or `Rect` object, and an optional `cocos2d-x` `Point` object, and return the corresponding local and global positions of the input.\n\nThe function should handle missing input values gracefully and convert any input points to `cocos2d-x` `Point` objects if necessary. Additionally, you should ensure that your function handles different coordinate systems and input points with different types appropriately."}, {"instruction": "Create a Python function `calculate_direction` that calculates the direction of a given vector in the plane. The function should accept two Vector2 objects as arguments, representing the coordinates of two points on a plane. The function should return a tuple of the form `(angle, direction)` representing the angle of the vector in degrees and the direction of the vector, either `left` or `right`."}, {"instruction": "Develop a Python function `draw_cocos_2d(center_x, center_y, radius)` to draw a circle of radius `radius` centered at the point `(center_x, center_y)` in a 2D coordinate system (assumed to be the Cartesian plane). The function should use cocos2d-x as its 2D graphics library. The function should adhere to the following requirements:\n\n- The radius should be positive and non-zero.\n- The center point `(center_x, center_y)` should be within the cocos2d-x coordinate system.\n- The function should not take any other inputs other than the three specified and return a 2D vector representing the center of the circle.\n\nThe function should handle erroneous inputs gracefully, such as negative radius, invalid coordinate points, and other edge cases."}, {"instruction": "Extend a Python function to support the cocos2d-x API and its object-oriented structure for handling sprite anchor points. The function should accept a sprite instance and the anchor point as arguments, and should return a new instance with the anchor point of the sprite set to the specified value. The function should also handle invalid input by raising an appropriate exception."}, {"instruction": "Write a Python function that provides a vector representation of a point in a 2D space. The function should accept two integer arguments, `x` and `y`, and return the corresponding Vector2 object from the cocos2d-x library."}, {"instruction": "Develop a Python function `convert_cocos2d_x_coordinate_to_global(cocos2d_x_coord: Tuple[float,float], cocos2d_x_node: cocos2d_x.nodes.Node)` that accepts two inputs: `cocos2d_x_coord` and `cocos2d_x_node`. `cocos2d_x_coord` is a tuple of (x, y) coordinates in the global coordinate system, and `cocos2d_x_node` is a cocos2d-x node that represents the parent of the `cocos2d_x_coord` node. The function should recursively traverse the tree structure of the cocos2d-x node to find the node that corresponds to the provided `cocos2d_x_coord` coordinates.\n\nTo do this, the function should search for the node with the cocos2d-x label \"node_with_position\" that is the closest to the provided `cocos2d_x_coord` coordinates. The function should return the global (x, y) coordinates of this node in the cocos2d-x node's local coordinate system.\n\nNote that this function is only applicable to cocos2d-x nodes that use the local coordinate system as their default coordinate system. If the provided `cocos2d_x_node` is not a valid cocos2d-x node or the provided `cocos2d_x_coord` does not correspond to a local coordinate system, the function should return `None`."}, {"instruction": "Write a Python function that accepts two cocos2d-x `Vec2` instances as input and returns the angle that they form, measured in radians. You should write separate implementations for the case when the given vectors are local to a parent node and global to the scene, and vice versa. You should also implement overloaded versions of the function for different types of inputs."}, {"instruction": "Write a Python function called `compute_distance` that takes two `cocos2d-x` Vector2 objects as input, and returns the distance between them. This function should work for any two Vector2 objects."}, {"instruction": "Implement a Python function called `get_nearest_node` that accepts a cocos2d-x `Vector2` as input and returns the nearest node from a given `Node` hierarchy. The function should identify if the input `Vector2` is within the bounds of a given `Node` and return the nearest node (based on global coordinates) if it is. In case the input `Vector2` is not within the bounds of a given node, the function should return the nearest node (based on local coordinates) that is on the boundary."}, {"instruction": "Develop a Python function `convert_cocos_to_global` that converts a cocos2d-x node's local Vector2 position into a global position. It should take an input Vector2 representing the local position of a node and the node's parent node as arguments. The function should return the global position of the node, calculated by converting the local Vector2 position to the parent's local space and then adding the parent's position."}, {"instruction": "Write a Python function that takes a `cocos2d-x` Vector2 object and returns its coordinate values in both local and global coordinate systems. The function should handle invalid Vector2 objects gracefully and ensure that the returned values are rounded to two decimal places."}, {"instruction": "Develop a Python function called `convert_cocos2d_x_to_global` that converts a local Vector2 position from a cocos2d-x game object to a global Vector2 position. The function takes two Vector2 objects as inputs: a local position and a parent object. The function should return the global position of the local position, assuming the parent object is placed at the origin.\n\nThe function should handle invalid input gracefully, such as non-Vector2 objects or objects without a parent position. Additionally, it should be able to handle situations where the local position is not defined as a Vector2 object, such as numbers."}, {"instruction": "Develop a Python function called `collisions_between_rectangles` to compute the number of collisions between two rectangles in Cocos2D-x. This function should accept two arguments:\n- `rect1: cocos2d.rect.Rect`\n- `rect2: cocos2d.rect.Rect`\n\nThe function should return `0` if the rectangles do not collide, `1` if they overlap, or `2` if they collide. In this case, the function should also ensure that the rectangles are given in the correct format and do not have the same position."}, {"instruction": "Develop a Python function `convert_coordinates(point)` that converts the provided points from a local coordinate system to a global coordinate system. The function should accept a `Point2` data type from the cocos2d-x library and return a tuple of two numbers representing the global coordinates.\n\nThe function should perform input validations to ensure the provided input is valid before converting the points. If any of the inputs is invalid, the function should return `None`.\n\nYou can assume that cocos2d-x is installed on the system and available to import."}, {"instruction": "Add `cocos2d-x` support to a Python function that accepts cocos2d-x Vector2 objects as inputs. This function should check the validity of the input objects and convert them to local (screen) coordinates if they are not already in that format. It should also handle invalid inputs gracefully."}, {"instruction": "Develop a Python function that converts a 2D-coordinate (x,y) in local coordinates to its equivalent in global coordinates. The function should take a dictionary of 2D coordinates as input, representing a list of local coordinates. The function should also take a 2D-coordinate (x,y) in global coordinates as input, and return the equivalent local coordinates."}, {"instruction": "Extend the `cocos2d` library function `MoveBy` to support a third parameter for the duration of the move. As a result, the function should accept the additional `duration` argument. The function should also support function overloading for different argument combinations."}, {"instruction": "Develop a Python function that takes a `cocos2d-x` Vector2 type and returns a new Vector2 type that represents the local coordinates of the same Vector2 in a different parent node. Write a second function that performs the reverse operation: local to global node coordinates. The function should handle cases where the local node is itself the global node or where the local node is a child of the global node."}, {"instruction": "Implement a Python function `convert_cocos2d_vector2_to_local` that accepts a `cocos2d-x` Vector2 object as input and returns a tuple of x-y coordinates in the local coordinate system of a `cocos2d-x` Node object. You should handle the case of invalid inputs like invalid Vector2 objects, Node objects without a parent, or nodes with non-null rotation values."}, {"instruction": "Implement a Python function `apply_cocos2d_x_transform(point: Vector2, transform: list[list[int]])` that transforms a `cocos2d-x` `Point` object given a list of `cocos2d-x` `Matrix3` objects. The function should validate the input data and raise an error if an invalid input is encountered. Additionally, the function should convert local coordinates to global coordinates if the transform matrix is not an identity matrix."}, {"instruction": "Develop a Python function `convert_to_global_coordinates` that converts the position of a cocos2d-x node from a local coordinate system to a global one. The input arguments are `node` and `parent` that represent the target node and its parent node, respectively. The function should return the position of `node` in the global coordinate system.\n\nThe function should be able to handle different input types for the `node` and `parent` arguments, including `cocos2d.Node` objects, `cocos2d.Vec2` objects, and `cocos2d.Vec2`-like objects such as `Tuple`. It should also handle errors gracefully when the input arguments are invalid."}, {"instruction": "Implement a Python function `convert_cocos2dx_input_to_local` that converts cocos2d-x input data (x and y position) into cocos2d-x local coordinates. The function should take a cocos2d-x input vector, `cocos2dx_input`, as an argument, which is a 2-dimensional vector. The output should be a local cocos2d-x input vector, `local_input`, which is also a 2-dimensional vector.\n\nThe function should be able to handle valid inputs, such as vectors with non-numerical components. It should also handle invalid inputs, such as vectors with non-numerical components or vectors that are not 2-dimensional. The function should print a helpful warning message to the console or raise an exception if inputs are invalid."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operations on 8-bit registers, bitwise or, bitwise and, bitwise xor, bitshifting, carry, flag state management\n\n### Task", "fingerprint": null, "content": {"code": "call777a()\n{\n        push(af);\n        push(bc);\n        push(de);\n        get16(bc,0x73df);\n        e=a;\n        get8(l,0x73e1); //get16(hl,0x73e1);\n        h=00;\n        c=h;\n        a=b;\nl7789:  cp(e);\n        if(!fc) goto l77b1;\n        if(!getByte(a)) goto l77d9;\n        push(de);\n        ex_de_hl();\n        l=a;\n        h=00;\n        a=b;\nl7797:  or(a);\n        if(fz) goto l77a3;\n        rl(l);\n        rl(h);\n        rl(c);\n        a--;\n        goto l7797;\nl77a3:  a=l;\n        or(e);\n        e=a;\n        a=h;\n        or(d);\n        d=a;\n        ex_de_hl();\n        pop(de);\n        a=0x08;\n        a+=b;\n        b=a;\n        goto l7789;\nl77b1:  push(hl);\n        a=e;\nl77b3:  or(a);\n        rr(c);\n        rr(h);\n        rr(l);\n        b--;\n        a--; fz=(a==0)?1:0;\n        if(!fz) goto l77b3;\n        a=b;\n        put8(0x73e0,a);\n        a=l;\n        put8(0x73e1,a);\n        a=0x0f;\n        pop(hl);\n        and(h);\n        h=a;\n        a=e;\n        cp(07);\n        if(!fz) goto l77d4;\n        h=00;\n        l=l&0x7f; //res     7,l\nl77d4:  pop(de);\n        pop(bc);\n        pop(af);\n        and(a);\n        return 0;\n\nl77d9:  pop(de);\n        pop(bc);\n        pop(af);\n        fc=1;//scf\n        return 0;\n}", "docstring": "//goto l785a;", "function_name": "call76d2"}, "id": 132, "seed": "call777a()\n{\n        push(af);\n        push(bc);\n        push(de);\n        get16(bc,0x73df);\n        e=a;\n        get8(l,0x73e1); //get16(hl,0x73e1);\n        h=00;\n        c=h;\n        a=b;\nl7789:  cp(e);\n        if(!fc) goto l77b1;\n        if(!getByte(a)) goto l77d9;\n        push(de);\n        ex_de_hl();\n        l=a;\n        h=00;\n        a=b;\nl7797:  or(a);\n        if(fz) goto l77a3;\n        rl(l);\n        rl(h);\n        rl(c);\n        a--;\n        goto l7797;\nl77a3:  a=l;\n        or(e);\n        e=a;\n        a=h;\n        or(d);\n        d=a;\n        ex_de_hl();\n        pop(de);\n        a=0x08;\n        a+=b;\n        b=a;\n        goto l7789;\nl77b1:  push(hl);\n        a=e;\nl77b3:  or(a);\n        rr(c);\n        rr(h);\n        rr(l);\n        b--;\n        a--; fz=(a==0)?1:0;\n        if(!fz) goto l77b3;\n        a=b;\n        put8(0x73e0,a);\n        a=l;\n        put8(0x73e1,a);\n        a=0x0f;\n        pop(hl);\n        and(h);\n        h=a;\n        a=e;\n        cp(07);\n        if(!fz) goto l77d4;\n        h=00;\n        l=l&0x7f; //res     7,l\nl77d4:  pop(de);\n        pop(bc);\n        pop(af);\n        and(a);\n        return 0;\n\nl77d9:  pop(de);\n        pop(bc);\n        pop(af);\n        fc=1;//scf\n        return 0;\n}", "__index_level_0__": 36, "concepts": ["bitwise operations on 8-bit registers", "bitwise or", "bitwise and", "bitwise xor", "bitshifting", "carry", "flag state management"], "parsing_result": [{"instruction": "Design a Python program that simulates a 4-bit binary-coded decimal (BCD) counter that counts up from 0000 to 1111. Each bit represents a decimal digit (0-9) and the carry bit. The program should update the digit values of the counter, and propagate the carry bit as necessary."}, {"instruction": "Develop a Python program that implements a single-cycle `ALU` (arithmetic logic unit) with bitwise operations on 8-bit values. The program should prompt the user for a 8-bit binary value `a` and an 8-bit binary value `b`, and display their bitwise AND, bitwise OR, bitwise XOR, bitshift left, bitshift right, and a summary of the carry out and carry in states."}, {"instruction": "Develop a Python program that simulates the operation of a 8-bit CPU and memory unit. The program should read a sequence of hexadecimal instructions and execute them. The program should handle unrecognized instructions and provide adequate error handling."}, {"instruction": "Create a Python program that simulates a simple 8-bit register. The program should accept an 8-bit binary value representing the input register, and then perform the following operations:\n\n- Shift left by one bit\n- Shift right by one bit\n- Bitwise OR with the input\n- Bitwise AND with the input\n- Bitwise XOR with the input\n- Bitshifting 1 bit right\n- Bitshifting 1 bit left"}, {"instruction": "Create a Python program that takes a binary input from the user and returns the decimal equivalent."}, {"instruction": "Design a Python program to implement a 4-bit binary-coded number calculator. It should support addition, subtraction, and multiplication operations. The program should also ensure that no overflows occur during the calculation."}, {"instruction": "Design a Python program that takes two 8-bit integers as input and outputs their sum and carry flags. The program should handle both positive and negative integers. The input should not be padded or masked so that the number of bits is 8."}, {"instruction": "Write a Python program that implements a 4-bit ripple carry adder. The program should accept two 4-bit integers from user input, and return their sum as a 4-bit integer."}, {"instruction": "Design a Python program that implements an 8-bit register with various bitwise operations and logical operands to manipulate its values. The program should accept input in the form of commands that modify the register's state, and output the register's value as the result. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Write a Python program to calculate the bitwise OR of two numbers using only bitwise or operators."}, {"instruction": "Create a Python program that implements a basic calculator that performs basic arithmetic operations. The program should accept user input as a string that represents an equation. The program should support the following operations: `+`, `-`, `*`, `/`, `%`. For example, the program should return `13` for `2 + 5 * 2 / 2`."}, {"instruction": "Create a Python program that implements an 8-bit processor with a single Instruction Register (IR) and two Data Registers (DR1 and DR2). The program should read input from a text file containing 8-bit hexadecimal values and perform a sequence of operations on the IR, DR1, and DR2 based on the bitwise operations specified in the input. The program should update the IR using the result of the operations and print the final values of DR1, DR2, and IR."}, {"instruction": "Create a Python program that performs a simple bitwise operation on 8-bit memory registers, using bitwise operations, or, and, xor, shifts, and carries.  \n\nThe program should prompt the user for an input byte, and then prompt for 3 operations: `or`, `and`, or `xor`. The program should continue to ask the user for operations until the user provides `exit`.\n\nThe program should print out the input byte, the operation applied, and the result after evaluation.\n\nEach operation should be performed on the input byte in 4 steps as follows:\n\n1. Store the result of the operation in a temporary variable (call this variable `temp`.\n2. Use the bitwise `or` operator to combine the temporary variable and the input byte.\n3. Shift the result of step 2 1 bit to the right with the `>>` operator to get the next level of output.\n4. Use the `or` operator to combine the output from step 3 with the input byte."}, {"instruction": "Design a Python program that simulates a 8-bit register with an 8-bit value, a 5-bit carry flag, and a 3-bit overflow flag. Implement the bitwise operations that can be performed with the register."}, {"instruction": "Develop a Python program that takes user-inputted binary numbers and performs bitwise operations on them.\n\n```\n+------+------+\n|  ~   |  |   |\n+------+------+\n|  X   |  &  |\n+------+------+\n|  Y   |  |   |\n+------+------+\n|  Z   |  |   |\n+------+------+\n|  X   |  << |\n+------+------+\n|  Y   |  >> |\n+------+------+\n|  Z   | ^   |\n+------+------+\n```\n\nThe program should continue to run until the user enters the character '0' to indicate that the user is done inputting numbers."}, {"instruction": "Write a Python program that simulates the execution of a simple two-register machine of the following instructions:\n- `INC A` - increment the value of register `A`\n- `DEC A` - decrement the value of register `A`\n- `ADD A B` - add the values of registers `A` and `B` and store the result in register `A`\n- `SUB A B` - subtract the values of registers `B` from `A` and store the result in register `A`\n- `MUL A B` - multiply the values of registers `A` and `B` and store the result in register `A`\n- `DIV A B` - divide the values of registers `A` by `B` and store the result in register `A`\n- `MOD A B` - calculate the remainder of `A` divided by `B` and store the result in register `A`\n\nThe program should read in the instructions from a text file and execute them sequentially. An integer `A` and integer `B` must be provided as input for each instruction.\n\nFor example, given the instructions `INC A` and `DEC B` and the values of registers `A` and `B` of 2 and 5, respectively, upon execution of these instructions, `A` should be equal to 3 and `B` should be equal to 4."}, {"instruction": "Develop a Python program that simulates a simple CPU-like instruction set. The program should first accept a list of 2-element tuples containing the instruction name and number of arguments, followed by a list of arguments. The program should then execute the instructions accordingly, using a 8-bit register for each argument.\n\nThe instruction set should support the following instructions:\n1. `mov` -- move an argument in the instruction tuple into a register.\n2. `add` -- add the argument to a register.\n3. `sub` -- subtract the argument from a register.\n4. `cmp` -- compare the argument to a register using the `>` (`1`), `==` (`0`), and `<` (`-1`) operators.\n5. `jgt` -- jump to an instruction from a register if the comparison is greater than zero.\n6. `jlt` -- jump to an instruction from a register if the comparison is less than zero.\n7. `end` -- exit the program.\n\nFor example, given the following input:\n```\n[('mov', 1), ('mov', 0), ('add', 2)]\n[10, 20, 30]\n```\n\nThe program should output the following:\n```\n10\n20\n20\n-1\n30\n```"}, {"instruction": "Design a Python program that implements a simple 8-bit register with a single storage bit. The program must support bitwise arithmetic operations on this register, including addition, subtraction, multiplication, and division. Each operation should be accomplished by manipulating the bits of the register using bitwise operations. The program should also support the following operations:\n\n- AND: perform bitwise AND on the register with an input value;\n- OR: perform bitwise OR on the register with an input value;\n- XOR: perform bitwise XOR on the register with an input value;\n- SHIFT: shift the register content left or right by a specified number of bits;\n- CHECK: check whether the register is in the carry or flag state.\n\nWhen performing arithmetic operations, the program should perform the operation modulo 2 for each bit. Bitwise arithmetic operations should be performed in the usual two's complement representation.\n\nThe program should prompt the user for a bitwise operation to perform on the register. The user should be able to choose from the following operations:\n\n- AND\n- OR\n- XOR\n- SHIFT LEFT\n- SHIFT RIGHT\n- CHECK\n\nThe program should display the updated state of the register after the operation is performed."}, {"instruction": "Write a C program that performs bitwise operations on two 8-bit registers. The program should accept two unsigned 8-bit integer values as input from the user, perform bitwise operations on these registers, and output the result. The program should follow the following specifications:\n\n- The program should accept exactly two positive 8-bit integer values as input, representing the values of the two registers.\n- The program should perform bitwise operations on the input values and the output of bitwise operations should be stored in the corresponding registers.\n- The program should output the result of the bitwise operations on the registers to the console.\n- The program should support different bitwise operations, including bitwise or, bitwise and, bitwise xor, and bitshifting."}, {"instruction": "Design a Python program that determines the carry bit as the result of an 8-bit addition operation. The program should accept two 8-bit integers from the user and perform a bitwise addition operation. The program should use the bitwise or, bitwise and, and bitwise xor operations to perform the addition. The program should also determine the carry bit as the result of the addition operation."}, {"instruction": "Design a Python program that simulates a 8-bit register and a 4-bit instruction set processor (CPU) that executes a series of instructions provided as a hexadecimal string. The program should first read the hexadecimal string, convert it to a binary string, and then decode each instruction into a reference to an opcode and an associated immediate value. The program should then execute the instructions by updating the state of the register based on the instructions' opcode and the immediate value.\n\nThe program should maintain two flags, `carry` and `zero`, for managing the state of the registers and set the respective flags when appropriate. The flags should be updated at the end of each instruction, and the program should stop when the `halt` instruction is encountered."}, {"instruction": "Design a Python program that simulates a CPU program counter (PC) with 8-bit registers. The program should simulate the following CPU operations:\n\n- ADD: add the value of the destination register to the value of the source register, set the carry flag if the result overflows the 8-bit limit, and increment the program counter by one.\n- SUB: subtract the value of the destination register from the value of the source register, set the carry flag if the result underflows the 8-bit limit, and increment the program counter by one.\n- OR: perform a bitwise OR operation on the values of the destination and source registers, and store the result in the destination register. Increment the program counter by one.\n- AND: perform a bitwise AND operation on the values of the destination and source registers, and store the result in the destination register. Increment the program counter by one.\n- XOR: perform a bitwise XOR operation on the values of the destination and source registers, and store the result in the destination register. Increment the program counter by one.\n- SHL: shift the bits of the value of the source register to the left by the amount specified by the value of the destination register, and store the result in the destination register. Increment the program counter by one.\n- SHR: shift the bits of the value of the source register to the right by the amount specified by the value of the destination register, and store the result in the destination register. Increment the program counter by one.\n- JC: jump to the specified address if the carry flag is set. Increment the program counter by one.\n- JNC: jump to the specified address if the carry flag is not set. Increment the program counter by one.\n\nThe program should be able to handle the following input and output formats:\n\n- input: line-separated strings\n- output: line-separated strings\n\nThe function should raise an exception if the input format is invalid."}, {"instruction": "Design a Python program that implements an 8-bit binary number incrementer. The program should accept a string of 8-bit binary digits as an input, and increment the number by one. The program should keep the leading 0s in the output if the input has leading 0s and output all 0s if the input is all 0s or a string of all 9s."}, {"instruction": "Write a program that simulates a 4-stage Random Access Machine (RAM). The program should read, parse, and execute a set of machine instructions. The program should also keep track of which instructions were executed and the value of the registers before and after execution. The program should run until one or more of the following conditions is met:\n\n- the program reaches the end of the instruction set\n- the program contains an invalid instruction\n- the program attempts to access an out-of-range address in a register"}, {"instruction": "Design a Python program that uses bitwise operators to perform 8-bit addition of two 8-bit binary numbers, with support for overflow (carry and borrow). The program must handle the case where the 8-bit numbers are negative."}, {"instruction": "Write a Python program that simulates a simple calculator using a 8-bit register (with 8 bits) and a carry flag. The program should allow users to input 8-bit integers and perform arithmetic operations (addition, subtraction, multiplication, and division) on them. The program should prompt the user to enter the operands and operation type and perform the corresponding operation on the provided operands. The program should handle all exceptions and ensure optimal performance."}, {"instruction": "Design a Python program that implements the [Add, Subtract, Multiply and Divide (ADMD) machine](https://en.wikipedia.org/wiki/AD%E2%80%93DI_machine) using bitwise operations.\n\nThe program should handle the following operations:\n\n- Addition\n- Subtraction\n- Multiplication\n- Division\n- Modulus\n- Division with remainder"}, {"instruction": "Design a Python program that implements the C-style bitwise operations for 8-bit integers.\n\n- bitwise or (`|`)\n- bitwise and (`&`)\n- bitwise xor (`^`)\n- bitshifting (add an integer number of zero bits to the left or right)\n- carry (if bitwise and or bitwise or are performed on two 8-bit registers, the result of the operation is only valid if the bitwise and or bitwise or operations do not cause a carry out)"}, {"instruction": "Design a Python program that simulates a common 8-bit register with the following operations:\n\n- `x | y`: set the register to 1 if either x or y are 1\n- `x & y`: set the register to 1 if both x and y are 1\n- `x ^ y`: set the register to 1 if either x or y are 1, but not both\n- `x << y`: shift x left by `y` bits, filling the vacated (unused) bits with a 0\n- `x >> y`: shift x right by `y` bits, filling the vacated (unused) bits with a 0\n- `x & ~y`: set the register to 1 if `x & y` is 0\n- `x & (y|z)`: set the register to 1 if `x & y` is 1 and `x & z` is 1 without changing the previous value of the register"}, {"instruction": "Write a simulator for a simple computer that can run a program consisting of one instruction only, say `LOAD A, #VALUE`, where `A` and `VALUE` are registers and `LOAD` is an arithmetic operation that copies the value of `VALUE` into `A`. The simulator should run the program until the last instruction is reached.\n\nThe instruction is stored as a 16-bit unsigned integer. The first 8 bits are a code for the operation, and the remaining 8 bits are the operands. The code is an 8-bit unsigned integer. The operands are both 8-bit unsigned integers.\n\nThe code for `ADD` is 0x01. The code for `XOR` is 0x03. The code for `LOAD` is 0x05.\n\nThe simulator should run for `n` operations, where `n` is the number of bits in the instruction. For each instruction, check the code to extract the operation, and the operands to extract the values.\n\nThe simulator should record the state of the registers for each operation and print out the operation, the values of the registers, and the flags. The flags are a bitfield that can be manipulated as follows:\n\n| Bit  | Name           | Description                   |\n| ---- | -------------- | ----------------------------- |\n| 0    | Zero (Z)       | Set when the result is 0      |\n| 1    | Carry (C)      | Set when the result has a carry |\n| 2    | Ovnerflow (O)  | Set when the result has overflown |\n| 3    | Negative (N)   | Set when the result is negative |"}, {"instruction": "Design a Python program that reads a hexadecimal (base-16) number from the user and prints its equivalent binary (base-2) representation."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: multiple variable declarations, explicit type declaration, arithmetic operator precedence\n\n### Task", "fingerprint": null, "content": {"code": "inline double torque_calc(double r,   //wheel radius\n                          double L,   //wheel load\n                          double wn,  //wheel numeric\n                          double sr){ //slip ratio\n  \n  return r*L*0.75*(1-exp(-0.3*wn*sr));\n}", "docstring": "//wheel numeric", "function_name": "towed_force_calc"}, "id": 136, "seed": "inline double torque_calc(double r,   //wheel radius\n                          double L,   //wheel load\n                          double wn,  //wheel numeric\n                          double sr){ //slip ratio\n  \n  return r*L*0.75*(1-exp(-0.3*wn*sr));\n}", "__index_level_0__": 37, "concepts": ["multiple variable declarations", "explicit type declaration", "arithmetic operator precedence"], "parsing_result": [{"instruction": "Create a Python function that accepts two numbers as inputs and returns the sum, difference, product, and quotient of these numbers. Ensure proper operator precedence and avoid explicit type declarations when performing calculations."}, {"instruction": "Write a Python function that takes a list of numbers and returns the average, median, and mode of the list, where:\n- Average: the sum of all numbers divided by the number of elements\n- Median: the element in the middle position of the list, if there are even numbers of elements, otherwise the mean of the two middle elements\n- Mode: the most frequently occurring element in the list"}, {"instruction": "Create a Python function that accepts two lists of numbers and returns their sum. Both lists will contain a total of n elements, where n is an arbitrary positive integer. The function should have a default parameter value of `n=10` for both lists. Provide appropriate error handling for situations where the lengths of the lists are not equal.\n\nNote: The function should not use the built-in Python `sum()` function for the task."}, {"instruction": "Create a Python function that takes a list of numbers and returns the median of the list. Utilize the `sorted` function to sort the list and select the middle element if the length of the list is odd, or the average of the middle two elements if the length of the list is even."}, {"instruction": "Create a Python function that takes a string as input, representing a mathematical expression, and returns the result of evaluating the expression, using the usual order of operations. For example, `calculate(\"2+3*4\")` should return `14`, and `calculate(\"10-2*3+4/5\")` should return `2.4`. The function should handle invalid expressions (e.g., division by zero) gracefully, by returning `None` or raising an exception."}, {"instruction": "Write a Python function that accepts two numeric arguments and prints the result of the addition, subtraction, multiplication, and division of the two numbers. To avoid any ambiguity, use explicit variable types for the arguments and result of each operation."}, {"instruction": "Create a Python function that accepts a list of numbers as input and returns the sum of the numbers. Evaluate the function to reproduce the behavior of the following JavaScript code:\n```js\nfunction sum(arr) {\n  var sum = 0;\n  for (const el of arr) {\n      sum += el;\n  }\n  return sum;\n}\n```"}, {"instruction": "Write a Python function that converts a string representation of an integer from one radix to another. The function should accept three arguments: `value` (the value to be converted), `from_base` (the current radix), and `to_base` (the target radix). The function should return the converted value as a string."}, {"instruction": "Create a Python function that computes the volume of a cylinder given its height and radius. Ensure the function is robust to invalid inputs (e.g., negative height or radius) by handling exceptions and using default values for the arguments."}, {"instruction": "Create a Python function to add a value to a list. The function should accept any number of arguments and add them to a list in a single operation. The function should also accept optional arguments to define an index from which to start adding new elements and the operation: add to the end ('end'), insert at a specific index ('insert'), or update at a specific index ('update')."}, {"instruction": "Create a Python function that takes two numbers as inputs and returns the sum of the two numbers. Utilize the `+` operator to add the two numbers. Ensure your implementation works with both integers and floating-point numbers."}, {"instruction": "Write a Python function that takes an arbitrary number of integer arguments and returns their sum, taking into account the sign of the individual numbers. For example, `sum_of_ints(-1, 2, 3)` should return `-1 + 2 + 3 = 2`."}, {"instruction": "Write a Python function that takes two variables `x` and `y` as input and calculates the result of the following mathematical expression:\n\n`x + (y - x) * (1 + 1.1)`\n\nThe function should return the result as a float, and should support type casting if necessary."}, {"instruction": "Write a Python function that accepts list of integers as input and returns the median value. For even number of elements, the average of the two middle elements should be returned."}, {"instruction": "Write a Python function that takes two numbers as input and returns the largest of the two numbers using a conditional statement. Explicitly declare the types of the input variables as integers."}, {"instruction": "Write a Python function that accepts a sequence of two or more numbers as input and returns the sum of the numbers that are divisible by 7. Apply a second filter to the input sequence to only retrieve the numbers that are divisible by 3."}, {"instruction": "Implement a Python function `eval_eqn(a, b, c)` that takes a, b, and c as inputs and evaluates the quadratic equation (ax<sup>2</sup> + bx + c = 0). It should return the positive real root if it exists, otherwise return `None`."}, {"instruction": "Write a Python function that prompts the user to enter a positive integer and checks if it is a perfect square. The function should return `True` if the number is a perfect square, `False` otherwise."}, {"instruction": "Write a Python function to convert temperatures from one unit to another. The function should accept a positive floating-point number for the temperature and a string of the source and target units, where a unit is one of \"C\" for Celsius, \"F\" for Fahrenheit, or \"K\" for Kelvin. The function should return the converted temperature as a floating-point number."}, {"instruction": "Create a Python function that accepts two integers and returns their sum, product, quotient, and remainder."}, {"instruction": "Create a Python function that accepts two arguments `a` and `b` and returns their sum, difference, product, and quotient, in that order. The function should support Python's implicit type detection and explicit type declaration."}, {"instruction": "Create a Python function that takes input from a user and converts it to a float, string, or integer. The function should also accept additional arguments to specify the desired type of output. If the desired output is not specified, the function should return the original input unchanged.\n\nIn order to achieve this, use Python's built-in `input()` function to prompt the user for input and `type()` to convert the input to the desired output type."}, {"instruction": "Write a Python function that takes two numbers as input and returns the sum of the two numbers, subtracting the smaller number from the larger one. Use explicit variable declarations and the following arithmetic operators: addition and subtraction. Take care of division by zero cases."}, {"instruction": "Write a Python function that takes two numbers (a and b) and prints a message (\u201ca > b\u201d or \u201ca < b\u201d or \u201ca = b\u201d) based on the value of a and b. Perform the comparison without using the built-in Python function `max()` or any other built-in comparison functions."}, {"instruction": "Write a Python function that takes a string of integer digits and converts it to an integer value. The function should support leading zeros, but must not accept any other non-digit characters."}, {"instruction": "Create a Python function that takes two inputs, `num_1` and `num_2`, and performs a series of operations on them in a specific sequence. The function should return the final result as a string in the format of \"{num_1} {op_1} {num_2} = {result}\" (e.g., \"3 + 5 = 8\").\n\nThe operations should be performed in the following order, with each operation specified by a single character:\n- Addition: '+'\n- Subtraction: '-'\n- Multiplication: '*'\n- Division: '/'\n\nThe function should handle all possible errors and log them accordingly."}, {"instruction": "Write a Python function that takes a positive integer as input and returns the smallest positive integer that is divisible by each of its digits. For example, the smallest divisor of 346 is 21."}, {"instruction": "Write a Python function that takes three integer arguments and returns the result of the first number divided by the second with the remainder rounded down to the third number. Use multiple variables to declare the arguments, assign explicit types, and resolve operator precedence."}, {"instruction": "Write a Python function to convert a given temperature from Fahrenheit to Celsius in a single statement."}, {"instruction": "Create a Python function that takes a number `n` and calculates the sum of the first `n` integers."}, {"instruction": "Write a Python function that takes two variables, `x` and `y`, and returns the value of `x + 5` if `x` is greater than `y`, or `y - 10` if `x` is less than `y`. However, ensure that the return value is always an integer."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: breadth-first search in a discrete space, queue implementation, breadth-first search traversal, depth-first search traversal, graph traversal\n\n### Task", "fingerprint": null, "content": {"code": "int main() {\n    scanf(\"%d%d\", &N, &K);\n    queue<point> q;//\u521b\u5efa\u961f\u4f0d\n    q.push(point(N, 0));//\u519c\u592b\u521d\u59cb\u4f4d\u7f6e\u5165\u961f\n    int end_step = -1;//\u521d\u59cb\u5316\u6700\u7ec8\u6b65\u6570\n    while(!q.empty()) {\n        point this_pos = q.front();//\u8bfb\u53d6\u961f\u5934\n        q.pop();//\u5f39\u51fa\u961f\u5934\n        int x=this_pos.pos, step=this_pos.step;\n        if(x == K) { //\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7b49\u4e8e\u725b\u7684\u4f4d\u7f6e\n            end_step = step;\n            break;\n        }\n        if(x-1>=0 && x-1<=100000 && vis[x-1]==0) { //\u5411\u540e\u4e00\u6b65\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x-1, step+1));\n            vis[x-1] = 1;\n        }\n        if(x+1>=0 && x+1<=100000 && vis[x+1]==0) { //\u5411\u524d\u4e00\u6b65\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x+1, step+1));\n            vis[x+1] = 1;\n        }\n        if(x*2<=100000 && x*2>=0 && vis[x*2]==0) { //2\u500d\u4f4d\u7f6e\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x*2, step+1));\n            vis[x*2] = 1;\n        }\n    }\n    printf(\"%d\\n\", end_step);\n    return 0;\n}", "docstring": "//\u6784\u9020\u51fd\u6570....", "function_name": "point"}, "id": 145, "seed": "int main() {\n    scanf(\"%d%d\", &N, &K);\n    queue<point> q;//\u521b\u5efa\u961f\u4f0d\n    q.push(point(N, 0));//\u519c\u592b\u521d\u59cb\u4f4d\u7f6e\u5165\u961f\n    int end_step = -1;//\u521d\u59cb\u5316\u6700\u7ec8\u6b65\u6570\n    while(!q.empty()) {\n        point this_pos = q.front();//\u8bfb\u53d6\u961f\u5934\n        q.pop();//\u5f39\u51fa\u961f\u5934\n        int x=this_pos.pos, step=this_pos.step;\n        if(x == K) { //\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7b49\u4e8e\u725b\u7684\u4f4d\u7f6e\n            end_step = step;\n            break;\n        }\n        if(x-1>=0 && x-1<=100000 && vis[x-1]==0) { //\u5411\u540e\u4e00\u6b65\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x-1, step+1));\n            vis[x-1] = 1;\n        }\n        if(x+1>=0 && x+1<=100000 && vis[x+1]==0) { //\u5411\u524d\u4e00\u6b65\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x+1, step+1));\n            vis[x+1] = 1;\n        }\n        if(x*2<=100000 && x*2>=0 && vis[x*2]==0) { //2\u500d\u4f4d\u7f6e\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x*2, step+1));\n            vis[x*2] = 1;\n        }\n    }\n    printf(\"%d\\n\", end_step);\n    return 0;\n}", "__index_level_0__": 38, "concepts": ["breadth-first search in a discrete space", "queue implementation", "breadth-first search traversal", "depth-first search traversal", "graph traversal"], "parsing_result": [{"instruction": "Write a Python function that performs breadth-first search and depth-first search on a discrete space grid (e.g., a two-dimensional array). The function should accept a starting point and a destination point as inputs; the function should return a path to the destination if one exists.\n\nNote that you can assume the grid is rectangular and that the starting and destination points are valid locations in the grid.\n\nFor example, given a grid of size `N` by `M` with the following starting and destination points:\n- start: `[1, 1]`\n- destination: `[N, M]`\nthe function should return a list of path points, each as a list of two coordinates:\n- `[[1, 1], [2, 1], [2, 2], [3, 2], [3, 3], ..., [N, M]]`"}, {"instruction": "Implement a Python function that performs a breadth-first search using a queue for a discrete two-dimensional grid. The input is a tuple of the form `(width, height)`, representing the bounds of the grid, and a list of tuples of the form `[(x1, y1), (x2, y2), ..., (xn, yn)]`, representing the positions of obstacles. The function should return a list of tuples representing the route from the top left corner of the grid `(0, 0)` to the bottom right corner `(width - 1, height - 1)` without passing through any obstacle."}, {"instruction": "Write a Python function that performs a breadth-first search in a discrete 2-dimensional space represented as a 2-dimensional list. The function should take as inputs the space and the starting point, and should return the list of all points visited by the search. The function should also output the depth of the search.\n\nFor example, given the following space:\n```\n[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n```\nand the starting point `[0, 4]`, the function should first visit the following points: `[0, 4]`, `[0, 5]`, `[1, 4]`, and `[1, 5]` before returning the list of visited points, `[0, 4]`, `[0, 5]`, `[1, 4]`, `[1, 5]`, and the depth `2`."}, {"instruction": "Write a Python function that takes a graph that is represented as a dictionary mapping nodes to lists of adjacent nodes and a starting node. Use a queue to perform a breadth-first search (BFS) on the graph that starts at the given starting node. When performing BFS, output the sequence of nodes visited in the traversal.\n\nFor example, given the graph `{1: [2, 3], 2: [4], 3: [5], 4: [6], 5: [7], 6: [8], 7: [9], 8: [10], 9: [11], 10: [12]}` and the starting node `3`, the BFS traversal should output `3, 5, 7, 9, 11, 12`."}, {"instruction": "Write a Python function that takes a 2D discrete space (defined as a list of lists) and performs a breadth-first search (BFS) on the space by keeping track of coordinates visited. The function should return a list of tuples representing each visited coordinate with their respective search depth (an integer)."}, {"instruction": "Develop a Python function `breadth_first_search` that performs a breadth-first search on a given a 2D array representing a discrete space. The function returns the list of coordinates of all nodes in the graph that are reachable from a given starting point. The function should accept two arguments, the discrete space and the starting point coordinate (represented as a tuple `(x, y)`)."}, {"instruction": "Write a Python function that implements a breadth-first search algorithm for a discrete space. The function should take as parameters: a starting point (x, y), a target point (x, y), and a list of points that represent walls. The function should output the path found by the search, which is a list of points. If no path can be found, the function should output an empty list.\n\nThe space is discrete and the walls are represented by a list of points, each of which is a tuple (x, y). The function should return a list of points denoting the path found by the search, including the starting point and the target point, but not including walls.\n\nThe starting point (x, y) is one that is not a wall. The target point (x, y) is one that is not a wall. The path found should be a list of points that uses the shortest sequence of moves to reach the target.\n\nIf no path can be found, the function should return an empty list. Otherwise, it should return a list of points that represents the path."}, {"instruction": "Implement the classic \"Toy Robot Simulator\" problem from [code katas](http://codekata.com/kata/kata08-implement-the-tray-robot-simulator/). The robot's starting position and facing direction are specified in a string, and each subsequent command moves the robot forward or turns it 90 degrees. The movement commands are: `F` = forward, `L` = left, `R` = right.\n\nThe exit commands are: `A` = exit on first valid path, `S` = exit after all paths have been checked.\n\nFor example, given the input:\n```\n5 5\n1 2 N\nRFRFRFRF\n3 3 E\nFRRFLLFFRRFLL\n0 0 W\nLLFFFLFLFL\n```\n\nThe first argument: `{x, y} = {1, 2}` and `direction = N`. The movement commands are: `r` = `right`, `f` = `forward`, `l` = `left`. The output should be:\n```\n1 3 N\n3 3 E\n2 2 S\n```\n\nThe second argument: `{x, y} = {3, 3}` and `direction = E`. The movement commands are: `f` = `forward`, `r` = `right`, `l` = `left`. The output should be:\n```\n3 2 E\n4 2 S\n5 3 S\n6 3 W\n```\n\nThe third argument: `{x, y} = {0, 0}` and `direction = W`. The movement commands are: `l` = `left`, `f` = `forward`, `r` = `right`. The output should be:\n```\n0 2 W\n```"}, {"instruction": "Implement a Python function that traverses a graph using breadth-first search (BFS) and depth-first search (DFS) traversals. The function should take a graph represented as a dictionary of nodes and edges, and traverse the graph using BFS and DFS. The function should return two lists: one representing the nodes traversed in a BFS traversal and the other representing nodes traversed in a DFS traversal.\n\nEnsure that if the graph has a cycle, the function does not traverse it."}, {"instruction": "Write a Python function that takes a 2D binary grid and returns a node path of the closest connected node to the origin (0, 0) and the number of steps needed to reach that node, if it exists. The algorithm should use a queue and BFS to find the closest connected node, and the shortest path would be represented by a list of x and y coordinates of the steps taken.\n\nFor example, given the following grid:\n```\n0 0 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n```\nThe shortest path from (0, 0) to (3, 4) would be `[0, 0] -> [0, 1] -> [0, 2] -> [0, 3] -> [1, 3] -> [2, 3] -> [3, 3] -> [3, 4]`"}, {"instruction": "Create a Python function that takes a 2D matrix (list of lists) and outputs a list of all coordinates of a given value. This function should use breadth-first search to traverse the matrix and return coordinates of all instances of the value. If the target value does not exist in the matrix, the function should return an empty list."}, {"instruction": "Develop a Python function `bfs` that implements the basic breadth-first search algorithm to traverse a discrete graph using a queue. The function should accept the graph's adjacency list as input and return the order in which nodes were encountered during the traversal."}, {"instruction": "Design and implement a Python function `bfs` that traverses a graph represented as a list of edges, where each edge is a pair of nodes. The function should accept a root node and return a list of all nodes visited during the traversal. Assume that the graph is directed and unweighted."}, {"instruction": "Design a Python function that explores a 3x3 grid of squares and determines whether it is possible to reach the goal square (the one in the bottom right corner) from the starting square without stepping on the obstacle square (the one in the top left corner). The function should return a Boolean value indicating whether it is possible to reach the goal square."}, {"instruction": "Design a Python function that conducts breadth-first search (BFS) on a discrete space and computes the shortest path to the exit of the space from the start point. The discrete space is represented as a grid, where the start point is represented by an asterisk and the exit is represented by a period. The space can be traversed in any direction, but does not allow diagonal movement."}, {"instruction": "Implement a Python function `breadth_first_search` that accepts a graph represented by an adjacency matrix with each element in the matrix representing an edge between two vertices. The function should return a list of all vertices that can be reached from a given source vertex by traversing the graph using breadth-first search.\n\nFor example, given the following adjacency matrix:\n```\n0 1 1 0 0\n1 0 0 0 1\n1 0 0 1 0\n0 0 1 0 1\n0 1 0 1 0\n```\nThe function should return the list `[0, 1, 2, 3, 4]`."}, {"instruction": "Create a Python function that takes a set of points in 2D space and returns all points within a given radius of a specific origin point. The function should use a breadth-first search to visit all points within the specified radius from the origin."}, {"instruction": "Develop a Python function `breadth_first_search` that takes in a graph represented as a dictionary and a starting vertex as inputs. It should return a list of all vertices in the graph starting from the given vertex, in the order of breadth-first traversal. The function should also print the traversal path, determining the path to each vertex from the starting vertex."}, {"instruction": "Design a Python program that implements breadth-first search (BFS) and depth-first search (DFS) traversals over a discrete space. The space should be represented as a graph with vertices and edges, where the edges are bi-directional if they exist. The traversal should start at a given vertex and then continue expanding according to whether the vertex has unvisited neighbors. The traversal should be implemented recursively to handle cases with multiple non-tree edges, such as cycles. The program should output a list of all the vertices it visits during the BFS or DFS traversal."}, {"instruction": "Implement a Python function that performs a breadth-first search (BFS) on a connected graph. The function should take a graph as an input argument, represented as a dictionary of lists. The function should return a list containing the vertices in the graph in the order they were visited during BFS."}, {"instruction": "Implement a Python function `search_elements` that performs a breadth-first search (BFS) or depth-first search (DFS) on a one-dimensional array for a specified search target. The function should return an index of the target if found; otherwise, it should return `-1`. The function is called with two arguments: a list of integers representing the 1D array and a target integer. The function may accept additional parameters, such as an optional starting index or an optional order of traversal, but the implementation should be generic and not depend on any specific function names or arguments. The function should output the index of the target if found; otherwise, it should throw an exception."}, {"instruction": "Implement the Python function `bfs`, which takes a graph as a dictionary and a starting vertex as an input parameter and returns a list of vertices forming a valid traversal. The traversal should be performed as a breadth-first search (BFS) that visits every vertex in the graph on the shortest path from the starting vertex to every other vertex, and that follows the order of adjacency of the graph."}, {"instruction": "Write a Python function that takes an adjacency matrix for an undirected graph as input and returns the shortest path between two vertices. The input graph is represented by an adjacency matrix, where each entry `i, j` is 1 if there is an edge from `i` to `j`, and 0 if there is none. The function should use breadth-first search to efficiently find the shortest path between two vertices."}, {"instruction": "Develop a Python function `bfs_traversal` that traverses the nodes of a graph using a breadth-first search. The function should accept a graph as a dictionary, where the nodes are represented as keys and the list of connected nodes as values. The function should return a list of visited nodes in the order in which they were visited."}, {"instruction": "Create a Python function that takes an adjacency matrix for a graph and outputs a list of nodes that are reachable from a starting node using breadth-first search (BFS). The function should support a starting node, and should output all reachable nodes from it."}, {"instruction": "Create a Python function that implements a breadth-first search of a discrete space. The function should take in a grid-like environment and a starting location as inputs and output a list of possible next moves. The function should accept a list of locations that represents a \"wall\" and should return `None` if the starting location is in the \"wall.\" The function should use a queue to implement a breadth-first search traversal, where the next location is the one at the front of the queue. The function should return the first solution found using breadth-first search, which is the shortest path from the starting location to the destination."}, {"instruction": "Design a Python function that takes a graph as input (a dictionary of nodes and their corresponding edges as values) and returns a list of the graph's nodes in breadth-first search order, top-down depth-first search order, and bottom-up depth-first search order."}, {"instruction": "Write a Python function that finds the shortest path between two points on a discrete 2-dimensional grid using breadth-first search. The function should take as input two point coordinates, and return a list of coordinates for the shortest path between the two.\n\nFor example, given the input `(0, 0)` and `(2, 0)`, the function should output `[ (0, 0), (1, 0), (2, 0) ]`."}, {"instruction": "Implement breadth-first search and depth-first search for an undirected graph in a discrete space. The graph space is represented as a dictionary, where each node is represented by a key and the neighbors are represented by a list of their keys. Breadth-first search traverses the graph space from root node to all its neighbors, while depth-first search traverses all the neighbors of a node before traversing its own neighbors."}, {"instruction": "Write a Python function `breadth_first_search` that takes a 2D grid and source and destination coordinates as inputs and returns a list of coordinates for the path from the source to the destination (in the order they were taken). In the search, the function should use a queue to iterate across the grid, ensuring to check all neighboring coordinates in the grid before moving on to the next level. The function should return the empty list if the destination is not reachable."}, {"instruction": "Develop a Python function `count_islands` that accepts a 2D boolean array representing a two-dimensional space of cells and counts the number of islands in the space. An island is defined by a 1 in a cell and neighboring 1 cells that surround it. Cells on the edge of the space and cells where 1 is not adjacent to another 1 are not part of an island.\n\nTo implement this function, you should define a queue of cells and perform a depth-first search on the space in a manner that explores cells that are adjacent to each other. The queue should keep track of the cells that have been visited and should not be visited again, ensuring that all cells that are part of an island are visited.\n\nThe depth-first search should return the number of islands that have been detected in the space."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: IVector interface, C# syntax, iteration and indexing, pointer arithmetic, list element removal\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR bool IVector_1_IndexOf_m672898A842984D0C417D15E67F519A98DF24BF4E (RuntimeObject* __this, RuntimeObject* ___value0, uint32_t* ___index1, const RuntimeMethod* method)\n{\n\tIVector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464* ____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464 = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464::IID, reinterpret_cast<void**>(&____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Marshaling of parameter U27___value0U27 to native representation\n\tIVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B* ____value0_marshaled = NULL;\n\tif (___value0 != NULL)\n\t{\n\t\tif (il2cpp_codegen_is_import_or_windows_runtime(___value0))\n\t\t{\n\t\t\til2cpp_hresult_t hr = ((Il2CppComObject *)___value0)->identity->QueryInterface(IVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B::IID, reinterpret_cast<void**>(&____value0_marshaled));\n\t\t\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t____value0_marshaled = il2cpp_codegen_com_get_or_create_ccw<IVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B>(___value0);\n\t\t}\n\t}\n\telse\n\t{\n\t\t____value0_marshaled = NULL;\n\t}\n\n\t// Native function invocation\n\tbool returnValue = 0;\n\thr = ____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464->IVector_1_IndexOf_m672898A842984D0C417D15E67F519A98DF24BF4E(____value0_marshaled, ___index1, &returnValue);\n\t____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Marshaling cleanup of parameter U27___value0U27 native representation\n\tif (____value0_marshaled != NULL)\n\t{\n\t\t(____value0_marshaled)->Release();\n\t\t____value0_marshaled = NULL;\n\t}\n\n\treturn returnValue;\n}", "docstring": "// Native function invocation", "function_name": "IVector_1_get_Size_m13AF259177E8200E07E482976E26D8E59C27BB64"}, "id": 146, "seed": "IL2CPP_METHOD_ATTR bool IVector_1_IndexOf_m672898A842984D0C417D15E67F519A98DF24BF4E (RuntimeObject* __this, RuntimeObject* ___value0, uint32_t* ___index1, const RuntimeMethod* method)\n{\n\tIVector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464* ____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464 = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464::IID, reinterpret_cast<void**>(&____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Marshaling of parameter U27___value0U27 to native representation\n\tIVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B* ____value0_marshaled = NULL;\n\tif (___value0 != NULL)\n\t{\n\t\tif (il2cpp_codegen_is_import_or_windows_runtime(___value0))\n\t\t{\n\t\t\til2cpp_hresult_t hr = ((Il2CppComObject *)___value0)->identity->QueryInterface(IVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B::IID, reinterpret_cast<void**>(&____value0_marshaled));\n\t\t\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t____value0_marshaled = il2cpp_codegen_com_get_or_create_ccw<IVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B>(___value0);\n\t\t}\n\t}\n\telse\n\t{\n\t\t____value0_marshaled = NULL;\n\t}\n\n\t// Native function invocation\n\tbool returnValue = 0;\n\thr = ____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464->IVector_1_IndexOf_m672898A842984D0C417D15E67F519A98DF24BF4E(____value0_marshaled, ___index1, &returnValue);\n\t____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Marshaling cleanup of parameter U27___value0U27 native representation\n\tif (____value0_marshaled != NULL)\n\t{\n\t\t(____value0_marshaled)->Release();\n\t\t____value0_marshaled = NULL;\n\t}\n\n\treturn returnValue;\n}", "__index_level_0__": 39, "concepts": ["IVector interface", "C# syntax", "iteration and indexing", "pointer arithmetic", "list element removal"], "parsing_result": [{"instruction": "Write a Python program that reads a text file containing a list of integers, separated by new lines, and converts it into an array of integers. The program should use a Python list as the internal storage, and should implement the `IVector` interface to gain access to its elements."}, {"instruction": "Develop a Python program that reads a file containing integers that represent a list and removes all occurrences of a target integer from the list. The updated list should be stored in the same file."}, {"instruction": "Design a Python program that implements the `IVector` interface. The interface should provide methods for adding, removing, and iterating over items in the vector. The program should handle exceptions thrown by the interface methods and print out the relevant error messages."}, {"instruction": "Implement a Python program that allows users to create, read, update, and delete the contents of a list of integers. The program should utilize the `IVector` interface from the previous exercise."}, {"instruction": "Write a Python program to remove the `i`th element of a list. The program should accept two input arguments: a list of integers and an index `i`. The program should then delete the `i`th element, and return the modified list."}, {"instruction": "The `IVector` interface represents a dynamic array of numbers. The interface defines three methods: `append(x)`, `pop()`, and `remove(x)`. The class must support appending elements to the end of the array and removing elements from the end of the array. The method `remove` takes an argument `x` and removes the first occurrence of `x` from the array.\n\nWrite a Python program that uses the `IVector` interface to implement an efficient class called `DynamicVector`. The class should support appending elements to the end of the array and removing elements from the end of the array. The class should also contain a method `remove` that takes an argument `x` and removes the first occurrence of `x` from the array. The class should implement a list-like interface."}, {"instruction": "Develop a Python program to read and process a text file containing a list of integers separated by new lines. The program should print the first 10 elements of the list and then remove every element that is not greater than 100."}, {"instruction": "Write a Python program that implements IVector, a custom interface for list-like data structures. The interface should provide a set of methods to add, remove, and find elements in a list. The methods should allow the client code to specify the index for insertion and removal operations. The program should provide a main method to test the interface and its methods."}, {"instruction": "Develop a Python program that implements a generic interface `IVector` that provides a stack-like data structure to manipulate elements of a given type. The interface supports the operations `push(Element)` and `pop()`, which adds and removes elements from the stack, respectively.\n\nThe program should use multiple classes to implement the interface. Each class should implement its own operations and be encapsulated in a specific class. The program should also provide unit tests to validate the behavior of the interface. All these classes should be defined in a separate module."}, {"instruction": "Develop a C# program that uses an `IVector` interface to manipulate a list of integers. The interface has the following methods: `append(int)`, `remove(int)`, `insert(int, int)`, `get_size()`, `get_nth(int)`, and `contains(int)`; and uses a C# `List` class as the underlying data structure. The program should support printing the list as a string after each operation, as well as an error handling mechanism for invalid input."}, {"instruction": "Implement an IVector class that represents a one-dimensional vector of numbers. The IVector interface can be found in the following file: IVector.cs. The class should be a wrapper for the `List<double>` class, implementing the `IEnumerable` interface. The interface should contain the following members:\n\n- `int Count`: returns the number of elements in the vector.\n- `double this[int index]`: returns the element at the given index.\n- `void Add(double value)`: adds a new element to the end of the vector.\n- `void Insert(int index, double value)`: inserts an element at the given index.\n- `void RemoveAt(int index)`: removes the element at the given index.\n- `void Remove(double value)`: removes the first occurrence of the given value.\n- `void Clear()`: removes all elements from the vector.\n- `int IndexOf(double value)`: returns the index of the first occurrence of the given value.\n- `bool Any(Func<double, bool> predicate)`: returns a boolean value indicating whether a predicate is true for any element in the vector.\n- `bool All(Func<double, bool> predicate)`: returns a boolean value indicating whether a predicate is true for all elements in the vector.\n- `double Min()`: returns the minimum element in the vector.\n- `double Max()`: returns the maximum element in the vector.\n\nThe `IVector` class should implement methods from the `IEnumerable` interface, such as `GetEnumerator`, `Aggregate`, `Contains`, and `Count`. Additionally, provide extension methods that support the following operations:\n\n- `static IVector operator +(IVector left, IVector right)`: vector addition.\n- `static IVector operator -(IVector left, IVector right)`: vector subtraction.\n- `static IVector operator *(IVector vector, double scalar)`: vector multiplication by a scalar.\n- `static IVector operator *(double scalar, IVector vector)`: scalar multiplication by a vector.\n- `static IVector operator /(IVector vector, double scalar)`: vector division by a scalar.\n- `static IVector operator /(double scalar, IVector vector)`: scalar division by a vector.\n- `static bool operator ==(IVector left, IVector right)`: equality operator.\n- `static bool operator !=(IVector left, IVector right)`: inequality operator.\n- `static IVector operator ++(IVector vector)`: increment operator.\n- `static IVector operator --(IVector vector)`: decrement operator.\n\nThe vectors can be operated on with the operators `+`, `-`, `*`, `/`, `++`, `--`, `==`, and `!=`."}, {"instruction": "Write a Python program that generates a list of 100 numbers by repeatedly calling the `IVector.random()` function. The list is generated by randomly choosing a number from 1 to 100 and checking if it is not already present in the list. If the chosen number is already present, do not add it. If the list is full, throw an exception."}, {"instruction": "Implement a Python program that takes two vectors as input, and returns their scalar dot product.\n\nThe vectors can be represented by a list of numbers or a list of pairs, where each element is a number or a `(number, number)` tuple."}, {"instruction": "Design a program that demonstrates the use of the `IVector` interface in C#. The program should read a text file containing a list of integers and populate an `IVector` with integers. The program should print out the contents of the vector, delete the second element, reverse the vector in-place, and delete the last element."}, {"instruction": "Write a Python program that implements the interface IVector that offers basic vector operations like addition, subtraction, and multiplication. For each vector operation, perform input validation and handle exceptions appropriately."}, {"instruction": "Design a class `Vector` that implements the IVector interface, where `X` is the data type of the vector elements. The class should support addition, scalar multiplication, and dot product operations on vectors. The class should also implement the `IEnumerable<X>` interface to allow vector elements to be iterated over as objects of type `X`. Finally, the class should implement the `IVector<X>` interface to allow indexing and removal of vector elements.\n\nThe class should be written in C# and take advantage of generics to make the interface type parameters `X`. The class should also include specifications of the interface members, including the following:\n- `public Vector(X[] values)`: the constructor that initializes the vector with the specified values.\n- `public Vector(): this(new X[0])`: the default constructor that initializes the vector with no values.\n- `public Vector(int length): this(Enumerable.Repeat(default(X), length).ToArray())`: the constructor that initializes the vector with a specified length and all zero values.\n- `public static Vector operator +(Vector left, Vector right)`: the addition operator that adds two vectors element-wise.\n- `public static Vector operator *(Vector left, X scalar)`: the scalar multiplication operator that multiplies each element of the vector by a scalar value.\n- `public static X operator *(Vector left, Vector right)`: the dot product operator that computes the dot product of two vectors.\n- `public void Add(X value)`: the method that adds a new element to the end of the vector.\n- `public void Insert(int index, X value)`: the method that inserts a new element at a specified index in the vector.\n- `public bool TryGetValue(int index, out X value)`: the method that retrieves a value from the vector at a specified index.\n- `public bool TryRemove(int index)`: the method that removes an element at a specified index from the vector.\n- `public void Clear()`: the method that removes all elements from the vector.\n- `public int Count()`: the method that returns the number of elements in the vector.\n\nThe class should also include specifications of the `IEnumerable<X>` interface, including the `GetEnumerator()` method that returns an `IEnumerator<X>` object for iteration over the vector elements. Finally, the class should include specifications of the `IVector<X>` interface, including the `this[int index]` property that returns the value at a specified index."}, {"instruction": "Implement the `IVector` interface to represent a vector data structure in C#. A vector is an ordered collection of values at unique positions. The values can be accessed by an index and can be modified, but the length of the vector is immutable.\n\nThe interface is defined in the `interface` file as the following:\n```csharp\npublic interface IVector {\n    ulong Length { get; }\n    void Add(ulong pos, T value);\n    T Remove(ulong pos);\n    T this[ulong pos] { get; set; }\n}\n```"}, {"instruction": "Write a C# program that implements an `IVector` interface to provide a basic vector data type. The interface should include methods to add, remove, and search for elements in the vector. The class should maintain the dynamic array internally as a list of integers. The class should also provide an indexer to access elements by their indices. Provide clear error handling and logging to manage exceptions that might occur during the execution of the methods."}, {"instruction": "Develop a Python program that implements the `IVector` interface using a list of numbers. The class should support vector operations such as vector addition, scalar multiplication, and vector dot product. The program should also include appropriate assertions to verify the correctness of the operations. The program should be able to handle the case where both vectors are non-empty, but the vectors are of different lengths."}, {"instruction": "Develop a Python program that provides a simple interface for a simple vector type that implements the IVector interface, where the IVector interface is defined as follows:\n\n```csharp\ninterface IVector\n{\n    int Length { get; }\n    int this[int index] { get; set; }\n}\n```\n\nThe interface has two properties: `Length`, an integer that specifies the number of elements in the vector, and `this[index]`, a read-write property that retrieves or sets an element at a given index. The program should provide an implementation for the interface that stores its elements in a list. The program should also provide an interface to iterate over the stored elements in a vector, using the `__iter__` method.\n\nIn addition, the program should provide an implementation of the `__getitem__` and `__setitem__` methods so that the vector can be indexed and modified as a list. Lastly, the program should implement the `__delitem__` method to allow removing arbitrary elements from the vector."}, {"instruction": "Write a C# program that implements a vector `Vector` class that allows indexing and iteration over the elements. The class should satisfy the following assertions:\n\n```csharp\nvar v = new Vector();\nAssert.AreEqual(new List<int>(), v.ToList());\n\nv = new Vector(1, 2, 3, 4, 5);\nAssert.AreEqual(new List<int> { 1, 2, 3, 4, 5 }, v.ToList());\n\nv.Remove(1); // remove the element at position 1\nAssert.AreEqual(new List<int> { 1, 3, 4, 5 }, v.ToList());\n\nv.Remove(3); // remove the element at position 3\nAssert.AreEqual(new List<int> { 1, 3, 5 }, v.ToList());\n\nvar i = v.At(3); // get the element at position 3\nAssert.AreEqual(5, i);\n\nAssert.ThrowsException<IndexOutOfRangeException>(() => v.At(10)); // invalid index\n```"}, {"instruction": "Develop a Python program that reads a list of integers from the input and removes all instances of a specific value from the list. The program should also output the amount of removed elements, alongside the modified list. Provide clear error handling and logging to manage exceptions that might occur during the execution of the program."}, {"instruction": "Develop a Python program that reads data from a file, parses it, and outputs the parsed data to another file. The program should encapsulate the parsing logic in a custom `IVector` interface (defined in `VectorInterface.cs`) and use it to extract the content from the file. The `IVector` interface defines methods that return the number of elements in the vector, and methods that return specific elements by index. The program should use these methods to iterate over the vector and extract the data, which it then outputs to a new file."}, {"instruction": "Create a Python program that accepts two integers, `n` and `k`, representing the size and the number of given elements in an array. It then reads `n` integers and stores them in a Python list. Then, it reads `k` additional integers and removes them from the list. You implement the `IVector` interface in C# and utilize it to perform the removal. Additionally, you should handle any exceptions that might occur during the removal process."}, {"instruction": "Write a C# program that implements an interface `IVector` with the following methods:\n\n```c#\npublic int Length { get; }\npublic bool IsEmpty { get; }\npublic T this[int idx] { get; set; }\npublic void Push(T val);\npublic T Pop();\n```\n\nThe class should support a generic type `T` that can be any type supported by the `System.Collections.Generic` namespace. The class should hold and manage a list of elements. Your program should demonstrate the use of the interface by creating instances of it and interacting with them through standard methods."}, {"instruction": "Design a Python program that implements a simple 2D vector class `IVector`. The program should be able to perform basic vector operations such as addition, subtraction, dot product, scalar multiplication, and norm. The program should also be able to create, access, and remove vector elements."}, {"instruction": "Design a Python program to implement a dynamic array that provides a constant-time operation to access a given position in the array. The program should also provide an interface for performing element removal, updating, and appending elements."}, {"instruction": "Develop a Python program that reads an integer input from the user and creates a wrapper class `IVector` that implements the interface `IList` for a single-dimensional integer array. The class should maintain an internal state that is an array of integers and its final size. The class should support three methods:\n\n- `len(self)`, which returns the current size of the array (equivalent to `self.state.Length`)\n- `append(self, value)`, which returns nothing, but adds `value` to the end of the array (equivalent to `self.state.Add(value)`)\n- `remove(self, index)`, which returns nothing, but removes the element at the given index from the array (equivalent to `self.state.RemoveAt(index)`)\n\nImplement a class `ListVector` that inherits from `IVector` and wraps a `List<int>` collection. The class should also implement the interface `IList<int>` and wrap a `List<int>` collection.\n\nNote: This task is optional and will not be graded."}, {"instruction": "Implement the `IVector` interface for managing a 1D vector. The interface is defined as:\n\n```csharp\npublic interface IVector\n{\n    /// <summary>\n    /// Returns the number of elements in the vector\n    /// </summary>\n    uint Length { get; }\n\n    /// <summary>\n    /// Returns the value at a given index\n    /// </summary>\n    int this[uint index] { get; set; }\n\n    /// <summary>\n    /// Removes the element at a given index, shifting the remaining elements to the left\n    /// </summary>\n    void Remove(uint index);\n}\n```\n\nThe class should support adding new elements to the vector with the `Add` method, returning the new length, and removing elements from the vector with the `Remove` method. Furthermore, the class should provide a `foreach` loop, as well as indexer indexing for the vector elements. The class should also implement the following methods:\n\n```csharp\npublic static uint RemoveAll(IVector vector, int element)\n```\n\nThis method should remove all occurrences of the given `element` in the vector, and return the new length."}, {"instruction": "Develop a Python program that reads a sequence of numbers represented by an integer array and prints the result of applying its square function to each element. The program should mimic the C# interface of the IVector class, including the ability to iterate over the elements as well as list removal. Ensure the program is robust to unruly inputs and gracefully handle exceptions."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: handling exceptions, exception handling, recursive function call\n\n### Task", "fingerprint": null, "content": {"code": "int main()\r\n{\r\n\r\n    //add code here\r\n    int ans;\r\n\r\n    Menu();\r\n\r\n    cin >> ans;\r\n\r\n    choiceMenu(ans);\r\n\r\n    tryAgain();\r\n    cout<<endl;\r\n\r\n    return 0; // Remove this\r\n}", "docstring": "// Remove\r", "function_name": "pauseScreen"}, "id": 148, "seed": "int main()\r\n{\r\n\r\n    //add code here\r\n    int ans;\r\n\r\n    Menu();\r\n\r\n    cin >> ans;\r\n\r\n    choiceMenu(ans);\r\n\r\n    tryAgain();\r\n    cout<<endl;\r\n\r\n    return 0; // Remove this\r\n}", "__index_level_0__": 40, "concepts": ["handling exceptions", "exception handling", "recursive function call"], "parsing_result": [{"instruction": "Create a Python function that raises an exception when the input is not a positive integer. Write a wrapper function that prints the exception message and returns the input unchanged. The wrapper function should handle each exception raised by the recursive function."}, {"instruction": "Create a Python function to find the square root of a number using Newton's method."}, {"instruction": "Write a Python function `divide(dividend, divisor)` that raises exceptions if either the `dividend` or the `divisor` is equal to 0. Otherwise, the function should divide the two numbers and return their quotient."}, {"instruction": "Design a Python function to implement the `gcd(a, b)` function defined below, which computes the greatest common divisor (GCD) of two positive integers `a` and `b` using Euclid's algorithm. The task should handle cases where either of the arguments is not a positive integer or is a negative integer.\n\n```python\ndef gcd(a, b):\n    if a < 0 or b < 0:\n        raise ValueError('Arguments must be positive integers')\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n```"}, {"instruction": "Design a Python function that takes an integer as input and returns its factorial. The function should raise a `ValueError` if the input is negative or a `RecursionError` if the input is larger than the system's maximum recursion depth."}, {"instruction": "Design a Python function that accepts a string as input and returns `True` if all brackets are properly closed, including nested pairs. Otherwise, returns `False`."}, {"instruction": "Write a function to compute the factorial of a given non-negative integer, and handle any exceptions raised when the function is passed a negative value."}, {"instruction": "Create a Python function to return the factorial of a non-negative integer `n` using recursion, where `n` should be 0 or a positive integer. When `n` is negative, the function should raise an exception."}, {"instruction": "Design a Python function to recursively search a list of integers for a target value. If the target is found, the function should return the index of the target value, otherwise it should return `-1`."}, {"instruction": "Write a Python function to calculate the factorial of a non-negative integer using recursion. The function should handle cases where the input is negative or zero."}, {"instruction": "Create a Python function that takes a number and returns its factorial using recursion."}, {"instruction": "Create a Python function to swap two elements in a list, by swapping the values of the two indices. Handle exceptions where the input indices are invalid."}, {"instruction": "Create a Python function that takes an integer as input and returns the largest perfect square that is less than the input. The function should raise an exception if the input is negative or `0`."}, {"instruction": "Design a Python function to compute the Nth term in the Fibonacci sequence, given the `N`th term. You should be able to compute the 100th term and take less than 1 second. To do this, write a function that raises an exception when the input argument is less than 2."}, {"instruction": "Design a Python function that accepts two integers, `x` and `y` as arguments. The function should return the ratio of `x/y` if the denominator (`y`) is not equal to zero, otherwise raise a `ZeroDivisionError` exception.\n\nUse `try-except` statements to catch and handle the exception."}, {"instruction": "Create a Python function `get_max_depth(func, arg)` that accepts a function `func` and an argument `arg` as inputs, and returns the maximum depth of the recursive calls made by `func(arg)` by comparing the depth of the last call made against the maximum depth observed so far."}, {"instruction": "Create a Python function that raises a ValueError exception when the input number is zero. Otherwise, the function should return the factorial of the given integer."}, {"instruction": "Implement a Python function called `factorial(n)` that recursively calculates the factorial of a number `n`, where `n` is an integer greater than or equal to 0. The function should return `1` for `n` equal to 0, and should raise an exception for any other cases."}, {"instruction": "Create a Python function `add_digits(num)` that adds the digits of a positive integer recursively. If the number is zero, the function should return `num`. Otherwise, the function should recursively add the digits of `num` and return the result. For example, `add_digits(123)` should return `6`, and `add_digits(0)` should return `0`."}, {"instruction": "Design a Python function that raises a `ValueError` when a `list` is given as an input. The function should also handle the case where a `str` is given, in which case it should raise a `TypeError`."}, {"instruction": "Design a Python function `get_element_by_index(index)` that returns the element of a given list at a particular index. The function should handle exceptions when the index is negative, out of range, or when the list is empty."}, {"instruction": "Create a Python function that raises a `ZeroDivisionError` if an input parameter is 0, otherwise returns the input parameter divided by 2. Assume that the input parameter is always a positive integer."}, {"instruction": "Design a Python function that accepts two integers `num` and `denom` as arguments and returns `num / denom`, except with the following behavior: when both arguments are negative, instead return the absolute value of `num / denom`; when only the denominator is negative, raise a `ValueError` with a friendly message; when either argument is zero, raise a `ZeroDivisionError` with a friendly message."}, {"instruction": "Design a Python function that raises `ValueError` when the input argument is not an integer. The function should handle the exception by printing the error message and calling itself to ask for another input."}, {"instruction": "Design a Python function that raises an exception when a negative number is encountered, and otherwise computes the square root of a number. The function should handle the exception when it is raised, and then compute the square root of the number."}, {"instruction": "Implement a Python function that returns the median value of a list of integers. The function should handle the case where the input list is empty."}, {"instruction": "Design a Python function that raises an exception if an input array is not square, and returns its transpose otherwise."}, {"instruction": "Design a Python function to raise an exception when an input string is not a valid IPv4 address. An IPv4 address is considered invalid if it contains characters other than digits or a period ('.') character, or if it contains more than three periods. The function should handle the exception and return a string of appropriate error message."}, {"instruction": "Create a Python function to implement a \"catch all\" exception handler. The function should be able to catch any exception thrown during a function call. The function should accept a function as an argument and execute that function, catching any exception and raising it in its place."}, {"instruction": "Implement a Python function that calculates the factorial of a non-negative integer number. You should handle `ValueError` and `TypeError` exceptions and return -1 for all other exceptions."}, {"instruction": "Design a Python function to handle exception in a function call. If an exception is thrown during execution of the function, the function should print the exception message and re-raise it. Otherwise, the function should return the return value of the function call."}, {"instruction": "Design a Python program that reads a file and returns a list of lines, where each line is the concatenation of all the words in the file. If the file does not exist or is invalid, the program should raise an `InvalidFileError` exception."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: SWIG, Typemaps, C++ memory management, exception handling\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Camera_height_get(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    cc::scene::Camera *arg1 = (cc::scene::Camera *) NULL ;\n    uint32_t result;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::Camera>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    result = cc_scene_Camera_height_get(arg1);\n    // %typemap(out) SWIGTYPE\n    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"Camera_height_get, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());\n    \n    \n    \n    return true;\n}", "docstring": "// %typemap(out) SWIGTYPE", "function_name": "js_cc_scene_Camera_width_get"}, "id": 154, "seed": "static bool js_cc_scene_Camera_height_get(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    cc::scene::Camera *arg1 = (cc::scene::Camera *) NULL ;\n    uint32_t result;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::Camera>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    result = cc_scene_Camera_height_get(arg1);\n    // %typemap(out) SWIGTYPE\n    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"Camera_height_get, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());\n    \n    \n    \n    return true;\n}", "__index_level_0__": 41, "concepts": ["SWIG", "Typemaps", "C++ memory management", "exception handling"], "parsing_result": [{"instruction": "Create a Python class that implements a memory allocator, with the following properties:\n\n- The memory allocator should be implemented in C++ and exposed to Python through SWIG.\n- The memory allocator should support at least two memory pools, each one with its own allocation strategy.\n- The memory allocator should support allocating memory blocks of different sizes.\n- The memory allocator should support memory deallocation.\n\nThe allocator should raise an exception if it fails to allocate memory for any reason."}, {"instruction": "Create a Python class `RomanNumeral` that can represent the Roman numeral notation of a given integer. The class should support conversion between integer and Roman numeral representations, as well as the addition and subtraction of two integers represented as Roman numerals.\n\nWrite a C++ wrapper to wrap the Python class, so that the C++ class can be called from Python."}, {"instruction": "Create a SWIG interface for this C++ class:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nclass Foo {\npublic:\n    Foo() {};\n\n    void bar(int a, int b) {\n        cout << \"Foo::bar(\" << a << \", \" << b << \")\" << endl;\n    }\n\n    void baz(int a, int b) {\n        cout << \"Foo::baz(\" << a << \", \" << b << \")\" << endl;\n    }\n};\n```\n\nThe interface should expose the above C++ class methods to Python. Ensure the following properties:\n- Use of Typemaps to ensure memory management is done properly\n- Use of SWIG's `except:` handler to manage exceptions\n- Use of SWIG's \"implicit\" keyword to ensure the SWIG interface is generated"}, {"instruction": "Create a Python class that wraps a C++ class, such that the Python class can be used as a drop-in replacement for the C++ class.\nThe wrapping class should expose some of the functionality of the C++ class while providing additional functionality. The C++ class should be written in C++11, and should use SWIG to expose it to Python. The Python class should be written in Python 3.6, and should include Typemaps to handle the C++ memory management and exception handling."}, {"instruction": "Implement a Python wrapper for the C++ class `Eigen::Matrix<double, 3, 3, 0, 3, 3>`. The interface should implement the following methods:\n- `Matrix33()` - default constructor\n- `Matrix33(double) - scalar constructor`\n- `Matrix33(double, double, double, double, double, double, double, double, double)` - element-wise constructor\n- `double x() const` - getter for the x coordinate\n- `double y() const` - getter for the y coordinate\n- `double z() const` - getter for the z coordinate\n- `double SetX(double x)` - setter for the x coordinate\n- `double SetY(double y)` - setter for the y coordinate\n- `double SetZ(double z)` - setter for the z coordinate\n- `double FrobeniusNorm()` - computes the Frobenius norm of the matrix\n- `double DotProduct(const Matrix33& other) const` - computes the dot product of this matrix and the other\n- `friend Eigen::Matrix<double, 3, 3, 0, 3, 3> operator*(double scalar, const Matrix33& m)` - multiplication"}, {"instruction": "Create a Python class that wraps a C++ API. The class should be initialized with a C++ object pointer and expose the following functions:\n- `set_data(data)` should set the internal data to `data` and return the value of `data`\n- `get_data()` should return the internal data of the C++ object"}, {"instruction": "Create a Python wrapper for a C++ library that contains a single function `run_algorithm(int)` that takes an integer as input and returns the sum of all positive integers from 1 to the input. Write a test program that calls the `run_algorithm` function with a variety of input values and asserts that the program returns the correct output."}, {"instruction": "Implement a C++ class with a single method `compute` that computes the greatest common divisor (GCD) of two positive integers. Write a Python wrapper function that imports the C++ class and calls the `compute` method from within Python. The wrapper should handle error-handling for invalid input values."}, {"instruction": "Implement a Python module that interacts with a C++ shared library to calculate the approximate area of a circle. The C++ library should be written in C++11, and define an interface `area` that takes a radius and returns the area value. Use SWIG to write a Python wrapper.\n\nYou may use the sample C++ code in [example_9](https://github.com/mfbcode/coding-tasks/blob/master/examples/example_9/circle.cpp) for reference."}, {"instruction": "Implement a Python wrapper for a C++ class that provides a static `get_name` method that returns a string consisting of the class name (e.g., \"MyClass\"). The class definition should be in a separate header file and the wrapper should be implemented in a separate C++ file, using SWIG or Typemaps. Implement exception handling for the `get_name` method to ensure that the method is callable within the Python interpreter, and handle the case where the method throws an exception."}, {"instruction": "The following is a C++ class that implements a simple object-oriented programming design pattern:\n\n```c++\n#include <iostream>\n\nclass Heap {\n    int* arr;\n    int capacity;\n    int size;\n\npublic:\n    Heap(int capacity);\n    ~Heap();\n    int get(int index);\n    void insert(int value);\n};\n```\n\nWrite a Python class that mimics this C++ class while exposing the functionality through a Python API."}, {"instruction": "Implement a Python class for representing points in a 2D Cartesian coordinate system. The class should have the following properties:\n- a constructor that accepts two integers or two floats\n- getters for the `x` and `y` coordinates\n- a `distance` method that calculates the Euclidean distance between two points\n\nFor example, given two points `(4, 5)` and `(1, 2)`, the distance between the two points can be calculated by using the Pythagorean theorem."}, {"instruction": "Create a C++ class that extends the functionality of a Python class. The C++ class should be derived from the Python class and provide a simplified interface to the C++ implementation. Additionally, the C++ class should be able to handle memory management for the underlying Python class object and appropriately handle exceptions for the underlying Python class object."}, {"instruction": "Create a Python class (or module) that takes a C++ class as an argument, wraps the C++ class with appropriate SWIG interface, and implements the same interface in Python. The Python class should behave as a thin wrapper over the C++ class.\n\nThe C++ class should handle exceptions and memory allocations with the help of Typemaps. The Python wrapper should not throw any exceptions.\n\nInclude a Python module test file that verifies that the Python wrapper works as expected."}, {"instruction": "Design a Python class to implement a simple linear list data structure, similar to the built-in list type. All operations on the list should be implemented in C++ and exposed to the Python layer. The implementation should be done using SWIG and IDL files.\n/easy/parse_duration/parse_duration.cpp\n#include <iostream>\n#include <string>\n#include <regex>\n\n// similar to Q1\nint parse_duration(const std::string& input) {\n    int duration = 0;\n    std::regex pattern(\"^\\\\d+([smh])?$\");\n    if (!std::regex_match(input, pattern)) {\n        throw std::invalid_argument(\"Invalid input format\");\n    }\n    std::smatch variables;\n    std::regex_match(input, variables, pattern);\n    std::string number = variables[1];\n    std::smatch::iterator it = variables.begin();\n    if (++it != variables.end()) {\n        std::string unit = *it;\n        if (unit == \"s\" || unit == \"sec\") {\n            duration = std::stoi(number);\n        } else if (unit == \"m\" || unit == \"min\") {\n            duration = std::stoi(number) * 60;\n        } else if (unit == \"h\" || unit == \"hour\") {\n            duration = std::stoi(number) * 60 * 60;\n        } else {\n            duration = std::stoi(number) * 60 * 60 * 24;\n        }\n    }\n    return duration;\n}\n\nint main() {\n    std::cout << parse_duration(\"15s\") << std::endl;\n    std::cout << parse_duration(\"2min\") << std::endl;\n    std::cout << parse_duration(\"1h\") << std::endl;\n    std::cout << parse_duration(\"1d\") << std::endl;\n    try {\n        std::cout << parse_duration(\"30\") << std::endl;\n    } catch (std::invalid_argument& e) {\n        std::cout << e.what() << std::endl;\n    }\n}/medium/encode_message/encode_message.py\ndef encode(message):\n    encoded_message = ''\n    for i in range(len(message)):\n        if i == len(message) - 1 or message[i] == message[i + 1]:\n            encoded_message += chr(message[i] | (1 << 5))\n        else:\n            encoded_message += chr(message[i] | (0 << 5))\n    return encoded_message\n\nif __name__ == \"__main__\":\n    print(encode(\"abc\"))\n    print(encode(\"abcd\"))/medium/parse_duration/parse_duration.py\nimport re\n\n# similar to Q1\ndef parse_duration(input):\n    duration = 0\n    pattern = re.compile(\"^\\\\d+([smh])?$\")\n    if not re.match(pattern, input):\n        raise ValueError(\"Invalid input format\")\n    number, unit = input.split(\" \")\n    if unit == \"s\" or unit == \"sec\":\n        duration = int(number)\n    elif unit == \"m\" or unit == \"min\":\n        duration = int(number) * 60\n    elif unit == \"h\" or unit == \"hour\":\n        duration = int(number) * 60 * 60\n    else:\n        duration = int(number) * 60 * 60 * 24\n    return duration\n\nif __name__ == \"__main__\":\n    print(parse_duration(\"15s\"))\n    print(parse_duration(\"2min\"))\n    print(parse_duration(\"1h\"))\n    print(parse_duration(\"1d\"))\n    try:\n        print(parse_duration(\"30\"))\n        print(parse_duration(\"30s\"))\n    except ValueError as e:\n        print(e)"}, {"instruction": "Create a C++ library that provides a SWIG interface to perform a simple vector addition operation on two vectors of numbers. The library should throw an exception if the vectors are not the same length."}, {"instruction": "Implement a Python class to represent a vector in R3. The class should have a constructor that initializes the vector as a NumPy array of three elements. Implement methods to add, subtract, multiply, divide, and calculate the length of the vector. The class should also include an exception constructor to handle any cases in which the NumPy array is not of size 3."}, {"instruction": "Create a Python class that wraps a C++ class and implements it in Python. The class should accept values of type `double` in the constructor and expose the underlying C++ class as a Python class with the same interface."}, {"instruction": "The [SWIG](http://www.swig.org/) project provides tools for generating Python bindings for C and C++ code, where the C code is wrapped with a `CData` class. SWIG also provides a mechanism to generate Python-specific \"typemaps\" that allow a C++ class to be used as a Python `class` type. Here we use SWIG to create a C++ wrapper for the `CData` class and generate a Python typemap for it.\n\nThe C++ code to be wrapped is in the source file `example.cpp` and the Python typemap is in the file `example.i`.\n\nTo generate the Python code that is used as a wrapper, run `swig -python -c++ -o example.py example.i`.\n\nThe resulting Python code should:\n- accept a `size_t` as the only constructor argument\n- implement `set_value(int value)` and `get_value()` methods\n- `get_value()` should return the value stored by `set_value()`\n- `set_value()` should throw an `InvalidValueException` if the value is less than 0\n- `set_value()` should throw an `InvalidValueException` if the value is greater than 10\n\nFinally, to verify that the wrapper is working as expected, run `python example_test.py`."}, {"instruction": "Implement a Python C++ binding using SWIG. SWIG is a rapid prototyping tool for C/C++ that generates wrapper code for Python. The wrapper code is generated into a separate shared library (DLL) that can be loaded in a Python program. The wrapper code allows Python programmers to call functions defined in C/C++ libraries that are not directly accessible from Python. This allows Python programmers to seamlessly leverage the C/C++ performance, accuracy, and robustness of their code while reducing the development effort.\n\nCreate a C++ class called `CWithSWIG` with a single method `void add(int a, int b)` that adds two integers and returns the result. Create a Python wrapper code using SWIG for the C++ class `CWithSWIG` and export the C++ class as a shared library that can be loaded in a Python program. Create test cases for the Python wrapper code to verify the function `add` from the C++ class `CWithSWIG` is called correctly."}, {"instruction": "Design a C++ class named `List` that implements a generic array list data structure with the following properties:\n\n- The class should be able to store objects of any type.\n- The class should be able to resize the list whenever it runs out of space.\n- The class should raise an exception whenever an invalid index is provided.\n\nFor example, the class should be able to handle the following operations:\n\n```C++\nList<int> list = List<int>();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.remove(2);\nlist.append(4);\nlist.insert(4, 2);\nlist[0] = 5;\n```\n\nAdditionally, the class should be implemented using SWIG and have the following interface:\n\n```C++\n%module list\n%{\n#include \"List.hpp\"\n%}\n\n%include \"List.hpp\"\n```"}, {"instruction": "Create a Python class to implement a Swig-based C++ API for calculating the average of a list of numbers. The API should be implemented in C++ and a swig wrapper should be written in Python that allows users to invoke the API using Python syntax. The class should also raise an exception if the list is empty."}, {"instruction": "Create a C++ class with the following properties:\n- supports addition, subtraction, multiplication, and division\n- supports input and output using the stream operators\n- has a helpful error message when an error occurs during calculations\n- has a destructor that frees memory allocated with `new` during object creation\n- has a `run` function that takes two integers and returns the result of the addition, subtraction, multiplication, or division operation\n\n### Boilerplate\nIn the `main.cpp` file, create a C++ class that implements the above features. The class should be defined in a header file, `calc.h`, and implemented in a source file, `calc.cpp`. The main function should create an object of the class and pass the `calc.h` header file, along with the `calc.cpp` source file, to a C++ interpreter called `Swig` that will automatically generate a Python interface for the class (see [link](https://www.swig.org/tutorial.html) for details on how to do this). Use a TypeMap to handle exceptions where possible.\n\nUse `make` to build the project. The `run` function should take two integers as input and return the result of the addition, subtraction, multiplication, or division operation."}, {"instruction": "Design a class for a circular buffer of fixed length and implement its methods. Provide assertions for all methods to ensure correct behavior."}, {"instruction": "In order to implement a function in C++, it can be used as a wrapper function that calls an equivalent Python function. SWIG is a tool that automatically generates C++ code (wrapped C++ functions) from Python code (Python functions that call C++ functions). SWIG also automates the memory management required by C++ functions. Finally, it handles exception handling by converting exceptions into Python exceptions.\n\nImplement a Python program that uses SWIG to generate a C++ class that implements a function that calls a Python function."}, {"instruction": "Create a C++ implementation of the Python `calculate_top_k_accuracy` function from Example 4. The C++ class should expose the function to Python through SWIG, using only Python's `ctypes` module and `py_object` objects. The class should include at least three member variables: `predictions`, `targets`, `k`, and at least two member functions: `set_k` and `get_k`. The class constructor should accept the three member variables and an integer `k` as input and set them in the member variables. The class should also include a `get_accuracy` function that implements the top-k accuracy computation logic in C++. The class should include two typemaps that map the Python `ctypes` module's `py_object` type to the C++ `std::vector` type and vice-versa. The class should also include a custom allocator that manages C++ heap memory and handles exceptions."}, {"instruction": "Create a C++ class that wraps a Python callable object. The C++ class should have a method to call the callable object and store its output in a member variable."}, {"instruction": "Implement a Python wrapper around a class written in C++ that wraps a set of mathematical functions using SWIG. The wrapper should expose the functions defined in the C++ class, and should handle exceptions using the `PyErr_SetString` function."}, {"instruction": "Create a `C++` class that implements a simple [Bloom filter](https://en.wikipedia.org/wiki/Bloom_filter), a probabilistic data structure used to test whether an element is likely to be present in a set. The Bloom filter has two methods:\n1. `add(item)`: Inserts an item into the Bloom filter. The method must not return an error.\n2. `contains(item)`: Tests whether the given item is likely to be present in the Bloom filter. The result should be correct with high probability (but it may be incorrect with low probability).\n\nThe implementation must use a C++ vector container to store the items and must use basic C++ libraries such as `std::hash` and `std::vector` to implement the Bloom filter."}, {"instruction": "There is an existing class in C++ `Invoice` that models invoices for a retail business. Create a Python class for this class in C++, using [SWIG](http://www.swig.org/) to wrap the existing class. The class should have the following methods:\n\n- `get_amount`: Returns the total amount due for the invoice\n- `get_tax`: Returns the value of the tax due for the invoice (17% of the amount)\n- `get_discount`: Returns the value of the discount applied to the invoice (20% of the amount)\n- `get_due_date`: Returns the due date for the invoice (same as the current date)\n- `get_last_updated`: Returns the date on which the invoice was last updated\n\nThe class should have the following properties:\n\n- `vendor`: The name of the vendor\n- `currency`: The currency in which the invoice is in\n- `amount`: The total amount due for the invoice\n- `discount`: The value of the discount applied to the invoice\n- `tax`: The value of the tax due for the invoice\n- `due_date`: The due date for the invoice\n- `last_updated`: The date on which the invoice was last updated\n\nAdditionally, the class should include the following functionality:\n\n- `set_vendor`: Sets the name of the vendor\n- `set_currency`: Sets the currency in which the invoice is in\n- `set_amount`: Sets the total amount due for the invoice\n- `set_discount`: Sets the value of the discount applied to the invoice\n- `set_tax`: Sets the value of the tax due for the invoice\n- `set_due_date`: Sets the due date for the invoice\n- `update`: Updates the date on which the invoice was last updated\n\nThe `update` method should throw an exception if the due date is in the past and the amount is less than the discount, in which case the `last_updated` property should not be updated.\n\nThe class should raise the following exceptions:\n\n- `InvalidVendorException`: Thrown if the vendor is not valid\n- `CurrencyNotSupportedException`: Thrown if the currency is not supported\n- `InvalidAmountException`: Thrown if the amount is less than the discount\n- `InvalidDateException`: Thrown if the due date is in the past\n- `InvalidTaxRateException`: Thrown if the tax rate is not a valid percentage\n- `InvalidDiscountRateException`: Thrown if the discount rate is not a valid percentage\n\nDesign the class so that an invalid vendor, amount, due date, tax rate, or discount rate does not cause the `last_updated` property to be updated."}, {"instruction": "Design a Python class that encapsulates a C++ class that represents a complex number, exposing operations on complex numbers (addition, subtraction, and scalar multiplication) as class instance methods. The class should be able to perform these operations in both the Python and C++ world. Use SWIG to generate a C++ interface for the C++ class."}, {"instruction": "Using SWIG / Typemaps, convert the following C++ code into a Python class that can be used in a script:\n\n```cpp\n#include <string>\nint parse_duration(const std::string& duration) {\n    int seconds = 0;\n    if (duration.empty()) {\n        return seconds;\n    }\n    int multiplier = 1;\n    for (int i = duration.size() - 1; i >= 0; i--) {\n        char c = duration[i];\n        if (c == 's' || c == 'sec') {\n            seconds += 1 * multiplier;\n        } else if (c == 'm' || c == 'min') {\n            seconds += 60 * multiplier;\n        } else if (c == 'h' || c == 'hour') {\n            seconds += 60 * 60 * multiplier;\n        } else if (c == 'd' || c == 'day') {\n            seconds += 24 * 60 * 60 * multiplier;\n        } else {\n            break;\n        }\n        multiplier *= 10;\n    }\n    return seconds;\n}\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: reference counting, symbolic execution, function with no parameters, byte code generation\n\n### Task", "fingerprint": null, "content": {"code": "JDK_SCHEME_NATIVE(trace)\n  {\n    jdk_scheme_sexp_dec_ref( interp, list ); /* throw away any input parameters */\n    jdk_scheme_sexp_inc_ref( interp, interp->empty_value );\n    return interp->empty_value;\n  }", "docstring": "/* throw away any input parameters */", "function_name": "JDK_SCHEME_NATIVE"}, "id": 156, "seed": "JDK_SCHEME_NATIVE(trace)\n  {\n    jdk_scheme_sexp_dec_ref( interp, list ); /* throw away any input parameters */\n    jdk_scheme_sexp_inc_ref( interp, interp->empty_value );\n    return interp->empty_value;\n  }", "__index_level_0__": 42, "concepts": ["reference counting", "symbolic execution", "function with no parameters", "byte code generation"], "parsing_result": [{"instruction": "Write a Python function called `generate_bytecode` that takes a function `func` as an argument. The function should generate and return a sequence of byte codes representing the function's code object. Use the Python `dis` module to generate the byte codes."}, {"instruction": "Design a Python function `generate_bytecode` that generates byte code for a function that does not accept any parameters. The function should return a byte array containing the bytecode. Assume `generate_bytecode` will be called only once and the bytecode will be stored in a global variable. This is a classic example of code generation."}, {"instruction": "Write a Python function `count_statements` that takes one argument, a Python source code file path, and returns the total number of statements in that file. You can assume that the file only contains valid Python code without comments, and that the file only contains a single function without parameters. The function should analyze the Python bytecode generated from the source code and count the total number of statements."}, {"instruction": "Develop a Python function `is_prime` that takes a single integer argument `n` and returns a Boolean value indicating whether or not `n` is prime. The function should perform error checking for positive integer values.\n\nImplement a symbolic execution tool using a Python function `is_prime` as a starting point. The execution tool should print the function's name, parameter names, return value, and the value of `n` at each step of execution."}, {"instruction": "Write a Python function `calc_bytecode_size` that takes a function object as an argument and returns the total size of the bytecode it executes. Use the Python `dis` module to interpret the bytecode. You may use a pre-constructed Huffman tree for this example to test."}, {"instruction": "Design a Python function called `symbolic_execute` that takes a program as a string. The function should return the result of executing the program with its input arguments as a string. The function should support symbolic execution of programs with no input arguments."}, {"instruction": "Write a Python function `virtual_machine` that takes as an argument a byte code string generated by the Python compiler. The function should execute the generated byte code, assuming the code is valid, and return the result of an arbitrary function call."}, {"instruction": "Write a Python function `run_bytecode` that takes a Python bytecode (`bytes` type) as an argument and executes it by generating a function with no parameters. The function should return the result of the execution of the bytecode. Use `dis` module to generate a byte code object from the given string."}, {"instruction": "Write a Python function `symbolic_execution` that takes a function as the only argument, and returns a new function that is an implementation of the original function. However, in this new function, each occurrence of the parameter name is replaced with a symbolic variable.\n\nFor example, consider this function:\n\n    def foo(x):\n        return x * x\n\n    print(foo(2))\n\nAfter symbolic execution, the function should be transformed into the following form:\n\n    def foo(y):\n        return y * y\n\n    print(foo(2))"}, {"instruction": "Write a Python function called `compute_symbolic_execution_count` that takes a function as an argument. The function should execute the function and compute the number of times each line has been executed, based on a symbolic execution analysis. The function should count the number of times a line executes a call to itself."}, {"instruction": "Write a Python function `dynamic_byte_code_gen` that takes two arguments: `func`, a function with no parameters, and `output_file`, the name of the file to be created and output the generated byte code to. The function should dynamically generate the byte code of the target function to the output file and returns `None`. The generated byte code should be written to the file using the `func.__code__.co_code` attribute of the function object."}, {"instruction": "Write a Python function `create_byte_code` that does not receive any arguments. The function should generate and return a byte code instruction that can be executed by the VM."}, {"instruction": "Write a Python function `generate_fibonacci_byte_code` that generates a Python function with no parameters that calculates the n-th Fibonacci number using the recursive formulation. The function should be built using Python's byte code generation features./python-exercises/examples.py\n# 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\ndef encode_chunk(chunk):\n    encoded_chunk = chr(((chunk << 1) | 0b000001) + 63)\n    return encoded_chunk\n\ndef encode_integer(n):\n    encoded_string = \"\"\n    while n > 0:\n        encoded_chunk = encode_chunk(n % 32)\n        encoded_string += encoded_chunk\n        n //= 32\n    return encoded_string[::-1]\n\n# arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\ndef convert_to_human_readable(size):\n    units = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]\n    if size < 1024:\n        return f\"{size:.1f}{units[0]}\"\n    elif size < 1024**2:\n        return f\"{size/1024:.1f}{units[1]}\"\n    elif size < 1024**3:\n        return f\"{size/1024**2:.1f}{units[2]}\"\n    elif size < 1024**4:\n        return f\"{size/1024**3:.1f}{units[3]}\"\n    else:\n        return f\"{size/1024**4:.1f}{units[4]}\"\n\n# case-insensitive string matching, controlled case matching based on an option, list comprehension\ndef match_strings(target, candidates, case_sensitive):\n    if case_sensitive:\n        matches = [candidate for candidate in candidates if target == candidate]\n    else:\n        matches = [candidate.lower() for candidate in candidates if target.lower() == candidate.lower()]\n    return matches\n\n# 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\ndef count_conditional_matches(str1, str2, strict):\n    i, j = 0, len(str1) - 1\n    match_count = 0\n\n    while i < j:\n        if str1[i] == str2[j] and str1[j] == str2[i]:\n            match_count += 1\n            i += 1\n            j -= 1\n        elif not strict:\n            i += 1\n        else:\n            break\n\n    return match_count\n\n# linear search with recursion, default parameter initialization, multiple base cases in recursion\ndef binary_search(target, arr, start, end):\n    if start > end:\n        return -1\n    mid = (end + start) // 2\n    if target == arr[mid]:\n        return mid\n    elif target < arr[mid]:\n        return binary_search(target, arr, start, mid - 1)\n    else:\n        return binary_search(target, arr, mid + 1, end)\n\n# bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\ndef ceil_divide_without_div(n, b):\n    assert n >= 0 and b >= 0\n    return -(-n // (2**b))\n\n# iterating over file lines, command execution from file input, new line character removal\nimport subprocess\ndef run_commands_from_file(commands_file):\n    with open(commands_file) as commands_file:\n        lines = [line.rstrip() for line in commands_file]\n    for line in lines:\n        subprocess.run(line, shell=True)\n\n# decoding compressed data, binary tree traversal, byte array processing\nclass HuffmanNode:\n    def __init__(self, count, data, left=None, right=None):\n        self.count = count\n        self.data = data\n        self.left = left\n        self.right = right\n\ndef build_huffman_tree(data):\n    pass\n\ndef huffman_decompress(compressed_data, huffman_tree):\n    pass\n\n# reference counting, symbolic execution, function with no parameters, byte code generation\nimport dis\n\ndef fibonacci_generator(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_generator(n-2) + fibonacci_generator(n-1)\n\ndef generate_fibonacci_byte_code():\n    pass\n\ndef main():\n    print(encode_integer(1024*512))\n    print(convert_to_human_readable(1024*512))\n    print(match_strings(\"apple\", [\"Apple\", \"apple\", \"banana\", \"APPLE\"], False))\n    print(count_conditional_matches(\"apple\", \"banana\", False))\n    print(binary_search(3, [1, 2, 3, 4, 5], 0, 4))\n    print(ceil_divide_without_div(10, 5))\n    run_commands_from_file(\"./commands.txt\")\n    dis.dis(generate_fibonacci_byte_code)\n\nif __name__ == '__main__':\n    main()"}, {"instruction": "Write a function `count_bytes` that takes a Python function `f` as input and returns the number of bytes of its bytecode. The function should be able to handle functions with no parameters at all (including those with default parameters). You should not count the bytes of the function's bytecode. Instead, you should count the bytes of the bytecode of the function's implementation.\n\nThe function should use symbolic execution to count the number of bytes of the function's implementation. You may use the ast module to extract the bytecode of the function's implementation."}, {"instruction": "Implement a Python function called `count_bytes` that takes a function object as input and counts how many times it is called. Use the function object itself as a unique identifier for the function, and create a dictionary to track the number of calls. Thus, multiple calls to the function from multiple locations should be counted. This function should return the total count of function calls. The function should include robust error handling to ensure that the input is a callable."}, {"instruction": "Write a Python function `symbolic_execute` that takes a Python function with no parameters as input. The function should generate the Python bytecode of the function and inspect it to derive its symbolic execution profile. The execution profile is a dictionary that maps lines of code to the number of times they are executed. Use a recursive function to traverse the bytecode of the function. The function should return the execution profile as a dictionary."}, {"instruction": "Write a Python function `generate_bytecode` that takes a function name as an argument and returns the byte code of the function. The function should return an object of type `bytearray` that contains the byte code of the function. The byte code should be generated using the Python bytecode manipulation APIs available in the `dis` module."}, {"instruction": "Write a Python function `byte_code_generator` that takes a function with no parameters as argument and returns the byte code of the function using the `dis` module. The function should return the byte code as a `bytes` object, which can be used as an argument to the `exec` function."}, {"instruction": "Implement a Python function `eval_symbolic_expression` that takes a symbolic expression string as input and evaluates it. The function should evaluate the expression according to the rules of symbolic execution, such as the order of operations and precedence of operations. You may utilize the `ast` module to parse the expression into an abstract syntax tree (AST) and implement a recursive function to traverse the AST and evaluate the expression."}, {"instruction": "Write a Python function called `get_byte_code` that generates the byte code of a function with no parameters. This function should return a `bytes` object representing the byte code of the function. You can use `dis` module's built-in method `get_code` to get the byte code of a function."}, {"instruction": "Design a Python function that dynamically generates a function with no parameters that returns the sum of the squares of the first N natural numbers (`1 + 2**2 + 3**2 + ... + N**2`). The function should be created by dynamically generating a byte code sequence that reads the input value `N` from a global variable and evaluates the sum."}, {"instruction": "Write a Python function `find_function_bytecode` that takes a function and an input argument as a parameter. The function should return the bytecode of the corresponding function. Do not use any built-in Python functions that generate the bytecode. Do not use the built-in `inspect.getsource` function as it does not guarantee that the function bytecode is generated correctly."}, {"instruction": "Develop a Python function called `byte_code_generator` that takes a function `f` as an argument. The function should generate two byte code sequences using `f` as the source function. The first byte code sequence should use a reference counter to increment and decrement a global variable called `X` when `f` is invoked. The second byte code sequence should use the `X` value to execute `f` using `f()`."}, {"instruction": "Write a Python function `byte_code_gen` that generates a string of byte code for a function that takes no input parameters. The function should return the generated byte code as `str`."}, {"instruction": "Write a Python function `convert_to_symbolic` that takes a Python function as an argument and returns its bytecode representation as a `bytes` object. The function should convert the code of the input function, which is stored in Python's `opcodes` module, into the symbolic representation using the `ast` module. For example, if the input function is `lambda x: x + 1`, the function should return the symbolic representation of the bytecode of this function."}, {"instruction": "Write a Python function called `count_vowels` that takes a string as an argument and calculates the number of vowels in it. For this exercise, assume that a string is a valid input and that the string contains only alphanumeric characters. Write a unit test to validate that your function correctly processes all strings of vowel counts that you can think of."}, {"instruction": "Write a Python function `trace_execution` that takes a Python function as an argument, and returns a Python function that traces the execution of the original function, printing its name and its arguments before calling it. This function should be decorated with a decorator that verifies that the function has no parameters."}, {"instruction": "Write a Python function that takes two arguments: an integer `n` representing the number of times to run a function that prints \"Hello World\" (no parameters) and a boolean flag `update_counter`. The function should return a list of the results of running the function `n` times. If `update_counter` is `True`, the function should also update a global variable to track the number of times the function is called."}, {"instruction": "Write a Python function `symbolic_execution` that takes two string arguments `program` and `input` as input and returns the output of that program when given the input. The function should be written using the concept of [symbolic execution](https://en.wikipedia.org/wiki/Symbolic_execution). The function should provide robust error handling to check that the input string is valid and that the program code is properly formatted.\n\nThe function should use Python's standard library to generate the bytecode of the program and execute it symbolically on the input. The execution should be performed by incrementally traversing the bytecode and evaluating operations based on the present state of the program. The function should also use reference counting to ensure that the garbage collector is not invoked prematurely, and should provide a mechanism to handle exceptions that might occur during the execution."}, {"instruction": "Write a Python function `trace_execution` that takes a Python function `f` as an argument and returns a new function that wraps `f`. The new function records the execution trace of `f` in a list named `trace`. The trace execution function should be executed for a certain number of times, and the trace should be printed when `f` returns. The trace should include the function name, arguments, and return value of each invocation."}, {"instruction": "Develop a Python function `symbolic_execute` that takes a Python function as an argument and returns the result of its execution. The function takes no arguments, and its return value is a numeric value. The function computes the sum of two randomly generated numbers. The generated numbers are stored in the `result` variable, which is initialized to `None`. Symbolic execution is achieved by replacing the contents of `result` with the value 100."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: class method binding, argument validation, native type conversion\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Light_attachToScene(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Light *arg1 = (cc::scene::Light *) NULL ;\n    cc::scene::RenderScene *arg2 = (cc::scene::RenderScene *) NULL ;\n    \n    if(argc != 1) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 1);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Light>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Light_attachToScene,2,SWIGTYPE_p_cc__scene__RenderScene\"); \n    (arg1)->attachToScene(arg2);\n    \n    \n    return true;\n}", "docstring": "// js_dtoroverride", "function_name": "js_delete_cc_scene_Light"}, "id": 157, "seed": "static bool js_cc_scene_Light_attachToScene(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Light *arg1 = (cc::scene::Light *) NULL ;\n    cc::scene::RenderScene *arg2 = (cc::scene::RenderScene *) NULL ;\n    \n    if(argc != 1) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 1);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Light>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Light_attachToScene,2,SWIGTYPE_p_cc__scene__RenderScene\"); \n    (arg1)->attachToScene(arg2);\n    \n    \n    return true;\n}", "__index_level_0__": 43, "concepts": ["class method binding", "argument validation", "native type conversion"], "parsing_result": [{"instruction": "Create a Python class that stores three integers as `x`, `y`, and `z`. The class should also define a class method `sum_of_three`, which takes three arguments and returns their sum. If any of the arguments is not an integer, the method should reject the argument and raise an exception."}, {"instruction": "Write a Python function that takes a list of integers and an integer `n` as arguments. The function should return a new list based on the input list, where each element is multiplied by `n` and rounded to the nearest integer. If `n` is a string, the function should convert it to integer and then apply the same logic. Rounding should be done by `round()` function."}, {"instruction": "Create a wrapper class `ByteStream` that is a generator function that yields bytes from a binary file. The class should provide the following methods:\n\n`read(n)` returns the next `n` bytes from the file\n`seek(offset)` moves the file pointer to the `offset` byte from the beginning of the file\n\nYour class should be a generator, which is a function that generates values on demand. The method `read` should return bytes from the current file pointer, and the method `seek` should move the file pointer to the given offset.\n\nImplement the class so that it can be used like a file handler:\n\n```python\nwith ByteStream('some_file.txt') as stream:\n    # read 10 bytes from the file\n    stream.read(10)\n    # move the file pointer to the 3rd byte from the beginning of the file\n    stream.seek(3)\n```"}, {"instruction": "Create a Python class `FakeDate` that represents a date in a fake calendar. It has three properties `year`, `month`, and `day`. The constructor should accept only 3 arguments, and provide default values for the other two properties.\n\nWrite a class method `from_iso_date` that accepts a string, either in the format of `YYYY-MM-DD` or `DD-MM-YYYY` and returns a `FakeDate` instance. The method should validate the string input and return None when given an invalid input.\n\nHint: consider converting the string input to a `datetime` object and then to `FakeDate` using the constructor."}, {"instruction": "In the `Mode` class, implement a class method `update_mode` that takes a list of integers and returns a frequency table for the mode value of the list. Use a dictionary to store the mapping from the mode value to its frequency. In the `update_mode` method, use a dictionary comprehension to update the frequency table based on the input argument.\n\nIn addition, make sure that the input is a list of integers. When the input is not a list, raise a `ValueError` with the message \"Input must be a list of integers.\" When the input is an empty list, raise a `ValueError` with the message \"Input cannot be an empty list.\""}, {"instruction": "Write a Python class to represent a rectangular polygon. The class should have the following methods:\n\n- `__init__`: to initialize the polygon's vertices coordinates as a list of 4-tuples\n- `area`: to return the area of the polygon\n- `perimeter`: to return the perimeter of the polygon\n- `move`: to move the polygon by a specified amount\n- `scale`: to scale the polygon by a specified factor\n- `rotate`: to rotate the polygon by a specified angle\n\nThe `area`, `perimeter`, `move`, and `scale` methods should be implemented in terms of `rotate` as a helper method.\n\nThe class should be able to process its arguments to ensure the initialization yields a valid polygon. For example, a 3-sided polygon with one vertex of [0, 0] cannot be created, and if it is, the polygon should be converted to a 4-sided polygon with the missing vertex at [0, 0].\n\nThe class should have a class method `from_vertices`, which takes a list of 4 tuples and returns an instance of the class representing a polygon with the given vertices.\n\nThe class should support the following grammars:\n\n```python\npolygon = {\n    'area': float,\n    'perimeter': float,\n    'move': tuple,\n    'scale': float,\n    'rotate': tuple,\n}\n```"}, {"instruction": "Design a Python function to create a new Huffman tree from a given list of character frequencies. The function should take a list of two-item tuples `(character, frequency)` to create the tree. Use class methods to create a new tree, while creating a new branch node when required. In addition, the function should accept a `max_frequency` argument to truncate the frequency distribution at a hard limit. The function should raise an exception when the argument is not an integer."}, {"instruction": "Design a Python class `Result` that represents a lookup result. Its constructor takes two arguments: `key` and `value`. The class should also have a class method `to_string` to convert the result to a string in the following format:\n\n```\n[key] -> [value]\n```\n\nThe `key` and `value` arguments should be validated to ensure that they are of type `str` and `int` respectively. If either argument is not of the type, an exception should be raised."}, {"instruction": "Create a Python class `Array` that stores an arbitrary array of numbers of any data type. The class should provide a class method `transpose` that accepts another instance of `Array` to be transposed and returns a new `Array` in transposed form. The method should validate that the transposed `Array` has the same number of columns as the original `Array`.\n\nFor instance, given `array = [1, 2, 3, 4]`, a call to `array.transpose(array)` should return `[1, 4]`, `[2, 5]`, `[3, 6]` and `[4, 7]` as a new `Array` transposed from the original one."}, {"instruction": "Create a Python class `Date` that implements basic date operations, including a class method to parse a string to create the new date object.\n\nImplement the class method `convert_to_string` to convert a date object into a string in the format of `YYYY-MM-DD`, where `YYYY` is the year, `MM` is the month, `DD` is the day. Include error handling to handle invalid inputs such as invalid date strings, non-numeric values, and non-existing dates such as 2021-02-29."}, {"instruction": "Design a Python class `BinaryTree` that accepts a value, a left child, and a right child, and stores each element as a node. The class should define a method `get_depth` that returns the number of nodes in the tree.\n\nThe class should also define a class method `create_from_preorder` that accepts a preorder traversal sequence as an argument and returns the root node of the tree.\n\nFor example, given a preorder traversal `items = [1, 2, 4, 5, 3, 6, 7]`, the method should return the root node of the tree:\n\n```\n    1\n  /   \\\n2      6\n  \\    /\n   4  5\n      /\n    3   7\n```\n\nUse `isinstance` to ensure that the input is a list of valid nodes."}, {"instruction": "Write a Python class `Numeric` to represent a numerical value as an integer or floating point number. The class should have the following constructor:\n\n```Python\ndef __init__(self, value: Union[int, float]):\n```\n\nand the following methods:\n\n```Python\ndef round(self, decimals: int) -> 'Numeric':\n    \"\"\"Round the number to given number of decimals.\"\"\"\n\ndef get_value(self) -> int:\n    \"\"\"Return the value as an integer.\"\"\"\n\ndef get_float_value(self) -> float:\n    \"\"\"Return the value as a floating point number.\"\"\"\n```\n\nThe `round` method should return a new instance of the class with the rounded value. The `get_value` and `get_float_value` methods should return the value as an integer and floating point number, respectively.\n\nDefine the class as a child class of `int` or `float` depending on the type of `value`. Implement the above methods using class methods and native type conversion."}, {"instruction": "Design and implement a Python class `Fraction` that represents rational numbers. The class should be initialized using the form `numerator/denominator` and have built-in methods to perform the basic arithmetic operations on two fractions, addition, subtraction, multiplication, and division. The class should validate the input for `numerator` and `denominator` to make sure that the result of `denominator` is not zero."}, {"instruction": "Here is a simple Python class `Converter` that converts numbers from base 10 to base 2 and back (decimal to binary and vice versa).\n\n```python\nclass Converter:\n    def __init__(self, base=10, number=0):\n        self.base = base\n        self.number = number\n\n    def to_base_2(self):\n        return self.convert(base=2)\n\n    def to_base_10(self):\n        return self.convert(base=10)\n\n    def convert(self, base):\n        # Convert number to base 2 if base=2, otherwise convert base 10 to base 2\n        try:\n            return int(str(self.number), base)\n        except ValueError:\n            raise ValueError(\"Invalid input number or base\")\n```\n\nWrite a Python class `Converter` that can be initialized with `base` and `number` attributes. The class should provide a class method `to_base_2` that converts the number to base 2 and another class method `to_base_10` that converts the number to base 10. The class method `convert` should accept a single argument `base` and return the number in the specified base. All methods should raise a `ValueError` if the input number or base is invalid.\n\nThe class should be initialized with `base=10` and `number=0` by default.\n\nThe `to_base_2` and `to_base_10` methods should call the `convert` method with the appropriate base to convert the number to base 2 or base 10.\n\nThe `convert` method should accept a single argument `base` and return the number in the specified base.\n\nThe `convert` method should first check if the `base` argument is valid before converting the number. If the `base` argument is invalid, the `convert` method should raise a `ValueError` exception.\n\nThe `convert` method should convert the number to base 2 if `base=2`, and to base 10 if `base=10`. The conversion should be done using the `str` and `int` built-in functions. The `int` function takes two arguments: the string representation of the number to be converted and the base of the number. The `str` function takes an integer and returns its string representation in base `base`.\n\nIf the `base` argument is invalid, the `convert` method should raise a `ValueError` exception."}, {"instruction": "Create a Python class to represent a customer. It should have a `first_name` attribute (string), a `last_name` attribute (string), and a `phone_number` attribute (string). A customer should be able to format their contact information as a string. Create methods `get_full_name` and `get_phone_number` to return the formatted name or phone number, respectively.\n\nDesign a Python class method `get_formatted_info` that takes a list of customers, and returns a dictionary that contains the formatted name and phone number of each customer. Make sure to validate the input for all parameters:\n- customers should be a list\n- each customer should be an instance of `Customer`\n- each customer should have a `first_name`, `last_name`, and `phone_number` attribute"}, {"instruction": "Define a Python class `Point` that has two instance attributes `x` and `y`. It should also have a class method `dist` that computes the distance between two points. The class method should take `self` as an input. Utilize the class method to define the `__init__` method of the class.\n\nThe class method should be able to accept two different types of inputs:\n\n- the input is a `Point` instance and it should return the distance between the input Point and the original Point\n- the input is a tuple of 2 elements and it should return the distance between the Point created from the tuple and the original Point\n- the input is a list of 2 elements and it should return the distance between the Point created from the list and the original Point\n- the input is a single integer tuple and it should return the distance between the Point created from the tuple and the original Point\n- the input is a single integer list and it should return the distance between the Point created from the list and the original Point"}, {"instruction": "Write a Python function to convert a text with words separated by spaces into a Python list of words where each word starts with capital letter and the remaining characters are in lowercase.\n\nFor example, given `\"My name is \"`, the function should return `['My', 'name', 'is', 'john', 'doe']`."}, {"instruction": "Create a Python function that takes a string and an integer representing a base, and returns the string in base 10. The function should support the native types `int`, `float`, and `str` and automatically convert the input string into the appropriate type before computing its base 10 value."}, {"instruction": "Write a Python class `Point` that maintains coordinates for 3D space, and implements the following methods:\n\n#### `distance_from_origin`, a class method\n- takes no arguments\n- returns the distance from the origin to the point\n- does not call the constructor method to instantiate a point\n- does not have a docstring\n\n#### `add`, an instance method\n- takes a Point as an argument\n- returns a new Point instance that represents the sum of the original point and the argument point\n- does not have a docstring\n\n#### `subtract`, an instance method\n- takes a Point as an argument\n- returns a new Point instance that represents the difference of the original point and the argument point\n- does not have a docstring\n\n#### `to_tuple`, an instance method\n- takes no arguments\n- returns a tuple of the point's coordinates\n- does not call the constructor method to instantiate a point\n- does not have a docstring\n\n#### `__add__`, a magic method\n- takes a Point as an argument\n- returns a new Point instance that represents the sum of the original point and the argument point\n- does not have a docstring\n\n#### `__sub__`, a magic method\n- takes a Point as an argument\n- returns a new Point instance that represents the difference of the original point and the argument point\n- does not have a docstring\n\n#### `__eq__`, a magic method\n- takes a Point as an argument\n- returns True if the original point is the same as the argument point, and False otherwise\n- does not have a docstring\n\n#### `__str__`, a magic method\n- takes no arguments\n- returns a string representation in the format of `x, y, z` for the original point\n- does not have a docstring\n\n#### `__repr__`, a magic method\n- takes no arguments\n- returns a string representation in the format of `Point(x, y, z)` for the original point\n- does not have a docstring\n\n#### `__init__`, the constructor method\n- does not have a docstring\n- does not take any arguments\n\n#### `__call__`, the constructor method\n- does not have a docstring\n- takes two arguments: the x and y coordinates of the point\n- does not call the constructor method to instantiate a point\n\n#### `__len__`, the constructor method\n- takes no arguments\n- returns the number of coordinates (x, y, z)\n- does not call the constructor method to instantiate a point\n\n#### `__getitem__`, the constructor method, returns an element\n- takes a single argument that specifies the index of the coordinate\n- returns the x, y, or z coordinates of the point, depending on the index\n- does not call the constructor method to instantiate a point\n\n#### `__setitem__`, the constructor method, sets an element\n- takes two arguments: the index of the coordinate to be set and the new value\n- sets the x, y, or z coordinates of the point, depending on the index\n- does not call the constructor method to instantiate a point"}, {"instruction": "Design a Python class called `Bits`, which has two class attributes: `bit_width` and `num_bits`. The `bit_width` is the bit value or length of a single bit, and the `num_bits` is the number of bits that will be stored in a single `Bits` object instance.\n\nThe class should have two class methods to perform bitwise operations: `and_bits`, which takes two `Bits` objects as arguments and returns an `int` representing the result of `bitwise and` of the two `Bits` objects with the same `bit_width` and `num_bits`. For instance, `Bits.num_bits = 2` and `Bits.bit_width = 1`, and the arguments are `Bits(0b11)`, `Bits(0b10)` to obtain the result `10`.\n\nInclude error handling to ensure that the `bit_width` and `num_bits` attributes are integers, and that the two `Bits` objects have the same `bit_width` and `num_bits`. Also ensure that the `and_bits` method returns an integer."}, {"instruction": "Design a Python class `Tree` that represents a binary tree. The class should contain a `root` property to store the root node, and `insert` and `contains` methods. The `insert` method should add a new node to the tree with a given value, and the `contains` method should return `True` if a given value is in the tree, `False` otherwise. The `insert` and `contains` methods should maintain the binary tree's invariants."}, {"instruction": "Write a Python function that takes a list of arguments as its input and returns the average of the input if the arguments are all numbers, and the concatenation of the strings in the list if any arguments are strings. If the input list is empty, the function should return None. \n\nThe function should also accept any number of arguments as input, although it is not required to accept a variable number of arguments. It should also support binding the input arguments with a class method using `self`.\n\nDesign a function that should be able to handle any input and return the average value for number-typed arguments or concatenate the strings for string-typed arguments, and return None if the input is empty."}, {"instruction": "Create a Python class that represents a `Node` in a binary search tree. Create a class method to find the node with the minimum value in the tree. The class should accept an argument `value` for initialization of the node, and a class method `find_min` that returns the minimum value in the tree."}, {"instruction": "Write a Python function `test_equal` that takes two arguments and returns `True` if the two arguments are equal or `False` if not.\n\nImplement the function as a class method from `object`, where the class method `test_equal` takes two arguments `a` and `b`. The method should accept any type of arguments, for example, `test_equal(1, 2)` should return `True` as `1` and `2` are both integers. The method should also raise an error if the input types are not compatible, for example, `test_equal(1, \"two\")` should raise an `TypeError` exception."}, {"instruction": "Implement a Python function that takes two arguments: `x`, a number to be squared, and `n`, an integer value that specifies how many times to square the number `x`. The function should return the sum of all `x^n` values from 1 to `n` (inclusive).\n\nThe function should raise an error if `x` or `n` are not numbers or `n` is not an integer.\n\nThe function should also return an error if `n` is negative."}, {"instruction": "Implement a Python class `Calculator` that supports addition, subtraction, multiplication, and division. The mathematical operators are implemented as class methods. Overload the `int.__add__()` / `int.__sub__()` / `int.__mul__()` / `int.__truediv__()` Python operations to call the corresponding class methods. Do not overwrite any method of the `int` class.\n\nFor example, given the `Calculator` class:\n`class Calculator(int):`\n`def __init__(self, value):`\n`self.value = value`\n`def add(self, other):`\n`return Calculator(self.value + other)`\n`def sub(self, other):`\n`return Calculator(self.value - other)`\n`def mul(self, other):`\n`return Calculator(self.value * other)`\n`def div(self, other):`\n`return Calculator(self.value / other)`\n\nThe following lines will print `5`: `Calculator(1) + Calculator(4)`."}, {"instruction": "Create a Python class to maintain a list of integers, where the elements are sorted in ascending order. Implement the following methods:\n- `append(elem)` appends the given `elem` to the end of the list, ensuring the list remains sorted\n- `pop(index)` removes the element at the given `index` from the list, ensuring the list remains sorted\n- `insert(index, elem)` inserts the given `elem` at the given `index` in the list, maintaining the list's sorted order\n\nDesign the class to allow for an initial list to be provided upon instantiation, and to ensure that all methods receive integer indices. Do not use any native Python list methods."}, {"instruction": "Implement a Python class that represents a rectangle, with attributes `length` and `width`, and methods `area` and `perimeter`. The `area` method should return the square of area (length * width) and the `perimeter` method should return the perimeter (2 * (length + width)).\n\nThe class should be initialized with `length` and `width` arguments, but should maintain its own internal state for the length and width, including validation of both values to ensure they are positive values. In other words, all lengths and widths are stored in internal state variables, which are only allowed to be positive.\n\nWrite assertions to ensure that the internal state of the class is properly maintained, and also to assert that the class can only be initialized with positive arguments.\n\nWrite an additional method called `square` that takes no arguments and returns its own instance, with its length and width both set to `1`.\n\nCreate three instances of the class that have positive length and width, and test your class with various inputs."}, {"instruction": "Create a Python class `Complex` to represent complex numbers. It should have an attribute `value` that is initialized to `(0, 0)` and two methods:\n\n- `add`: which takes another instance of `Complex` as an argument and returns a new instance of `Complex`, where the attribute value is the sum of the two instances.\n- `multiply`: which takes another instance of `Complex` as an argument and returns a new instance of `Complex`, where the attribute value is the product of the two instances.\n\nBoth methods should perform basic validation on the input argument and raise an error if the input is not an instance of `Complex`."}, {"instruction": "Create a Python class `Fraction` that represents a fractional number. It should have two attribute values, `numerator` and `denominator`. It should be able to perform basic arithmetic operations with two fractions. Make sure to validate for valid input."}, {"instruction": "Design a Python function to implement a simple calculator with basic arithmetic operations. Only addition (+) and multiplication (*) are supported. The function should accept three arguments: `a`, `b`, and `operation`. `a` and `b` should be integers. `operation` should be one of the following strings: \"+\" or \"*\" to denote addition and multiplication, respectively. Your function should return the result of the operation. Write assertions to ensure that the input is valid. Handle `operation` as a class method bound to a Calculator class, which will store the previous operation result as an instance attribute."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dynamic programming with memoization, recursion with base cases, minimum value computation\n\n### Task", "fingerprint": null, "content": {"code": "int memorize(int begin)\n{\n\tif (begin == N.size())return 0;//\uae30\uc800 \uc0ac\ub840\uc758 \ub05d\uc5d0 \ub3c4\ub2ec\ud588\uc744 \uacbd\uc6b0\n\tint& ret = cache[begin];\n\tif (ret != -1) return ret;//\uc774\ubbf8 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4\uba74 \uadf8 \uac12\uc744 \ub9ac\ud134\ud55c\ub2e4. \n\tret = INF;\n\tfor (int L = 3; L <= 5; ++L)//3~5\uc790\ub9ac\ub85c \ub098\ub208\ub2e4.\n\t\tif (begin + L <= N.size())\n\t\t{\n\t\t\tret = min(ret, memorize(begin + L) + classify(begin, begin + L - 1));//\ub098\ub208 \uac12\uc911\uc5d0\uc11c \uc81c\uc77c \uc791\uc740 \ucd5c\uc18c \ub09c\uc774\ub3c4\ub97c \ub9ac\ud134\ud55c\ub2e4. \n\t\t}\n\treturn ret;\n}", "docstring": "// \uadf8\uc678\uc5d0\ub294 \ub09c\uc774\ub3c4 10", "function_name": "classify"}, "id": 161, "seed": "int memorize(int begin)\n{\n\tif (begin == N.size())return 0;//\uae30\uc800 \uc0ac\ub840\uc758 \ub05d\uc5d0 \ub3c4\ub2ec\ud588\uc744 \uacbd\uc6b0\n\tint& ret = cache[begin];\n\tif (ret != -1) return ret;//\uc774\ubbf8 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4\uba74 \uadf8 \uac12\uc744 \ub9ac\ud134\ud55c\ub2e4. \n\tret = INF;\n\tfor (int L = 3; L <= 5; ++L)//3~5\uc790\ub9ac\ub85c \ub098\ub208\ub2e4.\n\t\tif (begin + L <= N.size())\n\t\t{\n\t\t\tret = min(ret, memorize(begin + L) + classify(begin, begin + L - 1));//\ub098\ub208 \uac12\uc911\uc5d0\uc11c \uc81c\uc77c \uc791\uc740 \ucd5c\uc18c \ub09c\uc774\ub3c4\ub97c \ub9ac\ud134\ud55c\ub2e4. \n\t\t}\n\treturn ret;\n}", "__index_level_0__": 44, "concepts": ["dynamic programming with memoization", "recursion with base cases", "minimum value computation"], "parsing_result": [{"instruction": "Write a Python function that computes the minimum number of coins required to provide change for a given amount of money. The function should return the minimum number of coins required to cover the amount as an integer. You may assume that the denominations of the coins are all non-negative integers, and that the input amount is a positive integer."}, {"instruction": "Create a Python function `min_partition_diff` that accepts two lists of non-negative integers `a` and `b` and calculates the minimum difference between the sums of the partitions. There is no limit to the number of partitions. For example, given `a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]` and `b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`, the function should return `0`, since the difference between the sums of the partitions is `0`."}, {"instruction": "Write a Python function `min_coins_to_make_change` that takes two arguments: `target_value`, an integer representing the total value of the change, and `coin_values`, a list of distinct integers representing the possible denominations of coins to be used in the change. The function should return the minimum number of coins needed to make the `target_value` using the `coin_values`."}, {"instruction": "Implement a Python function `min_convex_hull_area` to find the minimum area of a convex hull of a set of non-collinear points. The function takes a list of 2-dimensional points and returns the minimum area. The given points are guaranteed to be non-collinear."}, {"instruction": "Create a Python function to find the minimum value in a 2D list `data` using dynamic programming and memoization. The function should accept a 2D list and return a single value, representing the minimum value in the list. The function should use dynamic programming to store the minimum values for subproblems and memoize those values to avoid redundant calculations. This approach ensures the function is efficient and avoids the need for a recursive solution."}, {"instruction": "Write a Python function `sum_min` that computes the minimum sum of elements in a list of positive integers. You should use a dynamic programming solution that records and reuses previously computed results. The function should return the minimum sum as an integer. The complexity of this solution should be `O(n)` where `n` is the number of list elements."}, {"instruction": "Write a Python function `find_min_path_length` that accepts a square, rectangular, or hexagonal grid with a target cell, and returns the minimum number of steps required to reach the target. The grid can be represented as a two-dimensional array of numbers, where the value of each cell represents the cost of moving to the adjacent cell from the current cell. The cost of moving to an adjacent cell is the sum of the values of the current and adjacent cells. In other words, the cost is the sum of the values of the current cell and the cell to the right, down, or down-right of the current cell."}, {"instruction": "Develop a Python function `min_sum_subset` that takes a list of positive integers and returns the minimum sum of subsets of the list. The list should be partitioned into two subsets such that the sum of the numbers of each subset is equal. The function should return the minimum of the two sums. For example, given `[1, 2, 3, 4, 5, 6]` the function should return `12`."}, {"instruction": "Create a Python function `longest_sum_subarray` that computes the length of the longest sum subarray within a list of integers. The sum of an empty subarray is 0. The function should return the length of the longest subarray. The function should be recursive and memoize the results of subproblems for efficiency."}, {"instruction": "Construct a Python function called `longest_increasing_subsequence` that takes a list `arr` as argument, and returns the length of the longest increasing subsequence in the list. For example, given the input `arr = [1, 2, 3, 4, 5]`, the longest increasing subsequence is `[1, 2, 3, 4, 5]`, with length 5."}, {"instruction": "Use Python to implement a function `fib` that computes the `n`th Fibonacci number without using any recursion, the built-in function `math.factorial`, or any other functions."}, {"instruction": "Write a Python function `min_subset_sum` that takes in an integer array `nums` and an integer `target` and returns the minimum sum of a subset of elements in `nums` that adds up to `target`. The solution should use dynamic programming with memoization and recursion."}, {"instruction": "Write a Python function `fibonacci` that accepts an integer `n` and returns the `n`-th Fibonacci number using dynamic programming with memoization."}, {"instruction": "Create a Python function to calculate the minimum number of coins required to achieve a desired change of `amount` from a list of available coins. You try to use a given coin only once, and you can only use a coin if it is less than or equal to the desired amount. The function should return `-1` if the desired amount cannot be achieved using the available coins."}, {"instruction": "Create a Python function `min_cost_path` that takes in a two-dimensional list of integer costs, and returns the minimum cost to reach the bottom-right corner from the top-left corner. The cost to move from cell `(i, j)` to cell `(i+1, j+1)` is obtained by summing the cost of the new cell and the cost from the previous cell. The bottom-right corner of the list should have a cost of 0. Each cell in the list should have a non-negative cost."}, {"instruction": "Develop a Python function `fibonacci` that computes the N-th Fibonacci number using dynamic programming. Write the function so that it computes the N-th number using memoization."}, {"instruction": "Develop a Python function `min_coins` that takes an integer `target_value` as input and returns the minimum number of coins needed to make up that amount. The function should use a dynamic programming approach to minimize the number of coins used, and it should use memoization to avoid recomputing the same subproblem multiple times."}, {"instruction": "Develop a Python function `compute_min_coins` that computes the minimum number of coins needed to make change for a given amount to be made using the coins `coins` present in an `int` list. Input validation should be included to ensure that the input amount is non-negative and the list of coins contains at least one element."}, {"instruction": "Develop a Python function `mincost_path` that takes two inputs: an N x N matrix `costs` of integers, and a source tuple `start` and a destination tuple `destination` that specify the starting and ending points of the path, respectively. The `costs` matrix represents the cost of moving from one cell to the adjacent cells in the following way: `costs[x][y]` is the cost of moving from cell (x, y) to cell (x+1, y) and from cell (x, y) to cell (x, y+1). The function should return the minimum cost of moving from the start to the destination as an integer. For example, the path `((0, 0), (0, 1), (1, 1), (1, 2), (2, 2))` should have a minimum cost of `6`."}, {"instruction": "Given an array of integers `nums`, develop a Python function `min_subarray_len` that finds the minimum length of a contiguous subarray of which the sum is greater than or equal to `target`. If there is no such subarray, return `-1`."}, {"instruction": "Implement a Python function `fibonacci_recursive` that computes the nth Fibonacci number (1, 1, 2, 3, 5, 8, 13, ...) using the recursive implementation. The function should accept an integer `n` to compute and return the corresponding value."}, {"instruction": "Create a Python function `get_minimum_value` that takes an integer `n` and returns the smallest integer in the range [0, n] that contains the digit 2. For example, `get_minimum_value(10)` should return `2`, while `get_minimum_value(100)` should return `20`, since `20` is the smallest number in the range [0, 100] that contains the digit 2."}, {"instruction": "Write a Python function `min_sum_of_sublists` that takes a list of non-negative integers as input and returns the minimum possible sum of sublists that can be formed from the input list. For example:\n```\nmin_sum_of_sublists([5, 1, 4, 3, 2]) # returns 8 because [5, 1, 4] and [3, 2] can be combined to sum 8\nmin_sum_of_sublists([3, 4, 5, 1, 2]) # returns 10 because [3, 4, 5] and [1, 2] can be combined to sum 10\nmin_sum_of_sublists([1, 2, 3]) # returns 3 because the only sublist is itself\n```"}, {"instruction": "Implement a Python function `max_subarray_sum` that takes an input list of non-negative integers and outputs the maximum sum of consecutive subarray elements. You should use dynamic programming with memoization to compute the subarray sums and return the maximum sum."}, {"instruction": "Create a Python function to compute the sum of the first n terms of the Fibonacci sequence. The function should accept an integer `n` as an input and return the sum of the first `n` terms as an integer."}, {"instruction": "Develop a Python function `min_delete_distance` that takes two strings `s1` and `s2` and computes the minimum number of character deletions needed to transform `s1` into `s2`. You must use dynamic programming and memoization techniques to achieve an efficient solution."}, {"instruction": "Create a Python function `min_sum_product` that accepts a list of integer numbers and returns the minimum sum of products of two numbers from the list. You should determine the minimum sum by using dynamic programming with memoization to avoid repeated calculations. The function should use recursion with base cases to halt the recursion when the input list is empty or has only one element."}, {"instruction": "Create a Python function `minimum_path_sum` that accepts a two-dimensional array of integers as input and returns the minimum path sum from the top left corner to the bottom right corner. The path may only move either down or right at each step, and the minimum path sum is the sum of the path values that are traversed.\n\nAn example input array with a minimum path sum of `12` is shown below:\n\n```python\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n```"}, {"instruction": "Develop a Python function `minimum_cost_climbing_stairs` that takes an input list of positive integers representing the cost of climbing one step up or down each time. The cost of climbing up or down is the value of the current step. The function should return the minimum cost of climbing to the top of the staircase given the cost list. Recursion is not allowed in this function."}, {"instruction": "Write a Python function that calculates the minimum value of a list of numbers. You should use dynamic programming with memoization to avoid recomputing values that have already been calculated. The function should use recursion with base cases to avoid infinite recursions."}, {"instruction": "Implement a Python function `fib` that computes the `n`th Fibonacci number recursively. The function should use dynamic programming with memoization to avoid computing the same values over and over again."}, {"instruction": "Develop a Python function `calculate_min_cost_path` that accepts a two-dimensional input matrix `grid` with m rows and n columns, representing a cost grid. Each cell in the matrix can be accessed via two-dimensional indices `(i, j)`, where `0 <= i < m` and `0 <= j < n`. The value of a cell represents the cost of visiting that cell. Each cell can be referenced based on its 4-directional neighbors (`(i-1, j)`, `(i+1, j)`, `(i, j-1)`, and `(i, j+1)`), and has a value of 0 if the neighbors are out of bounds. The function should return the minimum cost to visit all the cells in the grid using a dynamic programming approach."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 5\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: calling native code from JS, function argument type mapping, boolean return value mapping\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_SpotLight_shadowEnabled_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SpotLight *arg1 = (cc::scene::SpotLight *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::SpotLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"SpotLight_shadowEnabled_set,2,SWIGTYPE_bool\"); \n    cc_scene_SpotLight_shadowEnabled_set(arg1,arg2);\n    \n    \n    return true;\n}", "docstring": "// %typemap(out) SWIGTYPE&", "function_name": "js_cc_scene_SpotLight_frustum_get"}, "id": 165, "seed": "static bool js_cc_scene_SpotLight_shadowEnabled_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SpotLight *arg1 = (cc::scene::SpotLight *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::SpotLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"SpotLight_shadowEnabled_set,2,SWIGTYPE_bool\"); \n    cc_scene_SpotLight_shadowEnabled_set(arg1,arg2);\n    \n    \n    return true;\n}", "__index_level_0__": 45, "concepts": ["calling native code from JS", "function argument type mapping", "boolean return value mapping"], "parsing_result": [{"instruction": "Create a Python program to calculate the sum of two JavaScript numbers (integers or floating-point) in JavaScript. The program should handle erroneous inputs gracefully, such as an invalid input from the user or any other exception that might occur. Additionally, implement the `__str__` method to return a formatted string with the sum of the two numbers."}, {"instruction": "Construct a JavaScript function `reverse(str)` that reverses a string. String input and output are in UTF-8 encoded format."}, {"instruction": "Given the following JavaScript function `convertTemp(temp, unit)`, design a Python function `convert_temp(temp, unit)` that implements the same logic. The function `convertTemp` takes a temperature value and a unit ('C' or 'F'), and returns the converted temperature value with a different unit. For example, given the following JavaScript code:\n\n```python\ndef convert_temp(temp, unit):\n    return convertTemp(temp, unit)\n```\n\nThe function `convertTemp` should return the converted temperature with the same unit ('C' or 'F') as the `unit` argument."}, {"instruction": "We are making a JavaScript implementation of a new web-based 2D game. The game is based on a 2D grid with rows and columns. The grid is populated with various objects. Every object has a unique ID.\n\nThe objects are represented as a JavaScript object with the following properties:\n- `id`: the unique object identifier\n- `type`: the type of object (e.g. `player`, `obstacle`, `enemy`)\n- `size`: the dimensions of the object (e.g. `width` and `height`)\n- `position`: the position of the object (e.g. `x` and `y`)\n\nIn order to keep track of the objects in the grid, we have created a JavaScript array to store the objects in the grid. The array stores a single object for each cell of the grid.\n\nThe objects are arranged in a linear fashion, where the first object in the array corresponds to the top-left cell of the grid, and the last object in the array corresponds to the bottom-right cell of the grid.\n\nThe game is implemented in a JavaScript function `processGrid(grid)` that takes as input a grid as described above.\n\nThe function `processGrid` should process the input grid and return an array of objects representing the processed grid. The processed grid should be returned as a single array of objects.\n\nIn order to process the input grid, the function should:\n- Convert the each object in the input grid to a string using the following format: `{id}|{type}|{size.width}|{size.height}|{position.x}|{position.y}`\n- Assemble the objects in the grid by creating a string containing all the object strings in the grid, separated by a semicolon (\";\")\n- Call the API `ProcessGrid` on the server with the input grid string.\n- Process the server's response to parse the output grid and convert it into an array of objects.\n- Return the processed output grid.\n\nThe following is an example of the input grid:\n```javascript\ngrid = [\n  {\n    id: 1,\n    type: \"player\",\n    size: { width: 10, height: 20 },\n    position: { x: 0, y: 0 },\n  },\n  {\n    id: 2,\n    type: \"obstacle\",\n    size: { width: 10, height: 20 },\n    position: { x: 0, y: 0 },\n  },\n  {\n    id: 3,\n    type: \"obstacle\",\n    size: { width: 10, height: 20 },\n    position: { x: 0, y: 0 },\n  },\n];\n```\n\nThe following is an example of the expected output grid:\n```javascript\n[\n  {\n    id: 1,\n    type: \"enemy\",\n    size: { width: 10, height: 20 },\n    position: { x: 0, y: 0 },\n  },\n  {\n    id: 2,\n    type: \"obstacle\",\n    size: { width: 10, height: 20 },\n    position: { x: 0, y: 0 },\n  },\n];\n```\n\nThe array of objects in the output grid should be returned in the same order as the input grid. The function should return the processed grid.\n\nThe function `processGrid` should be implemented in JavaScript."}, {"instruction": "Create a JavaScript program that counts the number of times each letter appears in a string of text. The program should run on the browser and return a dictionary containing the count of each letter."}, {"instruction": "Create a Python program that calls a JS function that returns a number. The program should modify the return value of the JS function to return its value as a string, with a leading dollar sign, and a trailing pound sign. For example, given the following JS code:\n\n```javascript\nfunction js_function() {\n  return 1.23456789;\n}\n```\n\nThe program should call `js_function` and return the following string: `\"$1.23456789#\"`"}, {"instruction": "Create a JavaScript function `get_message(id, is_checked)` that returns a string message based on the specified `id` and `is_checked` values.\n\nThe function should return the string \"checked\" if `is_checked` is `true`, \"unchecked\" if `is_checked` is `false`, and \"default\" if the `id` is not present. The id should be mapped to the following message values:\n- 'yes' should return \"checked\"\n- 'no' should return \"unchecked\"\n- 'maybe' should return \"default\"\n- any other id should return \"default\""}, {"instruction": "Create a program that calls a native function named `is_prime` in the `libprime` library, which takes in a single integer argument and returns a boolean value. The program should be written in Python, create a JS wrapper for the native library, and call the new JS function to check whether a given integer is prime or not."}, {"instruction": "Create a JavaScript program that implements a Python function to compute the greatest common divisor of two numbers. It should check for input validity and return an error value if the input is not a number.\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int a, b, c, d;\n\n    cout << \"Input the first number: \";\n    cin >> a;\n\n    cout << \"Input the second number: \";\n    cin >> b;\n\n    d = a;\n    c = b;\n\n    while ((a % b) != 0) {\n        d = a % b;\n        a = b;\n        b = d;\n    }\n\n    cout << \"The greatest common divisor of \" << c << \" and \" << d << \" is \" << b << \".\";\n\n    return 0;\n}#include <iostream>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    int a, b, c, d;\r\n\r\n    cout << \"Input the first number: \";\r\n    cin >> a;\r\n\r\n    cout << \"Input the second number: \";\r\n    cin >> b;\r\n\r\n    d = a;\r\n    c = b;\r\n\r\n    vector<int> list;\r\n\r\n    while ((a % b) != 0) {\r\n        d = a % b;\r\n        a = b;\r\n        b = d;\r\n        list.push_back(b);\r\n    }\r\n\r\n    cout << \"The greatest common divisor of \" << c << \" and \" << d << \" is \" << b << \".\\n\";\r\n    cout << \"All numbers between \" << c << \" and \" << d << \" are:\\n\";\r\n    for (int i = 0; i < list.size(); i++) {\r\n        cout << list[i] << \"\\n\";\r\n    }\r\n\r\n    return 0;\r\n}#include <iostream>\r\n#include <fstream>\r\n#include <string>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    string path;\r\n\r\n    ifstream file;\r\n    file.open(\"file.txt\");\r\n\r\n    if (!file.is_open()) {\r\n        cout << \"An error occurred while reading the file.\\n\";\r\n        return 0;\r\n    }\r\n\r\n    string content;\r\n    file >> content;\r\n\r\n    cout << \"The file contains the following text:\\n\" << content << \"\\n\";\r\n\r\n    path = content;\r\n\r\n    return 0;\r\n}"}, {"instruction": "Use JavaScript to implement the following Python functions:\n\n```python\ndef send_email(\n    recipients: str,\n    subject: str,\n    body: str,\n    cc: str = None,\n    bcc: str = None,\n    attachments: str = None,\n    priority: str = \"normal\",\n    headers: str = None,\n) -> bool:\n    \"\"\"Send an email.\n\n    Args:\n        recipients: a comma-separated string of email addresses.\n        subject: the subject of the email.\n        body: the body of the email.\n        cc: an optional comma-separated string of email addresses for carbon-copy.\n        bcc: an optional comma-separated string of email addresses for blind carbon-copy.\n        attachments: an optional comma-separated string of attachment filenames.\n        priority: an optional priority level, one of \"normal\", \"low\", or \"high\".\n        headers: an optional comma-separated string of additional header lines.\n\n    Returns:\n        True if the email was sent successfully, False otherwise.\n    \"\"\"\n    raise NotImplementedError()\n```"}, {"instruction": "Develop a Python program that implements a function that receives a hex string and returns its decimal value. The program should take a Python function `from_hex(str)` as input, which accepts a string of hexadecimal digits and returns its integer value. The function should be implemented as a JS function that calls the original Python function, and the JS function should return the result of the Python function, mapped to the appropriate return type (the JS `eval` function should be avoided)."}, {"instruction": "Create a Python function to implement a simple calculator. The function should support the four basic arithmetic operations (+, -, *, /) and add the ability to raise an expression to a power.\n\nThe function should be able to handle both integer and floating-point numbers. It should also support returning a boolean value, if and only if the operation is valid."}, {"instruction": "The task is to implement a Python function for converting a JSON-like object to a JS string, such that it can be evaluated as valid JS code. The function should support converting data of any type, including nested data structures and lists. The function should map the following data types to their JS equivalents, or raise an appropriate exception if the type is not supported:\n\n- list: `[...]`\n- dict: `{...}`\n- int / float: `123`\n- str: `'Hello, World!'`\n- bool: `true`\n\nThe function should handle converting both JSON-like objects and JS objects as well as their nested structures, and should consider the following cases:\n- `None` should be converted to `null`\n- empty lists should be converted to empty `[]`\n- empty dicts should be converted to empty `{}`\n- nested data structures should be converted recursively so that each object is converted to its JS equivalent\n- string-typed keys should be converted to quoted strings\n- function calls should be converted to JS function calls, along with the arguments\n\nThe function should raise an appropriate exception when encountering invalid data, such as a non-JS object."}, {"instruction": "Create a Node.js program to add two numbers in JavaScript. To avoid a dependency on external libraries, the program should use only native JS functions, data types, and operations."}, {"instruction": "This task is to implement a function in JS that calls Python functions through the `child_process` module:\n\n```python\ndef add_numbers(x, y):\n    return x + y\n```"}, {"instruction": "Create a JavaScript function that implements the same functionality as the Python function in Example 8, using the JavaScript `Math` object. The function should accept a number of bytes as input and return a string in the same format as the Python function."}, {"instruction": "Create a program in Python that reads a text file and replaces all the occurrences of the word 'Python' with 'JavaScript'. The program should be written in a way that the text file can be updated without restarting the program, and the replacement should happen without any user intervention. Make sure the program runs on Linux and Windows."}, {"instruction": "Create a Python program to compute the sum of squares of the first `n` integers. The program should take `n` as a command-line argument and print the result."}, {"instruction": "Create a program that counts the number of times the \"Hello, World!\" string is printed, using Python as the host language. The program should run in Node.js and use the following arguments from Node.js CLI:\n```\n$ node main.js [language] [count]\n```\nThe program should print the number of time \"Hello, World!\" is printed to the console.\n\nFor example, `node main.js py 3` should print `3`."}, {"instruction": "Write a JavaScript function to implement the following Python function:\n\n```python\ndef is_even(n):\n    return n % 2 == 0\n```\n\nThe function should return a boolean value indicating whether the input integer is an even number."}, {"instruction": "Create a Python function to reverse a list of integers. The function should be implemented in the form of a JavaScript function wrapping a native Python function that can be called from JS. The function should be named `reverse_list`, and it should take an integer list as an argument. The list should be modified in place and the function should return `undefined`."}, {"instruction": "Implement a Python function `is_prime(n)` that returns `True` if the integer `n` is prime, `False` otherwise. The function should be implemented in JavaScript using `napi.cc`."}, {"instruction": "Write a Python program that calls a native JS function using Node.js. The function should return a boolean value, and the program should be structured in such a way that it can be easily converted to a JS file."}, {"instruction": "Design a JavaScript function `get_min_max(numbers)` that takes a list of numbers in the form of an array and returns an array of two numbers in the form of `[min, max]`. The function should be able to process large input arrays efficiently, and it should return empty arrays for empty arrays."}, {"instruction": "Create a JavaScript program that taps into the native browser's WebSocket implementation to establish a connection with the WebSocket server located at ws://echo.websocket.org and sends a message to the server. The program should support two command line arguments: the first is the message to send, and the second is the name of the WebSocket server. The program should output a message to confirm that the connection is valid and the message is successfully sent to the WebSocket server."}, {"instruction": "Write a Python program to simulate a browser with JavaScript. The browser should provide methods to navigate to a new page, to load a new URL in the existing page, and to query the current URL. Additionally, the browser should support a simple JavaScript API to run code in the context of the current page.\n\nTo simulate the browser, create a Python class named `Browser` with the following methods:\n\n```python\ndef navigate(self, url: str):\n    # Navigates to a new page.\n    # url: the URL of the new page\n\ndef load(self, url: str):\n    # Loads a new URL in the existing page.\n    # url: the URL of the new page\n\ndef current_url(self):\n    # Returns the current URL.\n    # Returns: the current URL of the page\n\ndef eval(self, code: str):\n    # Runs JavaScript code in the context of the current page.\n    # code: the JavaScript code to execute\n    # Returns: the value of the JavaScript expression\n    #          if there is no return value in the code\n    #          or None if the return value is undefined\n    #          or a boolean false if the return value is false\n```\n\nThe class `Browser` should be implemented such that it supports the following functionalities:\n- To navigate to a new page, the method `navigate` should update the internal state of the browser to reflect the current page and the new page. For example, after navigating to page \"A\" with `navigate(\"A\")`, the internal state of the browser should be updated to reflect the current page as \"A\" and the new page as \"A\".\n- When loading a new URL in the existing page, the method `load` should execute the JavaScript code in the page's `<head>` (if any) and `<body>` (if any) to update the internal state of the browser to reflect the current page and the new page. For example, after loading a new URL in page \"A\" with `load(\"B\")`, the internal state of the browser should be updated to reflect the current page as \"A\" and the new page as \"B\", and the JavaScript code in the page \"B\" should be executed to update the internal state of the browser.\n\nFinally, the class `Browser` should support running JavaScript code in the context of the current page. A JavaScript code is given by the method `eval`. The method should evaluate the JavaScript code in the context of the current page and return the result if there is a return value, or None if there is no return value or the return value is undefined, or a boolean false if the return value is false.\n\nImplement the class `Browser` such that the method `eval` can successfully evaluate the following JavaScript code in the context of the current page:\n```js\ndocument.domain = \"example.com\";\ndocument.body.innerHTML = \"<h1>Hello World</h1>\";\n```"}, {"instruction": "Implement a Python program that implements a function called `gcd(a, b)`, which returns the greatest common divisor (GCD) of two non-negative integers. Use the Euclidean algorithm."}, {"instruction": "Create a Python program to read a `js_file.js` file and output a `py_file.py` file with the same content. The program should be able to convert the names of functions, variables, and imported files from Javascript to Python, but keeping the original Python statement.\n\nFor example, the input file `js_file.js` should have the following content:\n\n```javascript\nfunction get_word_count(text) {\n    return text.split(' ').length;\n}\n\nconst words = 'hello world!';\nconst count = get_word_count(words);\n```\n\nThe output file `py_file.py` should be generated such that the following requirements are met:\n\n- The converted function is correctly named and the Python syntax should be preserved.\n- The line with `return` statement is correctly indented and the output variable is correctly set to the correct value.\n- The input variable `words` should come from the global scope."}, {"instruction": "Create a Python program that accepts two integers as command-line arguments, and returns the product as a number, not as a string. The function should be called `prod` and the module should be called `prod`."}, {"instruction": "Create a Python program to process a given file of stock data, and generate a graph of historical price movements in a single file. Each line of the input file contains a timestamp, symbol, and price data. The output file should be in the format of a `.csv` file where each line contains the timestamp, symbol, and the price movement for that timestamp. The price movement is calculated by subtracting the closing price of the previous day from the closing price of the current day.\n\nUse the following command to run the program:\n`python <path_to_program.py> <path_to_input.txt> <path_to_output.csv>`"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: type conversion between native types, optionals, precondition checking, error handling\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_DirectionalLight_csmLayerLambda_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::DirectionalLight *arg1 = (cc::scene::DirectionalLight *) NULL ;\n    float arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::DirectionalLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) int, short, long, signed char, float, double\n    ok &= sevalue_to_native(args[0], &arg2, nullptr);\n    SE_PRECONDITION2(ok, false, \"DirectionalLight_csmLayerLambda_set,2,SWIGTYPE_float\"); \n    cc_scene_DirectionalLight_csmLayerLambda_set(arg1,arg2);\n    \n    \n    return true;\n}", "docstring": "// out 5", "function_name": "js_cc_scene_DirectionalLight_csmNeedUpdate_get"}, "id": 167, "seed": "static bool js_cc_scene_DirectionalLight_csmLayerLambda_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::DirectionalLight *arg1 = (cc::scene::DirectionalLight *) NULL ;\n    float arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::DirectionalLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) int, short, long, signed char, float, double\n    ok &= sevalue_to_native(args[0], &arg2, nullptr);\n    SE_PRECONDITION2(ok, false, \"DirectionalLight_csmLayerLambda_set,2,SWIGTYPE_float\"); \n    cc_scene_DirectionalLight_csmLayerLambda_set(arg1,arg2);\n    \n    \n    return true;\n}", "__index_level_0__": 46, "concepts": ["type conversion between native types", "optionals", "precondition checking", "error handling"], "parsing_result": [{"instruction": "Design a Python function `convert_to_bool(value)` that attempts to convert the given input `value` into a boolean value. The function should support various input types like integers, floats, strings, and other types that can be converted to boolean values. If the input value cannot be converted into a boolean value, the function should raise a ValueError.\n\nThe function should satisfy the following assertions:\n\n```python\nassert convert_to_bool(0) == False\nassert convert_to_bool(1) == True\nassert convert_to_bool(2) == True\nassert convert_to_bool(\"True\") == True\nassert convert_to_bool(\"false\") == False\nassert convert_to_bool(None) == None\nassert convert_to_bool(\"1\") == True\ntry:\n    convert_to_bool(-1)\nexcept ValueError as e:\n    pass\n```"}, {"instruction": "Create a Python function `convert_native_to_numpy` that converts a native Python type (list, tuple, or dict) into a NumPy array. The function should support nested lists and dictionaries, with a precondition check for input types that are not supported by NumPy. It should return an error if the input is a non-supported type.\n\nThe function should throw an error if any of the values in the input are not:\n\n- A native Python number type (e.g., int, float, or bool)\n- A native Python null value (e.g., None, 0, '')\n- A native Python sequence type (e.g., list, tuple)\n\nThe function should accept a list input and return a 2D NumPy array."}, {"instruction": "Implement the Python function `convert_to_native_type` that converts between two types. The function should accept two arguments, `value` and `native_type`. The function should return the converted value if it can be converted to the native type or raise a `TypeError` exception otherwise. The function should not raise any exception if the `native_type` is not specified. The function should also raise a `TypeError` exception if the `value` argument cannot be converted to the `native_type`."}, {"instruction": "Create a Python implementation of the following native functions: `abs`, `hash`, `is_instance`, `is_callable`, `is_bool`, `is_none`, `is_int`, `is_float`, `is_str`, `is_list`, `is_dict`, `is_tuple`, `is_range`, `is_set`, `is_frozenset`, `is_function`, `is_method`, `is_module`, `hasattr`, `getattr`, `divmod`, `len`, `hex`, `oct`, `round`, `bin`, `ord`, `chr`, `type`, `isinstance`, `callable`, `bool`, `int`, `float`, `str`, `list`, `dict`, `tuple`, `range`, `set`, `frozenset`, `function`, `method`, `module`, `abs`, `hash`."}, {"instruction": "Develop a Python function `parse_currency` that converts a string representation of a currency value into its numerical value. The function should accept a string value representing a currency amount in the format `##.##` (e.g., `\"12.34\"`, `\"54\"`, or `\"0.01\"`), and should return the corresponding numerical value as a float. The function should first perform a precondition check to ensure that the input string is a valid currency amount format, and raise a ValueError if it is not. It should then perform type conversion between the string and float types, using the built-in functions `float()` and `str()`.\n\nThe function should also have an optional parameter `symbol` that is a string literal to use as the currency symbol in the output. If this parameter is not provided, the function should default to using `$` as the currency symbol. The function should also raise a ValueError if the currency symbol is not a valid character."}, {"instruction": "Create a Python function called `create_table` that accepts a string `table_name`, and a list of strings `columns` as arguments. The function should return a dictionary with two keys: `name` and `columns`, where `name` is the input `table_name` and `columns` is a list of input `columns`. If the input string does not contain any characters, the function should raise a ValueError with a custom message."}, {"instruction": "Create a Python function `subtract_times` that takes two datetime objects, `start` and `end`, and returns a timedelta object representing the time elapsed between them. The function should check for valid datetime objects and raise an appropriate exception if the input parameters are not datetime objects. It should also validate that the start time is not after the end time."}, {"instruction": "Create a Python function `convert_to_floats` that accepts a sequence of Python numbers (ints, floats, strings) and returns a list of floats. The function should handle invalid inputs appropriately and return an empty list if the input does not include any numbers.\n/README.md\n# Problem Statement Generator\n\nWelcome to the Problem Statement Generator (PSG) project. This repository is dedicated to the development of a tool that automatically generates problem statements for beginner-level programming challenges.\n\n## Project Goals\n\nWe aim to create a tool that can be used to generate problem statements for programming challenges. The generated statements will be in the form of a series of tasks, each task is a programming challenge with specific properties to ensure diversity and quality.\n\n## Project Structure\n\nThe project is organized into two main directories: `example` and `solution`.\n\n- The `example` directory contains example problem statements that can be used as templates.\n- The `solution` directory contains the generated problem statements in the form of solutions. The solutions are generated using the code in the `generate.py` file.\n\n## Problem Statement Generation\n\nThe problem statement generation process involves three main steps:\n\n1. **Data Collection**: The first step is to collect data from the user regarding the type of problem statement they want to generate. The data includes the task type (e.g., function implementation, class implementation, or program implementation), programming language (e.g., Python, JavaScript, C++, etc.), difficulty level (e.g., easy, medium, or hard), and concepts (such as list comprehension, unique string creation, precondition checking for type validation, etc.) that the task is designed to incorporate.\n\n2. **Task Generation**: The second step is to generate a randomized problem statement based on the collected data. This step involves randomly selecting a task type, programming language, difficulty level, and concepts to form the problem statement.\n\n3. **Solution Generation**: The third step is to generate a solution for the problem statement. This step involves writing the solution code using the programming language of the task.\n\nYou can find more details about the problem statement generation process in the [documentation](https://github.com/Derrick-Zhang/Problem-Statement-Generator/wiki).\n\n## Contributing\n\nThank you for your interest in contributing to the Problem Statement Generator project. We welcome any contributions from the community to improve the project. Here are some ways you can contribute:\n\n- **Report a Bug**: If you encounter any bugs or issues with the project, please open an issue on the GitHub repository. Provide detailed information about the bug and how to reproduce it.\n\n- **Suggest an Idea**: If you have an idea for a new feature or enhancement, please open an issue on the GitHub repository and provide a detailed description of the feature or enhancement.\n\n- **Add a New Task**: If you have a specific task you would like to implement, please open an issue on the GitHub repository and provide a detailed description of the task.\n\n- **Fix a Bug**: If you find a bug or have an idea for a fix, please fork the repository and submit a pull request with the fix.\n\n## License\n\nThe Problem Statement Generator project is licensed under the [MIT License](https://github.com/Derrick-Zhang/Problem-Statement-Generator/blob/master/LICENSE).\n/generate.py\nimport csv\nimport random\n\nimport yaml\n\n\ndef generate_task(task_type, language, difficulty):\n    return yaml.safe_load(open(f\"{task_type}s/{task_type}.yaml\"))\n\n\ndef generate_solution(task, language):\n    return yaml.safe_load(open(f\"solutions/{language}/{task['name']}.py\"))\n\n\ndef generate_task_title(task):\n    return task[\"name\"]\n\n\ndef generate_task_description(task):\n    return task[\"description\"]\n\n\ndef generate_task_properties(task):\n    return {\n        \"category\": task[\"type\"],\n        \"language\": task[\"language\"],\n        \"difficulty\": task[\"difficulty\"],\n        \"concepts\": task[\"concepts\"],\n    }\n\n\ndef generate_example_tasks():\n    tasks = []\n    with open(\"examples/tasks.csv\") as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            task = generate_task(row[\"type\"], row[\"language\"], row[\"difficulty\"])\n            task[\"name\"] = f\"{row['type'].capitalize()} ({row['language'].capitalize()})\"\n            tasks.append(task)\n\n    return tasks\n\n\ndef generate_solution_tasks():\n    tasks = []\n    with open(\"examples/tasks.csv\") as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            if row[\"solution\"] == \"no\":\n                continue\n\n            task = generate_task(row[\"type\"], row[\"language\"], row[\"difficulty\"])\n            task[\"name\"] = f\"{row['type'].capitalize()} ({row['language'].capitalize()})\"\n            solution = generate_solution(task, row[\"language\"])\n            tasks.append({\"task\": task, \"solution\": solution})\n\n    return tasks\n\n\ndef main():\n    tasks = generate_example_tasks()\n    for task in tasks:\n        with open(f\"examples/{task['name']}.md\", \"w\") as file:\n            file.write(f\"# Task: {generate_task_title(task)}\\n\")\n            file.write(f\"\\n\")\n            file.write(f\"**Properties**\\n\")\n            file.write(f\"category: {task['type']}\\n\")\n            file.write(f\"language: {task['language']}\\n\")\n            file.write(f\"difficulty: {task['difficulty']}\\n\")\n            file.write(f\"concepts: {', '.join(task['concepts'])}\\n\")\n            file.write(f\"\\n\")\n            file.write(f\"**Task**\\n\")\n            file.write(f\"{generate_task_description(task)}\\n\")\n            file.write(f\"\\n\")\n            file.write(f\""}, {"instruction": "Design a Python function `convert_from_native_types` that converts a list of native types to a list of optional values. If the input is a list of numbers, the function should return a list of optional numbers, where each number is either None or a non-negative integer. If the input is a list of strings, the function should return a list of optional strings, where each string is either None or the corresponding string representation of a non-negative integer.\n\nOtherwise, the function should return a list of optionals, where each optional is None if the input is not one of the above types.\n\nThe function should handle the following edge cases:\n\n- If the input is `None`, the function should return a list of optionals.\n- If the input is an empty list, the function should return an empty list of optionals.\n\nThe function should also raise exceptions when the input is of a type that is not supported."}, {"instruction": "Create a Python function `convert_type` that converts a given value to a specified type. The function should take a value and a type as arguments, and return the value converted to the specified type. If the value cannot be converted to the specified type, the function should raise a ValueError."}, {"instruction": "Create a Python function `compute_output_num_digits` that accepts an integer `num` as input and returns the number of digits in the output of the following function:\n\n```python\ndef compute_output_num_digits(num):\n    while num > 9:\n        num = num // 10\n    return num\n```\n\nThe function should return `1` if the input is a positive integer, and return `0` if the input is zero or negative. Additionally, the function should handle any kind of exception or error that might occur during its execution."}, {"instruction": "Create a Python function `convert_type` that takes a variable of any type, `x`, and a type name, `typename`, as parameters. The function should validate the input to ensure the type name is a valid Python type name. If the validation passes, the function should return an instance of the input type, converted from `x` if the types are compatible."}, {"instruction": "Write a Python function `convert_to_native_type` that takes a string representation of a real number as an argument, representing a floating-point number. The function should convert the string representation into its equivalent floating-point number value, handling any error cases that may arise during the conversion process."}, {"instruction": "Create a Python function `merge_sorted_lists` that takes two lists of integers as arguments and returns a merged list of sorted integers. The input lists should be sorted in non-decreasing order and can contain duplicate integers, and the function should also be able to handle empty input cases. The function should raise an exception if the input is not valid or if the lists are not sorted."}, {"instruction": "Create a Python function called `convert_string_to_number` that takes a string representation of a number, such as \"123\", and converts it into an integer. The function should handle negative numbers as well, and should raise an error if the string representation is not a valid number."}, {"instruction": "The function `to_native_type` should convert a Python object to its native representation (e.g., `int`, `float`, `list`, `dict`, `set`, etc.) according to the following rules:\n1. If the input object is a native type, just return it as-is.\n2. If the input object is a class, return the object instance's representation.\n3. If the input object is a custom class that has a `__dict__` attribute containing native types, return the object's `__dict__` attribute.\n4. Otherwise, raise a `TypeError` exception.\n\nThe function should raise a `TypeError` exception if the input object is neither a native type nor a custom class with a `__dict__` attribute containing native types."}, {"instruction": "Write a Python function `parse_iso8601` to parse an ISO 8601 formatted string into a Python `datetime.datetime` object. The function should return the corresponding `datetime.datetime` object for valid ISO 8601-formatted strings.\n\nThe function should raise a `ValueError` if the input string is not in ISO 8601 format.\n\nThe function should also raise a `ValueError` if the input string is not a valid date within the range of `datetime.datetime`, i.e., if the input string is not a valid date.\n\nThe function should also raise a `ValueError` if the input string is not a valid time within the range of `datetime.datetime`, i.e., if the input string is not a valid time.\n\nThe function should also raise a `ValueError` if the input string is not a valid date-time within the range of `datetime.datetime`.\n\nNote that the function should accept both a 24-hour or 12-hour time format, and must convert the time to 24-hour format internally."}, {"instruction": "Create a Python function `read_json_file` that takes a string representing a file path as an argument. The function should read the JSON content from the file and return a dictionary representation of the data. If the file path is invalid or the file is not a JSON file, the function should throw an exception."}, {"instruction": "Create a Python function `convert_native_types` that takes a native Python data type (e.g., a string, list, tuple, or dictionary) as input and converts it to a native Python data type using only native data types, including lists, tuples, and dictionaries. You should write assertions to ensure that the function works properly for common data types."}, {"instruction": "Create a Python function `convert_native_type` that converts between type representations (e.g., `datetime.datetime` and `datetime.date`) using `type(obj).fromisoformat` and `type(obj).isoformat`, respectively. The function should raise an exception if `obj` is not a type with an `isoformat` method, and the function should handle the conversion from `datetime.date` to `datetime.datetime`."}, {"instruction": "Given a user-provided string, create a Python function `convert_to_encrypted_string` that converts the string into an encrypted form. The encrypted form should be a list of integers representing unique pairs of characters. The first integer in each pair is the character's ASCII value, while the second integer is the character's frequency count. If there are multiple occurrences of a character, they should all be encoded into the same pair.\n\nFor example, the input string \"aaabbc\" should be converted to the string \"[97,3,98,2,99,1]\" representing the encrypted form of the string.\n\nWrite assertions to ensure the input string is a string and not an integer. If the input string is invalid, the function should raise a ValueError indicating the error."}, {"instruction": "Create a Python function `convert_native_types` that converts native types such as `str`, `int`, and `float` to their corresponding NumPy types (`np.str_`, `np.int_`, and `np.float_`). The function should accept arbitrary inputs, and raise a `TypeError` exception if an unsupported type is encountered.\n\nYou should implement this function by converting the input to a NumPy array and checking the dtype of the array. The input should be a string or a list of strings to be converted to `np.str_`, and an integer or a list of integers to be converted to `np.int_`. If the input is a list of numbers, it should be converted to `np.float_`.\n\nIf the input cannot be converted to any supported NumPy type, the function should raise a `TypeError` exception.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert convert_native_types('hello world') == 'hello world'\nassert convert_native_types([1, 2, 3]) == np.array([1, 2, 3], dtype=np.int_)\nassert convert_native_types([1.1, 2.2, 3.3]) == np.array([1.1, 2.2, 3.3], dtype=np.float_)\ntry:\n    convert_native_types([1, 2, 3, 'hello'])\nexcept TypeError:\n    pass\n```"}, {"instruction": "Create a Python function to convert a native type to a type that would be expected by the target programming language. For example, if the input type is an array of integers, the function should return a list of integers. If the input type is a dictionary of strings, the function should return a dictionary of strings.\n\nThe function should raise a TypeError if the input type is not supported or if there is a type conversion failure. It should also raise a ValueError if the input is not a valid type, and should use a precondition check to fail early in the function."}, {"instruction": "Create a Python function that converts a string representation of a time duration into its total number of seconds. The input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between. The time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case). If the input format is invalid, the function should raise a ValueError.\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```"}, {"instruction": "Create a Python function `validate_and_convert` that takes a list of numbers, each of which may be a string or an integer. The function should return a new list of integers, where each integer is the integer representation of the input number. Additionally, if any input number cannot be converted to an integer, the function should raise a `ValueError` with a message indicating the index of the offending number."}, {"instruction": "Create a Python function that converts a string representation of a time duration into its total number of seconds. The input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between. The time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case). If the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```"}, {"instruction": "The task is to implement a Python function `convert_num_to_native_types` that takes a number and two native types, `target_type` and `target_base`, as arguments. The function should convert the input number to the target type in the target base. The function should raise a ValueError if the input number is not an integer or if the target type is not supported."}, {"instruction": "Write a Python function called `convert_types` that converts a dictionary of values from one data type to another. The function should accept a dictionary `data` of values and two types `from_` and `to`, where `from_` is the current type and `to` is the desired type. The function should return a dictionary with the same keys and values as `data`, but with the values converted from `from_` to `to`.\n\nThe function should handle type conversions for the following types:\n\n- `int` to `float`, `str` to `int`, `str` to `float`, `int` to `str`, `float` to `str`\n- `list` to `tuple`, `tuple` to `list`, `str` to `list`, `str` to `tuple`\n- `dict` to `list`, `list` to `dict`, `str` to `dict`, `tuple` to `dict`\n- `None` to `int`, `None` to `float`, `None` to `str`, `None` to `list`, `None` to `tuple`, `None` to `dict`, `None` to `bool`\n\nThe code should also handle converting between the following types: `int` and `float`, `str` and `list`, `str` and `tuple`, and `str` and `dict`.\n\nWhen converting between types, the function should attempt to convert each value in the dictionary. If the conversion fails for any value, the function should return an error message indicating the key that failed and the value that caused the error. If no errors occur in the conversion process, the function should return the converted dictionary."}, {"instruction": "Design a Python function that converts a string representation of a time duration into its total number of seconds. The input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between. The time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case). If the input format is invalid, the function should raise a `ValueError` with a suitable message.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```"}, {"instruction": "Create a Python function `convert_to_binary` that converts a positive integer to its binary equivalent string representation. The function should handle the following corner cases:\n\n- If the input is a string, the function should convert it to an integer first.\n- If the input is not a positive integer, the function should raise a `ValueError`.\n\nThe function should also have default arguments to handle the following optional cases:\n\n- If the input integer is 0, the function should return an empty string, not None.\n- If the input integer is None, the function should return None without converting to a string."}, {"instruction": "Write a Python function to convert a string that represents a mathematical expression to an equivalent AST, which is a tree of nested Python expressions representing the operators and operands. Expressions consist of numbers, operators, and parentheses. You can assume there are neither spaces nor newlines in the input string.\n\nFor example, the input string `\"(1 + 2) * (3 - 4)\"` should be converted to an AST that represents the corresponding mathematical expression `(1 + 2) * (3 - 4)`. The function should raise an expression parsing error when the input string is not valid."}, {"instruction": "Create a Python function `parse_date_range` that takes a string representation of a date range in format `<start date> - <end date>` and returns a tuple of two strings, `<start date>` and `<end date>`, representing the beginning and end of the date range, respectively. Assume the input string is always valid, without any formatting errors. The function should also validate the validity of the date string, ensuring that the expected format of a date is followed.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_date_range('2021-01-01 - 2021-01-02') == ('2021-01-01', '2021-01-02')\nassert parse_date_range('2021-01-01 - 2021-01-01') == ('2021-01-01', '2021-01-01')\ntry:\n    parse_date_range('2021-01-01 - 2021-02-01')\nexcept ValueError as e:\n    pass\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: array of functions, array of structure\n\n### Task", "fingerprint": null, "content": {"code": "BOOL MY_KEY_DOWN_PRECEDENCE(int key,int cnt)\n{\n\t//\u5148\u884c\u5165\u529b\u53ef\u80fd\u306b\u306a\u3063\u305f\u3089\u30ab\u30a6\u30f3\u30c8\u3092\u59cb\u3081\u308b\n\tif (IsPrecedence[key] == TRUE)\n\t{\n\t\tprecdence[key].CntMax = cnt;\n\t\tprecdence[key].cnt = CNT_CHECK(precdence[key].cnt, precdence[key].CntMax);\n\t\tif (precdence[key].cnt != 0)\n\t\t{\n\t\t\treturn TRUE;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tIsPrecedence[key] = FALSE;//\u5148\u884c\u5165\u529b\u306e\u6642\u9593\u3092\u7d42\u3048\u308b\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\treturn FALSE;\n}", "docstring": "//\u62bc\u3057\u59cb\u3081\u3066\u3044\u306a\u3044", "function_name": "MY_KEY_DOWN_MOMENT"}, "id": 170, "seed": "BOOL MY_KEY_DOWN_PRECEDENCE(int key,int cnt)\n{\n\t//\u5148\u884c\u5165\u529b\u53ef\u80fd\u306b\u306a\u3063\u305f\u3089\u30ab\u30a6\u30f3\u30c8\u3092\u59cb\u3081\u308b\n\tif (IsPrecedence[key] == TRUE)\n\t{\n\t\tprecdence[key].CntMax = cnt;\n\t\tprecdence[key].cnt = CNT_CHECK(precdence[key].cnt, precdence[key].CntMax);\n\t\tif (precdence[key].cnt != 0)\n\t\t{\n\t\t\treturn TRUE;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tIsPrecedence[key] = FALSE;//\u5148\u884c\u5165\u529b\u306e\u6642\u9593\u3092\u7d42\u3048\u308b\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\treturn FALSE;\n}", "__index_level_0__": 47, "concepts": ["array of functions", "array of structure"], "parsing_result": [{"instruction": "Write a Python function to print the multiplication table of a given number `num` in the following format. The multiplication table should be calculated using the following function:\n\n```python\ndef multiplication_table(num: int) -> int:\n    return num * num\n```"}, {"instruction": "Create a Python function that takes an array of functions as an input, and returns a new array of functions. The new array should contain the same number of functions as the original array, where the i-th function in the new array is the function from the i-th element of the original array."}, {"instruction": "Construct a Python function `create_array(size, func)` that creates an array of `size` elements, where each element is a result of applying a function `func` to an index between 0 and `size`.\n\nFor example, given a function `func` that takes an index as an argument and returns its square, `create_array(10, func)` should return an array containing the squares of indexes from 0 to 9."}, {"instruction": "Create a Python function that accepts an array of functions as an input and returns a function that executes the functions in the order specified by the array."}, {"instruction": "Create a Python function that accepts a list of functions and returns a new list of functions with one additional parameter in the first position. The new functions should accept one or more arguments and apply the original functions to them sequentially."}, {"instruction": "Implement a Python function to calculate the sum of all the elements in an array of function objects, where each function object takes one argument and returns a number. The function should have the following signature:\n```python\ndef sum_of_functions(func_list):\n  ...\n```\n\nFor example, given the input `[lambda x: 2 * x, lambda x: x**2, lambda x: 3 * x]`, the output should be `48` since `2 * 2 + 2 * 3 + 2 * 4 + 2 * 5 + 2 * 6 + 2 * 7 + 2 * 8 + 2 * 9 = 48`."}, {"instruction": "Create a Python function that takes an integer `n` as input, and returns an array of `n` functions that implement `n!` factorial. The solution should utilize the `factorial_iterative` function from [Example 6](#example-6) as the core component."}, {"instruction": "Create a Python function `multitask_sum(arr, mult_func_arr)` that takes an array of numbers and an array of functions as arguments. The function should calculate the sum of the array elements using the functions specified in the function array. The function returns the sum of the array elements after applying each function in the function array in order."}, {"instruction": "Define a Python function `test_function` that takes a callable function argument `f` and a list of arguments `args` as input. The function should execute all callable functions passed as arguments and return their results in a list. The function should also output the results of executing the callable function `f` with the given `args` to standard output."}, {"instruction": "Create a Python function that takes a number of functions as arguments and a list of numbers as input, and returns a new function that computes the sum of the values returned by the given functions when invoked with the numbers in the input list as arguments."}, {"instruction": "Given a list of two-element tuples representing function definitions, implement a Python function that returns a list of functions consisting of the functions given in the input list. Each function in the returned list should accept one argument and return the result of calling the corresponding function in the input list with that argument."}, {"instruction": "Create a Python function that accepts a list of functions, and a list of arguments of the same length. The function should evaluate each of the functions on each of the arguments, and return a list of the results as a separate list. For example, given a list of functions `f1`, `f2` and `f3`, and `args = [5, 6, 7]`, the function should return `[f1(5), f2(6), f3(7)]`."}, {"instruction": "Create a Python function to find the sum of the maximum value of each row in a 2-dimensional array of size MxN. The result is the sum of the maximum values of each row, and each row is a list of numbers. The function should return a list of sums in the same order as the input."}, {"instruction": "Create a Python function that implements a simple calculator with the following functionality:\n\n- The calculator can perform addition, subtraction, multiplication, and division of integers.\n- The calculator can accept a maximum of 5 arguments at a time.\n- The calculator can perform calculations on integers and floating point numbers.\n\nThe function should take at least one argument and a string indicating the operation to be performed. The function should also accept any number of additional arguments, where each argument is an integer or a floating point number. The function should return the result of the calculation and raise an error if an invalid operation is encountered."}, {"instruction": "Create a Python function `count_number_of_matches(data, target)` that counts how many times a target string appears in a data array. The data array may contain both strings and numbers, and the function should count the number of matches for both. Utilize the built-in `type()` function to determine the data type of each element in the array."}, {"instruction": "For each test case, read a list of generic data types and their associated names, followed by a call to a specified function. The function should return the names of the generic data types in the order of their appearance in the list."}, {"instruction": "Create a Python function to calculate the value of a mathematical expression from a list of tokens. The expression is given as a list of tokens, where each token can be either a number or a mathematical operator. The function should return the calculated value of the expression."}, {"instruction": "Create a Python function to evaluate a mathematical expression containing a set of functions and operators on a list of numbers. The functions include arithmetic operators `+, -, *, /`, as well as the following functions: `sin`, `cos`, `exp`, `ln`, `abs`, `sqrt`, `ceil`, `floor`, `round`. All the functions accept a single number as an argument. The available operands should be stored in an array of functions. The function should parse the input string, split it into tokens, and evaluate the expression using the provided array of functions."}, {"instruction": "Create a Python function to search for an element within an array of functions. The array contains a number of functions, each of which is a function within a `function_collection` module. Initialize an array of functions and a dictionary of function names and their corresponding function objects. Iterate through the array of functions and check if the element is present within any of the functions, using the provided dictionary to retrieve the function object."}, {"instruction": "Create a Python function that accepts a list of functions and a list of arguments. The function should iterate through each function in the list of functions, passing the function and the argument list to the function. The function should return a list of results from the function calls. The `append` method should be employed to add the results to the output list."}, {"instruction": "Create a Python function to traverse all pairs of elements in two lists of integers where the second element of the pair is at least greater than the first. The function should return the number of pairs with the specified criteria. The function should also output the pairs to the console."}, {"instruction": "Construct a Python function to accept an arbitrary number of functions as input and return a function that combines them into a single function. The returned function should take a single argument and apply the input functions to that argument, returning the result of the last function in the series. The function should be curried to accept a single argument. The function should satisfy the following assertions:\n\n```python\nassert compose(lambda x: x + 1, lambda x: x * 2, lambda x: x - 3)(9) == 19\nassert compose(lambda x: x + 1, lambda x: x * 2, lambda x: x - 3)(4) == 11\nassert compose(lambda x: x + 1, lambda x: x * 2, lambda x: x - 3)(0) == -1\n```"}, {"instruction": "Create a Python function to create a table that displays some data from a list of dictionaries. The table should be formatted in a way that each data point is displayed in a separate column, each row is a dictionary element and a column contains the keys of the dictionary. The value of a cell contains the value of the corresponding key for the dictionary at the same index."}, {"instruction": "Create a Python function that accepts a list of functions as input, which is used to calculate the output of the function when provided a single input (an integer). The function should return a new list of functions, where each function in the new list calculates the result of calling the corresponding function in the input list with that input."}, {"instruction": "Implement a Python function `average` that takes a list of functions, an input argument, and a number of repetitions as arguments. The function should generate a list of random input arguments and call the functions in the list on each argument. The function should then output the average of these results and the standard deviation."}, {"instruction": "Create a Python function that takes two array arguments, `array1` and `array2`, and applies all functions of `array2` to `array1` in a left-to-right manner. The function should return the results of each function call, in the same order, as a list."}, {"instruction": "Write a Python function to create a list of functions based on the given list of functions and the provided parameters to be used as function arguments. The function should return a list of the resulting function lists."}, {"instruction": "Create a Python function that takes an array of functions and an array of structure as arguments. The function should apply all the functions on the structure and return the resulting structure. The functions should be applied in the order they are defined in the array, and the structure should be modified in a way that allows for the possibility of unlimited calls to the function."}, {"instruction": "Create a Python function to sort a list of names by their lengths. However, sort the list according to the last name first, then by the first name, then by the middle name."}, {"instruction": "Write a function that takes a list of function calls and their required arguments as input, and returns the result of executing each function call. The number of function calls and their arguments must be passed as function parameters. The function should return a list of the results of executing the function calls."}, {"instruction": "Create a Python function to print all triplets of natural numbers such that the sum of the first two elements equals the third element."}, {"instruction": "Construct a Python function that takes a variable number of functions as arguments, and returns a function that combines the results of all the passed functions. The resulting function should take a single argument and return the result of the passed functions when called on that argument.\n\nThe solution should demonstrate how to use array of functions and an array of structures to emulate the behavior of a function pointer."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: null pointer check, exception handling, exception handling with error message, exception handling with error message, type casting, list index out of range check\n\n### Task", "fingerprint": null, "content": {"code": "int32_t List_1_System_Collections_IList_Add_m858760638_gshared (List_1_t3093144868 * __this, RuntimeObject * ___item0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_System_Collections_IList_Add_m858760638_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\nIL_0000:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tRuntimeObject * L_0 = ___item0;\n\t\t\tNullCheck((List_1_t3093144868 *)__this);\n\t\t\t((  void (*) (List_1_t3093144868 *, UICharInfo_t3151594060 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3093144868 *)__this, (UICharInfo_t3151594060 )((*(UICharInfo_t3151594060 *)((UICharInfo_t3151594060 *)UnBox(L_0, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 8))))), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t\tint32_t L_1 = (int32_t)__this->get__size_2();\n\t\t\tV_0 = (int32_t)((int32_t)((int32_t)L_1-(int32_t)1));\n\t\t\tgoto IL_0036;\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\t; // IL_001a: leave IL_002b\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__exception_local = (Exception_t2748878030 *)e.ex;\n\t\tif(il2cpp_codegen_class_is_assignable_from (NullReferenceException_t2898655055_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_001f;\n\t\tif(il2cpp_codegen_class_is_assignable_from (InvalidCastException_t330901945_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_0025;\n\t\tthrow e;\n\t}\n\nCATCH_001f:\n\t{ // begin catch(System.NullReferenceException)\n\t\tgoto IL_002b;\n\t} // end catch (depth: 1)\n\nCATCH_0025:\n\t{ // begin catch(System.InvalidCastException)\n\t\tgoto IL_002b;\n\t} // end catch (depth: 1)\n\nIL_002b:\n\t{\n\t\tArgumentException_t3261393077 * L_2 = (ArgumentException_t3261393077 *)il2cpp_codegen_object_new(ArgumentException_t3261393077_il2cpp_TypeInfo_var);\n\t\tArgumentException__ctor_m4106072998(L_2, (String_t*)_stringLiteral927986437, /*hidden argument*/NULL);\n\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(L_2);\n\t}\n\nIL_0036:\n\t{\n\t\tint32_t L_3 = V_0;\n\t\treturn L_3;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "List_1_AddEnumerable_m250401200_gshared"}, "id": 172, "seed": "int32_t List_1_System_Collections_IList_Add_m858760638_gshared (List_1_t3093144868 * __this, RuntimeObject * ___item0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_System_Collections_IList_Add_m858760638_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\nIL_0000:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tRuntimeObject * L_0 = ___item0;\n\t\t\tNullCheck((List_1_t3093144868 *)__this);\n\t\t\t((  void (*) (List_1_t3093144868 *, UICharInfo_t3151594060 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3093144868 *)__this, (UICharInfo_t3151594060 )((*(UICharInfo_t3151594060 *)((UICharInfo_t3151594060 *)UnBox(L_0, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 8))))), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t\tint32_t L_1 = (int32_t)__this->get__size_2();\n\t\t\tV_0 = (int32_t)((int32_t)((int32_t)L_1-(int32_t)1));\n\t\t\tgoto IL_0036;\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\t; // IL_001a: leave IL_002b\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__exception_local = (Exception_t2748878030 *)e.ex;\n\t\tif(il2cpp_codegen_class_is_assignable_from (NullReferenceException_t2898655055_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_001f;\n\t\tif(il2cpp_codegen_class_is_assignable_from (InvalidCastException_t330901945_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_0025;\n\t\tthrow e;\n\t}\n\nCATCH_001f:\n\t{ // begin catch(System.NullReferenceException)\n\t\tgoto IL_002b;\n\t} // end catch (depth: 1)\n\nCATCH_0025:\n\t{ // begin catch(System.InvalidCastException)\n\t\tgoto IL_002b;\n\t} // end catch (depth: 1)\n\nIL_002b:\n\t{\n\t\tArgumentException_t3261393077 * L_2 = (ArgumentException_t3261393077 *)il2cpp_codegen_object_new(ArgumentException_t3261393077_il2cpp_TypeInfo_var);\n\t\tArgumentException__ctor_m4106072998(L_2, (String_t*)_stringLiteral927986437, /*hidden argument*/NULL);\n\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(L_2);\n\t}\n\nIL_0036:\n\t{\n\t\tint32_t L_3 = V_0;\n\t\treturn L_3;\n\t}\n}", "__index_level_0__": 48, "concepts": ["null pointer check", "exception handling", "exception handling with error message", "exception handling with error message", "type casting", "list index out of range check"], "parsing_result": [{"instruction": "Implement Python code to reverse a list without using built-in Python functions such as `list.reverse()` and `reversed()`.\n\nFor example, given the list `l = [1, 2, 3, 4, 5]` the code should return `[5, 4, 3, 2, 1]`."}, {"instruction": "Write a Python function to check if a 3x3 matrix is a magic square. A 3x3 matrix is called a magic square if the sum of each individual row, column, and diagonal of the matrix is equal. The function should check if the input is a valid 3x3 matrix and return `True` if it is. If the input is not a valid 3x3 matrix, it should throw an exception with the message \"Invalid input\". If the input is a valid 3x3 matrix, but it is not a magic square, it should throw an exception with the message \"Not a magic square\"."}, {"instruction": "Create a Python function to check if a given array of numbers is sorted. The function should return `True` if the array is sorted in ascending order, otherwise it should return `False`. It should use exception handling to handle any errors related to accessing array elements.\n\nFor example, given the array `[1, 3, 4, 5, 6]`, the function should return `True`. Given the array `[1, 3, 4, 5, 7]`, the function should return `False` as `7` is not present in the array."}, {"instruction": "Write a Python function to check if a given string can represent an integer value without using the built-in `int()` function. The function should return a boolean value indicating if the string is an integer.\n\nYou should handle the following cases:\n\n- If the string doesn't represent a valid integer, return `False`\n- If the string represents a valid integer, but it is between the range of integer values, return `False`\n- If the string is empty, return `False`\n- Otherwise, return `True`\n\nThe function should be able to handle the following edge cases:\n\n- Leading and trailing whitespaces are ignored\n- Sign character '+' and '-' can be used for a non-negative or negative integer\n- Leading zeros and characters other than numeric digits are not allowed\n\nIf any of the above cases are not satisfied, the function should return `False`."}, {"instruction": "Implement a Python function `find_element` that takes a list `l` and an integer `n`. The function should find the first `n` occurrences of the integer `n` in the list `l` and return the index of the first occurrence of `n` in the list. If the list does not contain `n` occurrences of `n`, the function should return -1."}, {"instruction": "Write a Python function to convert a binary string into its decimal representation. If the binary string is invalid, raise an exception that states `'Invalid Binary String'`. The function should also handle the case where the input string is empty, in which case it should raise a suitable exception."}, {"instruction": "Implement a Python function, `check_eligible_age`, that takes an age in years as input, and raises an exception if the age is less than 18 or greater than 110."}, {"instruction": "Create a Python function to filter out all null values from a list of lists. The function should utilize the `try`/`except` clause to handle any potential errors and return an empty list if an error occurs."}, {"instruction": "Design a Python function that accepts a list of integers and returns the product of the remaining integers after excluding the elements at the given indices.\n\nFor example, given an input of `[1, 2, 3, 4]` and indices `[0, 2]`, the function should return `2 * 3 = 6`."}, {"instruction": "Create a Python function that takes an integer list and an integer `i` as arguments. The function should return the product of all elements in the list except the `i`-th element. The function should raise errors if the input list is empty or if `i` is out of bounds. The error messages should be descriptive and informative."}, {"instruction": "Implement a Python function that accepts a list of `int`s and an integer `k` as input. The function should return the `k`th largest integer in the list. You should handle the `k`th largest integer being out of range exception and the zero-length list exception."}, {"instruction": "Design a Python function that takes a string and an integer as input, and returns a new string that inserts the integer between each character of the original string. If the length of the integer string is greater than the number of characters in the string, then the integer string should be repeated for the remaining number of characters.\n\nFor example, if the input string is `\"hello\"` and the integer is `321`, then the function should return `\"h3e2l3l3o\"`. If the integer string is `999` and the input string is `\"abc\"`, then the function should return `\"a999b999c\"`."}, {"instruction": "Create a Python function that accepts two numbers and performs a calculation on them. If the operation cannot be completed due to invalid arguments or other reasons, raise an exception with the appropriate message.\n\nFor example, if the first argument is a string, the function should throw an `InvalidFirstArgumentError` exception with the message \"First argument must be a number\" and if the second argument is an integer, the function should throw an `InvalidSecondArgumentError` exception with the message \"Second argument must be a float\"."}, {"instruction": "Implement a Python function that takes a list of integers and returns the product of all non-zero elements in the list. The function should raise an exception if called on an empty list or if any element is zero."}, {"instruction": "Design a Python function to calculate the difference between the sum of odd integers and the sum of even integers. The function should take two arguments: an integer `n`, representing the number of integers; and a list of integers, `nums`, representing the actual integers in the sequence. The function should return the difference between the sum of odd integers and the sum of even integers.\n\nThe function should utilize exception handling to handle the case when the input `nums` is empty, or when the input `n` is negative. The function should also validate that the provided list of integers contains only positive integers.\n\nThe function should utilize a null pointer check to check if `nums` is an empty list. If the list is empty, the function should raise an appropriate exception and return `None`.\n\nThe function should utilize a type casting check to ensure that the input `nums` is a list of integers. If the provided input is not a list of integers, the function should raise an appropriate exception.\n\nThe function should use a list index out of range check to check if the provided list of integers contains every positive integer from 1 to `n`. If the list does not contain all positive integers, the function should return `None`.\n\nThe function should utilize exception handling to handle the case when the sum of odd integers is greater than the sum of even integers. The function should also handle the case when the sum of odd integers is less than the sum of even integers.\n\nThe function should utilize exception handling with error message to print an error message if any of the above conditions are not met."}, {"instruction": "Design a Python function that takes a list and a target value in the list and returns a boolean value representing whether the target value exists in the list. It should not throw exceptions in case of input validation failures. It should use the Python built-in `index` method for list traversal and should not raise exceptions."}, {"instruction": "Write a Python function `get_random_element_from_range(num_elements, element_range)` that takes two arguments, `num_elements` and `element_range`, and returns a random element from the range `[0, element_range]`. The function should throw a `ValueError` if `num_elements` is less than 1.\n\nThe function should throw a `ValueError` if `element_range` is less than 1 or greater than the maximum integer value. The function should throw a `ValueError` if the generated random number is less than 0 or greater than `element_range`."}, {"instruction": "Implement a Python function that checks if a given string `word` is a valid palindrome, ignoring non-alphabetic characters. The function should return `True` if the word is a palindrome, otherwise it should return `False`."}, {"instruction": "Write a Python function that accepts a Python string and integer `n` as inputs. The function should return a Python string that consists of alternating copies of the input string and the integer. The number of copies of the input string should be equal to the integer `n`. The function should raise an exception when the input is not a string.\n\nWhen the function is called with a string, it should return a string where each character in the original string is repeated `n` times, with spaces between the copies of the character. The function should raise an error when the input integer `n` is less than 0, or when the input is not a string."}, {"instruction": "Write a Python function that takes two integers, `a` and `b`, as input and returns the integer result of `a` divided by `b` with a floating-point error of 0.000001 or less. If either `a` or `b` are not integers, raise a `ValueError` exception."}, {"instruction": "Write a Python function to check if a string is a valid IPv4 address. The function should return a boolean value indicating if the address is valid or not.\n\nGiven an IPv4 address, the function should return `True` if the address is valid and `False` otherwise. The address is considered valid if it has the following properties:\n\n- The numbers in each segment are all between 0 and 255, inclusive.\n- There are no leading zeros in any segment.\n- There are at most 4 segments in the address.\n- Each segment is separated by a single dot '.'.\n- The total number of digits in the address is equal to 15, excluding the dots.\n\nThe function should throw an `AttributeError` if the argument is not a string."}, {"instruction": "Create a Python function `validate_number()` that checks if a given input `number` is a valid floating-point number (positive, negative, or zero). If `number` is not a valid floating-point number, the function should raise a `ValueError` with an appropriate error message.\n\nThe function should follow the following steps:\n\n1. Validate that the input number is of type `int` or `float`. If it is not, raise a `ValueError` with an error message indicating that the input must be a numeric value.\n2. Check if the input number is either `inf`, `-inf`, or `nan` (not a number), and return `True` if it is.\n3. Parse the input number as a string using the built-in `str()` function.\n4. Consider the decimal point character (`.`) as a separator between the integer and fractional parts. If the decimal point is present, it should be removed from the string representation of the number.\n5. Split the string based on the decimal point character `.` and check if the number of elements is between 1 and 2 (inclusive). If not, raise a `ValueError` with an error message indicating that the format of the number must be either `integer` or `integer.fraction`.\n6. If the first element of the split string is not an integer, raise a `ValueError` with an error message indicating that the format of the number must be either `integer` or `integer.fraction`.\n7. If the second element is not empty, check if it is a valid fractional part using a regular expression (`r'\\d{1,2}(\\.\\d{0,2})?$'`). If not, raise a `ValueError` with an error message indicating that the format of the number must be either `integer` or `integer.fraction`.\n8. If there are multiple decimal points in the input string, raise a `ValueError` with an error message indicating that the input must be a valid floating-point number.\n9. Convert the split string to a list of integers using the `list()` function.\n10. Check if the list contains any negative numbers. If so, raise a `ValueError` with an error message indicating that negative numbers are not allowed in the input.\n11. If the input number has an exponent (e.g., 1.5e3), parse the exponent part and check if it is valid (e.g., with a regular expression).\n12. Check if the input number is a valid float using the `isfinite()` method from the `math` module. If not, raise a `ValueError` with an error message indicating that the input must be a valid floating-point number.\n13. If all the checks above fail, the input number is not a valid float and the function should raise a `ValueError` with an appropriate error message."}, {"instruction": "Implement a Python function called `read_file` that takes a string representing a file path as input and returns its content as a string. If the file does not exist, the function should raise an exception with a descriptive message.\n\nThe `read_file` function should handle the following scenarios:\n\n- If the file does not exist, it should raise an exception with a descriptive message.\n- If the file can be opened successfully, it should read the entire file content and return it as a string.\n- If the file cannot be opened due to permission or other issues, it should raise an exception with a descriptive message."}, {"instruction": "Write a Python function `get_element_at_index(lst, idx)` that takes a list and an index as input parameters. The function should return the element at the specified index in the list if the index is valid, or raise an exception otherwise. It should also catch and handle any runtime or type errors that may occur."}, {"instruction": "Write a Python function that takes a list of strings as input and returns a list of the indices of the strings that contain uppercase letters. The function should raise an exception if the input is not a list of strings. The function should also return an empty list if there are no uppercase letters in the input list."}, {"instruction": "Create a Python function to open a text file `file_path` and extract only words from the file that start with a `prefix` string, while ignoring words that are not in English. The function should return a list of extracted words. For example, given `file_path = 'text.txt'` and `prefix = 'e'`, the function should return the list of words that start with 'e', such as 'earth', 'easy', and 'elephant'."}, {"instruction": "Design a Python function to accept a list of integers and return the number of unique pairs that sum up to a specific target number. The function should also throw a `ValueError` if the input list is empty or contains non-integer numbers. The function should handle the exception by outputting the error message, and returning -1 to indicate an error."}, {"instruction": "Create a Python function that takes two arguments, `a` and `b`, and returns either `a` if `a` is greater than `b`, or `b` if `b` is greater than `a`. If either `a` or `b` is `None` or any other type, the function should raise an exception with appropriate error message."}, {"instruction": "Implement a Python function to convert a Roman numeral to an integer value. For example, `I` should return 1, `IV` should return 4, and `MMIII` should return 2003. The function should also handle exceptions properly such as non-alphabetic input, and out of range input."}, {"instruction": "Create a Python function `get_last_digit` that takes a string as input and returns the last digit of the string. If the string does not contain digits, return `-1`. The function should throw an error if the input is not a string, or if the string contains any other characters."}, {"instruction": "Write a Python function called `parse_nested_list(data)` that takes a Python list as input, and returns the average of the non-null elements with `float()` casting that are not in nested lists and not separated by commas, or `None` if the list is empty. If the list contains only null elements, then return `None`, and if any non-null element cannot be cast to a float, return the list itself."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: hard\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_SceneGlobals_getSkyboxInfo(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::SceneGlobals *arg1 = (cc::SceneGlobals *) NULL ;\n    cc::scene::SkyboxInfo *result = 0 ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::SceneGlobals>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    result = (cc::scene::SkyboxInfo *)((cc::SceneGlobals const *)arg1)->getSkyboxInfo();\n    // %typemap(out) SWIGTYPE*\n    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"SceneGlobals_getSkyboxInfo, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); \n    \n    \n    return true;\n}", "docstring": "// %typemap(out) SWIGTYPE*", "function_name": "js_cc_SceneGlobals_getShadowsInfo"}, "id": 178, "seed": "static bool js_cc_SceneGlobals_getSkyboxInfo(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::SceneGlobals *arg1 = (cc::SceneGlobals *) NULL ;\n    cc::scene::SkyboxInfo *result = 0 ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::SceneGlobals>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    result = (cc::scene::SkyboxInfo *)((cc::SceneGlobals const *)arg1)->getSkyboxInfo();\n    // %typemap(out) SWIGTYPE*\n    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"SceneGlobals_getSkyboxInfo, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); \n    \n    \n    return true;\n}", "__index_level_0__": 49, "concepts": ["iterating over file lines", "command execution from file input", "new line character removal"], "parsing_result": [{"instruction": "Develop a Python program that searches for all instances of a substring in a text file and replaces them with another substring. The program should take a text file and two substrings as input. The program should look for all occurrences of the first substring in the file and replace them with the second substring. The program should save the new text file under a different name."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newlines before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands. Your program should also report the time elapsed to execute the commands, which should be printed to the standard output."}, {"instruction": "Construct a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "In this challenge, you will implement a Python program to generate a list of all unique combinations of items from the given list. The output should be an array of arrays, where each subarray represents a combination of items. Each combination must be in the same order as the items in the input list. The program should handle the case where there are duplicates in the input list.\n\nFor example, given the input `['a', 'a', 'b', 'c']`, the program should return `[['a', 'a'], ['a', 'b'], ['a', 'c'], ['b', 'c']]` because:\n- `['a', 'b', 'c']` is not a valid combination because it has duplicate items\n- `['a', 'a', 'b']` is also not a valid combination because it has duplicate items\n- `['a', 'a', 'c']` is also not a valid combination because it has duplicate items\n- `['a', 'b', 'c']` is a valid combination\n- `['b', 'c']` is a valid combination"}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. The program should tokenize the input and check if the command is valid, i.e., it cannot be empty. The program should also check that the command is not a shell built-in command. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Develop a Python program that reads a text file and outputs all the distinct words, character by character, and the number of times each one appears in the file. The output should be formatted into a table with the word as the column label and the number of occurrences as the row label."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\nThe program should also provide the following three optional command line arguments:\n\n```\n--log-level: A string indicating the log level, which can be either 'debug', 'info', 'warning', 'error', or 'critical'. Default is 'info'.\n--log-file: A string indicating the path to a log file to store the log messages. Default is './Task9.log'.\n--log-to-stdout: A boolean indicating whether the output should be logged to the console. Default is 'True'.\n```\n\nAdditionally, the program should allow the option of disabling logging and suppressing the output to the console by passing the `--no-stdout` flag."}, {"instruction": "In this challenge, you are asked to write a program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\nTo simplify your task, the program should accept two arguments: a file path and a string to search for. The program should use `os.path.isfile` to check that the file path provided by the user exists and is a file. Then, the program should find all occurrences of the given string within the input file. For each occurrence, the program should output the line number, the line position, the file name, and the actual line content. To determine the line number, the program should count the number of newline characters before the line position.\n\nThe program should also provide an option to `grep -n` equivalent behavior with the `-n` option, which will output the line number of the found occurrences."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling for all cases, including:\n\n- Missing shell command in the file\n- Invalid shell command in the file\n- Command not found in the system\n- Other errors from command execution\n- Other errors from command execution"}, {"instruction": "Develop a Python program that reads a text file containing one shell script per line and writes the same script into another file, preserving the indentation of the commands. The characters of indentation should be preserved in the new file, and a new line character should be inserted after each command for readability. The solution should include robust error handling for file operations, ensuring that the output file is not overwritten."}, {"instruction": "Improve the Python program from Example 4 by implementing proper error handling and logging. The program should log an error to a file whenever an exception is encountered during the execution of a command."}, {"instruction": "Construct a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands. This program should support a single command, a series of commands, and an empty shell command. If the input is invalid, the program should output the line number and the command that caused the error."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands. The program should also record the time taken to execute each command to the log file."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n/june_challenge/README.md\n# June Challenge: Algorithms\n\n## Overview\nThis challenge is meant to provide a broad discussion area for the whole month of June.\nThe month starts with a series of two-minute talks on new topics and ideas for the month.\nThereafter, the month will be chopped up into four five-minute talks each day.\nEach talk will be a topic of your choice, with the goal of developing a discussion on the topic.\nThe audience for each talk is the coding community at large, and those who have not previously interacted with the topic.\n\nThis challenge is open-ended as far as the topics are concerned.\nAs a result, you are free to propose any topic you would like to discuss, and we will choose the most appropriate algorithm for it.\n\n## Timelines\nThe first talk is scheduled for 12:00 on Monday.\nThe second talk is scheduled for 12:10 on Monday.\nThe three talks will be presented for the duration of the month.\n\nEach day, we will have two five-minute talks.\nThe first one will start at 12:00 and will last for 5 minutes.\nThe second one will start at 12:05 and will last for 5 minutes.\nThe first talk will be scheduled for 12:00 on Monday.\nThe second talk will be scheduled for 12:05 on Monday.\nThe other talks will be scheduled for 12:10 on Monday to Thursday."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Write a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands. When the program exits, it should print the output of the last command in the text file."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Write assertions to ensure the input is a list of shell commands. Each command is a list of strings, where the first element is a file path and the remaining elements are arguments to that file path. The program should return the output of the shell commands as a list of strings."}, {"instruction": "Write a Python program that reads a text file containing one shell command per line and executes these commands sequentially. The first line should define the target directory that contains the files to check. The remaining lines should contain one file name per line to check. Each file should be checked to see if it's been modified since the last time the program has been run. The modified files should be written to a new output file, and the program should exit with a non-zero exit code if any files are modified. Only files with the following file extensions should be considered: '.txt', '.csv', and '.dat'."}, {"instruction": "Write a Python program that reads all the shell commands from a text file, sanitizes them, and executes them sequentially. In addition to the basic error handling and logging with exceptions, the program should also handle exceptions related to the following cases:\n\n- commands that are not legal shell commands\n- commands that do not return a valid exit status\n- commands that take longer than 10 seconds to execute\n- commands that take longer than 20 seconds to execute, but return a valid exit status\n- commands that never terminate (i.e., they do not return a valid exit status)\n\nFor design purposes, assume that the program only handles basic `ls`, `echo`, `sleep`, `pwd`, and `exit` commands."}, {"instruction": "Design a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\nUse the `subprocess` library to handle the execution of shell commands."}, {"instruction": "Write a Python program that takes a hostname as input and queries the DNS system to find out the corresponding IP address. It should use the `socket` module to connect to a DNS server. You can assume that the DNS server always will respond to the query with a single IP address."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands. The program should also output the result of each command as well."}, {"instruction": "Design a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Write a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Develop a Python program that reads a text file containing a series of commands and executes these commands sequentially. The input file should be formatted as a series of three lines per command, where the first line is the name of the command, the second line is the name of the input file, and the third line is the name of the output file. The commands should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: type definition, soap_instantiate, type definition, type definition\n\n### Task", "fingerprint": null, "content": {"code": "soap_instantiate__ns3__FECAESolicitarResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate__ns3__FECAESolicitarResponse(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\t_ns3__FECAESolicitarResponse *p;\n\tsize_t k = sizeof(_ns3__FECAESolicitarResponse);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip__ns3__FECAESolicitarResponse, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, _ns3__FECAESolicitarResponse);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, _ns3__FECAESolicitarResponse, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated _ns3__FECAESolicitarResponse location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_in__ns3__FECAESolicitarResponse"}, "id": 181, "seed": "soap_instantiate__ns3__FECAESolicitarResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate__ns3__FECAESolicitarResponse(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\t_ns3__FECAESolicitarResponse *p;\n\tsize_t k = sizeof(_ns3__FECAESolicitarResponse);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip__ns3__FECAESolicitarResponse, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, _ns3__FECAESolicitarResponse);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, _ns3__FECAESolicitarResponse, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated _ns3__FECAESolicitarResponse location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "__index_level_0__": 50, "concepts": ["type definition", "soap_instantiate", "type definition", "type definition"], "parsing_result": [{"instruction": "Develop a Python class `StringStore` that supports the following operations:\n- `create_string(self, *args)`\n- `get_string(self, *args)`\n- `get_all_strings(self)`\n\nThe `create_string` method takes a list of string arguments and creates a string from all of them. The `get_string` method accepts an integer argument representing the position of the string to retrieve from the store. The `get_all_strings` method returns the list of all strings in the store.\n\nThe `StringStore` class should support lazy instantiation by using the `type` function to define a class for each string created by the `create_string` method. Each class should contain an attribute `string` that stores the value of the string and an attribute `position` that stores its position in the list of all strings. Ensure that the `StringStore` class correctly handles errors in creating and retrieving strings."}, {"instruction": "Create a Python class to model the `soap_instantiate` method in the SOAP XML-RPC protocol. The class should support a single method `invoke(self, method, params)` that accepts an XML-RPC method name and a list of arguments. The method should return a tuple of success and result."}, {"instruction": "Develop a Python class `Soap` that represents an HTTP SOAP (Simple Object Access Protocol) request. The class should have data members to store the HTTP method, URI, format version, and headers. Additionally, the class should include methods that parse the request and return the fields as individual attributes.\n\nUtilize the `soap_instantiate` function provided to construct a Soap object from a dictionary of field names and values. The function should ensure that the class is initialized with the correct number of attributes based on the dictionary specification. Additionally, the function should handle unexpected inputs and return `None` if the initialization fails."}, {"instruction": "Implement a Python class that defines a type `Person` with a `name` field and a `age` field. Ensure the type `Person` is instantiated with an instance of `soap_instantiate` that creates an instance of the `Person` class."}, {"instruction": "Define a Python class `Soap` that represents a soap object with properties `name`, `color`, `raggedness`, and `moisture`. The class should have a constructor that accepts values for each property. Additionally, define a class method `add_soap(self, soap)` that adds the provided `soap` object to the set of soaps associated with the current `Soap` instance. The method should return the size of the set after adding the `soap` object.\n\nThe class should support string conversion to JSON format, using the soap name, color, raggedness and moisture. Ensure that the class can handle invalid input gracefully, such as missing required properties or incorrectly formatted data. Additionally, provide robust error handling for any operations that may fail due to invalid input or unexpected internal state."}, {"instruction": "Implement a Python class `Movie` that describes a movie with title, year, and genre. The class should provide a method `get_info()` that returns a formatted string describing the movie. Additionally, the class should provide a method `set_genres(self, genres)` that updates the genres of a movie based on a provided list. The class should provide a method `is_genre(self, genre)` that returns True if a movie genre is included in the list of genres."}, {"instruction": "Create a Python class `Soap` that models a soap product. The class should maintain a set of attributes to store information about the soap, such as brand, type, color, and smell. Define attributes as private and use properties to expose read-write access to these attributes.\n\nThe class should include a constructor method `Soap(brand, type, color, smell)` that initializes the soap product with the given values. Additionally, the class should include methods to change the values of the attributes or retrieve them using a specified attribute name. For example, `Soap.set_attribute(\"brand\", \"Johnson's\")` would set the brand of the soap to Johnson's, and `Soap.get_attribute(\"brand\")` would return the current brand of the soap.\n\nThe class should be able to perform necessary conversions between types to ensure that the attributes are consistent. For example, `Soap.set_attribute(\"type\", 2)` should throw an error since the type attribute must be a string, while `Soap.set_attribute(\"smell\", \"sweet\")` should succeed.\n\nThe class should also include a special method `__str__(self)` that returns a string representation of the soap object."}, {"instruction": "Create a Python class that models a book. The class should support the following operations:\n- `initialize(title, author, price, genres)`\n- `is_in_stock(stock)`\n- `set_stock(stock)`\n- `get_stock()`\n\nThe class should maintain a list of stocked book titles, a list of available book titles, and a dictionary of book titles and their respective prices.\n\nThe `initialize` method should take the title, author, price, and genre(s) as parameters, and store them as attributes. The `is_in_stock` method should check if a title is in stock, and return `True` or `False` accordingly. The `set_stock` method should add or remove a title from the stock list according to the provided value of `stock`, and also update the `available_titles` list to reflect the changed stock status. The `get_stock` method should return the stock status as a list of titles.\n\nThe class should provide a method `get_price(title)` that returns the price of a book by title. Include error handling and validation to ensure that the provided title exists and is in stock.\n\nIn addition to the methods, the class should include a `soap_instantiate` method that can be used to create a new instance of the class with the specified details. The method should take a single dictionary as input, and use the dictionary keys to initialize the attributes of the class instance. If no details are provided, the class should use default values for all attributes."}, {"instruction": "Develop a Python class `Soap` that supports creating a SOAP-based \"Hello, World!\" service using Zeep, a Python library for creating and consuming SOAP services. The class should have an `__init__` method that takes a URL as an argument and initializes the class with a `ZeepClient` instance. The class should also include a `hello_world` method that accepts a string containing a name and returns a string containing \"Hello, <name>!\".\n\nThe service should be invoked from the main function as follows:\n\n```python\nif __name__ == '__main__':\n    url = \"https://www.soapclient.com/axis2/services/HelloService?wsdl\"\n    client = Soap(url)\n    print(client.hello_world(\"World\"))\n```"}, {"instruction": "Implement a Python class `Number` that captures and operates on any numerical representation (integer, float, etc.). The class should be able to perform basic arithmetic operations such as addition, subtraction, multiplication, and division. Additionally, the class should offer a method `is_prime` that checks if the number is prime or not. The class should support integration with NumPy arrays and lists through appropriate type definitions."}, {"instruction": "Implement an abstract class `Mammal` that describes a generic mammal. It should support a function `speak` that outputs a string indicating the mammal's speech, while abstract methods `eat` and `sleep` are defined for derived classes to override. The class should also include a static member `species`, which is a list of species names for all mammals.\n\nImplement subclasses of `Cat`, `Dog`, and `Whale`. Each subclass should override the `eat` and `sleep` methods, and **must** include a static member `species` that contains a list of species names for the animal type.\n\nThe class `Mammal` should be instantiated in the `main` function. Create instances of `Cat`, `Dog`, and `Whale`, and use the `speak`, `eat`, and `sleep` methods to demonstrate their functionality."}, {"instruction": "Develop a Python class `Map` that implements a 2D map with integer coordinates, with the following methods:\n\n`Map.add_route(self, route: int[], destination: int[])`: Adds a route to the map. Routes are represented as a list of integer coordinates, with the first coordinate representing the starting position and the second coordinate representing the destination.\n\n`Map.find_route(self, start: int[], destination: int[])`: Finds a route between two coordinates in the map. The route is represented as a list of coordinate pairs, with each pair representing a single step along the route.\n\n`Map.find_cheapest_route(self, start: int[], destination: int[])`: Finds the cheapest route between two coordinates in the map. The route is represented as a list of coordinate pairs, with each pair representing a single step along the route.\n\nThe class should automatically assign unique identifiers to each route, and should maintain a list of routes for each unique ID.\n\nThe class should support adding new routes dynamically, and should handle invalid input gracefully."}, {"instruction": "Develop a Python class named Vehicle that represents a generic vehicle with properties such as `id`, `name`, `price`, and `color`. The class should also contain methods that can be used to calculate the total price of the vehicle and print the information in a formatted output.\n\nFurthermore, implement the `VehicleFactory` class that can be used to instantiate different types of vehicles, such as `Car`, `Truck`, `Motorcycle`, and `Airplane`. The `VehicleFactory` should be able to return instances of different vehicle types based on the type name and a dictionary of attributes."}, {"instruction": "Develop a Python class `MobilePhone` that represents a mobile device with a mobile application installed. The class should maintain the state of the mobile device's internal memory and provide a set of methods to manage it. The class should also manage the battery charge level state, and include a method to charge the device from the battery. The device should have a method to send SMS messages to a specific phone number, and a method to view the contents of the SMS inbox.\n\nThe class should include a method `send_message(self, message: str, recipient: str)` to send a message to a recipient and a method `view_sms_inbox(self)` to view the SMS inbox. The class should handle exceptions in the methods `send_message` and `view_sms_inbox` to report errors if the message exceeds the device's internal memory capacity or if the recipient number is invalid. Additionally, provide robust error handling to manage invalid inputs in the method `charge_battery(self, level: int)`, which should accept a charge level between 0 and 100."}, {"instruction": "Design a Python class `Emperor` that inherits from the `Soap` class. The `Emperor` class should support the following operations:\n\n- acquire and release, which add or remove an `Emperor` from the list of acquired emperors\n- acquired, which returns the list of acquired emperors\n- acquire_all, which acquires all the emperors in the provided list\n- release_all, which releases all the emperors in the provided list\n- make_great, which transforms the acquired emperors into the emperors of the next epoch\n- make_great_all, which transforms all the emperors into the emperors of the next epoch\n\nThe `Emperor` class should have a static method to instantiate the `Emperor` class with the required attributes:\n\n```python\nEmperor.soap_instantiate('Emperor', '', 10)\n```\n\nThis method should validate the input, and raise exceptions if the provided attributes are invalid or incomplete."}, {"instruction": "Define a Python class `Soap` that is a template for creating self-contained SOAP requests. The class should support sending SOAP requests to a remote service and receiving responses. It should provide methods to add headers, payload, and other related elements of a SOAP request. Additionally, it should parse the received responses and extract the relevant information.\n\nThe class should support various operation modes: synchronous, asynchronous, or streaming. The default mode should be synchronous in order to maintain compatibility with legacy SOAP clients.\n\nThe class should provide a static method `parse_response(response)` to extract relevant information from the response string. The method should check for error responses and raise exceptions accordingly."}, {"instruction": "Develop a Python class named `Demo` that can be instantiated with a concrete type T (any). The class should support arbitrary operations on this type T. Provide special properties for type T that define the operations. The class should be able to be instantiated with default values for its properties.\n\nThe class should have the following properties (where T is the instantiated type):\n- `name: str` (default value is `\"Demo\"`)\n- `description: str` (default value is an empty string)\n- `version: str` (default value is \"0.1\")\n- `author: str` (default value is an empty string)\n\nThe class should also support the following operations (provided for free with T):\n- `__init__(self, name: str, description: str, version: str, author: str)` (initialize the object with the given properties)\n- `__repr__(self): str` (return a string representation of the object in the form of `\"<name>: <description>\"`)\n\nFor example, a usage example could be:\n\n```python\n# Create a Demo object\nobj = Demo(author=\"\", description=\"An object that does nothing\")\n\n# Instantiate another Demo object using the class and the same type, but with different values\nobj2 = Demo(obj.name, obj.description, \"0.2\", \"\")\n\nprint(obj) # Prints \"<Demo>: An object that does nothing\"\nprint(obj2) # Prints \"<Demo>: An object that does nothing\"\n```"}, {"instruction": "Write a Python class `User` that manages user accounts and provides methods for signing up, logging in, and generating access tokens. The class should be designed to be flexible enough to support different types of user accounts (e.g., email, mobile phone number, username, etc.). Provide an abstract class `Account` as a base class for the user accounts, with an abstract method `get_credentials()` to retrieve credentials for a particular account. The credentials should be stored as attributes of the class.\n\nThe class should provide methods for user authentication, including the following:\n- Signing up: `signup(self, user_type, username, password)`\n- Logging in: `login(self, username, password)`\n- Generating an access token: `get_token(self)`\n\nThe class should also contain methods to check whether a user is authenticated, and a method to revoke an access token.\n\nThis class should be used by another class `UserManager` that manages different types of users (e.g., `Admin`, `User`).\n\nFinally, create a new class `Manager` that inherits from `Account` to define a manager account. The class should provide a method `get_admins()` to retrieve a list of all active admins."}, {"instruction": "Implement a Python class `Classify` that is used to classify instances of other classes. The class should maintain a mapping of class names to their corresponding class objects. The class should support retrieving class objects based on class names, and a method `classify(instance)` that takes an instance of a class as input and outputs the name of the class that the instance belongs to. The class should be able to handle objects of multiple classes and infer the inheritance relationships between the classes.\n\nFurthermore, the class should also support registering new class objects and updating the mapping of class names to their corresponding class objects, which enables dynamic class creation and updates.\n\nThe class should handle bad inputs gracefully and throw exceptions when appropriate."}, {"instruction": "Create a Python class `Employee` that stores basic information about an employee, such as employee ID, name, and position. Add a method `work_as(self, position)` to the class that returns the position of the employee as a string.\n\nImplement a class `Manager`, inherited from `Employee`, that has a list of employees that manage. The class should have an additional method `manage(self, employee)` that adds the specified employee to the list of managed employees.\n\nFinally, create a Python class `ManagementChain` that manages a list of employees. The class should have methods `add_manager(self, employee)` and `add_employee(self, employee)` that add a new manager and employee to the chain, respectively."}, {"instruction": "Define a Python class `Student` that represents a student record in an online university system. The class should include the following properties: `first_name`, `last_name`, `age`, `gpa`, `is_scholarship_eligible`, and `is_credit_eligible`. The class should also support a `__str__` method that returns a string representation of the student.\n\nAdditionally, define a function `soap_instantiate` that generates a `Student` instance with the given first_name, last_name, age, gpa, and eligibility status. The function should use a dictionary to specify the eligibility status by providing a boolean value for `is_scholarship_eligible` and `is_credit_eligible`.\n\nFor example, the function should pass the following assertions:\n\n```python\nstudent = soap_instantiate('John', 'Smith', 22, 3.7, True, False)\nassert student.first_name == 'John'\nassert student.last_name == 'Smith'\nassert student.age == 22\nassert student.gpa == 3.7\nassert student.is_scholarship_eligible\nassert not student.is_credit_eligible\n```\n\nDesign the class so that it functions as a data type and properly enforces the constraints of data types for property values."}, {"instruction": "Develop a Python class named `Soap` that represents a SOAP message. The class should support defining the message header, body, and fault information, as well as encoding and decoding the message. The class should be generic and can target both HTTP and HTTPS protocols. The class should be written in a way that supports various message encodings such as XML, SOAP, and JSON.\n\nThe class should handle the following corner cases, which should be clear to the user:\n- the header or body is missing from an encoded message\n- the message length exceeds the maximum allowed value for a particular protocol\n- the message is invalid in terms of its format or semantics\n- the message is not able to be decoded\n\nThe class should also include a utility method that can be used to create an instance of the class from an encoded message payload. The utility method should provide robust error handling to ensure that the message can be properly decoded. Additionally, the utility method should be generic and support all the message encodings supported by the class."}, {"instruction": "Develop a Python class `SoapRequest` that represents a request for a SOAP service. Each request is identified by a unique request ID, and consists of the following attributes:\n- request_id: a string with unique ID\n- action: string specified by the user\n- body: a JSON-serializable object to be passed as request body\n\nThe class should include a method `soap_instantiate(self)` that transforms the request into a SOAP message for transmission. The method must return a string representing the SOAP message that can be sent through an HTTP or HTTPS connection.\n\nThe class should also include a method `soap_parse_response(self, soap_response)`, that takes a SOAP response and extracts the expected response body. The method should return a JSON-deserializable object representing the response.\n\nThe class should provide a simple constructor `SoapRequest(action, body)`, which allows users to conveniently create new requests without having to manually specify request IDs."}, {"instruction": "Implement a Python class `SoapContainer` that stores a dictionary of SOAP envelopes. Use the SOAP envelope definition to create an object-oriented representation of an enveloped SOAP message:\n\n```python\nenvelope = SoapContainer()\nenvelope['@xmlns:soap'] = 'http://www.w3.org/2001/12/soap-envelope'\nenvelope['@xmlns:ns'] = 'http://example.org/namespace'\nenvelope['soap:Header'] = SoapContainer()\nenvelope['soap:Body'] = SoapContainer()\n```\n\nThe class should provide the following methods to modify the envelopes:\n\n```python\ndef add_header(self, name: str, value: str) -> None:\n    self['soap:Header'][name] = value\ndef add_body(self, name: str, value: str) -> None:\n    self['soap:Body'][name] = value\ndef add_body_element(self, element: SoapContainer) -> None:\n    self['soap:Body'].append(element)\n```\n\nAdditionally, the class should support querying the envelopes by name and construction from a `dict`.\n\nThe class should validate the input data to ensure that all required fields are present and that the required fields are of the correct types. If errors are encountered, the class should raise an appropriate exception."}, {"instruction": "Design a Python class that implements a typed, named, hierarchy of data structures. The named data structure can be instantiated given a type name, a list of other named data structures as its arguments, and a key-value dictionary providing values for properties of the data structure.\n\nThe data structure can be represented as an object of the appropriate type with the specified properties, and can be associated with a name. The class should support data structure composition by specifying a list of other data structures as its arguments. The class should handle associated data structures through the use of a soap_instantiate() function that creates a new object with the specified type.\n\nFor example, given a type `Person` with an associated list of properties `name` and `age`, the class should support the following instantiation:\n\n```python\ntype_name = 'Person'\nargs = []\nkwargs = {'name': 'John', 'age': 30}\nperson = Person.soap_instantiate(type_name, args, kwargs)\n```\n\nThe class should also handle type checking, such that the properties are limited to only those that are provided."}, {"instruction": "Create a Python class `Student` with three properties: `name`, `age`, and `gender`. Create a factory method `soap_instantiate(name, age, gender)` that instantiates a new `Student` object based on the provided `name`, `age`, and `gender`. Ensure the factory method correctly handles invalid inputs such as negative `age` values and gender values other than `M` or `F` by throwing appropriate exceptions."}, {"instruction": "Implement a Python class for a very simple SOAP client based on type definitions. The class should have a `send(self, data: dict)` method that takes a dictionary of message components and generates a SOAP message in XML format. The `send` method should return a string that represents the XML message in a string format for consumption by other components. The type definitions should be based on the provided schema, which includes field names, field types, and whether the field is optional:\n\n```python\nClient.send({\n    'header': {\n        'request_id': 123456,\n        'to': '',\n        'from': '',\n    },\n    'body': {\n        'content': 'Hello world!',\n        'optional': True\n    }\n})\n```\n\nThe output should be:\n\n```xml\n<SOAPMessage xmlns=\"http://namespace.com\">\n    <header>\n        <request_id>123456</request_id>\n        <from></from>\n        <to></to>\n    </header>\n    <body>\n        <content>Hello world!</content>\n    </body>\n</SOAPMessage>\n```"}, {"instruction": "Utilize the `soap_instantiate` function to create Python classes from WSDL files. Each class should extend a `BaseSoapClass` class with base methods for object serialization and deserialization, and properties for managing input and output data. Populate the properties of the class with data from WSDL input parameters and return data from WSDL output parameters.\n\nFor example, given the WSDL file `calculator.wsdl`, the program should parse the WSDL file and create a `Calculator` class that supports operations like addition, subtraction, multiplication, and division. The class should use the `soap_instantiate` function to generate the wsdl_class from the WSDL file and populate the class properties with the appropriate values from the WSDL."}, {"instruction": "Develop a Python class `Dog` that models a dog with attributes such as name, age, breed, and gender. Implement a class `DogFactory` that can create new Dog instances through a factory method `create_dog(self, breed: str, gender: str, name: str, age: int)` that takes the breed name, gender, name, and age as parameters. Ensure that the class maintains the correct type and values of these attributes.\n\nFor example, the following code demonstrates how the class can be used:\n\n```python\n>>> dog_factory = DogFactory()\n>>> dog = dog_factory.create_dog(breed='dalmatian', gender='male', name='max', age=5)\n>>> dog.name\n'max'\n>>> dog.gender\n'male'\n>>> dog.age\n5\n```"}, {"instruction": "Implement a Python class `Soap` that represents a SOAP web service. The class should support a method `instantiate_soap(self, request)` that accepts a request object as an argument and returns the response object produced by the web service.\n\nThe class should support the following types of requests:\n- `SoapRequest`: A request object that encapsulates the details of the request, such as the soap action, SOAP version, and so on.\n- `SoapResponse`: A response object that represents the result of the SOAP request.\n\nImplement a separate class `SoapRequest` that inherits from `Soap` and exposes a method `create_request(self, action, version)`. The method should create an appropriate `SoapRequest` object based on the provided action and version.\n\nThis structure allows developers to create requests by instantiating the correct type of request object and passing the necessary details."}, {"instruction": "Implement a Python class `Point` that represents a two-dimensional coordinate point. A point is defined by its x- and y-coordinates, which are numeric values. The class should support basic arithmetic operations such as addition, subtraction, and multiplication with other points.\n\nUtilize Python's type system to enforce the type safety of the coordinates and use type annotations to declare the class's member variables as proper types. Include error handling for invalid inputs such as coordinates that are not numeric."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: unit testing, kernel invocation, data copying, code reuse, kernel function\n\n### Task", "fingerprint": null, "content": {"code": "TYPED_TEST(RocprimBlockReduceInputArrayTests, Reduce)\n{\n    using T = typename TestFixture::type;\n    using binary_op_type = typename TestFixture::binary_op_type;\n    constexpr auto algorithm = TestFixture::algorithm;\n    constexpr size_t block_size = TestFixture::block_size;\n    constexpr size_t items_per_thread = TestFixture::items_per_thread;\n\n    // Given block size not supported\n    if(block_size > test_utils::get_max_block_size())\n    {\n        return;\n    }\n\n    const size_t items_per_block = block_size * items_per_thread;\n    const size_t size = items_per_block * 37;\n    const size_t grid_size = size / items_per_block;\n    // Generate data\n    std::vector<T> output = test_utils::get_random_data<T>(size, 2, 50);\n\n    // Output reduce results\n    std::vector<T> output_reductions(size / block_size, 0);\n\n    // Calculate expected results on host\n    std::vector<T> expected_reductions(output_reductions.size(), 0);\n    binary_op_type binary_op;\n    for(size_t i = 0; i < output.size() / items_per_block; i++)\n    {\n        T value = 0;\n        for(size_t j = 0; j < items_per_block; j++)\n        {\n            auto idx = i * items_per_block + j;\n            value = apply(binary_op, value, output[idx]);\n        }\n        expected_reductions[i] = value;\n    }\n\n    // Preparing device\n    T* device_output;\n    HIP_CHECK(hipMalloc(&device_output, output.size() * sizeof(T)));\n    T* device_output_reductions;\n    HIP_CHECK(hipMalloc(&device_output_reductions, output_reductions.size() * sizeof(T)));\n\n    HIP_CHECK(\n        hipMemcpy(\n            device_output, output.data(),\n            output.size() * sizeof(T),\n            hipMemcpyHostToDevice\n        )\n    );\n\n    HIP_CHECK(\n        hipMemcpy(\n            device_output_reductions, output_reductions.data(),\n            output_reductions.size() * sizeof(T),\n            hipMemcpyHostToDevice\n        )\n    );\n\n    // Running kernel\n    hipLaunchKernelGGL(\n        HIP_KERNEL_NAME(reduce_array_kernel<block_size, items_per_thread, algorithm, T, binary_op_type>),\n        dim3(grid_size), dim3(block_size), 0, 0,\n        device_output, device_output_reductions\n    );\n\n    // Reading results back\n    HIP_CHECK(\n        hipMemcpy(\n            output_reductions.data(), device_output_reductions,\n            output_reductions.size() * sizeof(T),\n            hipMemcpyDeviceToHost\n        )\n    );\n\n    // Verifying results\n    test_utils::assert_near(output_reductions, expected_reductions, 0.05);\n\n    HIP_CHECK(hipFree(device_output));\n    HIP_CHECK(hipFree(device_output_reductions));\n}", "docstring": "// load", "function_name": "reduce_array_kernel"}, "id": 186, "seed": "TYPED_TEST(RocprimBlockReduceInputArrayTests, Reduce)\n{\n    using T = typename TestFixture::type;\n    using binary_op_type = typename TestFixture::binary_op_type;\n    constexpr auto algorithm = TestFixture::algorithm;\n    constexpr size_t block_size = TestFixture::block_size;\n    constexpr size_t items_per_thread = TestFixture::items_per_thread;\n\n    // Given block size not supported\n    if(block_size > test_utils::get_max_block_size())\n    {\n        return;\n    }\n\n    const size_t items_per_block = block_size * items_per_thread;\n    const size_t size = items_per_block * 37;\n    const size_t grid_size = size / items_per_block;\n    // Generate data\n    std::vector<T> output = test_utils::get_random_data<T>(size, 2, 50);\n\n    // Output reduce results\n    std::vector<T> output_reductions(size / block_size, 0);\n\n    // Calculate expected results on host\n    std::vector<T> expected_reductions(output_reductions.size(), 0);\n    binary_op_type binary_op;\n    for(size_t i = 0; i < output.size() / items_per_block; i++)\n    {\n        T value = 0;\n        for(size_t j = 0; j < items_per_block; j++)\n        {\n            auto idx = i * items_per_block + j;\n            value = apply(binary_op, value, output[idx]);\n        }\n        expected_reductions[i] = value;\n    }\n\n    // Preparing device\n    T* device_output;\n    HIP_CHECK(hipMalloc(&device_output, output.size() * sizeof(T)));\n    T* device_output_reductions;\n    HIP_CHECK(hipMalloc(&device_output_reductions, output_reductions.size() * sizeof(T)));\n\n    HIP_CHECK(\n        hipMemcpy(\n            device_output, output.data(),\n            output.size() * sizeof(T),\n            hipMemcpyHostToDevice\n        )\n    );\n\n    HIP_CHECK(\n        hipMemcpy(\n            device_output_reductions, output_reductions.data(),\n            output_reductions.size() * sizeof(T),\n            hipMemcpyHostToDevice\n        )\n    );\n\n    // Running kernel\n    hipLaunchKernelGGL(\n        HIP_KERNEL_NAME(reduce_array_kernel<block_size, items_per_thread, algorithm, T, binary_op_type>),\n        dim3(grid_size), dim3(block_size), 0, 0,\n        device_output, device_output_reductions\n    );\n\n    // Reading results back\n    HIP_CHECK(\n        hipMemcpy(\n            output_reductions.data(), device_output_reductions,\n            output_reductions.size() * sizeof(T),\n            hipMemcpyDeviceToHost\n        )\n    );\n\n    // Verifying results\n    test_utils::assert_near(output_reductions, expected_reductions, 0.05);\n\n    HIP_CHECK(hipFree(device_output));\n    HIP_CHECK(hipFree(device_output_reductions));\n}", "__index_level_0__": 51, "concepts": ["unit testing", "kernel invocation", "data copying", "code reuse", "kernel function"], "parsing_result": [{"instruction": "Write a Python program to test the functionality of an existing CUDA kernel function. The program should accept two input arrays, `a` and `b`, and an output array `c` of the same length. The program should run the test kernel with the input and output arrays, and execute the test as long as the kernel function executes successfully."}, {"instruction": "Develop a Python program that uses a kernel function to implement a simple matrix multiplication operation on a CPU. The kernel function should accept two input matrices and a result matrix as inputs. The program should check that the number of columns in the first matrix matches the number of rows in the second matrix, and return an error if not. The program should invoke the kernel function and return the result as a NumPy array."}, {"instruction": "Develop a Python program that utilizes a CUDA kernel function to count the number of primes from 2 to 100,000. The program should output the number of primes to the console. The kernel function should be called by the main function to implement the full program. Design the Kernel function so that it can be called from the main function to solve the problem."}, {"instruction": "Create a Python function that accepts a target function and a set of arguments, and returns a function which calls the target function with the provided arguments after validating the type and number of arguments. The function should be implemented as a kernel that can be invoked from Python and C/C++ code."}, {"instruction": "Write a Python program to test a kernel function (function implemented in the CUDA language) that processes a list of integers. The function should return the sum of all integers in the list. The program should include a unit test to verify the function's correctness. The test should use a GPU device, invoke the kernel function, and verify the returned value."}, {"instruction": "In this program, you will develop a Python program that calls a kernel function written in CUDA C/C++. The kernel function should take two input matrices `A` and `B` and return the matrix product `C = A * B`. The program should provide robust error handling to detect invalid inputs and handle exceptions appropriately. Additionally, the program should support multiple data sizes for both `A` and `B` matrices, as well as different matrix dimensions."}, {"instruction": "The task is provided in the form of an assignment. The task is to implement a pre-built kernel in the file `kernel.cu` to accelerate the matrix multiplication of two square matrices of arbitrary sizes. The pre-built kernel can be invoked with a command line interface, and the resulting array is returned to the host.\n\nThe kernel should be written following the following guidelines:\n- Use shared memory to store intermediate accumulation results\n- Use the thread block's X and Y coordinates to organize the computation\n- Implement a tiled computation to minimize the memory accesses\n- Utilize a warp-level loop to take advantage of the thread block's X and Y coordinates\n\nThe solution should be tested for correctness against the naive implementation in `naive_gemm.cu`."}, {"instruction": "Create a Python program `kernel_launcher` that reads a collection of commands from a file and executes them sequentially. The commands are formatted as follows:\n\n```\n{kernel_name} {arguments} {kernel_path}\n```\n\nThe program should validate that each command has three parts and that the kernel path is accessible. If the arguments are not provided, use the default values for the kernel. The program should copy the kernel's arguments into a kernel handler that is launched on a separate thread.\n\nThe program should handle exceptions and errors by logging detailed info and printing messages to the console."}, {"instruction": "Develop a Python program that tests the correctness of the kernel implementation in a GPU kernel. The program should be prepared to work with multiple versions of the kernel, each of which is implemented in a separate file. The program should be able to select the appropriate kernel to test from the user input. Additionally, the program should output the kernel's name so that the user can easily identify which version is being tested."}, {"instruction": "Create a Python program that invokes a kernel function to sum over a given `M` by `N` matrix. The kernel function summates over the entire matrix and returns the total. The kernel function should be called from the main program with two input matrices of the same size. Similarly, the main program should be called from the unit test to verify the kernel function."}, {"instruction": "Write a Python program that accepts a 1D array of integers from the user and generates a CUDA kernel that returns the sum of elements within the array. The program should validate the input array to ensure that it contains only integers. It should also include robust error handling and logging messages to inform the user about the invalid input.\n\nThe program should invoke the generated CUDA kernel and output the result to the console. The solution should implement code reuse and kernel invocation to ensure that the same kernel is called for each input array."}, {"instruction": "Write a Python program that processes a list of kernel functions from user input and calls them sequentially. For each call, the program should save the input tensor, copy the data from input tensor to the GPU, and execute the kernel function. The kernel function should be called with device-specific arguments, such as a pointer to the input tensor and a pointer to the output tensor, and should output a tensor of the same size with the same data type as the input. The program should then copy the output tensor back into the input tensor on the CPU and continue processing the next kernel function in the list."}, {"instruction": "A Python program receives a large array of data from a GPU kernel, which can be considered a large matrix in this problem. The program needs to process this data and print the maximum value. Design a test plan that goes through different scenarios of data input, execution, and results. The test plan should include:\n- Test data generation: generate random data using a pseudo random number generator\n- Data validation: validate the generated data to ensure it is correct\n- Execution: run the program on the generated data to produce the expected results\n- Result validation: validate the produced results against the expected results"}, {"instruction": "Create a Python unit test for the kernel function `compare_characters` from the previous exercise. The test should validate that the function operates correctly for a range of test cases."}, {"instruction": "A test suite is provided for a kernel named `my_kernel` that accepts a 2D input tensor `A` and a 1D output tensor `B`. The kernel is written in C and invokes the `my_kernel` function. The kernel should implement a simple matrix multiplication operation.\n\nDevelop a Python program that runs the test suite of the `my_kernel` function against a large set of randomly generated test cases. Each test case should use a `A` matrix of random numbers, and expect the `B` matrix to be the correct result of the matrix multiplication. The program should report the pass percentage, which is defined as the percentage of test cases that passed. The program should be robust enough to handle test cases with different dimensions, and handle exceptions gracefully."}, {"instruction": "Develop a Python program to apply a kernel function to an input image. The program should support choosing between three different kernel functions, each of which is implemented in a separate source file. The program should invoke the selected kernel function on the input image, and output the resulting image to a separate output file.\n\nEach of the kernel functions should be implemented as a separate function and be imported from a separate source file. The program should allow the user to choose the input and output files, as well as the kernel function to apply.\n\nThe program should support unit testing to verify the correctness of the kernel functions. Write separate test cases for each of the kernel functions to ensure that the outputs of the functions are consistent with the expected values."}, {"instruction": "Develop a Python program that takes a kernel function as input, and a set of data as input arguments. The program should test the kernel function for different data, returning the results of the kernel function execution. An example of a kernel function is the `max` operation, computing the maximum value in an array."}, {"instruction": "Create a Python program that performs the following tasks:\n- Read a text file containing a list of kernel names and their respective kernel functions.\n- Parse the file and extract the kernel names and kernel functions separately.\n- Locate and load the kernel functions into the GPU using `dlopen` and `dlsym` with the `RTLD_GLOBAL` flag.\n- Execute each kernel function using the `cuLaunchKernel` routine.\n- Collect the results of each kernel execution into a list.\n- Write the results to a text file.\n\nThe file format should be an extensible, self-contained format that allows for the addition of new kernel names and functions, as well as the specification of kernel parameters and their default values."}, {"instruction": "Write a Python program to simulate a mathematical kernel function that accepts two 2D matrices of the same dimension. The kernel function is defined as\n\n$$\nk(x, y) = \\begin{cases}\n    1 & \\text{if } x = y \\\\\n    0 & \\text{otherwise}\n\\end{cases}\n$$\n\nThe program should take in two 2D matrices of the same size and output their corresponding kernel values."}, {"instruction": "Develop a Python program that takes two strings as input, `kernel` and `data`, and runs a kernel function instance from `kernel` with the provided data. The kernel is defined as a function with two parameters: `data` and `parameters` of type `str`. The function should return a string that represents the kernel's output."}, {"instruction": "Develop a Python program that implements a simple convolutional neural network (CNN) using NumPy. The program should support building, training, and evaluating the model on a dummy dataset. The program should use a custom kernel function to implement the forward propagation of the model. The kernel function should be reused for the backward propagation as well."}, {"instruction": "Develop a Python program to implement a Gaussian elimination algorithm. The program should read a matrix file from user input and process it using Gaussian elimination. The matrix file is formatted as a text file with one column per row, containing the elements of each row delimited by spaces. The first row contains the number of rows and columns, followed by the elements of the matrix.\n\nThe program should validate the input file before processing it. If the input file is invalid, the program should print an error message and terminate. The input file should be valid if:\n- it contains at least two rows and one column, and\n- each row contains the same number of elements.\n\nIf the input file is valid, the program should print the result of Gaussian elimination in a similar format as the input file. Each row should contain the elements of the row, separated by spaces.\n\nImplement unit tests for the program using a coverage tool (e.g., `pytest`). Test your code using a detailed test matrix that includes valid and invalid input files."}, {"instruction": "Create a Python program that tests a kernel function to ensure it can perform a valid computation. The program should include unit tests to check the input and output parameters of the kernel function, and to validate the kernel output by comparing it to the expected result. Additionally, the program should programmatically invoke the kernel function by using the `ckernel` command provided by the Cuda Toolkit.\n\nThe kernel function should be implemented in a separate source file and compiled using the NVCC compiler. The program should also include a main function that declares and initializes the input and output buffers, calls `ckernel` to invoke the kernel function, and compares the output to the expected result. The program should also include robust error handling to gracefully handle exceptions that occur during the execution of the kernel function."}, {"instruction": "Use the Python framework `unittest` to write unit tests for a Python function `run_kernel`. The function should run a custom kernel implemented in CUDA C/C++ code, and return the output value as an integer. The function should accept a parameter `n`, a positive integer, that specifies the number of iterations. The custom kernel should add `n` to each element of a global array, and return the final value of the array.\n\nThe unit tests should exercise the function in a variety of scenarios:\n- `run_kernel` should return a valid result for various values of `n`.\n- `run_kernel` should handle failures gracefully, such as insufficient data or invalid data types."}, {"instruction": "Write a Python program that computes the dot product of two vectors. The program should support both vector input with dimension less than 256 and vector input with dimension greater than 256. Employ the CUDA programming model to implement this functionality.\n\nThe program should be structured as follows:\n1. Parse and validate the input arguments, including the dimensions of the vectors and the kernel invocation arguments.\n2. Copy the input vectors to device memory for computation.\n3. Invoke the dot product kernel function.\n4. Copy the results back to host memory and print them.\n5. Clean up the device memory and free the device resources.\n\nThe unit tests should cover all possible corner cases and validate the correctness of the implementation."}, {"instruction": "Write a Python program that exercises the following kernel function `reverse(num)` that reverses the binary representation of a given integer `num`. The program should validate input numbers within a given range and report invalid inputs. The function should be implemented using the `reverse` kernel function."}, {"instruction": "Write a Python program that takes a list of numbers as input and returns a new list with each element multiplied by 5. Use unit testing to test the program's functionality and validate the multiplication logic. The program should also be capable of invoking a CUDA kernel function to implement the multiplication operation on a GPU."}, {"instruction": "Create a Python program named `kernel-testing` that uses another Python program `kernel-testing-kernel` as a kernel to test a kernel function. The program should perform input validation to ensure that both programs are provided with valid arguments. The program should copy the input data to the device for testing, and invoke the kernel function on the device to generate the output. Finally, the program should copy the output data back to host memory to verify the correctness of the results."}, {"instruction": "Create a Python program that performs a simple matrix multiplication of two matrices of size 16x16 using the cuBLAS library. The matrices should be initialized with random values, and the result should be stored in another matrix. The program should use the GPU device to perform the multiplication."}, {"instruction": "Design a Python program that runs unit tests on a kernel function. The kernel function should be implemented in a separate file and loaded into the Python program dynamically. The kernel function should run in a separate process, allowing the Python program to perform other operations while the kernel is executing."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 5\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: k-means clustering, string concatenation, tabular data manipulation, HTML parsing\n\n### Task", "fingerprint": null, "content": {"code": "int main_loop_file_kmeans(string filepath,int kcluster = 5)\n{\n    //\u8bf7\u6c42\u722c\u53bbhtml\u7f51\u9875\n    getWebPageClass gwp;\n    string utf_8_content = gwp.get_web_page_by_read_XML_file(filepath);\n    //string utf_8_content = gwp.get_web_page_by_read_XML_file(\"/Users/pc/sohufile.html\");\n    string web_page_title = gwp.get_web_page_title();\n    \n    if(utf_8_content.size() <= 0)\n    {\n        cout<<\"get url content error\\n\";\n        return 0;\n    }\n    \n    //\u7f51\u9875html\u9884\u5904\u7406\n    contentProcess cp;\n    cp.parse_content_avoid_over_delete(utf_8_content);\n    \n    cout<<\"content size after process : \"<<utf_8_content.size()<<endl;\n    \n    int ret = save_content2file(\"/Users/pc/get_clear_page.html\", utf_8_content);\n    if(ret == 1)\n        cout<< \"save clear  file ok\"<<endl;\n    else\n        cout<< \"save clear  file error\"<<endl;\n    \n    //vector<struct lableFeature> lable_feature = get_content_lable_feature(utf_8_content);\n    vector<struct lableFeature> lable_feature = get_content_lable_feature_1124(utf_8_content);\n    for(int i=0;i<lable_feature.size();i++)\n        print_lable_feature(lable_feature[i]);\n    \n    vector<Feature> feature_vector = get_feature_vector(lable_feature);\n    \n    int max_kc =kcluster;\n    try\n    {\n        kmeansCluster kmeans(feature_vector);\n        //kmeans.kmeans_function();\n        kmeans.kmeans_with_select_k_function(max_kc);\n        int KC = kmeans.get_K();\n        for(int i=1;i<=KC;i++)\n            kmeans.print_kmeans_cluster(i);\n        \n        vector< vector<int> > lableId_cluster = kmeans.get_lableId_from_cluster();\n        vector<Feature> kCenter = kmeans.get_kCenter();\n        vector< vector<Feature> > cluster = kmeans.get_cluster();\n        \n        for(int i=1;i<=KC; i++)\n        {\n            print_content_by_kmeansCluster(lable_feature, lableId_cluster, kCenter,i);\n        }\n        \n        int page_text_cluster_k = kmeans.get_page_text_cluster_k();\n        \n        //vector<int> page_text_id_vector =  get_page_text_cluster_id_after_produce(lable_feature, lableId_cluster, page_text_cluster_k);\n        string selectLableName;\n        vector<int> page_text_id_vector =  get_page_text_cluster_id_after_produce(lable_feature, lableId_cluster, page_text_cluster_k,selectLableName);\n        \n        if(page_text_id_vector.size() == 0)\n        {\n            cout<<\" \u8fd9\u4e2a\u7f51\u9875\u975e\u65b0\u95fb\u6587\u672c\"<<endl;\n        }\n        else\n        {\n            for(int i=0;i<page_text_id_vector.size();i++)\n            {\n                cout<<page_text_id_vector[i]<<\" \";\n            }\n            cout<<endl;\n            cout<<\"\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u6b63\u6587\u6807\u7b7e\u4fe1\u606f\u5f00\u59cb\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            cout<<\"\u6807\u9898\uff1a\"<<web_page_title<<endl;\n            string page_text = print_page_content_by_id(lable_feature, page_text_id_vector,selectLableName);\n            cout<<\"\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u6b63\u6587\u6807\u7b7e\u4fe1\u606f\u7ed3\u675f\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            \n            cout<<\"\\n\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u7f51\u9875\u6b63\u6587\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            cout<<\"              \u65b0\u95fb\u6807\u9898\uff1a \"<<web_page_title<<endl;\n            cout<<\"\\n\" << page_text<<endl;\n            cout<<\"\\n\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u7f51\u9875\u6b63\u6587\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\\n\";\n            \n            string tmp(\"              \u65b0\u95fb\u6807\u9898\uff1a \");\n            page_text = tmp + web_page_title +\"\\n\\n\" + page_text;\n            ret = save_content2file(\"/Users/pc/get_page_text.html\", page_text);\n            if(ret == 1)\n                cout<< \"save page text  file ok\"<<endl;\n            else\n                cout<< \"save page text  file error\"<<endl;\n        }\n    }\n    catch(int e)\n    {\n        if(e == 1)\n            cout<<\"K must big than 0  or  featureVector  is empty\"<<endl;\n        else if(e==2)\n        {\n            cout<<\"No need to cluter,because K is small than featureCluster number \"<<endl;\n            \n        }\n        else if(e == 3)\n            cout << \"this page only has less two lables,maybe it's not a new page\\n\"<<endl;\n    }\n    return 1;\n}", "docstring": "//vector<struct lableFeature> lable_feature = get_content_lable_feature(utf_8_content);", "function_name": "main_loop_url_kmeans"}, "id": 189, "seed": "int main_loop_file_kmeans(string filepath,int kcluster = 5)\n{\n    //\u8bf7\u6c42\u722c\u53bbhtml\u7f51\u9875\n    getWebPageClass gwp;\n    string utf_8_content = gwp.get_web_page_by_read_XML_file(filepath);\n    //string utf_8_content = gwp.get_web_page_by_read_XML_file(\"/Users/pc/sohufile.html\");\n    string web_page_title = gwp.get_web_page_title();\n    \n    if(utf_8_content.size() <= 0)\n    {\n        cout<<\"get url content error\\n\";\n        return 0;\n    }\n    \n    //\u7f51\u9875html\u9884\u5904\u7406\n    contentProcess cp;\n    cp.parse_content_avoid_over_delete(utf_8_content);\n    \n    cout<<\"content size after process : \"<<utf_8_content.size()<<endl;\n    \n    int ret = save_content2file(\"/Users/pc/get_clear_page.html\", utf_8_content);\n    if(ret == 1)\n        cout<< \"save clear  file ok\"<<endl;\n    else\n        cout<< \"save clear  file error\"<<endl;\n    \n    //vector<struct lableFeature> lable_feature = get_content_lable_feature(utf_8_content);\n    vector<struct lableFeature> lable_feature = get_content_lable_feature_1124(utf_8_content);\n    for(int i=0;i<lable_feature.size();i++)\n        print_lable_feature(lable_feature[i]);\n    \n    vector<Feature> feature_vector = get_feature_vector(lable_feature);\n    \n    int max_kc =kcluster;\n    try\n    {\n        kmeansCluster kmeans(feature_vector);\n        //kmeans.kmeans_function();\n        kmeans.kmeans_with_select_k_function(max_kc);\n        int KC = kmeans.get_K();\n        for(int i=1;i<=KC;i++)\n            kmeans.print_kmeans_cluster(i);\n        \n        vector< vector<int> > lableId_cluster = kmeans.get_lableId_from_cluster();\n        vector<Feature> kCenter = kmeans.get_kCenter();\n        vector< vector<Feature> > cluster = kmeans.get_cluster();\n        \n        for(int i=1;i<=KC; i++)\n        {\n            print_content_by_kmeansCluster(lable_feature, lableId_cluster, kCenter,i);\n        }\n        \n        int page_text_cluster_k = kmeans.get_page_text_cluster_k();\n        \n        //vector<int> page_text_id_vector =  get_page_text_cluster_id_after_produce(lable_feature, lableId_cluster, page_text_cluster_k);\n        string selectLableName;\n        vector<int> page_text_id_vector =  get_page_text_cluster_id_after_produce(lable_feature, lableId_cluster, page_text_cluster_k,selectLableName);\n        \n        if(page_text_id_vector.size() == 0)\n        {\n            cout<<\" \u8fd9\u4e2a\u7f51\u9875\u975e\u65b0\u95fb\u6587\u672c\"<<endl;\n        }\n        else\n        {\n            for(int i=0;i<page_text_id_vector.size();i++)\n            {\n                cout<<page_text_id_vector[i]<<\" \";\n            }\n            cout<<endl;\n            cout<<\"\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u6b63\u6587\u6807\u7b7e\u4fe1\u606f\u5f00\u59cb\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            cout<<\"\u6807\u9898\uff1a\"<<web_page_title<<endl;\n            string page_text = print_page_content_by_id(lable_feature, page_text_id_vector,selectLableName);\n            cout<<\"\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u6b63\u6587\u6807\u7b7e\u4fe1\u606f\u7ed3\u675f\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            \n            cout<<\"\\n\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u7f51\u9875\u6b63\u6587\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            cout<<\"              \u65b0\u95fb\u6807\u9898\uff1a \"<<web_page_title<<endl;\n            cout<<\"\\n\" << page_text<<endl;\n            cout<<\"\\n\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u7f51\u9875\u6b63\u6587\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\\n\";\n            \n            string tmp(\"              \u65b0\u95fb\u6807\u9898\uff1a \");\n            page_text = tmp + web_page_title +\"\\n\\n\" + page_text;\n            ret = save_content2file(\"/Users/pc/get_page_text.html\", page_text);\n            if(ret == 1)\n                cout<< \"save page text  file ok\"<<endl;\n            else\n                cout<< \"save page text  file error\"<<endl;\n        }\n    }\n    catch(int e)\n    {\n        if(e == 1)\n            cout<<\"K must big than 0  or  featureVector  is empty\"<<endl;\n        else if(e==2)\n        {\n            cout<<\"No need to cluter,because K is small than featureCluster number \"<<endl;\n            \n        }\n        else if(e == 3)\n            cout << \"this page only has less two lables,maybe it's not a new page\\n\"<<endl;\n    }\n    return 1;\n}", "__index_level_0__": 52, "concepts": ["k-means clustering", "string concatenation", "tabular data manipulation", "HTML parsing"], "parsing_result": [{"instruction": "Implement a Python function `k_means_clustering` that takes two arguments: `data_paths`, a list of strings representing the paths of tabular data files, and `k`, an integer denoting the number of clusters to be produced. The function should return the final clustering of the data as a list of lists, where each list contains the data points that fall into the same cluster.\n\nThe data files store tabular data with two columns: an integer representing a unique ID and a string containing the data points. To be valid, the data points should be separated by a single whitespace character. For example, the data file below:\n\n```\n1   AAA BBB\n2   CCC DDD\n3   EEE FFF\n4   GGG HHH\n5   III JJJ\n6   KKK LLL\n```\n\nwill be considered valid and corresponds to two data points: (1, 'AAA BBB') and (2, 'CCC DDD'). Ensure that the function raises an exception if any of the files in the `data_paths` contain invalid entries, such as non-numerical IDs or missing whitespace.\n\nGiven the `data_paths` and `k` defined above, the function should cluster the data points into `k` clusters and return a list of lists, where each list contains the data points that fall into the same cluster. The clusters should be created using the k-means clustering algorithm, where each cluster is represented by the mean of its data points."}, {"instruction": "Implement a Python function that performs k-means clustering on a set of tabular data. This function should take as input the data as a list of string records, and the number of clusters as an integer. The data is a nested list of strings that represent a tabular data with one column per row, and the output of this function should be a list of cluster centers in the same format.\n\nFor example, given the input `['13, 5', '14, 5', '12, 6', '13, 5', '13, 6', '12, 5']`, the function should output `['12, 5.5', '13, 5.5', '14, 5.5']`. You may assume that the input data is valid and does not contain invalid records such as non-numeric or empty records."}, {"instruction": "Implement a Python function that takes a list of HTML documents as input, and returns a list of `namedtuple` objects representing the table elements in each document. A `namedtuple` is a named collection of fields where each field is a distinct data type. The output should contain the following fields: `id` (unique identifier), `url` (URL of the source document), `text` (text content of the table element), `attributes` (a dictionary of HTML attributes in the table element), and `children` (a list of child elements in the table element, which could be other table elements)."}, {"instruction": "Write a Python function that takes a string of HTML content and returns a list of tag names and the corresponding counts. For example, given the input `<b>1</b><b>1</b><i>2</i><i>2</i><i>2</i>`, the function should return `['b', 2, 'i', 3]`."}, {"instruction": "Implement a Python function that performs k-means clustering on tabular data, where each row represents a data point and each column represents a feature. The function should take as input:\n- `data_matrix`: a `numpy.ndarray` of shape `(num_rows, num_features)`, where `num_rows` is the number of data points and `num_features` is the number of features for each data point\n- `num_clusters`: an `int` specifying the number of clusters to divide the data into\n- `max_iterations`: an `int` specifying the maximum number of iterations to run the clustering algorithm\n\nThe function should output a `numpy.ndarray` of shape `(num_rows, 2)`, where each row represents a data point and the second element of each row is the cluster identifier for that data point."}, {"instruction": "Implement a Python function that takes a filename as input and returns a string of the title and first paragraph, creating a new HTML file if needed. Use the `BeautifulSoup` library to parse an HTML file and extract the title and the first paragraph."}, {"instruction": "Write a Python function `cluster_docs` that takes as input a list of HTML documents and returns a list of clusters, where each cluster is a list of documents. Utilize the input to first parse each document using the `BeautifulSoup` library to extract text from the HTML, then apply k-means clustering to find similar documents and return them in separate clusters."}, {"instruction": "Implement a Python function `get_k_means_clusters(data, k)` that takes a list of 2D points `data` and returns a list of lists of points representing k clusters of data. The function must calculate k-means clustering on the provided data, and the solution should be stored in a list of k lists. For example, given the input points:\n```\n[(5, 2), (5, 4), (10, 12), (15, 8), (10, 2)]\n```\nand k = 2, the output should be:\n```\n[[(5, 2), (5, 4), (10, 12)], [(15, 8), (10, 2)]]\n```"}, {"instruction": "Implement a Python function `kmeans_cluster` that takes two arguments: a list of lists representing numeric data and a positive integer `k`, the number of clusters to create. The function should return a list of clusters, where each cluster is represented by a list of values. The list of clusters should be sorted from smallest to largest cluster size. Use the k-means clustering algorithm to find `k` clusters for numeric data.\n\nEnsure the function handles cases where no clustering is possible or if there is a single cluster."}, {"instruction": "Implement a Python function to perform k-means clustering on a set of numerical feature vectors (each row represents a vector). The function should take as arguments the number of clusters, the set of feature vectors, and a list of indices corresponding to the rows of the feature vectors to be used for clustering. The function should return the clustering results as a list of cluster indices."}, {"instruction": "Implement a Python program that reads a tabular dataset from a CSV file and generates a k-means clustering of the dataset based on the column values of the first n-1 columns and the last column (e.g., the last column identifies the cluster). The program should take the following arguments: the input file path, the clustering algorithm, k, and the number of columns.\n\nThe clustering algorithm can be the original k-means algorithm or a modified version that uses the Euclidean distance between observations as the distance metric. For the modified version, the number of clusters should be a required argument.\n\nThe program should output a new CSV file containing the original data along with the cluster labels.\n\nFor example, given a dataset with a total of 1000 observations and 50 columns, if the cluster size is 10 and the clustering algorithm is the original k-means algorithm, the program should output a CSV file with the original data and a new column heading \"cluster\" that contains the cluster labels for each observation."}, {"instruction": "Write a Python function that implements k-means clustering for n-dimensional data points. The input is a list of n-dimensional data points as a NumPy array. The function should return a list of cluster centroids, a list of cluster assignments, and an integer representing the number of iterations required to converge. For example, the points in the array `[[-2, 4, 0], [-1, 1, 0], [1, 2, 0]]` should be clustered into two clusters, with centroids `[-1, 1.5, 0]` and `[1, 2, 0]`. The input array should be shuffled prior to clustering for better results."}, {"instruction": "Implement a Python function `cluster_text` that takes two arguments: `text`, a single string of text to be clustered, and `k`, the number of clusters to be produced. The function should return a list of `k` clusters, each cluster being a string of text. The clustering should be based on the K-means clustering algorithm, which requires several steps.\n\nFor example, given `text = 'Apple, Banana, Carrot, Durian, Eggplant, Fruit, Grape, Honey, Ice, Juice, Kumquat, Lemon, Mango, Nectarine, Orange, Pear, Quince, Raisin, Sugar, Tangerine, Umbrella, Vinegar, Wine, Xylitol, Yogurt, Zucchini'` and `k = 4`, the function should return `[[\"Apple\", \"Banana\", \"Carrot\"], [\"Durian\", \"Eggplant\", \"Fruit\", \"Grape\"], [\"Honey\", \"Ice\", \"Juice\", \"Kumquat\", \"Lemon\", \"Mango\", \"Nectarine\", \"Orange\", \"Pear\", \"Quince\", \"Raisin\", \"Sugar\", \"Tangerine\", \"Umbrella\", \"Vinegar\", \"Wine\"], [\"Xylitol\", \"Yogurt\", \"Zucchini\"]]` as four clusters."}, {"instruction": "Write a Python function that takes a text file as input and counts the occurrence of each word in the text. The function should return a dictionary-based table with words as keys and counts as values. Use a user-defined class to represent the table so that the table can be easily printed as a table in a console application. The table should include a row for each word and each word should be represented in a column, with each row representing a word and each column representing a count. This solution should include robust error handling to ensure the text file provided is readable.\n\nFor example, given the text file `example.txt` containing the following string:\n> What is the best way to make a tabular representation of a Python dictionary?\n\nThe function should return the following dictionary-based table:\n\n|  | What | is | the | best | way | to | make | a | tabular | representation | of | a | Python | dictionary | ? |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| What | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| is | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| the | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| best | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| way | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| to | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| make | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| a | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| tabular | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 |\n| representation | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |\n| of | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 |\n| a | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 |\n| Python | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 |\n| dictionary | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |\n| ? | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |\n\n**Note:** \n- The function should only include words that are alphabetic strings with no leading or trailing whitespace.\n- The function should include robust error handling to ensure the file can be opened and the file content can be parsed into words.\n- Ensure that the table can be printed as a console-friendly table row-wise."}, {"instruction": "Implement a Python function that takes a list of strings provided by the user and returns a clustered list of strings. The function should accept a positive integer `k` as an input, indicating the number of clusters desired. The function should use k-means clustering to group the strings into `k` clusters, where each cluster is a list of strings. The function should return the `k` clusters as a list of strings. The solution should include robust error handling to validate the input `k` and to check that at least two strings are provided before proceeding.\n\nIf the input string is not a valid URL, then the function should simply return the input string verbatim. The solution should include robust error handling to validate the input string and to check that at least two strings are provided before proceeding."}, {"instruction": "Implement a Python function that reads a CSV file and returns the k-means clusters of data with respect to a given column. The input file represents a table of tabular data with numeric values and the output should be a list of lists containing the rows from the input file corresponding to each cluster."}, {"instruction": "Implement a Python function that takes two arguments: `url` and `n_clusters`. The function should download the HTML content at `url` and extract the values of \"tr\" tags' \"data-value\" attributes and return a `DataFrame` containing the first `n_clusters` clusters of values. The function should handle URLs that do not exist and raise an error when the input is not a valid Internet address. Include error handling to prevent cases where no \"tr\" tags are present in the HTML content.\n\nThe \"tr\" tags represent data rows in an HTML table, and the \"data-value\" attribute is used to store the data value for each row. For example, the HTML content for the URL `https://www.statcrunch.com/app/index.php?dataid=1840341` can be used to test the function. The function should extract the data values for the first four clusters from the HTML content and return them in a `DataFrame` with the following column names: `['Cluster 1', 'Cluster 2', 'Cluster 3', 'Cluster 4']`."}, {"instruction": "Implement a Python function that takes an input string containing HTML tags, performs a clustering operation on its content and returns the original string with the tags rearranged into groups that represent the clusters. Use the [k-means clustering algorithm](https://en.wikipedia.org/wiki/K-means_clustering) to cluster the content and compute the centroid of each cluster. You should then use that centroid to replace tags in the original string with the content of the cluster.\n\nFor example, given the following input: `<div class=\"title\">The quick brown fox</div><div class=\"title\">jumps over the lazy dog</div><div class=\"body\">The quick brown fox jumps over the lazy dog</div>`, the program should output the following: `'The quick brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog'`."}, {"instruction": "Implement a Python function that takes as input a URL and returns the parsed HTML data as a Python dictionary. The function should extract the URL path from the input and use it to query a web API to extract the HTML data. Utilize the Python library `BeautifulSoup` to parse the data using the `lxml` parser."}, {"instruction": "Write a Python function that takes a text file and a number k as input, and returns the top k most frequent words in that file. The solution should be based on the frequency of occurence of each word in the file. The output should be a list of `n` strings, where `n` is the number of words in the file. Additionally, the solution should not contain any duplicates, but may contain less than k words.\n\nFor example, given the file `input.txt` with the text content `the quick brown fox jumped over the lazy dog`, the solution should return `['the', 'fox', 'quick', 'dog', 'jumped']` while given the file `input.txt` twice, the output should be the same."}, {"instruction": "Implement a Python function that takes a list of tabular data with headers as well as the number of clusters and outputs a list of cluster labels derived from the data. The function should also output a list of clusterized data, each element of which is a list of all the items belonging to the corresponding cluster.\n\nFor example, given the following data with headers:\n```\nName, Age, Weight, Height\nAlice, 20, 50, 160\nBob, 21, 60, 170\nCindy, 22, 65, 175\nDora, 23, 70, 180\nElla, 24, 75, 185\n```\nthe function should return `[0, 1, 0, 1, 1]` where the first 2 items are cluster 0, the next 3 items are cluster 1, and the remaining items are cluster 2."}, {"instruction": "Implement a Python function that takes a list of text samples and returns a list of their clusters according to their similarity. The clustering is based on k-means clustering and can be performed on the TF-IDF feature vector of each sample in the input. The similarity of two text samples is defined as the cosine similarity of their TF-IDF feature vectors. The sample count should be parsed from the HTML body using BeautifulSoup."}, {"instruction": "Implement a Python function that computes the k-means clustering of a set of points in a 2D plane. The input is a list of tuples (x_coordinate, y_coordinate) and the number of clusters k as integers. The output should be the coordinates that represent the centroids of the clusters. Utilize an HTML parser to extract points from a web page."}, {"instruction": "Implement a Python function that accepts a `base_url` and returns a `list` of `dicts` containing product information from an e-commerce website. The function should accept a `page_count` argument that specifies the number of pages to scan. The function should return a list of top-level product dictionaries, where each dictionary should contain the title, price, rating, and image of a product.\n\nThe following example uses the `url_root` and `page_count` parameters to construct a list of URLs for a particular e-commerce website. The function then uses `requests` and `BeautifulSoup` to scrape the individual product pages, extracting information from the HTML."}, {"instruction": "Implement a Python function `kmeans` that takes as arguments a table of data with the following columns: `X`, `Y`, `Z`, `Cluster`, and `Label`. `X` and `Y` are coordinates and `Z` is a label. The function should output a new data table with `Label` values updated as follows:\n\n- If a label occurs only once in the table, the `Label` value should be the same as the original.\n- If a label is assigned to multiple clusters, the `Label` value should be the most likely label among the assigned clusters.\n\nCluster assignment should be based on a k-means clustering algorithm.\n\nFor example, given the following input:\n\n<table>\n<tr><th>X</th><th>Y</th><th>Z</th><th>Cluster</th><th>Label</th></tr>\n<tr><td>1</td><td>5</td><td>1</td><td>1</td><td>A</td></tr>\n<tr><td>1</td><td>6</td><td>2</td><td>1</td><td>B</td></tr>\n<tr><td>1</td><td>7</td><td>3</td><td>2</td><td>C</td></tr>\n<tr><td>2</td><td>5</td><td>1</td><td>2</td><td>D</td></tr>\n<tr><td>2</td><td>7</td><td>3</td><td>2</td><td>E</td></tr>\n</table>\n\nThe function should output a new table with `Label` values as follows:\n\n<table>\n<tr><th>X</th><th>Y</th><th>Z</th><th>Cluster</th><th>Label</th></tr>\n<tr><td>1</td><td>5</td><td>1</td><td>1</td><td>A</td></tr>\n<tr><td>1</td><td>6</td><td>2</td><td>1</td><td>B</td></tr>\n<tr><td>1</td><td>7</td><td>3</td><td>2</td><td>C</td></tr>\n<tr><td>2</td><td>5</td><td>1</td><td>2</td><td>D</td></tr>\n<tr><td>2</td><td>7</td><td>3</td><td>2</td><td>E</td></tr>\n</table>\n\nThe solution should include a robust error handling to validate the input table, handle missing values in `Label` and `Cluster`, and process the input differently based on the presence or absence of `Cluster`."}, {"instruction": "Implement a Python function that clusters text data based on cosine similarity. The function should take an input string containing HTML and return a list of text clusters where each cluster is a set of sentences that are similar to each other. The function should be robust to typos, punctuation, and capitalization."}, {"instruction": "Create a Python function that clusters tabular data. The function should take in a `pandas.DataFrame`, perform k-means clustering on the data, and output the final clusters as a `pandas.DataFrame`, where each column corresponds to a cluster. The input `pandas.DataFrame` should have numeric features and the output `pandas.DataFrame` should have a `ClusterID` column with the cluster IDs.\n\nThe function should first find the optimal k value. The function should then cluster the data with the optimal k value and output the resulting clusters. The clustering process should use the Euclidean distance as the similarity metric. You can use a library such as `scikit-learn` for this task."}, {"instruction": "Implement a Python function `format_html` that takes two arguments: a `dict` of HTML elements to replace text in a HTML document, and a `dict` of text to insert. The function should return the modified HTML document with the text replacements.\n\nThe HTML document is a string with the `<li>` element as the root element. For example, given the input `{'<li>': '<ul>'}` and the text replacements `{'Hello World': 'Goodbye World'}`, the function should return the modified HTML document with the text replacements, `<ul><li>Goodbye World</li></ul>`."}, {"instruction": "Write a Python function `kmeans_cluster` that takes a tabular dataset as input and groups the data into k categories based on the values in columns 1 through n. The function should return a count of data points belonging to each cluster.\n\nFor example, given the following tabular data:\n\n| Column 1 | Column 2 | Column 3 | Column 4 |\n| --- | --- | --- | --- |\n| 1 | 2 | 3 | 4 |\n| 5 | 6 | 7 | 8 |\n| 9 | 10 | 11 | 12 |\n| 13 | 14 | 15 | 16 |\n\nThe function should output the following clustering:\n\n|  Cluster | Data Points |\n| --- | --- |\n| Cluster 1 | ['1', '5', '9', '13'] |\n| Cluster 2 | ['2', '6', '10', '14'] |\n| Cluster 3 | ['3', '7', '11', '15'] |\n| Cluster 4 | ['4', '8', '12', '16'] |\n\nAnd the function should handle any number of columns, but the input column values must be numbers."}, {"instruction": "Create a Python function that performs k-means clustering on a provided data set consisting of tabular data. The function should take two arguments: `data`, a NumPy array of data points and `k`, an integer indicating the number of clusters to be generated. The function should output a list of k NumPy arrays representing the locations of the cluster centers, and the function should return the number of iterations required to reach convergence. Utilize NumPy operations and slicing to extract cluster assignments from the data, and ensure that the function is robust to bad input, such as negative cluster counts and empty data sets."}, {"instruction": "Implement a Python function named `parse_csv` that parses a CSV file into a list of lists, where each inner list represents a row of the original table. The function should take as input the path of the CSV file and the number of columns in the table. The function should then parse the specified CSV file using regular expressions and return the parsed table.\n\nThe function should utilize regular expressions to tokenize the file and extract the specified number of columns. It should then split each row of the table into a list of strings, and finally add the parsed data into a list of lists to represent the table."}, {"instruction": "Implement a Python function that clusters tabular data (represented as a NumPy array) based on the k-means clustering algorithm. The function should take a NumPy array of numeric elements and a positive integer `k` that specifies the number of clusters. The function should return a tuple containing the centroids of each cluster in the clustered data, as well as the clusters themselves as a list of lists of elements. Include error handling to validate the input data and `k`, ensuring that the data is a NumPy array and `k` is a positive integer.\n\nYou should first calculate the mean of the data and then iterate over each cluster centroid, computing the distance of each element from the centroid, and then assigning each element to a cluster based on the distance to its nearest centroid. You should also include the logic to ensure that the clusters are updated if they change in size."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: locking and unlocking of resources, waiting on multiple tasks, mutex locking, safe resource usage\n\n### Task", "fingerprint": null, "content": {"code": "sl_result_t stocklib_wait_all()\n{\n    MLOCK;\n    init_guard();\n\n    // Wait for all tasks to complete\n    for ( auto h : g_taskset )\n    {\n\t// Wait for entry into the finish state\n\tif (!h->ready())\n\t    h->wait();\n\n\t// Wait for state entry actions to complete\n\tauto l = h->obtain_lock();\n\tl.unlock();\n\tl.release();\n\n    }\n\n    return SL_OK;\n\n}", "docstring": "// Is this a known task?", "function_name": "stocklib_asynch_result"}, "id": 191, "seed": "sl_result_t stocklib_wait_all()\n{\n    MLOCK;\n    init_guard();\n\n    // Wait for all tasks to complete\n    for ( auto h : g_taskset )\n    {\n\t// Wait for entry into the finish state\n\tif (!h->ready())\n\t    h->wait();\n\n\t// Wait for state entry actions to complete\n\tauto l = h->obtain_lock();\n\tl.unlock();\n\tl.release();\n\n    }\n\n    return SL_OK;\n\n}", "__index_level_0__": 53, "concepts": ["locking and unlocking of resources", "waiting on multiple tasks", "mutex locking", "safe resource usage"], "parsing_result": [{"instruction": "Create a Python function that implements a multi-threaded multi-process queue that contains a lock object and a queue of tasks. The queue should support adding and removing tasks. Each task is a named tuple containing the following fields:\n- `name`: the name of the task\n- `target`: the function or method to be executed\n- `args`: the list of positional arguments\n- `kwargs`: the dictionary of keyword arguments\n\nThe queue should support the following operations:\n- `put(task)`: add task to the queue\n- `get()` (blocking): wait until an available task becomes available and return it\n- `get_nowait()`: return the next available task immediately without waiting\n- `empty()`: return whether the queue is empty or not\n- `close()`: mark the queue as closed\n- `closed()`: return whether the queue is closed\n- `acquire()`: acquire the lock object\n- `release()`: release the lock object\n\nImplement the following features of the queue:\n- `get()` (blocking mode) should prevent multiple threads from accessing the queue at the same time by using a mutex lock\n- `get_nowait()` should throw an error if no available task is in the queue\n- `put()` should throw an error if the queue is closed\n- `close()` should mark the queue as closed"}, {"instruction": "Implement a basic Python module to acquire and release a specific resource in a thread-safe manner. The resource should not be acquired if another thread is currently holding it. The module should also support the following operations:\n\n- acquire(): acquire the resource. If the resource is not available, wait for it to be acquired.\n- release(): release the resource. If no other threads are waiting, release the resource. Otherwise, wake up the first waiting thread.\n\nThe module should support a configurable wait time during which a thread might be waiting for the resource. The module should also support an optional timeout value to allow the thread to wait for the resource for a specific amount of time."}, {"instruction": "Design a Python function that implements a bank account, with the following properties:\n\n- initialize the account with a specified balance\n- deposit a specified amount of money\n- withdraw a specified amount of money\n- query the balance\n- simulate multiple transactions on a single account\n\nImplement the function using a lock to ensure thread-safe access to the account."}, {"instruction": "Implement a Python function that supports multiple simultaneous accesses to a shared resource and enforces resource locking and unlocking to ensure only one task can access the resource at a time. Provide robust error handling to gracefully recover from any errors that might occur during resource access."}, {"instruction": "Design a Python function that takes a list of tasks and executes them in parallel, where each task is defined by a Python function and one or more arguments. The function should support two modes of execution: sequential and concurrent.\n\n- Sequential: each task is executed sequentially.\n- Concurrent: each task is executed concurrently, where the execution of subsequent tasks does not depend on the execution of earlier ones.\n\nThe function should guarantee that a task is executed only after the execution of all its dependencies, and the ordering of execution should be consistent across all tasks.\n\nThe function should also support the following operations:\n\n- Task execution: starts the execution of a task.\n- Task dependency: adds and removes dependencies to a task.\n- Task status: checks whether a task is currently executing or not."}, {"instruction": "Implement a Python function that provides safe access to an input resource that is shared among multiple tasks. The function should lock the resource for the duration of the task's execution. It should provide robust error handling to ensure that the task is not prematurely suspended and that the resource is unlocked when an exception occurs."}, {"instruction": "Implement a Python function that locks and unlocks a resource given a list of tasks that need to be executed sequentially. When a task is executed, it locks the resource to prevent other tasks from executing, and when the task is done, it unlocks the resource so other tasks may be executed concurrently. The function should throw an exception if an attempt is made to unlock a resource that was not previously locked.\n\nFor example, given the input `['task 1', 'task 2', 'task 3', 'task 4']`, the function should return `['locked', 'locked', 'locked', 'unlocked']` when the tasks are executed in the following order: task 1, then task 2, then task 3, then task 4."}, {"instruction": "Develop a Python function that creates multiple threads to perform concurrent tasks. Each task should utilize a shared resource that is locked and unlocked by other tasks. The program should wait for all tasks to finish before exiting. Design the function by using a `threading.Lock` object to manage locking and unlocking of the resource."}, {"instruction": "Create a Python function that creates and manages a lock resource. Each time the function is called, a new lock is created if one does not exist, and the lock is used for the duration of the function's execution. If a lock already exists, the function should wait until the lock is released before using it. Implement the function so that you can repeatedly call it from different threads without having to worry about thread synchronization."}, {"instruction": "Create a Python function that simulates a bank account. The function should take an initial balance and a list of transactions as inputs and return the updated balance. Each transaction is represented by a dictionary with fields `amount`, `transaction_type`, `description`, and `timestamp`. The balance should be updated according to each transaction's `transaction_type`, where:\n- `transaction_type == 'Deposit'`: deposit the amount\n- `transaction_type == 'Withdraw'`: withdraw the amount\n- `transaction_type == 'Transfer'`: transfer the amount from the account\n\nInclude logging and error handling to manage exceptions such as invalid transactions or insufficient account balance. Make sure that the function does not have deadlock or race conditions and that all transactions are processed sequentially."}, {"instruction": "Write a Python function that implements a simple producer-consumer mechanism using two threads. Each thread should wait for a specified number of seconds to simulate the blocking behavior of a resource."}, {"instruction": "Develop a Python function that performs the following tasks:\n- takes a task function as input\n- creates a new thread for the task function and passes it a resource as input\n- locks the resource before calling the task function and unlocks it after\n- repeats the lock/unlock cycle until the task function returns a value other than `None`"}, {"instruction": "Implement a Python function that accepts an input of two threads and acquires the resources required to execute them concurrently. If the resources cannot be acquired, the function should wait until they are free. The execution of the threads should be deterministic: if thread A is ready for execution, it should be executed before thread B is ready for execution. If a resource cannot be acquired, the thread should be put to sleep until it is ready."}, {"instruction": "Implement a Python function to support distributed locking and unlocking of resources across multiple tasks. The function should take a resource name and a task name as input and acquire the lock on the resource for the task to ensure mutual exclusion and wait for other tasks to finish their work on the resource before continuing. Similarly, it should release the resource lock when the task is done. Include error handling to ensure that the resource does not exist or the task cannot be found."}, {"instruction": "Create a Python function that simulates the concurrent execution of multiple tasks by using Python's built-in `threading` module. The function should accept a list of task functions and a list of arguments where each task function is to be executed with the corresponding list of arguments. The function should lock a resource, execute the tasks in parallel, and release the resource when all tasks have finished. The function should handle tasks that raise exceptions, in which case they should be logged and the program should continue to execute with the remaining tasks. Provide clear error handling and logging to manage exceptions that might occur during the execution of the tasks. Ensure that the function does not return until all tasks are complete."}, {"instruction": "Write a Python function to ensure that no two tasks are blocking each other to share a resource. For example, in a multithreaded environment, ensure that a task cannot acquire a resource until a previous task has released it. If one task fails to release a resource, it should be automatically re-acquired by the next task. In other words, tasks should block until any previous tasks have released their own resources. When all tasks have released their resources, the overall execution should be resumed."}, {"instruction": "Implement a Python program that creates multiple tasks and uses locks to ensure mutually exclusive access to shared resources. Each task should first wait until a lock is available, then acquire the lock and perform the specified operations, then release the lock. The program should use two locks to ensure mutually exclusive access to two critical resources: `X` and `Y`. The order in which tasks acquire the locks should be: `X -> Y -> X -> Y -> X -> Y -> X -> Y -> ...`."}, {"instruction": "Create a Python function that coordinates the execution of three separate tasks. The first task is a consumer, which consumes new items (a number between 0 and 9) from a queue and prints the item. The second task is a producer, which produces new items (0--9) into a queue. The third task is a manager, which monitors the status of the producer and consumer tasks.\n\nThe manager should print a message indicating that the producer is not producing items and should wait until the producer produces a new item. The producer should print a message indicating that it is producing items and should wait until the consumer consumes an item. The consumer should print a message indicating that it is consuming items and should wait until the producer produces a new item."}, {"instruction": "Implement a Python function that locks a resource when called and releases it after the function returns. The function can be called multiple times concurrently and the resource should be locked only when needed and released after the function is finished. Additionally, ensure that only one instance of the function is executing on the resource at a time. When the function is finished, unlock the resource so other tasks can use it.\n/Labs/Lab03/hash.py\nimport hashlib\n\n\ndef hash(filename):\n    with open(filename) as file:\n        file_data = file.read()\n        file_hash = hashlib.sha256(file_data.encode()).hexdigest()\n    return file_hash\n/Labs/Lab03/time_complexity.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef log_log(x):\n    return np.log(np.log(x))\n\n\ndef linear(x):\n    return x\n\n\ndef linear_log(x):\n    return x * np.log(x)\n\n\ndef log_linear(x):\n    return np.log(x) * x\n\n\ndef quadratic(x):\n    return x**2\n\n\ndef cubic(x):\n    return x**3\n\n\ndef exponential(x):\n    return 2**x\n\n\ndef plot_time_complexity(func, x, y):\n    plt.plot(x, y, c='r', label=f'{func.__name__}: {func(max(x))}')\n\n    plt.legend()\n    plt.xlabel('Time complexity')\n    plt.ylabel('Function value')\n    plt.show()\n\n\ndef plot_time_complexity_all(x):\n    plot_time_complexity(log_log, x, log_log(x))\n    plot_time_complexity(linear, x, linear(x))\n    plot_time_complexity(linear_log, x, linear_log(x))\n    plot_time_complexity(log_linear, x, log_linear(x))\n    plot_time_complexity(quadratic, x, quadratic(x))\n    plot_time_complexity(cubic, x, cubic(x))\n    plot_time_complexity(exponential, x, exponential(x))\n/Labs/Lab03/main.py\nimport argparse\nimport sys\nimport time\nfrom os import path\n\nfrom hash import hash as hash_file\nfrom time_complexity import plot_time_complexity_all\n\nsys.setrecursionlimit(100000)\n\nFILE_TO_TEST = './test.txt'\n\nif not path.exists(FILE_TO_TEST):\n    with open(FILE_TO_TEST, mode='w') as file:\n        file.write('This is a test text file.')\n\nparser = argparse.ArgumentParser(description='Lab 3')\nparser.add_argument('-p', '--plot', action='store_true', help='Plot time complexity for hash functions.')\nparser.add_argument('-t', '--test', action='store_true', help='Test hash functions.')\nparser.add_argument('-f', '--file', type=str, help='File to hash', default=FILE_TO_TEST)\nparser.add_argument('-s', '--size', type=int, help='Size of the array to test', default=100000)\nargs = parser.parse_args()\n\nif args.plot:\n    plot_time_complexity_all(range(1, args.size + 1))\n\nif args.test:\n    start = time.time()\n    print(f'Hash for file {FILE_TO_TEST} is {hash_file(FILE_TO_TEST)}')\n    print(f'Hashing time for file {FILE_TO_TEST} is {time.time() - start} seconds.')"}, {"instruction": "Create a Python function that performs a safe critical section (CS) operation on a resource. The function should be able to handle the following scenarios:\n- **Safe case**: the resource is available and the function can proceed\n- **Unsafe case**: the resource is unavailable, the function should wait for the resource to become available\n- **Context switch case**: the function is asked to wait for the resource to become available and the context switch takes place\n\nThe function should also provide the following logging for critical section management:\n- **CS entry**: a successful CS entry is logged when the function starts a CS, even if it is already in the critical section\n- **CS exit**: a successful CS exit is logged when the function leaves a CS, even if it is not in the critical section\n- **CS wait**: a CS wait is logged when the function enters the CS wait state\n- **CS release**: a CS release is logged when the function leaves the CS wait state"}, {"instruction": "Implement a Python function that monitors the availability of a specific resource. The resource is represented by a boolean value. The function should take a resource name and a time interval in seconds as inputs and periodically check the availability of the resource so that the calling function can continue execution when the resource is available. If the resource is unavailable, the function should wait until the resource becomes available again, at which point it should return. If the resource becomes available during the time interval, the function should immediately return, and the time interval should be reset to the initial value."}, {"instruction": "Implement a Python function that accepts as input a list of tasks (in the form of Python functions) to be run sequentially. Each task is to be run by a different thread, and the function should return only once all the tasks are completed. Each task should have a specified timeout factor that is used to compute the maximum execution time of the thread. If the timeout factor is 0.5, the task should be completed within 2 seconds. If the timeout factor is 2, the task should be completed within 4 seconds."}, {"instruction": "Implement a Python function that executes a group of tasks in parallel, where each task uses a separate function and takes a numeric input to perform a calculation on. Ensure that the tasks are executed in parallel and the output is returned to the caller in the correct order. Implement the function using locks and mutexes to ensure that the output is returned properly. Design the function to be robust to unexpected errors and exception handling."}, {"instruction": "Write a Python function that takes a text file containing task instructions and the number of available resources and returns a list of task assignment results. The text file contains one task instruction per line, where each line consists of a task name, the number of resources required, and the time required to complete the task. The function should return a list of task assignment results, where each element is a tuple of the task name, the resources assigned to the task, and the time required for completion. Ensure that the function ensures the following:\n\n1. The function prohibits violating the total number of available resources.\n2. The function prohibits violating the maximum wall clock time for the entire assignment.\n3. The function prohibits violating the maximum wall clock time for any individual task.\n4. The function prohibits violating the resource constraint for any particular resource."}, {"instruction": "Design a Python function that accepts a function as an argument, executes this function, and then yields the result. However, the function must be executed only after a specified number of tasks have completed, and the function must be executed only if all other tasks are finished (i.e., the function must be executed concurrently)."}, {"instruction": "Design a Python function that accepts a list of tasks that are defined by a task name and its required time to execute in seconds. The function should be able to schedule the execution of these tasks in a way that minimizes the total execution time while satisfying certain constraints.\n\nThe constraints are as follows:\n- only one task can be executed at a time\n- a task can be executed only if all of its prerequisite tasks have been executed\n- the total time for the execution of all tasks must not exceed a certain threshold\n\nThe function should return a list of task names that are executed in the scheduled order. If no tasks can be scheduled within the constraints, return an empty list."}, {"instruction": "Implement a Python function that accepts an input string and produces a list of strings that are the permutations of the input string. For example, given a string `abc`, the function should output `['abc', 'acb', 'bac', 'bca', 'cab', 'cba']`."}, {"instruction": "Create a Python function that executes multiple tasks and waits until all of them are completed. Each task should be represented by a function and its arguments. The function should be wrapped with a mutex lock that prevents other tasks from attempting to access its resources until the currently running task is completed. The function should return a `namedtuple` containing the name of the task, its start time, and its end time. If the task throws an exception, the end time should be the time of the exception. The function should be designed to support concurrent execution and completion of multiple tasks."}, {"instruction": "Design a Python function that simulates the process of accessing a shared resource. The resource can be accessed by multiple tasks at the same time. Implement a mutex-based solution where each task must wait on the completion of the previous task before accessing the resource.\n\nFor example, given a resource and two tasks, task 1 and task 2, the program should output the following sequence of events:\n- task 1 locks the resource\n- task 1 unlocks the resource\n- task 2 locks the resource\n- task 2 unlocks the resource"}, {"instruction": "Create a Python function that simulates a bank teller processing customer transactions. The function should accept an input of a list of customer transactions and return the total amount of money to be withdrawn by the bank teller. The transactions should be executed by a bank teller with three accounts: account1 with 1000, account2 with 2000, and account3 with 3000. The transactions list should be formatted as `account_number: amount_to_withdraw` for each transaction. For example, `1: 500` represents a withdrawal of 500 from account1, and `2: 2000` represents a withdrawal of 2000 from account2.\n\nThe function should include robust error handling to check if the user's input is valid, and if the amount to withdraw is larger than the account balance. The function should also ensure that the bank teller has the ability to withdraw money from all three accounts at the same time."}, {"instruction": "Design a Python function that pools and releases resources from a source that provides an infinite number of resources. The function should lock and unlock the resources as necessary to limit the number of tasks that access these resources concurrently."}, {"instruction": "Design a Python function that implements a mutex-based locking mechanism for a set of resources. The function should take as input a list of resources and a target number of processes. Each process should acquire the lock for a specified number of resources (target) and then release the lock once they are done using the resources. The function should ensure that the lock is correctly acquired and released for each process. Include robust error handling to manage invalid inputs such as negative number of resources or processes, or if the target number of processes exceeds the number of resources. The function should output any log messages or results as necessary to ensure the correct operation of the mutex-based locking mechanism.\n\nFor example, given a list of resources `['a', 'b', 'c']` and a target of 2, the function should ensure that only two processes can acquire the lock at a time, with each process obtaining only 2 resources. If the target number of processes exceeds the number of resources, the function should return an error or log an appropriate message to indicate the issue."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: type-safe access to a variable, stack manipulation, metatable, Lua argument validation\n\n### Task", "fingerprint": null, "content": {"code": "static int\r\nTypedObject_gettype(lua_State* L)\r\n{\r\n\tDbgScriptHostContext* hostCtxt = GetLuaProvGlobals()->HostCtxt;\r\n\tCHECK_ABORT(hostCtxt);\r\n\t\r\n\t// Validate that the first param was 'self'. I.e. a Userdatum of the right\r\n\t// type. (Having the right metatable).\r\n\t//\r\n\tDbgScriptTypedObject* typObj = (DbgScriptTypedObject*)\r\n\t\tluaL_checkudata(L, 1, TYPED_OBJECT_METATABLE);\r\n\r\n\tlua_pushstring(L, typObj->TypeName);\r\n\t\r\n\treturn 1;\r\n}", "docstring": "//\r", "function_name": "TypedObject_getsize"}, "id": 198, "seed": "static int\r\nTypedObject_gettype(lua_State* L)\r\n{\r\n\tDbgScriptHostContext* hostCtxt = GetLuaProvGlobals()->HostCtxt;\r\n\tCHECK_ABORT(hostCtxt);\r\n\t\r\n\t// Validate that the first param was 'self'. I.e. a Userdatum of the right\r\n\t// type. (Having the right metatable).\r\n\t//\r\n\tDbgScriptTypedObject* typObj = (DbgScriptTypedObject*)\r\n\t\tluaL_checkudata(L, 1, TYPED_OBJECT_METATABLE);\r\n\r\n\tlua_pushstring(L, typObj->TypeName);\r\n\t\r\n\treturn 1;\r\n}", "__index_level_0__": 54, "concepts": ["type-safe access to a variable", "stack manipulation", "metatable", "Lua argument validation"], "parsing_result": [{"instruction": "Implement a solution to the following problem in Lua:\n\nGiven an array of numbers, return a new array that only includes the numbers and their indices where the number is even.\n\nFor example, given [1, 2, 3, 4], the function should return [2, 4].\n\nUse the `pairs` metamethod to iterate through the array elements."}, {"instruction": "Create a Lua function that takes a variable `n` as input. Implement a Lua function that accesses the `n`-th element of a stack of 5 elements. The function should be type-safe with compile-time error checking on the expected value of `n`. The function should throw an error when `n` is less than 1 or greater than 5. Write assertions to ensure the function can be used safely."}, {"instruction": "Design two Lua functions: `set_var(key, value)` and `get_var(key)`. The first function saves the value of the variable `value` with the key `key` in a global variable in a Lua table. The second function returns the saved value of the variable with key `key`.\n\nWrite assertions to validate the input parameters `key` and `value` in the functions. The function should also set an error message if `key` is not a string. Add the key-value pair only if the value is not already saved with the same key."}, {"instruction": "Write a Lua function that takes an integer as argument and decodes it to the original 5-bit-chunked value. The function should also implement assertions that validate the function's arguments."}, {"instruction": "Create a new Lua function to call a Lua function with 2 arguments and return its call result. This function should be type-safe by setting metatable of the input values, so that the function cannot be called with invalid arguments."}, {"instruction": "Create a Python function to implement a stack data structure with push, pop, and peek operations. The stack should follow the LIFO (Last In First Out) behavior where the last pushed element is the first popped. The function should return a stack object (e.g., a dictionary) with the following three entries:\n\n- `push(x)`: add the number `x` to the stack\n- `pop()`: remove and return the last pushed element from the stack\n- `peek()`: return the last pushed element without removing it from the stack\n\nUtilize the `metatable` feature of Lua and the `__index` metamethod to define an access modifier that prevents direct access of the stack object. The function should return an error if an attempt is made to modify the stack object directly."}, {"instruction": "Create a Lua function to accept a variable and return its type. This function should be more efficient than `type()` and `getmetatable()` functions."}, {"instruction": "Create a Lua function to generate a random string of specified length and character set. The function should validate the argument types, ensure the string length is within the range, and return the generated string."}, {"instruction": "Given a Lua function, implement a version of this function that is safe to call even if the underlying function is nil. To do this, the function should throw an error if the underlying function is nil, or add a new metatable with new-index and index operations to the underlying function's metatable."}, {"instruction": "Create a Lua function that takes a Lua table as its input and prints the contents of the table in the order of their values. A Lua table is considered to be in order if its keys are integers and its values are of the same type."}, {"instruction": "Create a function to return an accessor to a variable, which keeps track of the number of times it has been invoked. The accessor should include a `count` property that returns the number of times the variable has been accessed. When the variable is accessed, this count should be incremented by 1. Use the metatable to save some memory. The accessor should accept a `type` as an optional input argument. If the input type is `number`, the return value should be the accessor's number property. If the input type is `string`, the return value should be the accessor's string property."}, {"instruction": "Create a program that implements a function to print a nested list, with each element on a new line. The order of the items in the nested list should be as follows:\n\n- first: a list of integers,\n- second: a list of strings,\n- third: a list of lists of integers,\n- fourth: a list of lists of strings,\n- etc.\n\nThe nested list may be of any depth. The function should be type-safe, and should not allow any invalid input."}, {"instruction": "Write a function to calculate the value of a function for a specified variable value when the variable is set to a specific value.\n\nWrite a Python function to calculate the value of the following function for a specified variable value when the variable is set to a specific value. Use a metatable to intercept the access to the variable.\n\n$$\n\\mathbf{f}(x) = 3x^2 + 2x - 1\n$$\n\nThe function should work for a series of variable names and values, and return an empty string if the variable name is invalid."}, {"instruction": "Write a Lua function that takes two integer arguments, `n` and `m`, representing two non-negative integers. Create a Lua table of size `n` to represent a stack of `n` elements. Return a function that can be called to push a new element onto the top of the stack; the new element's value is the next integer in the sequence `0, 1, 2, ..., m`.\n\n```lua\nlocal stack = create_stack(5, 10)\nstack() -- 0\nstack() -- 1\nstack() -- 2\nstack() -- 3\nstack() -- 4\nstack() -- 5\nstack() -- 6\nstack() -- 7\nstack() -- 8\nstack() -- 9\nstack() -- 0\n```\n\nThe function should only be called with two arguments and the first argument should be a non-negative integer. If the function is called with less than two arguments or with the wrong types, raise a `type_error` with a descriptive message."}, {"instruction": "Implement a Lua function with the following signature:\n```lua\nfunction my_function(a, b, c)\nend\n```\n\nThe function should accept three input arguments, `a`, `b`, and `c`, of type number. Write assertions to ensure that `a` is always greater than `b`, and that `c` is always greater than `a`."}, {"instruction": "Write a Lua function to increment the value of a variable by 1. However, the function should not be called if the variable does not exist. Provide type safety for the variable and prevent its value from being changed to non-numeric types. Utilize metatables to intercept operations on the variable, and Lua argument validation to ensure the function is called with a numeric variable as input."}, {"instruction": "Create a Lua function that takes a variable number of arguments of arbitrary types. The function should return the first value of the first argument whose type is compatible with the subsequent arguments."}, {"instruction": "Design a Lua function that takes a table and a key as input and returns the value of the key from the table. The function should also check if the key exists and if it is a valid input variable. Utilize metatable to protect the key from accidental changes."}, {"instruction": "Write a function that takes an integer from the user input and returns integer part of the square root of the number. The function should be type-safe with checks for both input and output values."}, {"instruction": "Write a function that allows accessing a variable using a string. The function should accept a variable name, and return the value of the variable, or throw an error if the string does not correspond to a variable."}, {"instruction": "Design a Lua function that accepts a variable number of arguments of type `string` and returns a `string` containing the contents of these arguments. The function must also validate the type of each argument."}, {"instruction": "Create a function that takes a table `input_args` and checks whether it meets the following requirements:\n\n- it has two keys: `first_arg` and `second_arg`\n- `first_arg` is a number\n- `second_arg` is a string\n\nIf the input meets the above requirements, the function should return a Lua call statement that converts the input to the following Lua code:\n\n```lua\nreturn first_arg .. second_arg\n```\n\nIf the input does not meet the above requirements, the function should raise an error with an appropriate error message."}, {"instruction": "Design a Python function that takes a structure with nested objects and variables defined by a user-provided key and returns the value of this variable. Use metatables to extend the functionality of the function to support nested object types. In addition, provide assertions to prevent the user from accessing invalid variables."}, {"instruction": "Write a Python function that implements a stack data structure where only the top element can be accessed. The function should accept an arbitrary number of arguments and return a stack object, which should have a function `pop()` that removes and returns the top element from the stack. Do not explicitly store the stack elements in the function body. Implement the function using type-safe access to a variable.\n\nUse metatable to block access to the internal stack object via the returned stack object. The returned stack object should also have a `peek()` function that returns the top element without removing it.\n\nProvide assertions to check the validity of the function inputs."}, {"instruction": "Create a Python function to add the values of two non-negative integers that are represented as two Lua tables. Use metatables to enforce type checking prior to adding the integer values."}, {"instruction": "Here is a simple Lua program that prints the sum of two positive integers.\n\n```lua\nlocal Argument = require('Argument')\n\nlocal a, b = Argument.get_arguments(2, 2)\n\nprint(a + b)\n```\n\nWrite a Python function to play the role of the Lua interpreter in this program. It should be able to parse the input arguments and validate the types of the arguments. If the types are invalid, the function should raise an exception."}, {"instruction": "Create a Python function that takes a stack-like structure with the push, pop, and peek operations, and returns a copy of the stack without the top element, guaranteeing the original stack is unchanged. The function should also be type-safe, meaning the function should fail with an error if the stack is empty."}, {"instruction": "Create a Lua function to validate the input arguments to the following operations:\n\n- `add` - takes two numerical arguments and returns the sum of them\n- `subtract` - takes two numerical arguments and returns the difference between them\n- `multiply` - takes two numerical arguments and returns their product\n- `divide` - takes two numerical arguments and returns their quotient\n\nThe function should perform input argument validation checks by type-safe access to a variable, stack manipulation, metatable, and return `nil` if the input arguments are not correct."}, {"instruction": "Create a Python function to check if all arguments passed to it are of the specified type. For instance, given a, b, and c, the function should return True if and only if a, b, and c are all integers. If the provided arguments are all integers, the function should return False if and only if any of the integers are negative numbers. Employ metatable calls to check for type-safe access to the object. Employ stack manipulation to handle multiple arguments. Utilize a Lua argument validation to check for invalid inputs."}, {"instruction": "Create a Lua function that takes an integer and returns a string wherein each row represents a line of the integer in binary form, and each line contains individual characters for each bit of the integer. For example, `10` would be `010` (10), `11` would be `011` (11), and `1010` would be `011` (10), `1010` (10).\n\nThe function should be type-safe and validate all inputs."}, {"instruction": "Design a Python function that takes a list of integers and a target sum and returns a boolean value indicating whether or not there exists a pair of elements within the list whose sum is equal to the target. The function must be written without using any `list` methods such as `.index()` and `.count()`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: graph implementation, graph traversal, multiset functions, conditional function composition, nested loops, variable initialization\n\n### Task", "fingerprint": null, "content": {"code": "int prim(int u)     // prim \u6c42\u8fde\u901a\u5757 u \u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\n{\n\tint res = 0;    // res \u8bb0\u5f55\u751f\u6210\u6811\u7684\u5927\u5c0f\n\tmemset(dist, 0x3f, sizeof dist); // \u5c06 dist \u5236\u4e3a\u6b63\u65e0\u7a77\n\tmemset(st, false, sizeof st);    // \u7531\u4e8e\u8981\u591a\u6b21\u4f7f\u7528 st\uff0c\u6240\u4ee5\u6bcf\u6b21\u8981\u5148\u5c06 st \u5236\u6210 false\n\tfor (int i = 0; i < dcc[u].size(); i++) // \u6269\u5c55 dcc[u].size() \u6b21\n\t{\n\t\tint t = -1;\n\t\tfor (int j = 0; j < dcc[u].size(); j++) // \u679a\u4e3e\u4e00\u4e0b\u5f53\u524d\u8fde\u901a\u5757 u \u4e2d\u6240\u6709\u70b9\n\t\t{\n\t\t\tint ver = dcc[u][j];                  // \u5c06\u8be5\u70b9\u53d6\u51fa\n\t\t\tif (!st[ver] && (t == -1 || dist[t] > dist[ver])) // \u5982\u679c\u8be5\u70b9\u4e0d\u5728\u751f\u6210\u6811\u4e2d\u4e14\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u5927\u4e8e\u5230\u70b9 t \u7684\u8ddd\u79bb\n\t\t\t\tt = ver;                          // \u90a3\u4e48\u8ba9\u5c06 t \u6539\u4e3a\u8be5\u70b9\n\t\t}\n\t\tif (i) res += dist[t];                    // res \u52a0\u4e0a\u5230\u5df2\u6709\u751f\u6210\u6811\u4e2d\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u5230\u5df2\u6709\u751f\u6210\u6811\u7684\u8ddd\u79bb\n\t\tst[t] = true;                             // \u5c06\u8be5\u70b9 t \u52a0\u5165\u5df2\u6709\u751f\u6210\u6811\n\t\tfor (int j = 0; j < dcc[u].size(); j++) // \u66f4\u65b0\u5f53\u524d\u8fde\u901a\u5757\u4e2d\u6240\u6709\u70b9\n\t\t{\n\t\t\tint ver = dcc[u][j];                  // \u5c06\u8be5\u70b9\u53d6\u51fa\n\t\t\tdist[ver] = min(dist[ver], g[t][ver]);// \u66f4\u65b0\u8be5\u70b9\u8ddd\u79bb\n\t\t}\n\t}\n\treturn res;     // \u8fd4\u56de\u8be5\u751f\u6210\u6811\u7684\u5927\u5c0f\n}", "docstring": "// \u90a3\u4e48\u641c\u7d22\u70b9 i", "function_name": "dfs"}, "id": 202, "seed": "int prim(int u)     // prim \u6c42\u8fde\u901a\u5757 u \u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\n{\n\tint res = 0;    // res \u8bb0\u5f55\u751f\u6210\u6811\u7684\u5927\u5c0f\n\tmemset(dist, 0x3f, sizeof dist); // \u5c06 dist \u5236\u4e3a\u6b63\u65e0\u7a77\n\tmemset(st, false, sizeof st);    // \u7531\u4e8e\u8981\u591a\u6b21\u4f7f\u7528 st\uff0c\u6240\u4ee5\u6bcf\u6b21\u8981\u5148\u5c06 st \u5236\u6210 false\n\tfor (int i = 0; i < dcc[u].size(); i++) // \u6269\u5c55 dcc[u].size() \u6b21\n\t{\n\t\tint t = -1;\n\t\tfor (int j = 0; j < dcc[u].size(); j++) // \u679a\u4e3e\u4e00\u4e0b\u5f53\u524d\u8fde\u901a\u5757 u \u4e2d\u6240\u6709\u70b9\n\t\t{\n\t\t\tint ver = dcc[u][j];                  // \u5c06\u8be5\u70b9\u53d6\u51fa\n\t\t\tif (!st[ver] && (t == -1 || dist[t] > dist[ver])) // \u5982\u679c\u8be5\u70b9\u4e0d\u5728\u751f\u6210\u6811\u4e2d\u4e14\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u5927\u4e8e\u5230\u70b9 t \u7684\u8ddd\u79bb\n\t\t\t\tt = ver;                          // \u90a3\u4e48\u8ba9\u5c06 t \u6539\u4e3a\u8be5\u70b9\n\t\t}\n\t\tif (i) res += dist[t];                    // res \u52a0\u4e0a\u5230\u5df2\u6709\u751f\u6210\u6811\u4e2d\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u5230\u5df2\u6709\u751f\u6210\u6811\u7684\u8ddd\u79bb\n\t\tst[t] = true;                             // \u5c06\u8be5\u70b9 t \u52a0\u5165\u5df2\u6709\u751f\u6210\u6811\n\t\tfor (int j = 0; j < dcc[u].size(); j++) // \u66f4\u65b0\u5f53\u524d\u8fde\u901a\u5757\u4e2d\u6240\u6709\u70b9\n\t\t{\n\t\t\tint ver = dcc[u][j];                  // \u5c06\u8be5\u70b9\u53d6\u51fa\n\t\t\tdist[ver] = min(dist[ver], g[t][ver]);// \u66f4\u65b0\u8be5\u70b9\u8ddd\u79bb\n\t\t}\n\t}\n\treturn res;     // \u8fd4\u56de\u8be5\u751f\u6210\u6811\u7684\u5927\u5c0f\n}", "__index_level_0__": 55, "concepts": ["graph implementation", "graph traversal", "multiset functions", "conditional function composition", "nested loops", "variable initialization"], "parsing_result": [{"instruction": "Implement a Python function `compute_isomorphic_graphs` that takes two graphs and returns a boolean representing whether they are isomorphic. The function should compare pairs of nodes in the two graphs, and determine if each pair is isomorphic. The function should return `True` if all pairs of nodes in the two graphs are isomorphic; otherwise, it should return `False`.\n\nThe `Graph` class should be initialized with a dictionary-based representation of the graph's nodes. Each node should be represented by a dictionary, where each key-value pair represents a neighbor of the node. The value associated with a key is the node's name. For example, the following graph:\n\n![graph-example](assets/graph-example.png)\n\nCan be represented as:\n```python\n{\n    \"Node1\": {\"Node2\": \"Edge1\", \"Node3\": \"Edge2\"},\n    \"Node2\": {\"Node1\": \"Edge3\", \"Node4\": \"Edge4\"},\n    \"Node3\": {\"Node1\": \"Edge5\", \"Node4\": \"Edge6\"},\n    \"Node4\": {\"Node2\": \"Edge7\", \"Node3\": \"Edge8\"}\n}\n```\n\nThe function `compute_isomorphic_graphs` should use a depth-first search to traverse the graph and compare each pair of nodes. For each pair of nodes, it should perform a recursive function call on the `isomorphic_pair` function, which compares the pair of nodes. The function `isomorphic_pair` should compare the neighbors of the two nodes and return `True` if the neighbors are isomorphic, or `False` if not.\n\nThe function `isomorphic_pair` should then call the `isomorphic_neighbor_pair` function, which compares the pair of neighbors of the two nodes. The function `isomorphic_neighbor_pair` should return `True` if the neighbors are isomorphic, or `False` if not.\n\nTo handle cases where the two graphs have different number of nodes, the function should make sure to compare all pairs of nodes from the smaller graph to the larger graph."}, {"instruction": "Here is an example graph visualization using a multiset:\n\n![graph-multiset](./static/graph-multiset.png)\n\nwhere each node `v` is represented by a tuple `(v, label)`, where `v` is an integer representing the node's ID and `label` is a string representing the node's label. The edges of the graph are stored in a multiset `edges`. A multiset is a set that allows duplicates. The graph is undirected and can contain self-loops.\n\nWrite a Python function to determine if a graph is cyclic. A graph is cyclic if there exists a path from any node to itself."}, {"instruction": "Create a Python function `count_paths` that accepts a graph represented in the form of two lists of nodes: `nodes` and `edges`, and returns the number of paths from one node to another. The graph is represented as two lists of nodes. Each node is represented as a string and each edge is represented as a tuple of two nodes.\n\nThe graph traversal should use a recursive function `paths_from_to`, which receives the graph as input. The function should accept two arguments: `from_node` and `to_node`, and should return all paths from `from_node` to `to_node`. A path is represented as a tuple of nodes, where each node is a string representing a node in the graph. To solve this problem, use a recursive function `paths_from_to`, which accepts the graph and two nodes as inputs.\n\nThe function `paths_from_to` should create a list of paths from `from_node` to `to_node` by recursively calling itself on the `edges` list. It should add a path to the list of paths if the current node is `to_node`, and it should call itself on the `edges` list if the current node is not `to_node`.\n\nThe function `paths_from_to` should also call itself on the `edges` list if the current node is not `to_node`.\n\nTo find all paths from `from_node` to `to_node`, the function `paths_from_to` should call itself on the `edges` list.\n\nThe function `paths_from_to` should return a list of all paths in the form of tuples of nodes."}, {"instruction": "Design a Python function `longest_path` that takes an undirected graph as input and returns the longest path in the graph. The input graph is represented as a dictionary where the keys are nodes and the values are lists of neighboring nodes. The function should return a list of nodes representing the longest path between any two nodes in the graph.\n\nEach node in the dictionary can be represented as a unique integer. For example, the graph with nodes `{1: [2, 3], 2: [1], 3: [1]}` should be represented as a dictionary `{1: [2, 3], 2: [1], 3: [1]}` in this exercise.\n\nThe function should use Breadth-First Search (BFS) to traverse the graph and return the longest path. BFS is a well-known graph traversal algorithm. The algorithm works by exploring nodes in layers, starting with the root node and proceeding to its neighbors, then its neighbors, and so on. The longest path is the path that visits all nodes in the graph with the most layers."}, {"instruction": "Create a Python function `reachable_from` that accepts two arguments: `graph`, a dictionary representing a directed graph, and `start`, a starting vertex. The function should return a list of all reachable vertices from the starting vertex.\n\nThe graph is represented by a dictionary where the keys are the vertices, and the values are the edges. Each edge is represented as a tuple of two vertices: `(u, v)`. The graph should be read as an undirected graph, hence, an undirected edge `(u, v)` should be treated as if it has both `(u, v)` and `(v, u)` directions.\n\nThe function should traverse the vertices of the graph using BFS (Breadth-First Search) algorithm. The function should handle cycles in the graph gracefully by not traversing them."}, {"instruction": "Create a Python function named `get_connected_nodes` that takes two nodes `n1` and `n2` in a graph as input arguments, and returns a list of nodes that are connected to both `n1` and `n2`. Assume the graph is represented as a dictionary that maps each node to a list of its adjacent nodes.\n\nThe function should use the following steps to find the connected nodes:\n1. Create a new set `nodes` and add the nodes `n1` and `n2` to the set.\n2. For each node in the `nodes` set, traverse the graph and add all adjacent nodes to the set.\n3. Repeat from step 2 until the size of `nodes` doesn't change.\n4. Return the `nodes` set."}, {"instruction": "Develop a Python function that returns the minimum number of items required to make a graph. The function should take two arguments: `graph` and `multiset`. The `graph` argument is a list of edges, where each edge is represented as a tuple `(u, v)` where `u` is a starting node and `v` is an end node. The `multiset` argument is a list of items, where each item is represented as a tuple `(u, v)` where `u` is a starting node and `v` is an end node. Each edge is associated with a weight.\n\nThe function should return the minimum number of items required to make a graph, where each edge is used at most once and the items are used at most once. Use the `graph` and `multiset` to construct a graph, where each edge is represented by an item. If an edge is not associated with any item, the item is represented by an empty string.\n\nThe graph traversal for this problem is done through DFS (depth-first search), where the starting node is always the first item in the `multiset` argument.\n\nFor example, given the `graph` argument `[('a', 'b'), ('b', 'c'), ('c', 'd')]` and the `multiset` argument `[('a', 'd'), ('b', 'c'), ('b', 'a'), ('d', 'a'), ('d', 'b'), ('c', 'a'), ('c', 'b')]`, the function should return the minimum number of items required to make a graph, where each edge is used at most once and the items are used at most once. In this case, the minimum is `1`, since the graph can be constructed through the sequence of items `'a', 'b', 'c', 'd'`."}, {"instruction": "Implement a Python function to check if a given directed graph is strongly connected (i.e. each vertex can reach every other vertex). You can assume that all edges in the graph are undirected."}, {"instruction": "Create a Python function `dfs` that takes a graph as an input and an initial node as an argument, returning a list of nodes that are visited in a DFS (depth-first search) traversal of the graph. The function should support iterative and recursive traversal approaches.\n\nThe graph is represented as a Python dictionary, where the keys are the node names and the values are the lists of adjacent nodes. The function should handle invalid inputs such as an invalid graph or an initial node that is not in the graph."}, {"instruction": "Implement a Python function to traverse a graph where nodes can be visited when called and edges represent relations between nodes. The function should return a list of all the visited nodes in the order they were visited, where each node is represented as a tuple of node types.\n\nYour implementation should include edge cases to handle nodes that are not connected, self-loops, and disconnected graphs."}, {"instruction": "Implement a Python function that traverses a graph starting from a given node. You should model the graph as a dictionary where each node is associated with a list of its neighbors. The function should return a list of visited nodes in the order they are visited."}, {"instruction": "Implement a Python function to traverse a graph (or tree) using a BFS and a DFS, and determine whether the graph is connected. The graph is defined as a dictionary that maps vertices to neighbors. The function should return a boolean indicating whether the graph is connected.\n\nThe BFS and DFS traversals should be implemented using a helper function that accepts a starting vertex as an argument, and traverses the graph starting from that vertex. The function should recursively call itself to traverse the neighbors of the current vertex, and return a boolean indicating whether the graph is connected."}, {"instruction": "Here's a directed graph data structure:\n\n```\nclass Graph:\n    def __init__(self, nodes: list):\n        self.adj_list = {node: [] for node in nodes}\n\n    def add_edge(self, src: str, dst: str) -> None:\n        self.adj_list[src].append(dst)\n\n    def is_connected(self, src: str, dst: str) -> bool:\n        if src == dst:\n            return True\n\n        visited = set()\n        queue = [src]\n        while queue:\n            node = queue.pop(0)\n            if node == dst:\n                return True\n            if node in visited:\n                continue\n            visited.add(node)\n            queue.extend(self.adj_list[node])\n        return False\n```\n\nImplement a Python function `is_connected` to check if two nodes in the graph are connected."}, {"instruction": "Write a Python function that implements the graph traversal algorithm of Dijkstra's algorithm over a weighted, directed graph. The graph is represented as an adjacency list where the keys are nodes and the values are lists of edge-weight pairs, where the first element in the pair is the destination node and the second element is the edge-weight. The function should accept three inputs:\n- `source`: the node from which the traversal begins\n- `target`: the node to which the traversal ends\n- `graph`: the graph to be traversed\n\nEnsure that the function returns the shortest distance from `source` to `target` and the path traversed to get there."}, {"instruction": "Implement a Python function `connected_components` that takes a graph as input and returns a list of connected components of the graph. A connected component is a subset of the vertices in the graph that are connected to each other.\n\nEach connected component should be represented as a multiset of vertices. Here's an example of an input graph:\n\n![example graph](example_graph.png)\n\nThis graph should return the following list of connected components:\n\n```\n[\n    {1, 2, 3},\n    {4, 5, 6, 7},\n    {8, 9, 10},\n    {11, 12}\n]\n```\n\nThe graph is represented as a dictionary where the keys are vertices, and the values are the neighbors of that vertex. Each edge is represented as a tuple of vertices that are connected by that edge."}, {"instruction": "Given a 2D `grid` of 0s and 1s, representing a pathway with a start point and an end point. The pathway is represented by a `list` of `list` of integers, where a 1 represents a blocked path, and a 0 represents a free path. Each cell in the grid can be accessed by its row and column index.\n\nWrite a Python function that determines whether there exists a path from the start point to the end point. A path can move either up, down, left, or right. The path cannot move diagonally, wrap around the grid, or move outside the grid."}, {"instruction": "Write a Python function to determine if a directed graph is strongly connected. A directed graph is strongly connected if and only if the reverse graph is also strongly connected. The function should take a directed graph as an input and return `True` if it's strongly connected and `False` otherwise."}, {"instruction": "Implement a Python function `bfs_graph` that accepts two arguments: a `start_node` and a `graph`, where `graph` is a dictionary of node names to list of node names. The function should return a list of node names in the breadth-first-search (BFS) traversal order from the given `start_node`. You should use the BFS algorithm to traverse the graph.\n\nThe function should handle binary edges in the graph, i.e., when a node has only one edge, both its children are added to the queue before the node itself. The function should also handle disconnected graphs."}, {"instruction": "Implement a Python function `get_all_node_pairs` that takes a graph and returns all its node pairs. Use the `networkx` package to create a graph and implement a Python function to compute a graph's node pairs."}, {"instruction": "Implement a Python function `find_all_paths` that accepts two arguments: `graph` and `start_node`, where `graph` is an adjacency list of a graph represented as a dictionary and `start_node` is the starting node of the paths to be found. The function should return a list of the paths that exist from the `start_node` to all other nodes in the graph."}, {"instruction": "Implement a Python function `next_possible_graph` that takes a graph with `n` vertices as input, where each vertex stores a multiset of `n` values and returns the next possible graph with `n+1` vertices. The function should manage multisets using function composition.\n\nFor example, given a vertex `A` with the multiset `[1, 2, 3]` and a vertex `B` with the multiset `[1, 2, 3, 4, 5, 6]`, the function should return a vertex `C` with the multiset `[1, 2, 3, 4]`."}, {"instruction": "Develop a Python function that returns a list of all possible paths from the origin to the destination point in a 2D world. This function accepts three arguments: `origin`, `destination`, and `graph`. The `graph` is a list of 2D `coordinates` that defines a graph. The function should return a list of paths, where each path is a list of coordinates that defines the sequence of coordinates from the origin to the destination. The function should only traverse in straight lines.\n\nYou can assume that the `origin` and `destination` are valid coordinates and that the `graph` contains no repeated coordinates or invalid paths. You can also assume that the `graph` is a connected graph."}, {"instruction": "Implement a Python function that generates all valid permutations of a given string. A valid permutation is a sequence of characters where no character appears more than once."}, {"instruction": "Create a Python function that implements a graph traversal algorithm. Given a graph represented by two input arrays, `vertices` and `connections`, where each vertex is an integer and each connection is a pair of vertices, the function should output the sequence of vertices as a list. The traversal should start from the first vertex and continue until all vertices are visited. Use recursion to implement the traversal."}, {"instruction": "Develop a Python function `find_max_set` that returns a set of all the non-empty subsets of a given multiset. Here is an example of the multiset `[1, 2, 3, 4]`:\n\n$$\n\\begin{aligned}\n    &\\text{The 0th subset: } {} \\\\\n    &\\text{The 1st subset: } {} \\\\\n    &\\text{The 2nd subset: } {} \\\\\n    &\\text{The 3rd subset: } {} \\\\\n    &\\text{The 4th subset: } {} \\\\\n    &\\text{The 5th subset: } {} \\\\\n    &\\text{The 6th subset: } {} \\\\\n    &\\text{The 7th subset: } {} \\\\\n    &\\text{The 8th subset: } {} \\\\\n    &\\text{The 9th subset: } {} \\\\\n\\end{aligned}\n$$\n\nThe function should return the maximum set based on criteria:\n\n$$\n\\text{The maximum set should contain the largest number of subsets that are equal to the number of elements in the multiset.}\n$$\n\nFor example, for the multiset `[1, 2, 3, 4]`, the function should return `{}`, `{}`, `{}`, `{}`, `[1]`, `[2]`, `[3]`, `[4]`, `[1, 2]`, `[1, 3]`, `[1, 4]`, `[2, 3]`, `[2, 4]`, `[3, 4]`, `[1, 2, 3]`, and `[1, 2, 4]`."}, {"instruction": "Create a Python function to search a graph for paths between two nodes. The function should take a graph represented as a dictionary and two node labels as inputs. The function should return a list of lists, where each sublist is a set of nodes that form a valid path between the two input nodes.\n\nFor example, given this graph:\n\n```python\ngraph = {\n    'A': ['B', 'D'],\n    'B': ['C', 'E'],\n    'C': ['D', 'E'],\n    'D': ['B', 'E', 'F'],\n    'E': ['F'],\n    'F': ['E'],\n}\n```\n\nand nodes `A` and `E`, the function should return the following list of lists:\n\n```python\n[['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'E'], ['A', 'D', 'B', 'E'], ['A', 'D', 'E']]\n```\n\nThe function should also handle cyclic graphs."}, {"instruction": "Implement a Python function `count_distinct_pairs` that counts the distinct pairs of integers within a multiset (list or set) such that their sum equals the input integer `target`. The function should return the total number of such distinct pairs.\n\nThe function doesn't have to be efficient, and it's okay if the function takes quadratic time. To make the function more efficient, we can make use of caching to store previously computed results.\n\nHere are a few examples of how the function should behave:\n\n- For the input `multiset = [6, 9, 5, 7, 5, 7]`, and `target = 12`, the function should return `3`, since there are `2 + 5 + 7` and `5 + 7 + 7`, and `6 + 6`.\n- For the input `multiset = [1, 2, 3, 4, 5, 6, 7, 8]` and `target = 10`, the function should return `7`, since there are `1 + 9`, `2 + 8`, `3 + 7`, `4 + 6`, `5 + 5`, `6 + 4`, `7 + 3`, and `8 + 2`, in total.\n- For the input `multiset = [7, 7, 7, 7, 7]` and `target = 7`, the function should return `6`, since all the elements in `multiset` are `7`, and they form a pair of `7 + 7` for each value of `i`."}, {"instruction": "Implement Graph Traversal Algorithms in Python. The algorithms should support the following operations:\n\n- `add_node`\n- `get_node`\n- `has_node`\n- `add_edge`\n- `has_edge`\n- `get_edges`\n- `get_neighbors`\n- `get_weight`\n- `get_betweenness`\n- `get_closeness`\n- `get_density`\n\nThe graph should be represented in the form of a dictionary of node names and a set of edges. The graph should support both directed and undirected edges. The graph should not allow self-loops or parallel edges.\n\nAdditional functions are available, which can be used by implementing the above functions:\n\n- `is_connected`\n- `get_isolated_nodes`\n- `get_edge_count`\n- `get_node_count`\n\nThe `is_connected` method should return `True` if the graph is connected and `False` otherwise. The `get_isolated_nodes` method should return all isolated nodes as a list. The `get_edge_count` method should return the total number of edges in the graph. The `get_node_count` method should return the total number of nodes in the graph.\n\nThe `get_betweenness` method should return a dictionary of betweenness values, where each betweenness value is a list of tuples, each of which consists of the name of the node and its betweenness value. The `get_closeness` method should return a dictionary of closeness values, where each closeness value is a list of tuples, each of which consists of the name of the node and its closeness value. The `get_density` method should return the density of the graph."}, {"instruction": "Implement a Python function `find_connected_components` that takes a directed graph as an input argument. The graph is represented as a dictionary of nodes and their outgoing edges as dictionaries. The function should return a list of connected components as lists of nodes. Here are some sample directed graphs:\n\n```python\ngraph = {\n    \"A\": {\n        \"B\": {},\n        \"C\": {},\n        \"D\": {}\n    },\n    \"B\": {\n        \"E\": {},\n        \"F\": {}\n    },\n    \"C\": {\n        \"A\": {},\n        \"F\": {}\n    },\n    \"D\": {\n        \"E\": {},\n        \"A\": {}\n    },\n    \"E\": {\n        \"F\": {}\n    },\n    \"F\": {}\n}\n```"}, {"instruction": "Implement a Python function to return all the paths between two nodes in an undirected graph. The graph is represented by a list of edges, where each edge is represented by a tuple of (start_node, end_node).\n\n```python\n# An example graph\ngraph = [\n    (0, 1), (0, 2), (1, 2), (2, 3), (2, 4),\n    (3, 5), (3, 6), (4, 7), (4, 8), (5, 8),\n    (6, 8), (6, 9), (7, 9), (8, 9)\n]\n```\n\nThe function should accept a start and end node as inputs and return a list of all paths between the two nodes. A path is a list of nodes, where each node is a vertex in the graph."}, {"instruction": "Implement a Python function `is_bipartite_graph` that takes a graph as input and returns `True` if the graph is bipartite, `False` otherwise. A bipartite graph is a graph that can be divided into two independent sets (`A` and `B`) such that no edge connects any two nodes from `A` and `B`. You should use the BFS (breadth-first search) algorithm to traverse the graph."}, {"instruction": "Develop a Python function `get_path_length` that, given a graph (represented by a collection of vertices and edges), a starting vertex, and an ending vertex, returns the shortest path length between these two vertices. The function should leverage the depth-first search (DFS) algorithm to traverse the graph recursively.\n\nThe graph should be represented as `namedtuples` with vertex and edge attributes. The function should return `None` if the path cannot be found or the graph is invalid."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: mutex synchronization, memory visibility, locking, thread-safe operations\n\n### Task", "fingerprint": null, "content": {"code": "int GetNumOfConnectionATM()\n{\n\t//std::lock_guard<std::mutex> gaurd(mu);\n\treturn NumOfConnectionsATM;\n}", "docstring": "//std::lock_guard<std::mutex> gaurd(mu);", "function_name": "Inc_Dec_ClientCount"}, "id": 207, "seed": "int GetNumOfConnectionATM()\n{\n\t//std::lock_guard<std::mutex> gaurd(mu);\n\treturn NumOfConnectionsATM;\n}", "__index_level_0__": 56, "concepts": ["mutex synchronization", "memory visibility", "locking", "thread-safe operations"], "parsing_result": [{"instruction": "Design a Python program that uses threads to simulate a scenario where a thread is trying to read a value and another thread is updating it. The thread that is reading the value should always see the updated value. The program should be thread-safe."}, {"instruction": "Develop a Python function `threadsafe_sum` to compute the sum of all the numbers contained within a list, while handling concurrent requests from multiple threads. The function should return an integer value."}, {"instruction": "Design a Python function to implement a `Counter` class to maintain a count of occurrences of a given set of items. The class should support the following operations:\n\n- `increment(item)`: increment the count of the given item by one; if the item is not present, create a new entry with count 1\n- `decrement(item)`: decrement the count of the given item by one; if the item is not present, do nothing\n- `decrement_all(items)`: decrement the count of every item in the given list by 1; if an item is not present, do nothing\n- `count(item)`: return the count of the given item\n- `items()`: return the set of all items that have a non-zero count\n- `reset()`: reset the count for all items back to 0\n\nThe class should be thread-safe, and every operation should be atomic."}, {"instruction": "Implement a Python function `lock_counter(counter, lock_value)` that automatically acquires a mutex lock when `counter` exceeds `lock_value`. After the count exceeds `lock_value`, it should wait until a new counter value is lower than `lock_value` before increasing the counter again. Ensure thread safety once the function is used by multiple threads.\n\n#"}, {"instruction": "Implement a Python function that checks whether a given list of integers is in ascending order. The function should be implemented with a lock to ensure thread-safety."}, {"instruction": "We use a mutex lock and a condition variable to implement an efficient reader-writer lock. The lock is initialized as unlocked and the reader count is zero. It can be locked with a read lock or a write lock, and be unlocked. A thread that attempts to acquire the write lock must wait until all existing readers have finished reading. A thread that attempts to acquire the read lock can proceed only if the lock is unlocked or if the lock is currently in write mode. The lock can not be acquired by two threads at the same time.\n- Initially, the lock is unlocked.\n- The `acquire_read` function locks the lock and increments the reader count. Return `True` if the lock is acquired successfully, or `False` if the lock is already locked by a writer.\n- The `acquire_write` function locks the lock. Return `True` if the lock is acquired successfully, or `False` if the lock is already locked by a writer or by a reader.\n- The `release` function unlocks the lock and decrements the reader count. If the lock is now unlocked and no thread is waiting, return `True`. Otherwise, return `False`.\n- The `try_acquire_read` function locks the lock, checks the reader count, and unlocks the lock. If the lock is unlocked or the lock is in write mode, return `True`. Otherwise, return `False`.\n- The `try_acquire_write` function locks the lock and checks the reader count. If the lock is unlocked or the lock is in write mode, return `True`. Otherwise, return `False`."}, {"instruction": "Create a Python program that performs a memory read-modify-write operation on a shared variable `x` with multiple threads. The program must use a mutual exclusive lock to ensure only one thread accesses a shared variable at a time. The lock must be released after the computation is finished."}, {"instruction": "A Python function `double_variable(a, b, c)` modifies three variables `a`, `b`, and `c` by the following rules:\n- `a` is multiplied by 2,\n- `b` is doubled, and\n- `c` is increased by 100.\n\nWrite a Python function that uses the `double_variable` function to update three variables `a`, `b`, and `c` with a matching set of values `A`, `B`, and `C`. The function should use mutex synchronization to achieve thread-safety. The function should be able to handle cases where two threads attempt to modify the same variables simultaneously. In particular, the function should follow the expected behavior for the following cases:\n\n- `A`, `B`, `C` are all different,\n- `A` is equal to `B`,\n- `B` is equal to `C`."}, {"instruction": "Implement a Python function `f(x)` to compute the following function:\n\n$$\nf(x) = \\begin{cases}\n    2x & \\text{if } x \\text{ is even} \\\\\n    x^2 - 1 & \\text{if } x \\text{ is odd}\n\\end{cases}\n$$"}, {"instruction": "Create a Python function that simulates a mutex-protected counter. The function should accept an input `n` and a number of threads `t` as arguments. It should then create `t` threads that run the same function simultaneously and increment the counter `n` times. Each thread should be locked using a mutex and then increment the counter by 1. The function should return a list of the final counter values after incrementing `n` times."}, {"instruction": "Implement a Python function that returns an iterable (e.g., iterator or generator) that traverses the contents of a list in a random order."}, {"instruction": "Create a Python `Queue` class that ensures that all threads that are adding or removing elements from the queue are synchronized. The queue should be implemented using a `list` of integers for storage. The `Queue` class should operate as follows:\n\n- `enqueue(x)`: adds `x` to the queue\n- `dequeue()`: removes and returns the first element in the queue\n- `peek()`: returns the first element in the queue without removing it\n- `is_empty()`: returns `True` if the queue is empty\n- `size()`: returns the number of elements in the queue\n\nThe `Queue` class should be thread-safe, so that multiple threads can safely add or remove elements from the queue."}, {"instruction": "Design a Python function that executes a simulation of a banking system for `n` customers. The function should:\n1. ensure that no two customers' transactions occur simultaneously, i.e., customers should not wait to acquire locks concurrently,\n2. ensure that all transactions are executed in a chronological order (FIFO), and\n3. use thread-local variables to ensure that the result of each transaction is visible to all other transactions."}, {"instruction": "Provide a Python program to create a `thread_safe_counter` that in addition to the usual `increment` and `decrement` operations, has a `get_value` operation that returns the counter's current value."}, {"instruction": "Create a Python function to implement a mutex-synchronization mechanism in a program. The function should ensure that only one thread can access a shared data structure at any given time. The data structure should be used to store a single `int` value with its initial value set to `0`. The function should satisfy the following requirements:\n- The threads should be able to read or increment this value without blocking each other.\n- No two threads should ever be able to increment the value at the same time.\n- The function must support multiple threads calling `increment()` at the same time."}, {"instruction": "Create a Python function `lock_memoized_function` that decorates another Python function to ensure that the returned function is thread-safe. A thread-safe function is one that is guaranteed to return the same result for the same arguments from within any number of threads. The function should be locked simultaneously from within multiple threads."}, {"instruction": "Design a Python function that translates a text string into a series of \"rot13\" encoded characters. The function should support both uppercase and lowercase letters. This is a classic encryption technique that is used to protect data from malicious use."}, {"instruction": "Design a Python function `sorted_list` that returns a sorted list of elements from a list of lists. While the list may be modified, the elements in the list are not. The function should be executed in a thread-safe way, meaning that two or more threads are able to concurrently execute the function."}, {"instruction": "In this challenge, you write a Python function `verify_all_requests` that verifies the validity of a set of HTTP requests. It takes three `list`s as input: `urls`, `headers`, and `bodies`. For each request, the function should return the corresponding response code (e.g., 200 for OK, 403 for Forbidden, etc.)."}, {"instruction": "Implement a Python function that computes the longest palindromic substring in a string using a multithreaded approach. The function should return the longest substring and its length."}, {"instruction": "Develop a Python function to retrieve the most recently added element from a FIFO queue. The function should handle cases where the queue is not empty but is empty."}, {"instruction": "Develop a Python function `threadsafe_product` that computes the product of two positive integers without using multiplication or explicit iteration. This function is thread-safe. If two threads are calling the function with different positive inputs, the output should be the same, no matter which thread is called first."}, {"instruction": "A function `lock_increment(n, x)` is given as an input. The function should increment the variable `x` in a thread-safe manner, and return the **thread-safe** incremented value of `x`. Write a Python program that simulates a series of threads executing this function by providing the `n` value and `x` value. The output of the program should display the total number of times the function is executed, and the total value of `x` after all the threads have been executed."}, {"instruction": "Design a Python function that defines a mutex (mutual exclusion lock) as a Python object. The function should return a function that acquires the lock, a function that releases the lock, and a function that generates a random number in a thread-safe manner. All the functions should be thread-safe."}, {"instruction": "Implement a Python function to perform the following actions on a shared counter:\n1. increment the counter by `1`\n2. double the counter\n3. decrement the counter by `1`\n4. half the counter\n5. return the current value of the counter"}, {"instruction": "Write a Python program that implements a concurrent list-based concurrent dictionary, where threads can retrieve elements from the dictionary without interfering with each other."}, {"instruction": "Design a Python function `compute_parallel(data)` where the input `data` is a list of integers and the function returns a list of the square roots of each element in the list using parallel programming without using built-in functions like `numpy.sqrt` or `math.sqrt`."}, {"instruction": "The `next_prime` function below provides a thread-safe implementation of the Sieve of Eratosthenes that computes the next prime after a given number. However, in the current implementation, it is not thread-safe. Your task is to correct the functions so that it is thread-safe. Use Python's built-in `threading` module to implement a `next_prime` function that can be called concurrently by multiple threads.\n\n```python\ndef next_prime(n):\n    for i in range(n + 1, n + 1000):\n        for j in range(2, int(math.sqrt(i))):\n            if i % j == 0:\n                break\n        else:\n            return i\n\n\ndef main():\n    threads = []\n    for i in range(1000):\n        t = threading.Thread(target=next_prime, args=(i, ))\n        t.start()\n        threads.append(t)\n\n    for t in threads:\n        t.join()\n\n\nif __name__ == '__main__':\n    main()\n```"}, {"instruction": "Design a Python program that prints all prime numbers in a range. It should be thread-safe."}, {"instruction": "Implement a Python function `lock_unbounded_buffer(buffer)` that simulates a lock-free bounded buffer. The `buffer` is an array of fixed-size `buffer_size`. When the buffer is not full, the `lock_unbounded_buffer(buffer)` function will insert an element into `buffer` asynchronously. When the buffer is full, the function will block until the buffer becomes not full. When the buffer is not empty, the `lock_unbounded_buffer(buffer)` function will remove an element from `buffer` asynchronously. When the buffer is empty, the function will block until the buffer becomes not empty."}, {"instruction": "Create a Python function `lock_v1` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers."}, {"instruction": "Create a Python function `atomic_increment(n)` that performs the following steps in an atomic operation:\n- Fetch the value of `n` from memory\n- Increment the value of `n` by 1\n- Store the new value of `n` back to memory"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: stack, stack manipulation, conditional stack manipulation, conditional branching, interrupt routine calling, memory manipulation\n\n### Task", "fingerprint": null, "content": {"code": "void sub_188E1()\n{\n    if (_ds != 0xa000)//??\n    {\n        if (memory(_ds, 0x6471) == 0x01)            //jz short locret_188E0\n            goto locret_188F4;\n    } else {\n        if (memoryVideoGet(_ds, 0x6471) == 0x01)            //jz short locret_188E0\n            goto locret_188F4;\n    }\n    _push(_dx);                                 //push dx\n    _push(_ax);                                 //push ax\n    _dx = 0x03ce;                               //mov dx, 3CEh\n    _al = 0x08;                                 //mov al, 8\n    _out(_dx, _al);                             //out dx, al\n    _dx += 1;                                   //inc dx\n    _ax = _pop();                               //pop ax\n    _out(_dx, _al);                             //out dx, al\n    _dx = _pop();                               //pop dx\nlocret_188F4:                                   //locret_188F4:\n    return;\n}", "docstring": "//pop dx", "function_name": "sub_188CD"}, "id": 210, "seed": "void sub_188E1()\n{\n    if (_ds != 0xa000)//??\n    {\n        if (memory(_ds, 0x6471) == 0x01)            //jz short locret_188E0\n            goto locret_188F4;\n    } else {\n        if (memoryVideoGet(_ds, 0x6471) == 0x01)            //jz short locret_188E0\n            goto locret_188F4;\n    }\n    _push(_dx);                                 //push dx\n    _push(_ax);                                 //push ax\n    _dx = 0x03ce;                               //mov dx, 3CEh\n    _al = 0x08;                                 //mov al, 8\n    _out(_dx, _al);                             //out dx, al\n    _dx += 1;                                   //inc dx\n    _ax = _pop();                               //pop ax\n    _out(_dx, _al);                             //out dx, al\n    _dx = _pop();                               //pop dx\nlocret_188F4:                                   //locret_188F4:\n    return;\n}", "__index_level_0__": 57, "concepts": ["stack", "stack manipulation", "conditional stack manipulation", "conditional branching", "interrupt routine calling", "memory manipulation"], "parsing_result": [{"instruction": "Develop a Python class `ConditionalStack` that implements a stack data structure with conditional element push and pop operations. The class should support pushing and popping elements based on specific conditions. The stack supports the following operations:\n- `push(x: Any)`: Push element `x` onto the stack.\n- `pop()`: Pop the top element of the stack.\n- `is_empty()`: Return `True` if the stack is empty, `False` otherwise.\n- `push_if_positive(x: int)`: If the input value `x` is positive, push it to the stack.\n- `pop_if_not_empty()`: If the stack is not empty, pop the top element from the stack and return it. Otherwise, return `None`.\n- `clear_if_negative(x: int)`: If the input value `x` is negative, clear the entire stack.\n- `clear_if_not_empty()`: If the stack is not empty, clear the entire stack.\n\nThe class should manage errors and exceptions correctly by throwing appropriate exceptions and handling them appropriately. Additionally, the class should support conditional push and pop operations."}, {"instruction": "Implement a Python class `Stack` that provides a simple functionality of a stack. The class should support the following operations:\n- `push(stack, item)`: add an item to the top of the stack\n- `pop(stack)`: remove the top item from the stack and return it\n- `peek(stack)`: return the top item from the stack without removing it\n\nImplement a Python function `calculate_loop_condition` that calculates the condition to be used in a while loop that checks if the stack is empty. The function should check the stack for the following conditions in order:\n- The length of the stack is at least 1\n- The top element of the stack is not the number 1\n- The top element of the stack is not the number 2\n\nThe function should return a boolean value indicating whether the condition has been met.\n\nThe function should be implemented as a pair of interrupt routines, `push` and `pop`, with the interrupt routine `calculate_loop_condition` being called from the interrupt routine `push` to calculate the condition to be used in the while loop."}, {"instruction": "Design a Python class `Stack` that supports the following operations: `push`, `pop`, and `peek`. The `push` operation pushes an element on top of the stack, and the `pop` operation removes the top element from the stack. The `peek` operation returns the top element of the stack without removing it. The `Stack` class should be constructed with an empty list as its internal state.\n\nThe class should support the following operations:\n- `push(self, data: any)`: add data to the stack.\n- `pop(self)`: remove and return the top element from the stack.\n- `peek(self)`: return the top element from the stack, without removing it.\n\nThe class should implement stack manipulations using conditional branching, conditional stack manipulations, and interrupt routines."}, {"instruction": "Design a Python class `Counter` that keeps track of the execution of certain operations by counting the number of stack pops and pushes. The class should maintain two stacks, `in_stack` and `out_stack`. The `in_stack` should be used to store the inputs for the class and the `out_stack` should be used to store the outputs. The class should support three operations:\n\n- `push(x)`: push a new value `x` to the `in_stack`\n- `pop()`: pop a value from the `in_stack` and push it to the `out_stack`. If the `in_stack` is empty, raise a `ValueError` exception\n- `swap()`: swap the values on top of the `in_stack` and the `out_stack`. If one of the stacks is empty, raise a `ValueError` exception\n\nThe class should handle erroneous inputs gracefully, such as empty inputs. Additionally, implement the `__str__` method to print the values in the `in_stack` and the `out_stack`."}, {"instruction": "Design a Python class `Calculator` that implements a simple calculator with basic arithmetic operations. The class should have two stacks, one for operands and one for operators, and a stack pointer indicating the current position in the stacks. The operations should be pushed onto the operator stack and performed from the operator stack when its top is a valid operator. The operator stack should be manipulated according to the following rules:\n\n- All the operators in the operand stack should be pushed onto the operator stack before any operand appears in the operand stack.\n- The operator with the highest precedence should be popped from the stack when an operator appears in the operand stack.\n- The operator stack should not be manipulated when the operand stack contains an operand.\n- Operands in the operand stack should be popped when an operator appears in the operator stack.\n\nThe calculator should have the following methods:\n\n- `push_operand(self, operand: float)` should push a new operand onto the operand stack.\n- `pop_operand(self) -> float` should pop the top operand from the operand stack and return it.\n- `push_operator(self, operator: str)` should push a new operator onto the operator stack.\n- `pop_operator(self) -> str` should pop the top operator from the operator stack and return it.\n- `eval(self)` should perform the calculations according to the operator stack and operand stack. When an operator appears in the operator stack, it should be popped and operated on the top two operands in the operand stack. The result should be pushed back to the operand stack. Return the result of the evaluation as the result of the method.\n\nThe calculator should handle erroneous inputs gracefully, such as invalid operator arguments. Additionally, implement the `__str__` method to return a formatted string showing the current state of the calculator."}, {"instruction": "Write a Python class called `MemoryManager` that implements a stack-based memory allocator with the following features:\n\n- `push_stack(self, stack_id: int)` allocates a new stack with the given id and pushes it to the top of the stack.\n- `pop_stack(self)` pops the top stack from the stack and deletes it.\n- `peek_stack(self)` returns the top stack without altering the stack.\n- `alloc(self, size: int, stack_id: int)` allocates a new memory block of the given size that belongs to the specified stack and pushes it to the top of the stack.\n- `free(self, block_id: int)` frees the memory block with the given id, returning it to the stack.\n- `free_all(self)` frees all memory blocks in the stack.\n\nWhen a new stack is allocated, the stack should be allocated with a size of 1024 bytes. When a new memory block is allocated, the block should be allocated with a size of 16 bytes. If the stack is full, the function should return `None` and print a warning message to the console. This implementation requires a stack data structure and a set of conditional statements to handle different scenarios."}, {"instruction": "Develop a Python class `Interpreter` that implements a simple stack-based interpreter for a limited number of commands. The interpreter supports the following operations:\n\n1. `push X` - push the integer value X onto the stack.\n2. `pop` - pop the top item from the stack and discard it.\n3. `add` - pop the top two items from the stack and add them together.\n4. `sub` - pop the top two items from the stack and subtract the second item from the first.\n5. `mul` - pop the top two items from the stack and multiply them together.\n6. `div` - pop the top two items from the stack and divide the first item by the second.\n7. `mod` - pop the top two items from the stack and compute the remainder of the first item divided by the second.\n8. `print` - pop the top item from the stack and print it to the terminal.\n\nEach command is specified as a string with the format: `command:arg`, where `command` is the operation to perform and `arg` is an integer value that can be used in the operation.\n\nThe class should be built so that the interpreter can be used in an interactive mode or by passing a file with commands to be executed. If the interpreter is used in an interactive mode, it should print the current stack value after every operation and exit the program when the `exit` command is invoked. If the interpreter is used by passing a file with commands, the interpreter should print the corresponding stack value after every operation and stop when the file is fully processed.\n\nWrite assertions to test the functionality of the interpreter in both modes."}, {"instruction": "Write a Python class `Calculator` that implements a simple calculator. The class should support basic arithmetic operations like addition, subtraction, multiplication, and division. The class should also support a stack-like operations like push, pop, and peek.\n\nThe class should handle missing parentheses, invalid operations, and overflow conditions gracefully. Additionally, the class should implement all operations in a single method `calculate` that takes a string representing the expression with parentheses."}, {"instruction": "Design a Python class `InterruptableStack` that implements a simple stack data structure. The class should define a method `add` for adding an element to the stack. Additionally, the class should support two methods for interrupting the execution of an ongoing operation: `interrupt` and `reset`. When `interrupt` is called, the execution of the ongoing operation should be interrupted and the current state of the stack should be saved. When `reset` is called, the stack should be restored to the state saved by `interrupt` and the ongoing operation should continue.\n\nThe class should also support a nested call of `interrupt` and `reset` as a hierarchical stack of interrupts, i.e., when `interrupt` is called while another interrupt is still in progress, the nested interrupt should replace the existing one. Similarly, `reset` can be called inside an interrupt, in which case it should also reset the entire nested stack of interrupts.\n\nThe class should support conditional stack manipulation by calling methods `add` and `pop` for operating on the top of the stack. These methods should behave differently when the stack is empty or not. For example, when the stack is empty, `add` should raise an exception and `pop` should return None. When the stack is not empty, `add` should push the element onto the stack and `pop` should pop the top element from the stack.\n\nThe class should also support conditional branching by calling methods `add` and `pop` for operating on the top of the stack. These methods should behave differently based on the current state of the stack. For example, when the stack is empty, `add` should raise an exception and `pop` should return None. When the stack is not empty, `add` should push the element onto the stack and `pop` should pop the top element from the stack.\n\nFor the stack manipulations and branching, you should employ conditionals and use `raise` statements to handle the exceptions."}, {"instruction": "Create a Python class `FractionStack` that implements a stack data structure for fractions. The class should support the following operations:\n\n- `push(self, numerator: int, denominator: int)`: push a new fraction onto the stack.\n- `pop(self) -> int`: pop the top fraction from the stack and return its numerator.\n- `clear(self)`: clear the entire stack of fractions.\n- `top(self) -> tuple[int, int]`: return the top fraction without removing it from the stack.\n\nThe class should also support interrupt and exception handling. Interrupts should be implemented by raising an exception that is caught by the class. The class should allow the user to define a handler function to process the exception if it is raised. If no handler function is defined, the default handler should display the error message to the screen."}, {"instruction": "Develop a Python class `Stack` that implements a stack data structure. The class should maintain an internal list to store the elements of the stack. The class should provide methods for handling four operations: `push(self, value: int)`, `pop(self)`, `peek(self)`, and `is_empty(self)`. The stack should be implemented with a performance optimization approach to minimize memory usage and improve performance.\n\nThe `push` method should add a new element to the top of the stack, while the `pop` method should remove and return the top element from the stack. The `peek` method should return the top element from the stack without removing it. The `is_empty` method should check whether the stack is empty or not and return a boolean value.\n\nThe class should support the following constraints and features:\n- Only **int** values can be stored in the stack.\n- The `push` method should throw an exception if a non-int value is provided.\n- The `pop` method should throw an exception if the stack is empty.\n- The `peek` method should return None if the stack is empty.\n- Optimizing the memory usage of the stack is important. For instance, using a list to store the elements of the stack is much more memory-efficient than using a list for each element."}, {"instruction": "Develop a Python class `Stack` that implements a stack data structure. The class should support the standard operations of `push`, `pop`, and `peek`. Additionally, the class should support pushing and popping from a stack of `int` values, and should be able to handle overflow and underflow conditions gracefully.\n\nThe class should accept an optional argument `threshold` that represents the threshold value at which the stack should raise an exception, `StackOverflowError`. The threshold value should be checked at every stack operation, and the exception should be raised if the stack exceeds the threshold value."}, {"instruction": "Develop a Python class `StackMachine` that simulates a stack machine. The class should support basic operations such as pushing and popping values to/from a stack and performing arithmetic operations on the values in the stack. The class should also provide basic control flow constructs such as conditional branching and looping. The class should provide a main method that takes a list of commands as input and executes the commands sequentially.\n\nStart by implementing a sequential execution of the commands. Then, add support for conditional branching and loops using the following constructs:\n- The `if` command should take a value as an argument and perform a conditional branching based on this value. The `if` command should execute the corresponding commands in the block following it until a `else` command is reached. If no `else` command is encountered, the `if` command should proceed to the next command in the input list.\n- The `while` command should take a value as an argument and perform a conditional loop based on this value. The `while` command should execute the corresponding commands in the block following it until the loop condition is no longer satisfied. If the loop condition is initially not satisfied, the `while` command should proceed to the next command in the input list.\n\nFor error handling and logging, use exceptions and assertions to communicate errors and warnings. Ensure the correctness of your solution by adding assertions to the provided sample code."}, {"instruction": "Develop a Python class `Interrupter` that maintains a stack of integers. The class should support the following operations:\n\n- `push(val: int)`: Push the input value onto the top of the stack.\n- `pop()`: Pop the topmost value from the stack and return it.\n- `peek()`: Return the topmost value from the stack without modifying it.\n\nAdditionally, the class should support setting and clearing a flag, which can be used to interrupt the currently running operation and go to a different branch in the program. The flag should be set and cleared on `push`, `pop`, and `peek` operations, respectively. The flag should be cleared on any other operation."}, {"instruction": "Write a Python class `SequenceCoding` that implements a stack-based sequence coding system. The class should support the following operations:\n\n- `pop`: remove the top value from the stack and return it\n- `peek`: return the top value from the stack without removing it\n- `push(value)`: push a new value onto the stack\n- `length`: return the number of elements currently in the stack\n\nThe class should have a `run` method that takes a single argument, a string that represents a sequence of operations, and executes these operations in sequence. Each operation should be separated by a single space. The class should support the following operations:\n\n- `push`: push a new value onto the stack\n- `pop`: remove the top value from the stack and return it\n- `peek`: return the top value from the stack without removing it\n- `length`: return the number of elements currently in the stack\n\nThe class should handle any exceptions that might occur during the execution of the sequence of operations. The class's `run` method should return the value returned by the last operation executed."}, {"instruction": "Develop a Python class `Calculator` that implements an expression evaluation system. The class should maintain an internal state that is initially 0. The class should support operations such as `+`, `-`, and `*`. All operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[operation]\"`. Here are the detailed formats for each operation, explained through examples:\n\n- Infix addition: `apply_operation(\"+\")`\n- Infix subtraction: `apply_operation(\"-\")`\n- Infix multiplication: `apply_operation(\"*\")`\n- Stack depth check: `apply_operation(\"check\")`\n- Stack pop: `apply_operation(\"pop\")`\n- Stack push: `apply_operation(\"push\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or stack operations that result in underflow or overflow conditions. Additionally, implement the `__str__` method to return a formatted string showing the current stack state and the current top value."}, {"instruction": "Design a Python class `Stack` that implements a stack data structure. The `Stack` class should support push and pop operations, as well as an `interrupt` method that can be called during a push operation. During a push operation, the `interrupt` method can interrupt the push process and return a value to be pushed into the stack. The `interrupt` method should be called with an argument that specifies the value to be pushed into the stack.\n\nUse the following class diagram as a reference:\n\n```\nStack\n  | push(int)\n  | pop(int)\n  | __interrupt(int)\n  | __interrupt_handler(int)\n```\n\nThe class should support interrupt handling in an efficient manner. A stack object can be considered as a \"bound\" memory region, where all stack operations are allowed during the execution of the program, while interrupts can interrupt the program execution at any time and return values to be stored in the stack."}, {"instruction": "Develop a Python class `MyStack` that implements a simple stack data structure. The class should provide methods for pushing, popping, and peeking elements from the stack. Additionally, the class should provide a special method `interrupt` that interrupts the current operation of the stack. When the `interrupt` method is called, the current operation should be paused and the next operation should be triggered after a short delay (e.g., 1 millisecond). The interrupt method should work with all the other stack methods: pushing, popping, and peeking elements.\n\nThe class should handle erroneous inputs gracefully, e.g., by logging the error in the console. The `__str__` method should return a formatted string showing the current stack's contents.\n\nThe class should be implemented in such a way that the interrupt mechanism can be used to implement other functions, such as a more complex `push` or `pop` method that supports multi-element interrupts."}, {"instruction": "Develop a Python class `InterruptStack` that implements a simple stack-based interrupt handler. The class should maintain a list of interrupts that can be pushed and popped from the stack. The class should support exception handling through a dedicated `push_interrupt` and `pop_interrupt` methods, which will be called internally by the Python interpreter to handle various interrupts (e.g., `KeyboardInterrupt`, `SystemExit`, `Exception`).\n\nThe method `push_interrupt` should push an interrupt into the stack and return `True` if the interrupt has been added successfully. If the stack is full, the method should return `False` to indicate that the operation has not been completed successfully.\n\nThe method `pop_interrupt` should pop the top interrupt from the stack and return `True` if the interrupt has been removed successfully. If the stack is empty, the method should return `False` to indicate that the operation has not been completed successfully.\n\nThe class should also support the `interrupt` method, which allows the user to call the same method without the need to pop and push an interrupt. The method `interrupt` should simply call the `push_interrupt` or `pop_interrupt` method depending on the current state of the stack."}, {"instruction": "Write a Python program that implements a basic stack data structure. Provide the following functionalities:\n- `push(item)` adds an element to the top of the stack\n- `pop()` removes the element at the top of the stack and returns the popped element\n- `peek()` returns the element at the top of the stack without removing it\n- `len()` returns the length of the stack\n- `is_empty()` returns `True` if the stack is empty and `False` otherwise\n\nThe stack should be implemented as a class with methods for the above operations as well as an `__init__` method that initializes an empty stack. Additionally, the class should provide a `__str__` method for printing the stack items in a human-readable format."}, {"instruction": "Develop a Python class `InterruptableStack` that extends the default `list` class to provide a stack implementation that can be stopped and restarted at any point. The class should maintain a stack of `list` objects and support the following operations:\n\n- `push(item)`: add an item to the top of the stack\n- `pop()`: return the top item in the stack and remove it from the stack\n- `peek()`: return the top item in the stack without removing it from the stack\n- `stop()`: stop all processing, but do not remove any items from the stack\n- `restart()`: restart all stack operations, including the items that were stopped\n- `steal_stack(size)`: steal a contiguous block from the top of the stack and return it as a new `list` object, with `size` items\n\nThere should be no limits to the size of the stolen stack, but processing should be stopped only if `size` is greater than the number of items remaining in the stack. Implement the `InterruptableStack` class as a subclass of the Python `list` class, so that all the methods of `list` are available to the `InterruptableStack` object."}, {"instruction": "Develop a Python class `Stack` that offers advanced operations for managing a stack data structure. The class should support pushing, popping, peeking, and emptying a stack without using the `list` type. The operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Pushing to the stack: `apply_operation(\"push:123\")`\n- Popping from the stack: `apply_operation(\"pop:\")`\n- Peeking at the top of the stack: `apply_operation(\"peek:\")`\n- Emptying the stack: `apply_operation(\"empty:\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current contents of the stack."}, {"instruction": "Create a Python class that implements a basic version of the Stack data structure. The class should maintain a list for the values stored in the stack and a counter for the total number of operations performed on the stack. The class should support the following operations:\n\n- `push`: adds an element to the top of the stack\n- `pop`: removes an element from the top of the stack and returns the removed value\n- `peek`: returns the value of the element at the top of the stack without removing it\n- `clear`: resets the stack to an empty state\n- `count`: returns the total number of operations that have been performed on the stack\n\nThe class should also support a conditional branch statement to implement a callback function that is called whenever a specific condition is met. The callback function should be called with the current state of the stack as a parameter. The class should also support an interrupt routine that calls a callback function whenever an error occurs. The callback function should receive a string describing the error and a message as parameters."}, {"instruction": "Develop a Python class `InterruptableStack` that implements a generic stack data structure with interruptable push and pop operations. The class should maintain an internal state that is initially an empty list. The class should support push and pop operations, which are designed to respond to interrupts with the behavior described below:\n- `push(element)` should add `element` to the top of the stack, and return `True`.\n- `pop()` should pop an element from the top of the stack, and return `True` if the stack is not empty. Otherwise, the function should return `False`.\n- `push(element, interrupt_callback)` should behave as described above, but it should also register an interrupt callback function `interrupt_callback` to be called when the pop operation is interrupted.\n- `pop(interrupt_callback)` should behave as described above, but it should also register an interrupt callback function `interrupt_callback` to be called when the push operation is interrupted.\n- `push(element, interrupt_callback, interrupted_callback)` should behave as described above, but it should also register an interrupt callback function `interrupted_callback` to be called when the push operation is interrupted.\n- `pop(interrupt_callback, interrupted_callback)` should behave as described above, but it should also register an interrupt callback function `interrupted_callback` to be called when the pop operation is interrupted.\n\nThe class should handle erroneous inputs gracefully, such as interrupting the push or pop operation when the stack is empty. Additionally, implement the `__str__` method to return a formatted string showing the current stack contents and the total number of pushes and pops."}, {"instruction": "Develop a Python class `AveragingStack` that implements a stack data structure with a feature to calculate the average of the elements in the stack. The class should employ a stack, which is implemented as a list. The class should support adding new elements to the stack and removing the top element. It should also support accessing the current average of the stack.\n\nThe class should handle erroneous inputs gracefully, such as the empty array being passed to the stack and access to an empty stack. Additionally, implement the `__str__` method to return a formatted string showing the current value of the stack and its average.\n\nThe class should also support adding one or more elements to the stack at once, by passing a list of elements to the `add_elements` function. The function should also handle empty lists as input, and the new elements should be pushed onto the stack in the same order that the list is provided."}, {"instruction": "Design a Python class `Stack` that implements a stack data structure using a list as the underlying storage. Depending on the parameters passed to the constructor, the class should support three different stack operations:\n\n- `push(self, value):` pushes an element (a value) onto the stack, which is appended to the list\n- `pop(self):` pops an element off the stack, which removes the last element from the list and returns it\n- `peek(self):` returns the last element on the stack, without removing the element from the list\n\nWhen `push` is called with a `None` value, the stack should be cleared of all elements. When `pop` is called on an empty stack, the `StackEmptyException` should be raised. If `peek` is called on an empty stack, the `StackEmptyException` should be raised.\n\nImplement the class `Stack` to support the above operations. Use the `Stack` class to implement a program that performs basic arithmetic operations on two integers. The program should handle invalid user inputs gracefully. Use the following operations to implement the basic arithmetic operations:\n\n- `+`: addition (e.g., `3 + 4`)\n- `-`: subtraction (e.g., `3 - 4`)\n- `*`: multiplication (e.g., `3 * 4`)\n- `/`: division (e.g., `3 / 4`)"}, {"instruction": "Create a Python class that replicates the behavior of a stack data structure. The class should support adding and removing elements from the stack, and provide several methods to check the top element of the stack. The class should be implemented using the following methods:\n- `push(self, element)` adds an element to the top of the stack.\n- `pop(self)` removes the currently topmost element from the stack and returns its value. If the stack is empty, the method should raise an appropriate exception.\n- `peek(self)` returns the current topmost element from the stack without removing it. If the stack is empty, the method should also raise an exception.\n- `is_empty(self)` returns `True` if the stack is empty and `False` otherwise.\n- `size(self)` returns the number of elements in the stack.\n\nThe class should also provide two versions of the `push` method: `push_strict(self, element)` and `push_relaxed(self, element)`. The strict version should always add the element at the top of the stack, while the relaxed version should only add the element if it is not already at the top of the stack. If the element is already on the stack, the method should raise an appropriate exception."}, {"instruction": "Develop a Python class `PrimeGenerator` that can be used to generate prime numbers. The class should maintain an internal state that keeps track of the last generated prime number. The class should support generating new primes by implementing the `__next__` method, and should support rewinding the generator to a specific prime number by implementing the `__setstate__` method.\n\nThe class should also support conditional branching using the `if` statement. When the `if` statement evaluates to `True`, the generator should generate new primes. Otherwise, it should return the last generated prime number.\n\nTo implement conditional branching, the class should call an interrupt routine that should be implemented as a separate function. The interrupt routine should be called whenever a new prime number is generated. This function should handle the rest of the `if` statement logic, such as updating the internal state and returning the new prime number.\n\nThe class should also support memory manipulation using the `del` statement. When this statement is invoked, the interrupt routine should be called to clean up the internal state and return the last generated prime number.\n\nFinally, the class should provide logging and exception handling for edge cases, such as inappropriate input or memory management errors."}, {"instruction": "Implement a Python class `Stack` that provides basic implementations of a stack data structure. The class should support the following methods:\n- `__init__(self)`: initialize an empty stack\n- `push(self, item)`: push a new item to the top of the stack\n- `pop(self)`: pop the top item from the stack and return it\n- `is_empty(self)`: return `True` if the stack is empty, otherwise returns `False`\n\nUse a list to store the contents of the stack, and implement the `push` and `pop` operations using the list's `append` and `pop` methods, respectively. The `is_empty` method returns the opposite of the `len` of the list.\n\nThe class should also support two additional methods:\n- `peek(self)`: return the top item from the stack without removing it\n- `height(self)`: return the height of the stack, which is the number of items in the stack\n\nUse a list instance variable to store the stack contents, and implement the `peek` and `height` methods using simple arithmetic operations on the list.\n\nTo simulate a hardware stack overflow, add two additional methods to the class:\n- `is_overflow(self)`: return `True` if the stack is overflowing, otherwise returns `False`\n- `is_underflow(self)`: return `True` if the stack is underflowing, otherwise returns `False`\n\nUse conditional statements to determine the overflow and underflow conditions. The `is_overflow` and `is_underflow` methods should return the opposite of the `is_empty` method.\n\nThe class should also support an `interrupt` method that can be used to simulate a context switch or exception handling. The `interrupt` method should reset the stack by clearing it and populating it with a new stack frame, and should return the reset stack."}, {"instruction": "Design a Python class `Stack` that supports pushing and popping elements on top of the stack. The class should support a `try_push` method that will handle the pushing of data into the stack if the stack is not full. If the stack is full, the method should raise an error to indicate that the stack is full. This method should also handle the popping of elements from the stack. The class should be able to manage the internal state of the stack.\n\nThe class should be able to handle two different types of input: a `push` operation which takes two parameters, a `data` and a `priority` indicating the relative order of the pushed data, and a `pop` operation which takes no parameters and returns the most recently pushed data. The `priority` value must be an integer between `0` and `100` (inclusive). The `priority` value is used to determine the order of execution when multiple `push` operations are performed on the stack.\n\nThe class should also handle the following edge cases:\n- When the `push` operation is performed and there is no room for new elements in the stack, the class should raise an error to indicate insufficient memory.\n- When the `pop` operation is performed and there are no elements left in the stack, the class should raise an error to indicate an empty stack.\n\nThe class should also implement an interrupt routine (ISR) that is called when the `push` operation is performed and there are multiple `push` operations that have the same priority. The ISR should pick the next highest-priority `push` operation and push the data into the stack.\n\nThe class should also implement a conditional interrupt routine that handles the interrupting of the ISR based on a specific condition. For example, when the number of elements on the stack exceeds a given threshold, the conditional interrupt routine should be triggered. In this case, the ISR should pop the stack until the number of elements is below the threshold and then push the data into the stack. When this condition is met, the conditional interrupt routine should be stopped.\n\nFinally, the class should be able to handle the following memory management requirements:\n- When the interrupt routine is triggered, the `push` operation should allocate new memory dynamically during runtime.\n- When the stack is no longer needed, the memory allocated by the interrupt routine should be freed.\n\nThe class should also handle the following edge cases:\n- When the interrupt routine is triggered and there is no space left for a new element, the class should raise an error to indicate insufficient memory."}, {"instruction": "Design a Python class `InterruptStack` that manages a stack of integers. It should support push, pop, and peek operations, where pop and peek operations modify the stack and return the top most element and the value at the top most element, respectively, in the stack.\n\nThe class should also support conditional branching and call interrupt routines. When an interrupt routine is invoked, the class should pop the top most element from the stack and execute the corresponding conditional branch if the popped value is greater than 0.\n\nThis implementation of the class involves maintaining a stack of integers and using conditional branching and call routines to manipulate the stack. The class should handle exceptions and errors gracefully. Additionally, it should provide appropriate documentation and comments to help others understand the code."}, {"instruction": "Write a Python class `InterruptableStack` that is a subclass of `list` for managing a stack data structure. The class should support the usual push and pop operations, but should also support stopping the stack's execution by pushing a special `Interrupt` value into the stack. The class should provide an interrupt method that stops the stack execution and returns the contents of the stack when it is interrupted, so that the interrupted stack can be processed in the main program. The main program should be able to restart the stack execution after being interrupted by calling the interrupt method."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: Windows device driver programming, WDF device creation, WDF symbolic link creation, WDF I/O queue configuration, WDF I/O queue creation, WDF I/O queue execution level configuration (for static driver verifier), WDF I/O queue EvtIoStop callback, WDF I/O queue EvtIoResume callback, WDF shutdown notification\n\n### Task", "fingerprint": null, "content": {"code": "NTSTATUS TestDeviceAdd(IN WDFDRIVER Driver, IN PWDFDEVICE_INIT DeviceInit)\r\n/*++\r\n\r\nRoutine Description:\r\n\r\nCalled by the DriverEntry to create a control-device. This call is\r\nresponsible for freeing the memory for DeviceInit.\r\n\r\nArguments:\r\n\r\nDriverObject - a pointer to the object that represents this device\r\ndriver.\r\n\r\nDeviceInit - Pointer to a driver-allocated WDFDEVICE_INIT structure.\r\n\r\nReturn Value:\r\n\r\nSTATUS_SUCCESS if initialized; an error otherwise.\r\n\r\n--*/\r\n{\r\n\tNTSTATUS status;\r\n\tWDF_OBJECT_ATTRIBUTES attributes;\r\n\tWDF_IO_QUEUE_CONFIG ioQueueConfig;\r\n\tWDFQUEUE queue;\r\n\tWDFDEVICE controlDevice;\r\n\tDECLARE_CONST_UNICODE_STRING(ntDeviceName, NTDEVICE_NAME_STRING);\r\n\tDECLARE_CONST_UNICODE_STRING(symbolicLinkName, SYMBOLIC_NAME_STRING);\r\n\r\n\tUNREFERENCED_PARAMETER(Driver);\r\n\r\n\tPAGED_CODE();\r\n\r\n\t//\r\n\t// Set exclusive to TRUE so that no more than one app can talk to the\r\n\t// control device at any time.\r\n\t//\r\n\tWdfDeviceInitSetExclusive(DeviceInit, TRUE);\r\n\r\n\tWdfDeviceInitSetIoType(DeviceInit, WdfDeviceIoBuffered);\r\n\r\n\r\n\tstatus = WdfDeviceInitAssignName(DeviceInit, &ntDeviceName);\r\n\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\tWdfControlDeviceInitSetShutdownNotification(DeviceInit,\r\n\t\tTestShutdown,\r\n\t\tWdfDeviceShutdown);\r\n\r\n\tstatus = WdfDeviceCreate(&DeviceInit,\r\n\t\tWDF_NO_OBJECT_ATTRIBUTES,\r\n\t\t&controlDevice);\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Create a symbolic link for the control object so that usermode can open\r\n\t// the device.\r\n\t//\r\n\r\n\r\n\tstatus = WdfDeviceCreateSymbolicLink(controlDevice,\r\n\t\t&symbolicLinkName);\r\n\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\t//\r\n\t\t// Control device will be deleted automatically by the framework.\r\n\t\t//\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Configure a default queue so that requests that are not\r\n\t// configure-fowarded using WdfDeviceConfigureRequestDispatching to goto\r\n\t// other queues get dispatched here.\r\n\t//\r\n\tWDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(&ioQueueConfig,\r\n\t\tWdfIoQueueDispatchSequential);\r\n\r\n\tioQueueConfig.EvtIoDeviceControl = DrvEvtIoDeviceControl;\r\n\r\n\tWDF_OBJECT_ATTRIBUTES_INIT(&attributes);\r\n\t//\r\n\t// Since we are using Zw function set execution level to passive so that\r\n\t// framework ensures that our Io callbacks called at only passive-level\r\n\t// even if the request came in at DISPATCH_LEVEL from another driver.\r\n\t//\r\n\t//attributes.ExecutionLevel = WdfExecutionLevelPassive;\r\n\r\n\t//\r\n\t// By default, Static Driver Verifier (SDV) displays a warning if it \r\n\t// doesn't find the EvtIoStop callback on a power-managed queue. \r\n\t// The 'assume' below causes SDV to suppress this warning. If the driver \r\n\t// has not explicitly set PowerManaged to WdfFalse, the framework creates\r\n\t// power-managed queues when the device is not a filter driver.  Normally \r\n\t// the EvtIoStop is required for power-managed queues, but for this driver\r\n\t// it is not needed b/c the driver doesn't hold on to the requests or \r\n\t// forward them to other drivers. This driver completes the requests \r\n\t// directly in the queue's handlers. If the EvtIoStop callback is not \r\n\t// implemented, the framework waits for all driver-owned requests to be\r\n\t// done before moving in the Dx/sleep states or before removing the \r\n\t// device, which is the correct behavior for this type of driver.\r\n\t// If the requests were taking an indeterminate amount of time to complete,\r\n\t// or if the driver forwarded the requests to a lower driver/another stack,\r\n\t// the queue should have an EvtIoStop/EvtIoResume.\r\n\t//\r\n\t__analysis_assume(ioQueueConfig.EvtIoStop != 0);\r\n\tstatus = WdfIoQueueCreate(controlDevice,\r\n\t\t&ioQueueConfig,\r\n\t\t&attributes,\r\n\t\t&queue // pointer to default queue\r\n\t);\r\n\t__analysis_assume(ioQueueConfig.EvtIoStop == 0);\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Control devices must notify WDF when they are done initializing.   I/O is\r\n\t// rejected until this call is made.\r\n\t//\r\n\tWdfControlFinishInitializing(controlDevice);\r\n\r\nEnd:\r\n\t//\r\n\t// If the device is created successfully, framework would clear the\r\n\t// DeviceInit value. Otherwise device create must have failed so we\r\n\t// should free the memory ourself.\r\n\t//\r\n\tif (DeviceInit != nullptr) {\r\n\t\tWdfDeviceInitFree(DeviceInit);\r\n\t}\r\n\r\n\treturn status;\r\n\r\n}", "docstring": "//\r", "function_name": "DriverEntry"}, "id": 214, "seed": "NTSTATUS TestDeviceAdd(IN WDFDRIVER Driver, IN PWDFDEVICE_INIT DeviceInit)\r\n/*++\r\n\r\nRoutine Description:\r\n\r\nCalled by the DriverEntry to create a control-device. This call is\r\nresponsible for freeing the memory for DeviceInit.\r\n\r\nArguments:\r\n\r\nDriverObject - a pointer to the object that represents this device\r\ndriver.\r\n\r\nDeviceInit - Pointer to a driver-allocated WDFDEVICE_INIT structure.\r\n\r\nReturn Value:\r\n\r\nSTATUS_SUCCESS if initialized; an error otherwise.\r\n\r\n--*/\r\n{\r\n\tNTSTATUS status;\r\n\tWDF_OBJECT_ATTRIBUTES attributes;\r\n\tWDF_IO_QUEUE_CONFIG ioQueueConfig;\r\n\tWDFQUEUE queue;\r\n\tWDFDEVICE controlDevice;\r\n\tDECLARE_CONST_UNICODE_STRING(ntDeviceName, NTDEVICE_NAME_STRING);\r\n\tDECLARE_CONST_UNICODE_STRING(symbolicLinkName, SYMBOLIC_NAME_STRING);\r\n\r\n\tUNREFERENCED_PARAMETER(Driver);\r\n\r\n\tPAGED_CODE();\r\n\r\n\t//\r\n\t// Set exclusive to TRUE so that no more than one app can talk to the\r\n\t// control device at any time.\r\n\t//\r\n\tWdfDeviceInitSetExclusive(DeviceInit, TRUE);\r\n\r\n\tWdfDeviceInitSetIoType(DeviceInit, WdfDeviceIoBuffered);\r\n\r\n\r\n\tstatus = WdfDeviceInitAssignName(DeviceInit, &ntDeviceName);\r\n\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\tWdfControlDeviceInitSetShutdownNotification(DeviceInit,\r\n\t\tTestShutdown,\r\n\t\tWdfDeviceShutdown);\r\n\r\n\tstatus = WdfDeviceCreate(&DeviceInit,\r\n\t\tWDF_NO_OBJECT_ATTRIBUTES,\r\n\t\t&controlDevice);\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Create a symbolic link for the control object so that usermode can open\r\n\t// the device.\r\n\t//\r\n\r\n\r\n\tstatus = WdfDeviceCreateSymbolicLink(controlDevice,\r\n\t\t&symbolicLinkName);\r\n\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\t//\r\n\t\t// Control device will be deleted automatically by the framework.\r\n\t\t//\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Configure a default queue so that requests that are not\r\n\t// configure-fowarded using WdfDeviceConfigureRequestDispatching to goto\r\n\t// other queues get dispatched here.\r\n\t//\r\n\tWDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(&ioQueueConfig,\r\n\t\tWdfIoQueueDispatchSequential);\r\n\r\n\tioQueueConfig.EvtIoDeviceControl = DrvEvtIoDeviceControl;\r\n\r\n\tWDF_OBJECT_ATTRIBUTES_INIT(&attributes);\r\n\t//\r\n\t// Since we are using Zw function set execution level to passive so that\r\n\t// framework ensures that our Io callbacks called at only passive-level\r\n\t// even if the request came in at DISPATCH_LEVEL from another driver.\r\n\t//\r\n\t//attributes.ExecutionLevel = WdfExecutionLevelPassive;\r\n\r\n\t//\r\n\t// By default, Static Driver Verifier (SDV) displays a warning if it \r\n\t// doesn't find the EvtIoStop callback on a power-managed queue. \r\n\t// The 'assume' below causes SDV to suppress this warning. If the driver \r\n\t// has not explicitly set PowerManaged to WdfFalse, the framework creates\r\n\t// power-managed queues when the device is not a filter driver.  Normally \r\n\t// the EvtIoStop is required for power-managed queues, but for this driver\r\n\t// it is not needed b/c the driver doesn't hold on to the requests or \r\n\t// forward them to other drivers. This driver completes the requests \r\n\t// directly in the queue's handlers. If the EvtIoStop callback is not \r\n\t// implemented, the framework waits for all driver-owned requests to be\r\n\t// done before moving in the Dx/sleep states or before removing the \r\n\t// device, which is the correct behavior for this type of driver.\r\n\t// If the requests were taking an indeterminate amount of time to complete,\r\n\t// or if the driver forwarded the requests to a lower driver/another stack,\r\n\t// the queue should have an EvtIoStop/EvtIoResume.\r\n\t//\r\n\t__analysis_assume(ioQueueConfig.EvtIoStop != 0);\r\n\tstatus = WdfIoQueueCreate(controlDevice,\r\n\t\t&ioQueueConfig,\r\n\t\t&attributes,\r\n\t\t&queue // pointer to default queue\r\n\t);\r\n\t__analysis_assume(ioQueueConfig.EvtIoStop == 0);\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Control devices must notify WDF when they are done initializing.   I/O is\r\n\t// rejected until this call is made.\r\n\t//\r\n\tWdfControlFinishInitializing(controlDevice);\r\n\r\nEnd:\r\n\t//\r\n\t// If the device is created successfully, framework would clear the\r\n\t// DeviceInit value. Otherwise device create must have failed so we\r\n\t// should free the memory ourself.\r\n\t//\r\n\tif (DeviceInit != nullptr) {\r\n\t\tWdfDeviceInitFree(DeviceInit);\r\n\t}\r\n\r\n\treturn status;\r\n\r\n}", "__index_level_0__": 58, "concepts": ["Windows device driver programming", "WDF device creation", "WDF symbolic link creation", "WDF I/O queue configuration", "WDF I/O queue creation", "WDF I/O queue execution level configuration (for static driver verifier)", "WDF I/O queue EvtIoStop callback", "WDF I/O queue EvtIoResume callback", "WDF shutdown notification"], "parsing_result": [{"instruction": "Write a Python driver that implements a Windows device driver for a NDIS 3 miniport driver. The driver should implement a function that performs a test on a hardware resource when a test command is sent to the driver, and return the result of the test. The driver should support two types of test commands, and return the corresponding result:\n- A test command that returns the current time.\n- A test command that returns the current date.\n\nThis driver should be written in the WDK environment and use the Windows Driver Model API (WDF). Do not use any other third-party libraries or tools. The driver should be compiled and linked with a static driver verifier, and the static driver verifier should be run before submitting the driver to the Windows Device Portal.\n\nFor testing, you can use the Windows Device Portal to send test commands to the driver."}, {"instruction": "Develop a Python program that creates a Windows device driver for a kernel-mode COM port. The device driver should implement the following device-specific I/O control codes:\n\n- `IOCTL_SERIAL_GET_COMMSTATUS`: returns the current status of the serial device\n- `IOCTL_SERIAL_SET_BAUDRATE`: sets the baud rate of the serial device\n- `IOCTL_SERIAL_SET_TIMEOUTS`: sets the serial device's read, write, and handshake timeouts\n- `IOCTL_SERIAL_SET_PARITY`: sets the serial device's parity check settings\n- `IOCTL_SERIAL_SET_DATA_BITS`: sets the serial device's data bits\n- `IOCTL_SERIAL_SET_STOP_BITS`: sets the serial device's stop bits\n- `IOCTL_SERIAL_SET_HANDSHAKE`: sets the serial device's handshake settings\n\nThe program should implement a Windows console application that creates a symbolic link to the device driver and then executes I/O control commands on the device driver."}, {"instruction": "Develop a Windows device driver with the following features:\n- Create a WDF device with a symbolic link for file access.\n- Create a WDF I/O queue with the following properties:\n  - Static driver verifier support.\n  - Execution level notification when the driver is stopped.\n  - Execution level notification when the driver is restarted.\n- Execute the I/O queue on WDF I/O read requests containing any data.\n- Execute the I/O queue on WDF I/O write requests containing any data.\n- Write 'No data' to the I/O request's buffer on WDF I/O write requests.\n- Log the I/O request's I/O control code, data length, and data to the driver's debug output.\n- Log the WDF I/O read requests to the driver's debug output.\n- Log the WDF I/O write requests to the driver's debug output.\n- Log the WDF I/O stop requests to the driver's debug output.\n- Log the WDF I/O resume requests to the driver's debug output."}, {"instruction": "Develop a Windows kernel driver that manipulates file I/O operations on a given file path. The driver must first create and initialize a device object, create a symbolic link for the device, and configure a serial I/O queue with an EVT_IO_STOP callback. In the EVT_IO_STOP callback, the driver must simulate an I/O operation on the file path specified by the device's symbolic link."}, {"instruction": "Develop a Python program that creates and configures a Windows WDF driver for a device that can be started, stopped, and removed. The driver should be able to initialize hardware, create and configure an I/O queue, and respond to I/O operations such as read and write requests. The driver should be able to handle all errors and exceptions, including the OS shutting down during driver execution. A sample device driver is provided, but you may modify it to suit your needs."}, {"instruction": "Create a Windows driver (`.sys` file) that implements a serial port (COM port) device driver. The driver should log incoming bytes to a file on disk and echo the bytes to the serial port. This implementation should use the WDF framework to create the device driver. The driver should be able to detect device removal, and the driver should be able to detect shutdown."}, {"instruction": "Develop a Windows device driver that accepts an input string from the user and prints the string to the console in the form of a `WDF` I/O queue callback. Implement the driver using the `WDF` framework, and handle the `EvtIoStop` and `EvtIoResume` callbacks accordingly. When the driver is unloaded, signal the I/O queue to stop by calling `WdfIoQueueStopSynchronously`."}, {"instruction": "Implement a Windows device driver to serve as a virtual file-system device. The driver must support the following operations:\n- `CreateFile`: Create or open the device, with the given attributes.\n- `ReadFile`: Read data from the device.\n- `WriteFile`: Write data to the device.\n- `CloseHandle`: Close the handle to the device.\n\nThe driver must also provide a simple shell application that can be used to test the device driver's implementation."}, {"instruction": "Develop a Windows device driver (WDM) for an I/O control device driver that supports the following operations:\n- Create a symbolic link with a symbolic link name input by the user\n- Create an empty file with a file name input by the user\n- Read the content of an existing file with a file name input by the user\n- Write content to an existing file with a file name and a content input by the user\n- Verify the device driver with static driver verifier (SDV)"}, {"instruction": "Create a Python function to write a Windows driver that implements a basic serial port driver for a PC-based device with a serial port. The device driver should support an additional I/O control code with a unique IOCTL value and parameters to configure the serial port's speed and the number of data bits. The driver should send a reply packet with the current speed and data bit count when the device is opened. The driver should also support a read and a write operation for the serial port. The driver should also register a symbolic link in the Windows Device Manager to allow user-space applications to open the device."}, {"instruction": "Create a Windows driver that implements a simple file system device driver. The driver should create a symbolic link to a directory in the Windows namespace and register a file-based I/O queue to manage file operations on the device. The driver should use WDF to implement device creation, symbolic link creation, I/O queue creation, and other features. Within the I/O queue, the driver should implement I/O stop and I/O resume callbacks. All events should be handled using WDF event callbacks."}, {"instruction": "Develop a Windows device driver that registers a symbolic link for a custom device type. The symbolic link is created by combining the driver's registry path and the symbolic link name. The symbolic link should be configured for user-accessible devices with the access mask 0x20000000. Using the symbolic link path, the user should be able to open the device, write to the device, and close the device.\n\nThe driver should also implement a WDF I/O queue for the custom device type. The I/O queue should be configured for a static driver verifier and execute level callbacks for EvtIoStop and EvtIoResume. The I/O queue should be configured to receive data buffers with a maximum size of 2048 bytes.\n\nThe driver should also implement a shutdown notification callback for the I/O queue. This callback should be implemented in a separate file from the driver implementation and should be compiled as a static library.\n\nThe driver should register the shutdown notification callback with WDF as a driver shutdown callback. At shutdown, the driver should perform clean-up and release any I/O resources and shutdown notification callbacks that it registered."}, {"instruction": "Develop a Windows device driver that implements a simple Windows I/O device using WDF. The driver should support a single device with a single named symbolic link, and should host a single WDF I/O queue object. The I/O queue object should be configured to execute at IRP_MJ_READ I/O type, with an associated IRP_MN_START_DEVICE callback function. This callback function should perform the following tasks:\n\n- Create a file object, using RtlCreateUnicodeString and ZwCreateFile.\n- Create a file mapping object utilizing the symbolic link path as the file name, using ZwCreateFile.\n- Allocate a memory buffer for the file mapping object, using MmAllocateNonCachedMemory.\n- Map the file mapping object into this buffer with the appropriate access rights and flags, using ZwMapViewOfFile.\n- Read the file contents into the buffer using ZwReadFile.\n- Write the file contents to the file object with ZwWriteFile.\n\nThe driver should also handle the IRP_MJ_SHUTDOWN I/O type with an associated IRP_MN_STOP_DEVICE callback function to perform shutdown operations. This callback function should perform the following tasks:\n\n- Unmap the file mapping object from the memory buffer with ZwUnmapViewOfFile.\n- Close the file mapping object with ZwClose.\n- Close the file object with ZwClose.\n- Free the memory buffer with MmFreeNonCachedMemory.\n\nThe driver should also handle the IRP_MJ_SHUTDOWN I/O type with an associated IRP_MN_CANCEL_REMOVE_DEVICE callback function to perform clean-up operations. This callback function should perform the following tasks:\n\n- Unmap the file mapping object from the memory buffer with ZwUnmapViewOfFile.\n- Close the file mapping object with ZwClose.\n- Close the file object with ZwClose.\n\nFinally, the driver should also handle the IRP_MJ_SHUTDOWN I/O type with an associated EvtIoStop callback function to perform clean-up operations. This callback function should perform the following tasks:\n\n- Unmap the file mapping object from the memory buffer with ZwUnmapViewOfFile.\n- Close the file mapping object with ZwClose.\n\nThe driver should create a symbolic link object for the device at '\\\\.\\device_name' when the IRP_MJ_PNP I/O type is received with an associated IRP_MN_START_DEVICE callback function. The symbolic link object should be created with the symbolic link device name specified in the device_name input parameter.\n\nThe driver should also handle the IRP_MJ_PNP I/O type with an associated IRP_MN_REMOVE_DEVICE callback function to perform clean-up operations. This callback function should perform the following tasks:\n\n- Unmap the file mapping object from the memory buffer with ZwUnmapViewOfFile.\n- Close the file mapping object with ZwClose.\n- Close the file object with ZwClose.\n- Free the memory buffer with MmFreeNonCachedMemory.\n- Remove the symbolic link object with ZwRemoveIoDevice.\n\nFinally, the driver should also handle the IRP_MJ_PNP I/O type with an associated IRP_MN_REMOVE_DEVICE callback function to perform clean-up operations. This callback function should perform the following tasks:\n\n- Unmap the file mapping object from the memory buffer with ZwUnmapViewOfFile.\n- Close the file mapping object with ZwClose.\n- Close the file object with ZwClose.\n- Free the memory buffer with MmFreeNonCachedMemory.\n\nAll the I/O operations should be performed with the appropriate access rights and flags to ensure proper file operations and memory mapping."}, {"instruction": "Create a Python function that creates a Windows device driver to perform a simple task, such as reading a file and reporting the number of words in the file."}, {"instruction": "Develop a Windows kernel-mode driver that registers a symbolic link with a predefined name to identify the device. The device driver should wait for a symbolic link to be created before it starts to receive I/O requests. After creating the symbolic link, the driver should handle two types of I/O requests:\n\n- `Read`: the driver should respond with the string \"Hello world!\" when the I/O request is received\n- `Write`: the driver should respond with the number of characters written to the buffer when the I/O request is received\n\nFor all I/O requests, the driver should set the I/O status and I/O buffer status appropriately. Once the symbolic link is created, the driver should wait to be notified when the device is being shut down. During this period, the driver should stop receiving I/O requests and terminate."}, {"instruction": "Develop a Windows Device Driver for a simulated serial port device that allows it to send and receive bytes over a serial connection. The driver should implement the following operations:\n- Open\n- Close\n- Read\n- Write\n- Flush\n- CancelIo\n- Purge\n- SetDTR\n- SetRTS\n- SetBreak\n- ResetPort\n\nThe driver should implement a symbolic link that allows other drivers to use the device. The symbolic link should be created under the LOCAL_MACHINE_32_BIT namespace. You should also implement the WDF shutdown callback to close the serial device and unregister the symbolic link."}, {"instruction": "Develop a Windows kernel driver that implements a serial device driver for a generic character-based serial port. The driver should support the following operations:\n\n- Open the device and configure it for asynchronous operation.\n- Read a specified number of bytes from the device.\n- Write a specified number of bytes to the device.\n- Flush pending I/O operations on the device.\n- Close the device.\n\nThe driver should support the following features:\n\n- Implementing a symbolic link for the device.\n- Binding the driver to the device using the symbolic link.\n- Registering the driver for shutdown notifications.\n- Implementing driver-verifier-safe code for the driver's I/O queue and I/O cancel routine.\n- Supporting device-level and I/O-level callbacks for I/O operations."}, {"instruction": "Develop a Python function to create a Windows device driver that handles device I/O requests. The driver should be able to create a symbolic link that can be accessed by other devices such as a serial terminal. If the driver is not started, the device should be able to re-create the symbolic link if it is stopped."}, {"instruction": "Create a Windows driver that offers a new device type that reads and writes data from/to a file in the user's local system. The device interface should be exposed as a symbolic link that allows users to access the device in their applications. The driver should implement an I/O write operation that writes data from the I/O write buffer to the specified file. The driver should also implement an I/O read operation that reads data from the specified file and writes the data to the I/O read buffer. The driver should be able to handle multiple I/O operations concurrently. The driver must be written using the WDF library and support static driver verifier."}, {"instruction": "Implement a Windows device driver that registers a symbolic link for the driver and exposes an I/O queue. The I/O queue should support synchronous and asynchronous read and write operations. The driver should support both read and write operations in a single I/O operation. The driver should also support multiple simultaneous read and write operations."}, {"instruction": "Develop a Windows device driver that communicates with a user mode application via I/O control messages. The Windows device driver should implement an I/O queue and use a symbolic link to expose its device to the user mode application. The Windows device driver should support a single I/O control code and perform a simple I/O operation. This implementation should use the WDF framework to provide a clear and modular design."}, {"instruction": "Develop a Windows kernel-mode device driver as a Windows Driver Foundation (WDF) driver, implementing the following functionalities:\n\n- Create a WDF device object for a simulated device with a symbolic link to represent the device.\n- Implement the WDF I/O queue EvtIoStop callback.\n- Implement the WDF I/O queue EvtIoResume callback.\n- Implement the WDF shutdown notification callback.\n- Create and configure a WDF I/O queue for the device with execution level set to `WdfIoQueueDispatchSequential`.\n- Create a dispatch routine for the WDF I/O queue.\n- Schedule an I/O request to the queue.\n- Complete the I/O request.\n- Shutdown the device."}, {"instruction": "Develop a Windows device driver that registers a symbolic link with the system and presents a file-based device for file I/O. The symbolic link should be fed to the driver by a user program, and the driver should be capable of reading and writing the device file. Provide a mechanism to shut down the driver gracefully by handling the WDF shutdown notification from the system."}, {"instruction": "Develop a Python function to create a Windows device driver that performs the following operations:\n\n- The driver should be installed as a symbolic link to a device name in the Windows device manager.\n- The driver should be able to define an I/O queue to service I/O requests.\n- The driver should create an I/O request packet (IRP) and queue the IRP to the I/O queue.\n- Upon receipt of a request, the driver should read the request packet buffer and write a response packet buffer to the I/O queue.\n- Upon completion of the request, the driver should wait for the I/O queue to call the I/O request completion routine (EvtIoComplete).\n- The driver should support unloading after all requests have been serviced.\n/examples/example_8/README.md\n# Example 8\n\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Implementation\n\nThe `encode_integer` function accepts an integer `num` as input and returns a Python string containing the encoded characters. The function uses a nested for loop to iterate through the integer's bits and generate the encoded characters. The integer is split into chunks of 5 bits each and encoded as a single character using bitwise operations. The encoded characters are joined into a single string and returned as the output."}, {"instruction": "Develop a Windows device driver that reads and processes data from a source device (e.g., serial port) and writes processed data to a destination device (e.g., parallel port). The program should support the following functionalities:\n\n- Trigger an I/O read operation from the device on a specified interval\n- Process the data read from the device\n- Write the processed data to the destination device\n- Unblock the I/O when the device is not ready for the next read\n- Handle I/O completion and re-trigger the I/O when the device is not ready for the next read\n- Handle I/O cancellation and re-trigger the I/O when the device is not ready for the next read\n- Handle an I/O stop request and stop the I/O operation\n- Handle an I/O resume request and resume the I/O operation\n- Implement and use a WDF shutdown callback to safely terminate the driver\n/examples/example-8/README.md\n# Example 8\n## Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n## Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process."}, {"instruction": "Design a Windows driver that implements a kernel-mode I/O device that serves as a virtual serial port. This device should expose a symbolic link to the driver that can be used to interact with the device. The device should support asynchronous read and write operations. When the device is closed, the driver should clean up any remaining resources and terminate the current operating system session."}, {"instruction": "Develop a Windows driver for a simple I/O device that exposes a registry key for configuration. The driver should be able to read and write to the exposed registry key. The driver should ensure that its registry key is properly shut down when the driver is being unloaded."}, {"instruction": "Develop a Windows kernel mode device driver that creates a symbolic link to the device and implements a simple I/O queue for read and write operations. The device driver should support the following operations:\n- Read: read the current value of the counting counter\n- Write: write a new value to the counting counter\n- Reset: reset the counter to zero\n\nThe device driver should also support the following read/write operations on a 32-bit integer value:\n- Read: read the value from the device register\n- Write: write the specified value to the device register\n\nThe device driver should be designed to support multiple simultaneous clients and minimize the possible bottlenecks. The driver should provide output to the driver's log file, using the diagnostics logging API. The driver should be verified by using the static driver verifier in Windows."}, {"instruction": "Develop a Windows device driver that implements a basic I/O queue. The driver should expose a symbolic link through `\\\\.\\` and support read/write operations on the queue. The driver should handle read requests in multiples of 8 bytes, and should use the static driver verifier to verify that the driver is well-behaved. The driver should handle write requests with a total size in multiples of 8 bytes. After receiving an I/O request, the driver should fill the buffer with the ASCII value of the current time in the system, and stop executing the I/O request if the current time is the same as the time of the last I/O request. The driver should gracefully handle I/O requests that are interrupted by a shutdown notification and cannot be completed./examples/5_string_insertion_point/tests.py\nimport unittest\nfrom src.insertion_point import insertion_point\n\nclass InsertionPointTestCase(unittest.TestCase):\n    def test_insertion_point(self):\n        array = [1, 3, 5, 5, 6]\n        target = 5\n        expected_output = [2, 3]\n        self.assertEqual(insertion_point(array, target), expected_output)\n\nif __name__ == '__main__':\n    unittest.main()"}, {"instruction": "Develop a Python function that creates a driver that implements an I/O queue with the following operations:\n\n- Read: reads up to `bytes_to_read` bytes from the file at `path` and returns these bytes as a Python string.\n- Write: writes the string `data` to the file at `path` and returns the number of bytes written.\n- Seek: seeks to the offset `offset` bytes from the beginning of the file.\n- Flush: flushes all pending write operations to the file at `path`. The function should return `True` if successful and `False` if an error occurs.\n\nThe driver should also implement the following callback functions for resource management:\n\n- EvtDeviceAdd: creates a device object, creates a symbolic link for the device, and creates an I/O queue for the device.\n- EvtIoDeviceControl: handles I/O device control requests.\n\nThe driver should also implement the following callback functions for I/O queue management:\n\n- EvtIoRead: handles device read operations.\n- EvtIoWrite: handles device write operations.\n- EvtIoSeek: handles device seek operations.\n- EvtIoFlush: handles device flush operations.\n- EvtIoStop: handles the I/O queue stop operation. The function should call `EvtIoResume` to restart the I/O queue and handle the next I/O request.\n- EvtIoResume: handles the I/O queue resume operation. The function should close the file handle and flush all pending write operations before returning.\n\nThe driver should also implement the following callback functions for system shutdown management:\n\n- EvtDriverUnload: handles driver unload operations.\n- EvtDeviceRemove: handles device removal operations. The function should stop the I/O queue and remove the symbolic link."}, {"instruction": "Implement a Windows device driver that dynamically creates a symbolic link when a device file is opened and removes the symbolic link when the device file is closed. The driver should also set the I/O queue's execution level to `WdfExecutionLevelPassive`, and register an I/O queue callback to handle the I/O stop and I/O resume events. When the I/O queue is stopped, the driver should display a message to the console and set the I/O queue's execution level to `WdfExecutionLevelDispatch`. When the I/O queue is resumed, the driver should display another message to the console and set the I/O queue's execution level to `WdfExecutionLevelPassive`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: optional type, feature flag, feature flag lookup, feature flag enabling and disabling, browser context, WebContents, SessionTabHelper, MediaRouterFactory, MediaRouter API, route lookup, route collection, feature flag lookup, fallback to tab mirroring, Remote Playback route lookup, tab mirroring, local media session, local media session source type, local media session source type lookup, local media session status, local media session status lookup.\n\n### Task", "fingerprint": null, "content": {"code": "absl::optional<media_router::MediaRoute> GetSessionRoute(\n    const std::string& item_id,\n    base::WeakPtr<media_message_center::MediaNotificationItem> item,\n    content::BrowserContext* context) {\n  if (!media_router::MediaRouterEnabled(context)) {\n    return absl::nullopt;\n  }\n\n  // Return absl::nullopt if the item is not a local media session.\n  if (!item || item->SourceType() !=\n                   media_message_center::SourceType::kLocalMediaSession) {\n    return absl::nullopt;\n  }\n\n  // Return absl::nullopt if fallback to tab mirroring is disabled, and\n  // media session doesn't have an associated Remote Playback route.\n  if (!base::FeatureList::IsEnabled(\n          media_router::kFallbackToAudioTabMirroring) &&\n      !HasRemotePlaybackRoute(item)) {\n    return absl::nullopt;\n  }\n\n  auto* web_contents =\n      content::MediaSession::GetWebContentsFromRequestId(item_id);\n  if (!web_contents) {\n    return absl::nullopt;\n  }\n\n  const int item_tab_id =\n      sessions::SessionTabHelper::IdForTab(web_contents).id();\n  for (const auto& route :\n       media_router::MediaRouterFactory::GetApiForBrowserContext(context)\n           ->GetCurrentRoutes()) {\n    media_router::MediaSource media_source = route.media_source();\n    absl::optional<int> tab_id_from_route_id;\n    if (media_source.IsRemotePlaybackSource()) {\n      tab_id_from_route_id = media_source.TabIdFromRemotePlaybackSource();\n    } else if (media_source.IsTabMirroringSource()) {\n      tab_id_from_route_id = media_source.TabId();\n    }\n\n    if (tab_id_from_route_id.has_value() &&\n        tab_id_from_route_id.value() == item_tab_id) {\n      return route;\n    }\n  }\n\n  return absl::nullopt;\n}", "docstring": "// Playback or Tab Mirroring.", "function_name": "ShouldShowDeviceSelectorView"}, "id": 215, "seed": "absl::optional<media_router::MediaRoute> GetSessionRoute(\n    const std::string& item_id,\n    base::WeakPtr<media_message_center::MediaNotificationItem> item,\n    content::BrowserContext* context) {\n  if (!media_router::MediaRouterEnabled(context)) {\n    return absl::nullopt;\n  }\n\n  // Return absl::nullopt if the item is not a local media session.\n  if (!item || item->SourceType() !=\n                   media_message_center::SourceType::kLocalMediaSession) {\n    return absl::nullopt;\n  }\n\n  // Return absl::nullopt if fallback to tab mirroring is disabled, and\n  // media session doesn't have an associated Remote Playback route.\n  if (!base::FeatureList::IsEnabled(\n          media_router::kFallbackToAudioTabMirroring) &&\n      !HasRemotePlaybackRoute(item)) {\n    return absl::nullopt;\n  }\n\n  auto* web_contents =\n      content::MediaSession::GetWebContentsFromRequestId(item_id);\n  if (!web_contents) {\n    return absl::nullopt;\n  }\n\n  const int item_tab_id =\n      sessions::SessionTabHelper::IdForTab(web_contents).id();\n  for (const auto& route :\n       media_router::MediaRouterFactory::GetApiForBrowserContext(context)\n           ->GetCurrentRoutes()) {\n    media_router::MediaSource media_source = route.media_source();\n    absl::optional<int> tab_id_from_route_id;\n    if (media_source.IsRemotePlaybackSource()) {\n      tab_id_from_route_id = media_source.TabIdFromRemotePlaybackSource();\n    } else if (media_source.IsTabMirroringSource()) {\n      tab_id_from_route_id = media_source.TabId();\n    }\n\n    if (tab_id_from_route_id.has_value() &&\n        tab_id_from_route_id.value() == item_tab_id) {\n      return route;\n    }\n  }\n\n  return absl::nullopt;\n}", "__index_level_0__": 59, "concepts": ["optional type", "feature flag", "feature flag lookup", "feature flag enabling and disabling", "browser context", "WebContents", "SessionTabHelper", "MediaRouterFactory", "MediaRouter API", "route lookup", "route collection", "feature flag lookup", "fallback to tab mirroring", "Remote Playback route lookup", "tab mirroring", "local media session", "local media session source type", "local media session source type lookup", "local media session status", "local media session status lookup."], "parsing_result": [{"instruction": "Develop a Python program that generates a WebRTC session with two mobile clients (Android and iOS) and a remote browser client (Chrome). The program should enable the `Remote Playback` route for the media session created on the mobile clients, and test whether the `Remote Playback` route is correctly chosen by the browser client.\n\nThe program should support three operations:\n\n- `enable_remote_playback`: Enable the `Remote Playback` route for the local media session.\n- `disable_remote_playback`: Disable the `Remote Playback` route for the local media session.\n- `is_remote_playback_enabled`: Check if the `Remote Playback` route is enabled for the local media session.\n\nThe program should allow users to switch between two distinct media sessions, with each session containing a different media source."}, {"instruction": "Create an Electron app that enables remote playback for YouTube videos in the browser. The user should be able to pause, play, seek, and toggle audio in a tab. The script can be run in any browser context, as long as either Chrome or Firefox is installed.\n\n### Additional Instructions\n\n#### Chrome\n- Clone the `chrome.google.com` GitHub repo into a local directory: `git clone https://github.com/chrome/chrome.google.com.git`\n- Navigate to the cloned repo: `cd chrome.google.com`\n- Install the dependencies: `npm install`\n- Start the development server: `npm start`\n\nThe Electron app will be running on localhost:8000.\n\n#### Firefox\n- Clone the `mozilla.org` GitHub repo into a local directory: `git clone https://github.com/mozilla/mozilla.org.git`\n- Navigate to the cloned repo: `cd mozilla.org`\n- Install the dependencies: `npm install`\n- Start the development server: `npm start`\n\nThe Electron app will be running on localhost:8000."}, {"instruction": "Write a Python program that implements a basic media router. The program should support multiple routes for different media sources, such as local media session and remote playback. It should also allow enabling and disabling of specific routes at runtime, with the ability to read and write feature flags to a persistent storage.\n\nThe program should support route lookup and route collection. Each route has a set of features that it supports, which can be enabled or disabled at runtime. The program should be able to lookup and manage a list of enabled routes.\n\nThe program should support feature flag lookup and fallback to tab mirroring. This approach enables the program to handle the case where a feature is not supported or disabled by the user in the media router settings. When a feature is not supported or disabled, the program can fall back to tab mirroring to allow users to continue browsing and play media while the feature is unavailable.\n\nThe program should support local media session and remote playback. Each route has a media source type associated with it, which determines the type of media source. The program should be able to configure local media session, remote playback, and tab mirroring as routes.\n\nThe program should support local media session source type lookup and local media session status lookup. This approach enables the program to determine the status of local media sessions at runtime, which is important for supporting the routes that require local media sessions.\n\nThe program should support input validation, such as checking for missing or invalid arguments, checking for invalid feature flags, and handling exceptions gracefully."}, {"instruction": "Develop a Python program that supports the following actions:\n\n- Tab mirroring: Mirroring is a feature that allows a user to view the content of another tab in a new tab, for example, while listening to music. This feature is available in Chrome on desktop. The program should detect an active tab with a media player or a tab with a YouTube video in its URL, and if such a tab is detected, it should mirror the content of that tab in a new tab. The program should maintain a list of tabs to be mirrored, and should update the mirroring status of the active tab accordingly.\n- Remote playback: Remote playback is a feature that allows a user to listen to music from a remote device or a server. The program should detect an active tab with a media player or a tab with a YouTube video in its URL, and if such a tab is detected, it should continue to play the content of that tab in the background, while the user is listening to music on a remote device. The program should maintain a list of remote playback sessions, and should update the current status of the active tab accordingly.\n- Fallback to tab mirroring: When the user is listening to music on a remote device, the program should provide a fallback option to continue the music playback on the local device. When the user is listening to music on the local device, the program should provide a fallback option to continue the music playback on the remote device.\n\nThe program should support the following actions:\n\n- Enable and disable tab mirroring: The program should enable and disable tab mirroring by updating the corresponding feature flags in the browser.\n- Enable and disable remote playback: Similar to the previous action, the program should enable and disable remote playback by updating the corresponding feature flags in the browser.\n- Enable and disable both tab mirroring and remote playback: The program should enable and disable both tab mirroring and remote playback by updating the corresponding feature flags in the browser.\n- Update the list of tabs to be mirrored: The program should update the list of tabs to be mirrored by updating the corresponding feature flag in the browser.\n\nThe program should also provide a user interface for managing the mirroring and remote playback sessions, including creating, modifying, and removing sessions."}, {"instruction": "Develop a Python program that offers a media router service for local media sessions. The program should enable and disable routing between local media sessions and remote tab mirrors. The program should also offer fallback behaviors for route lookup, when a remote tab mirror is not available. The program should communicate with remote tab mirrors through the `MediaRouter` API.\n\nThe program should support enabling and disabling of route fallback behaviors, such as local tab mirroring, remote tab mirroring, and fallback to any other default method. By implementing the `MediaRouterFactory` interface, the `MediaRouter` class can be extended to manage different types of media router instances.\n\nThe program should also support configuring the fallback behavior for a specific media session, by modifying the `MediaRouter` class to add an optional argument to the `addRoute` method. This argument can be used to specify the fallback behavior for a specific media session.\n\nThe program should support enabling and disabling of route lookup when handling media events from remote tab mirrors or local media sessions. This behavior should be configurable by implementing the `SessionTabHelper` interface in the `MediaRouter` class.\n\nThe program should also support changing the `MediaRouter` class to handle different types of media sessions. This can be achieved by implementing the `LocalMediaSession` interface in the `MediaRouter` class.\n\nFinally, the program should support changing the `MediaRouter` class to handle different types of remote tab mirrors. This can be achieved by implementing the `RemotePlayback` interface in the `MediaRouter` class."}, {"instruction": "Implement a simple feature flag system that supports optional feature flags and feature groups. A feature flag is defined by a name and a boolean value indicating whether the feature is enabled. A feature group is a collection of feature flags that share a common name prefix. A feature flag name can optionally be followed by a feature name suffix, separated by a colon. For example, \"feature_name\" or \"feature_optional_name:subfeature_name\".\n\nThe feature flag system should provide a centralized location to manage feature flags, with a tab-specific context that automatically enables and disables the relevant flags, as well as a UI mechanism to offer feature flags as options in specific contexts.\n\nTo support the feature flag system, the feature flag system should use optional features in a context-specific manner to enable and disable feature flags. For example, the feature flag system should enable and disable feature flags based on the current browser context, such as the context of the WebContents object or the current tab.\n\nThe feature flag system should also implement feature groups, allowing for the collection and management of feature flags that share common names. A feature group can be enabled or disabled based on the current browser context or the current tab.\n\nThe feature flag system should provide a tab-specific context, with the ability to enable and disable feature flags and feature groups based on the current context. This context should be automatically updated whenever the browser context changes, such as when switching between tabs, windows, or profiles.\n\nThe feature flag system should also provide a UI mechanism to offer feature flags as options in specific contexts. This UI can be implemented as an extension or as a user interface. For example, the UI can be implemented as an extension that displays a list of available feature flags in a context-specific manner.\n\nThe feature flag system should support feature flag lookup, allowing for the retrieval and use of feature flags. For example, the feature flag system can be used to enable or disable feature flags based on specific conditions.\n\nAn optional feature flag can be enabled or disabled based on the current context, such as the context of the WebContents object, the current tab, or the current window.\n\nThe feature flag system can also be used to enable or disable feature groups based on the current context. For example, the feature flag system can be used to enable or disable feature groups based on the context of the WebContents object.\n\nAn optional feature group can be enabled or disabled based on the current context, such as the context of the WebContents object or the current tab.\n\nThe feature flag system should support feature group lookup, allowing for the retrieval and use of feature groups. For example, the feature group can be used to enable or disable feature groups based on specific conditions.\n\nThe feature flag system can also be used to enable or disable the feature flags and feature groups based on specific conditions. For example, the feature flag system can be used to enable or disable the feature flags and feature groups based on specific conditions.\n\nThe feature flag system should support fallback to tab mirroring, allowing for the ability to fall back to a tab mirroring strategy if a feature flag is not available. For example, the feature flag system can be used to fall back to a tab mirroring strategy if a feature flag is not available.\n\nThe feature flag system should support remote playback feature flags, allowing for the ability to enable or disable specific remote playback features. For example, the feature flag system can be used to enable or disable specific remote playback features based on specific conditions.\n\nThe feature flag system should support tab mirroring, allowing for the ability to mirror content in a tab to other tabs or windows. For example, the feature flag system can be used to mirror content in a tab to other tabs or windows.\n\nThe feature flag system should support local media session, allowing for the ability to enable or disable local media session features. For example, the feature flag system can be used to enable or disable local media session features based on specific conditions.\n\nThe feature flag system should support local media session source type, allowing for the ability to enable or disable local media session source types. For example, the feature flag system can be used to enable or disable local media session source types based on specific conditions.\n\nThe feature flag system should support local media session status, allowing for the ability to enable or disable local media session statuses. For example, the feature flag system can be used to enable or disable local media session statuses based on specific conditions.\n\nThe feature flag system should also provide a mechanism for the extension to communicate with the feature flag system. This communication can be implemented using the Chrome Developer Tools Protocol or using a custom protocol."}, {"instruction": "Design a program that allows users to toggle a feature flag that can be used to dynamically enable or disable a particular feature in the program. The feature flag should be stored in the Chromium browser, such that the flag value can be changed without updating the application code.\n\nThe program should allow the user to toggle the value of the feature flag, and the change should be reflected in the status of the flag from the Chromium browser. Additionally, the program should support handling the case where the feature flag does not exist in the Chromium browser and prompt the user to enable or disable the feature."}, {"instruction": "Create a new Chrome extension that allows users to control the media playback from the tab where the extension is installed.\n\nThe extension should be able to toggle media playback (e.g., play, pause) in the current tab. The toggle should be implemented by changing the icon in the address bar to the corresponding state (e.g., play icon, pause icon). The extension should also allow users to stop media playback (e.g., Mute, Unmute) and hide the tab where the extension is installed.\n\nHere is an example of an extension that implements the above features:\n\n![Extension](images/extension.gif)"}, {"instruction": "Develop a Python program that opens a Web browser and navigates to a given URL. The program should be configured to open a new tab for every URL it encounters. The program should also support switching to the browser's default tab, which can be either the active tab or the last active tab. The program should support using a provided command-line argument to enable or disable a feature flag.\n\nThe program should handle any exceptions gracefully. For example, the program should gracefully handle the case when the specified URL is invalid, or when the provided command-line argument is invalid."}, {"instruction": "Develop a Python program that supports a video-based media session for a specific video source. It should allow users to join the session from any device, including desktop browser, mobile browser, and Chromecast. The program should support the following features, implemented as optional features:\n\n- If a video source is specified, the program should start a session using the specified source in the browser tab.\n- If a video source is not specified, the program should first check for an enabled fallback source, such as a tab mirroring option, and then fallback to tab mirroring if the fallback source is not available.\n- If the program detects a Chromecast device, the program should automatically open the session using the Chromecast device as the video source.\n- If no video source is detected, the program should use a local media session to play the video.\nThis program should implement a feature flag for each feature to enable and disable the features independently. The program should also support a feature flag for tab mirroring, which should enable the fallback route for tab mirroring if it is enabled."}, {"instruction": "Develop a Python program that supports the following features:\n\n- Create a browser context;\n- Create a WebContents for a new tab in the browser context;\n- Enable tab mirroring for the WebContents;\n- Query the feature flag for tab mirroring by the WebContents;\n- Disable tab mirroring for the WebContents;\n- Create a MediaRouter for the browser context;\n- Query the feature flag for route lookup by the MediaRouter;\n- Enable route fallback to tab mirroring by the MediaRouter;\n- Enable route fallback to tab mirroring by the MediaRouter;\n- Query the feature flag for route lookup by the MediaRouter;\n- Query the feature flag for route lookup by the MediaRouter;"}, {"instruction": "Implement a feature flag system for Chrome Web Store Management. The feature flag system should allow users to enable and disable individual feature flags at runtime.\n\nTo implement this system, you will need to set up a `BrowserContext` in Chromium for each user. You can set the `BrowserContext` up by creating a `SessionTabHelper` and passing it to a `MediaRouterFactory` to create a `MediaRouter`. You can then retrieve the `MediaRouter` to query its `getRoute` method to determine whether a feature flag is enabled.\n\nYou can use the `MediaRouter` to open a tab mirroring a tab for a specific feature flag route, or open a tab for a specific fallback route. To open a tab mirroring a tab, use the `MediaRouter` to get a `MediaRoute` object that matches the route key for a feature flag route. After retrieving the `MediaRoute` object, use the `MediaRouter` to open a tab mirroring the route's tab.\n\nYou can use the `MediaRouter` to open a tab for a specific remote playback route, or open a tab for a specific fallback route. To open a tab for a specific remote playback route, use the `MediaRouter` to get a `MediaRoute` object that matches the route key for a route that enables remote playback. After retrieving the `MediaRoute` object, use the `MediaRouter` to open a tab for the route."}, {"instruction": "Develop a Python program that lets users:\n\n- Toggle Media Router using optional features and feature flags.\n- Toggle Media Router by enabling and disabling optional features and feature flags.\n- Enable and disable features and feature flags programmatically.\n- Toggle Media Router in a browser tab.\n- Toggle Media Router in a WebContents context.\n- Toggle Media Router in a SessionTabHelper context.\n- Toggle Media Router in a MediaRouterFactory context.\n- Toggle Media Router using MediaRouter API.\n- Find the route of a given tab.\n- Find the routes of all tabs.\n- Find the fallback route of a given tab.\n- Find the fallback routes of all tabs.\n- Toggle Media Router using a fallback route.\n- Toggle Media Router using a tab mirroring route.\n- Toggle Media Router using a local media session.\n- Toggle Media Router using a local media session source type.\n- Toggle Media Router using a local media session status."}, {"instruction": "Implement the Chromium WebRTC MediaRouter API using a Chrome extension with two features:\n- **Feature 1**: a button that enables the WebRTC MediaRouter\n- **Feature 2**: a button that switches between the WebRTC MediaRouter and tab mirroring\n\nFeature 1 adds a button to the browser toolbar that enables the WebRTC MediaRouter. When the button is pressed, the API is called to set up the MediaRouter. When the button is pressed again, the API is called to tear down the MediaRouter. You should use the `enabled` feature flag for this purpose.\n\nFeature 2 adds a button to the browser toolbar that switches between the WebRTC MediaRouter and tab mirroring. When the button is pressed, the API is called to look up the current route and route the media according to the current route. If the route is the WebRTC MediaRouter route, the API is called to switch to the tab mirroring route. If the route is the tab mirroring route, the API is called to switch to the WebRTC MediaRouter route. You should use the `mirrored` feature flag for this purpose.\n\nThe MediaRouter API is implemented in the extension's background script. The extension should use the `MediaRouterFactory` class to create a `MediaRouter` instance and register the `MediaRouter` with the `MediaRouterFactory` and the `SessionTabHelper`. The extension should register a callback with the `SessionTabHelper` to handle the route changing event.\n\nThe MediaRouter API should have the following basic behavior:\n1. When the extension is first loaded, the route should be the WebRTC MediaRouter route.\n2. When the button for Feature 1 is pressed, it should add a button to the toolbar. When the button is pressed again, it should remove the button from the toolbar.\n3. When the button for Feature 2 is pressed, the route should be the tab mirroring route if it is not already.\n4. When the route changes, the extension should switch to the WebRTC MediaRouter route if the route is now the tab mirroring route.\n5. If the route is the WebRTC MediaRouter route, a button should be added to the toolbar under the route name. When the button is pressed, the extension should switch to the tab mirroring route.\n6. If the route is the tab mirroring route, a button should be added to the toolbar under the route name. When the button is pressed, the extension should switch to the WebRTC MediaRouter route."}, {"instruction": "Create a Python program that accepts a WebContents instance as input and provides a feature flag lookup function that returns a boolean value that indicates whether a feature is enabled or not. Utilize the MediaRouterFactory class to create a MediaRouter instance, and the MediaRouter API to enable route lookup. Use the feature flag lookup function to determine the feature route and enable or disable it based on the feature flag status."}, {"instruction": "Develop a Python program that uses the Google Cast Media Router API to facilitate casting a local media session to Google Cast devices.\n\nThe program should allow users to select a media file from their local drive, and then cast it to Google Cast devices. It should also allow users to cast a media session that is currently playing from the same device, such as a YouTube video or a local music player.\n\nThe program should utilize the Google Cast Media Router API to implement the following features:\n\n- Select a media file to cast.\n- Cast a media session that is currently playing.\n- Fallback to tab mirroring if necessary.\n- Support for remote playback (e.g., YouTube video playback).\n\nThe program should provide a user interface that allows users to select a media file or media session to cast, and cast it to Google Cast devices.\n\nThe program should handle errors such as missing dependencies, invalid media files, and failed casting operations.\n\nThe program should be written in a modular manner with appropriate design patterns and encapsulation. It should use the feature flags to manage features such as casting a local media session or tab mirroring, and should provide fallbacks for features that are unavailable.\n\nThe program should be robust and efficient in handling large media files and heavy use cases.\n\n**Note:** The program should be developed using modern Python programming techniques such as object-oriented programming and design patterns."}, {"instruction": "Write a Python program to open a specific tab in a Google Chrome browser and mirror the tab contents in a new tab.\n\n- Start the browser with the desired target tab.\n- Create a new tab in the browser.\n- Find the target tab and mirror it in the new tab.\n- Optionally, implement feature flags to enable and disable this feature.\n- Optionally, provide fallback mechanism for tabs that cannot be mirrored, if the tab is not available."}, {"instruction": "Develop a Python program that allows you to control your media playback experience in your browser, allowing you to choose between remote playback and tab mirroring. You should be able to toggle the feature flag on and off to enable or disable the feature.\n\nThe program should be able to search for the media playback route, and determine if you are currently in a tab mirroring or remote playback route. You should also be able to enable or disable tab mirroring to switch between this mode and the remote playback mode."}, {"instruction": "Create a Python program that allows the user to interact with a tab from a local browser window.\n\nThe program should support features such as tab page navigation, tab local media session status discovery, tab local media session source type discovery, tab local media session enabling and disabling, tab mirroring, and tab remote playback. It should also handle fallback cases, such as tab mirroring and tab remote playback.\n\nThe program should use a feature flag to toggle the feature flags it supports. For example, if the feature flag `enable_tab_mirroring` is enabled, the program should allow tab mirroring, otherwise it should fallback to tab page navigation only.\n\nThe program should use feature flags to lookup the feature flags in the browser context. For example, the program should use a dictionary to map the feature flags to the corresponding WebContents objects.\n\nThe program should handle errors gracefully, such as displaying a message to the user when the target tab is no longer available.\n\nThe program should handle user input gracefully, such as displaying a message when the user enters invalid input.\n\nThe program should handle invalid feature flags gracefully, such as displaying a message when the feature flag is not found.\n\nThe program should gracefully handle the MediaRouter API when it is not available.\n\nThe program should use MediaRouterFactory to lookup the MediaRouter object.\n\nThe program should use the MediaRouter to lookup the available routes.\n\nThe program should use the MediaRouter to lookup the local media session source types.\n\nThe program should use the MediaRouter to enable and disable the local media session.\n\nThe program should use the TabMirroring API to mirror or unmirror a tab.\n\nThe program should use the MediaSession API to discover the local media session status.\n\nThe program should use the MediaSession API to lookup the local media session source type.\n\nThe program should use the MediaSession API to enable and disable the local media session.\n\nThe program should use the Remote Playback API to mirror or unmirror a tab.\n\nThe program should use the Remote Playback API to discover the remote media sessions.\n\nThe program should use the Remote Playback API to enable and disable the remote media session."}, {"instruction": "Develop a Python program that manages a feature flag that can be enabled/disabled at runtime. The program should have an entry point from which users can enable/disable a specific feature. The program should also have a way for each feature to have its own feature flag, which can be enabled/disabled by users.\n\nThe program should also support local and remote playback features. The local feature should be enabled/disabled by users, and the remote feature should be enabled by default and can be disabled by users.\n\nThe program should handle feature flag lookup in a graceful way. It should also handle the feature flag enabling and disabling in a graceful way, while allowing users to override the default setting for individual features.\n\nThe program should manage browser contexts and maintain a set of sessions that correspond to each active browser context. The program should provide a way for users to enable/disable features for each session, allowing them to easily toggle features for different sessions.\n\nThe program should support looking up feature flags for different types of content (e.g., audio/video, image, website, etc.). The program should also provide a way to lookup the status of the feature flags (e.g., enabled/disabled, per-session, etc.).\n\nThe program should also support the concept of a \"fallback to tab mirroring\" feature. When the fallback to tab mirroring feature is enabled, the program should automatically enable the tab mirroring feature for all sessions that have the fallback to tab mirroring feature enabled.\n\nThe program should handle cases where the remote playback feature is enabled, but the remote playback route is not configured in the browser. The program should provide a way to configure the remote playback route, which should be used by default for all sessions that have the remote playback feature enabled.\n\nThe program should support remote playback route lookup, which allows users to lookup the currently configured remote playback route.\n\nThe program should support tab mirroring, which allows users to easily switch between sessions and maintain the same content in different sessions.\n\nThe program should support the concept of a local media session, which is a group of related media content that can be played in a single session. The program should be able to create and manage local media sessions.\n\nThe program should support the concept of a local media session source, which is a piece of media content that can be used by a local media session. The program should be able to create and manage local media session sources.\n\nThe program should support the concept of a local media session source type, which is a category of local media session sources. The program should be able to create and manage local media session source types.\n\nThe program should support the concept of a local media session status, which represents the current status of a local media session. The program should be able to create and manage local media session statuses.\n\nThe program should support the concept of a local media session status lookup, which allows users to lookup the currently active local media session status.\n\nThe program should handle cases where the fallback to tab mirroring feature is enabled, but the tab mirroring feature is not configured for a particular session. The program should provide a way to configure the tab mirroring feature for a specific session, which should be used by default for the session.\n\nThe program should support error handling and graceful fallbacks in a graceful way. The program should also support graceful termination in a graceful way."}, {"instruction": "Develop a Python program that manages the feature flag in a browser context. The program should read a text file to set feature flags in the browser context. Each line of the text file contains a flag name, a colon, and a value that indicates the setting of the flag. The program should read the feature flags from the file and set them in the browser context.\n\nThe program should support enabling and disabling individual feature flags using a command-line interface. The commands should be in the format of `enable` and `disable` commands in the form of `enable [flag name]` and `disable [flag name]`. The program should parse the input and apply the corresponding action to the feature flag.\n\nThe program should also support querying the setting of individual feature flags using a command-line interface. The command should be in the format of a `get` command in the form of `get [flag name]`. The program should parse the input and return the setting of the corresponding flag.\n\nThe program should handle any errors related to parsing the input correctly and returning the correct response. It should also handle any errors related to enabling or disabling the feature flags in the browser context, such as errors related to accessing the feature flags from the file, errors related to parsing the input, and errors related to setting the feature flags in the browser context.\n\nThe program should handle any errors related to accessing the feature flags from the file, errors related to parsing the input, and errors related to setting the feature flags in the browser context. It should also handle any errors in accessing the WebContents, SessionTabHelper, or MediaRouterFactory."}, {"instruction": "Create a Python program that implements a remote media session for a web page. The program should start a new tab on the web page, open a local media session for the tab, and register a `MediaRoute` with an available route host. If the route host is not found, the program should fallback to tab mirroring. A tab mirror is a local tab copy of a remote tab. It is used when the route host is not available to offer a route to the tab.\n\nThe program should handle the following events from the local route host:\n- The route is available: the program should open a new local media session for the tab, set the `route.mirroring` flag to `true`, and set the `route.mirroringSource` attribute of the session to the local media session ID.\n- The route is not available: the program should check if the tab is in a mirroring state. If the tab is in mirroring state, the program should stop mirroring and reset the `route.mirroringSource` attribute of the session.\n\nThe program should handle the following events from the remote media session:\n- The local media session is open: the program should check if the `route.mirroringSource` attribute is set to the local media session ID. If so, the program should start mirroring to the local media session.\n- The local media session is closed: the program should check if the `route.mirroringSource` attribute is set to the local media session ID. If so, the program should stop mirroring and reset the `route.mirroringSource` attribute of the local media session."}, {"instruction": "Develop a Python program that offers advanced media routing features. The program should implement the following features:\n\n- Automatically mirror media playback from the remote session to the local tab.\n- Automatically mirror media playback from a local tab to the remote session.\n- Automatically offer mirroring to a remote tab when it requests to play media.\n- Automatically disable mirroring when the remote tab stops playing media.\n\nThis program should handle all the edge cases, including session creation, tab lookup, route lookup, and route collection. The program should also offer fallback to tab mirroring in cases where the remote tab cannot be found or is not available."}, {"instruction": "Design a Python program that emulates the YouTube Remote Playback feature.\n\nThe program should handle inputs from a command-line interface and feature flags. The program should support the following commands:\n\n- `page <URL>`: Loads a new page in the browser.\n- `play`: Plays a video from the current page in the browser.\n- `pause`: Pauses the playing video.\n- `fullscreen`: Toggles full screen mode.\n- `mute`: Mutes or unmutes the audio.\n- `skip`: Skips the current video.\n- `exit`: Exits the program.\n\nThe program should handle invalid or improperly formatted inputs.\n\nThe program should use feature flags to enable or disable certain features or behaviors. The program should support the following feature flags:\n\n- `enable_remote_playback`: Enables or disables the Remote Playback feature.\n- `enable_tab_mirroring`: Enables or disables the Tab Mirroring feature.\n- `enable_local_media_session`: Enables or disables the Local Media Session feature.\n\nThe program should use feature flags to lookup the values of certain feature flags. The program should provide the following feature flags:\n\n- `is_remote_playback_enabled`: Returns a boolean value indicating whether the Remote Playback feature is enabled.\n- `is_tab_mirroring_enabled`: Returns a boolean value indicating whether the Tab Mirroring feature is enabled.\n- `is_local_media_session_enabled`: Returns a boolean value indicating whether the Local Media Session feature is enabled.\n\nThe program should use feature flags to enable or disable certain features or behaviors. The program should provide the following feature flags:\n\n- `enable_remote_playback`: Enables or disables the Remote Playback feature.\n- `enable_tab_mirroring`: Enables or disables the Tab Mirroring feature.\n- `enable_local_media_session`: Enables or disables the Local Media Session feature.\n\nThe program should provide user prompts to confirm or cancel actions.\n\nThe program should use the [Browser Context API](https://developer.chrome.com/docs/extensions/reference/browserAction/) to add an action button to the toolbar of the browser.\n\nThe program should provide a context menu item in the browser's right-click menu.\n\nThe program should use the [WebContents API](https://developer.chrome.com/docs/extensions/reference/webNavigation/) to intercept the navigation of the current page in the browser.\n\nThe program should use the [SessionTabHelper API](https://developer.chrome.com/docs/extensions/reference/mediaRouter/#type-SessionTabHelper) to manage the tabs in the browser session.\n\nThe program should use the [MediaRouterFactory API](https://developer.chrome.com/docs/extensions/reference/mediaRouter/#type-MediaRouterFactory) to create a MediaRouter instance.\n\nThe program should use the [MediaRouter API](https://developer.chrome.com/docs/extensions/reference/mediaRouter/#type-MediaRouter) to interact with the MediaRouter instance.\n\nThe program should use the `route` property of the MediaRouter instance to lookup the routes available in the browser.\n\nThe program should use the `routeCollection` property of the MediaRouter instance to lookup the route collection in the browser.\n\nThe program should use the `isSourceTypeAvailable` method of the MediaRouter instance to determine whether a specific source type is available in the browser.\n\nThe program should use the `localMediaSession` property of the MediaRouter instance to receive the local media session in the browser.\n\nThe program should use the `isSourceTypeAvailable` method of the MediaRouter instance to determine whether a specific source type is available in the browser.\n\nThe program should use the `localMediaSessionStatus` property of the MediaRouter instance to receive the local media session status in the browser.\n\nThe program should use the `isSourceTypeAvailable` method of the MediaRouter instance to determine whether a specific source type is available in the browser.\n\nThe program should use the `route` property of the MediaRouter instance to lookup the routes available in the browser.\n\nThe program should use the `routeCollection` property of the MediaRouter instance to lookup the route collection in the browser."}, {"instruction": "This task requires implementing a Chrome extension that plays audio files in the form of tabs on the desktop. This task is designed to highlight the key concepts and features of the underlying Chrome browser APIs and provide a deeper understanding of the browser's architecture.\n\nTo achieve this goal, you will develop a Chrome extension that takes advantage of the Media Router API. The extension will serve as a controller for the audio playback feature. It will play audio in the form of tabs on the desktop, mirroring the tabs in the current browser window. In the extension, you will utilize the Media Router API to implement the following features:\n\n- **Route Lookup**: When the extension receives a request to play audio, it will perform an initial lookup of the media route. The route lookup will utilize the MediaRouterFactory to retrieve the MediaRouter singleton instance, and then use the MediaRouter's `getRoute` method to retrieve the route associated with the specified route ID.\n- **Route Collection**: The extension will maintain a collection of routes that have been discovered by the MediaRouter. This collection will be updated as new routes are discovered by listening to the MediaRouter's `onRouteAdded` and `onRouteChanged` events.\n- **Feature Flag Lookup**: When the extension receives a request to play audio, it will check if the appropriate feature flag is enabled. The feature flag lookup will use an external service to determine if the feature flag is enabled for the current browser session.\n- **Fallback to Tab Mirroring**: If the extension determines that the feature flag is disabled, it will fallback to tab mirroring. Tab mirroring is a technique that involves creating a tab mirror in the browser window, and playing audio from that tab mirror.\n- **Remote Playback**: If the extension determines that the feature flag is enabled, it will perform a remote playback. This involves creating a MediaSession object and initializing it with the \"remote\" source type. The MediaSession will be initialized with the appropriate source information and will be added to the current audio session.\n\nBy implementing these features, you will gain a deeper understanding of the underlying Media Router API and the browser's architecture."}, {"instruction": "Implement a browser extension that enables the user to enable or disable certain features in the browser.\n\n- The extension should be installed as a browser extension that loads in all browser contexts. It should not need any user interaction.\n- The extension should provide a way to enable or disable certain features in the browser. It should not be possible to enable a feature that already exists, and it should not be possible to disable a disabled feature.\n- The extension should provide a way to view the list of enabled features and their associated settings in the browser's UI. The extension should be able to dynamically update the list of features based on the current state of the browser."}, {"instruction": "Write a Python program that provides a unified UI for controlling media playback on a browser with only a single tab. The program should support multiple different playback routes (e.g., tab mirroring, remote playback, local playback) based on feature flags. The program should also support feature flags for enabling and disabling individual routes.\n\nThe program should allow the user to change the active route through a simple UI. The UI should allow the user to select different routes and toggle their availability. The program should also support route fallbacks, such as tab mirroring in case of tab mirroring not being available or available but not working properly.\n\nImplement all necessary classes that are required for the program to operate. Here are some ideas for the classes:\n\n- `Route`: represents a media playback route, e.g., tab mirroring, remote playback, local playback\n- `RouteManager`: maintains a list of routes and provides methods for selecting and deselecting routes\n- `FeatureFlag`: represents a feature flag, e.g., tab mirroring, remote playback, local playback\n- `FeatureFlagManager`: manages a list of feature flags, provides methods for enabling and disabling feature flags, and provides methods for getting the state of feature flags\n- `Browser`: represents a browser instance, e.g., Google Chrome, Mozilla Firefox\n- `BrowserManager`: maintains a list of browsers and provides methods for creating, selecting, and deselecting browsers\n\nThe program should be able to read configuration settings from a configuration file or from an input source. The configuration file should contain information about the available routes and feature flags. It should also contain information about the active route(s) and feature flags. The program should also support command-line arguments for specifying the active route(s) and feature flags.\n\nThe program should also provide a simple command-line interface (CLI) for controlling the active routes and feature flags. The CLI should provide commands for enabling and disabling feature flags and setting the active route(s).\n\nThe program should provide a simple UI that allows the user to view and modify the active routes and feature flags. The UI should provide a list of available routes and feature flags, a button for selecting a route, a button for deselecting a route, and a button for enabling a feature flag. The UI should also provide a button for disabling a feature flag."}, {"instruction": "Develop a Python program that allows the user to toggle a feature flag in an Electron app. The program should start by loading a list of feature flags from a local configuration file. It should then prompt the user to choose a flag to toggle. The program should display a warning if the flag is already set to `True` or `False`. The program should allow users to toggle the flag by updating the value in the configuration file and reloading the configuration.\n\nThe program should use Electron's `BrowserWindow`, `WebContents`, `SessionTabHelper`, `MediaRouterFactory`, and `MediaRouter` APIs to handle the feature flag logic. It should also use Electron's `remote` API to retrieve the current browser window context and `remote.session` to retrieve the current session object.\n\nThe program should also handle error conditions such as invalid flags, invalid feature flag values, and incorrect usage of the program. It should notify the user of any errors in the command line interface.\n\nThe program should provide a smooth user experience by allowing users to choose the feature flag from a list of available flags, and by displaying a confirmation prompt before updating the configuration."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dynamically generated code, code generation engine, encapsulation, code generation engine, external reference support\n\n### Task", "fingerprint": null, "content": {"code": "PRESTypePluginParticipantData \n    setRight_replyPlugin_on_participant_attached(\n        void *registration_data,\n        const struct PRESTypePluginParticipantInfo *participant_info,\n        RTIBool top_level_registration,\n        void *container_plugin_context,\n        RTICdrTypeCode *type_code)\n    {\n        struct RTIXCdrInterpreterPrograms *programs = NULL;\n        struct PRESTypePluginDefaultParticipantData *pd = NULL;\n        struct RTIXCdrInterpreterProgramsGenProperty programProperty =\n        RTIXCdrInterpreterProgramsGenProperty_INITIALIZER;\n        if (registration_data) {} /* To avoid warnings */\n        if (participant_info) {} /* To avoid warnings */\n        if (top_level_registration) {} /* To avoid warnings */\n        if (container_plugin_context) {} /* To avoid warnings */\n        if (type_code) {} /* To avoid warnings */\n        pd = (struct PRESTypePluginDefaultParticipantData *)\n        PRESTypePluginDefaultParticipantData_new(participant_info);\n\n        programProperty.generateV1Encapsulation = RTI_XCDR_TRUE;\n        programProperty.generateV2Encapsulation = RTI_XCDR_TRUE;\n        programProperty.resolveAlias = RTI_XCDR_TRUE;\n        programProperty.inlineStruct = RTI_XCDR_TRUE;\n        programProperty.optimizeEnum = RTI_XCDR_TRUE;\n\n        programProperty.externalReferenceSize = \n        (RTIXCdrUnsignedShort) sizeof(::dds::core::external<char>);\n        programProperty.getExternalRefPointerFcn = \n        ::rti::topic::interpreter::get_external_value_pointer;\n\n        programs = DDS_TypeCodeFactory_assert_programs_in_global_list(\n            DDS_TypeCodeFactory_get_instance(),\n            (DDS_TypeCode *) (RTIXCdrTypeCode *)&::rti::topic::dynamic_type< setRight_reply >::get().native()\n            ,\n            &programProperty,\n            RTI_XCDR_PROGRAM_MASK_TYPEPLUGIN);\n\n        if (programs == NULL) {\n            PRESTypePluginDefaultParticipantData_delete(\n                (PRESTypePluginParticipantData)pd);\n            return NULL;\n        }\n\n        pd->programs = programs;\n        return (PRESTypePluginParticipantData)pd;\n    }", "docstring": "/* To avoid warnings */", "function_name": "setRight_reqPlugin_on_participant_attached"}, "id": 219, "seed": "PRESTypePluginParticipantData \n    setRight_replyPlugin_on_participant_attached(\n        void *registration_data,\n        const struct PRESTypePluginParticipantInfo *participant_info,\n        RTIBool top_level_registration,\n        void *container_plugin_context,\n        RTICdrTypeCode *type_code)\n    {\n        struct RTIXCdrInterpreterPrograms *programs = NULL;\n        struct PRESTypePluginDefaultParticipantData *pd = NULL;\n        struct RTIXCdrInterpreterProgramsGenProperty programProperty =\n        RTIXCdrInterpreterProgramsGenProperty_INITIALIZER;\n        if (registration_data) {} /* To avoid warnings */\n        if (participant_info) {} /* To avoid warnings */\n        if (top_level_registration) {} /* To avoid warnings */\n        if (container_plugin_context) {} /* To avoid warnings */\n        if (type_code) {} /* To avoid warnings */\n        pd = (struct PRESTypePluginDefaultParticipantData *)\n        PRESTypePluginDefaultParticipantData_new(participant_info);\n\n        programProperty.generateV1Encapsulation = RTI_XCDR_TRUE;\n        programProperty.generateV2Encapsulation = RTI_XCDR_TRUE;\n        programProperty.resolveAlias = RTI_XCDR_TRUE;\n        programProperty.inlineStruct = RTI_XCDR_TRUE;\n        programProperty.optimizeEnum = RTI_XCDR_TRUE;\n\n        programProperty.externalReferenceSize = \n        (RTIXCdrUnsignedShort) sizeof(::dds::core::external<char>);\n        programProperty.getExternalRefPointerFcn = \n        ::rti::topic::interpreter::get_external_value_pointer;\n\n        programs = DDS_TypeCodeFactory_assert_programs_in_global_list(\n            DDS_TypeCodeFactory_get_instance(),\n            (DDS_TypeCode *) (RTIXCdrTypeCode *)&::rti::topic::dynamic_type< setRight_reply >::get().native()\n            ,\n            &programProperty,\n            RTI_XCDR_PROGRAM_MASK_TYPEPLUGIN);\n\n        if (programs == NULL) {\n            PRESTypePluginDefaultParticipantData_delete(\n                (PRESTypePluginParticipantData)pd);\n            return NULL;\n        }\n\n        pd->programs = programs;\n        return (PRESTypePluginParticipantData)pd;\n    }", "__index_level_0__": 60, "concepts": ["dynamically generated code", "code generation engine", "encapsulation", "code generation engine", "external reference support"], "parsing_result": [{"instruction": "Design a Python class that generates C++ code for a specified set of variables. The class should support a few basic operations, such as declaring variables of different types and assigning values to them. The class should also support generating code for arrays, nested arrays, and for loops.\n\nThe class should also include an option for including external dependencies. The class should support conditional inclusion of dependencies based on the presence of a specific variable name.\n\nCreate a function that generates these C++ variables by using the class. The function should take the names of the variables, their types, and the value to be assigned to them, as well as any necessary dependencies. The function should return the generated C++ code. For example, given the variables `var1` and `var2` of type `int` and `double`, the function should return:\n```\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int var1 = 0;\n    double var2 = 0.0;\n}\n```"}, {"instruction": "Implement a Python class `CodeGenerator` that generates a Python script that contains a function that takes any list of strings as its input and returns a new list of strings where each string is a concatenation of the original string and its first character. For example, `CodeGenerator.generate_code([\"apple\", \"banana\", \"cherry\"])` should return `[\"applea\", \"bananaanana\", \"cherrya\"]`. The class should contain a method `generate_code(self, strings: list)` that accepts a list of strings as input, and should return the generated code as a string.\n\nThe class should offer the following public methods to support the generation of code:\n- `generate_code_with_case(self, strings: list, case_option: str)`: generates code that appends a case-sensitive or case-insensitive version of the first character of each string. The `case_option` argument should accept one of the following values: `'CaseSensitive'` or `'CaseInsensitive'`.\n- `generate_code_optional_connector(self, strings: list, connector_option: str)`: generates code that concatenates all strings with a specified connector. The `connector_option` is either `'Space'` or `'Comma'`."}, {"instruction": "Design a Python class `CodeGenerator` that accepts a source code string as input and generates a new version of the code with all the strings replaced by a new string of your choice. The class should support the following operations:\n\n1. Initializing a `CodeGenerator` with a source code string\n2. Generating a new version of the source code with all the strings replaced by a new string of your choice\n3. Replacing the old string with a new string of your choice\n4. Retrieving the old string from the source code\n\nIn addition, the class should have methods to dynamically generate new versions of the code that follow a specific pattern. For example, `code_generator.create_version(\"old_string\", \"new_string\", \"old_string == new_string\")` should generate a new version of the source code that replaces all occurrences of the old string with the new string while keeping the version of the source code unchanged if the old string does not match the new string."}, {"instruction": "Write a Python class `CodeGenerator` that offers a template-based engine for generating code based on user-defined templates and input variables. The class should have a method `generate()` that takes the name of the template file and the input variables as parameters, loads the template file, and returns the generated code. The class should support external references to other files in the same directory, and should be able to handle template files with or without extension."}, {"instruction": "Create a Python class that serves as a code generation engine. The class should be able to generate a new Python class dynamically based on a template. The class should provide a method `generate_code(self, target_module_name: str, target_class_name: str, class_body: str)`. The method should dynamically import the generated code and return a reference to the new class. The class should be able to process and apply code templates to any Python module and any name of the target class.\n\nThe code generation engine should be able to handle all the data types of Python primitive types and the `None` type. The class should handle the most common code generation and format errors and return an appropriate error message.\n\nFor example, given the following template code:\n```python\nclass %(new_class_name)s:\n    def __init__(self, **kwargs):\n        for key, value in kwargs.items():\n            self.__dict__[key] = value\n```\nThe engine should be able to generate a class `Foo` based on this template. The generated class should have a method `process_data(self, data: list)`, which takes a list of dictionaries and processes them in a custom manner. The engine should be able to generate the following code:\n```python\nclass Foo:\n    def __init__(self, **kwargs):\n        for key, value in kwargs.items():\n            self.__dict__[key] = value\n    def process_data(self, data: list):\n        # custom code\n```"}, {"instruction": "Create a Python class `CodeGenerator` that supports code generation for a complex program. The class should generate inline code for a basic math operation, a function call, and a sequence of chained function calls. It should support a limited set of operators, variables, and function names. The class should explore all possible combinations of generated code, as well as all possible values for generated code. Here is an example of the format for the generated code:\n\n```\n# A basic math operation\nmath.sqrt(value1 + value2)\n\n# A function call\nconvert_temperature(temperature, unit1, unit2)\n\n# A chain of function calls\nprint_to_console(\n    function_a(\n        function_b(\n            function_c(\n                function_d(\n                    value)\n                )\n            )\n        )\n    )\n)\n```"}, {"instruction": "Develop a Python class `CodeGenerator` that implements a code generator for a simple language. In this simple language, the syntax for defining a variable is as follows:\n- variable: `x`\n- assignment: `x = 2 * y + 3`\n- addition: `+`\n- multiplication: `*`\n- integer variable: `int`\n- integer constant: `2`\n- integer arithmetic: `2 + 3 * 4`\n- variable reference: `y`\n\nThe code generator should maintain a dictionary to track the intermediate values of variables during the computation.\n\nThe generator should generate the code represented by the input string. The operator symbols should be preserved in the output. An example code generation expression is as follows:\n`CodeGenerator().generate(\"x = 2 * y + 3\")`\n\nThe output should be the equivalent code in the generated language:\n`x = 2 * y + 3`\n\nNote that the code generated for `x = 2 * y + 3` should be the same as `x = 2 * y + 3`."}, {"instruction": "Create a Python class that supports code generation. The class should be initialized with a list of code statements that will be executed as a part of the class definition. The class should support addition of new statements to the list and also allow the user to retrieve the generated class code as a string. The class should also be capable of supporting code generation from external files."}, {"instruction": "Develop a Python class `CodeGenerator` that supports the dynamic creation of simple functions and classes. The class should include a method `add_function(self, function_name: str)` that takes an input function name and creates a function with the name `function_name` that has a single argument `x` and returns the result of `x * 10`. The class should provide a method `add_class(self, class_name: str, members: dict)` to construct a class `class_name` with the specified `members`. The `members` parameter is a dictionary mapping member names to member values, which can be either functions or primitive values."}, {"instruction": "Inspired by [Python's `ast` module](https://docs.python.org/3/library/ast.html), design a Python class that can parse and process Python code written in a text-based format, allowing the user to effectively evaluate and execute the code. The code should be parsed and converted into an abstract syntax tree (AST) in the form of a list of Python tokens. The class should support the following actions:\n- `evaluate`: evaluate the code and return the result of the computation\n- `run`: execute the code\n\nThe class should be able to handle simple arithmetic, boolean logic, and all Python statements and expressions. A sample instance of the class should be able to process the following code on its own:\n```python\na = 10\nb = 20\nc = 30\nprint(a + b - c)\nprint(a > b or c < b and a > c)\n```\nThe class should be able to handle erroneous inputs gracefully, such as invalid Python code or invalid operation or argument formats. Additionally, the class should support the following features:\n- Process large code files and run them quickly\n- Support the execution of code fragments and run them immediately\n- Support code generation for test cases\n- Support code generation for a custom data structure"}, {"instruction": "Implement a Python class `CodeGenerator` that generates code for a specified programming language, based on a list of template codes. The class should support both code generation and template code modification. Look for examples of template code files in the provided `example_template_files` directory."}, {"instruction": "Design a Python class that enables code generation for a single-line function. The class must support generating either single or multiple lines of code. The class must also be capable of setting the name and parameters of the function and its return value. Finally, it should allow the user to specify the path to a file in which the function is to be stored, or the generated code is to be printed directly to the console. Finally, the class should be capable of handling multiple function calls in a single invocation, as long as the user is not interested in the return value of the previous calls."}, {"instruction": "Design a Python class to generate random strings. The class should be initialized using the number of characters and other parameters to determine the string's desired characteristics, such as character set, length, and case. The class should support generating random strings of any length and preserve the original case of characters. All the parameters are optional, and the class should therefore support code generation without any mandatory parameters.\n\nThe constructor should take an optional parameter `to_lower` that determines whether the returned string should be in lowercase or uppercase. The constructor should also take an optional parameter `allow_special_chars` that determines whether special characters such as periods, spaces, and punctuation marks are allowed in the generated string.\n\nThe class should support code generation in two ways:\n- `generate_string()`: Returns a single random string with the specified length.\n- `generate_strings(n: int)`: Returns a list of n random strings with the specified length."}, {"instruction": "Design a Python class that stores a reference to a Python script file and provides a method to run an arbitrary function within the script. The function is passed as a string, which is subsequently matched to function signatures within the script. The function can be executed in any of the Python environments supported by the class, including a notebook, script, or interactive interpreter."}, {"instruction": "Develop a Python class `CodeGenerator` that generates code from an input string. The class should support the following operations:\n- `add_line`: add a line of code to the internal list of code lines\n- `add_comment`: add a comment to the internal list of code lines\n- `add_block`: add an opening block of code to the internal list of code lines\n- `add_end_block`: add a closing block of code to the internal list of code lines\n- `add_method`: create a method declaration at the end of the code block\n- `add_method_line`: add a line of code to the generated method\n- `add_end_method`: close the generated method, add any necessary new lines before the closing brace, and return the generated code string\n\nThe class should have a `generate` method that returns the final (generated) code string. The class should allow for multiple code generation steps, such as inserting multiple methods or nested blocks."}, {"instruction": "Design a Python tutorial engine. The engine should support dynamic generation of `Jupyter` notebooks and `Python` scripts. The engine should also be able to support code snippets embedded in markdown cells that can be processed by the engine."}, {"instruction": "Create a Python class that reads an external template file named `template.txt` and dynamically generates a new code file according to the template file. The class should support changing the existing code with the new code generated within a specified method `update_code(self, original_code: str, new_code: str)`. The original code snippet is provided and the new code snippet is generated based on the template file.\n\nThe class should have a method `generate_code(self, template_path: str)` that reads the template file and generates an updated code file according to the template file. The method should handle file operations and exceptions in a clean way.\n\nThe class should also support external references for dynamic code generation. To do this, the class should have a method `resolve_references(self, original_code: str, **kwargs)` that replaces references in the original code snippet with actual values based on the `kwargs` dictionary.\n\nThe class should handle invalid references gracefully. For example, if the template file contains a reference `{{ name }}` but only the `name` keyword argument is provided, the class should raise an exception.\n\nImplement the class with a `__str__` method that returns a formatted string showing the generated code."}, {"instruction": "Write a Python class `CodeGenerator` to process dynamic code generation requests. The class should maintain an internal state that is initially an empty string. The class should support extending the code with additional statements, and return the generated code as a string.\n\nThe class should support dynamic code generation requests in the form of `apply_operation(self, operation: str)`. Here are the detailed formats for each operation, explained through examples:\n- Class creation: `apply_operation(\"class:MyClass:\")`\n- Function creation: `apply_operation(\"def:my_function(self):\")`\n- Method creation: `apply_operation(\"def:my_method(self):\")`\n- Code block creation: `apply_operation(\"if:\")`\n- Statement addition: `apply_operation(\"print('Hello, World!')\")`\n- Statement removal: `apply_operation(\"del:\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, support the following external reference types:\n- Class: `apply_operation(\"ref:MyClass:\")`\n- Function: `apply_operation(\"ref:my_function:\")`\n- Method: `apply_operation(\"ref:my_method:\")`\n\nThe class should be flexible in terms of the code blocks. It should also be able to handle cases where the generated code requires multiple lines of code."}, {"instruction": "Create a Python class to encapsulate a code generator. The class should read a template file from disk, and when a template method is called, the code generator should dynamically generate the appropriate code.\n\nThe code generator should support a dynamic template file that can be loaded from disk at runtime. The code generator should also support loading the template file from an external source, such as a URL. The code generator should be able to perform a variety of operations, such as substituting variables and string formatting. Within the template, the variable placeholders should be enclosed in the format of \"{% variable_name %}\".\n\nThe template should be a simple text file with the extension `.txt`."}, {"instruction": "Develop a Python class named `CodeGenerator` that supports code generation. The class should maintain an internal state that is initially an empty string. The class should be able to generate nested functions and classes by providing a nested structure of `Function` and `Class` objects. This class should handle erroneous inputs gracefully, such as missing arguments or improperly formatted structures. To illustrate the need for the class, an example is provided.\n\n```python\npython_code = CodeGenerator()\npython_code.generate(Function(\n    'foo',\n    CodeGenerator(\n        Class(\n            'Bar',\n            CodeGenerator(\n                Function(\n                    'baz',\n                    CodeGenerator(\n                        'print(123)'\n                    )\n                )\n            )\n        )\n    )\n))\n```\n\nThe above example should generate the following code:\n\n```python\ndef foo():\n    def baz():\n        print(123)\n    class Bar:\n        def baz(self):\n            print(123)\n```/ex1/ruby/exercise_1.rb\n# Complete the function below.\ndef calculate(values)\n  return 0 if values.length == 0\n\n  min = values[0]\n  max = values[0]\n  sum = values[0]\n  values.each do |value|\n    if value < min\n      min = value\n    elsif value > max\n      max = value\n    end\n    sum += value\n  end\n\n  return [min, max, sum / values.length.to_f]\nend\n\n# Do not edit the code below this line.\nif __FILE__ == $PROGRAM_NAME\n  puts calculate([]) == [nil, nil, 0]\n  puts calculate([10]) == [10, 10, 10]\n  puts calculate([1, 2, 3, 4, 5]) == [1, 5, 3]\nend/ex2/c++/exercise_2.cpp\n#include <iostream>\n\nvoid print_output(bool is_leap_year);\n\nint main(int argc, char* argv[]) {\n    int year = 0;\n    std::cin >> year;\n\n    bool is_leap_year = (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n    print_output(is_leap_year);\n\n    return 0;\n}\n\nvoid print_output(bool is_leap_year) {\n    std::cout << (is_leap_year ? \"Leap Year\" : \"Not Leap Year\") << std::endl;\n}gative value is provided, it should raise an exception."}, {"instruction": "Develop a Python class `CodeGenerator` that supports dynamically generating code through a collection of template fragments. The class should support inserting a set of key-value pairs into the template, and should be able to generate the corresponding code.\n\nThe generator should be able to support multiple templates, and should be able to handle external references to other templates.\n\nIf the template requires external references, the generator should be able to locate the external templates using a specified directory path.\n\nIf the template contains a placeholder string that does not match any of the defined key-value pairs, the generator should replace the placeholder with an empty string."}, {"instruction": "In this exercise, you will create a class `CodeGenerator` that can generate dynamically generated code from an input `template` string. The class should expose three methods:\n- `generate(self, data: dict)` returns the generated code according to the input template\n- `input_format(self)` returns the expected input format of the generated code\n- `input_help_text(self)` returns the expected input help text for generating the code\n\nThe `generate` method should code-generate a `template` string, using the contents of a `data` dictionary, which is passed as an argument. The `template` string may contain placeholders that are replaced with values from the provided `data` dictionary.\n\nThe `input_format` method should return the expected input format of the generated code. This format includes a description for each placeholder and the expected input type for each placeholder.\n\nThe `input_help_text` method should return the expected help text for generating the code. It should contain instructions for how to use the generated code in a command line tool.\n\nAdditional requirements:\n- Each code template should be stored in a separate module, and a module should be selected based on the language specified by the user\n- The generated code should be placed in the same directory as the code template\n- The generated code should be named after the template filename\n- The `input_format` method should use the same method name as the `template` string, but without the leading percent sign\n- The `input_help_text` method should use the same method name as the `template` string, but without the leading hash sign\n- The `generate` method should use the same method name as the `template` string, but without the leading dollar sign\n- The default file extension for templates and code should be `.py` for Python code, `.txt` for text files, and `.js` for JavaScript code, and `.sh` for Bash scripts"}, {"instruction": "Create a Python class that allows programmers to generate dynamic code from template strings. The class should support the following operations:\n- `set_name(self, name: str)`: sets the name of the class to be created\n- `set_properties(self, properties: dict)`: sets a dictionary of properties, with their values as string literals, to be used when generating the code\n- `generate(self)`: generates the code of the class and returns it as a string\n\nFor example, given a class name of `Student` and the following properties:\n\n```python\nproperties = {\n  'firstName': 'Alex',\n  'lastName': 'Peterson',\n  'gender': 'male'\n}\n```\n\nThe code generation engine should output the following code:\n\n```python\nclass Student:\n    def __init__(self, firstName: str, lastName: str, gender: str):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.gender = gender\n```"}, {"instruction": "Write a Python class `CodeGenerator` that supports generating code fragments that are then executed using Python's `exec` function. The class must support generating function code, class code, and program code. The generated code can be used to:\n- add an attribute to an object\n- define a method on an object\n- access and modify the contents of a file\n\nUse a dictionary as the internal state of the class. The dictionary should contain the following keys:\n- `classname`: the name of the class to be generated\n- `methodname`: the name of the method to be generated\n- `methodcode`: the body of the method to be generated\n- `code`: the code to be executed after the generated code\n\nThe class must support specifying the name of the generated class, method name, and method body. The name of the class and the name of the method must be unique. The class must detect when the method name and the code are empty, and when the body of the method is not valid Python syntax.\n\nFor the code execution, the class must use the `exec` function to dynamically generate code that includes the body of the method, the class, and any other code provided by the user. The class should also support executing the generated code using a flag that is set to `True` by default. This flag determines whether or not the generated code should be run as a standalone program.\n\nThe `CodeGenerator` class should be able to generate code for the following scenarios:\n- `exec(CodeGenerator(\"ClassName\", \"Method1\", \"code1\", \"code2\"))`: generates a method that returns `code1 + code2`\n- `exec(CodeGenerator(\"ClassName\", \"Method2\", \"code1\", \"code2\", run_as_program=True))` generates a method that returns `code1 + code2` and then runs the generated code as a standalone program\n- `exec(CodeGenerator(\"ClassName\", \"Method3\", \"code1\", \"code2\", \"code3\", run_as_program=True))` generates a method that returns `code1 + code2 + code3` and then runs the generated code as a standalone program"}, {"instruction": "Implement a Python class that uses a code generator engine to create a class definition for a class called `GeneratedClass`. The class should contain a method to which a user can pass an arbitrary function as an argument, and the method should execute the function.\n\nThe function can be defined in one of the two ways:\n- it is a lambda function that takes no arguments and returns the value `3`\n- it is a function that takes two arguments and returns the sum of them\n\nThe code generator engine should handle the case where the function does not have the correct number of arguments or return type, and should allow the user to define the class using the raw class definition string."}, {"instruction": "Create a Python class that implements a code generation engine. The class should be able to generate code from a template file that contains placeholders. The generated code should be written into a file whose name is defined by the user. The class should support dynamic code generation of a form: `CodeGenerator(template_file: str, target_file: str, placeholders: Dict[str, str])`.\n\nThe template file should be a text file with placeholders specified using the following format:\n```\n%%[placeholder_name]%%\n```\n\nThe class should handle missing placeholders gracefully. For example, the following template file should be able to generate a matching file:\n```\nThis file should contain a [LINE_COUNT]-line paragraph.\n```\n\nThe generated file should contain the specified [LINE_COUNT] of lines. For example, if the input is `['10', 'LINE_COUNT']`, the generated file should be a 10-line file with the `LINE_COUNT` placeholder replaced with 10. The class should also support handling nested placeholders, where placeholders are nested inside other placeholders. For example, the following template file should be able to generate a matching file:\n```\nThis file should contain a [FIRST_LINE]-line paragraph.\n[FIRST_LINE] should be replaced with [SECOND_LINE]-line.\n```\n\nThe generated file should contain the specified [FIRST_LINE] and [SECOND_LINE] of lines. For example, if the input is `['10', 'SECOND_LINE']`, the generated file should contain 10 lines with '10' in the first line and 'SECOND_LINE' in the second line."}, {"instruction": "Design a Python class `CodeGenerator` that implements a code generation engine. The class should support generating code for a given input string. The engine should be flexible in the sense that it should support commonly used variable names, and the output code should be valid Python code.\n\nThe class should offer two kinds of functionality:\n- `add_variable(self, name: str, value: str)`: add a variable to the global namespace. Note that the variable name can only be a single word.\n- `generate_code(self, code: str)`: generate code according to the input string.\n\nYou are expected to create a Python file with the following content:\n```python\nfrom code_generator import CodeGenerator\n\ncg = CodeGenerator()\ncg.add_variable(\"x\", \"5\")\nresult = cg.generate_code(code=\"x + 5\")\nassert result == 10\n```"}, {"instruction": "Create a Python class `CodeGenerator` that can dynamically generate arbitrary Python code. The class should define a `generate` method that takes as an argument an object of a nested class, which represents the code to be generated. The class should use the object's attributes to construct the generated code.\n\nThe sample usage of the class is shown below:\n\n```python\nclass Car:\n    def __init__(self, model, color):\n        self.model = model\n        self.color = color\n\ncg = CodeGenerator()\ncg.generate(Car('X5', 'Black'))\n```\n\nThis should generate the following code:\n\n```python\nclass Car:\n    def __init__(self, model, color):\n        self.model = model\n        self.color = color\n```\n\nUse the `CodeGenerator` class to generate the code for any of the following classes:\n- `class Vehicle:`\n    - `def __init__(self, make, model, color, doors):`\n    - `def get_info(self):`\n- `class Person:`\n    - `def __init__(self, name, age, gender):`\n    - `def get_info(self):`\n- `class Shape:`\n    - `def __init__(self, shape_type, color, size):`\n    - `def get_info(self):`"}, {"instruction": "Implement a Python program that accepts the definition of a class defined externally as a string. The program should generate a class object based on the input string, and then create an instance of the class. The class definition should include a method that supports an arbitrary `args` and `kwargs` to be passed into the constructor of the class."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: type-safe pointer check with SE_PRECONDITION2, native value conversion to JS value with nativevalue_to_se, return value hold with SE_HOLD_RETURN_VALUE\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_AmbientInfo__skyColorLDR_get(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    cc::scene::AmbientInfo *arg1 = (cc::scene::AmbientInfo *) NULL ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::AmbientInfo>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(out) SWIGTYPE\n    ok &= nativevalue_to_se(arg1->_skyColorLDR, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"AmbientInfo__skyColorLDR_get, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(arg1->_skyColorLDR, s.thisObject(), s.rval());\n    \n    \n    \n    return true;\n}", "docstring": "// %typemap(in) SWIGTYPE value in", "function_name": "js_cc_scene_AmbientInfo__skyColorLDR_set"}, "id": 220, "seed": "static bool js_cc_scene_AmbientInfo__skyColorLDR_get(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    cc::scene::AmbientInfo *arg1 = (cc::scene::AmbientInfo *) NULL ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::AmbientInfo>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(out) SWIGTYPE\n    ok &= nativevalue_to_se(arg1->_skyColorLDR, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"AmbientInfo__skyColorLDR_get, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(arg1->_skyColorLDR, s.thisObject(), s.rval());\n    \n    \n    \n    return true;\n}", "__index_level_0__": 61, "concepts": ["type-safe pointer check with SE_PRECONDITION2", "native value conversion to JS value with nativevalue_to_se", "return value hold with SE_HOLD_RETURN_VALUE"], "parsing_result": [{"instruction": "Create a Python function that checks an input value `x` against the following constraints:\n\n- `x` is of type `int`;\n- `x > 0`;\n- `x <= 2147483647`;\n\nIf all constraints are met, the function should return `x`. Otherwise, the function should raise a JavaScript exception with a custom error message.\n\nTo implement the function, you should utilize the `SE_PRECONDITION2` macro with the `SE_CHECK_LT` and `SE_CHECK_LE` macros to check the type and value of the input `x`. You should also utilize the `SE_HOLD_RETURN_VALUE` macro to store the value of `x` as a JavaScript value with a non-null native pointer. Finally, you should convert the returned value to a native value using the `SE_NATIVEVALUE_TO_NATIVEVALUE` macro."}, {"instruction": "Create a Python function called `read_file_line_by_line` that takes a file path as input and reads the contents of the file line by line. The function should use the SE_PRECONDITION2 function to check whether the file path is valid. If it is invalid, the function should raise a custom exception that displays the error message. The function should use the SE_HOLD_RETURN_VALUE macro to return the file line as a JS value."}, {"instruction": "Implement a Python function `is_palindrome` that checks whether a string is a palindrome by comparing its characters from the front and the back. The function should satisfy the following:\n\n- The function should be implemented in C++.\n- It should be unit tested using Googletest or other open-source unit testing frameworks to ensure that it works correctly.\n- It should be type-safe and follow the Seastar conventions for input and output values."}, {"instruction": "Write a Python function `verify_pointer_safety(pointer, size, offset)` that verifies the safety of a pointer by comparing it with the pointer address obtained from the current JavaScript execution context and the size of the memory region being accessed. The function should return `True` if the pointer value is within the bounds of the allowed range, and `False` if it exceeds the bounds. The function should satisfy the following assertions:\n\n```python\nassert verify_pointer_safety(0, 4, 0) == True\nassert verify_pointer_safety(0, 4, 1) == False\nassert verify_pointer_safety(1, 2, 0) == True\nassert verify_pointer_safety(1, 2, 1) == False\nassert verify_pointer_safety(2, 3, 0) == True\nassert verify_pointer_safety(2, 3, 1) == False\nassert verify_pointer_safety(2, 3, 2) == False\n```"}, {"instruction": "Develop a C++ function that accepts a vector of integers and returns a pointer to the integer with the maximum value. Implement this function using the SE-C++ SDK. Use the SE_PRECONDITION2 assertion to check if the input parameter `input` is not null. Use the `nativevalue_to_se` function to convert the native integer value to a SE value. Use the `SE_HOLD_RETURN_VALUE` macro to hold the return value of the function."}, {"instruction": "Write a function `check_pointer_is_valid` that takes a pointer and returns a boolean value indicating whether the pointer is valid. For this purpose, the function should check if the pointer is NULL, if the pointer is out of the bounds of an array, or if the pointer is invalid for the specific data type. The function should use the SE_PRECONDITION2 macro to ensure that the pointer is not NULL, and that the pointer is valid. Additionally, it should use the SE_HOLD_RETURN_VALUE macro to hold the return value and ensure that the function returns a boolean value."}, {"instruction": "Develop a Python function to validate that a passed input is a valid object with a specified type, shape, and attributes. The function should leverage the type-checking features of the `se` module to validate the input.\n\nThe function should satisfy the following assertions:\n\n```python\nassert validate_input(None) == False\nassert validate_input(0) == False\nassert validate_input(1) == False\nassert validate_input(True) == False\nassert validate_input(False) == False\nassert validate_input([]) == False\nassert validate_input(()) == False\nassert validate_input({}) == False\nassert validate_input([0, 1]) == True\nassert validate_input([0]) == True\nassert validate_input([]) == True\nassert validate_input([]) == True\nassert validate_input({0: 1}) == True\nassert validate_input({1: 0}) == True\nassert validate_input({'a': 'b'}) == True\nassert validate_input({'a': 'b', 'c': 'd'}) == True\n```"}, {"instruction": "Develop a Python function `safe_cast_js_to_python(js_value)` that converts a JavaScript value to a Python object if possible, and returns `None` if the conversion fails. This function should satisfy the following assertions:\n\n```python\nassert safe_cast_js_to_python(True) == True\nassert safe_cast_js_to_python(None) == None\nassert safe_cast_js_to_python(\"abc\") == \"abc\"\nassert safe_cast_js_to_python([1, 2, 3]) == [1, 2, 3]\n```"}, {"instruction": "Develop a Python function `are_pointers_equal` that takes two pointers `ptr1` and `ptr2` of the same type as arguments and checks if they point to the same memory location. The function should return `True` if the pointers are equal and `False` if they are not. The requirements include:\n\n- A type-safe pointer check using `SE_PRECONDITION2` in the SE API.\n- A native value conversion to a JS value using `nativevalue_to_se` in the SE API.\n- A return value hold using `SE_HOLD_RETURN_VALUE` in the SE API."}, {"instruction": "Create a cross-platform C/C++ function `count_non_negative_integers` that takes a pointer to a JavaScript array of integers, `int_array`, and its length, `length`, as arguments. The function should iterate through the array and return the number of non-negative integers in the array. This implementation should ensure that the input array is not null and that its length is greater than 0. Additionally, it should use SE_PRECONDITION2 to verify that the array is not null and that its length is greater than 0. It should also use nativevalue_to_se to convert the JavaScript array to a native array and use SE_HOLD_RETURN_VALUE to hold the return value."}, {"instruction": "Develop a Python function `string_format` that takes two strings, `name` and `value` as arguments. The function should return a formatted string based on the given name and value. The formatted string should contain the name and value separated by a colon, as in `\"{name}={value}\"`.\n\nIn order to achieve this behavior, you need to use the SE_PRECONDITION2 and SE_HOLD_RETURN_VALUE macros to implement the function safely."}, {"instruction": "Implement a Python function `is_valid_pointer` that checks if a pointer is valid by verifying the following conditions:\n\n- The pointer's value must be non-null.\n- The pointer's value must be a non-zero integer.\n- The pointer's value must not exceed `INT_MAX`.\n\nImplement the function using nativevalue_to_se and SE_PRECONDITION2 to enforce the validity checks. Additionally, use SE_HOLD_RETURN_VALUE to hold the return value of the function."}, {"instruction": "Write a Python function to implement a pointer check and return value hold mechanism as a Python decorator. The decorator should be used to wrap the decorated function or method. The decorator should perform the following checks and hold return values based on the provided options:\n\n- Pointer check: ensure that the input is a valid pointer using the SE_PRECONDITION2 macro.\n- Return value hold: hold the return value with the SE_HOLD_RETURN_VALUE macro."}, {"instruction": "Write a Python function to check the conformance of a pointer to a particular type. The function should return a boolean value based on the type and the value of the pointer. You need to meet the following specifications:\n\n- The function should accept a pointer to the type as an argument, e.g., `uint8*` for unsigned 8-bit integers.\n- The function should be type-safe, such that it does not accept any other types for the pointer. This can be achieved by using the `SE_PRECONDITION2` macro to check the type of the pointer.\n- The function should return a boolean value based on the type and the value of the pointer.\n- The function should use the native value conversion macro `nativevalue_to_se` to convert the underlying pointer value to a SE value.\n- The function should use the macro `SE_HOLD_RETURN_VALUE` to hold the returned value for later use."}, {"instruction": "Implement a function `add_two_numbers` in C++ that takes two non-negative integers as input, and returns the sum of the two numbers as a third integer. The function should be type-safe and should not overflow the 32-bit integer. The function should satisfy the following pre-conditions and post-conditions:\n\n- Function pre-conditions:\n  - The function should be type-safe by checking both input numbers at compile-time with SE_PRECONDITION2.\n  - The function should perform a native conversion to JS values using nativevalue_to_se.\n- Function post-conditions:\n  - The function should return a hold value with SE_HOLD_RETURN_VALUE."}, {"instruction": "Develop a function `is_valid_pointer(ptr)` that determines whether the pointer is valid and not null. The function should utilize pre-condition assertions to ensure that the pointer value is not null. The pre-condition assertion `SE_PRECONDITION_RETURN_VAL_IF_FALSE(ptr != NULL, false)` ensures that the pointer value is not null, and returns false if the assertion fails. The function should also utilize a post-condition assertion to ensure that the function returns the expected value of true if the pointer value is valid. The post-condition assertion `SE_HOLD_RETURN_VALUE_IF_FALSE(ptr == NULL, true)` ensures that the function returns true if the pointer value is null, and the function returns false otherwise."}, {"instruction": "Write a Python function `detect_and_convert` that accepts a list of integers and returns a list of converted integers that is populated with the converted values of each integer in the input list. The conversion process should be defined by a function that should be passed to the function as an argument. The function should detect if a given integer is greater than a specified threshold value and return the converted integer value accordingly. The converted integers should be appended to a new list that is returned by the function.\n\n```python\ndef convert_int(value):\n    return value * 2\n\n\ndef convert_int_if_greater(value, threshold):\n    if value > threshold:\n        return value * 2\n    else:\n        return value * 3\n\n\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nconverted_data = detect_and_convert(data, convert_int)\nprint(converted_data)  # Output: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nconverted_data = detect_and_convert(data, convert_int_if_greater, 5)\nprint(converted_data)  # Output: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n```"}, {"instruction": "Develop a Python function `has_invalid_value(value)` that checks if the given value is outside the allowed range. The function should satisfy the following assertions:\n\n```python\nassert not has_invalid_value(1.0)\nassert not has_invalid_value(0.0)\nassert has_invalid_value(-1.0)\n```"}, {"instruction": "Create a Python function `validate_pointer` that validates the validity of a native pointer. The function should accept a native pointer and return a boolean value indicating if the pointer is valid."}, {"instruction": "Write a function signature in C++ that converts a native C++ value to a SE value. Your function should take a const reference to a native value as input and return a SE value. The type of the native value should be determined by analyzing the type of the input value. If the native value is of a primitive type, it should be converted to a corresponding SE value. For object types, a pointer to the object should be returned.\n\nThe function should satisfy the following preconditions:\n\n- The input value must not be null. This can be checked using the `SE_PRECONDITION2` macro.\n- The input value should be a valid native value, such as a scalar value or a pointer to an object.\n- The type of the input value should be determined by analyzing the type of the value.\n- If the input value is of a primitive type, it should be converted to a corresponding SE value.\n- For object types, a pointer to the object should be returned.\n\nThe function should satisfy the following postconditions:\n\n- If the input value is a native value, it should be converted to a corresponding SE value.\n- If the input value is a pointer to an object, a pointer to the object should be returned.\n- If the input value is not a valid native value or the input value is null, an appropriate error message should be logged to the console."}, {"instruction": "Implement a function `get_size` that takes a `se::Value` object as input and returns the size of its underlying value as a `uint32_t`. The function should use SE_PRECONDITION2 to ensure that the input `se::Value` object is of a valid type and throw an exception if it is not. The function should use native value conversion to convert the underlying value into a JS value and call the `GetArrayBufferByteLength` method of that JS value to obtain its size. It should use SE_HOLD_RETURN_VALUE to hold the return value in a `se::Value` object."}, {"instruction": "Create a Python function that accepts two integers and returns their sum. Use the SE_PRECONDITION2 macro to ensure that the input values are positive. Use nativevalue_to_se to convert the input values to JavaScript values. Then, use SE_HOLD_RETURN_VALUE to hold the return value in the native scope."}, {"instruction": "Develop a Python function `get_num_unique_rows` that takes a 2D matrix `matrix` as an input and returns the number of unique rows in the matrix. Each row in the matrix is represented as a list of integers, and the function should check if all rows in the matrix have unique values.\n\nThe function should satisfy the following assertions:\n\n```python\nassert get_num_unique_rows([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 0\nassert get_num_unique_rows([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == 0\nassert get_num_unique_rows([[1, 2, 4], [2, 3, 1], [3, 1, 2]]) == 2\n```\n\nThe function should use SE_PRECONDITION2 to check the validity of the input matrix `matrix`. SE_PRECONDITION2 checks the validity of an input argument by comparing it with a precondition value or pointer. The precondition value can be either a pointer to a precondition object or an integer value. The integer value can be a literal, a variable, or a function call that returns an integer. SE_PRECONDITION2 evaluates the precondition value and compares it with the argument. If the argument is valid, SE_PRECONDITION2 returns 1, otherwise it returns 0. SE_PRECONDITION2 evaluates the precondition value and compares it with the argument. If the argument is valid, SE_PRECONDITION2 returns 1, otherwise it returns 0. SE_PRECONDITION2 is a precondition check that is particularly useful for checking the validity of user inputs in C++ functions. The function should use SE_HOLD_RETURN_VALUE to hold the result of the precondition check in a variable, and SE_HOLD_RETURN_VALUE allows developers to create a variable and hold the result of an expression while it is evaluated."}, {"instruction": "Create a function `is_valid_pointer` to check if a given native pointer is valid. If the pointer is valid, the function should return `true`, otherwise it should return `false`."}, {"instruction": "Develop a Python function `verify_password` that checks a user's password for compliance with a set of pre-defined password requirements and returns a boolean value. The function should accept a string `password` as input. It should verify the following criteria:\n\n- The password must be at least 8 characters long.\n- The password must contain at least one uppercase letter.\n- The password must contain at least one lowercase letter.\n- The password must contain at least one digit.\n\nIf all the pre-defined requirements are met, the function should return `True`. Otherwise, it should return `False`. Call the function inside another Python function `wrapper()` that handles an expected exception and logs the error."}, {"instruction": "Write a Python function `check_pointer_type(pointer, expected_type)` that checks the type of a pointer to a specific data type. The function should utilize the SE_PRECONDITION2 macro and nativevalue_to_se function to convert the pointer to a JavaScript value and use the instanceof operator to check the type."}, {"instruction": "Develop a Python function `is_valid_pointer` that checks if a given pointer is valid. The function should accept a native pointer and a native type as input and return `True` if the pointer is valid and `False` otherwise.\n\nThe function should use C++ SE_PRECONDITION2 macro with the appropriate error message to ensure the validity of the input pointer before proceeding. The native type should be converted to a JS value with the nativevalue_to_se macro. A return value hold macro should be used to hold the return value of the function in a JS object."}, {"instruction": "Implement a C++ function `void MyFunction(int* a, int* b)` in the header file `main.h` to swap the values of two integers `a` and `b`.\n\nFor the implementation, make sure to use the native value conversion from `int` to `SEValue` in `nativevalue_to_se` and return the value hold in `SE_HOLD_RETURN_VALUE`. You can also use the native pointer check to ensure that the provided pointers are valid."}, {"instruction": "Write a Python function called `get_S` that computes the sum of squared elements of a numpy array, where the returned value is held with the `SE_HOLD_RETURN_VALUE` attribute. The function should take a numpy array as input and return a new numpy array of the same type, holding the result of the computation."}, {"instruction": "Write a Python function `is_prime` that takes a number `num` as an argument and returns a boolean value indicating whether the number is prime. The function should use the Sieve of Eratosthenes algorithm to check if a number is prime."}, {"instruction": "Write a C++ function to return a reference to a double-precision floating-point variable that is initialized to 1.0. However, if the input argument `value` is smaller than 0.0, the function should return a reference to the variable initialized to 0."}, {"instruction": "Write a Python function that checks if the given integer is a power of two. For this, you need to check if the input number can be expressed as a sum of two or more powers of two. In this context, powers of two can be defined as any number that can be expressed as `2^n` for some integer `n`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: C/C++ program compilation and execution, static and dynamic linking, C code compilation and execution, dynamic code evaluation, conditional compilation, conditional execution\n\n### Task", "fingerprint": null, "content": {"code": "PRESTypePluginParticipantData \n    setLevel_replyPlugin_on_participant_attached(\n        void *registration_data,\n        const struct PRESTypePluginParticipantInfo *participant_info,\n        RTIBool top_level_registration,\n        void *container_plugin_context,\n        RTICdrTypeCode *type_code)\n    {\n        struct RTIXCdrInterpreterPrograms *programs = NULL;\n        struct PRESTypePluginDefaultParticipantData *pd = NULL;\n        struct RTIXCdrInterpreterProgramsGenProperty programProperty =\n        RTIXCdrInterpreterProgramsGenProperty_INITIALIZER;\n        if (registration_data) {} /* To avoid warnings */\n        if (participant_info) {} /* To avoid warnings */\n        if (top_level_registration) {} /* To avoid warnings */\n        if (container_plugin_context) {} /* To avoid warnings */\n        if (type_code) {} /* To avoid warnings */\n        pd = (struct PRESTypePluginDefaultParticipantData *)\n        PRESTypePluginDefaultParticipantData_new(participant_info);\n\n        programProperty.generateV1Encapsulation = RTI_XCDR_TRUE;\n        programProperty.generateV2Encapsulation = RTI_XCDR_TRUE;\n        programProperty.resolveAlias = RTI_XCDR_TRUE;\n        programProperty.inlineStruct = RTI_XCDR_TRUE;\n        programProperty.optimizeEnum = RTI_XCDR_TRUE;\n\n        programProperty.externalReferenceSize = \n        (RTIXCdrUnsignedShort) sizeof(::dds::core::external<char>);\n        programProperty.getExternalRefPointerFcn = \n        ::rti::topic::interpreter::get_external_value_pointer;\n\n        programs = DDS_TypeCodeFactory_assert_programs_in_global_list(\n            DDS_TypeCodeFactory_get_instance(),\n            (DDS_TypeCode *) (RTIXCdrTypeCode *)&::rti::topic::dynamic_type< setLevel_reply >::get().native()\n            ,\n            &programProperty,\n            RTI_XCDR_PROGRAM_MASK_TYPEPLUGIN);\n\n        if (programs == NULL) {\n            PRESTypePluginDefaultParticipantData_delete(\n                (PRESTypePluginParticipantData)pd);\n            return NULL;\n        }\n\n        pd->programs = programs;\n        return (PRESTypePluginParticipantData)pd;\n    }", "docstring": "/* To avoid warnings */", "function_name": "setLevel_reqPlugin_on_participant_attached"}, "id": 222, "seed": "PRESTypePluginParticipantData \n    setLevel_replyPlugin_on_participant_attached(\n        void *registration_data,\n        const struct PRESTypePluginParticipantInfo *participant_info,\n        RTIBool top_level_registration,\n        void *container_plugin_context,\n        RTICdrTypeCode *type_code)\n    {\n        struct RTIXCdrInterpreterPrograms *programs = NULL;\n        struct PRESTypePluginDefaultParticipantData *pd = NULL;\n        struct RTIXCdrInterpreterProgramsGenProperty programProperty =\n        RTIXCdrInterpreterProgramsGenProperty_INITIALIZER;\n        if (registration_data) {} /* To avoid warnings */\n        if (participant_info) {} /* To avoid warnings */\n        if (top_level_registration) {} /* To avoid warnings */\n        if (container_plugin_context) {} /* To avoid warnings */\n        if (type_code) {} /* To avoid warnings */\n        pd = (struct PRESTypePluginDefaultParticipantData *)\n        PRESTypePluginDefaultParticipantData_new(participant_info);\n\n        programProperty.generateV1Encapsulation = RTI_XCDR_TRUE;\n        programProperty.generateV2Encapsulation = RTI_XCDR_TRUE;\n        programProperty.resolveAlias = RTI_XCDR_TRUE;\n        programProperty.inlineStruct = RTI_XCDR_TRUE;\n        programProperty.optimizeEnum = RTI_XCDR_TRUE;\n\n        programProperty.externalReferenceSize = \n        (RTIXCdrUnsignedShort) sizeof(::dds::core::external<char>);\n        programProperty.getExternalRefPointerFcn = \n        ::rti::topic::interpreter::get_external_value_pointer;\n\n        programs = DDS_TypeCodeFactory_assert_programs_in_global_list(\n            DDS_TypeCodeFactory_get_instance(),\n            (DDS_TypeCode *) (RTIXCdrTypeCode *)&::rti::topic::dynamic_type< setLevel_reply >::get().native()\n            ,\n            &programProperty,\n            RTI_XCDR_PROGRAM_MASK_TYPEPLUGIN);\n\n        if (programs == NULL) {\n            PRESTypePluginDefaultParticipantData_delete(\n                (PRESTypePluginParticipantData)pd);\n            return NULL;\n        }\n\n        pd->programs = programs;\n        return (PRESTypePluginParticipantData)pd;\n    }", "__index_level_0__": 62, "concepts": ["C/C++ program compilation and execution", "static and dynamic linking", "C code compilation and execution", "dynamic code evaluation", "conditional compilation", "conditional execution"], "parsing_result": [{"instruction": "Write a Python function that compiles a C program and runs it without any user input. The function\nshould handle cases of successful compilation of the program and cases where the program compiles but fails to run.\n\nThe function should also handle compilation errors, return a `namedtuple` of the compilation result, and run the program only in cases where the compilation was successful. The function should have a single parameter, the path of the C file to compile."}, {"instruction": "Implement a Python function that compiles and executes a C program either statically or dynamically. The function should take two parameters, a string that represents the path to a .c file and a flag that determines whether to execute or compile the program.\n\nIf the compilation succeeds, the function should return the exit status of the program, if it fails, the function should return -1. If the program is compiled and executed, the function should return the exit status of the program.\n\nYou should consider the following possible cases when implementing this function:\n\n- compilation succeeds and execution fails, in which case the function should return -1\n- compilation fails and execution succeeds, in which case the function should return the exit status of the program\n- compilation fails and execution fails, in which case the function should return -1\n\nThe function should take appropriate error handling into account when handling test cases such as a file whose extension is not '.c' or an invalid flag."}, {"instruction": "Write a Python function that executes a C program. The function should take the path to a C source file as an input and return the exit status of the executed program.\n\nCompile the source file by invoking a C compiler, and provide a relative or absolute path to the file."}, {"instruction": "Create a Python function that takes a list of C/C++ source code strings. The function should compile each of the source code and return a dictionary of C/C++ source code strings to the compilation result of each of them. The compilation result is represented by another dictionary with the keys 'return_code', 'stdout', and 'stderr'. 'return_code' is a boolean that indicates whether the program successfully compiled or not. 'stdout' and 'stderr' are strings that contain the output of the program. If the compilation fails, the output of the failed program should be empty strings.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert compile_files(['int main() { return 0; }']) == {\n    'int main() { return 0; }': {\n        'return_code': True,\n        'stdout': '',\n        'stderr': ''\n    }\n}\n```"}, {"instruction": "Write a Python function that takes a tuple of C code snippets and returns a list of their compiled binaries. The function should also enable the user to choose between static and dynamic linking, and should output the generated binaries' addresses and the file paths.\nThe function should handle 3 different types of input: a list of strings that contain C code snippets, a list of strings that contain C code snippets and header files, and a list of strings that contain full C program files including C code and header files.\n\nThe function should also support any other types of input the user provides, but it should raise an error if the input is not a list of strings.\n\nUse the `subprocess` module to compile and run the C code snippets as separate processes. The main program should be written in Python and encapsulate the function so that the user can call it from the command line. Include error handling for cases where the snippets cannot be compiled. You should also handle C code that does not include any main function so that the program can be run without compilation errors.\n\nFor example, given the following code snippets:\n\n```c\nint main() {\n    return 0;\n}\n```\n\n```c\nint main() {\n    int x = 1;\n    return x;\n}\n```\n\n```c\nint main() {\n    int x = 1;\n    return x;\n}\n```\n\nThe function should output a list of compiled binaries that can be run to calculate the return values of the snippets."}, {"instruction": "Create a Python function that compiles and runs a C++ program, which is specified by a filepath. The program should take one or more integers as arguments and return the sum of these arguments. The function should handle edge cases and errors related to the program's compilation and execution.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert execute_program('/path/to/program.cpp', 1, 2, 3) == 6\nassert execute_program('/path/to/program.cpp', 'arg1', 'arg2', 'arg3') == ValueError\n```"}, {"instruction": "Design a Python function to compile and execute a C/C++ program. The function should take in the name of a file that contains the source code and the number of arguments (if any) to be passed to the main function. The program should compile and run the source code using the `gcc` and `g++` compilers, respectively. If compilation fails, the function should output an error message and return `-1` as the exit code. If the source code is valid and the program runs successfully, the function should output `0` as the exit code. The function should handle cases where the source code or the program output is not generated or displayed properly.\n\nWrite an additional function to run the compiled program at execution. The function should take in the name of an input file that contains the arguments to be passed to the `main` function, if any. The function should run the compiled program using the `gcc` or `g++` interpreter, respectively. If the program is valid, the function should return the output generated by the program at execution. If the program is invalid or if the program does not return properly, the function should return `-1`."}, {"instruction": "Write a Python function that executes a C program and returns its exit code. The function should take in two inputs, the path to a C program file and the path to a data file. The data file should be formatted as a list of space-separated integers, with each integer on a separate line. The function should compile and execute the C program with the data file specified, and it should return the exit code of the executed program.\n\nYou can assume that the program only takes integers as input, and it should exclude any line containing non-integer values from the data file. \nThe function should handle cases where the C program path does not point to a valid C file or where the data file does not exist.\n\nFor example, given a C program file at `/tmp/test.c` and a data file at `/tmp/data.txt`, the function should compile and execute the C program with the data file specified, and it should output the exit code of the executed program."}, {"instruction": "Create a Python function that reads a C/C++ source file and executes its corresponding program, returning its output. The function should compile the source file using the C/C++ compiler and execute it. If the source file is compiled successfully, the function should return the output of the executed program. If the source file is not a valid C/C++ program, the function should raise a ValueError.\n\nThe function should handle cases where the source file is invalid, the program is invalid, or compilation and/or execution fails. It should also handle cases where the input is a Python or JavaScript file."}, {"instruction": "Create a Python function that takes the file path of a C/C++ source file as input, compiles it, and returns the exit code of the resulting program. The function should handle cases where the source file path is invalid or the compilation fails.\n\nFor example, the function should return `0` and `1` for the following cases:\n\n```python\nassert compile_and_run('test.c') == 0\nassert compile_and_run('test2.c') == 1\n```\n/README.md\n# Python Coding Challenges\n\nThis repository contains a series of coding exercises for practicing Python programming skills. Each exercise is designed to test the programmer's ability to solve real-world problems with appropriate quality and efficiency.\n\n## How to Use the Repository\n\nTo use the Python coding challenges in this repository, follow these steps:\n\n1. Clone the repository to your local machine.\n2. Navigate to the directory where you cloned the repository.\n3. Create a virtual environment for the project.\n4. Install the required dependencies using `pip install -r requirements.txt`.\n5. Run the Python code to test your programming skills.\n6. Alternatively, you can use the provided Jupyter Notebook files, which will allow you to run the code interactively.\n\n## Workflow\n\nTo work on the Python coding challenges, follow these steps:\n\n1. Create a new branch for your changes.\n2. Make sure to comment your code appropriately and follow the proper style conventions.\n3. Test your changes thoroughly to ensure that they are working as intended.\n4. Commit your changes and push them to the remote repository.\n5. Create a pull request to merge your changes into the main branch.\n6. Wait for the pull request to be reviewed and merged by the maintainers.\n\nBy following these steps, you can easily contribute to the Python coding challenges and enhance your programming skills.\n\n## Discussion\n\nIf you have any questions or concerns regarding the Python coding challenges, feel free to reach out. We're here to help.\n/python-coding-challenges/challenge-01.py\n# Create a function that returns a list of folds from the given data,\n# where each fold is a subsequence of the original data\ndef create_folds(data, count):\n    pass\n\n\n# Create assertions to test the function\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]"}, {"instruction": "Implement a Python function that compiles a C program provided by the user and executes it. The function should also handle cases where the compilation fails and return the error message.\n\nIn this example, the target C program should be compiled with either `gcc` or `clang` (which should be determined by the operating system) and then run with the `exec` command.\n\nFor example, given the C code\n```c\n#include <stdio.h>\nint main(void) {\n    printf(\"Hello, World!\");\n    return 0;\n}\n```\nthe function should print \"Hello, World!\" on screen and return `0` as the exit code.\n\nYou can assume that the C program is syntactically correct and that the system has a C compiler installed."}, {"instruction": "Design a Python function that compiles a C program and then executes it against test data. The function should take the following parameters:\n\n- path: the relative or absolute path to a C source file\n- test_data_path: the relative or absolute path to a test data file\n\nThe function should compile the C source file and execute the program against the test data. The function should return a list of results, where each result is a list of `stdout` and `stderr` output from the program.\n\nThe function should be able to handle cases where the program is not compiled, fails to compile, fails to execute, or produces correct output with and without test data.\n\nThe function should also handle cases where the input paths are invalid or do not exist."}, {"instruction": "Design a Python function that constructs a pipeline for executing a C/C++ program given the input file paths to the C/C++ source and executable files. The function should take inputs in the form of a list of strings and return a list of strings in the form of the output of the executed program. The function should handle three cases (listed in order of priority):\n\n- If the file extensions of the source and executable files are C/C++ and the source file is not a main function, the function should compile the source file and execute the resulting executable file.\n- If the file extensions of the source and executable files are C/C++ and the source file is a main function, the function should compile the source file to a shared library file, load that library into the Python process, and call the main function.\n- If the file extensions of the source and executable files are C/C++ and the source file is a main function, the function should compile the source file to a shared library file, load that library into the Python process, and call the main function.\n- If the file extensions of the source and executable files are C/C++ but the source file is not a main function, the function should compile the source file to a shared library file, load that library into the Python process, and call the main function.\n- If the file extensions of the source and executable files are Python and the source file is not a main function, the function should compile the source file to a shared library file, load that library into the Python process, and call the main function.\n- If the file extensions of the source and executable files are Python and the source file is a main function, the function should execute the compiled source file as a Python program.\n- If the file extensions of the source and executable files are Python but the source file is not a main function, the function should execute the compiled source file as a Python program.\n\nThe function should handle errors in the following situations:\n\n- An error occurs when loading the compiled source file as a shared library.\n- An error occurs when compiling the source file.\n- An error occurs when executing the compiled executable file."}, {"instruction": "Write a Python function that compiles and executes a C program that accepts two integers from the user. The C program should print out the sum of the two integers, and the function should return the sum. The program should be compiled either statically or dynamically, and executed either statically or dynamically.\n\nFor example, given an input of `5` and `7`, the program should output `12`."}, {"instruction": "Design a Python function that accepts a function as an input and calls it with arguments that are specified by a list. The function should be able to handle both static and dynamic linking of code. The function should also recognize the presence of a C++ file in the input path and compile and run it. If there is no C++ file, the function should handle these cases statically.\n\nThe function should also support passing variable arguments to the function. For example, with the input `['sum', 'foo', 1, 2, 3, 4, 5]` the function should call `sum(1, 2, 3, 4, 5)` from the file `foo.py`. Ensure that the function supports all possible cases for inputs and captures exceptions for the wrong input types."}, {"instruction": "Create a Python function with a C++ implementation that returns the number of prime numbers present in a given range. The input range should be a pair of numbers, where the first is the lower bound and the second is the upper bound. The function should consume C++ code with the following method signature:\n\n```c++\nint countPrimes(int start, int end);\n```\n\nThe function should return the number of prime numbers between the given range, inclusive.\n\nThe first implementation should include four C/C++ functions to compile and execute the C++ code on its own, one of which is for counting prime numbers:\n\n```c\nint countPrimes(int start, int end) {\n  return 0;\n}\n```\n\nThe second implementation should include a wrapper function with the above method signature, to call the `countPrimes` function. The function should be implemented using a static library linked to the `countPrimes` function.\n\nThe third implementation should include a wrapper function with the above method signature, to call the `countPrimes` function. The function should be implemented using a dynamic library loaded at runtime.\n\nThe fourth implementation should include a wrapper function with the above method signature, to call the `countPrimes` function. The function should be implemented using a dynamic interpreter, which loads and executes the C++ code at runtime."}, {"instruction": "Create a Python function that compiles and executes a C program. The function should take a string as the input, and if the string is a valid C program, the function should output the result of the program's execution. If the string is not a valid C program, the function should reject the program and return `None`. Extend the function to support multiple C programs in the same string.\n\nThe function should execute and compile each C program within the string with the C compiler. The function should read the program's output and return it as a string. The function should also handle programs with intricate syntax, including complex nested structures and conditional compilation.\n\nFor example, given the input `if (x > 5) { printf(\"hi\"); } else { printf(\"bye\"); }`, the function should return a string of `\"hi\"`. Given the input `if (x > 5) { printf(\"hi\"); } else { printf(\"bye\"); } if (x < 5) { printf(\"yo\"); } else { printf(\"sup\"); }`, the function should return a string of `\"hi yo sup\"`."}, {"instruction": "Create a Python function that evaluates a C program with a fixed set of input parameters and returns the output. Input parameters are defined by a dictionary with parameter name as the key and its value as the value.\nThe function should first compile the C code and execute it to obtain the program return value. If the compilation or execution fails, the function should return `-1` to indicate the error. The function should use static linking for the C code provided to it.\nThe function should not use external libraries.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert eval_c('input1=7; input2=12; return input1*input2;', {'input1': 3, 'input2': 4}) == 12\nassert eval_c('input1=7; input2=12; return input1*input2;', {'input1': 5, 'input2': 3}) == 15\nassert eval_c('input1=7; input2=12; return input1*input2;', {'input1': 1, 'input2': 1}) == 7\n```"}, {"instruction": "Implement a Python function that compiles and executes C code and returns its output. The function should take two inputs: a string containing C code and a list of strings that should be defined as macros for the function. The function should include error handling to ensure that a valid C code is provided.\n\nFor example, given the C code:\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n\nint main() {\n    int a = 5;\n    int b = 10;\n    printf(\"MAX(%d, %d) = %d\", a, b, MAX(a, b));\n    return 0;\n}\n```\n\nand the list of macros:\n\n```python\n['MAX(a, b)', '#define a 10', '#define b 5']\n```\n\nthe function should return the following string:\n\n```\nMAX(a, b) = 10\n```"}, {"instruction": "Design a Python function to compile and run a target C/C++ program. The function should take as input a string that defines a C/C++ program that includes the file name (including extension) and the path to the main function. The program should compile and execute the target C/C++ program. The function should return the program's output as a string. The function should handle all possible errors, such as invalid file names, compilation errors, and runtime errors.\n\nFor example, given `target_program = \"hello_world.cpp\"`, the function should compile and run the C/C++ program with `target_program` in the current working directory. If the program is compiled successfully, the function should return the program output as a string. Otherwise, it should return an empty string."}, {"instruction": "Write a Python function to compile and evaluate a C program. The function should take a C source code string as an input, and compile and execute the program. Ensure that the function can handle the following corner cases:\n\n- The source code string should contain multiple lines\n- The function should print out the program output\n- The function should print out the program error message if there is any\n- The function should return a tuple of success status and program output/error message\n\nThe function should take the following keyword arguments:\n\n- source_code: the C source code string to be executed\n- verbose: a boolean indicator to determine if verbose output is required\n- is_statically_linked: a boolean indicator to determine if the program is statically linked\n- is_dynamically_linked: a boolean indicator to determine if the program is statically linked\n- lib_paths: a list of string paths to the libraries to be used for linking\n\nFor example, the function should pass the following assertions:\n\n```python\nassert run_c_program('int main() { return 1; }', is_statically_linked=True) == (True, '1\\n')\nassert run_c_program('int main() { return 1; }', is_dynamically_linked=True, lib_paths=['/usr/lib/libm.so']) == (True, '1\\n')\nassert run_c_program('void main() { return 1; }', is_statically_linked=False) == (False, 'error: unable to find main function')\nassert run_c_program('int main() { return 10; }', verbose=True) == (True, '10\\n')\nassert run_c_program('int main() { return 1; }', is_statically_linked=True) == (True, '1\\n')\nassert run_c_program('int main() { return 10; }', is_dynamically_linked=True, lib_paths=['/usr/lib/libm.so']) == (True, '10\\n')\n```"}, {"instruction": "Create a Python function that compiles and executes a C program given its source code as a string. The function should handle the following cases:\n\n- C program with no input\n- C program with input\n- C program with includes and external functions\n- C program with external functions not found\n- C program that does not compile\n- C program with undeclared variables"}, {"instruction": "Create a Python program that takes time input and runs a C program for the specified time. The program should output the average of the numbers from 1 to 100, obtained by evaluating each of the following C expressions:\n\n```cpp\na) 100 - 1\nb) (1 + 2) * 10\nc) 10 * (1 + 9)\nd) (10 + 1) * 10\ne) 100 / 10\nf) 10 + 10 * 10\ng) 10 * 10 + 10\nh) 10 * (10 - 1)\ni) (1 + 2) * (3 * 4)\nj) (10 + 1) * (10 + 1) * 10\n```\n\nThe program should run the C code different times, for each combination of time input and the above expressions. For instance, for a time input of 5 seconds, the program should run the C code 5 times for each expression.\n\nThe program should also output the average of the time the C code took to run for each expression and time input.\n\nThe output should be in the form of `time input (sec) | expression: time (sec) | time (sec) | time (sec) | ...`, one result per line.\n\nWhen the program runs a C code, it first checks if it can statically compile it and only if it can do so, it compiles and runs the code. Otherwise, it checks if the code can be dynamically loaded and linked. If so, it links the code dynamically, evaluates it, and returns the time. Otherwise, it throws an exception.\n\nThe program should be constructed in a way that allows the user to change the C code without having to change any of the other code. This includes changing the expressions and the format in which the output should be shown."}, {"instruction": "Write a Python function that takes a string representation of an expression and a set of constant values as input. The function should construct a C program with the expression and the constant values and then compile and execute it. The function should return a `namedtuple` with the return value of the C program and the trace of the evaluation.\n\nFor example, given an expression `3 + 5` and the values `{3: 10, 5: 20}`, the function should return `(35, ['10 + 20'])`. The first value is the return value of the C program, the second value is the trace of the calculation."}, {"instruction": "Implement a Python function that compiles and executes a given C program. The function should take the path to a `.c` file as its only argument. The file is assumed to be valid C code that includes function definitions and a main() function at the end. It should output the standard output and standard error captured from the execution of the program. The program should appropriately handle error conditions when the file is invalid, and when the compiler cannot find the source file."}, {"instruction": "Develop a Python function that compiles and executes a C program given a string representing the program code. The function should identify and compile the C source code from the input string, which should be a complete C program and should include a main function of the format `int main(int argc, char *argv[])`.\nThe function should also provide a way to compile the same program with a library provided at run time. Dynamic linking should be performed when the library name is provided.\n\nThe function should provide the same functionality as `main()` in the C program, which should return an integer value specifying the program's exit code.\n\nThe function should provide an error handling mechanism to handle cases where the input or the provided library does not correspond to a valid C program or a valid library name.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert compile_execute('int main(int argc, char *argv[]) { return 0; }') == 0\nassert compile_execute('int main(int argc, char *argv[]) { return 1; }') == 1\ntry:\n    compile_execute('int main(int argc, char *argv[])')\nexcept ValueError as e:\n    pass\ntry:\n    compile_execute('int main(int argc, char *argv[]) { return 0; }', 'invalid_library.so')\nexcept ValueError as e:\n    pass\n```"}, {"instruction": "Construct a Python function that compiles and runs a C program, using a template that takes the name of the source file and the output file as inputs. The function should return the output of the program execution. The function should handle cases where the C program is invalid, for example, if the source file does not contain a main function. Include error handling for invalid input parameters and error codes returned by the C program."}, {"instruction": "Write a Python function that takes a list of files as input and checks whether each file is executable by C/C++. The function should return either a list of files that cannot be executed or a failure message if all files can be executed. The function should also check whether the files are statically/dynamically linked.\n\nA file is executable if it is either a statically linked executable or a dynamically linked executable. If a file is statically linked, it has to be compiled using `gcc` with the `-static` flag. If a file is dynamically linked, it has to be compiled using `gcc` with the `-shared` flag. The executable files can be run with `strace` to check that they are linking successfully.\n\nFor example, given the list `['foo.c', 'bar.c']`, the function should return a list of failed files, which is the empty list in this case, since they are all executable."}, {"instruction": "Design a Python function that compiles and executes a C program with the given C code, given the file path to the source code. The function should take a command-line argument that controls the behavior of the program. If the command-line argument is 'exec', the function should first compile the C code and then run it. If the argument is 'eval', the function should compile the code, link with a math library and then evaluate the code. The function should return True if the compilation and/or execution of the program succeeds, and False otherwise.\n\nFor example, the following command should compile and execute the C code:\n\n```python\ncompile_and_execute('exec', 'C_code.c')\n```\n\nThe following command should compile and evaluate the C code:\n\n```python\ncompile_and_execute('eval', 'C_code.c')\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dynamic programming, multimap, priority queue\n\n### Task", "fingerprint": null, "content": {"code": "DAG ComputeDAG2(const Graph &graph, int src_v) {\n  DAG dag(graph.size());\n  multimap<Bignum, Edge> que;\n// stack<Edge> que;\n  que.insert(make_pair(1, Edge{src_v, 0}));\n\n  rep (iter, FLAGS_search_limit) {\n    if (que.empty()) break;\n    Edge crr = que.begin()->second;\n    que.erase(que.begin());\n\n    if (crr.second == 1) {\n      printf(\"%d -> %d\\n\", src_v, crr.first);\n      EnumeratePaths(dag, crr);\n    }\n// if (iter % 1000 == 0) cerr << src_v << \" \" << iter << \": \" << static_cast<double>(crr.second) << endl;\n\n    for (const auto &e : graph[crr.first]) {\n      Edge nxt(e.first, crr.second + e.second);\n      if (nxt.second > 1) continue;\n\n      auto &v = dag[nxt.first][nxt.second];\n      if (v.empty()) que.insert(make_pair(denominator(nxt.second), nxt));\n      v.emplace_back(crr);\n    }\n  }\n\n  return dag;\n}", "docstring": "// if (iter % 1000 == 0) cerr << src_v << \" \" << iter << \": \" << static_cast<double>(crr.second) << endl;", "function_name": "rep"}, "id": 224, "seed": "DAG ComputeDAG2(const Graph &graph, int src_v) {\n  DAG dag(graph.size());\n  multimap<Bignum, Edge> que;\n// stack<Edge> que;\n  que.insert(make_pair(1, Edge{src_v, 0}));\n\n  rep (iter, FLAGS_search_limit) {\n    if (que.empty()) break;\n    Edge crr = que.begin()->second;\n    que.erase(que.begin());\n\n    if (crr.second == 1) {\n      printf(\"%d -> %d\\n\", src_v, crr.first);\n      EnumeratePaths(dag, crr);\n    }\n// if (iter % 1000 == 0) cerr << src_v << \" \" << iter << \": \" << static_cast<double>(crr.second) << endl;\n\n    for (const auto &e : graph[crr.first]) {\n      Edge nxt(e.first, crr.second + e.second);\n      if (nxt.second > 1) continue;\n\n      auto &v = dag[nxt.first][nxt.second];\n      if (v.empty()) que.insert(make_pair(denominator(nxt.second), nxt));\n      v.emplace_back(crr);\n    }\n  }\n\n  return dag;\n}", "__index_level_0__": 63, "concepts": ["dynamic programming", "multimap", "priority queue"], "parsing_result": [{"instruction": "Design a Python class `PriorityQueue` that implements a priority queue using a heap data structure. The heap property is that each element has priority values that are greater than all its non-leaf children. The elements in a heap are stored in a list and the indices of the parent and children are computed as follows:\n\n- **Parent index:** `i // 2`\n- **Left child index:** `2 * i + 1`\n- **Right child index:** `2 * i + 2`\n\nThe class should support initializing the queue with a list of elements, using the `from_list` class method (constructor). The class should have methods `add_element(self, element, priority)` and `pop_element(self)` for adding and removing elements from the queue, respectively. The `pop_element` method should return the removed element and maintain the heap property of the queue."}, {"instruction": "Develop a Python class `Skyline` that tracks the current skyline and updates the track according to the building heights.\n\nThe class should support adding buildings to the skyline as instances of `Building` class, where each building is represented by its height and location. The skyline is represented by a list of tuples, where each tuple represents a horizontal line segment in the skyline.\n\nThe class should have the following methods:\n- `add_building(building: Building)`: adds a building to the skyline\n- `update_skyline()`: updates the skyline based on the current buildings\n- `get_skyline()`: returns the current skyline\n\nThe skyline should be updated according to the following rules:\n- A horizontal line segment is formed by a pair of consecutive buildings that share a common base line.\n- A horizontal line segment is added when a building is added to the skyline, if the base line of the new building is different from the last base line of the skyline.\n- A horizontal line segment is removed when a building is removed from the skyline, if the base line of the removed building matches the last base line of the skyline.\n- A horizontal line segment is updated by removing the former segment and adding a new segment where the new building takes the place of the removed building. The new segment should take the place of the former segment if the new building height is greater than the former building height, or replace the former segment if the new building height is less than or equal to the former building height.\n\nNote that a building may be added or removed multiple times in one call to `update_skyline()`."}, {"instruction": "Implement a Python class `MovieCollection` that stores a collection of Movies. The class should maintain a multimap that maps a director's name to the set of their movies, and a priority queue that stores the movies based on their popularity. The class should define three methods:\n\n- `add_movie(self, movie)` adds a new movie to the collection, maintaining the multimap and priority queue.\n- `remove_movie(self, movie)` removes a movie from the collection, maintaining the multimap and priority queue.\n- `get_recommendations(self, n)` returns the top `n` movies recommended to a user based on their popularity.\n\nThe `MovieCollection` class should handle the erroneous inputs gracefully, such as invalid inputs or missing data."}, {"instruction": "Develop a Python class `MyHashMap` that implements a hash map using a list of linked lists as the underlying data structure. The class should support setting, updating, and removing elements by key. Under the hood, the map should use an `int` hash function for mapping keys to indices.\n\nThe `MyHashMap` class should have the following methods:\n- `set(key, value)`: Set the value for the given key to the specified value, replacing any existing value if the key exists.\n- `update(key, value)`: Update the value for the given key with the specified value, if the key exists. If the key does not exist, it should be added to the map.\n- `get(key)`: Retrieve the value for the given key from the map, or return `-1` if the key does not exist.\n- `remove(key)`: Remove the key and its corresponding value from the map, if it exists."}, {"instruction": "Create a Python class `MultiplesFinder` that finds all multiples of a given integer within a range. The class should support the following operations:\n- `add_multiple(self, multiple: int, multiples: Sequence[int])`: Add a new set of multiples to the existing data.\n- `get_multiples(self, multiple: int) -> Sequence[int]`: Return the multiples of the given integer.\n- `find_multiples(self, upper_bound: int) -> Sequence[int]`: Return all multiples of the integer(s) that are present in the set."}, {"instruction": "Develop a Python class `WordFrequencyCalculator` that can calculate the frequency of each unique word in a text document. The class should have a method `count_words(self, text: str)` that takes a string `text` of textual data and returns a dictionary mapping each unique word to its frequency count as a dictionary `dict` of `word: freq` pairs. Additionally, the class should offer a method `get_most_frequent_n(self, n: int)` that returns the top `n` most frequent words from the document.\n\nThe class should support multi-word entries, such as \"the quick brown fox\", and should handle non-ASCII characters."}, {"instruction": "Design a Python class `Graph` that implements a weighted directed graph data structure. The class should maintain a list of nodes, which are represented by the `Node` class (refer to Example 10). The `Node` class should have a `value` attribute to store the node's value, a `children` dictionary to store the connections to other nodes, and a `weight` attribute to store the edge weight between the two nodes. The class should also implement graph algorithms such as `bfs` and `dfs` traversal.\n\nAn instance of `Graph` should be callable to return a list of nodes in the graph in depth-first order (DFS)."}, {"instruction": "Design a Python class to implement a multimap, similar to a dictionary that maps a single key to multiple values. The multimap should support adding and removing values from the map."}, {"instruction": "Create a Python class `KnapsackItem` that represents items in a knapsack problem. Each item has a weight and a value, and the class should support querying the ratio between value and weight. Create a Python class `Knapsack` that supports solving the knapsack problem. The class should hold items in a priority queue (sorted by weight ratio), and maintain a `weight` and `value` counter for the knapsack itself. The class should support adding items to the knapsack, removing items from the knapsack, and calculating the total value of items that are currently present in the knapsack."}, {"instruction": "Create a Python class `MyHashMap` that supports the following operations:\n- `put(key, value)`: Put the key-value pair into the map.\n- `get(key)`: Get the value corresponding to the key. If the key does not exist, return `-1`.\n- `remove(key)`: Remove the key-value pair with the corresponding key.\n\nThe class should be designed to optimize the time complexity of the three operations."}, {"instruction": "Develop a Python class `DynamicWindow` that maintains a dynamic window of size `window_size` that is initially empty. The class should support two methods: `push` and `pop_min`.\n\n- `push(self, data: int)` adds the specified `data` to the window. If the window is full, the oldest data is automatically popped out.\n- `pop_min(self) -> int` returns the minimum data among all the data in the window.\n\nThe class should utilize the multimap data structure that allows efficient lookup for the minimum data in the window."}, {"instruction": "Create a Python class `JobScheduler` that manages a list of jobs to be processed in time. The class should include a `schedule(self, jobs: List[Job])` method that takes a list of `Job` objects and schedules the jobs to be executed with a relative time delay.\n\nThe `Job` class should include a `timestamp` property that represents the time when the job should be executed in seconds.\nThe `Job` class should include a `delay` property that represents the relative delay time in seconds.\n\nThe `JobScheduler` class should include the following methods:\n\n- `add(self, job: Job)`: Inserts a job into the job queue.\n- `remove(self)`: Removes the next scheduled job from the job queue.\n- `peek(self)`: Returns the next scheduled job without removing it from the queue.\n- `empty(self)`: Checks if the job queue is empty.\n\nThe `JobScheduler` class should support the following operations:\n- `add(job)`: Adds a job to the job queue with a relative delay time.\n- `remove()`: Removes the next scheduled job from the queue and returns it.\n- `peek()`: Returns the next scheduled job without removing it from the queue.\n- `empty()`: Checks if the job queue is empty.\n\nThe `JobScheduler` class should support the following operations:\n- `add(job)`: Adds a job to the job queue with a relative delay time.\n- `remove()`: Removes the next scheduled job from the queue and returns it.\n- `peek()`: Returns the next scheduled job without removing it from the queue.\n- `empty()`: Checks if the job queue is empty."}, {"instruction": "Design a Python class describing a simple queue of integers.\nThe class should support the following operations: enqueue, dequeue, and peek. In addition, the class should implement a `get_max_value()` method that returns the maximum value present in the queue."}, {"instruction": "Create a Python class `WordCounter` to count occurrences of words in a given text. The class should maintain a mapping from words to their counts. The class should expose two methods: `add_word(word)` and `count(word)`. `add_word` should add a word to the map with a count of 1. `count` should return the count of the given word if it exists, or 0 otherwise."}, {"instruction": "Create a Python class `PriorityQueue` that implements a priority queue. The class should support inserting and removing elements according to their priorities. The priority queue should support the following operations:\n\n- `add(element, priority)`: add an element to the queue with the specified priority\n- `remove()`: remove the element with the highest priority from the queue\n- `peek()`: return the element with the highest priority from the queue without removing it\n- `pop()`: same as `remove()`\n\nThe class should also support `size()` to return the number of elements in the queue."}, {"instruction": "Create a Python class `JobScheduler` that manages a queue of `Job`s, with each job having a certain `deadline` that specifies the time after which the job must be completed. The class should support adding new jobs to the queue, as well as scheduling the jobs that are ready to be performed. Once a job is performed, the `JobScheduler` should remove it from the queue, and the `JobScheduler` should also update the remaining `deadline` of each of the remaining jobs in the queue.\n\nThe class should provide a method `schedule_jobs` that returns the list of jobs that were successfully scheduled to be performed, and a method `perform_job` that allows users to manually perform a job. The `JobScheduler` should use a priority queue with the `deadline` as the key to prioritize jobs with smaller `deadlines` that should be performed first."}, {"instruction": "Create a Python class `IntervalScheduler` that manages a list of intervals for a task. The class should support the following operations:\n- add: add a new interval to the list\n- remove: remove an existing interval from the list\n- query: return a list of intervals that overlap with a specified time range\n\nWhen adding or removing intervals, the class should maintain the sorted order of the list, while retaining the original order of intervals that are merged together to form a new interval.\n\nThe class should handle erroneous inputs gracefully, such as invalid input intervals or overlapping intervals. Additionally, implement the `__str__` method to return a formatted string showing the current status of the interval scheduler."}, {"instruction": "Create a Python class `Knapsack` that implements a knapsack problem using dynamic programming. The class should have a constructor that takes two arguments: `capacity`, which represents the maximum capacity of the knapsack, and `items`, which is a list of items in the form of `[weight, value]`. The class should also have a method `put_item` that allows adding items to the knapsack. The method should accept two arguments: `item`, which is the item to be added, and `max_weight`, which represents the maximum weight the item can be added to the knapsack. The method should then check if the item can be added to the knapsack, and return the result of the operation as a Boolean."}, {"instruction": "Design a Python class that implements a multimap using a sorted list of key-value pairs, with the key being used to sort the pairs and the value being the key's associated value. The class should support adding and removing key-value pairs, and the key should be used to retrieve the value."}, {"instruction": "Design a Python class that implements a dictionary with a multimap lookup. The dictionary should support key-value pairs with multiple values. The class should support inserting, updating, and removing values for a given key. The class should also provide a method `lookup(self, key)` that returns a priority queue of values for a given key."}, {"instruction": "Create a Python class `Interval` that represents an interval in the real number line. The class should support the following operations:\n\n- `len`: compute the length of the interval, which is defined as the difference between the end and the start points\n- `is_overlap`: determine whether the two intervals overlap\n- `contains`: determine whether the given point is contained in the interval\n- `intersection`: compute the intersection of the two intervals\n\nThe class should be able to accept start and end points as arguments. For example, the following code snippet creates an interval object with start point 0 and end point 10.\n\n```python\ninterval = Interval(0, 10)\n```"}, {"instruction": "Design a `WordMultiMap` class that stores a mapping between a string word and an integer count. The class should support the following operations:\n\n- `add(self, word: str, count: int)`: inserts a word with the given count into the map\n- `remove(self, word: str)`: removes a word from the map if it exists, otherwise do nothing\n- `get_count(self, word: str)`: returns the count associated with the given word, or -1 if the word does not exist\n- `get_word(self, count: int)`: returns a list of words whose count is equal to the given count (if any), or an empty list if no such words exist\n- `get_top_k_words(self, k: int)`: returns a list of the k most frequent words in the map, in descending order of their counts (if there are fewer than k words present, return all of them)\n\nThe class should support updates to the count of existing words and an implicit removal of a word with count 0. The `remove` method should not throw an error when it is called with a word that does not exist in the map."}, {"instruction": "Create a Python class `WeightedGraph` that represents a weighted directed graph. The class should support adding new nodes and edges, as well as finding the shortest path between two nodes."}, {"instruction": "Develop a Python class for a job scheduler that supports scheduling and execution of jobs in the order of their execution time.\n\nThe class should maintain a priority queue of unexecuted jobs (max heap over a multimap) ordered by their execution time. When the scheduler is run, it executes the top job from the queue and updates its execution time. If the job has already finished execution, the scheduler moves on to the next job without any change.\n\nThe class should support adding new jobs with their execution time, as well as checking if there is a currently running job."}, {"instruction": "Design a Python class `PairingDinosaur` that models a dinosaur that can be paired or unpaired with another dinosaur. The class should maintain a list of all the dinosaurs that have been paired, and keep track of the total number of dinosaurs that have been paired.\n\nThe class should support the following operations:\n- `PairingDinosaur(name: str, max_pairings: int)` initializes a dinosaur with name and maximum number of dinosaurs that can be paired with it.\n- `pair(self, d: 'PairingDinosaur')` adds a dinosaur `d` to the list of paired dinosaurs, if the dinosaur `d` is not already paired as long as the total number of dinosaurs has not exceeded the maximum pairings.\n- `unpair(self, d: 'PairingDinosaur')` removes a dinosaur `d` from the list of paired dinosaurs, if it is already paired.\n- `total_pairs(self) -> int` returns the total number of dinosaurs that have been paired with other dinosaurs."}, {"instruction": "Create a Python class `CriminalRecordSystem` that manages criminal records by maintaining a list of citizens and their criminal records. The class should support adding a new criminal record, fetching records by citizen name, and fetching records by crime type to execute the punishment.\n\nThe `CriminalRecordSystem` class should support the following functionalities:\n- Adding a new criminal record: `add_record(self, name: str, crime: str, year: int)`\n- Fetching records by citizen name: `get_records_by_citizen(self, name: str)`\n- Fetching records by crime type: `get_records_by_crime(self, crime: str)`\n\nThe class should also support the following functionalities:\n- Implementing a priority queue to maintain criminal records by crime type, which sorts the records by their occurrence count in descending order.\n- Implementing a multimap to maintain criminal records by crime type, where multiple records can be assigned to the same crime type.\n\nThe class should use a dictionary to store the citizen names along with their criminal records. The priority queue should be used to maintain records in the descending order of their occurrence count. The multimap should be used to maintain records for each crime type in a separate list."}, {"instruction": "Create a Python class `MultiMap` that supports adding data to the class and querying data from the class based on user-specified keys. The class should be able to hold multiple values for each key, and the values should be stored in a sorted order. The class should support adding data with `put(key, value)` and querying data with `get(key)`.\n\nThe class must handle duplicate values for a key gracefully by keeping the values in a sorted order. The class should also support deleting data with `delete(key)`.\n\nThe class should provide a method `get_kth_largest(key, k)` that returns the kth largest value for a given key. The method should return `None` if the value does not exist."}, {"instruction": "Given a list of variable-length strings, implement a Python class `WordCounter` that counts the most frequently occurring word from a list of strings. The class should have a method `get_most_frequent_word()` to return the most frequently occurring word. The class should also offer a method `get_all_words()` to return all the words including the most frequently occurring word. The class should support adding new strings to the list dynamically, and the most frequently occurring word should be updated accordingly."}, {"instruction": "Design a Python class `MultiMap` with following behaviors:\n- `add(key, value)` adds a new key-value pair to the map if the key does not exist; if the key already exists, the new value will be inserted into the end of the list associated with the key.\n- `get(key)` returns the list associated with the key, or `None` if the key does not exist.\n- `get_all(key)` returns a list of all values associated with the key, or `None` if the key does not exist.\n- `remove(key, value)` removes the first item with the specified key-value pair from the list associated with the key. If the value is not found, raise a runtime error `KeyError`."}, {"instruction": "Develop a Python class `Knapsack` that implements the 0-1 knapsack problem. The class should accept two arguments: an integer `capacity` for the knapsack's capacity and a list of `(weight, value)` tuples for each item in the knapsack. The class should support adding items to the knapsack, retrieving the total value of items in the knapsack, and retrieving the items that make up the total value."}, {"instruction": "Create a Python class `FrequencyCounter` that implements a simple frequency counter for strings.\n\nThe class should support the following operations:\n- `add(self, word: str)`: Given a single word, add it to the counter.\n- `count(self, word: str)`: Given a single word, return the number of times it appears in the counter.\n- `find_most_common(self, n: int)`: Given an integer `n`, return a list of `n` tuples representing the `n` most common words in the counter. Each tuple should be of the form `(count, word)`, where `count` is the number of times the corresponding word appears, and `word` is the actual word. The output should be ordered by the count. If the counter has fewer than `n` entries, just return the entire counter.\n- `find_least_common(self, n: int)`: Given an integer `n`, return a list of `n` tuples representing the `n` least common words in the counter. Each tuple should be of the form `(count, word)`, where `count` is the number of times the corresponding word appears, and `word` is the actual word. The output should be ordered by the count. If the counter has fewer than `n` entries, just return the entire counter."}, {"instruction": "Create a Python class `LRUCache` that implements a least-recently-used (LRU) cache. The class must have the following methods:\n\n- `put(key: int, value: int)`: inserts a key-value pair into the cache. If the cache is full, it should evict the least recently used key (LRU) and add the new key-value pair.\n- `get(key: int)`: retrieves the value of the key if the key exists, otherwise return -1.\n\nThe class must support the following operations in O(1) time complexity:\n\n- `put(key, value)`: inserts the given key-value pair into the cache. If the cache is full, it should evict the least recently used key and add the new key-value pair.\n- `get(key)`: retrieves the value of the key if the key exists, otherwise return -1."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: depth-first search, tree recursion, backtracking, dynamic programming, dynamic programming\n\n### Task", "fingerprint": null, "content": {"code": "inline int DFS(int x,int flw){//flw\uff1a\u5f53\u524d\u6d41\u91cf\uff08flow\uff09 \r\n\tif (x==n) return flw;\r\n\tfor (int i=cur[x];i!=-1;i=cur[x]=nxt[i]){\r\n\t\tif ((deep[son[i]]==deep[x]+1)&&w[i]){\r\n\t\t\tint nxtflw=DFS(son[i],min(flw,w[i]));\r\n\t\t\tif (nxtflw){//nxtflw>0\u8bf4\u660e\u589e\u5e7f\u6210\u529f \r\n\t\t\t\tw[i]-=nxtflw;\r\n\t\t\t\tw[i^1]+=nxtflw;//\u53cd\u5411\u8fb9\u52a0\u4e0a\u672c\u6b21\u589e\u5e7f\u6d41\u91cf\uff0c\u7531\u4e8e\u6b63\u53cd\u8fb9\u4e24\u4e24\u76f8\u90bb\u5b58\u50a8\uff0c\u6240\u4ee5i^1\u5373\u4e3ai\u7684\u53cd\u5411\u8fb9 \r\n\t\t\t\treturn nxtflw;//\u5411\u4e0a\u4f20\u9012 \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;//\u6ca1\u6709return\u8bf4\u660e\u6ca1\u6709\u589e\u5e7f\u8def \r\n}", "docstring": "//\u6784\u9020\u5206\u5c42\u56fe\uff0c\u8fd4\u56de\u662f\u5426\u5b58\u5728\u589e\u5e7f\u8def \r", "function_name": "BFS"}, "id": 228, "seed": "inline int DFS(int x,int flw){//flw\uff1a\u5f53\u524d\u6d41\u91cf\uff08flow\uff09 \r\n\tif (x==n) return flw;\r\n\tfor (int i=cur[x];i!=-1;i=cur[x]=nxt[i]){\r\n\t\tif ((deep[son[i]]==deep[x]+1)&&w[i]){\r\n\t\t\tint nxtflw=DFS(son[i],min(flw,w[i]));\r\n\t\t\tif (nxtflw){//nxtflw>0\u8bf4\u660e\u589e\u5e7f\u6210\u529f \r\n\t\t\t\tw[i]-=nxtflw;\r\n\t\t\t\tw[i^1]+=nxtflw;//\u53cd\u5411\u8fb9\u52a0\u4e0a\u672c\u6b21\u589e\u5e7f\u6d41\u91cf\uff0c\u7531\u4e8e\u6b63\u53cd\u8fb9\u4e24\u4e24\u76f8\u90bb\u5b58\u50a8\uff0c\u6240\u4ee5i^1\u5373\u4e3ai\u7684\u53cd\u5411\u8fb9 \r\n\t\t\t\treturn nxtflw;//\u5411\u4e0a\u4f20\u9012 \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;//\u6ca1\u6709return\u8bf4\u660e\u6ca1\u6709\u589e\u5e7f\u8def \r\n}", "__index_level_0__": 64, "concepts": ["depth-first search", "tree recursion", "backtracking", "dynamic programming", "dynamic programming"], "parsing_result": [{"instruction": "Create a Python class named `MazeSolver` that represents a maze. A maze is an array of arrays of `Maze` objects, where every `Maze` object represents a square cell in the maze. A maze has a `start` point and a `goal` point, representing the starting and ending positions in the maze.\n\nThe maze has three types of cells:\n- `Maze` objects w/ value 0 represent empty cells,\n- `Maze` objects w/ value 1 represent walls,\n- `Maze` objects w/ value 2 represent visited cells.\n\nThe algorithm must search the maze for a path from `start` to `goal`. The path should be represented as an array of `Maze` objects, representing the sequence of cells traversed to reach the `goal`. If multiple paths exist, only one of them should be returned. If no path can be found, an empty list should be returned.\n\nThe algorithm should utilize backtracking to search for a path in a recursive manner. During the search, the backtracking method should ensure that the path does not traverse a visited cell or a wall.\n\nThe algorithm should use memoization to cache the result of a recursive call to the search method, so that the same path does not need to be recomputed.\n\nThe algorithm should operate in time complexity O(n*m) where n is the number of rows and m is the number of columns in the maze."}, {"instruction": "Develop a Python class that represents a directed acyclic graph (DAG) with a single root node, and implements the depth-first search (DFS) algorithm to traverse the graph and return a list of all nodes in the order in which they were visited. You should implement the DFS algorithm recursively."}, {"instruction": "Develop a Python class `Graph` that models a generic directed graph. Each node in the graph is represented by a `Node` class which stores a value. Each edge between two nodes is represented by a `Link` class. `Graph` should have an interface with the following behavior:\n\n- `add_link(self, from_node, to_node, weight=1)`: adds a new link from the node `from_node` to the node `to_node` with the specified weight, or updates the existing link if it already exists.\n- `remove_link(self, from_node, to_node)`: removes an existing link from the node `from_node` to the node `to_node`.\n- `get_adjacent_nodes(self, node)`: returns a list of all adjacent nodes to the specified node.\n- `get_all_nodes(self)`: returns a list of all nodes in the graph, including duplicate nodes if they exist.\n- `get_node(self, value)`: returns the Node object with the specified value, or None if no such node exists.\n\nThe class also includes a `depth_first_search(self, start, goal)` method that performs a depth-first search of the graph from the specified start node and returns all nodes that are reachable from the start by following the specified goal node."}, {"instruction": "Design a Python class `SubsequenceFinder` that can find all subsequence of a given string in a string. You should implement the `SubsequenceFinder.find_all_subsequences` method that takes a string and returns all subsequences of this string."}, {"instruction": "Implement a Python class that represents a graph of nodes that can be traversed in a depth-first manner. Each node has a unique identifier and can have multiple edges, which refer to other nodes in the graph. The class should support traversing the graph by exploring all reachable nodes starting at a specific node in a depth-first manner. The traversal should effectively handle cycles in the graph, ensuring that each node is explored and visited only once."}, {"instruction": "Create a Python class that implements a graph data structure using an adjacency list as a representation. It should include methods like `add_vertex`, `add_edge`, `remove_vertex`, and `remove_edge`."}, {"instruction": "Implement a Python class that represents a binary tree. The class should enable the following operations:\n\n- `insert(value)`: adds a new node with the specified value to the tree and provides a reference to the root of the tree.\n- `contains(value)`: searches the tree for a node with the specified value and returns `True` if it exists, `False` otherwise.\n- `depth_first_traversal(order='in_order')`: travers the tree depth-first and returns the values of nodes in the specified order (defaulted to inorder traversal).\n- `breadth_first_traversal()`: travers the tree level-by-level and returns the values of nodes in a flat list."}, {"instruction": "Design a Python class that represents a directed graph. The class should have the following attributes: a list of vertices, a list of edges, and a dictionary of adjacency lists that maps a vertex to its edges.\n\nThe class should also have the following methods:\n- `add_vertex(vertex)` to add a vertex to the graph.\n- `add_edge(edge)` to add an edge to the graph.\n- `get_shortest_path(source, destination)` to compute the shortest path between a source and a destination vertex.\n\nThe shortest path between two vertices should be computed using the Dijkstra's algorithm."}, {"instruction": "Create a Python class that represents a tree data structure. The class should implement various tree traversal algorithms such as pre-order, in-order, and post-order traversals. Additionally, the class should include methods to search for a specific node in the tree, insert new nodes, and delete existing nodes."}, {"instruction": "Implement a Python class for the Tic-tac-toe game. The class should have a method called `place_marker()` that accepts a 2-tuple of `(row, column)` coordinates and places a marker in the corresponding cell. The class should also have a method called `winner()` that returns either `X`, `O`, or `None` if there is a winner or if there is no winner yet. The method should also have a method called `game_over()` that returns `True` if the game is over and `False` otherwise."}, {"instruction": "Implement a Python function called `count_valid_parantheses_combinations` that takes two integers `n` and `p` as arguments. The function should find and return all valid combinations of `n` pairs of parentheses, where each pair is constructed by `p` left parentheses and `p` right parentheses. The generated combinations should be returned as a list of strings, where each string represents a valid combination.\n\nFor example, given `n = 3` and `p = 2`, the function should return `[()(()), (()())]` as valid combinations of parentheses."}, {"instruction": "Implement a Python class to solve the N-Queens problem. Given an integer `N`, the `NQueens` class should instantiate a board of size `N x N` and place `N` queens on the board so that no queen threatens another queen. The class should define a `solve` method to find and return all possible solutions to the problem. The class should also define a `print_solution` method that prints the solution to the console in the following format:\n\n\n```\n0 1 0 0 0 0 0 0\n0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 1\n1 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0\n0 0 0 0 0 1 0 0\n0 0 1 0 0 0 0 0\n0 0 0 0 0 0 1 0\n```\n\nEach row of the board represents a queen's position on the board. The value in each cell represents the column number of the queen. For example, the element located at row 3, column 6 has a value of 6, indicating queen 6 is placed in row 3.\n\nThis class should also define a `display_board` method that displays the board in the format shown above.\n\nThis class should define a `create_board` method that creates an empty board of the specified size.\n\nThis class should define a `place_queen` method that places a queen on the board at a specific row and column. This method should return `True` if the queen is placed successfully, and `False` if the queen cannot be placed (e.g., if there is a threatening queen already present).\n\nThis class should define a `threatens_queen` method that checks whether a queen placed at a specific location on the board threatens another queen already placed on the board. This method should return `True` if the queen is threatening another queen, and `False` if the queen is not threatening another queen.\n\nThis class should define a `find_all_solutions` method that uses the backtracking algorithm to find all possible solutions to the N-Queens problem. This method should return a list of all solutions as nested lists of lists, where each sublist represents a single solution.\n\nThis class should define a `find_all_solutions_with_display` method that uses the backtracking algorithm to find all possible solutions to the N-Queens problem. This method should return a list of all solutions as nested lists of lists, where each sublist represents a single solution. In addition, it should also display the solutions as shown above, one solution per line."}, {"instruction": "Create a Python class with a method `find_complete_binary_tree_sequence(n)` that recursively finds and returns all complete binary tree sequences of length `n`.\n\nA complete binary tree sequence is a sequence of binary trees where each tree consists of nodes with values as follows:\n- The values of the root nodes are in the range [1, n]\n- The values of the leaf nodes are in the range [n + 1, 2n]\n- Each node contains only left child nodes\n- The root node is the left-most node of the sequence\n- The left-most node is the root of the first tree in the sequence\n\nThe method should implement a recursive search strategy using backtracking and dynamic programming principles. The optimal approach is to combine the backtracking algorithm with dynamic programming to reduce repeated calculations, resulting in an efficient solution."}, {"instruction": "Create a Python class that implements a binary tree structure with a method `find_paths_with_sum` that takes a target sum and returns all possible paths in the tree with nodes whose values sum to the target sum. This implementation should leverage the concept of dynamic programming to avoid recomputing paths that have already been visited during a search process."}, {"instruction": "Implement a Python class called `Backpack` that stores a list of items, a maximum weight capacity, and a current weight. The class should also implement a method `add_item(item, weight)` that adds an item to the backpack and updates its total weight accordingly."}, {"instruction": "Create a Python class that implements a trie data structure. The class should have a method `add_word(word)` that adds a word to the trie structure while `has_word(word)` returns whether a word is contained in the trie. The class should ensure that all words are in lowercase and also support words with multiple variations (e.g., \"tan\", \"tank\", \"tanned\", \"tandem\", etc.)"}, {"instruction": "Create a Python class that implements a tree data structure. The class should have a `Node` class as an internal class.\n\nThe `Node` class should have the following attributes:\n- `value`: the value of the node\n- `left_node`: the left child node of the node\n- `right_node`: the right child node of the node\n\nThe class should have the following methods:\n- `add_node(value)`: adds a new node to the tree with the specified value\n- `traverse_preorder()`: traverses the tree in preorder traversal\n- `traverse_inorder()`: traverses the tree in inorder traversal\n- `traverse_postorder()`: traverses the tree in postorder traversal\n- `traverse_levelorder()`: traverses the tree in levelorder traversal\n- `count_nodes()`: returns the number of nodes in the tree\n- `get_node(index)`: returns the node at the specified index in the tree\n- `find_min()`: returns the smallest value in the tree\n- `find_max()`: returns the largest value in the tree\n\nThe class should also support the following features:\n- `get_root()`: returns the root node of the tree\n- `get_left_child()`: returns the left child node of the current node\n- `get_right_child()`: returns the right child node of the current node\n- `get_parent()`: returns the parent node of the current node\n- `get_left_sibling()`: returns the left sibling node of the current node\n- `get_right_sibling()`: returns the right sibling node of the current node\n- `get_depth()`: returns the depth of the current node within the tree\n- `get_height()`: returns the height of the current node within the tree\n- `get_root_to_node_distance()`: returns the distance between the root and the current node"}, {"instruction": "Implement a Python class called `Tree` that represents a binary search tree. The class should include an `insert`, `search`, and `delete` method that allow the tree to be constructed and modified with efficiency. Additionally, enhance efficiency by implementing a `traverse` method that performs depth-first search that returns a list of all nodes in the tree in preorder traversal order."}, {"instruction": "Create a Python class that implements an algorithm for finding the best combination of coins to make a target amount. The algorithm should use the dynamic programming technique to find the optimal solution to the problem of finding the combination of coins that sum to the target amount."}, {"instruction": "Design a Python class `HamiltonianPathFinder` that can find a Hamiltonian path in a graph. A Hamiltonian path is a path that visits each vertex in the graph exactly once and ends at the same vertex it started at. The constructor of the class takes a graph data structure as an argument, and the class method `find_hamiltonian_path(self, start_vertex)` should find a Hamiltonian path in the graph starting at the specified `start_vertex`. The method should return a list of all Hamiltonian paths starting from the `start_vertex` in the order of increasing path length. If there are multiple paths of the same length, return them in alphabetical order by their starting vertices."}, {"instruction": "Write a Python program to solve the following problem: given a string `word` of lowercase letters, find all possible strings of length `n` that can be formed by taking one letter at a time from the string `word`.\n\nFor example, given the input word `abc` and the input length `2`, the output should be a set of 6 possible strings:\n\n```\n['a', 'b'], ['a', 'c'], ['a', 'bc'], ['b', 'c'], ['b', 'bc'], ['c', 'bc']\n```"}, {"instruction": "Create a Python class called `TreeIterative` that implements a Depth-First Search (DFS) algorithm for traversing and searching a binary tree. The class should take in a root node of the binary tree as an argument. The class should implement the following two methods:\n\n- `pre_order_traversal(node)` which performs a pre-order traversal of the tree and returns a list of nodes in the order they were traversed.\n- `pre_order_traversal_recursive(node)` which performs a pre-order traversal of the tree recursively and returns a list of nodes in the order they were traversed.\n\nThe `pre_order_traversal` method should use a Stack to store nodes in the order they are traversed, while the `pre_order_traversal_recursive` method should use Recursion to traverse the tree.\n\nThe DFS traversals should be performed in both methods using a while loop."}, {"instruction": "Implement a Python class that performs the depth-first search (DFS) on a graph data structure and returns the list of all vertices in the graph. The DFS algorithm starts at a given root vertex and explores all nodes reachable from the root before exploring the nodes reachable from any other vertices."}, {"instruction": "Design a Python function `find_longest_sequence` that takes a dictionary containing `word` keys and an empty list as the initialization of a list of words to be populated. In each iteration of the function, the function should select a word that is not already in the list. The function should extend the list by selecting words that have prefixes that are present in the list. The function should terminate when no more words can be selected."}, {"instruction": "Create a Python class called `Graph` that implements a directed graph data type that can be used to store and process edges between nodes. The class should support the following operations:\n\n- `add_edge(node1, node2, weight=1)` - creates an edge between two nodes with a specified weight. If no weight is provided, it is assumed to be 1.\n- `has_edge(node1, node2)` - determines if an edge exists between two nodes\n- `get_edge_weight(node1, node2)` - returns the weight of an edge between two nodes, or `None` if there is no edge between them\n- `get_neighbors(node)` - returns a list of nodes that are connected to the specified node through an edge\n- `get_nodes()` - returns a list of all nodes in the graph\n- `get_edges()` - returns a list of all edges in the graph"}, {"instruction": "Develop a Python class `Maze` that represents a two-dimensional maze. The class should support methods `solve` and `display` to perform a depth-first search algorithm to solve the maze and display the solution path visually, respectively. Additionally, the class should implement a recursive backtracking algorithm for solving the maze if the depth-first search fails to find a solution."}, {"instruction": "Implement a Python class `Tree` that represents a binary tree. The `Tree` class should have two properties:\n\n- `value`: the value of the root node of the tree.\n- `children`: a list of child nodes of the tree, stored in a dictionary with child node values as keys, and child trees as values.\n\nThe `Tree` class should have the following public methods:\n\n- `insert_child`: a method to insert a child node into the tree.\n- `delete_child`: a method to delete a child node from the tree.\n- `depth_first_traversal`: a method to perform a depth-first traversal of the tree.\n\nThe `Tree` class should also define the following private methods:\n\n- `depth_first_traversal_helper`: a helper method to perform a depth-first traversal of the tree.\n- `insert_child_helper`: a helper method to insert a child node into the tree.\n- `delete_child_helper`: a helper method to delete a child node from the tree.\n\nThe `Tree` class should store the depth-first traversal of the tree in a list called `depth_first_list`.\n\nThe `Tree` class should also have the following private attributes:\n\n- `__value`: the value of the root node of the tree.\n- `__children`: a dictionary that stores child nodes of the tree. The keys of this dictionary are the values of the child nodes, and the values of this dictionary are the corresponding child trees.\n- `__depth_first_list`: a list that stores the depth-first traversal of the tree.\n\nThe `Tree` class should be able to support both preorder and postorder traversals of the tree using a recursive approach, and both inorder and postorder traversals of the tree using a non-recursive approach."}, {"instruction": "Implement a Python class that represents a `Tree` data structure that can be used to perform a depth-first search (DFS) traversal. The class should store a list of nodes and a dictionary that maps each node to its parent node. The class should also provide methods for adding and removing nodes to the tree, performing a DFS traversal, and checking if the tree is empty or contains any nodes."}, {"instruction": "Design a Python program that generates all possible valid combinations of `n` nested parentheses that can be formed using `n` pairs of parentheses. For example, the function should generate all combinations of 3 parentheses as `((())), (()()), (())(), ()(()), ()()()`."}, {"instruction": "Given a binary tree, design a Python class that implements a depth-first search method that visits every node in the tree. Hint: start at the root node and recursively visit its left and right children."}, {"instruction": "Develop a Python class `Tree` that implements a binary tree with an arbitrary number of children. The class should be initialized with a `root_value` and `children`. The `children` parameter is a list of child nodes, which can be an arbitrary type of `Tree` instances or `None`. The class should have a `depth_first_search` method that performs a depth-first search on the tree, yielding the values of each node in the tree in a preorder traversal.\n\nThe result of the depth-first search should be a generator that yields the values of each node in the tree in a preorder traversal. The implementation of this method should utilize recursion to perform the traversal."}, {"instruction": "Write a Python class that implements a binary tree data structure. The class should allow the user to create a tree with nodes containing generic values and the ability to perform various tree operations, such as inserting a new node, searching for a node by value, and traversing the tree in different orders (pre-order, in-order, and post-order). The tree class should also support the root node property, which should return the root node of the tree.\n\nThe binary tree class should be implemented as a subclass of a generic Node class that is defined as follows:\n\n```python\nclass Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.left_child = None\n        self.right_child = None\n```\n\nNote that, for efficiency reasons, the binary tree class should not store a reference to the root node itself; instead, the root node should be stored as a property of the tree class."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: function declaration and return type, data access, conditional branching, function call, dereferencing, function prototype, function call with arguments, function call with arguments\n\n### Task", "fingerprint": null, "content": {"code": "SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Obs(struct soap *soap, const char *tag, int id, const ns3__Obs *a, const char *type)\n{\n\t(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_afip_ns3__Obs), type))\n\t\treturn soap->error;\n\tif (soap_out_int(soap, \"ns3:Code\", -1, &a->ns3__Obs::Code, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerTostd__string(soap, \"ns3:Msg\", -1, &a->ns3__Obs::Msg, \"\"))\n\t\treturn soap->error;\n\treturn soap_element_end_out(soap, tag);\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_instantiate_ns3__ArrayOfEvt"}, "id": 236, "seed": "SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Obs(struct soap *soap, const char *tag, int id, const ns3__Obs *a, const char *type)\n{\n\t(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_afip_ns3__Obs), type))\n\t\treturn soap->error;\n\tif (soap_out_int(soap, \"ns3:Code\", -1, &a->ns3__Obs::Code, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerTostd__string(soap, \"ns3:Msg\", -1, &a->ns3__Obs::Msg, \"\"))\n\t\treturn soap->error;\n\treturn soap_element_end_out(soap, tag);\n}", "__index_level_0__": 65, "concepts": ["function declaration and return type", "data access", "conditional branching", "function call", "dereferencing", "function prototype", "function call with arguments", "function call with arguments"], "parsing_result": [{"instruction": "Create a Python function `sort_by_length` that takes as input a list of strings, and sorts them in ascending order based on the lengths of the strings. The function should return the sorted list of strings."}, {"instruction": "Create a Python function `get_function_copy` that takes a function as an argument and returns a copy of the function with the same return type and arguments."}, {"instruction": "Create a Python function that accepts a function as an argument and returns another function that calls the original function with the same arguments. The returned function should be similar to the original function but with extra calls to print statements logging the function call."}, {"instruction": "Create a Python function called `multiply_add_pairwise` that takes two lists as arguments, `a` and `b`, and returns a new list containing the product of two adjacent elements from the input lists, plus the sum of all other elements. The function should use list comprehensions to implement its functionality. It should satisfy the following assertions:\n\n```python\nassert multiply_add_pairwise([1, 2, 3], [4, 5, 6]) == [4, 10, 20, 15]\nassert multiply_add_pairwise([1, 2], [3, 4]) == [3, 11]\nassert multiply_add_pairwise([1, 2, 3, 4], [5, 6, 7, 8]) == [5, 12, 21, 32, 28]\nassert multiply_add_pairwise([1, 2, 3], [4, 5, 6, 7]) == [4, 10, 18, 28, 21]\n```"}, {"instruction": "Create a Python function that accepts a function pointer as an argument and calls the function once for each element in a list of integers. The function pointer points to the function that returns a Boolean value. The function should return True if all elements of the list pass the Boolean predicate, and False otherwise."}, {"instruction": "Create a Python function `partition_matrix` to partition a 2-dimensional array `matrix` into sub-matrices consisting of rectangular sub-regions of `matrix`. Each sub-matrix should cover all rows and columns within the original `matrix`. The function should accept a matrix of integers, a sub-matrix size, and a target value. The function should then return a list of sub-matrices of the desired size that cover all rows and columns of the original `matrix` and that have at least one row and column that contains the target value. Each sub-matrix should be a contiguous subsequence of the original `matrix` and should be represented as a nested list."}, {"instruction": "Create a Python function that calculates the greatest common divisor of two positive integers. The function should accept two arguments (integers) and return its result."}, {"instruction": "Create a Python function that computes the total number of distinct elements within a list of list of integers. The function should accept a list of list of integers, and return the total number of distinct elements in the list."}, {"instruction": "Create a Python function `generate_nth(n)` that generates the `n`th Fibonacci number without using recursion or iteration. The function should return an integer value."}, {"instruction": "Construct a Python function `partial` that accepts a callable function and returns a partial application of that function. The partial application should be a new callable function that accepts additional arguments and returns the result of the original function call with the additional arguments prepended."}, {"instruction": "Create a Python function `my_function` that accepts a function `my_other_function` as an argument and returns a function that calls both.\n\nThe `my_function` function should accept a list of numbers as an argument and return a tuple containing the sum of all elements in the list and the sum of the squares of all elements in the list.\n\nThe `my_other_function` function should accept a list of numbers as an argument and return the average of all elements in the list.\n\nThe `my_function` function should call both `my_other_function` and `my_other_function` to calculate the sum and sum of squares, respectively, and return a tuple containing the sum and the sum of squares."}, {"instruction": "Create a Python function that generates all integer combinations of the numbers in a specified range `[start, stop)` with a specified integer step `step`.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert generate_integers(2, 7, 1) == [2, 3, 4, 5, 6]\nassert generate_integers(2, 7, 2) == [2, 4, 6]\nassert generate_integers(2, 2, 2) == []\nassert generate_integers(5, 1, 2) == []\nassert generate_integers(5, 5, 5) == []\n```"}, {"instruction": "Create a Python function `longest_common_substring` that takes two strings `str1` and `str2` as arguments. The function should return the longest common substring between the two strings."}, {"instruction": "Create a Python function called `find_maximum_subarray_sum` that takes an array of integers and returns the maximum sum of a contiguous subarray of the input array. You should only call the `max` function once from within this function. The function should meet the following requirements:\n- The function accepts a single argument that is an array of integers.\n- The function returns the maximum sum of a contiguous subarray of the input array.\n- It should only call the `max` function once from within the function."}, {"instruction": "Create a Python function `run_function` that accepts a function `f`, an integer `x`, and an integer `y` as arguments. The function should use the function `f` to compute the result of invoking `f(x, y)`. The function should use function call by name to invoke the function."}, {"instruction": "Write a Python function called `sort_and_merge(input_list, comparator)` that sorts the elements of `input_list` using the specified `comparator`. The function should return a sorted list of elements according to the comparator.\n\nThe `comparator` is a function that accepts two arguments, both of which are integers. The function should compare the two arguments using the following logic:\n\n- If the first argument is greater than the second argument, return `1`.\n- If the first argument is less than the second argument, return `-1`.\n- If the first argument is equal to the second argument, return `0`.\n\nThe `sort_and_merge` function should sort the elements of the `input_list` based on the `comparator` function.\n\nThe `sort_and_merge` function should satisfy the following requirements:\n\n- The function should take two arguments - an input list and a comparator function.\n- The function should use `sort_and_merge` to sort the elements of the `input_list` using the `comparator` function.\n- The function should return a sorted list of elements according to the `comparator`.\n- The function should not modify the input list or the `comparator` function.\n- The function should handle any errors that may occur while sorting the elements of the `input_list`."}, {"instruction": "Write a Python function `convert_to_binary` that converts a list of decimal integers into a binary string. The function should take two arguments: a list of decimal numbers and a list of integer powers of 2. It should return a binary string representing the converted values.\n\n```python\nconvert_to_binary([1, 2, 3, 4], [0, 1, 2, 3])\n# Output: '101101'\n```\n\nThe `convert_to_binary` function should satisfy the following assertions:\n\n```python\nassert convert_to_binary([1, 2, 3, 4], [0, 1, 2, 3]) == '101101'\nassert convert_to_binary([1, 2, 3, 4], [0, 0, 2, 4]) == '1010'\nassert convert_to_binary([1, 2, 3, 4], [1, 1, 2, 4]) == '110100'\n```\n\nThe function implementation should use the following strategy:\n\n- Iterate over the input lists, starting from the second to last element, and convert each element to a binary string with the specified power of 2.\n- Concatenate the binary strings into a single string and return the result.\n\nThe implementation should use a recursive function to make the conversion process more efficient."}, {"instruction": "Create a Python function `fibonacci_sequence(n)` that calculates the `n`th Fibonacci number. The function should comply with the following assertions:\n\n```python\nassert fibonacci_sequence(0) == 0\nassert fibonacci_sequence(1) == 1\nassert fibonacci_sequence(2) == 1\nassert fibonacci_sequence(3) == 2\nassert fibonacci_sequence(4) == 3\nassert fibonacci_sequence(5) == 5\nassert fibonacci_sequence(6) == 8\n```"}, {"instruction": "Create a Python function that determines the order of execution of a function call. The function is defined by the following function prototype that returns the expected order of execution as a string:\n\n```\nf(a, b, c, d) -> 'ae_bd'\n```\n\nThe function accepts four arguments `a`, `b`, `c`, and `d` and returns the expected order of execution as a string."}, {"instruction": "Create a Python function that returns the product of two matrices of the same dimension. The input matrices are represented as nested lists of numbers."}, {"instruction": "Write a Python function `product()` that takes three integer arguments and returns the product of the three numbers. The function definition is provided below.\n```python\ndef product(a, b, c):\n    ### TODO: complete function definition\n    pass\n```"}, {"instruction": "Create a Python function `get_indices(lst, target_sum)` that accepts a list of integer values and a target sum. The function should return a list of tuples, where each tuple consists of the indices of two adjacent elements in the list whose sum is equal to the target sum.\n\nIf no such pair exists in the list, the function should return an empty list."}, {"instruction": "Create a Python function `check_function` that takes a function `func` as an argument. The function should verify that the input `func` is a valid function declaration with a return type and return a boolean indicating if the function is valid.\n\n```python\ndef check_function(func):\n    pass\n```"}, {"instruction": "In this coding exercise, you will write a C++ function called `get_max_score` that takes an array of integers representing scores of a student along with the number of scores in the array as input and returns the maximum score in the array as output. The function should be implemented as a C++ template function with the following requirements:\n- The function should accept an array of scores and the number of scores as template arguments.\n- The function should return the maximum score from the input array.\n- If the input array is empty, the function should return 0.\n\nFor example, given the input array `arr = {1,3,5,6,10}, n = 5`, the program should output `10`."}, {"instruction": "Create a Python function that determines if a string is a valid function call, using the following rules:\n\n- A valid function call expression begins with a valid function return type.\n- After the return type, the name of the function should appear, followed by an open parenthesis.\n- The name of the function should be a valid C-style identifier.\n- Following the function name, a comma-separated list of arguments should follow, each of which is an expression.\n- A valid function call expression should end with a closing parenthesis.\n- An argument should be a valid expression, which may include nested function calls.\n- An argument may be a simple, single-element list; or a nested list containing two items, both of which are function calls.\n\nFor example, the following are valid function calls, but the following are not:\n\n```\nint main()\n{\n    int(10, 20);\n    int(10);\n    int(int(a + b), 20);\n}\n```"}, {"instruction": "Write a Python function `find_max_subarray_sum` that takes an integer array `nums` as an argument and returns the maximum subarray sum of all possible subarrays, assuming all elements in the subarray are consecutive and also that there is at least one subarray in the array that has a maximum sum. The algorithm should use the following pseudocode:\n\n```text\nmax_so_far = 0\nmax_ending_here = 0\nfor i in range(len(nums)):\n    max_ending_here = max_ending_here + nums[i]\n    if max_ending_here < 0:\n        max_ending_here = 0\n    if max_so_far < max_ending_here:\n        max_so_far = max_ending_here\nreturn max_so_far\n```"}, {"instruction": "Create a Python function `find_first_unrepeat_char` that accepts a string containing lowercase letters as an argument and returns the first character that is not repeated anywhere in the string. If all characters are repeated, the function should return `None`.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert find_first_unrepeat_char(\"abbc\") == \"c\"\nassert find_first_unrepeat_char(\"abc\") == None\n```"}, {"instruction": "Create a Python function named `find_closest_sum` that finds the closest sum to a given target value, given a sorted array of positive integers. The function should return the sum of two elements in the array that have a difference of at most `difference` from the target. The function should be able to handle arrays of different sizes, and provide a valid result even if the array is empty."}, {"instruction": "Write a Python function `find_LCA(root, n1, n2)` that finds the lowest common ancestor (LCA) of two nodes `n1` and `n2` in a binary search tree `root`. The function should return the LCA node if it exists, otherwise return `None`. The function should satisfy the following assertions:\n\n```python\nassert find_LCA(None, 1, 2) is None\nassert find_LCA(create_BST([1, 2, 3]), 1, 2) == 1\nassert find_LCA(create_BST([1, 2, 3, 4, 5, 6]), 4, 5) == 2\nassert find_LCA(create_BST([1, 2, 3, 4, 5, 6]), 4, 6) == 3\nassert find_LCA(create_BST([1, 2, 3, 4, 5, 6]), 4, 6) == 3\nassert find_LCA(create_BST([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]), 18, 22) == 12\ntry:\n    find_LCA(5, 4)\nexcept TypeError as e:\n    pass\n```"}, {"instruction": "Construct a Python function `get_function_name` that accepts a function reference as an argument and returns a string representing its full name. The function should resolve the reference to the actual function object, inspect the function name, and return the string."}, {"instruction": "Create a Python function that accepts a string as an input and returns an iterable containing the input string's characters in the order they are specified in the input string."}, {"instruction": "Create a Python function `get_good_matches` that performs a \"good match\" test on a list of candidate strings. Given a list of candidate strings and a function `test_function` that accepts a string as an argument and returns a boolean indicating whether the string is a \"good match\", the function should return a list of strings that are \"good matches\" according to the `test_function`.\n\nThe following assertions should pass:\n\n```python\nassert get_good_matches(['Alex', 'Aaron', 'Andrew', 'Andrew'], lambda s: s[0] == 'A') == ['Alex', 'Aaron', 'Andrew']\nassert get_good_matches(['Alex', 'Aaron', 'Andrew', 'Andrew'], lambda s: s[0] == 'A' and s[1] == 'A') == ['Alex', 'Aaron']\nassert get_good_matches(['Alex', 'Aaron', 'Andrew', 'Andrew'], lambda s: s[0] == 'A' and s[1] == 'A' and s[2] == 'A') == ['Alex']\nassert get_good_matches(['Alex', 'Aaron', 'Andrew', 'Andrew'], lambda s: s[0] == 'A' and s[1] == 'A' and s[2] == 'A' and s[3] == 'A') == []\nassert get_good_matches(['Alex', 'Aaron', 'Andrew', 'Andrew'], lambda s: s[0] == 'A' and s[1] == 'A' and s[2] == 'A' and s[3] != 'A') == []\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: nested loops, reading data from a serial port, string interpolation, conditional branching\n\n### Task", "fingerprint": null, "content": {"code": "int readVoltages(byte * ltc_addr){\n Serial.println(\"Reading voltages on 0x\"+String(ltc_addr[0],HEX));\n\n int err_count = 0;\n byte res[6];\n unsigned int total_vRead = 0;\n \n\n  int j = 0;\n  if (readBytes(ltc_addr,RDCVA,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }\n\n  j++;\n  if (readBytes(ltc_addr,RDCVB,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }\n\n  /*j++;\n  if (readBytes(ltc_addr,RDCVC,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }*/\n  Serial.println(\"Total: \"+String(total_vRead*VLSB)+\" [V]\");\n \n  return err_count;\n }", "docstring": "// so far this has always failed ; see page 16", "function_name": "doSelfTest"}, "id": 242, "seed": "int readVoltages(byte * ltc_addr){\n Serial.println(\"Reading voltages on 0x\"+String(ltc_addr[0],HEX));\n\n int err_count = 0;\n byte res[6];\n unsigned int total_vRead = 0;\n \n\n  int j = 0;\n  if (readBytes(ltc_addr,RDCVA,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }\n\n  j++;\n  if (readBytes(ltc_addr,RDCVB,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }\n\n  /*j++;\n  if (readBytes(ltc_addr,RDCVC,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }*/\n  Serial.println(\"Total: \"+String(total_vRead*VLSB)+\" [V]\");\n \n  return err_count;\n }", "__index_level_0__": 66, "concepts": ["nested loops", "reading data from a serial port", "string interpolation", "conditional branching"], "parsing_result": [{"instruction": "Develop a Python class `SerialListener` that listens to a serial port and receives messages from a remote device. The class should provide methods for receiving data from the serial port, sending data to the serial port, and setting up the serial port connection. Once the class is initialized, the serial port should be configured and the corresponding listener thread should be started. The class should also provide the `listen` and `disconnect` methods for starting and stopping the listener thread. The class should handle error conditions, such as invalid connection parameters, and display appropriate error messages if they occur.\n\nThe `listen` method should start listening for incoming messages from the serial port. The `disconnect` method should stop the listener thread and close the serial port connection. The serial port connection should be initialized only when the `listen` method is called. The listener thread should continue to listen for incoming messages until its `stop` flag is set.\n\nThe `send_message` method should send a message to the serial port, which should be stored in a file for later transmission. The `receive_message` method should read a message from the serial port, which should be stored in a file for later transmission.\n\nEnsure that the `SerialListener` class is thread-safe and can be used by multiple threads simultaneously."}, {"instruction": "Develop a Python class `ParallelPort` that supports parallel port I/O operations. The class should work with the serial port on the computer to accept inputs and transmit outputs from and to the parallel port. The class should handle communication errors, such as communication time-outs, and should have a general input and output functionality. When the class is called with a string argument, it should create a new serial port connection and print the ASCII string in the serial port. When the class is called with no arguments, it should read the serial port and return the contents of the port as a string."}, {"instruction": "Develop a Python class `SerialPortReader` that allows users to read data from a serial port specified by a serial port identifier and return it as a string. The class should support reading data from a specified timeout, a maximum number of bytes to read, and other options such as line termination conventions. The class should also support error handling, including exceptions such as invalid serial port identifiers, timeout parameters that are too short, and more."}, {"instruction": "Develop a Python program that repeatedly reads serial data from a port and checks the data for a required pattern. When the pattern is found, the program should print the pattern and its location in the serial data."}, {"instruction": "Implement a Python class `SerialReader` that reads and displays data received from a serial port. The class should support starting and stopping the reading process and specify the mode of the serial port (e.g., 9600-baud, 8-bits, 1-stop bit, no parity). The class should also support receiving and displaying data from the serial port line-by-line without waiting for the end of a message."}, {"instruction": "Develop a Python class that manages a serial port connection and is responsible for reading sensor data from an external device and sending it to a database. The class should maintain a connection to the serial port and make it available for reading data from the device. The class should also offer methods to configure the data format and sampling rate for the sensor data, and save the received data to a local database.\n\nThe class should handle errors in the connection and provide graceful recovery mechanisms. Additionally, the class should be designed with extensibility in mind, allowing developers to add new types of sensors and databases with minimal effort."}, {"instruction": "Develop a Python class `DataCollector` that collects sensor data from a serial port and stores it in a local file. The class should offer a method `start_sampling` that begins the data collection process and automatically generates the file name based on the current date and time. The class should support manually specifying a path for the file, which defaults to the current directory if not provided.\n\nThe class should also include a method `get_data` that outputs a list of data points as a string, which is intended to be used in `main()`. The data points should consist of sensor value, time stamp, and device name. The method `get_data` should also support the following optional arguments:\n- `time_start`: the start time for the data to be returned\n- `time_end`: the end time for the data to be returned\n- `device_name`: the name of the specific device whose data should be collected\n\nThe method `get_data` should return `None` if the provided time range does not overlap with the data collection time range. The class should also include a method `stop_sampling` that stops the data collection process and writes the collected data to the file."}, {"instruction": "Implement a Python class that continuously reads data from a serial port, parses it into a specific format, and holds the parsed data for further processing. The class should also provide methods for adding and removing handlers that can be invoked when new data is received. The class should ensure that the data is parsed correctly before adding it to the queue of data received from the port, and invoke the appropriate handlers if the data is valid.\n\nThe class should support adding handlers for various events, such as when a new line is received or when a timeout occurs. The handlers should be configured through a dictionary-based approach, such as `{'new_line': handler_1, 'timeout': handler_2}`. The program should be able to register new handlers and remove existing handlers."}, {"instruction": "Develop a Python program that reads data from a serial port. The program should continuously read data from the serial port and print it to the console in a fixed format. The program should also support various conversion types, including binary, hex, and decimal.\n/StringEnhancer.md\n# String Enhancer\n\n## Problem Description\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it."}, {"instruction": "Design and implement a Python class that reads input data from a serial port and outputs the average of its consecutive readings.\n\nThe class should maintain a circular buffer of numeric data representing the most recent readings. The class should support appending new data to the buffer and calculating the average value of the current buffer contents. The class should handle any and all errors that might occur during the data collection process.\n\nThe class should support the following operations:\n- `append(self, data)` adds a new reading to the buffer\n- `average(self)` returns the average reading of the current buffer"}, {"instruction": "Develop a Python class that periodically reads data from a custom serial port. The class should support a set of input channels that are defined as properties of the class. The class should provide a method to enable or disable each channel, and use these control flags to read the corresponding data. The program should read these data and perform some form of statistical analysis to determine the most frequent values.\n\nWhen the class is instantiated, it should read the configuration file to determine the input channels, their polling rate, and other related parameters. You should assume that the input channels are made up of a single string of data with a fixed length. Each channel is enabled by default, so the program should read the data immediately after the channel is enabled. Use a `threading.Timer` to periodically call the `read_data` method.\n\nThe class should implement a `get_most_frequent_values` method that returns a list of the most frequent values for each channel. The class should also provide a `stop` method that stops the polling thread and resets the internal data structures to prepare for a new run.\n\nThe class should use a configuration file to define the input channels, their polling rate, and other parameters. You should provide a way to load the configuration file and verify it is valid. The class should handle errors and exceptions gracefully."}, {"instruction": "Develop a Python class that reads the data from a serial port and prints the incoming data to the console. When the user presses Enter to send a command to the device, the class should automatically send the command to the device. The class should be implemented as a singleton to ensure only a single instance of the class exists at any given time.\n\nThe class should handle exceptions that might occur during the execution of the program, such as failing to open the serial port or receiving invalid input data. Consider specifying the serial port settings and baud rate in the constructor of the class.\n\nFor example, the class should be able to produce the following output:\n\n```\n> python serial_reader.py\n\nDevice> 1234567890\n\nDevice> Hello world!\nDevice>\n```"}, {"instruction": "Implement a Python class `SerialPort` that reads data from a serial port and prints it into a file with a timestamp. The file should be named according to the current timestamp. The class should be initialized with a port name and optionally a file path. For the first initialization, the class should create a new file and write the timestamp into it. Any subsequent initialization should append the timestamp to the existing file.\n\nFor example, given port name `COM1`, the class should write the timestamp into the file `COM1.log` when the first time the class is initialized. Any subsequent initialization should append the timestamp to the existing file. If the port name is `COM2`, the class should write the timestamp into the file `COM2.log`.\n\nThe class should have a method `read_port()` that reads the data from the serial port and prints it to the log file. The method should be able to handle I/O errors such as incorrect port names."}, {"instruction": "Develop a Python class that reads data from a serial port and reports the number of rows that exceed a specified threshold. Data is read from the port in batches of a given size. The class must also support optional logging to a file."}, {"instruction": "Create a Python class that implements a simulated traffic light signal. It should have a `main` method that continuously cycles through the different states of the signal. The class should use `time.sleep(1)` to simulate the passage of time between light states. The states of the light should be green, yellow, and red."}, {"instruction": "Develop a Python class that encapsulates a sensor that measures temperature and humidity and logs data to a file. The class should support adding new data files, measuring the temperature and humidity, and logging the results to a file. The class should handle errors gracefully and print relevant error messages to the console. The class should print the following information to the console:\n\n- The current temperature and humidity readings\n- The minimum, average, and maximum temperatures and humidity over the past 24 hours\n- The minimum, average, and maximum temperatures and humidity over the past 7 days\n- The overall average temperature and humidity over the past 24 hours\n- The overall average temperature and humidity over the past 7 days\n\nTo make the class more robust, ensure that the data files are valid JSON files. If the files are invalid, the class should print an error message and continue executing the program."}, {"instruction": "Develop a Python class that reads data from a serial port and displays it in a table format with column headers. The class should allow the user to set the column headers and the column widths. The class should handle exceptions and gracefully exit when the user enters invalid input."}, {"instruction": "Implement a Python class with a method `parse_log(self)` that reads a log file from a serial port, interprets the data, and returns a list of tuples representing the parsed log entries. Each log entry is represented by a tuple of the form `(date, time, name, duration, category)` where `date` and `time` are strings of the form `YYYY-MM-DD` and `HH-MM-SS`, respectively. The field `duration` is a string representation of an integer number of seconds. The field `category` is a string that represents the category of the log entry (e.g., `INFO`, `WARNING`, or `ERROR`).\n\nThe class should include a `__str__` method that prints the parsed log entries in a formatted output."}, {"instruction": "Develop a Python class that manages data input from a serial port and displays the input through a console application. You should use a nested loop to read each line of data from the serial port and print the data in real time. The class should also handle time out conditions and output a meaningful message when the serial port is not available."}, {"instruction": "Develop a Python class that implements a simple digital clock that displays the current time using a digital display. The display should display the current time in the following format: HH:MM:SS, where HH represents the hours, MM represents the minutes, and SS represents the seconds. The class should support starting and stopping the timer, with the latter being implemented by resetting the time to 00:00:00.\n\nUtilize a nested `while` loop to run the clock in a tight loop. The class should use a conditional branch statement to check whether it is time to print a new line. The clock should print a new line after every 5 seconds, but this should be configurable through a class attribute. The class should include a class constant for the maximum number of seconds in a minute."}, {"instruction": "Develop a Python class `TemperatureReader` that provides methods for reading a temperature value from a serial port. The class should support specifying a sample rate in seconds, reading the temperature in degrees Celsius using the following formula: `Temperature = (Value / 100) * 50`. The class also provides methods for reading the temperature values in both Fahrenheit and Kelvin units. The class should also include properties to control and read the serial port settings. The class should handle errors gracefully, such as invalid port names or invalid baud rates. Finally, the class should provide a method for reading the temperature values from a data file as well."}, {"instruction": "Develop a Python class that reads data from a serial port and parses it into a valid JSON structure. It should also support a method `set_stream` to change the serial port that the class reads data from. The class should handle invalid data input (the input string does not start with '{') gracefully."}, {"instruction": "Implement a Python class that reads data from a serial port at a specified baud rate and prints the received data to the console continuously at a specified interval. The class should support both ASCII and raw mode of operation, and the class should also support controlling the baud rate and the data transfer rate.\n\nProvide the operator `>>` and the method `is_open()` to check if the class is currently receiving data from the serial port. Provide a method `close()` to close the serial port. Provide an `open()` method to connect to the serial port, with proper error handling."}, {"instruction": "Create a Python class that reads data from a serial port and outputs it in a formatted way. The class should support two types of data formatting: binary and text. The class should also support two modes of data transmission: 'async' and 'sync'. In the asynchronous mode, the class should transmit the data directly from the serial port without buffering, and receive the data in chunks as the reading is completed. When the transmission is complete, the class should return the entire data as a string, including the following metadata: `mode:async, length:{length}, time:{timestamp}`.\n\nIn the 'sync' mode, the class should buffer the data received from the serial port and output all the buffered data as a string. The class should also return the following metadata: `mode:sync, length:{length}, time:{time}`.\n\nThe class should support user input to specify the data format and transmission mode. The class should also support user input to select the serial port to be read from. Error handling should be implemented to ensure that the user inputs are valid and the serial port is open before starting the data transmission."}, {"instruction": "Develop a Python class that implements a simple communication protocol over a serial port. The class should support sending and receiving data as bytes in binary format. The class should provide the following methods:\n- `send_bytes(self, data):` to send `data` as bytes to the connected serial port\n- `recv_bytes(self):` to receive and return a byte string from the connected serial port\n\nThe class should handle errors gracefully, such as invalid connection, exceptions in parsing input, and serial port timeouts."}, {"instruction": "Create a Python class that controls a robotic arm by reading movement commands from a serial port. The serial port should be provided as an argument to the class constructor. The class should offer two methods: `send_command(self, command: str)` for sending movement commands to the serial port, and `move_to(self, target: str)` for computing the path to move the arm from its current position to the target position. The movement should be computed by generating a list of sub-movements along a straight path between the current and target positions. Here is a list of specific sub-movements that the robot should follow, according to the input string:\n\n- `Forwards`: move the arm forward by moving its base forward by one step and flap its wrist by one step.\n- `Backwards`: move the arm backward by moving its base backward by one step and flap its wrist backward by one step.\n- `Open`: move the arm wrist backward by one step.\n- `Close`: move the arm wrist forward by one step.\n\nFor example, the string `'FBCFO'` should lead the arm to the position 'Forward, Backward, Close, Open'. The class should support the following use cases:\n\n- set the target position and call `move_to` to compute the path to move the arm\n- send the movement commands to the serial port using `send_command`\n- handle invalid input strings gracefully"}, {"instruction": "Implement a Python class with the following properties:\n\n- `port`: the serial port device name\n- `baudrate`: the baud rate used for communication\n- `timeout`: the timeout value for communication\n- `data`: the data to be sent\n\nThe class should be initialized with a `port` string, a `baudrate` integer, and a `timeout` float. The class should support sending arbitrary binary data through the serial port using the `send_data(self)` method. The method should open a serial port at the specified baudrate with a timeout of 5 seconds and write the data to the serial port.\n\nIn addition, the class should support reading data from the serial port in a blocking manner using the `get_data(self)` method. This method should return a string containing the received data when the connection successfully opens the serial port, otherwise it should return an empty string.\n\nBoth methods should have a `retry` parameter that indicates the maximum number of retries before returning an empty string.\n\nThe class should also support reading data from the serial port using a non-blocking method: `read_data(self)`. The method should return a string containing data if available, otherwise it should return an empty string.\n\nUse assertions to ensure that the class can be used to send and receive data from a serial port."}, {"instruction": "Develop a Python class that allows a user to interact with a serial port. The class should support writing and reading data to and from the port, as well as sending and receiving data asynchronously."}, {"instruction": "Design a Python class to monitor the temperature in a room. The class should read the current temperature from a serial port, and expose the following methods:\n\n- `get_temperature()`: get the current temperature\n- `get_status()`: get a status message indicating whether the temperature is within the normal range\n\nThe status message should be composed of the temperature, the normal range, and the difference between the temperature and the normal range.\n\nFor example, if the current temperature is 25 degrees and the normal range is 30--32 degrees, the status message should be 'The current temperature is 25, normal range is 30--32, difference is 5'.\n\nUse a nested `while` loop to monitor the temperature in a continuous loop. Provide the option to exit the loop by pressing Ctrl+C.\n\nFor example, given the following code:\n\n```python\nmonitor = TemperatureMonitor(port='/dev/ttyUSB0', baudrate=9600)\ntry:\n    monitor.monitor()\nexcept KeyboardInterrupt:\n    print('Exiting the loop...')\n```\n\nWhen the program is executed, the output should be similar to the following:\n\n```\nThe current temperature is 25, normal range is 30--32, difference is 5\nThe current temperature is 25, normal range is 30--32, difference is 5\nThe current temperature is 25, normal range is 30--32, difference is 5\n```"}, {"instruction": "Develop a Python class that implements a simple digital clock that updates once per second, and displays the current time in a specified format. The class should support two different display formats: 24-hour and 12-hour clock. The class should accept time formats such as 'h:mm:ss' and 'hh:mm:ss' (with optional leading zeros).\n\nWhen the input string is invalid, the class should report an error and keep the clock running until the invalid input is corrected."}, {"instruction": "Develop a Python class that reads and stores data from a serial port. The class should support basic operations such as reading data from a port and writing data to a port. The class should also manage proper data serialization and deserialization based on a specified format.\n\nThe data format is a line-based format where each line is a list of fields separated by a delimiter.\nThe first line of data indicates the fields in the data format, while all subsequent lines represent the data values in the same order.\nUse named tuples to represent the data values, and implement various operations to read and write the data.\n\nFor example, given the following sample data:\n```\nGreetings,World\nHello,Earth\n```\n\nThe program should be able to read the two lines and store them in two separate named tuples named `Greetings` and `Hello` respectively."}, {"instruction": "Develop a Python class that monitors a serial port for incoming messages. When a new message is received, the class should print out the message to the console. However, if the message contents corresponds to one of the predefined keywords, the class should proceed to perform an action based on the keyword. For instance, if the keyword is 'move', the class should invoke a method to move the robot to a predefined location. Add proper error handling to handle unexpected input or missing messages and keyword mismatches.\n\nThe class should support reading incoming messages from a serial port using the `readline()` method. The class should also support adding additional keywords and associated actions."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 5\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: recursion for power set generation, sorting of input set, vector manipulation\n\n### Task", "fingerprint": null, "content": {"code": "int main(){\n\t// #ifndef ONLINE_JUDGE\n\t// freopen(\"/home/naman/CP/input.txt\", \"r\", stdin);\n\t// freopen(\"/home/naman/CP/output.txt\", \"w\", stdout);\n\t// #endif\n\tint n;\n    int S[] = { 1, 3, 1 };\n\tn = sizeof(S) / sizeof(S[0]);\n\n\t// sort the set\n\tsort(S, S + n);\n\n\t// create an empty vector to store elements of a subset\n\tvector<int> out;\n\tfindPowerSet(S, out, 0);\n\n\treturn 0;\n\n}", "docstring": "// exclude current element in the current subset and recur", "function_name": "findPowerSet"}, "id": 246, "seed": "int main(){\n\t// #ifndef ONLINE_JUDGE\n\t// freopen(\"/home/naman/CP/input.txt\", \"r\", stdin);\n\t// freopen(\"/home/naman/CP/output.txt\", \"w\", stdout);\n\t// #endif\n\tint n;\n    int S[] = { 1, 3, 1 };\n\tn = sizeof(S) / sizeof(S[0]);\n\n\t// sort the set\n\tsort(S, S + n);\n\n\t// create an empty vector to store elements of a subset\n\tvector<int> out;\n\tfindPowerSet(S, out, 0);\n\n\treturn 0;\n\n}", "__index_level_0__": 67, "concepts": ["recursion for power set generation", "sorting of input set", "vector manipulation"], "parsing_result": [{"instruction": "Write a Python class that implements a Stack class according to the following specifications:\n- Add a push method that takes a value of any type and adds it to the top of the stack.\n- Add a pop method that removes and returns the value at the top of the stack.\n- Add an empty method that returns a boolean indicating whether the stack contains any elements.\n- Add a peek method that returns the value at the top of the stack without removing it.\n- Add an is_full method that returns a boolean indicating whether the stack is full.\n- Add a clear method that removes all elements from the stack.\n\nThe Stack class should be built using the following properties:\n\n- The maximum size the stack can hold.\n- The value of the maximum size should be an input parameter to the class's constructor.\n- The stack should be an instance variable.\n- The push method should be called by a client to add a value to the stack.\n- The pop method should be called by a client to remove and return a value from the top of the stack.\n- The peek method should return the value at the top of the stack without removing it from the stack.\n- The is_full method should return a boolean indicating whether the stack is full.\n- The clear method should clear the stack, removing all of its values.\n- The stack should be implemented using a list.\n- The Stack class should raise an exception when a new value is added to a full stack.\n- The Stack class should raise an exception when a value is attempted to be removed from an empty stack.\n- The Stack class should implement the following methods: `stack_of_powers`, `has_max`, `has_min`, `find_range`, `has_duplicates`, and `sort_stack`.\n\nThe `stack_of_powers` method should return the stack containing a list of the integers from 0 to `self._max_size` as power sets. For instance, for a stack with a maximum size of 3, the method should return the stack with the following contents:\n\n`[[], [0], [0, 1], [0, 1, 2], [0, 2], [1], [1, 2], [2], [0, 1], [0, 1, 2], [0, 2], [1], [1, 2], [2], [0, 1, 2]]`\n\nThe `has_max` method should return a boolean indicating whether the stack has a maximum value, otherwise return `None`. If the stack contains an element with the maximum value, return its index. The `has_min` method should return a boolean indicating whether the stack has a minimum value, otherwise return `None`. If the stack contains an element with the minimum value, return its index. The `find_range` method should return the range of indices that are present in the stack. The `has_duplicates` method should return a boolean indicating whether the stack contains any duplicate elements. The `sort_stack` method should sort the stack in ascending order."}, {"instruction": "Design a Python class `PowerSetGenerator` that represents a set of power sets, as an object that can generate power sets for a given set. The class should allow for creating the power set for a set of any number of elements. Additionally, the class should have the option to create the power set with an additional input of whether to consider the empty set as a valid set.\n\nThe class should implement a method for generating the power set, `get_power_set(self, set_input: Iterable, allow_empty: bool = False)`. This method should take a `set_input` argument, which can be any iterable that represents a set of elements, and an optional `allow_empty` argument. The method should return a list of lists, where the inner lists represent the power set for the given set.\n\nThe class should also implement a method `get_power_set_length(self, set_input: Iterable, allow_empty: bool = False)`. This method should take the same arguments as `get_power_set`, but instead return a single integer representing the total number of power sets for the given set.\n\nThe class should handle input errors, such as invalid input arguments and invalid sets."}, {"instruction": "Implement a Python class `PowerSet` to generate all subsets of a given set. The class should support the following operations:\n- `add_element`: add an element to the set\n- `remove_element`: remove an element from the set\n- `get_elements`: return the current set\n\nIn addition, the class should support:\n- `generate_all_subsets`: generate all possible subsets of the current set\n\nThe subsets returned by `generate_all_subsets` should be sorted based on the elements in each subset.\n\nFor example, given the input `{'a', 'b', 'c'}`, the following operations should produce the correct results:\n```python\n>>> pset.add_element('d')\n>>> pset.get_elements()\n{'a', 'b', 'c', 'd'}\n>>> pset.generate_all_subsets()\n[{'a', 'b', 'c', 'd'}, {'a', 'b', 'c'}, {'a', 'b', 'd'}, {'a', 'c', 'd'}, {'a', 'b'}, {'a', 'c'}, {'a', 'd'}, {'a'}, {'b', 'c', 'd'}, {'b', 'c'}, {'b', 'd'}, {'b'}, {'c', 'd'}, {'c'}, {'d'}]\n>>> pset.remove_element('d')\n>>> pset.get_elements()\n{'a', 'b', 'c'}\n>>> pset.generate_all_subsets()\n[{'a', 'b', 'c'}, {'a', 'b'}, {'a', 'c'}, {'a'}, {'b', 'c'}, {'b'}, {'c'}, {}]\n```"}, {"instruction": "Design a Python class `PowerSet` that implements an efficient implementation of the power set. The class provides a single method `power_set(self, input_set: list)`, which returns a list of all subsets of a given input set.\n\nThe method uses recursion to generate the power set of the input set. The power set is obtained by adding an empty set to the power set of the input set, and for each element of the input set, adding the element to each subset in the power set."}, {"instruction": "Develop a Python class `SetGenerator` that generates power sets of a given set. The class should support generating the power set of any given set of elements. The class should have a method `generate(self, set_members: Set[T])` that returns a list of all the subsets of the given set."}, {"instruction": "Develop a Python class `PowerSet` that enables users to generate power sets of a given set of elements. The class should provide a function `generate` that computes the power set of the input set. The generated power set should be returned as a set of sets."}, {"instruction": "Write a Python function to generate and return the power set of an input set of strings. The function should utilize recursion to produce the power set.\n\nFor example, given the input {'a', 'b', 'c'}, the function should return `[{'c'}, {'b'}, {'a'}, {'a', 'b'}, {'a', 'c'}, {'b', 'c'}, {'a', 'b', 'c'}, set()]`."}, {"instruction": "Create a Python class that takes a list of numbers as input and offers a method to generate all possible subsets of the input list. The class should also support sorting the subsets in ascending order of the sum of the elements in the subsets."}, {"instruction": "Design a Python class `PowerSetGenerator` that generates and stores all the power sets of a given set. Each power set should be represented by a list of elements, in which each element is an index indicating the corresponding element of the original set. The power set should be sorted in lexicographic order, but the order within each list of indices should not be changed.\n\nFor example, the `PowerSetGenerator` should take the set `['a', 'b', 'c']` as the input, and generate the power set:\n\n```python\n[['a', 'b'], ['a', 'c'], ['b', 'c'], ['a'], ['b'], ['c'], [], ['a', 'b', 'c']]\n```\n\nThe generated power sets should be stored in an internal state of the class. The class should support the following operations:\n- `get_power_set(self)`: returns the internal power set as a list of lists of indices\n- `get_power_set_at(self, i: int)`: returns the `ith` power set as a list of indices\n- `get_power_set_size(self)`: returns the total number of power sets\n- `get_power_set_range(self, i: int, j: int)`: returns the range of power sets from index `i` to `j` as a list of lists of indices\n\nThe class should handle erroneous inputs gracefully, such as invalid indices."}, {"instruction": "Develop a Python class `SetDesigner` that allows users to create power sets of any given set. The class should offer several methods to combine the power set with a given set.\n\nThe class should offer the following methods:\n- `union(self, other)` \u2014 returns a new set that contains the union of the current set and another set.\n- `intersection(self, other)` \u2014 returns a new set that contains the intersection of the current set and another set.\n- `difference(self, other)` \u2014 returns a new set that contains the difference of the current set and another set.\n- `symmetric_difference(self, other)` \u2014 returns a new set that contains the symmetric difference of the current set and another set.\n\nThe class should also contain an internal state representing the current set, which is initially empty. The class should handle erroneous inputs gracefully."}, {"instruction": "Design a Python class `SetOperations` that stores a set of integer elements and returns the following set operations: union, intersection, difference, superset, subset, and symmetric difference. The class should handle errors gracefully when supplied with invalid inputs.\n\nThe class should be initialized with an empty list of integers. It should also support adding, removing, and removing all elements from a set. The class should also serve as an iterable for the elements in the set."}, {"instruction": "Create a Python class `Set` that offers an efficient way to compute the power set of a given set. The class should support both basic operations of set creation and set operations, such as union, intersection, and difference. It should also support the ability to sort the power set. The class should return a list of the power set of the given set."}, {"instruction": "Design a Python class `PowerSet` that represents the power set of a given set. The class should provide a constructor that takes a set as input and constructs the power set immediately after instantiation. The class should offer two methods:\n- `get_power_set(self)` that returns the power set of the given set in a list of sets.\n- `get_minimal_set(self)` that returns the minimal subset of the given set that, when combined with the power set, forms the entire power set.\n\nThe class should handle invalid inputs gracefully, such as empty or invalid sets. Additionally, implement the `__str__` method to return a formatted string showing the contents of the power set."}, {"instruction": "Develop a Python class `Vector` that represents an n-dimensional vector and is capable of performing basic operations such as addition, subtraction, and scalar multiplication. The class should expose a parameter `size` that defines the dimensionality of the vector; the class should expose a read-only property `vector` that returns the vector as a tuple. The class should support addition (of two vectors of the same size) and subtraction (of two vectors of the same size) as well as scalar multiplication (of a vector by another scalar value)."}, {"instruction": "Develop a Python class `PowerSet` that generates the power set of an input set. The class should support the following operations:\n\n```\nadd(self, new_element: T): add a new element to the set\nremove(self, element: T): remove an element from the set\ncontains(self, element: T): check if an element is in the set\ngenerate(self): generate the power set of the set\n```\n\nThe class should ensure that the input set is not empty and that the input is an iterable. Additionally, the class should handle erroneous inputs gracefully, such as invalid input types or empty input sets. Finally, the class should ensure that the generation of the power set is efficient."}, {"instruction": "Design a Python class called `SetBuilder` that builds power sets of a given set. It should support nested set operations on the input set. The class should have a `build(self, input_set)` method that returns a list of sets. For instance, `build([1, 2])` should return `[[], [1], [2], [1, 2]]` and `build(range(3))` should return `[[], [0], [1], [2], [0, 1], [0, 2], [1, 2], [0, 1, 2]]`."}, {"instruction": "Develop a Python class `PowerSetCalculator` that generates the power set of a given set. The power set of a set `S` is the set of all subsets of `S`. The class should support generating the power set in all possible orders using an underlying recursion function, and should also provide a function `generate_power_set_sorted` that incorporates additional checks for uniqueness while generating the power set."}, {"instruction": "Design a Python class `PowerSet` that manages a set of vectors and maintains the power set of those vectors. The class should support constructing a power set from a set of vectors, and then checking whether a specific vector is in the power set or not."}, {"instruction": "Develop a Python class `PowerSetGenerator` that generates a list of all subsets of a given set. The class should support all the operations using a central method: `generate_power_set(self, element_list: List[X]) -> List[List[X]]`. The method should handle errors by raising an exception when the input fails to meet the required conditions:\n- the input list should be non-empty\n- the elements in the input list should be hashable"}, {"instruction": "Write a Python class `SetGenerator` that provides power set generation for any set of distinct elements. The class should provide the following two methods:\n- `generate_power_set(self, set: list) -> list`: Generates and returns the power set of the input set.\n- `sort(self, set: list) -> list`: Sorts the input set and returns it.\n\nThe class should handle erroneous inputs gracefully, such as sets with repeated elements. It should also perform appropriate validation and exception handling for all the methods."}, {"instruction": "Create a Python class `SubsetGenerator` that generates power sets of a given set of elements. The power set is the set of all subsets of elements in a set. Develop a Python program that uses the class to generate all the subsets for a given set of elements.\n\n# String Enhancer\n\n## Problem\n\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it."}, {"instruction": "Design a Python class `SetOperations` that offers an interface for generating the power set of a given set. The class should provide two methods:\n\n- `generate_power_set(self, sets: List[Set[Any]])`, which generates and returns the power set of the given set.\n- `intersection_of_power_sets(self, sets: List[Set[Any]])`, which returns the intersection of the power sets of the given sets.\n\nThe power set of a set is a collection of all subsets of the original set. The intersection of two sets is the set of all elements that are common to both sets."}, {"instruction": "Develop a Python class `PowerSetGenerator` that generates all the power sets of a given set of elements. The class should support multiple data types for the input set, including string, list, or tuple. The class should provide a method for generating the power set of the input set, and another method for converting the power set into a list of unique sets. Additionally, the class should support sorting the power set based on the input set."}, {"instruction": "Design a Python class that generates the power set of a given set. The power set is the set of all subsets of the original set, including the empty set and the set itself."}, {"instruction": "Create a Python class `PowerSet` that implements a recursive algorithm for generating the power set of a given set. The algorithm should be implemented as a method `compute_power_set(self)` that returns a list of all possible subsets of the given set, as a list of lists of elements of the input set. The method should not modify the original set."}, {"instruction": "Write a Python class `SetGenerator` that generates all subsets of a given input set. The class should support a function `power_set(self, input_set)` that returns an array of all subsets of the given input set. The subsets should be returned as a list of lists. The class should also have a `__str__` method that prints the subsets in a legible format, one subset per line."}, {"instruction": "Design a Python class `PowerSet` that generates the power set of a given input set. The class should store the power set using a dictionary that maps unique tuple representations of subsets to their corresponding sizes. The class also should support adding sets to the set of input subsets, and constructing the power set of the new set."}, {"instruction": "Create a Python class `PowersetGenerator` that generates and decodes all power sets of a given set of items that are represented as a list. The class should have a constructor that accepts an input set and initializes the internal set of items. The class should have a `powerset_generator` method that generates all power sets of the input set. The class should have a `decode` method that takes a power set encoded as a string and decodes it back into its original form as a list."}, {"instruction": "Create a Python class called `PowerSet` that generates and manages the power set of a given set. The class should contain a static method called `power_set_generator` that takes a set as an input and returns a generator that iterates over the power set. The power set is the set of all subsets of the input set, including the empty set and the input set itself.\n\nThe `PowerSet` class also should be capable of handling the following operations:\n1. Sorting the power set based on the number of elements in the subset\n2. Removing any subsets that have a repeated element in them\n3. Scaling the power set by a scalar\n\nNote: The power set is generated using recursion, and the sorting and filtering steps can be performed using list comprehensions or other equivalent techniques."}, {"instruction": "Design a Python class `PowerSet` that generates and manages the power set of a set. The class should offer pre-defined methods for generating the power set of a given input set, sorting the power set, and printing the power set.\n\nThe class should also support post-defined methods that involve manipulation of the power set, such as reversing the order of the elements, converting to a tuple, merging two power sets, etc."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: function composition, conditional branching, while loop, file creation, directory creation, error handling, file permission, file overwriting, file extraction\n\n### Task", "fingerprint": null, "content": {"code": "static void ExtractOne(ZipArchiveHandle zah, ZipEntry& entry, const std::string& name) {\r\n  // Bad filename?\r\n  if (android::base::StartsWith(name, \"/\") || android::base::StartsWith(name, \"../\") ||\r\n      name.find(\"/../\") != std::string::npos) {\r\n  }\r\n\r\n  // Where are we actually extracting to (for human-readable output)?\r\n  std::string dst;\r\n  if (flag_d) {\r\n    dst = flag_d;\r\n    if (!android::base::EndsWith(dst, \"/\")) dst += '/';\r\n  }\r\n  dst += name;\r\n\r\n  // Ensure the directory hierarchy exists.\r\n  if (!MakeDirectoryHierarchy(android::base::Dirname(name))) {\r\n  }\r\n\r\n  // An entry in a zip file can just be a directory itself.\r\n  if (android::base::EndsWith(name, \"/\")) {\r\n\t  if (android::base::utf8::mkdir(name.c_str(), entry.unix_mode) == -1) {\r\n      // If the directory already exists, that's fine.\r\n      if (errno == EEXIST) {\r\n        struct stat sb;\r\n        if (stat(name.c_str(), &sb) != -1 && S_ISDIR(sb.st_mode)) return;\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Create the file.\r\n  int fd = open(name.c_str(), O_CREAT | O_WRONLY | O_CLOEXEC | O_EXCL, entry.unix_mode);\r\n  if (fd == -1 && errno == EEXIST) {\r\n    if (overwrite_mode == kNever) return;\r\n    if (overwrite_mode == kPrompt && !PromptOverwrite(dst)) return;\r\n    // Either overwrite_mode is kAlways or the user consented to this specific case.\r\n    fd = open(name.c_str(), O_WRONLY | O_CREAT | O_CLOEXEC | O_TRUNC, entry.unix_mode);\r\n  }\r\n  if (fd == -1) {\r\n  }\r\n\r\n  // Actually extract into the file.\r\n  if (!flag_q) printf(\"  inflating: %s\\n\", dst.c_str());\r\n  int err = ExtractEntryToFile(zah, &entry, fd);\r\n  if (err < 0) {\r\n  }\r\n  close(fd);\r\n}", "docstring": "// being able to seek and truncate, and you can't do that with stdout.\r", "function_name": "ExtractToPipe"}, "id": 251, "seed": "static void ExtractOne(ZipArchiveHandle zah, ZipEntry& entry, const std::string& name) {\r\n  // Bad filename?\r\n  if (android::base::StartsWith(name, \"/\") || android::base::StartsWith(name, \"../\") ||\r\n      name.find(\"/../\") != std::string::npos) {\r\n  }\r\n\r\n  // Where are we actually extracting to (for human-readable output)?\r\n  std::string dst;\r\n  if (flag_d) {\r\n    dst = flag_d;\r\n    if (!android::base::EndsWith(dst, \"/\")) dst += '/';\r\n  }\r\n  dst += name;\r\n\r\n  // Ensure the directory hierarchy exists.\r\n  if (!MakeDirectoryHierarchy(android::base::Dirname(name))) {\r\n  }\r\n\r\n  // An entry in a zip file can just be a directory itself.\r\n  if (android::base::EndsWith(name, \"/\")) {\r\n\t  if (android::base::utf8::mkdir(name.c_str(), entry.unix_mode) == -1) {\r\n      // If the directory already exists, that's fine.\r\n      if (errno == EEXIST) {\r\n        struct stat sb;\r\n        if (stat(name.c_str(), &sb) != -1 && S_ISDIR(sb.st_mode)) return;\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Create the file.\r\n  int fd = open(name.c_str(), O_CREAT | O_WRONLY | O_CLOEXEC | O_EXCL, entry.unix_mode);\r\n  if (fd == -1 && errno == EEXIST) {\r\n    if (overwrite_mode == kNever) return;\r\n    if (overwrite_mode == kPrompt && !PromptOverwrite(dst)) return;\r\n    // Either overwrite_mode is kAlways or the user consented to this specific case.\r\n    fd = open(name.c_str(), O_WRONLY | O_CREAT | O_CLOEXEC | O_TRUNC, entry.unix_mode);\r\n  }\r\n  if (fd == -1) {\r\n  }\r\n\r\n  // Actually extract into the file.\r\n  if (!flag_q) printf(\"  inflating: %s\\n\", dst.c_str());\r\n  int err = ExtractEntryToFile(zah, &entry, fd);\r\n  if (err < 0) {\r\n  }\r\n  close(fd);\r\n}", "__index_level_0__": 68, "concepts": ["function composition", "conditional branching", "while loop", "file creation", "directory creation", "error handling", "file permission", "file overwriting", "file extraction"], "parsing_result": [{"instruction": "Develop a Python function `zip_directory(source_directory, destination_directory)` that compresses a directory at the `source_directory` and writes the resulting zip file to the `destination_directory`. Ensure proper error handling for directory and file creation. Handle and log exceptions that may occur during execution."}, {"instruction": "Construct a Python function `copy_files(source, destination)` to create a copy of the directory and its contents at the specified destination path. The function should perform error handling to check if the directory at the `destination` path already exists or is otherwise invalid. The function should also provide robust error handling for any exceptions that might occur while copying the files."}, {"instruction": "Write a Python function `copy_files_by_name(file_name, new_name, target_dir)` that copies a file with the name `file_name` to the directory `target_dir` with a name `new_name`. If the file already exists in the target directory, overwrite it. The function should create the target directory if it does not exist. The function should not attempt to copy a file to a directory if the file name is empty or the new name is empty. Ensure no file permissions or errors are raised."}, {"instruction": "Write a Python function `create_file_from_zip(zip_file_name, file_name, output_path)` that creates a text file from a zip file. The zip file should be extracted to the output path upon successful extraction. The output file should be overwritten if it already exists and the function should handle cases where the zip file is invalid or does not contain a text file.\n\nImplement the function in three-line code and place it in a separate file. In order to test your function, the zip file can be obtained from the following link: http://www.gutenberg.org/files/2554/2554-0.zip"}, {"instruction": "Construct a Python function that creates a directory for a given file path. If the directory does not exist, the function creates it and returns the path to it, otherwise it returns `None` to indicate the directory already exists. The function should handle exceptional cases indicating invalid input values such as `None` and an invalid file path."}, {"instruction": "Construct a Python function `transfer_file(source_path, target_path)` that copies a file from a source path to a target path. The source and target paths are absolute file paths, and the target path is guaranteed to be a directory for the file to be copied to. The function should handle file name clashes by appending an integer to the file name to prevent overwriting if a target file by the same name already exists.\n\nThe function should return `True` if the file is successfully copied, and `False` if it is not. Solve the problem in a single line of code by employing function composition and the use of conditional branching."}, {"instruction": "Create a Python function that creates files and directories based on the provided paths. The function should take a list of paths as input and create the files and directories in the form of a tree, where each file is created in a directory that exists in the previous path. Additionally, the function should handle error conditions and create appropriate messages, such as a warning message when multiple files are created in the same directory, or a message when a file with the same name as an existing directory is created."}, {"instruction": "Construct a Python function `create_backup(source, destination)` to backup the given source file to a new file with the given destination filename. The file at the destination should be created if it does not exist yet, and should have the same permissions as the source file. If the destination file already exists, the function should overwrite the original file without prompting. The function should also create destination directories and handle error conditions in a robust manner."}, {"instruction": "Create a Python function that converts a list of integers into a text file containing one integer per line and returns the path to that file. The file is created in the current working directory. The function should ensure all exceptions are handled and provide clear error messages in case of problems."}, {"instruction": "Develop a Python function `merge_directories(source, destination)` that recursively merges the content of the source directory into the destinations directory, overwriting files as needed. Ensure that the program is robust to unexpected errors and handles unexpected input accordingly."}, {"instruction": "Write a Python function to randomly generate a valid HTTP request string for a specified website or page. The function should accept a URL string as input, and then generate a valid HTTP request string as output. Utilize randomization and conditional branching to generate the request method, the host, the path, and the HTTP version of the request. The function should also output the HTTP request string to a file in the specified directory on the local machine. For simplicity, assume https://www.example.com as the hostname for the request."}, {"instruction": "Write a Python function `create_directories_and_files(path, directory_names, file_names)` that creates the directories and files in the given `path` as specified in the input. The directory names and file names will be provided as a list of strings. The function should create the directories and files in the specified `path` in a loop that starts with the directory at the root of the `path` and proceeds to create the subdirectories one by one.\n\nIf a file with the same name exists in any directory, the function should throw an error with an appropriate message to indicate that the file already exists. The function should continue creating the rest of the directories and files in the `path` until all directories and files have been created successfully.\n\nThe function should be robust against invalid input."}, {"instruction": "Write a Python function `backup_file(source, destination)` that copies the file at `source` to the directory `destination` with a unique name, adding the extension `.backup`. The function should not overwrite the `destination` file if it exists. The function should also check that the `source` and `destination` paths are valid, and exit the program if one of them is invalid. Additionally, ensure that the function performs error handling for permission issues, file overwrites, and other issues that might arise during file operations.\n\nFor example, given the input `backup_file('data.txt', 'backup')`, the function should copy the file `data.txt` to the directory `backup` with a unique name, such as `data.txt.backup`."}, {"instruction": "Develop a Python function that writes to a text file named `index.txt` three lines of formatted text (e.g., the first line should read `apple 2`, the second line `banana 1`, and the third line `orange 6`) from a list of fruits provided by the user. The function should also have an option to overwrite the existing file.\n\nThe function should include robust error handling to prompt the user for a list of fruits and to display an error message if the user provides an invalid number of fruits.\n\nThe index file should be created in a directory named `week1` in the current working directory. If a directory or file already exists with the same name, the user should be prompted for permission to overwrite the existing file.\n\nThe function should also have an option to create a new directory named `fruit_data` to store the index file in. If a directory already exists with the same name, the user should also be prompted for permission to overwrite the existing directory.\n\nThe function should be implemented in a single line of code."}, {"instruction": "Construct a Python function that receives a filename and a text as input, and returns the contents of the file as a string if the file exists. The function should handle errors where the file does not exist. The file should be created if it does not exist, and the function should raise an error if it cannot be created."}, {"instruction": "Develop a Python function `create_files(directory, file_names)` that creates the given list of files in the given directory. Assume that all files in the list have the same extension. The function should satisfy the following assertions:\n\n```python\nassert create_files('temp_dir', ['file1.txt', 'file2.txt', 'file3.txt']) == 3\nassert create_files('temp_dir', ['file1.txt', 'file2.txt', 'file3.txt']) == 3\n```\n\nThe function should create the specified directory, create the specified files, and return the number of files created. Utilize assertions to ensure the directory and files exist after the function call."}, {"instruction": "Develop a Python function that creates an empty directory, then creates a file called `data.txt` in the directory, writes some input data to `data.txt`, and finally extracts the data, cleaning out any newline characters, into a separate file called `cleaned_data.txt` in the same directory."}, {"instruction": "Develop a Python function that creates a directory named log_archive and a log file within it. The file is created only if the directory was created successfully. If the directory exists, the file is written into the log file. The file name must be the date and time of its creation. The file should be formatted as YYYY-MM-DD HH:MM:SS.log in its name. The function should use a while loop to periodically check and create the log file. The function should also handle exceptions and log the error into the log file."}, {"instruction": "Construct a Python function that takes a target file name and an output directory as arguments. The function should create a new file in the output directory containing the lines from the target file in reverse order. The function should also create a new directory named `temp` in the output directory, where the temporary file is created."}, {"instruction": "Construct a Python function that creates a directory structure and, within these directories, copies a given file to a specified location. The function should handle errors that might occur during the creation of directories and files, including the case where the file already exists.\n\nMake sure the function does not overwrite existing files when copying a file to a directory."}, {"instruction": "Create a Python function named `convert_byte_size_to_human_readable` that converts decimal `byte_size` to human-readable sizes like 'GB', 'MB', 'KB', and 'B'. The function should take a user-specified `byte_size` as input and return the corresponding human-readable size string. The function should also include error handling to ensure that the `byte_size` is a positive integer.\n\nEnsure the function is reusable to convert any byte size into a human-readable string."}, {"instruction": "Create a Python function that creates and populates a new file with the given contents and returns the path to the file. This function should:\n\n- create a directory called `temp_files` in the current working directory if it does not already exist\n- create a new file in `temp_files` with the name `temp_file_{number}` where `{number}` is an ascending integer starting from 1, and the file path is formed by joining the directory and file name\n- populate the file with the given list of strings\n- return the path to the file\n\nIf there is an error during the file creation process, the function should log the error and not create a file."}, {"instruction": "Create a Python function that receives a file name as input. If the file does not exist, then create it by writing some text of your own choosing into the file. If the file already exists, then append your text to it. In either case, ensure the file has the required permissions. If the user supplies an invalid file name, then raise an exception with an appropriate error message."}, {"instruction": "Design a Python function `create_directory_tree(directory, depth)` to create a directory structure of `depth` levels, where files in each level are named `file_name` and directories in each level are named `directory_name`. The function should return a list of paths to each created file."}, {"instruction": "Develop a Python function that takes a path to a zip file (that is, a file with the `.zip` file extension) and extracts all files from it into the same directory."}, {"instruction": "Construct a Python function `copy_file(src, dest)` that copies the contents of a file from `src` to `dest`. The function should not overwrite the destination file in case the destination already exists. If the destination file cannot be created, the function should output an error message and raise an exception. Ensure the function is robust so that it correctly handles exceptions and file-related errors.\n\nThe solution should include robust error handling to ensure the source and destination files exist. Additionally, the function should correctly handle file permission and overwrite errors by ensuring the destination file is removed before creating a new one."}, {"instruction": "Design a Python function to compress a directory's contents by renaming files in it with the same name but with a new extension. Rename files in the directory based on their length and encoding to avoid losing information in the content of the files. For instance, given the directory 'temp' with the files ['file1.txt', 'file2.txt'], the function should create the directory 'temp_compressed' with the files ['file1.txt', 'file1.txt.gz'].\n\nThe function should:\n- search the directory for files to be compressed (they should be of type '.txt')\n- create a new directory 'temp_compressed' within the original directory to store the compressed files\n- rename each file to be compressed by appending the extension '.txt' followed by the file length and the encoding type (ASCII, UTF-8, etc.)\n- compress each file to be compressed using the 'gzip' program specified in the file's extension\n\nThe file and directory creation should be done using Python built-in libraries."}, {"instruction": "Implement a Python function `move_to_trash(filepath)` that moves the file located at the path `filepath` into the Trash folder (macOS) or the Recycle Bin (Windows) depending on the operating system. The function should first create the appropriate Trash folder and copy the file into it. The function should then delete the original file from the filesystem. The function should handle exhausting the trash space and notify the user about it by logging the error message."}, {"instruction": "Construct a Python function that performs the following steps given a list of filepaths:\n\n- Creates a new directory named `extracted` in the same directory as the current working directory.\n- Extracts the files from each filepath into the `extracted` directory.\n- For each extracted file, moves it to a new directory named after its file extension.\n- For each extracted file, removes its file extension.\n- Renames each extracted file according to the following naming convention:\n    - If the extracted file is a directory, the new filename is the extracted directory's name.\n    - If the extracted file is a file, the new filename is a concatenation of the extracted file's name and its file extension.\n\nUse function composition to organize the required functionality into separate functions and separate the main logic from the precondition check. Use file handling functions to read the input filepaths and create the new directories and files. Use conditional branching to handle error handling and other non-essential checks."}, {"instruction": "Create a Python function `create_file_from_lines()` that takes a list of strings as input and writes each string to a file in the current working directory. The function should not return anything. It should create a new directory 'files' if it does not exist, and the files should be created in that directory.\n\nThe function should use the following utility functions:\n\n```python\ndef create_directory(dir_name):\n    \"\"\"Creates a directory in the current working directory.\"\"\"\n    if not os.path.exists(dir_name):\n        os.mkdir(dir_name)\n\ndef create_file(file_path):\n    \"\"\"Creates a file in the current working directory.\"\"\"\n    with open(file_path, 'w') as f:\n        pass\n\ndef write_to_file(file_path, string):\n    \"\"\"Writes the given string to the given file path.\"\"\"\n    with open(file_path, 'a') as f:\n        f.write(string)\n```\n\nThe function should handle any exceptions it encounters during file creation and file writing."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: command-line argument parsing, exception handling for invalid input, string to integer conversion, conditional and range checks\n\n### Task", "fingerprint": null, "content": {"code": "int main (int argc, char * argv[]) {\n\n  //If the number of command-line arguments is incorrect, the program should print line\n  //Usage: executable-path <storage-duration-name> <count>\n  //and quit.\n  if (argc != 3) {\n    std::cout << \"Usage: executable-path <storage-duration-name> <count> \\n\";\n    return 1;\n  }\n\n // If the <count> is not a valid unsigned short integer, the program should print line \"Invalid count\" and quit.\n  try {\n    unsigned short count = std::stoi(argv[2]);\n    // If the <count> is greater than 100, the program should print line \"Too many requested\" and quit.\n    if (count > 100 || count < 0 ) {\n      std::cout << \"Too many requested \\n\";\n      return 1;\n    }\n  }\n  catch (...){\n    std::cout << \"Invalid count \\n\";\n    return 1;\n  }\n\n    unsigned short count = std::stoi(argv[2]);\n    createObjects (argv[1], count);\n    \n    return 0;\n}", "docstring": "// the program should print line Invalid storage duration and quit.", "function_name": "createObjects"}, "id": 256, "seed": "int main (int argc, char * argv[]) {\n\n  //If the number of command-line arguments is incorrect, the program should print line\n  //Usage: executable-path <storage-duration-name> <count>\n  //and quit.\n  if (argc != 3) {\n    std::cout << \"Usage: executable-path <storage-duration-name> <count> \\n\";\n    return 1;\n  }\n\n // If the <count> is not a valid unsigned short integer, the program should print line \"Invalid count\" and quit.\n  try {\n    unsigned short count = std::stoi(argv[2]);\n    // If the <count> is greater than 100, the program should print line \"Too many requested\" and quit.\n    if (count > 100 || count < 0 ) {\n      std::cout << \"Too many requested \\n\";\n      return 1;\n    }\n  }\n  catch (...){\n    std::cout << \"Invalid count \\n\";\n    return 1;\n  }\n\n    unsigned short count = std::stoi(argv[2]);\n    createObjects (argv[1], count);\n    \n    return 0;\n}", "__index_level_0__": 69, "concepts": ["command-line argument parsing", "exception handling for invalid input", "string to integer conversion", "conditional and range checks"], "parsing_result": [{"instruction": "Design a Python program that reads a list of integers from the command line and outputs the maximum number of consecutive pairs of integers that are in ascending order. For instance, if the input is `[1, 2, 3, 6, 7, 8, 9]`, the output should be `3` because `[3, 6]` is the longest ascending pair."}, {"instruction": "Design a Python program that takes two command-line arguments: a number `rows` and a number `columns`. The program should generate a grid of `rows` by `columns` using the argument values. The grid is constructed by creating a string representation of an empty rectangle. Then, the program should append a newline character to the end of each row.\n\nThe program should print the grid to the console and exit.\n\nFor example, the program might take the following arguments: `rows = 5` and `columns = 3`. The program should generate the following grid:\n\n```\n#####\n#####\n#####\n#####\n#####\n```\n\nand it should exit."}, {"instruction": "Implement a Python command-line program that accepts an integer and prints the factors of it. The program should accept an optional flag `--report-all` that enables the output of additional information (e.g., prime-factors and their multiplicities) for each factor.\n\nFor example, the command `python3 factors.py 120 --report-all` should print the following:\n\n```\nprime-factor: 2, multiplicity: 2\nprime-factor: 3, multiplicity: 1\nprime-factor: 5, multiplicity: 1\nprime-factor: 7, multiplicity: 1\n```"}, {"instruction": "Write a Python program that reads a file of integers on one line from the command line and writes a new file which contains the square and square root of each integer. The program should exit with a non-zero error code if the file is invalid or the input file is empty."}, {"instruction": "Create a Python program that returns all permutations of a list of integers.\n\nHere is a sample input and output:\n\n```python\n>>> permutations([1, 2, 3])\n[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n```"}, {"instruction": "Design a Python program that reads and parses command-line arguments. The program should take at least one argument that is the number of integers to be processed. The remaining arguments are the integers to be processed. The program should return the minimum, maximum, and average values of the integers, alongside the total sum. The program should indicate that the input format is invalid if any of the following occur:\n\n- the number of arguments passed is less than 2 (the program's name and the number of integers to be processed)\n- the number of integers to be processed is not a positive integer\n- any of the remaining arguments are not integers"}, {"instruction": "Create a Python program that runs in command-line mode and accepts up to 3 arguments: an integer `n`, a string `s`, and a boolean `d`. `n` is the number of times to repeat the string `s`, while `d` is a flag that indicates whether the output should be displayed in the console or written to a file. If `d` is true, the output is written to a text file `out.txt`.\nIf `d` is false, the output is displayed in the console.\nIf any argument is not valid, the program should exit with an error and print a usage message containing the syntax of the program.\n\nThe syntax of the program is:\n\n```\npython repeat_string.py <arguments>\n```\n\nwhere `<arguments>` are:\n\n```\n<arguments> ::= [<n>, <s>, <d>]\n<n> ::= <integer>\n<s> ::= <string>\n<d> ::= <boolean>\n```\n\nThe usage message should be `python repeat_string.py <n> <s> <d>`.\n\nHere are some examples:\n\n```\npython repeat_string.py 10 bar true\npython repeat_string.py 10 bar false\npython repeat_string.py 10 foo true\npython repeat_string.py 10 foo false\npython repeat_string.py 10 true foo false\npython repeat_string.py 10 foo bar false\npython repeat_string.py 10 foo bar true\n```"}, {"instruction": "Create a Python program that accepts a command-line argument and converts it into an integer.\nIf the argument is an integer, the program should output that integer.\nIf the argument is not an integer, the program should exit and output a helpful error message."}, {"instruction": "Create a Python program that takes a list of integers as an argument. The program should return a list of integers that is a permutation of the input list, as long as the input does not contain any duplicates.\n\nFor example, given `[2, 1, 3, 4, 1]` the program should return `[3, 1, 2, 4, 1]` or `[1, 3, 2, 4, 1]`."}, {"instruction": "Create a Python program that can convert a given list of integers into a sorted list of integers from the least to the greatest.\n\nThis program should handle the following cases:\n\n- Non-empty list of integers\n- Empty list of integers\n- List of integers with multiple occurrences of the same number\n- List of integers with negative numbers\n- List of floating-point numbers\n- List of strings\n- List of other types of objects\n- List of lists of integers\n- List of lists of floats\n- List of lists of strings\n- List of lists of other types of objects\n\nMake sure to handle all these cases and correctly report errors to the user."}, {"instruction": "Design a Python program that accepts a value in either decimal, octal, or hexadecimal format and converts it into its equivalent decimal value. The input can be passed as a command-line argument, or it can be entered in the console."}, {"instruction": "Develop a Python program that finds the five most frequently occurring words in a text file. The program should accept a file name as a commandline argument and print the five most frequent words, along with their counts, to the standard output. The program should handle any IO errors and exit gracefully."}, {"instruction": "Design a Python program that does the following:\n\n- converts a string of the form `1d2h3m4s` into an integer number of seconds\n- validates the input string\n- raises an exception if the input string is invalid"}, {"instruction": "Create a Python program that accepts a list of integers as input from the command line, prints out the list of numbers in ascending order, and then prints out the sum of the numbers.\n\nWrite assertions to check for invalid command-line arguments. These arguments should be integers, whereas anything else should be treated as invalid."}, {"instruction": "Create a Python program that takes two command-line arguments representing two numbers and outputs the sum of the two numbers. The program should raise a ValueError if either argument is not a positive integer."}, {"instruction": "Create a Python program that takes in a command-line argument `n` that specifies the number of integers to be input, and read in `n` integers from the command-line. The program should print the smallest integer that is greater than the sum of all the other input integers. The main function should handle any exceptions that occur during the input or computation, displaying proper error messages."}, {"instruction": "Create a Python program that receives inputs from the command line to generate a random integer between a specified minimum and maximum value. The program should generate the random number and print it to the standard output. The program should handle errors if any of the inputs are not integers or if the minimum value is greater than the maximum value."}, {"instruction": "Create a Python program that accepts a list of integers as the command-line arguments and outputs the product of all integers within the list. The input should be a sequence of integers separated by commas. For example, given ./program.py 1,2,3,4 it should output 24. If the input is invalid, the program should raise a ValueError.\n\nFor example, the program should pass the following assertions:\n\n```python\nassert multiply_integers('1,2,3,4') == 24\ntry:\n    multiply_integers('a,b,c')\nexcept ValueError as e:\n    pass\n```"}, {"instruction": "Develop a Python program that accepts a set of command-line arguments using the `sys` module.\n\nThe first argument must be a required integer `n` representing the size of a square matrix. The second and third arguments must be integers `p` and `q` representing the size of a sub-matrix in the square matrix. The fourth argument must be an optional string `direction` to specify the direction of traversal of the sub-matrix. If the string is not provided, the program should accept the default value of 'right-up'.\n\nThe main function of the program should print the elements of the sub-matrix to the screen in the specified direction. The program should check for the validity of the first argument, and raise an exception if it is invalid.\n\nIt should check for the validity of the second and third arguments, and raise an exception if they are invalid.\n\nIt should check the validity of the fourth argument, and return the default value of the direction if the argument is invalid.\n\nThe program should be able to handle the following cases:\n\n- `n` is a positive integer\n- `p` and `q` are positive integers and `p <= n` and `q <= n`\n- `direction` is a string of length 3 with letters 'r', 'l', 'u', or 'd'\n\nThe program should raise an exception if the command-line arguments provided are invalid."}, {"instruction": "Create a Python program that takes a list of command-line arguments and prints out the sum of all of them.\nIf the program is called with no arguments, print a message stating: \"Sum of arguments: 0\".\nIf the program is called with an invalid argument, print a message stating: \"Invalid argument: <argument-value>\"."}, {"instruction": "Create a Python program that accepts one command-line argument (e.g., `python program.py 15`) and a list of positive integers from `sys.argv[1:]`. The program should return the sum of the integers if the command-line argument is a valid integer and raises an exception otherwise."}, {"instruction": "Develop a Python program that prints a table of integers divisible by the command-line argument. The table should print the first column of the table with the numbers from 1 to 100 and then each row of the table should start with the numbers from 1 to 100, where the value at row `i` and column `j` is `i` divided by `j`, for `j` in the range 1 to 100.\n\nThe program should handle invalid arguments and print the message \"Invalid argument\" when the argument is not an integer or is less than 2."}, {"instruction": "Design a Python program that performs a search on a comma-separated list of integer numbers stored in a text file. The user should provide a target number with which the program should compare all numbers in the file. The program should return the index of the first occurrence of the target number.\n\nThe program should check the validity of the input for the target number. If the target number is not an integer or the file does not exist, it should raise `ValueError` and terminate the program.\n\nIf the target number is not found in the file, the program should raise `ValueError` and terminate."}, {"instruction": "Create a Python program that uses the `argparse` library to parse a command-line argument representing an integer and then prints the square and cube of that integer."}, {"instruction": "Design a Python program that reads a series of arguments from the command line and attempts to print their sum, if all of the arguments are valid integers. Otherwise, the program should print an error message and exit.\n\nNote: The program should handle positive and negative numbers on the command line."}, {"instruction": "Create a Python program that implements a dictionary (hash table) data structure. The program should provide the following functionalities:\n\n- Add a new key to the dictionary with a specified value\n- Remove a specified key from the dictionary\n- View a specified key's value\n- View the number of keys in the dictionary\n\nThe program should be able to handle errors for the following cases:\n\n- Updating an existing key with a new value\n- Removing a non-existent key\n- Viewing a non-existent key\n\nThe program should also handle invalid command-line arguments:\n\n- Command-line arguments not specified (usage help)\n- Invalid command-line arguments (usage help)"}, {"instruction": "Design a Python program that takes a list of numbers as command-line arguments and prints out the average. It should handle both positive and negative numbers. Solve the problem in two lines of code, one for the precondition check and the other for the main logic."}, {"instruction": "Create a Python program that takes one command-line argument, a valid integer string, and returns the modulo of the string's value divided by `2**32`. The program should handle cases where the input is not a valid integer string, where the modulo cannot be computed, or where the input string is too long to be represented by an integer.\n\nIt should behave as follows, where the first argument is the input string:\n\n```bash\npython3 solution.py 123456789012345678901234567890\n255\npython3 solution.py 12345678901234567890123456789087654321\n1\npython3 solution.py abcdefghijklmnopqrstuvwxyz\n1091951650\npython3 solution.py 1234567890123456789012345678901234567890\nERROR: Input string is too long to be represented by an integer.\n```"}, {"instruction": "Develop a Python program that parses the command-line arguments for the following flags:\n\n- `--input`: a text file containing a list of numbers, separated by newlines\n- `--output`: a text file containing a list of numbers, separated by newlines\n- `--sort`: an optional flag specifying the type of sorting to perform\n    - `asc`: sort the list in ascending order\n    - `desc`: sort the list in descending order\n    - `none`: sort the list in the order given by the input file\n- `--limit <limit>`: an optional flag to limit the number of lines processed in the output file\n- `--stats`: an optional flag to print the number of lines processed and the total sum of the numbers in the input file\n\nThe program should handle exceptions for invalid flags and invalid input files."}, {"instruction": "Write a Python program that accepts a list of command-line arguments and returns its sum. The program should handle cases where the input is either invalid or exceeds the range of integers. The inputs are integers, and the program should return the sum of all integers, or `-1` if an invalid input is encountered."}, {"instruction": "Design a Python program that reads two command line arguments, `start` and `end`, and prints the prime numbers between them. The program should handle invalid input, such as non-numeric values, and print the following error message:\n\n```\nInvalid input. Please enter two positive integers.\n```\n/examples/example_1.py\n# Given a sorted array and a target value, search for the index of the target\n# in the array using binary search.\n\n# Optimize the function to run in logarithmic time complexity.\n\n# For example, given [1, 3, 5, 5, 6] and 5, the function should return 2 or 3.\n\ndef bin_search(li, target):\n    pass\n/examples/example_10.py\n# Design a Python program that reads two command line arguments, `start` and `end`,\n# and prints the prime numbers between them.\n\n# The program should handle invalid input, such as non-numeric values, and print\n# the following error message:\n\n# Invalid input. Please enter two positive integers.\n/examples/example_2.py\n# Develop a Python function `ceil_divide_without_div` that computes the ceiling\n# of `n / 2**b` without using division, floating-point operations, built-in\n# functions like `math.ceil`, or converting it into computing the floor.\n# Instead, use bit manipulation to achieve the result. You write assertions\n# to ensure both `n` and `b` are non-negative integers.\n\ndef ceil_divide_without_div(n, b):\n    pass\n/examples/example_3.py\n# Here are two special formulas:\n\n# f1(a, b) = (a + 1) * (b + 1) - 1\n# f2(k) = ((k + 1)^2) / 2 + k + 1\n\n# Write a Python function to return f2(f1(a, b)) for given `a` and `b`.\n\ndef f2_f1(a, b):\n    pass\n/examples/example_9.py\n# Design a Python program that reads two command line arguments, `start` and `end`,\n# and prints the prime numbers between them.\n\n# The program should handle invalid input, such as non-numeric values, and print\n# the following error message:\n\n# Invalid input. Please enter two positive integers.\n/examples/example_7.py\n# Create a Python function that identifies all pairs of elements within a list\n# of integers where the second element of the pair is at least greater than the\n# first by `growth_ratio` and the indices of the elements are within a specified\n# `maximum_distance` from each other.\n\n# For example, if the list is [1, 10, 21, 3, 4, 5, 6, 7, 8, 9], growth_ratio is\n# 2, and maximum_distance is 3, the function should return [(1, 2), (4, 5), (7, 8)].\n\ndef find_pairs(li, growth_ratio, maximum_distance):\n    pass\n/examples/example_8.py\n# Create a Python function that converts a string representation of a time duration\n# into its total number of seconds.\n\n# The input string should follow a format that includes a numeric part followed\n# by a time unit suffix without any spaces between.\n\n# The time unit can be seconds in the form of 's' or 'sec', minutes in the form\n# of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of\n# 'd' or 'day' (units are in small case).\n\n# If the input format is invalid, the function should raise a ValueError.\n\n# For example, the function should pass the following assertions:\n\n# assert parse_duration('15s') == 15\n# assert parse_duration('2min') == 120\n# assert parse_duration('1h') == 3600\n# assert parse_duration('1d') == 86400\n# try:\n#     parse_duration('30')\n# except ValueError as e:\n#     pass\n\ndef parse_duration(duration):\n    pass\n/examples/example_4.py\n# Create a Python function to encode an integer into a sequence of encoded\n# characters, where each character represents a 5-bit chunk of the integer.\n# The ASCII value of each chunk character is formed by adding 63 to the 5-bit\n# chunk's value. For all chunks except the last one, set the 6th bit to 1 to\n# indicate continuation. Employ bitwise operations for this encoding process.\n\n# For example, the function should return 'a**b' for input 1875.\n\ndef encode(n):\n    pass\n/examples/example_6.py\n# Design a Python function to encode a list of strings into a unique list with\n# the same length, order, and meaning.\n\n# The new list is formed by appending asterisks (*) to duplicate strings.\n# For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return\n# ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return\n# ['a', 'b', 'c'] without any changes.\n\n# Write assertions to ensure the input is a list of strings.\n\n# Solve the problem in two lines of code, one for the precondition check and\n# the other for the main logic.\n\ndef encode(li):\n    pass\n/examples/example_5.py\n# Design a Python program that not only searches for a target value in a list\n# using recursion but also constructs a trace of the indices it checks.\n# This program should return both the index of the target, if found, or `-1`\n# if not, alongside a list of the indices it examined during the search.\n# The function should handle cases where the target is not present in the list.\n\n# For example, given [1, 2, 3, 4, 5], the function should return `(3, [0, 1, 2, 3])`.\n\ndef search_by_rec(li, target):\n    pass"}, {"instruction": "Create a Python program that takes a list of integers and an integer as commands from the command line. The program should print out the list modified according to the specified commands. The user enters commands in the following format:\n\n- `insert i j x`, insert `x` at index `j` in the list: `list[j] = x`\n- `delete i`, delete element at index `i` in the list: `del list[i]`\n- `replace i j`, replace element at index `i` in the list with element at index `j`: `list[i] = list[j]`\n\nThe program should handle the following cases:\n\n- the command is invalid\n- the command has a missing or invalid value\n- the index is non-existent\n- the index is out of range"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: type casting in function arguments, integer indexing in Lua, explicit value assignment in Lua\n\n### Task", "fingerprint": null, "content": {"code": "static int _cocos2d_PhysicsWorld_removeBody2(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsWorld *self = nullptr;\n    lua_Integer arg1 = 0;       /** tag */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsWorld\");\n    olua_check_int(L, 2, &arg1);\n\n    // void removeBody(int tag)\n    self->removeBody((int)arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "docstring": "// void removeBody(cocos2d::PhysicsBody *body)", "function_name": "_cocos2d_PhysicsWorld_removeBody1"}, "id": 258, "seed": "static int _cocos2d_PhysicsWorld_removeBody2(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsWorld *self = nullptr;\n    lua_Integer arg1 = 0;       /** tag */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsWorld\");\n    olua_check_int(L, 2, &arg1);\n\n    // void removeBody(int tag)\n    self->removeBody((int)arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "__index_level_0__": 70, "concepts": ["type casting in function arguments", "integer indexing in Lua", "explicit value assignment in Lua"], "parsing_result": [{"instruction": "Implement a Python function `convert_to_int(value)` that converts a string or number value into an integer value. The function should raise an exception if the value cannot be converted to an integer.\n\nFor example, given a string or number value, the function should return the integer value. The conversion should work for any type of value, including strings, integers, and floating-point numbers. If the value cannot be converted to an integer, a ValueError should be raised.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic."}, {"instruction": "Implement a Python class `List` that stores a list of integers. Provide a method `__setitem__` that can be used to set the value of an element at a given index. The method should also ensure that the index is within range and that the value is an integer."}, {"instruction": "Design a Python class named `Array2D` that models a two-dimensional array. The class should support the following methods:\n\n- `__init__(self, cols, rows)`: Constructs a new 2D array of the given dimensions. The default values for the dimensions are 2 and 2.\n- `__str__(self)`: Returns a string representation of the array in the form of a matrix.\n- `__getitem__(self, index)`: Returns the element at the given index location. The index location can either be an integer or a tuple with two elements. If an integer is provided, the method should return the element at that position in the array. If a tuple is provided, the first element of the tuple should indicate the row index and the second element should indicate the column index.\n- `__setitem__(self, index, value)`: Sets the element at the given index location to the provided value. The index location can either be an integer or a tuple with two elements. If an integer is provided, the method should set the element at that position in the array to the provided value. If a tuple is provided, the first element of the tuple should indicate the row index and the second element should indicate the column index.\n- `get_row_count(self)`: Returns the total number of rows in the array.\n- `get_column_count(self)`: Returns the total number of columns in the array.\n- `get_cell_value(self, row, col)`: Returns the value in the cell at the given row and column indices.\n- `set_cell_value(self, row, col, value)`: Sets the value in the cell at the given row and column indices to the provided value.\n\nImplement the `__str__` method to return a string representation of the array in the form of a matrix."}, {"instruction": "Implement a Python class called `DivisibleBy` that takes an integer n as an argument and has a `check_number(n)` method. The method should return an integer array of all integers from 1 to n that are divisible by n. The `check_number(n)` method should work for positive and negative numbers. For example, `DivisibleBy(4).check_number(-15)` should return `[4, -4, 8, -8, 12, -12]` for n=4 and `[1, -1, 2, -2, 3, -3]` for n=-3."}, {"instruction": "Create a Python class that represents a binary tree. The class should have a constructor method that takes an input list of numbers and finds the necessary structure to build the tree from it. If the list does not represent a binary search tree, the class should raise an Exception.\n\nFor example, given the input [1, 2, 3, 4, 5, 6, 7], the class should build the following tree:\n\n```text\n1\n/ \\\n2   3\n/ \\ / \\\n4  5 6  7\n```"}, {"instruction": "Implement a Python class that represents a linked list where each node has an integer value and a pointer to the next node. Write methods to insert a new node at the end of the list, insert a new node after another node, and remove a node by its integer value. The class should also have methods to determine its length, check if a value is in the list, and list all of the nodes."}, {"instruction": "In an element-wise operation, the sum of the elements of two matrices is calculated by the following formula: `a[i][j] + b[i][j]`. This operation should be implemented as a class method `Matrix:add(other)` that performs this operation with two `Matrix` instances of the same size. The output `Matrix` should store the result of the element-wise operation.\n\nFor example, given a `Matrix` instance of size 2x2, `Matrix:add(other)` should return a `Matrix` instance of size 2x2 that represents the element-wise sum of the two matrices."}, {"instruction": "Implement a Python class for a `Stack` data structure, which provides the following methods:\n\n- `__init__(self)`: constructor\n- `push(self, value)`: add a value to the top of the stack\n- `pop(self)`: remove and return the top value of the stack\n- `peek(self)`: return the top value of the stack without removing it\n- `is_empty(self)`: check whether the stack is empty\n\nFor simplicity, the `Stack` class should use dynamic arrays to store the elements, which means that the class should be able to expand automatically when there is no enough space for the new element."}, {"instruction": "Design a Python class that implements a weighted graph using a Python dictionary. The class should support operations such as adding nodes, adding edges, and removing edges. It should also support custom traversal algorithms, such as Dijkstra's algorithm, for finding the shortest path between two nodes.\n\nThe class should have the following properties:\n\n- The graph should be represented using a Python dictionary where the keys are nodes and the values are lists of tuples representing edges (i.e., `(node, weight)` pairs).\n- The class should provide methods for inserting new nodes, adding edges between nodes, removing edges between nodes, and finding the shortest path between two nodes using Dijkstra's algorithm."}, {"instruction": "Implement a Python class with a method `get_integer_matrix_transpose(matrix)` that computes the transpose of a given 2D matrix with dimension MxN, where M and N are both positive integers. The method should convert the given matrix into a 2D array of integers and return the transpose of the original matrix. The transpose of a matrix is a new matrix with the same columns as the original matrix and the same number of rows.\n\nFor example, given the following 3x2 matrix:\n```\n[[1, 2],\n [3, 4],\n [5, 6]]\n```\nThe transpose of the matrix is a 2x3 matrix:\n```\n[[1, 3, 5],\n [2, 4, 6]]\n```"}, {"instruction": "Given a Lua script stored in `script.lua`, implement a Python function `run_script(script)` that runs the script using the Lua interpreter. The function should read the script from the file and interpret it using the Lua interpreter. Ensure that all Lua errors are handled appropriately by returning the error message, or that the script ran successfully and a result is returned."}, {"instruction": "Implement a Python class `Fraction` to represent fractions. The class should have attributes `numerator` and `denominator` to represent the values and be constructed from a string representation of a fraction. For example, `Fraction('1/2')` should be the same as `Fraction(1, 2)`, and `Fraction('3/4')` should be the same as `Fraction(3, 4)`. Ensure the `Fraction` class has a method `__str__` to return a string representation of the fraction. Additionally, implement a method `to_float` that converts the fraction to its floating point equivalent."}, {"instruction": "Implement a Python class that can be used to perform basic string manipulation tasks such as checking whether a string matches a specified pattern, finding the first occurrence of a substring, and replacing a substring. The class should have methods to perform the following tasks:\n\n- `matches(pattern)`: Check if the string matches a specified pattern.\n- `find(pattern)`: Find the first occurrence of a substring.\n- `replace(pattern, replacement)`: Replace all occurrences of a substring with a replacement string.\n- `startswith(prefix)`: Check if the string starts with a prefix.\n- `endswith(suffix)`: Check if the string ends with a suffix.\n\nThe class should support the following patterns for matching:\n\n- Exact match: `pattern` is a literal string or a regex.\n- Regex: `pattern` is a regex string or a regex object.\n- Wildcard: `pattern` is a string of the form `*.ext` where `*` represents zero or more characters and `ext` is a file extension such as `txt`, `py`, or `csv`.\n\nThe class should support finding the first occurrence of a substring and replacing all occurrences of a substring by a replacement string. The following methods should be included in the class:\n\n- `find(pattern)`: Return the index of the first occurrence of a substring that matches the pattern.\n- `replace(pattern, replacement)`: Replace all occurrences of a substring with a replacement string.\n\nThe class should also support checking string prefixes and suffixes, which can be used for finding the first occurrence of a substring that matches the pattern. Additionally, the class should provide methods for checking whether a string starts with a prefix or ends with a suffix. The following methods should be included in the class:\n\n- `startswith(prefix)`: Check whether the string starts with a prefix.\n- `endswith(suffix)`: Check whether the string ends with a suffix.\n\nThe class should support wildcard patterns for finding the first occurrence of a substring and replacing all occurrences of a substring by a replacement string. The following methods should be included in the class:\n\n- `find(pattern)`: Find the first occurrence of a substring that matches the pattern.\n- `replace(pattern, replacement)`: Replace all occurrences of a substring with a replacement string."}, {"instruction": "Design a Python class that implements a \"rolling average\" function that computes the average of the last n values passed to the function. The class should have a method called `update(value)` that adds `value` to the rolling average. If the average is updated, the function should return the updated average. Assume the average is always an integer.\n\nThe class should be created with 3 constructor arguments: `n`, the number of values to use for the average, and `value`, an initial value to use for the average. The class should have a call operator that accepts a variable number of arguments. Each argument passed to the call operator should be used to update the average. For example, given the following code:\n\n```python\navg = RollingAverage(5, 10)\navg(1, 2, 3, 4, 5)\navg(100, 200, 300, 400, 500)\n```\n\nThe output should be `3` and `150`.\n\nAdditionally, implement the class as a Lua library module in `rolling_average.lua` with the following functions:\n- `new(n, value)`: Create a new rolling average object with the given `n` and initial `value`.\n- `update(self, value)`: Update the rolling average with the given `value` and return the updated average.\n- `(`): Call operator that accepts a variable number of arguments. Each argument passed to the call operator should be used to update the average.\n\nInclude unit tests in `rolling_average_test.lua` to verify the class's functionality."}, {"instruction": "Implement a Python class to represent a \"Point\" object that has an x and a y coordinate. The class should support addition, subtraction, and multiplication with a scalar to create new points. The class should also have a method that converts the object into a string in the format \"(x, y)\"."}, {"instruction": "Implement a Python class with a method `get_int()` that takes a single argument, `max`, and returns an integer between 0 and `max` inclusive. Utilize desirable properties of Python to ensure that the function returns a valid integer instead of an arbitrary float.\n\nAdditionally, enhance the class to support an additional method `get_int_int()` that takes two arguments as well and returns an integer between zero and the product of those two arguments exclusive."}, {"instruction": "Create a Python class `Fraction` to represent a fraction, including basic arithmetic operations: addition, subtraction, multiplication, division, and equality. The class should have a constructor that takes two integer arguments, representing the numerator and denominator of the fraction. The class should also include special methods such as `__add__`, `__sub__`, `__mul__`, `__truediv__`, and `__eq__` to support arithmetic operations.\n\nFor example, given `Fraction(1, 2) + Fraction(1, 3)`, the result should be `Fraction(5, 6)`."}, {"instruction": "Design a Python class with an attribute `is_prime` that represents whether a specific integer is a prime number. The class should have a method `is_prime(n)` that takes an integer n as a parameter, and returns a boolean value representing whether n is a prime number or not.\n\nThe class should also have a method `get_prime_factors(n)` that takes an integer n and returns a list of its prime factors as integers. Ensure the method utilizes memoization and avoids unnecessary calculations to improve performance."}, {"instruction": "Implement a Python class `CircularArray` that acts as a circular buffer supporting push and pop operations on both ends. The data structure should allow for efficient insertion and deletion of elements at both ends. The class should provide methods `append(val)`, `append_left(val)` to add a value to the right or left end, and `pop()`, `pop_left()` to remove a value from the right or left end, respectively."}, {"instruction": "Implement a Python class called `Number` that represents an integer number in a decimal format. The `Number` class has two methods: `add` and `subtract`. The `add` method accepts a second `Number` object and returns a third `Number` object whose value is the sum of the two input numbers (including their signs). The `subtract` method accepts a second `Number` object and returns a third `Number` object whose value is the difference of the two input numbers. These two methods should throw an exception if the operands are of incompatible types or if the types are valid but the operation is not applicable. Use type checking to ensure the function only accepts `Number` objects as input and returns `Number` objects."}, {"instruction": "Write a Python class called `Person` with two attributes, `name` and `age`, and two methods, `print_name()` and `print_age()`. The `print_name()` method should print the value of the `name` attribute, while the `print_age()` method should print the value of the `age` attribute.\n\nImplement the class so that `Person` objects can be initialized with any name and age, and then the `print_name()` and `print_age()` methods can be called without any arguments."}, {"instruction": "Implement a Python class called `NumberRange` that represents a range of numbers. The class should provide methods to check if a number is within the range and to get the range as a string in the format \"[Start], [End]\", where [Start] and [End] are the smallest and largest numbers in the range, respectively. The `NumberRange` class should be initialized with two arguments: a starting number and an ending number.\n\nThe class should provide the following methods:\n- `is_number_in_range(number)`: checks if a given number is within the range\n- `get_range()`: returns the range as a string in the format \"[Start], [End]\"\n\nThe class should also provide the following assertions:\n- `NumberRange(10, 20).is_number_in_range(15)` should return `True`\n- `NumberRange(20, 10).is_number_in_range(15)` should return `False`"}, {"instruction": "Implement a Lua function `insert_sorted(arr, value)` that takes in a sorted array `arr` and an element `value` as arguments. The function should insert `value` into the array `arr` and return the modified array. Ensure the function efficiently updates the array by maintaining the original order and preserving the size."}, {"instruction": "Implement a Python class `Circle` with the following methods:\n- `get_area()` to compute the area of the circle\n- `get_circumference()` to compute the circumference of the circle\n\nThe Circle class should accept a radius as a parameter to initialize and the constructor should raise an error if the radius is less than 0. Make sure the class is immutable."}, {"instruction": "Implement a Python class called `CustomQueue`, which behaves like a queue data structure, but can store any data type in a list. The class should provide the following methods:\n- `enqueue(value)`: add the `value` to the end of the queue.\n- `dequeue()`: remove the first element from the queue and return it.\n- `size()`: return the number of elements currently stored in the queue.\n- `is_empty()`: return `True` if the queue is empty, `False` otherwise.\n\nThe class should support storing integer, float, string, and boolean values in the queue. To accomplish this, the class should utilize the type casting features of Python to convert the values to the appropriate type when enqueueing them. Additionally, the class should explicitly assign values to the list instead of appending them, which allows for more efficient queue operations.\n\nIn Lua, a queue data structure is implemented with a list and two integer variables to keep track of the first and last elements in the list. The enqueue operation is similar to pushing an element to the end of the list, while the dequeue operation pops an element from the beginning of the list."}, {"instruction": "Implement a Python class `Array2D` that represents a 2D array of elements, with support for indexing elements by row and column. The class should provide a method `get_row(row)` that returns a 1D array representing the row at the given index, and a method `get_column(column)` that returns a 1D array representing the column at the given index. Additionally, the class should provide methods `set_row(row, values)`, which replaces the elements in the specified row, and `set_column(column, values)`, which replaces the elements in the specified column. The class should support basic indexing and slicing operations for accessing and modifying subsets of the array."}, {"instruction": "Implement a Python class that takes an integer input, and returns a list of integers that follow the following rules:\n\n- The first element of the list is the input value itself\n- The second element of the list is the number of 1s present in the binary representation of the input value\n- The third element of the list is the number of 2s present in the binary representation of the input value\n- The fourth element of the list is the number of 3s present in the binary representation of the input value\n- The fifth element of the list is the number of 4s present in the binary representation of the input value\n- The sixth element of the list is the number of 5s present in the binary representation of the input value\n\nThe returned list should be ordered by the number of occurrences of each digit, which is the order of the digits in the decimal system. For example, given the input 23, the list returned should be `[23, 2, 3, 0, 0, 0]`."}, {"instruction": "Write a Python class that implements a stack data structure using a list object. The list should be initialized as an empty list.\n\nThe stack should support the following operations:\n- `push(item)`: add an item to the top of the stack\n- `pop()`: remove and return the top item from the stack (if empty, return None)\n- `peek()`: return the top item of the stack without removing it (if empty, return None)\n- `is_empty()`: return True if the stack is empty, otherwise return False\n\n# Examples"}, {"instruction": "Create a Python class that represents a 2-dimensional grid with a width and height. The grid is represented as a list of lists of length width and height, where each entry in the inner list represents a cell in the grid. The class should provide methods to get and set the value of a cell at a specific row and column, as well as a method to return a list of cells at a specific row."}, {"instruction": "Create a Python class to implement the \"midpoint\" function found in Lua, which calculates the median of two sorted arrays with equal or unequal lengths. The function should return the median with the smallest index if the inputs have an odd number of elements, and the average of the middle two elements if the inputs have an even number of elements. Handle the case where both inputs are empty, in which case the function should return `None`."}, {"instruction": "Write a Python class that implements a reverse polish notation (RPN) calculator. This calculator takes a string as input, where each token is a number or an operator, and then evaluates the expression according to the following rules:\n\n- If a token is a number, push it onto the stack.\n- If a token is an operator, pop the top two elements from the stack and apply the operator to them, then push the result back onto the stack.\n- After processing the entire string, pop the top element from the stack.\n\nFor example, given the input \"3 2 1 + 4 * + 5 -\", the calculator should return 14. The stack should be initialized with `[3, 2, 1, 4, 5]` before processing each token.\n\n- Process \"3\": push 3 onto the stack\n- Process \"2\": push 2 onto the stack\n- Process \"1\": push 1 onto the stack\n- Process \"+\": pop [3, 2, 1] and perform the addition operation 3 + 2 = 5; push 5 onto the stack\n- Process \"4\": push 4 onto the stack\n- Process \"*\": pop [5, 4] and perform the multiplication operation 5 * 4 = 20; push 20 onto the stack\n- Process \"+\": pop [20, 5] and perform the addition operation 20 + 5 = 25; push 25 onto the stack\n- Process \"5\": push 5 onto the stack\n- Process \"-\": pop [25, 5] and perform the subtraction operation 25 \u2013 5 = 20; push 20 onto the stack\n- At the end, pop the final element from the stack, which is 20."}, {"instruction": "Implement a Python class that represents a Train. Each train is uniquely identified by a string and has a unique starting time (in seconds). The class should include methods to insert a train at the correct position in a sorted list of trains. The method should allow for trains with identical starting times to be inserted in any order, ensuring that the list remains sorted.\n\nFor example, given the following train instances:\n\n```python\ntrain1 = Train('train1', 10)\ntrain2 = Train('train2', 60)\ntrain3 = Train('train3', 60)\ntrain4 = Train('train4', 120)\ntrains = [train1, train3, train2, train4]\n```\n\ncalling `trains.insert(train2)` should result in the list `[train1, train2, train3, train4]`, as `train2` is inserted between `train1` and `train3`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: single-threaded program execution, POSIX system calls, file system operations, error handling\n\n### Task", "fingerprint": null, "content": {"code": "static int scifs_rmdir(const char *path)\n{\n  int res;\n  string rpath;\n // std::cout << \"\\n REMOVE INVOKED ::\" << path << std::endl;\n \n  for (int i=0; i<RPCALL->get_locations_size(); i++) \n  {\n    rpath = RPCALL->MakePath(path,i);\n   // std::cout << \" AFTER MAKEPATH \" <<std::endl;\n    res = rmdir(rpath.c_str());\n   // std::cout << \" AFTER RMDIR \" <<std::endl;\n    if (res == -1)\n      return -errno;\n  }\n  return 0;\n}", "docstring": "/* On Linux this could just be 'mknod(path, mode, rdev)' but this\n     is more portable */", "function_name": "scifs_mknod"}, "id": 259, "seed": "static int scifs_rmdir(const char *path)\n{\n  int res;\n  string rpath;\n // std::cout << \"\\n REMOVE INVOKED ::\" << path << std::endl;\n \n  for (int i=0; i<RPCALL->get_locations_size(); i++) \n  {\n    rpath = RPCALL->MakePath(path,i);\n   // std::cout << \" AFTER MAKEPATH \" <<std::endl;\n    res = rmdir(rpath.c_str());\n   // std::cout << \" AFTER RMDIR \" <<std::endl;\n    if (res == -1)\n      return -errno;\n  }\n  return 0;\n}", "__index_level_0__": 71, "concepts": ["single-threaded program execution", "POSIX system calls", "file system operations", "error handling"], "parsing_result": [{"instruction": "Write a Python program to read a text file and store it as a string. A Python program should then search the file for a specific search pattern and count the number of instances of the pattern. The text file and the search pattern are input from the command line.\n\nCreate a Python class for the program that also includes a `search` method to perform the search operation on the file contents."}, {"instruction": "Create a Python class that implements a thread-safe queue, which stores the items in a FIFO manner. The queue should provide the following operations:\n\n- `enqueue(x)`: insert an item `x` to the queue and return `True`. If the queue is full, the operation should return `False`.\n- `dequeue()`: remove the first item from the queue and return `True` and its value if the queue is not empty. If the queue is empty, the operation should return `False` and `None`.\n- `get()`: return the number of elements in the queue.\n\nProvide a `size` property and a `__del__` method to release the underlying resources when the queue is destroyed."}, {"instruction": "Write a Python class that represents a virtual file system (VFS). The VFS should have a root directory where all of the files and subdirectories reside. The class should support the following functionalities:\n\n- Create a new file or directory with specific name, type, and permissions\n- Delete a file or directory\n- List all files and directories in the current directory\n- Traverse down to a subdirectory\n- Change the current working directory to a subdirectory\n\nThe class should be multi-thread safe and able to handle concurrent read and write operations. Error handling should be implemented for both syntax and logic errors, such as incorrect file or directory names, invalid file or directory permissions, and unreadable or unwritable files."}, {"instruction": "Develop a Python class that implements a simple shell-like command line interpreter. The class should provide methods for executing shell commands, interacting with the operating system, and handling errors and exceptions. The class should allow the user to input a command in the following format: `command [arguments]`. The `command` can be any valid shell command, and the `arguments` are optional.\n\nThe class should have the following functionalities:\n- Ability to execute a command and wait for it to finish.\n- Ability to capture the output of the command.\n- Ability to handle errors and exceptions.\n- Ability to interact with the operating system, such as reading or writing files.\n\nFor example, the following code snippet shows how the class can be used to execute a command and capture its output:\n\n```python\nshell = ShellInterpreter()\ncommand = 'ls -l /home/user'\noutput = shell.execute(command)\nprint(output)\n```"}, {"instruction": "Create a Python class that provides a simple interface for executing a sequence of shell commands in a single-threaded environment. The class should support both foreground and background execution of commands and should allow for command chaining. The class should provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\nThe class should support the following commands:\n\n- `run`: run a specific command in the foreground or background, depending on the input arguments\n- `run_chain`: run the next command in the chain only when the previous command finishes executing\n- `get_result`: get the exit status of the last command executed\n- `get_output`: get the output of the last command executed\n\nFor example, the following code snippet demonstrates how the class can be used to execute multiple commands in a single-threaded environment:\n\n```python\nshell = Shell()\nshell.run(\"command1\")\nshell.run(\"command2\")\nshell.run_chain(\"command3\")\nshell.run(\"command4\")\nshell.get_result() # Returns exit status of \"command1\"\nshell.get_output() # Returns output of \"command1\"\nshell.run_chain(\"command5\")\nshell.get_result() # Returns exit status of \"command3\"\nshell.get_output() # Returns output of \"command3\"\n```"}, {"instruction": "Create a Python class called `ProcessManager` that manages a list of running processes, including their process IDs (PIDs) and their current working directories (CWDs). The `ProcessManager` should be able to start new processes and perform operations on the running processes, such as checking if a specific PID is still running, retrieving the current working directory for a specific PID, and updating the CWD of a running process.\n\nThe `ProcessManager` should be implemented using the `subprocess` module, which provides an interface for launching and controlling processes from Python. The `ProcessManager` should be able to start new processes by calling the `subprocess.Popen()` function with the desired command string and return the PID of the newly created process. The `ProcessManager` should also provide an interface for checking if a specific PID is still running using the `os.kill()` function.\n\nThe `ProcessManager` class should also include a class method called `update_cwd()` that can be used to update the current working directory for each running process. The class method should take a PID as an argument and update the directory for that specific process using the `os.chdir()` function.\n\nFinally, the `ProcessManager` class should provide methods for retrieving the current working directory for a specific PID, such as the `cwd()` method. The `cwd()` method should take a PID as an argument and return the current working directory for that specific process using the `os.getcwd()` function.\n\nThis class definition provides a simple interface for managing multiple processes and their current working directories. The class methods can be used to start new processes, check if a specific process is still running, and update the current working directory for a specific process. The class also provides a class method to update the current working directory for all running processes."}, {"instruction": "Create a Python class that represents a multi-threaded program that executes a sequence of commands. The class should be able to execute commands in a single-threaded program by:\n\n- Reading commands from a file.\n- Executing each command using a POSIX system call.\n- Logging the output of each command to a separate file.\n- Reporting any errors that occur during the execution of the commands.\n- Allowing the user to run the program either in the foreground or in the background (with the option to check the status of the program).\n\nThe class should have the following methods:\n\n- `execute(file_path, background, environment)`: Executes the program by reading commands from the specified file and executing each command using a POSIX system call. The `background` parameter indicates whether the execution should be run in the foreground (set to `False` by default) or in the background. The `environment` parameter is an optional dictionary of environment variables to be set prior to executing the commands.\n- `status()`: Returns the status of the program, such as whether it is currently running or has finished executing.\n- `output(file_path)`: Returns the output of a specific command, as specified by the `file_path` argument.\n- `errors(file_path)`: Returns the error output of a specific command, as specified by the `file_path` argument."}, {"instruction": "Develop a Python class that represents a single-threaded program execution. The execution is represented by a sequence of tasks, where each task is formally represented by a `Task` class with `run_time` and `wait_time` attributes. The `run_time` and `wait_time` attributes represent the execution time and the time to wait before the next task, respectively. The class should expose the following methods:\n\n- `initialize_from_input`, which reads the input from a file passed as an argument. The input file contains the list of tasks, given by their `run_time` and `wait_time` values separated by a space. The input file's last line contains the time to wait after the last task is completed.\n- `add_task`, which takes a `Task` object as an argument and adds it to the list of tasks.\n- `execute_tasks`, which executes the tasks in the order they are added. After each execution, the execution time should be updated by the `run_time` value of the current task. If the execution time of a task is greater than or equal to the task's `wait_time`, the task should be removed from the execution queue.\n\nThe program should print the total execution time of the execution queue."}, {"instruction": "Design a Python function to execute a shell command on a given file path. The function should return the command's standard output and standard error as two strings. If there is any error during the execution, the function should raise an exception. Make sure to use proper error handling and logging to capture the error messages."}, {"instruction": "Create a Python class `FileWatcher` that monitors a file for changes in modification time. The class should have a constructor that accepts a file path as an argument. The class should have a method called `get_last_modified` that returns the last modified time as a `datetime.datetime` object. The class should also have a method called `get_last_modified_time` that returns the last modified time in the form of a `str` object. In addition, the class should have a method called `run_once` that triggers an action when the file is modified.\n\nThe class should utilize the `inotify` system call for monitoring changes in a file. The `inotify` call should be implemented using the `pyinotify` module. If the file is modified, the `run_once` method should be triggered to run the action."}, {"instruction": "Design a Python class called `ProcessManager`, which is responsible for managing processes in a single-threaded program. The `ProcessManager` class should provide the following methods:\n\n- `start(path)`: starts a new process, according to the given `path`.\n- `kill(pid)`: terminates the process with the given `pid`.\n- `list()`: returns a list of running processes, represented as a list of process IDs (PIDs) and their corresponding paths.\n\nThe `ProcessManager` class should support the following constraints:\n\n- Only one process can be started at a time. If a process is already running, the `start` method should throw an exception.\n- Only one process can be killed at a time. If no process is running, the `kill` method should throw an exception.\n- The `list` method should return the list of running processes in the same order as they are started.\n- The `kill` method should work even if the target PID is not in the list of running processes.\n\nThe `ProcessManager` class should be implemented using Python's `threading` module and the `os` module's `fork` and `exec` functions."}, {"instruction": "Create a Python class called `FileCache` that manages a cache of file contents. The class should support the following operations:\n\n- `FileCache(file_path)`: Creates an instance of the cache for the given file path.\n- `read(line_number)`: Returns the contents of the file at the given line number. If the line number is out of bounds, return an empty string.\n- `write(line_content, line_number)`: Writes the given line content to the file at the given line number. If the line number is out of bounds, append the content to the end of the file.\n\nThe class should also provide clear error handling and logging to manage exceptions that might occur during the execution of the operations."}, {"instruction": "Develop a Python program that implements a file system interface capable of creating and deleting files and directories. The program should support the following operations:\n\n- `make_file(name)`: creates a new file with the given name and returns the corresponding file descriptor.\n- `make_dir(name)`: creates a new directory with the given name and returns the corresponding directory descriptor.\n- `remove_file(fd)`: deletes the file described by the file descriptor `fd`.\n- `remove_dir(fd)`: deletes the directory described by the directory descriptor `fd`.\n- `change_dir(fd, new_path)`: changes the path of the directory described by the directory descriptor `fd` to `new_path`.\n\nThe `fd` value represents a virtual file descriptor and is used to uniquely identify files and directories. It is an integer number that is generated by the file system implementation and passed to the various operations. The `new_path` argument is a string that represents the new path to be used for the directory.\n\nThe program should also provide a `main` function that creates a file system instance, executes the operations specified in a file, and prints the final state of the file system after the execution. The operations and the final state of the file system should be defined in a separate file.\n\nThe program should support the following command-line arguments:\n\n- `-f` to specify the input file that contains the operations to be executed.\n- `-v` to enable verbose mode, which prints the state of the file system after each operation.\n\nThe program should use a separate module for the file system implementation. This module should be imported in the main module and used to execute the program's operations."}, {"instruction": "Write a Python class to implement a simple shell in a single-threaded program. The class should provide the following interfaces:\n\n- `execute_command(cmd)`: Execute the given command in a subprocess. Return the subprocess' return code and the output message.\n- `execute_file(path)`: Execute the given command file in a subprocess. Return the subprocess' return code and the output message.\n- `print_prompt()`: Print the shell prompt.\n- `run()`: Run the shell until the user enters `exit` or `quit`.\n\nThe shell should start a new subprocess for each command execution and read output messages from the subprocess' `stdout` and `stderr` streams."}, {"instruction": "Extend the design of the `Parser` class from Example 10 to support multi-threaded execution by using multiple `Parser` instances. Each `Parser` instance should accept an input file path and a `start_line` argument that specifies the line number to start parsing from. The `parse_file` function should run as a daemon thread and should spawn a `Parser` instance for each file to be parsed. Each `Parser` instance should read one file line at a time, perform necessary processing and validation on the data, and then add parsed data to a global dictionary.\n\nTo ensure the program is able to handle multiple simultaneous file parsing requests, the `parse_file` function should use the `multiprocessing` library to create a `Process` object for each parsed file. This process should run in a separate thread and handle parsing and processing of the file line by line.\n\nTo ensure the program can correctly handle errors from the file parsing process and validation, the `parse_file` function should use the `multiprocessing` library to handle errors from the `Parser` instances created by the `Process` objects. This error handling should be implemented via a `multiprocessing.Queue` object that serves as a communication channel between the `parse_file` function and the `Parser` instances.\n\nTo ensure the program is able to gracefully handle the termination of the `parse_file` function, the `parse_file` function should use the `multiprocessing` library to handle the termination of the `Process` objects that are created by the `Parser` instances. This termination handling should be implemented via a `multiprocessing.Event` object that serves as a communication channel between the `parse_file` function and the `Process` objects.\n\nTo ensure the program is able to gracefully handle the termination of the `Parse` instances, the `Parser` class should implement a `on_terminate` callback function that is invoked when the `Process` that created the `Parser` terminates. This callback function should be used to gracefully handle the termination of the `Parse` instance and allow the `parse_file` function to resume execution.\n\nThe `parse_file` function should use the `multiprocessing` library to create a `Process` object for each file to be parsed. This process should run in a separate thread and handle parsing and processing of the file line by line.\n\nThe `parse_file` function should use the `multiprocessing` library to handle errors from the `Parser` instances created by the `Process` objects. This error handling should be implemented via a `multiprocessing.Queue` object that serves as a communication channel between the `parse_file` function and the `Process` objects.\n\nThe `parse_file` function should use the `multiprocessing` library to handle the termination of the `Process` objects that are created by the `Parser` instances. This termination handling should be implemented via a `multiprocessing.Event` object that serves as a communication channel between the `parse_file` function and the `Process` objects.\n\nThe `parse_file` function should use the `multiprocessing` library to handle the termination of the `Parser` instances. This termination handling should be implemented via a `on_terminate` callback function that is invoked when the `Process` that created the `Parser` terminates. This callback function should be used to gracefully handle the termination of the `Parse` instance and allow the `parse_file` function to resume execution."}, {"instruction": "Design a Python class to control execution of a simple program, which reads input from a file and writes to another file. The class should provide a `run` method that starts the program execution and returns when the program finishes. The class should also provide a `wait` method that waits for the program to finish and returns once the program is finished. The program should be defined in a separate file that can be specified by the user.\n\nThe class should handle errors and exceptions that might occur during execution or in waiting. It should provide mechanisms for graceful shutdown in case of an error or interruption. It should also provide a way to access the program's exit status (e.g., success or failure)."}, {"instruction": "Create a `Screen` class that models a video screen. The screen should be initialized with a width and height specified in pixels. Each screen object should have a `clear` method that clears the screen (clears the entire screen with a blank `None` character). The screen should also have a `set_pixel` method that accepts a tuple of an `(x, y)` coordinate and a `char` character, and sets the character at the specified position. Finally, the screen object should have a `write` method that takes a text file path for reading and a `char` character to print at the current position of the screen. The screen should be able to print the whole content of the text file to the screen as long as the file is less than 255 characters long."}, {"instruction": "Create a Python class that implements a single-threaded program execution engine. The execution engine takes a list of commands stored in a text file and executes them in the order provided. The class should inherit from the built-in `Thread` class and implement the `run` method to execute the commands. The `run` method should load the commands from the text file using the `open` and `readlines` functions, and execute each command in the order provided. Any output generated by the command execution should be captured and returned to the caller.\n\nThe class should define:\n- A `run` method that executes the commands from the text file.\n- A `load_commands` method that loads the commands from the text file.\n- A `command_output` property that returns the output generated by the command execution.\n\nThis class can be used to load a list of commands, execute them, and retrieve the output.\n\n**Note**: The class inherits from `Thread` and implements the `run` method to execute the commands. The `run` method should load the commands from the text file, and execute each command in the order provided. The `command_output` property should return the output generated by the command execution.\n\n**Note**: This implementation is not specific to any particular programming language. You can modify it to work with any programming language."}, {"instruction": "Develop a Python program that reads and parses a text file containing a list of texts, each of which represents the content of a single text file. The program should parse each text and generate an appropriate summary of its contents.\n\nThe summary should include the following information:\n\n- Number of sentences\n- Number of words\n- Number of unique words\n- Number of characters\n\nThe generated summary should be printed to the terminal."}, {"instruction": "Develop a Python class that can be instantiated with a file path to read from. The class should have two methods:\n\n- `read_first_line`: A method that returns the first line from the file.\n- `read_last_line`: A method that returns the last line from the file.\n\nEach method should read and return the line from the file in a thread-safe manner, handling error conditions such as file not found and other exceptions."}, {"instruction": "Design a Python class that represents a simple process scheduler that runs multiple processes in parallel. The scheduler should include a method `run` that executes all processes up to the completion of the longest interval. The method should raise an exception if there are no processes to be run (i.e., the process list is empty).\n\nThe class should contain the following attributes:\n\n- `process_list`: a list of process objects\n- `scheduler_thread`: a POSIX thread that runs the scheduler loop\n\nThe class should include the following methods:\n\n- `add_process`: adds a new process to the process list\n- `run`: runs the scheduler loop and executes all processes up to the completion of the longest interval\n\nNote that the scheduler loop should be implemented as a thread in the POSIX system.\n\nThe Scheduler class should implement the run method as a separate thread, which is started by calling the run method. The run method executes all processes in a loop.\n- Each iteration of the loop should wait until the longest interval ends. After the interval ends, the scheduler should update the current time and check whether any process has started. If a process has started, it is added to the ready queue.\n- The scheduler should then wait until the longest interval ends, and update the current time again.\n\nIf the ready queue is not empty, the scheduler should execute the process with the longest interval by calling the run method of the process. After the process finishes, the scheduler should remove the process from the ready queue.\n\nIf the ready queue is empty and the current time is the same as the end time of the longest interval, the scheduler should raise an exception that no processes are ready to run.\n\nThe Scheduler class should also include the following attributes:\n\n- `process_list`: a list of Process objects\n- `scheduler_thread`: a POSIX thread that runs the scheduler loop\n\nThe Scheduler class should also include the following methods:\n\n- `run`: runs the scheduler loop and executes all processes up to the completion of the longest interval\n\nNote that the scheduler loop should be implemented as a thread in the POSIX system.\n\nThe Scheduler class should implement the `run` method as a separate thread, which is started by calling the `run` method. The `run` method executes all processes in a loop.\n- Each iteration of the loop should wait until the longest interval ends. After the interval ends, the scheduler should update the current time and check whether any process has started. If a process has started, it is added to the ready queue.\n- The scheduler should then wait until the longest interval ends, and update the current time again.\n\nIf the ready queue is not empty, the scheduler should execute the process with the longest interval by calling the `run` method of the process. After the process finishes, the scheduler should remove the process from the ready queue.\n\nIf the ready queue is empty and the current time is the same as the end time of the longest interval, the scheduler should raise an exception that no processes are ready to run."}, {"instruction": "Design a Python class called `FileProcessor` that manages the execution of a single file processing operation. Each instance of the class is created with an absolute file path as an argument. The class should support the following operations:\n- `copy`: copies the file at the specified path to the current working directory, using the same file name as the original file.\n- `move`: moves the file at the specified path to the current working directory, using the same file name as the original file.\n- `delete`: deletes the file at the specified path.\n\nThe class should be able to handle invalid file paths, execution errors, and file operations that are not supported on the system (e.g., attempting to copy a file to a non-existent directory). The class should also support logging of any exceptions that occur during the file operations."}, {"instruction": "Develop a Python class that represents a simple bank account with a given balance. This class should provide the following functionality:\n\n- `withdraw`, which takes an integer as an argument and decreases the balance by the specified amount. If the amount is greater than the current balance, the method should print an error message \"Insufficient funds\" and do nothing.\n- `deposit`, which takes an integer as an argument and increases the balance by the specified amount.\n- `balance`, which prints the current balance of the account.\n- `init`, which creates a new account with the specified starting balance.\n\nThe class should also include a `lock` method that prevents any changes to the balance. This method should return an object that implements the `__enter__` and `__exit__` protocol. If the `lock` method is called, the balance should be frozen and the `__enter__` method should return the frozen balance. When the `__exit__` method is called, the frozen balance should be discarded and the account should be unlocked.\n\nThe class should include a `check_balance` method that checks if the account is frozen and returns a boolean value. If the account is frozen, the method should print a warning message \"Account frozen\" and return `False`, otherwise it should return `True`."}, {"instruction": "Write a Python class called `ProcessQueue` that manages multiple threads of execution. The class should provide thread-safe methods for queueing and dequeueing operations, and should manage the execution order of the threads. Implement the `queue` and `dequeue` methods using `lock` objects to ensure thread safety.\n\nAdditionally, the `ProcessQueue` class should be able to handle various error conditions, such as exceptions raised by the threads during execution. Provide appropriate error handling mechanisms that notify the user when an error occurs."}, {"instruction": "Create a Python program that simulates a single-threaded operating system. The program should read a configuration file containing an instruction set as a global variable. Each line in the file represents an instruction, with the first column being an instruction name and the remaining columns being the parameters to the instruction. The instruction set should contain the following instructions:\n\n- `fork`: Forks the current process, creating a new child process.\n- `exec`: Executes the given program with the given arguments, replacing the current process with the new program.\n- `wait`: Wait for the termination of the specified child process.\n- `exit`: Terminate the current process, and cause the parent process to exit as well.\n\nThe program should parse the instruction set into a tree-like data structure. Each node in the tree represents a process and the edges between processes represent the parent-child relationship. The program should also maintain a linked list of child processes and their corresponding parent processes.\n\nDuring execution, the program should follow the given instructions in the tree by creating and executing processes as needed. Each process should be run in its own thread, and the execution of each thread should be synchronized with the execution of other threads.\n\nThe program should handle errors appropriately and provide clear output when an error occurs. For example, the program should report an error when an invalid instruction name or argument is detected in the instruction set.\n\nThis task is designed to challenge and enhance your ability to think programmatically and implement execution logic in Python. By utilizing the single-threaded nature of the program and the built-in threading module, you can create an efficient and robust simulation of an operating system."}, {"instruction": "Develop an instantiation-based Python class that models a simple thread pool. The thread pool should support the following methods:\n\n- `enqueue(task)`: Enqueues a `task` in the thread pool queue.\n- `shutdown()`: Shuts down the thread pool by terminating all its threads, if execution has not yet started.\n- `start_execution()`: Starts the execution of the thread pool's tasks.\n- `wait_for_completion()`: Blocks until all tasks in the thread pool queue have been executed.\n\nThe thread pool's execution should be handled by a thread pool thread group that executes tasks in sequence. Each thread in the group should acquire a task from the pool's queue and execute it until it is complete. If a task raises an exception, the thread pool's execution should continue with the next task, even if an exception occurs.\n\nThe thread pool should execute tasks in a single-threaded fashion (i.e., tasks should not be executed parallel).\n\nThe thread pool should handle system calls in a best effort manner by catching and ignoring any exceptions that might occur.\n\nThe thread pool should also handle file system operations in a best effort manner by catching and ignoring any exceptions that might occur."}, {"instruction": "Write a Python class that simulates a concurrent web crawler that scrapes URLs from a starting page and retrieves the content of the listed pages. The crawler should recursively traverse the pages in a breadth-first order.\n\nEach page should be uniquely identified by its URL. The crawler should avoid revisiting a page if it has already been scraped. The crawler should also avoid retrieving the same page content multiple times.\n\nThe crawler should be designed to be run in a single-threaded environment. The crawler should handle unexpected exceptions gracefully and report the encountered issues.\n\nThe class should have the following methods:\n\n- `crawl(starting_url)`: Starting from a given starting URL, the crawler should recursively follow links on the page and extract the URLs from the linked pages that are not visited or previously scraped. The crawler should then proceeds to recursively crawl the next pages.\n- `scrape()`: Scraping a page should retrieve the content of the page, including any embedded URLs and store the retrieved content in a data structure.\n- `crawl_all()`: The crawler should be implemented as a high-level method that calls the `crawl` method on each stored URL.\n\nThe class should also have the following attributes:\n\n- `visited`: A set containing the URLs that have already been visited by the crawler.\n- `scraped`: A set containing the URLs that have already been scraped by the crawler.\n- `url_queue`: A queue containing the URLs to be visited by the crawler.\n- `pages`: A dictionary mapping the URLs to pages.\n\nThe class should have the following methods:\n\n- `crawl_all()`: The crawler should be implemented as a high-level method that calls the `crawl` method on each stored URL.\n- `crawl(starting_url)`: Starting from a given starting URL, the crawler should recursively follow links on the page and extract the URLs from the linked pages that are not visited or previously scraped. The crawler should then proceeds to recursively crawl the next pages.\n- `scrape()`: Scraping a page should retrieve the content of the page, including any embedded URLs and store the retrieved content in a data structure."}, {"instruction": "Create a Python class called `Server` that represents a web server that serves requests from multiple clients. The `Server` class should maintain a list of `Client` objects that represent the connected clients. It should also have a `run` method that runs the server program until terminated by an external action.\n\nThe `Server` class should be designed to be highly scalable, reliable, and efficient. Here are the specific requirements for `Server`:\n\n- The `Server` class should maintain a list of `Client` objects that represent the connected clients. It should provide methods for adding and removing clients from the list.\n- The `Server` class should have a `run` method that runs the server program until terminated by an external action. This method should accept an optional `max_clients` argument that specifies the maximum number of clients that can be connected at the same time. If `max_clients` is not specified, the default value should be 10.\n- The `Server` class should be designed to handle multiple clients simultaneously by using multithreading or multiprocessing.\n- The `Server` class should manage the concurrent processing of client requests by assigning each client to an available thread or process.\n- The `Server` class should handle any exceptions that might occur during the execution of the server program, such as memory allocation failures, input/output errors, and thread or process deadlocks.\n- The `Server` class should provide an appropriate error handling mechanism for any exceptions that might occur during the execution of the server program.\n\nThe `Server` class should be designed to be highly scalable, reliable, and efficient. Here are the specific requirements for `Client`:\n\n- The `Client` class should maintain a socket object that represents the connection to the client. It should provide methods for sending and receiving messages from the client.\n- The `Client` class should have a `run` method that runs the client program until the connection is closed. This method should accept an optional `timeout` argument that specifies the maximum amount of time (in seconds) the client should wait for the server to respond before terminating the connection. If `timeout` is not specified, the default value should be 10 seconds.\n- The `Client` class should handle any exceptions that might occur during the execution of the client program, such as timeouts and connection failures.\n- The `Client` class should provide an appropriate error handling mechanism for any exceptions that might occur during the execution of the client program.\n\nThe `Server` class and `Client` class should be designed to be flexible and adaptable to different types of clients, allowing them to communicate with the server in a uniform and efficient manner."}, {"instruction": "Write a Python class that implements a simple functionality of a file system. The class should allow for the creation of new files, directories, and sub-directories, as well as the deletion of existing files and directories. The class also should allow the user to perform basic operations on files and directories, such as listing, moving, copying, and renaming."}, {"instruction": "Create a Python class that simulates a simple web server that listens for client requests and responds with the current date and time. When a client requests the server, the server should respond with the date and time of the client's request.\n\nThe class implement the following methods:\n\n- `__init__(self)`: This method is the constructor for the class that initializes the server. It should accept two arguments: `host` and `port`, which are the hostname and port number of the server. It should also initialize the server socket and listen for client requests.\n- `run(self)`: This method is the main loop of the server. It should accept no arguments and run in an infinite loop. It should accept client connections and process them as they arrive.\n- `handle_request(self, client_socket)`: This method handles a single client request by reading from the client socket and responding with the current date and time.\n\nThe class should be able to handle multiple client requests concurrently by creating a new thread for each client request. Depending on the operating system and the number of clients, it may be necessary to use a different concurrency model for the class."}, {"instruction": "Complete the implementation of the following Python class `WordCounter`:\n\n```python\nclass WordCounter:\n    def __init__(self, file_path):\n        # Initialize the counter here\n        pass\n\n    def __enter__(self):\n        # Open the file here\n        pass\n\n    def __exit__(self, *args):\n        # Close the file here\n        pass\n\n    def count(self, word):\n        # Return the count of the word\n        pass\n```\n\nThe `WordCounter` class should be implemented using a context manager or a `with` block. It should have a constructor that takes a file path as a string argument and initializes the word counter with the number of words in the file. The context manager should invoke `__enter__` and open the file for reading, and should invoke `__exit__` and close the file when exiting the block.\n\nThe `count` method should accept a string argument and return the number of occurrences of that word in the file. The `count` method should use the built-in `open` function to access the file, search for the word and count the number of occurrences.\n\nThe `file_path` variable represents the path to the file on the system, relative or absolute. The `count` method should handle exceptions to ensure proper error handling and file ownership.\n\nThe `WordCounter` class should be implemented so that it can be used as a context manager or a `with` block. Here's an example of using the `WordCounter` class in a `with` block:\n\n```python\nwith WordCounter('my_file.txt') as word_counter:\n    word_count = word_counter.count('word')\n```\n\nHere, the `with` block triggers the `__enter__` method, which opens the file and initializes the word counter with the number of words. Then, the `word_counter.count('word')` method is called, which searches the file for the word 'word' and returns the number of occurrences. Afterwards, the `__exit__` method is invoked and the file is closed.\n\nIn summary, this implementation of the `WordCounter` class provides a convenient way to count the occurrences of a specific word in a file without having to worry about file management or error handling."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: bits and bytes manipulation, bitwise operations, memory copying, conditional error handling, file descriptor instantiation, terminal attribute modification\n\n### Task", "fingerprint": null, "content": {"code": "int sdconf(sd_t *sd)\n{\n\tint err;\n\t\n\t//get the current options\n\terr = tcgetattr(sd->fd, &sd->saved);\n\tif(err) return err;\n\t\n\tmemcpy(&sd->saved, &sd->settings, sizeof(struct termios));\n\t\n\tsd->settings.c_cflag |= (CLOCAL | CREAD);\n\tsd->settings.c_cflag |= B115200;\n\tsd->settings.c_cflag |= CS8;\n\tsd->settings.c_cflag |= PARENB;\n\t\n\t//input flags\n\t//termios_p.c_iflag = IGNPAR | IGNBRK;\n\t\n\t//local options\n\tsd->settings.c_lflag     &= ~(ICANON | ECHO | ECHOE | ISIG);\t//sets up raw input, NON-canonical\n\t\n\t//output options\n\tsd->settings.c_oflag     &= ~OPOST;\t\t//disable post-processing, to use raw output\n\t\n\tsd->settings.c_cc[VMIN]  = 1;\n\tsd->settings.c_cc[VTIME] = 0;\n\t\n\t//set the options\n\terr = tcsetattr(sd->fd, TCSANOW, &sd->settings);\n\tif(err) return err;\n\t\n\t//flush the buffers\n\ttcflush(sd->fd, TCOFLUSH);\n\ttcflush(sd->fd, TCIFLUSH);\n\t\n\treturn 0;\n}", "docstring": "/*\n\tReading data from a port is a little trickier.\n\tWhen you operate the port in raw data mode, each read(2) system call will return\n\tthe number of characters that are actually available in the serial input buffers.\n\tIf no characters are available, the call will block (wait) until characters come in,\n\tan interval timer expires, or an error occurs.\n\tThe read function can be made to return immediately by doing the following:\n\n\tfcntl(fd, F_SETFL, FNDELAY);\n\n\tThe FNDELAY option causes the read function to return 0 if no characters are available on the port.\n\tTo restore normal (blocking) behavior, call fcntl() without the FNDELAY option:\n\n    fcntl(fd, F_SETFL, 0);\n\n\tThis is also used after opening a serial port with the O_NDELAY option.\n*/", "function_name": "sdopen"}, "id": 260, "seed": "int sdconf(sd_t *sd)\n{\n\tint err;\n\t\n\t//get the current options\n\terr = tcgetattr(sd->fd, &sd->saved);\n\tif(err) return err;\n\t\n\tmemcpy(&sd->saved, &sd->settings, sizeof(struct termios));\n\t\n\tsd->settings.c_cflag |= (CLOCAL | CREAD);\n\tsd->settings.c_cflag |= B115200;\n\tsd->settings.c_cflag |= CS8;\n\tsd->settings.c_cflag |= PARENB;\n\t\n\t//input flags\n\t//termios_p.c_iflag = IGNPAR | IGNBRK;\n\t\n\t//local options\n\tsd->settings.c_lflag     &= ~(ICANON | ECHO | ECHOE | ISIG);\t//sets up raw input, NON-canonical\n\t\n\t//output options\n\tsd->settings.c_oflag     &= ~OPOST;\t\t//disable post-processing, to use raw output\n\t\n\tsd->settings.c_cc[VMIN]  = 1;\n\tsd->settings.c_cc[VTIME] = 0;\n\t\n\t//set the options\n\terr = tcsetattr(sd->fd, TCSANOW, &sd->settings);\n\tif(err) return err;\n\t\n\t//flush the buffers\n\ttcflush(sd->fd, TCOFLUSH);\n\ttcflush(sd->fd, TCIFLUSH);\n\t\n\treturn 0;\n}", "__index_level_0__": 72, "concepts": ["bits and bytes manipulation", "bitwise operations", "memory copying", "conditional error handling", "file descriptor instantiation", "terminal attribute modification"], "parsing_result": [{"instruction": "Implement a Python function that takes a `picture_path` as argument and returns a `new_picture_path` that stores the RGB triplets of each pixel of the original picture in a new file. The `new_picture_path` should have a suffix of `.rgb` to differentiate from the original file. The `new_picture_path` should be in the same directory as the original file.\n\nTo coordinate the process of file manipulation, you should use the following steps:\n\n1. Use a Python function to read the original picture file, in binary mode.\n2. Use `os.open` and `os.close` to open the original picture file and obtain its file descriptor.\n3. Create a new file with the specified `new_picture_path`.\n4. Use `os.open` and `os.close` to open the new picture file and obtain its file descriptor.\n5. Use `os.dup2` to duplicate the file descriptors of the two files.\n6. Use `os.write` to write the file content into the new file.\n7. Use `os.dup2` to revert to the original file descriptor.\n\nNote that the new file should be opened in binary mode."}, {"instruction": "Write a Python function that takes a file path as an input and copies its content to a new file. The copied file should have the same name as the original but with an additional 'copy' suffix. You should handle error conditions such as invalid file paths, invalid file extensions, and file permission errors."}, {"instruction": "Write a Python function that simulates the output of the `ls` command in Linux. The function should accept four arguments: `directory`, a string that specifies the directory to be listed, `recursive`, a boolean that indicates whether to recursively list subdirectories, `files_only`, a boolean that indicates whether to list files only, and `long_format`, a boolean that indicates whether to display a long format listing. The function should return a list of file paths (relative or absolute, depending on the value of `files_only`). The function should handle errors gracefully and output a useful message when appropriate.\n\nFor example, if the input is `ls.py` with the following arguments:\n```\nls.py /usr/local/bin False False False\n```\nthe output should be:\n```\n/usr/local/bin/ls\n```"}, {"instruction": "Write a Python function that simulates the sequence of terminal commands `cat` and `head`. The function takes two arguments: `input_file`, the input file name whose content is to be displayed, and `output_file`, the output file name in which the first 10 lines of the input file are to be stored. The function should handle any errors that might occur during the execution of the commands. The function should be robust to whether the input and output files already exist, and should implement error handling to prevent the execution of these commands if any of the files does not exist."}, {"instruction": "In this challenge, you are going to implement a Python function `encode_text` that takes three arguments: `source_file`, `destination_file`, and `window_size`. The function should read the text content of `source_file`, encrypt each line using the XOR operation with a unique 16-bit (2-byte) key, and write the encrypted lines to `destination_file`. The XOR operation should be applied to each byte of each line individually. The key should be used to encrypt the next `window_size` bytes in each line, and the key stream should reset to the original key after the last line is processed.\n\nIf the number of bytes in the source file is not divisible by `window_size`, the function should make sure that the last line is padded with random bytes to make it divisible by `window_size`. The padding should be a random byte generated from a uniform distribution.\n\nAfter all lines are encrypted, the function should close the file descriptors of `source_file` and `destination_file`, and then update the terminal attributes.\n\nYou should handle exceptions that may occur during the process of reading and writing files, and ensure that the file descriptors are closed once the execution of the function completes."}, {"instruction": "Create a Python function that takes a string representing the name of a file and prints the first line of the file. You may assume that the file exists and has at least one line. You are allowed to use the `sys` module and its `stdin` and `stdout` file descriptors. The function should also be robust to invalid file paths and handle any exceptions that might occur during the execution."}, {"instruction": "Write a Python function that detects whether the provided string is composed of only letters and numbers. If it does not meet the criteria, the function should throw an `Exception` of the appropriate type. The function should return the `True` if the given string matches the criteria, and `False` otherwise."}, {"instruction": "Write a Python function `get_terminal_dimensions` that takes no arguments and returns the current dimensions of the terminal/window. The function should return a tuple of (width, height) in pixels."}, {"instruction": "Implement a Python function to read and write data to a file in binary mode. The function should take two arguments: `operation`, which can take a value of either 'Read' or 'Write' to determine the operation, and `buffer`, which is a byte array to hold the data to be written. The function should use a context manager to open a file descriptor with the appropriate flags and read/write data to the file. The function should also handle errors and exceptions appropriately."}, {"instruction": "Write a Python function `terminal_image` that takes a single argument `image` and prints the image on the terminal. The image can be a list of strings or an `array.array` of `array.array` of `int` containing integers in the range [0, 255]. Each string or `array.array` in the list should contain the same number of characters. The function should print the given image on the terminal, with each element of the image represented by a single character. The function should support both images in color and grayscale.\n\nFor example, the following image represented by a `list` of `strings` should be printed on the terminal:\n```python\nimage = ['000000',\n         '000000',\n         '000000',\n         '111111',\n         '111111',\n         '111111',\n         '111111',\n         '111111',\n         '111111',\n         '000000',\n         '000000',\n         '000000']\n```\n\nThe following image represented by a single `array.array` of `array.array` of `int` should be printed on the terminal:\n```python\nimage = array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n               [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n               [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n               [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n               [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n               [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n```"}, {"instruction": "Develop a Python function that takes a file descriptor as an argument, reads the contents of that file descriptor, and returns a copy of the same file descriptor with the text of the file reversed. For example, if the file descriptor is \"Hello World\", the function should return \"dlroW olleH\". You should follow the following rules:\n- The file descriptor should be read only once.\n- You can use the `os.read()` function to read data from the file descriptor.\n- You can use `os.write()` to write data to the file descriptor.\n- The text of the file descriptor can be reversed in-place, without reversing the original file.\n- You can modify the terminal attributes of the standard output to show the reversed text.\n- You are not allowed to use the `reversed()` function to reverse the file descriptor."}, {"instruction": "Write a Python function that creates a new process with a new file descriptor for the standard input (stdin) and output (stdout) of the parent process. The function should redirect standard input and output to a new file descriptor that is open for reading and writing. If the requested redirection is not supported, the function should return `False`."}, {"instruction": "Write a Python function that takes two arguments: `src_path` and `dest_path`. The `src_path` argument corresponds to the path of a source file that is read-only and the `dest_path` argument corresponds to the path of a destination file that is writeable. The function should copy the content of `src_path` to `dest_path` and implement a progress update based on the number of bytes read. If an exception occurs during the copying process, the function should handle it accordingly, output relevant error messages, and gracefully exit.\n\nFor example, given `src_path` as `/etc/passwd` and `dest_path` as `/tmp/passwd`, the function should copy the content from `/etc/passwd` to `/tmp/passwd`. The progress update should be displayed in the terminal."}, {"instruction": "Develop a Python program that prints out a table of available terminal colors. The program should be able to change the foreground and background color of the terminal. The program should also identify the terminal's default colors."}, {"instruction": "Create a Python function `print_grid_layout` that accepts two arguments `rows` and `columns` that represent the number of rows and columns in the grid layout, respectively. The function should print the grid layout to the screen in the following format:\n\n```\n+-----+-----+-----+\n|     |     |     |\n|     |     |     |\n+-----+-----+-----+\n|     |     |     |\n|     |     |     |\n+-----+-----+-----+\n```\n\nEach cell in the grid is represented by a 4-digit integer in decimal notation, where the first two digits are the row and the last two digits are the column. The grid should be sized such that every cell is at least 4 characters wide to be properly formatted. The function should handle arbitrarily large values for `rows` and `columns`."}, {"instruction": "Write a Python function that takes two arguments: `source_path` and `target_path`. The function should copy the content of `source_path` to `target_path` by opening both files as file descriptors, performing bitwise copying, and closing both files."}, {"instruction": "Create a Python function that receives a file descriptor and an integer number as input, and modifies the file descriptor to display the file content in the terminal. The user should be able to switch the current font color by typing '1' for red, '2' for green, and '3' for blue."}, {"instruction": "Write a Python function that handles mouse events on a terminal window. Your function should open a terminal window and listen for mouse clicks. When a click occurs, your function should print out the x and y coordinates of the click, the left and right mouse button status, and the key pressed on the keyboard. If an error occurs during the execution of the function, your function should print out the error and the stack trace. The window should be closed after a click occurs.\n\nFor example, the user should be able to click on the terminal window to see the mouse events being displayed to the user."}, {"instruction": "Write a Python function named `hex_copy` that takes a `source_file` and a `destination_file` as arguments. The function should copy the bytes from the source file and write them to the destination file. For each byte, determine if it is a valid hex code, and write it to the destination file in case it is valid."}, {"instruction": "Write a Python function called `copy_screen_to_file` that takes a source file descriptor and copies the entire contents of the screen to the specified file. The function should be able to handle both Windows and Unix-based operating systems. Make sure the contents of the file are properly encoded and the terminal state is restored to its original state after the copy is completed."}, {"instruction": "Develop a Python function that prints a table of terminal attributes and their corresponding numeric codes. The function should take two arguments: `start` and `end`, to limit the resolution of the table to a specific range of attribute codes. On each row, the function should print out the attribute name, the attribute code, and the corresponding character/color."}, {"instruction": "Implement a Python function `copy_file` that takes two string arguments: `src_path`, the source file's path, and `dst_path`, the destination file's path. The function should copy the contents of `src_path` to `dst_path` while also applying the following three restrictions:\n\n- `src_path` and `dst_path` must be valid file paths that exist prior to calling the function.\n- `src_path` and `dst_path` must be different paths.\n- `dst_path` must not exist before calling the function.\n\nThe function should ensure that the destination file is created correctly and have read/write permissions for the current user. It should also be able to gracefully handle exception situations (such as permission denied) and also handle operating system-specific exceptions."}, {"instruction": "Implement a Python function `create_terminal_alias` that takes in two arguments: a path to a file and a string alias name. The function should create a Linux alias for the file in the user's `HOME` directory, using the specified `alias_name`. The alias should map to the actual `path` when the alias is called from the command line. Directories and files should be handled accordingly. For example, given two arguments `/etc/init.d/apache2` and `apache`, the program should alias `/etc/init.d/apache2` to `~/apache`."}, {"instruction": "Write a Python function that mimics the behavior of `cp` command in UNIX-like systems. The function should take two arguments: the source file path and the destination file path. The function should check for the existence of the source file and copy the contents of the file to the destination path, creating the destination file if it does not exist. If the source file is a directory or a symbolic link, the function should display a message stating that the source is not supported. In case of an error, the function should print an appropriate error message and exit."}, {"instruction": "Write a Python function that takes a string of `n` characters as input, and prints it to the screen using the ASCII table as a reference. This function should alter the terminal's title, color, and cursor position as it prints the string. For example, given the input `'0123456789'` the output should be like this:\n\n```\n$ python3 my_print_function.py 0123456789\n```\n\n<img src=\"./terminal_print_function.gif\" width=\"100%\" alt=\"terminal_print_function\">"}, {"instruction": "Modify the implementation of the `clear_screen` function to clear the terminal output without using any external libraries. This function should modify the terminal output to clear the screen and return to the home position of the cursor. The function should also be able to handle the case when the terminal size is smaller than the buffer size."}, {"instruction": "Write a Python function `display_terminal_resolution` that queries the size of the terminal window using the `curses` module. The function should return a tuple `(width, height)` in pixels."}, {"instruction": "Implement a Python function `sudoku_solver` that takes a 9 \u00d7 9 `bytes` array representing a Sudoku puzzle in its standard input format. You should validate that the input is a valid Sudoku puzzle before attempting to solve it. The function should solve the puzzle and return the solved puzzle using the same format."}, {"instruction": "Create a Python function that approaches the \"Hello World!\" program by printing it out to the screen in an actual operating system. Specifically, the function should utilize the following:\n\n- `os.system()` to print the text to the command line\n- `subprocess.Popen()` to execute the command\n- `curses` to clear the screen\n- `sys.stdout.write()` to write to standard output\n- `sys.stdout.flush()` to flush the buffer\n- `signal` to handle the interrupt signal\n- `time.sleep()` to halt the program"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: conditional, loop, conditional loop, object existence check, object size, object creation\n\n### Task", "fingerprint": null, "content": {"code": "void gridedit_updatezoomviewvalues ( void )\n{\n\t//  accepts gridentityinzoomview\n\tif (  t.gridentityinzoomview>0 ) \n\t{\n\t\tt.zoomviewcameraangle_f=0.0;\n\t\tt.zoomviewcameraheight_f=50.0;\n\t\tt.zoomviewcamerarange_f=75.0;\n\t\tif (  t.entityelement[t.gridentityinzoomview].obj>0 ) \n\t\t{\n\t\t\tif (  ObjectExist(t.entityelement[t.gridentityinzoomview].obj) == 1 ) \n\t\t\t{\n\t\t\t\tt.zoomviewcamerarange_f=ObjectSize(t.entityelement[t.gridentityinzoomview].obj,1)*2.0;\n\t\t\t\tt.zoomviewcameraheight_f=(ObjectSize(t.entityelement[t.gridentityinzoomview].obj,1)/2.0)-100.0;\n\t\t\t\tif (  t.zoomviewcameraheight_f<5  )  t.zoomviewcameraheight_f = 5;\n\t\t\t}\n\t\t}\n\t}\nreturn;\n\n}", "docstring": "//  Only if within map", "function_name": "gridedit_mapediting"}, "id": 269, "seed": "void gridedit_updatezoomviewvalues ( void )\n{\n\t//  accepts gridentityinzoomview\n\tif (  t.gridentityinzoomview>0 ) \n\t{\n\t\tt.zoomviewcameraangle_f=0.0;\n\t\tt.zoomviewcameraheight_f=50.0;\n\t\tt.zoomviewcamerarange_f=75.0;\n\t\tif (  t.entityelement[t.gridentityinzoomview].obj>0 ) \n\t\t{\n\t\t\tif (  ObjectExist(t.entityelement[t.gridentityinzoomview].obj) == 1 ) \n\t\t\t{\n\t\t\t\tt.zoomviewcamerarange_f=ObjectSize(t.entityelement[t.gridentityinzoomview].obj,1)*2.0;\n\t\t\t\tt.zoomviewcameraheight_f=(ObjectSize(t.entityelement[t.gridentityinzoomview].obj,1)/2.0)-100.0;\n\t\t\t\tif (  t.zoomviewcameraheight_f<5  )  t.zoomviewcameraheight_f = 5;\n\t\t\t}\n\t\t}\n\t}\nreturn;\n\n}", "__index_level_0__": 73, "concepts": ["conditional", "loop", "conditional loop", "object existence check", "object size", "object creation"], "parsing_result": [{"instruction": "Implement a Python program to generate a random triangle with a specified number of rows and columns. The triangle number should be constructed by randomly generating positive integers. The program should return a random triangle of size `n x m` where `n <= m`. For example, if `n = 4`, the triangle should have a size of `4 x 4`, and if `n = 5`, the triangle should have a size of `5 x 5`. The triangle should be generated using a randomized algorithm that generates a random integer between `1` and `n` for each cell in the triangle, and `0` in all other cells."}, {"instruction": "Create a Python program that imports a `Person` class from a separate file. The class should be defined with `first_name`, `last_name`, and `age` attributes. The class should have a method called `validate()` that checks if all the required attributes are present and valid. If the class cannot be instantiated, the `validate()` method should raise a `ValueError` with a meaningful message.\n\nThe program should import the Person class from the `data` module and store it in a variable called `PersonClass`. The program should then create an instance of the `Person` class named `person` by passing the required arguments in the constructor. The program should call the `validate()` method on the `person` object and print the result of the method call to the console."}, {"instruction": "Create a Python program that prompts a user for a number that represents the total number of student records and their scores.\n\nThe program should create a simple data structure to store the student records. Each student record should contain a unique student ID, a first name, a last name, and a list of 10 arbitrary scores.\n\nUsing the total number of student records, the program should prompt the user to enter the student records, including a student ID, their first name, and their last name. It should then prompt the user to enter their 10 scores, one at a time.\n\nAfter the program is done reading all the student records and their scores, it should display all the student records, sorted by descending average score."}, {"instruction": "Write a Python program that uses a loop to generate a list of 50 random numbers between 0 and 1000, inclusive. The program should then print the numbers in groups of 10, separated by spaces."}, {"instruction": "Create a Python program that generates a list of all valid arrangements of three letters, `A`, `B`, and `C`, where:\n\n- Each letter can only be used once, and\n- Each letter can be used in any of the following combinations: `ABB`, `ABA`, `BAA`, and `BAB`.\n\nFor example, the output should be:\n\n```python\n['ABB', 'ABA', 'BAA', 'BAB']\n```"}, {"instruction": "Given two instances of Python classes `A` and `B`, implement a function `connect(a, b)` to connect the two classes together. Both classes have a `connect` method that return an instance of the other class."}, {"instruction": "For a given Python program, write a script that automatically identifies and reports the following by traversing the abstract syntax tree (AST) of the program, starting with the root node:\n\n- the number of global variables defined in the program\n- the number of local variables defined in the program\n- the number of local functions defined in the program\n- the number of local classes defined in the program\n- the number of if-else statements in the program\n- the number of for-loops in the program\n- the number of while-loops in the program\n- the number of try-except-else statements in the program\n- the number of try-except-else-finally statements in the program\n- the number of raise statements in the program\n- the number of return statements in the program\n- the total number of variable references in the program\n- the total number of control flow instructions in the program\n- the total number of function calls in the program"}, {"instruction": "Write a Python program to implement the following function:\n\n```python\ndef create_banner(text, width=80):\n    \"\"\"\n    Create a banner using the given text.\n    The banner should be centered within the specified width,\n    and should use the specified number of characters to draw the border\n    on each side of the text.\n    \"\"\"\n```\n\nThe program should work with the following simple assertions.\n\n```python\nassert create_banner(\"Hello World!\", 80) == '''\\\n+===================================================================+\n|                                                                   |\n|                       Hello World!                                |\n|                                                                   |\n+===================================================================+\n'''\nassert create_banner(\"Hello World!\", 5) == '''\\\n+=====+\n|     |\n|     |\n|     |\n|     |\n|     |\n+=====+\n'''\n```"}, {"instruction": "Implement a Python program that asks the user for a list of numbers. Among the numbers, display the smallest, largest, and average."}, {"instruction": "Write a Python program that simulates a game of rock-paper-scissors. The program should randomly generate one of the three choices ('rock', 'paper', or 'scissors') and ask the user to select a choice from the same list. The user is given 5 chances to win. The program should keep track of the number of wins and losses of the user and display them at the end of the game."}, {"instruction": "Write a Python program that filters the elements of a given list of integers `lst` based on the following conditions:\n\n- If the element is even and can be divided by 3, the element is removed.\n- If the element is odd, and exists in the list, the element is removed.\n\nThe program should output a list of filtered elements that contain the remaining elements."}, {"instruction": "Write a Python program that determines whether there is a valid path from top-left to bottom-right in a 2D array. The array is represented by a list of lists, where each sublist corresponds to one row and each element in the sublist corresponds to one cell. The cells have two possible states: empty and filled with an obstacle. The path can only move to the right and down.\n\nFor example, the following 2D array represents a 3x3 grid with three obstacles:\n\n```\n[[1, 0, 0],\n [1, 0, 0],\n [1, 1, 1]]\n```\n\nA valid path from top-left to bottom-right in this array would be:\n\n```\n[1, 0, 0]\n[1, 0, 0]\n[1, 1, 1]\n```\n\nThe following 2D array represents a 3x3 grid with no obstacles:\n\n```\n[[1, 1, 1],\n [1, 1, 1],\n [1, 1, 1]]\n```\n\nA valid path from top-left to bottom-right in this array would be:\n\n```\n[1, 1, 1]\n[1, 1, 1]\n[1, 1, 1]\n```\n\nThe following 2D array represents a 3x3 grid with an invalid path:\n\n```\n[[1, 0, 0],\n [0, 1, 0],\n [1, 1, 1]]\n```\n\nThere is no valid path from top-left to bottom-right in this array.\n\nThe function should return a boolean indicating whether there is a valid path from top-left to bottom-right. The function should utilize a conditional loop to traverse the 2D array and check if a valid path exists."}, {"instruction": "Create a Python program that implements a basic todo list management system. The program should allow the user to add, remove, and display items from the todo list."}, {"instruction": "Write a Python program to concatenate the `n` objects together in a single list."}, {"instruction": "Implement the Python function `count_all_palindromes(str)` that takes a string `str` as an argument and returns the number of palindromes found within the string. A palindrome is a string that reads the same backward or forward. The function should count how many palindromes are found in the given string. The function should satisfy the following assertions:\n\n```python\nassert count_all_palindromes('') == 0\nassert count_all_palindromes('aa') == 1\nassert count_all_palindromes('aaba') == 2\nassert count_all_palindromes('aabaabaa') == 4\nassert count_all_palindromes('Lorem ipsum dolor sit amet.') == 8\nassert count_all_palindromes('hello world') == 0\n```"}, {"instruction": "Create a Python program that prompts the user to enter two string values. If the strings are `equal`, the program outputs the string \"Equal\". If the strings are not `equal`, the program outputs the string \"Not Equal\"."}, {"instruction": "Create a Python program that implements a simple calculator that can perform the following four basic arithmetic operations: addition, subtraction, multiplication, and division. A calculator should be able to handle both integers and floats.\n\nThe program should prompt the user to enter the following input:\n\n- `first_operand` (string, required)\n- `second_operand` (string, required)\n- `operator` (string, required, one of: `+`, `-`, `*`, or `/`)\n\nThe program should then calculate and display the result based on the given input, including error handling for operator input that is not one of the four valid operators or for an invalid number format. The program should then prompt the user to enter `y` or `Y` to repeat the operation or `n` or `N` to exit, depending on the user's input. If the user enters a different input, the program should prompt the user for another input and repeat the process until the user chooses to exit."}, {"instruction": "Create a Python program that prints the smallest positive integer that cannot be expressed as a sum of any integers in a list of positive integers.\n\nYour program should:\n\n- Read the input from the console, which is a list of integers separated by spaces.\n- Ensure the input is valid: all input integers are positive and no duplicate integers are present.\n- If the input is invalid, output an error message `Invalid input, please try again.` to the console and re-run the program.\n- Otherwise, find the smallest positive integer that cannot be expressed as a sum of any integers in the input list, and output it to the console."}, {"instruction": "Implement a Python program that asks the user to input a file path. The program should open the file and read its content into an in-memory string, then print the length of the string.\n\nIf the file path is invalid, the program should print an error message and exit with a non-zero exit code."}, {"instruction": "Write a Python program that checks whether a given object has a specified size or not. The program should accomplish the following tasks:\n\n- Ask the user for a valid object size.\n- Check if the specified object is identical to another object or not.\n- If the objects are identical, prompt the user to provide a new object size.\n- If the objects are not identical, print the size of the new object."}, {"instruction": "Write a Python program that creates an integer number that is the sum of all prime numbers up to a specified maximum. The maximum is a positive integer that is supplied as an argument to the program. The program should print the number."}, {"instruction": "Here is a Python program that creates a linked list of integers from a series of user inputs. After the user inputs all of the integers, the program should output the sum of the integers using a loop. The program should eventually stop asking for user inputs when the user enters the number 0. Each user input should be stored in an object of the `LinkedList` class. The `LinkedList` class should have a method `add_element(value)` that adds a new element to the end of the list.\n\n```python\nclass LinkedList:\n    class Node:\n        def __init__(self, value=None):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add_element(self, value):\n        # add code here\n\ndef main():\n    sum = 0\n    linked_list = LinkedList()\n    while True:\n        value = int(input(\"Please enter an integer or 0 to stop: \"))\n        if value == 0:\n            break\n        # add code here\n    print(f\"The sum of the integers you entered is {sum}.\")\n\nif __name__ == \"__main__\":\n    main()\n```"}, {"instruction": "A Python program should be written to print out all the integers from 1 to 10,000, which are multiples of 7 but not multiples of 10. The program should satisfy the following requirements:\n\n- The program should be implemented using functions, classes, and objects.\n- The program should be easy to read and follow."}, {"instruction": "A `Point` object in a 2D coordinate system is represented by a Python tuple (x, y) of two integers. Write a Python program that reads input from the console, utilizing conditionals to determine which of the following cases is valid:\n\n- Point is on the X-axis with the value of Y = 0\n- Point is on the Y-axis with the value of X = 0\n- Point is on the origin (X = 0, Y = 0)\n- The point is to the positive Y direction without passing through the origin\n- The point is to the negative Y direction without passing through the origin\n- The point is to the positive X direction without passing through the origin\n- The point is to the negative X direction without passing through the origin"}, {"instruction": "Design a Python program to generate all combinations of a handful of products, where an item can be chosen any number of times. For example, with a handful of four products:\n\n- `P1`, `P2`, `P3`, and `P4`,\n- the `combination(P1)` should return a list of all 1-element lists,\n- the `combination(P1, P2, P3)` should return a list of all 3-element lists, and\n- the `combination(P1, P2, P3, P4)` should return a list of all 4-element lists."}, {"instruction": "Write a Python program that creates a number of objects of different types, depending on a given input, and prints the number of objects created and their type. For example, given an input of \"100\" as string, the program should create and print 100 objects of type \"int\" and 100 objects of type \"str\"."}, {"instruction": "Write a program that prints all the numbers from 1 to 100. But for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\"."}, {"instruction": "Create a Python program that counts the number of objects in a list that are of type `int`, `float`, `str`, `list`, or `tuple`. The program should satisfy the following assertions:\n\n```python\nlist_of_objects = [1, 1.2, 'a', [1, 2], (1, 2, 3)]\nassert count_objects(list_of_objects) == 5\nassert count_objects([]) == 0\n```"}, {"instruction": "Write a Python program that detects if all three objects in the provided array are different from each other."}, {"instruction": "Develop a Python program that creates a single instance of a class called `Person` with public and private properties that store `name` and `age`. The class should also have a method called `greet()` that returns a string representation of a greeting message. Create another class called `Student` that inherits from the `Person` class. Add a new private property to the `Student` class called `school` and a new method called `get_school()` that returns the value of this property."}, {"instruction": "Write a Python program to check if there exists a given object in a given list of objects. The program should return a boolean value denoting whether the object is present in the list or not. The program should satisfy the following assertions:\n\n```python\nobj1 = object()\nobj2 = object()\nobj3 = object()\nmy_list = [obj1, obj2, obj3]\nassert has_object(obj1, my_list) == True\nassert has_object(obj2, my_list) == True\nassert has_object(obj3, my_list) == True\nassert has_object(obj4, my_list) == False\nassert has_object(obj1, []) == False\nassert has_object(obj1, [obj3]) == False\nassert has_object(obj1, [obj2, obj3]) == False\nassert has_object(obj1, [obj1, obj3]) == True\n```"}, {"instruction": "Write a Python program that generates a new list containing all the \"primes\" in the given list. A prime number is a number that is divisible by exactly two natural numbers: 1 and itself. The following assertions should pass:\n\n```python\nassert generate_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 5, 7]\nassert generate_primes([2, 4, 6, 8, 10]) == []\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 5\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: k-d tree construction, parallel processing, object-oriented programming, electron-to-molecule identification, point cloud processing, data structure retrieval, parallel processing\n\n### Task", "fingerprint": null, "content": {"code": "fpfhFeature::Ptr compute_fpfh_feature(PointCloud<PointXYZRGB>::Ptr incloud, int ksearchnum, int openmpcores)\n{\n\t//\u5efa\u7acbkdtree\n\tpcl::search::KdTree<pcl::PointXYZRGB>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGB>);\n\t//\u6cd5\u5411\u91cf\n\tpointnormal::Ptr point_normal(new pointnormal);\n\tpcl::NormalEstimation<pcl::PointXYZRGB, pcl::Normal> est_normal;\n\test_normal.setInputCloud(incloud);\n\test_normal.setSearchMethod(tree);\n\test_normal.setKSearch(ksearchnum);\n\test_normal.compute(*point_normal);\n\t//fpfh \u4f30\u8ba1\n\tfpfhFeature::Ptr fpfh(new fpfhFeature);\n\t//pcl::FPFHEstimation<pcl::PointXYZ,pcl::Normal,pcl::FPFHSignature33> est_target_fpfh;\n\tpcl::FPFHEstimationOMP<pcl::PointXYZRGB, pcl::Normal, pcl::FPFHSignature33> est_fpfh;\n\test_fpfh.setNumberOfThreads(openmpcores); //\u6307\u5b9a4\u6838\u8ba1\u7b97\n\t// pcl::search::KdTree<pcl::PointXYZ>::Ptr tree4 (new pcl::search::KdTree<pcl::PointXYZ> ());\n\test_fpfh.setInputCloud(incloud);\n\test_fpfh.setInputNormals(point_normal);\n\test_fpfh.setSearchMethod(tree);\n\test_fpfh.setKSearch(ksearchnum);\n\test_fpfh.compute(*fpfh);\n\treturn fpfh;\n}", "docstring": "//open3d::FastGlobalRegistrationOption(fastpara));", "function_name": "FPFHRegister_open3d"}, "id": 271, "seed": "fpfhFeature::Ptr compute_fpfh_feature(PointCloud<PointXYZRGB>::Ptr incloud, int ksearchnum, int openmpcores)\n{\n\t//\u5efa\u7acbkdtree\n\tpcl::search::KdTree<pcl::PointXYZRGB>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGB>);\n\t//\u6cd5\u5411\u91cf\n\tpointnormal::Ptr point_normal(new pointnormal);\n\tpcl::NormalEstimation<pcl::PointXYZRGB, pcl::Normal> est_normal;\n\test_normal.setInputCloud(incloud);\n\test_normal.setSearchMethod(tree);\n\test_normal.setKSearch(ksearchnum);\n\test_normal.compute(*point_normal);\n\t//fpfh \u4f30\u8ba1\n\tfpfhFeature::Ptr fpfh(new fpfhFeature);\n\t//pcl::FPFHEstimation<pcl::PointXYZ,pcl::Normal,pcl::FPFHSignature33> est_target_fpfh;\n\tpcl::FPFHEstimationOMP<pcl::PointXYZRGB, pcl::Normal, pcl::FPFHSignature33> est_fpfh;\n\test_fpfh.setNumberOfThreads(openmpcores); //\u6307\u5b9a4\u6838\u8ba1\u7b97\n\t// pcl::search::KdTree<pcl::PointXYZ>::Ptr tree4 (new pcl::search::KdTree<pcl::PointXYZ> ());\n\test_fpfh.setInputCloud(incloud);\n\test_fpfh.setInputNormals(point_normal);\n\test_fpfh.setSearchMethod(tree);\n\test_fpfh.setKSearch(ksearchnum);\n\test_fpfh.compute(*fpfh);\n\treturn fpfh;\n}", "__index_level_0__": 74, "concepts": ["k-d tree construction", "parallel processing", "object-oriented programming", "electron-to-molecule identification", "point cloud processing", "data structure retrieval", "parallel processing"], "parsing_result": [{"instruction": "Develop a Python class `MoleculeKNN` to implement a k-nearest neighbor (KNN) algorithm for electron-to-molecule identification. The class should be able to perform KNN calculations using a k-d tree data structure. The input data is represented as a list of point cloud data, where each point has 3 coordinates representing x, y, and z coordinates.\n\nThe class should maintain an internal state consisting of the k-d tree root node and a list of queries that it has already processed. The class should provide two methods to calculate KNN: `calculate_knn(self, point)` and `process_queries(self)`. The method `calculate_knn` should take a point cloud data as input and return the KNN of that point. The method `process_queries` should take a list of queries as input and return the KNN of each query.\n\nThe class should handle erroneous inputs such as empty inputs and invalid inputs. Additionally, implement the `print` method to output the k-d tree data structure in the following format:\n\n```\n(x1, y1, z1)\n |\n (x2, y2, z2)\n |\n (x3, y3, z3)\n```"}, {"instruction": "Develop a Python class `E2M` that takes a list of electron-to-molecule mappings as input. The class should ensure that the input mappings are stored as an efficient data structure and offer parallel processing capabilities for identifying molecular structures from a given set of electrons. The class should also support querying the molecular structures based on the properties of a given electron.\n\nThe class should be designed to support multiple types of molecular structures, such as chemical formulas, molecular structures on the molecular level, and more. The class should also offer various methods for querying the properties of electrons, such as finding the electrons that match a specific chemical formula, or the electrons that have a specific bond order.\n\nThe class should be flexible and extensible, allowing developers to easily add new properties and structures to the class."}, {"instruction": "Construct a Python class `Point` that represents a 3D point in Cartesian space. The class should have two attributes: `x` and `y` for the x- and y-coordinates, and a third attribute `z` for the z-coordinate. The class should have a constructor that accepts x, y, and z values to initialize the instance. It should also have methods `get_coordinates` and `set_coordinates` for returning and setting the coordinates.\n\nAdditionally, the class should include a `PointCloud` class that represents a collection of points. It should maintain all the points in a list and have methods for adding, removing, and querying points by coordinates. The `PointCloud` class should have a constructor that accepts a list of `Point` objects to initialize the instance.\n\nFinally, design a `K_DTree` class that represents a k-dimensional tree structure for point clouds. The class should maintain a reference to the `PointCloud` instance and a list of `Point` objects as the base points in the tree. The `K_DTree` class should support generating the tree from a point cloud, querying points within a given bounding box, and handling insertion and removal operations.\n\nImplement the `K_DTree` class to support parallel processing of point cloud insertion and removal operations."}, {"instruction": "Develop a Python class `KDDTree` that supports the construction of a k-d tree from a set of points. The class should have a constructor that accepts a list of points and number of dimensions as input. The class should support the insertion of new points into the tree and the query of nearest neighbors in the tree.\n\nThe class should support parallel processing of data insertion and query operations. Additionally, it should provide the `plot_tree` method that generates a visualization of the points in the tree using Python's Matplotlib.\n\nThe class should be able to handle extreme cases that involve millions of data points."}, {"instruction": "Construct a Python class `MoleculeIdentifier` that implements a k-d tree-based approach to identifying molecules based on their chemical properties. The class should maintain an internal state that is a list of tuples containing the properties of each molecule and a list of their labels. The class should support adding a new molecule to the dataset, querying for the nearest neighbors to a given molecule, and providing a `namedtuple`, `nearest_neighbors`, containing the labels of the nearest neighbors and their Euclidean distance.\n\nThe class should handle erroneous inputs gracefully, such as incorrect data formats and user-defined distances. Additionally, implement the `__str__` method to return a formatted string showing the dataset and its nearest neighbors."}, {"instruction": "Design a Python class `ChemicalStructure` that is capable of identifying molecular structures from electron-accepting and donating atoms. The class should support the following operations:\n- `load(self, path: str)`: Load a molecule structure from a PDB file path.\n- `get_distance(self, atom1: str, atom2: str)`: Calculate the Euclidean distance between two atoms.\n- `get_distances(self, atom: str, threshold: float)`: Calculate the distances of all atoms to the target atom within a specified threshold.\n- `write_to_file(self, path: str)`: Write the molecule structure to a PDB file.\n- `to_dict(self)`: Return a dictionary representation of the molecule structure.\n\nThe class should be capable of identifying and storing the following attributes of a molecule structure:\n- `atoms`: A list of atoms, represented by a tuple of `(symbol, x, y, z)`.\n- `bonds`: A list of bonds, represented by a tuple of `(atom1, atom2)`.\n- `angle`: A list of angles, represented by a tuple of `(atom1, atom2, atom3)`.\n- `torsion`: A list of torsions, represented by a tuple of `(atom1, atom2, atom3, atom4)`.\n\nThe class should be capable of identifying and storing additional attributes in the future."}, {"instruction": "Develop a Python class `ElectronMoleculeIdentifier` that can identify the three-dimensional locations of 3000+ electrons in a given electron-to-molecule dataset. The class should contain a data structure that is used to store and retrieve the locations of the electrons in a 3D space. This data structure should be constructed using a k-d tree data structure. The class should support parallel processing capabilities with appropriate API design to support multiple independent tasks. The class should be able to identify the most probable molecule for a given location of the electron.\n\nThe class should handle erroneous inputs gracefully, such as invalid input formats for the electron-to-molecule data or incorrect API usage. Additionally, the class should support unit testing and documentation through appropriate testing and documentation tools."}, {"instruction": "The goal of this task is to build a k-d tree to represent molecular data. The data consists of a set of 3D points that represent the electron positions in a molecule. The tree should allow users to perform efficient queries to retrieve the nearest neighbor and k-nearest neighbors of an input point.\n\nThe class `Molecule` should maintain two internal attributes: `electron_coordinates` and `atom_symbol`. The attribute `electron_coordinates` should be a list of 3D points, and `atom_symbol` is a list of the corresponding elements of the molecule (e.g., 'H', 'C', 'N', ...). Each element of `electron_coordinates` should be an object of the class `Point`, which should support the following operations:\n- `distance(self, other: \"Point\") -> float`: returns the Euclidean distance between the current point and another point.\n- `translate(self, vec: \"Vector\") -> None`: updates the current point by adding the specified vector to the current coordinates. The vector can be either a single number or a tuple of three numbers.\n- `scale(self, factor: float) -> None`: scales the coordinates of the current point by a specified factor.\n\nThe class `Point` should support the following operations:\n- `distance(self, other: \"Point\") -> float`: returns the Euclidean distance between the current point and another point.\n- `__add__(self, other: \"Point\" or \"Vector\") -> \"Point\"`: returns a new point after translating the current point by the specified vector.\n- `__sub__(self, other: \"Point\") -> \"Vector\"`: returns a vector from the current point to another point.\n- `__mul__(self, other: float) -> \"Point\"`: returns a new point after scaling the current point by a specified factor.\n- `__div__(self, other: float) -> \"Point\"`: returns a new point after dividing the current point by a specified factor.\n- `__lt__(self, other: \"Point\") -> bool`: returns whether the current point is closer to another point than the other point.\n\nThe class `KDTNode` should store the coordinates of the current point and a reference to the k-d tree node of the left and right subtrees. It should also maintain the indices of the electrons that are closer to the current point than all points in its subtree. The class should support the following operations:\n- `insert(self, point: \"Point\", index: int) -> None`: inserts a new point and its corresponding index into the current k-d tree node.\n- `search_nearest(self, point: \"Point\") -> \"Point\"`: returns the nearest neighbor of the specified point among the points stored in the current node and its left and right subtree.\n- `search_k_nearest(self, point: \"Point\", k: int) -> list`: returns the k nearest neighbors of the specified point among the points stored in the current node and its left and right subtree. The list should be sorted in ascending order of distance to the input point.\n\nThe class `KDTree` should maintain a reference to the root node of the k-d tree and support the following operations:\n- `insert(self, molecule: \"Molecule\") -> None`: inserts a new molecule into the k-d tree, maintaining the sorted order of the points.\n- `search_nearest(self, point: \"Point\") -> \"Point\"`: returns the nearest neighbor of the specified point among all the molecules stored in the k-d tree.\n- `search_k_nearest(self, point: \"Point\", k: int) -> list`: returns the k nearest neighbors of the specified point among all the molecules stored in the k-d tree. The list should be sorted in ascending order of distance to the input point.\n\nThe class `Molecule` should support the following operations:\n- `__init__(self, electron_coordinates: list, atom_symbol: list) -> None`: initializes the object with the specified electron coordinates and atom symbols.\n- `__len__(self) -> int`: returns the number of electrons in the molecule.\n- `__getitem__(self, index: int) -> \"Point\"`: returns the electron coordinates at the specified index.\n- `__repr__(self) -> str`: returns a string representation of the molecule, including the coordinates and atom symbols.\n- `__str__(self) -> str`: returns a string representation of the molecule, including the coordinates and atom symbols.\n\nThe class `Point` should support the following operations:\n- `__init__(self, x: float, y: float, z: float) -> None`: initializes the object with the specified coordinates.\n- `__repr__(self) -> str`: returns a string representation of the point, including its coordinates.\n\nThe class `Vector` should be a simple container for an immutable tuple of three numbers. It should support the following operations:\n- `__init__(self, x: float, y: float, z: float) -> None`: initializes the object with the specified coordinates.\n- `__repr__(self) -> str`: returns a string representation of the vector, including its coordinates.\n\nThe class `KDTree` and `KDTNode` should follow the convention of object-oriented programming, with methods supporting the internal operations of the data structure and other helper functions."}, {"instruction": "Create a Python class that implements parallel processing capabilities to accept a list of `Point` objects and return a sorted list of the `Point` objects that belong to the same `molecule`. The input list of points has been preprocessed to contain only non-overlapping points, i.e., points that do not overlap with each other.\n\nThe class should have a constructor that accepts a list of `Point` objects, and a method `sort_points(self, points)` that returns a list of `Point` objects sorted by their `molecule` attribute. The `Point` class contains two attributes: `x` and `y`, which represent the Cartesian coordinates of a point in a two-dimensional plane. It also contains an integer attribute `molecule`, which is an identifier for a specific molecule.\n\nThe `sort_points` method should sort the input points based on their `molecule` attribute. The `molecule` attribute represents the molecule that each point belongs to, and the method should return a sorted list of points that belong to the same molecule. The points in the output list should be sorted based on their `molecule` attribute.\n\nThe class should be designed to handle large input sizes and perform efficiently."}, {"instruction": "Design a Python class `ElectronMoleculeId` that maintains a list of all known electron-to-molecule mappings, and supports efficient search based on the target electrons. The class should support the following operations:\n\n- `add_mapping(self, electrons: List[str], molecule: str)` \u2014 Add a new mapping for a list of electrons to a specific molecule.\n- `search(self, electrons: List[str]) -> List[str]` \u2014 Search for all possible molecules that can be constructed from a list of electrons. The return value should be a list of all unique molecules in sorted order.\n\nThe class should handle erroneous inputs gracefully, and support concurrent access by multiple threads."}, {"instruction": "In this challenge, you are tasked with building an object-oriented Python class that can perform efficient identification of electrons in a 3D point cloud. The class should be initialized with a list of 3D points, e.g., `PointCloud([1, 2, 3], [4, 5, 6], [7, 8, 9])`, and be able to identify electrons in a point cloud by running the `find_electrons` method. The method should return the indices of the identified electrons in the original point cloud.\n\nThe class should define the following properties:\n- `points`: a list of 3D points\n- `k`: the number of electrons to be identified\n\nThe class should support the following methods:\n- `__init__(self, *args)`: initializes the object with a given set of points\n- `find_electrons(self)`: identifies the `k` electrons in the point cloud\n\nYour class should identify the `k` electrons in an original point cloud using the k-d tree data structure. This tree should be built using the 3D coordinates of the points. The tree should be built in parallel for efficiency, and the method should return the indices of the identified electrons in the original point cloud."}, {"instruction": "Design a Python class `ElectronToMolecule` that processes a collection of electron structures and identifies their corresponding molecular counterparts. The algorithm should read the structures from an input file, and output a list of pairs of electron structures and their corresponding molecular analogues. The structures are stored in a list of three-dimensional coordinates, where each electron is represented by a tuple of length 3.\n\nThe class should support the following operations:\n- Initialization: `ElectronToMolecule(input_file)`\n- Execution: `result = e2m.apply()`\n- Retrieval: `result = e2m.get_result()`\n\nThe structures are represented as an array of tuples, where each tuple represents an electron and its three-dimensional coordinates. The class should read the structures from the input file and calculate the corresponding molecular counterparts in parallel."}, {"instruction": "Construct a Python class `AtomMatcher` that can match atoms from a list of input strings. The class should support retrieving all atoms from a list of input strings that (a) match the given string, and (b) have the same chemical symbol and atomic weight. The class should support parallel processing of the input strings to increase efficiency.\n\nThe class should support a method `match(self, string)` that accepts a string as input and returns a list of matched atoms from the input string. The method should take a string as input and return a list of matched atoms that have the same chemical symbol and atomic weight as the input string. A matched atom is represented as a tuple of the form (chemical symbol, atomic weight). For example, the input string \"N20H24\" should return the list [('N', 20), ('H', 24)]."}, {"instruction": "Construct a Python class `Kdtree` that supports construction, insertion, and query operations for a k-d tree, which is a data structure used for efficient search in a high-dimensional space. The class should include a constructor that accepts a data array and the dimension of the space. The class should support the following operations:\n- `insert(self, data)` which inserts the given data point into the k-d tree.\n- `search(self, query)` which searches for data points in the k-d tree that are within a specified distance from the query point.\n- `nearest_neighbor(self, query)` which returns the nearest neighbor to the query point from the k-d tree.\n\nThe class should be implemented with adequate error handling and robustness. Additionally, the class should offer a `visualize` method to visualize the k-d tree structure in an interactive 2D or 3D space."}, {"instruction": "Develop a Python class `KDDTree` that implements a k-d tree data structure for efficient point cloud processing. The class should support the following functionalities:\n\n- `KDDTree.__init__(self, points, k)` - Constructor for the k-d tree object with a set of points and an integer `k`. The points should be stored in a list of named tuples, where each tuple represents a point in the k-dimensional space. The dimensionality of each point is specified by the value of `k`.\n- `KDDTree.insert_point(self, point)` - Adds a new point to the k-d tree. The point should be represented as a list of k coordinates.\n- `KDDTree.get_radius_neighbors(self, point, radius)` - Returns a list of points within a specified radius of a given point. The radius is specified as a floating-point number.\n- `KDDTree.get_all_neighbors(self, point)` - Returns the list of all points within the k-d tree that are within a given point's Euclidean distance from the input point.\n- `KDDTree.get_points_within_range(self, point1, point2)` - Returns a list of points within a given range of two points. The range is specified as a list of two points.\n\nThe class should support parallel processing using the `multiprocessing` module."}, {"instruction": "Design a Python class `ElectronMoleculeIdentifier` that identifies the chemical formulas corresponding to electron configurations in an input text. The class should maintain a static data structure that stores the electron configurations and their corresponding chemical formulas. The class should expose a method to search for electron configurations in this data structure that matches a given input pattern.\n\nThe electron configurations are represented as strings of digits `0-9` and the operator `+`. The operator `+` represents a single electron while `++` represents two electrons. The input string represents the electron configuration of an atom and the corresponding chemical formula of the atom. For example, the electron configuration `1s2+2s2+2p6+3s2+3p6+4s2+3d10+4p6+5s2+4d10+5p6+4f14+5d10+6s2+4f14+6p6+5f14+7s2` corresponds to the chemical formula `Cl`.\n\nThe class should contain a static method `get_molecules_from_text(text)` that reads the given text and returns a list of chemical formulas that match the electron configuration. The class should also contain a static method `get_electron_configurations_from_text(text)` that reads the given text and returns a list of electron configurations that match the chemical formula.\n\nThe class should provide a static method `search(electron_configuration, molecule)` that searches for the given electron configuration in the data structure and returns the corresponding chemical formula if found. If no match is found, the method should return an empty string.\n\nFor example, given the input `text = '1s2+2s2+2p6+3s2+3p6+4s2+3d10+4p6+5s2+4d10+5p6+4f14+5d10+6s2+4f14+6p6+5f14+7s2'`, the class should return `['Cl', 'Br', 'I']` as the list of chemical formulas that match the electron configuration."}, {"instruction": "Construct a Python class `PointCloud` to manage a point cloud of 3D coordinates. The class should maintain a list of coordinates and support basic operations for point cloud manipulation, such as adding, deleting, and printing. The class should also provide a method `kdtree_search(self, query, k)` that finds the `k` closest neighbors for a query point in the point cloud. The class should support parallel processing of the search function to speed up the search time."}, {"instruction": "Develop a Python class `KDTrees` that can be used for efficient and scalable point cloud processing. Your class should implement the following methods:\n- `create_kd_tree`: This method should accept an array of points as input, and return a k-d tree constructed from the data. The input points are represented as a list of coordinate pairs (x, y), where each pair is a tuple or a list of two numbers.\n- `query_k_nearest_neighbor`: This method should accept a query point and a k value, and return a list of the k closest points to the query point. For each point, the method should return a tuple (x, y) where x and y are the coordinates of the point.\n- `query_point_cloud`: This method should accept a point and a k value, and return a list of the k closest points in the point cloud to the given point. The returned list should include the original point.\n\nThe class should have the following properties:\n- It should be able to process point clouds of up to 10 million points in real-time.\n- It should be able to handle large k values, up to 100.\n- It should be able to handle point clouds with thousands of dimensions.\n- The class should be designed to handle large point cloud data efficiently, such as using parallel processing to accelerate the process."}, {"instruction": "Design a Python class `MoleculeClassifier` that implements a k-d tree search engine for 2D point cloud data. The class should maintain an internal k-d tree data structure during object construction, and provide methods for querying a molecule in the cloud based on a set of criteria. The class should also support parallelizing the data retrieval process using the `concurrent.futures` library.\n\nThe class `MoleculeClassifier` should be initialized with a 2D point cloud data set and a `k` value (default `3`), which specifies the number of dimensions in the point data. The class should support insertion and retrieval of molecules with the following methods:\n\n- `insert_molecules(self, molecules: List[Molecule])`: inserts a list of molecules into the k-d tree structure\n- `retrieve_molecules(self, criteria: Dict[str, Union[int, float]]):` retrieves a list of molecules from the k-d tree that meet the specified criteria\n\nThe method `retrieve_molecules` should support parallel processing using the `concurrent.futures` library.\n\nThe `Molecule` class should be defined as a simple data structure with a name and a set of 2D coordinates.\n\nThe class should handle various input formats, including lists of molecules, sets of molecules, and dictionaries of molecule names to coordinates. The class should also handle errors gracefully, such as invalid inputs or missing attributes."}, {"instruction": "Develop a Python class to represent a k-d tree structure in a three-dimensional space. The class should accept a set of 3D points as input and construct a k-d tree structure that supports efficient nearest neighbor queries. The class should also support efficient retrieval based on a spatial range query, allowing efficient data-driven applications such as electronic point cloud analysis.\n\nThe k-d tree is a data structure that is used to efficiently search for nearest neighbors in a given high-dimensional space. It is constructed by dividing the space into smaller and smaller sections, recursively, until all the points are contained within a single region. Each region is then split into two new regions, representing the two closest points to the current region's center. The process is continued recursively until the region is small enough to contain a single point, at which point the region is assigned a label of itself. The k-d tree is constructed by performing a depth-first search on the tree, starting at the root with an empty set of points. Each node is assigned a list of points, representing the points contained within its region. The search process for nearest neighbors is performed recursively by starting at the root and selecting the appropriate child node. The selected child node is recursively searched until an empty set is reached, at which point the nearest neighbor is the point contained within the current node.\n\nThe class should provide a function `nearest_neighbor(point)` that takes a single point and returns the nearest neighbor to that point in the k-d tree. The function should also provide a function `range_search(point)` that takes a point and a distance threshold, and returns a list of all points within the given distance threshold of the input point."}, {"instruction": "Develop a Python class `Kdtree` for efficient storage and retrieval of 3D points. The class should support the following operations:\n\n- `insert(self, point: [float, float, float])`\n- `delete(self, point: [float, float, float])`\n- `search(self, k: int) -> [float, float, float]`\n\nThe `insert` method should add a new point to the tree. The `delete` method should remove a point, and the `search` method should return the `k` nearest neighbors to the given point.\n\nYour implementation should support parallel processing, such that multiple threads can insert or delete points concurrently."}, {"instruction": "Construct a Python class `KDTrees` that encapsulates a set of objects representing points in a 3D space. Each point should be represented as an object with an `x`, `y`, and `z` attribute. The class should support the following methods:\n\n- `add_point`: add a new point to the set of points\n- `remove_point`: remove a point from the set of points\n- `get_nearest`: find the nearest neighbor of a target point and return the object representing the point\n- `get_range`: find all points that are within a certain range of the target point and return a list of objects representing the points\n\nThe class should offer a default constructor that initializes an empty set of points, and it should provide a static method `read_data(filename)` that reads a point cloud from a given file, returning a `KDTrees` object that holds all the points in the file.\n\nThe class should be implemented in such a way that the nearest neighbor search and the range search can be performed in parallel. Here are some sample input and output examples:\n\n- Input:\n```python\nkd = KDTrees()\nkd.add_point(Point(2, 4, 9))\nkd.add_point(Point(8, 2, 4))\nkd.add_point(Point(5, 1, 7))\n```\n\n- Output:\n```python\nkd.get_nearest(Point(3, 2, 3))  # should return Point(5, 1, 7)\n```\n\n- Input:\n```python\nkd = KDTrees()\nkd.read_data('points.txt')\n```\n\n- Output:\n```python\nkd.get_nearest(Point(10000, 20000, 30000))  # should return Point(7541, 5649, 5596)\nkd.get_range(Point(7541, 5649, 5596), 50000)  # should return a list of all points within 50000 units of (7541, 5649, 5596)\n```"}, {"instruction": "Develop a Python class `ElectronMoleculeDetector` that identifies the electron-to-molecule dissociation energy based on the distance between atoms in a molecular structure. The class should support two properties: `data` and `cutoff`. The `data` property is a list of molecular structures, where each structure is represented as a list of strings, where each string represents a single atom. The `cutoff` property determines the distance threshold for identifying an electron-to-molecule dissociation event. The class should support two methods: `count_electron_to_molecule(self)` and `calculate_dissociation_energy(self)`. The `count_electron_to_molecule` method will return the number of electron-to-molecule dissociation events that occur within the cutoff threshold. The `calculate_dissociation_energy` method will return the average dissociation energy of all dissociation events in the dataset, based on the squared distance between the atoms in each structure. The class should implement the `__str__` method to return a formatted summary of the dataset and the molecular structure distance cutoff.\n\nThe main program should read the dataset from a file, create the `ElectronMoleculeDetector` object, and then run the `count_electron_to_molecule` and `calculate_dissociation_energy` methods. The main program should also validate the input file's format and handle any errors gracefully."}, {"instruction": "Develop a Python class `MoleculeClassifier` that classifies molecules based on their geometry and connectivity. The class should take a set of molecule structures as input and return a list of predicted chemical labels for each molecule. The class should support parallel processing of the input data, using native Python functions such as `map`, `filter`, and `reduce` to speed up the process.\n\nThe class should also support other methods for data preprocessing and post-processing, such as converting the input data to a more efficient representation, normalizing the features, or handling missing values. Additionally, the class should have a `predict_molecule(self, molecule)` method that takes a single molecule as input and returns the predicted label for that molecule.\n\nThe class should also include an `__init__` method that takes a list of chemical labels as input. This list should be used to define the class's attributes, such as the set of supported labels and the corresponding integer codes. The class should also include a `fit` method that takes the chemical labels and any other relevant information as input, such as the training data, and processes the data to fit the classifier to the training data.\n\nThe class should include a `save` method that saves the trained model to a file for later use. Similarly, the class should include a `load` method that loads the model from a file and restores the classifier to its original state.\n\nThe class should be able to handle any type of data, such as molecule structures, chemical labels, and other related information. It should also be flexible enough to support new types of molecular information, such as additional features or other classification labels."}, {"instruction": "Design a Python class `MoleculeSearcher` that indexes and searches for molecules using the electron-to-molecule (e-mol) format. The class should have the following functionalities:\n- `MoleculeSearcher.add_molecule(formula, smiles)`: adds a new molecule to the search index, where `formula` is the chemical formula and `smiles` is the structural formula.\n- `MoleculeSearcher.search(query)`: searches for molecules using the given `query` string in the search index. The search should return a list of `namedtuple` objects, where each object contains the `formula` and `smiles` for a matching molecule. The search should be case-insensitive, and the results should be sorted by the number of matching atoms, in descending order. Note that the search is optimized for minimal matching, so the number of matches for a given query may be less than the number of molecules in the index.\n\nTo support efficient search, use a k-d tree structure for the molecule index."}, {"instruction": "Design a Python class `Kdtree` that implements a k-dimensional tree data structure for storing and retrieving points in high-dimensional spaces. The class should support inserting, deleting, and querying points with the following methods:\n- `insert(self, point: array)`: Inserts the given point into the tree.\n- `delete(self, point: array)`: Deletes the given point from the tree.\n- `query(self, radius: float, point: array)`: Returns a list of point IDs within a given radius of the given point.\n\nThe class should also support parallel processing to speed up the insertion and querying procedures. The implementation should consider using threads and/or processes to parallelize the operations."}, {"instruction": "Build a Python class `MoleculeFinder` that takes in a list of Molecules and a list of Electrons, and finds all the molecules that match the given electrons. The class should allow for parallel processing to find the most likely matches. The class should also support efficient distance computations from the electrons to the molecule atoms.\n\nThe class should provide a method `find_molecules(self, electrons)` to return a list of matched molecules. The method should be designed to be efficient and stable, and the algorithm should not be prone to massive delays or memory leaks."}, {"instruction": "Develop a Python class `ElectronMoleculeFinder` that identifies electron-to-molecule (e-m) pairs in a point cloud dataset. The class should accept a point cloud dataset represented by a 2D array of floats, where each row represents the coordinates of a point and each column represents the corresponding property of that point. The class should support parallel processing to identify e-m pairs in the point cloud dataset.\n\nThe class should identify e-m pairs by grouping the points in each row based on their proximity to a central point (centroid). The central point should be the point that has the smallest sum of squared distances to all the other points. The algorithm should:\n- Identify the central point of each row using the sum of squared distances.\n- Group the points of each row in a k-d tree, where k is the number of rows. The k-d tree should be constructed using the central points as the root nodes.\n- Determine the e-m pairs by comparing the groups of points in different rows. Each pair should be an e-m pair if its two groups contain at least one common point.\n\nThe class should be able to handle erroneous inputs gracefully, such as invalid input formats and invalid parameters. Additionally, it should support unit tests for the implementation of the k-d tree and the e-m pair identification."}, {"instruction": "Create a Python class `ElectronToMoleculeClassifer` that implements a k-d tree based electrostatic potential classifier for identifying molecules. The classifier should be trained on a list of electron configurations, where each item is a dict with two keys: \"electrons\" and \"molecule\". \"electrons\" is a list of strings representing the electron configurations, and \"molecule\" is the identifier for the molecule they belong to. The classifier should provide methods for:\n\n1. Training the classifier on a list of electron configurations.\n2. Classifying a list of electron configurations, returning a list of identifiers with the same length as the input.\n3. Saving and loading the classifier from a file.\n4. Saving and loading the classifier to and from a database.\n\nThe training method should create the k-d tree based on the electron configurations stored in the database. The classification method should then take the list of electron configurations and return a list of identifiers, where each identifier corresponds to the root node of the k-d tree that contains a set of electron configurations that match the corresponding electron configuration in the input."}, {"instruction": "Construct a Python class `ElectronMolecule` that maintains the properties of an electron and a molecule. The class should be initialized with a tuple of coordinates, which represent the position of the electron in a 3D space. Additionally, the class should support setting and getting the coordinates of the electron.\n\nThe class should also support functions to calculate the distance between an electron and a molecule, as well as identifying the molecule containing the electron. The `distance` function should accept a molecular object with a single electron, and return the minimum distance between the electron and the molecule.\n\nThe class should also provide a `get_molecules` function that accepts a list of molecules with multiple electrons, and returns a dictionary of distances to each molecule, allowing for fast identification of the molecule containing the electron."}, {"instruction": "Develop a Python class `Trie` that supports efficient string look-ups for a given set of strings. The class should be able to construct the trie structure from a given collection of strings and then return the longest prefix match for a given query string. Additionally, it should support concurrent access from multiple processes. Finally, it should gracefully handle cases where the query strings are invalid or the collection of strings is empty."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: C++ memory management, preconditions, conditional block\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Camera_initGeometryRenderer(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Camera *arg1 = (cc::scene::Camera *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Camera>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->initGeometryRenderer();\n    \n    \n    return true;\n}", "docstring": "// %typemap(in) SWIGTYPE&", "function_name": "js_cc_scene_Camera_setViewportInOrientedSpace"}, "id": 273, "seed": "static bool js_cc_scene_Camera_initGeometryRenderer(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Camera *arg1 = (cc::scene::Camera *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Camera>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->initGeometryRenderer();\n    \n    \n    return true;\n}", "__index_level_0__": 75, "concepts": ["C++ memory management", "preconditions", "conditional block"], "parsing_result": [{"instruction": "Design a Python class that implements a stack, where `push`, `pop`, and `peek` operations are supported. The class should reject any operations that violate the stack's \"preconditions\" and \"postconditions\".\n\nA \"precondition\" is a logical condition that must be met before a certain operation is applied, and is expressed as a method-level docstring that describes the precondition.\n\nA \"postcondition\" is a logical condition that must be met after a certain operation is applied, and is expressed as a class-level docstring that describes the postcondition.\n\nThe class should include the following preconditions:\n\n- push: the stack is not full\n- pop: the stack is not empty\n- peek: the stack is not empty\n\nThe class should include the following postconditions:\n\n- push: the stack is not full\n- pop: the stack is not empty\n- peek: the stack is not empty\n\nEach push operation should also update the object's `count` attribute."}, {"instruction": "Design, implement, and test a Python class called `BinaryTree` that supports the following operations:\n- `preorder`, `inorder`, and `postorder` traversal\n- `height` calculation\n- `insert`, `delete`, and `contains`"}, {"instruction": "Create a simplified C++ implementation of the following C++ functions:\n\n- `int partition(int a[], int l, int r, int pivot)`\n- `int quick_select(int a[], int l, int r, int k)`\n- `void quick_sort(int a[], int l, int r)`\n- `void heap_sort(int a[], int n)`\n\nThe signatures of the `partition` function should be:\n\n```python\npartition(a, l, r, pivot)\n```\n\nThe `quick_select` function should be:\n\n```python\nquick_select(a, l, r, k)\n```\n\nThe `quick_sort` function should be:\n\n```python\nquick_sort(a, l, r)\n```\n\nThe `heap_sort` function should be:\n\n```python\nheap_sort(a, n)\n```\n\nThe `partition` function should return an index that is the first element that is at least as large as `pivot` and all elements before it are smaller than `pivot`. The `quick_select` function should return the `k`-th smallest element in the subarray `a[l...r]` and the `quick_sort` function should recursively sort the subarray `a[l...r]`. The `heap_sort` function should sort the array `a` in place with `n` elements.\n\nThe three functions above should only accept positive integer values. These functions should throw exceptions if the preconditions are violated:\n\n- When `l` or `r` are less than 0, throw a `ValueError` exception.\n- When `k` is less than 1 or greater than `r - l + 1`, throw a `ValueError` exception.\n- When `n` is less than 1, throw a `ValueError` exception.\n- When `pivot` is less than 0, throw a `ValueError` exception.\n\nThese functions should throw exceptions if certain conditions are violated as well:\n\n- When `l` is greater than `r`, throw a `ValueError` exception.\n- When `k` is greater than `r`, throw a `ValueError` exception.\n- When `k` is less than `l`, throw a `ValueError` exception.\n- When `k` is less than `l + 1`, throw a `ValueError` exception.\n- When `k` is greater than `r`, throw a `ValueError` exception.\n- When `n` is less than `r - l + 1`, throw a `ValueError` exception.\n\nFinally, these functions should throw exceptions if other exceptions are raised by the underlying functions that they call, including standard library functions."}, {"instruction": "Create a Python class that implements a simple stack data structure for storing integers. The class should include the following methods:\n\n- `__init__`: initialize the stack with an initial capacity\n- `push`: add an element to the top of the stack\n- `pop`: remove and return the top element from the stack\n- `peek`: return the top element without removing it from the stack\n- `is_empty`: check if the stack is empty\n- `is_full`: check if the stack is full\n\nThe class should include preconditions for all methods that validate user input. It should also include a conditional block that prevents throwing an exception if `push` is called when the stack is full."}, {"instruction": "Write a Python class that represents an image. The class defines several methods that operate and manipulate the image, including a method to load a sample image from a file, and a method to show the image on the console.\n\nThe sample image used to initialize the object should be a PNG image (`.png`) with a size of 122 x 90 pixels.\n\nThe class should expect the following preconditions for the arguments of the constructor:\n\n- The `image_path` argument should be a string that contains the path of the image file to be loaded.\n- The `image_path` file path should exist and be a valid PNG image.\n\nIf any of the preconditions are not met, the constructor should throw an `Exception` with a meaningful message."}, {"instruction": "Implement a C++ class `Stack` that supports the following methods:\n\n- `push(item)`: add a new item to the top of the stack\n- `pop()`: remove the top item from the stack, return the removed item\n- `peek()`: return the top item from the stack without removing it\n- `size()`: return the number of items in the stack\n\nThe implementation should include preconditions for adding and removing items from an empty stack, and a conditional block to handle stack overflow."}, {"instruction": "Implement a Python class that represents a simple calculator. The class should have the following methods:\n\n- `add`: Add two numbers and return their sum\n- `subtract`: Subtract the second number from the first number and return the result\n- `multiply`: Multiply two numbers and return their product\n- `divide`: Divide the first number by the second number and return the quotient\n\nThe class should also have the following read-only properties:\n\n- `sum`: The sum of all numbers stored in the calculator\n- `prod`: The product of all numbers stored in the calculator\n\nThe class should provide a constructor that initializes the calculator with a list of numbers and any other preconditions. The class should maintain the state of all the numbers added to the calculator. The class should implement all the class methods using the C++ rules for operator overloading. The class should ensure that all numbers are valid by throwing an appropriate exception in case of invalid entry.\n\nThe following code block should demonstrate the correct usage of the calculator:\n\n```python\ncalculator = Calculator([-1, -2, -3])\nprint(calculator.add()) # Throws an exception\nprint(calculator.subtract()) # Throws an exception\ncalculator = Calculator([1, 2, 3])\nprint(calculator.sum) # 6\nprint(calculator.prod) # 6\ncalculator.add(2)\nprint(calculator.sum) # 8\nprint(calculator.prod) # 12\ncalculator.subtract(1)\nprint(calculator.sum) # 7\nprint(calculator.prod) # 12\ncalculator.multiply(2)\nprint(calculator.sum) # 14\nprint(calculator.prod) # 24\ncalculator.divide(2)\nprint(calculator.sum) # 14\nprint(calculator.prod) # 12\n```"}, {"instruction": "Design a Python class `CircularBuffer` that implements a circular buffer data structure that holds predefined number of elements. The class should have the following methods:\n\n- `enqueue`: accepts an element and adds it to the buffer. If the buffer is full, the oldest element in the buffer should be overwritten by the incoming element.\n- `dequeue`: removes the oldest element in the buffer. If the buffer is empty, the method should return `None`.\n- `length`: returns the current length of the buffer."}, {"instruction": "Design a Python class `LimitedCache` that adheres to the following contract:\n- `set()` accepts a key and a value as arguments, and assigns the value to the key in the cache.\n- `get()` accepts a key as argument, and returns the value of the key if it exists. If the key does not exist, return `None`.\n- `pop()` accepts a key as argument, and removes the key and its corresponding value from the cache if it exists. If the key does not exist, return `None`.\n- `delete()` accepts a key as argument, and removes the key and its corresponding value from the cache if it exists. If the key does not exist, raise a `KeyError`.\n- `keys()` does not accept an argument and returns a list of all the keys stored in the cache.\n- `values()` does not accept an argument and returns a list of all the values stored in the cache.\n- If the size of the cache exceeds a given `cap`, the oldest keys should be evicted to make space for the new ones."}, {"instruction": "Create a Python class that implements a fixed-size ring buffer. The class should implement the following methods:\n\n- `add_item(item)`: Adds the item to the ring buffer at the next available index. If the ring buffer is full, the oldest element in the ring buffer should be overwritten by the new element.\n- `get_item(index)`: Returns the item at the specified index in the ring buffer. If `index` is out of bounds, it should return `None`.\n\nThe class should have a constructor that takes a fixed size as an argument. The class should also support the following precondition checks:\n\n- `add_item`: `item` should not be `None`\n- `get_item`: `index` should be within the valid range of the ring buffer indices.\n\nThe class should also have a clear method that sets the internal state of the ring buffer to an empty state, where all items are set to `None`."}, {"instruction": "Design a class `Account` that allows management of bank accounts. The class should implement the following operations:\n\n- `init` should take a string as input that represents the account holder's name, and create an account with that name and a balance of 0. The account should have a `balance` and `name` attribute, and it should be initialized as a `float` and `str`, respectively.\n- `deposit` should take a numerical argument as input and increment the `balance` by that amount. The operation should have a precondition that the input must be a non-negative number.\n- `withdraw` should take a numerical argument as input and decrement the `balance` by that amount. The operation should have a precondition that the input must be a non-negative number.\n- `overdraw` should take a boolean argument as input and return the amount by which the `balance` is overdrawn if the `overdraw` parameter is `True`. The operation should have a precondition that the input must be a boolean, and the operation should raise a `ValueError` if the `balance` is at least 0."}, {"instruction": "Implement a C++ class `Rational` that represents a rational number, using the standard integer division. The class should have a constructor that takes two integer arguments, and another constructor that takes one integer argument. The class should also define a member function `simplify` that simplifies the rational number.\n\nFurthermore, the class should have:\n\n- A `Rational` class has a `denominator` property and a `numerator` property.\n- A `Rational` class has a member function `simplify` that returns a `Rational` object that simplifies the rational number.\n- The `simplify` function should check for the precondition of being called on an object with a zero denominator.\n- The `simplify` function should also guard against division-by-zero errors.\n- An instance of the `Rational` class should be able to take a binary operation or equality operation and another `Rational` object as an argument.\n- If the operation is not an equality operation, the function should return the result of the operation using a conditional block and other built-in operators.\n- If the operation is an equality operation, the function should return `true` if the operands are equal and `false` otherwise."}, {"instruction": "Design a Python class that implements a fixed-size queue data structure. The class should include a `push` and a `pop` method. The `push` method should take an item to be pushed to the queue, and the `pop` method should return the oldest item in the queue. The implementation should ensure that the oldest item is always popped first, and the queue size does not exceed its capacity.\n\nFor example, the following code should push 1 to the queue, then push 2, then push 3, then pop 1, then pop 2, then pop 3:\n\n```python\nqueue = FixedSizeQueue(3)\nqueue.push(1)\nqueue.push(2)\nqueue.push(3)\nassert queue.pop() == 1\nassert queue.pop() == 2\nassert queue.pop() == 3\n```"}, {"instruction": "Implement a class called `NewMusicPlaylist` that manages a list of songs. The class should provide the following functionalities:\n\n- `add_song(song)`: add a new song to the end of the playlist\n- `insert_song(song, index)`: insert a new song at a specified index\n- `remove_song(song)`: remove a specified song from the playlist\n- `remove_song_by_index(index)`: remove a song at a specified index\n- `sort_by(key_function)`: sort the playlist by the specified key function\n- `get_length()`: get the total number of songs in the playlist\n- `get_item_index(song)`: get the index of the specified song in the playlist\n- `get_next_song()`: get the next song in the playlist, in FIFO order\n- `get_prev_song()`: get the previous song in the playlist, in LIFO order\n- `is_valid_index(index)`: check if the specified index is valid\n\nAll `key_function` should accept a `song` as argument and return a value that can be used to compare two songs. Use `lambda` functions to create different key functions.\n\nThe `add_song` and `insert_song` functions should not allow duplicate songs to be added. The `remove_song` and `remove_song_by_index` functions should not allow the removal of songs that do not exist in the playlist. Similarly, the `get_item_index` and `is_valid_index` functions should not allow the retrieval of indices that are invalid. The `get_next_song` and `get_next_song` functions should return the first and last songs in the playlist, respectively."}, {"instruction": "Implement a class `IntegerList` that stores an unsorted list of integers. The class should provide the following methods:\n\n- `add(int item)`: adds the integer to the list if it is not already present in the list\n- `get_min_index()`: returns the index of the minimum value stored in the list (the method should return `-1` if the list is empty)\n- `remove_min()`: removes the minimum value from the list if the list is not empty\n- `get_max_index()`: returns the index of the maximum value stored in the list (the method should return `-1` if the list is empty)\n- `remove_max()`: removes the maximum value from the list if the list is not empty\n\nThe class should include a `main` function for testing purpose.\n\nThe `IntegerList` class should include the following preconditions:\n\n- `add`: the stored value should not be a `None` value\n- `remove_min` / `remove_max`: the list should not be empty\n\nThe `IntegerList` class should also include the following postconditions:\n\n- `get_min_index`: the returned index should be either `-1` or within `[0, len(list) - 1]`\n- `get_max_index`: the returned index should be either `-1` or within `[0, len(list) - 1]`"}, {"instruction": "Implement a C++ class named `Student` that stores the following data members:\n\n- name\n- ID\n- email\n- address\n\nThe class should have the following member functions:\n\n- `get_name()`: return the name of the student\n- `get_id()`: return the ID of the student\n- `set_name()`: takes a string as an argument and sets the name of the student to the provided string\n- `set_id()`: takes an integer as an argument and sets the ID of the student to the provided integer\n- `set_email()`: takes a string as an argument and sets the email of the student to the provided string\n- `set_address()`: takes a string as an argument and sets the address of the student to the provided string\n\nAdditionally, the class should have the following member functions:\n\n- `to_string()`: returns a string representation of the student object in the following format: \n```\nname, ID, email, address\n```\n\n- `print()`: prints the string representation of the student object using the `std::cout` object. This function should be called by the `<<` operator overload."}, {"instruction": "Implement a Python class called `FixedVector` that keeps track of the number of elements within a vector of numbers. The class should have two public methods: `add_element`, which takes a single numeric argument and adds it to the vector, and `get_elements`, which returns the vector as a list. Additionally, the class should have two private methods: `_get_vector` and `_set_vector`, which both return the internal vector (private, so no other class can access it) and take a list as input.\n\nYour implementation should include robust error handling to validate preconditions when adding an element and a conditional block to manage the internal data structure.\n\nFor example, the following code should provide the expected behavior:\n\n```python\nvector = FixedVector(3)\nvector.add_element(5)\nvector.get_elements() == [5]\nvector.add_element(2)\nvector.get_elements() == [5, 2]\nvector.add_element(3)\nvector.get_elements() == [5, 2, 3]\nvector.add_element(1)\nvector.get_elements() == [1, 2, 3]\nvector.add_element(4)\nvector.get_elements() == [1, 2, 3]\n```"}, {"instruction": "Design a Python class for a stack data structure that supports two methods: `push` and `pop`. `push` takes a single argument as input and pushes it onto the top of the stack. `pop` takes no input and pops the top element off the stack and returns it. If the stack is empty, `pop` should return `None`. Implement the class so that it passes the following assertions as defined by the **test_push_pop_stack** function:\n\n```python\nassert push_pop_stack_empty([]) == None\nassert push_pop_stack([1]) == 1\nassert push_pop_stack([1, 2]) == 2\nassert push_pop_stack([1, 2, 3]) == 3\nassert push_pop_stack([1, 2, 3]) == 3\nassert push_pop_stack([1, 2, 3]) == 2\nassert push_pop_stack([1, 2, 3]) == 1\nassert push_pop_stack([1, 2, 3]) == None\n```"}, {"instruction": "Implement a Python class `BST` that represents a binary search tree. The class should have the following methods:\n\n- `insert(val)`: Inserts a new value `val` into the tree.\n- `contains(val)`: Returns `True` if the value `val` exists in the tree, `False` otherwise.\n- `in_order_traversal()`: Returns a list of all values in the tree in order.\n- `post_order_traversal()`: Returns a list of all values in the tree in post order.\n- `pre_order_traversal()`: Returns a list of all values in the tree in pre order.\n- `height()`: Returns the height of the tree.\n\nThe class should have the following preconditions:\n\n- All values inserted into the tree must be unique."}, {"instruction": "Create a Python class `NQueens` that implements the following methods:\n\n- `__init__(self, board_size)`: initializes the board size by storing the value in an instance variable\n- `__str__(self)`: returns a string representation of the board in a grid format\n- `__repr__(self)`: returns a string representation of the board in a grid format\n- `solve(self)`: finds all solutions to a general N-queens problem on the board\n\nThe board is represented as a 2D `numpy` array of integers, where `0` indicates an empty cell, and `1` or `2` represents a queen on the board at index `(i, j)` if `i`th row and `j`th column is occupied.\n\nA solution is represented as a list of lists, where each sublist represents a queen on the board at `i`th row and `j`th column.\n\nFor example, given a board size of `4`, the following 9 solutions are found:\n\n```python\n[\n\t[0, 0, 0, 0],\n\t[0, 0, 0, 1],\n\t[0, 0, 1, 0],\n\t[0, 0, 1, 1],\n\t[0, 1, 0, 0],\n\t[0, 1, 0, 1],\n\t[0, 1, 1, 0],\n\t[0, 1, 1, 1],\n\t[1, 0, 0, 0],\n]\n```"}, {"instruction": "Implement a Python class called `CircularBuffer` that stores data in a circular buffer for a fixed-size buffer. You should use a list to store data in the buffer, and provide a circular buffer API to access data from different positions based on the specified indices.\n\nThe class should include the following methods:\n\n- `__init__(buffer_size)`: initializes a `CircularBuffer` instance with a fixed-size buffer of the specified size.\n- `append(num)`: appends a number to the buffer. If the buffer is full, the first item in the buffer should be overwritten by the new number.\n- `get(index)`: retrieves a number from the buffer at the specified index. If the buffer is empty, an empty string should be returned.\n\nThe class should also include the following helper methods:\n\n- `precondition(condition, message)`: checks the specified condition. If the condition does not hold, an `AssertionError` should be raised with the specified error message.\n- `assert_condition(condition, message)`: checks the specified condition and raises an `AssertionError` if it is not met.\n\nThe implementation should include usage of the `precondition` and `assert_condition` helper methods to validate input arguments and ensure the correctness of the implementation."}, {"instruction": "Create a Python class called `BinaryTree` that takes an integer as an argument and constructs a binary tree with the given node as the root. The class should include the following methods:\n\n- `add_node(node)`: Add a new node to the tree.\n- `remove_node(node)`: Remove a node from the tree.\n- `find_node(node)`: Find a node in the tree.\n- `breadth_first_traversal()`: Return an ordered list of values in the tree, in breadth-first order.\n- `depth_first_traversal()`: Return an ordered list of values in the tree, in depth-first order.\n\nEach method should accept preconditions that verify that the node argument is valid and that the tree is in a valid state. For example, `add_node` should not be called on a node that already exists in the tree. This implementation should use conditional blocks to handle exceptions."}, {"instruction": "Implement a class `Matrix` that represents a 2D matrix backed by a `list` of `list` of `int`. Provide methods `get_cell` and `set_cell` to access individual cells, as well as `get_row` and `set_row` to access rows by index."}, {"instruction": "Implement a pure Python `Stack` class that follows the standard Python `list` interface, but supports only the `push`, `pop`, `peek`, and `is_empty` operations. The push operation should append a new item to the stack, while the pop operation should remove the last item pushed to the stack. The `peek` operation should return the last item pushed to the stack without removing it. The `is_empty` operation should return `True` if the stack is empty and `False` otherwise.\n\nFor example, given the following code:\n\n```python\nstack = Stack()\nstack.push(1)\nstack.push(2)\nassert stack.peek() == 2\nstack.pop()\nassert stack.peek() == 1\nstack.pop()\nassert stack.is_empty() == True\n```"}, {"instruction": "Implement a Python class `MyClass` that keeps track of an integer `value`. Define the following methods:\n\n- `def __init__(self, value)` - initializes an instance of the class with a specified integer value\n- `def __add__(self, other)` - adds two `MyClass` instances together\n- `def __sub__(self, other)` - subtracts two `MyClass` instances from each other\n- `def __mul__(self, other)` - multiplies `MyClass` instances with each other\n- `def __str__(self)` - returns a string representation of the `MyClass` instance\n- `def __lt__(self, other)` - returns `True` if the current instance's `value` is less than the other's `value`, and `False` otherwise\n\nThe `__str__` method should return a string representation of the class instance. Here is a sample input and output:\n\n```python\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n    def __add__(self, other):\n        return MyClass(self.value + other.value)\n    def __sub__(self, other):\n        return MyClass(self.value - other.value)\n    def __mul__(self, other):\n        return MyClass(self.value * other.value)\n    def __str__(self):\n        return f'MyClass({self.value})'\n    def __lt__(self, other):\n        return self.value < other.value\n\n# Test cases\na = MyClass(0)\nb = MyClass(1)\nc = MyClass(2)\nd = MyClass(3)\n\nprint(a + a)  # MyClass(0) + MyClass(0) = MyClass(0)\nprint(a + b)  # MyClass(0) + MyClass(1) = MyClass(1)\nprint(b + c)  # MyClass(1) + MyClass(2) = MyClass(3)\nprint(c + d)  # MyClass(2) + MyClass(3) = MyClass(5)\nprint(c + d < a)  # MyClass(2) + MyClass(3) < MyClass(0) = False\n```"}, {"instruction": "Implement a Python class called `Person` that encapsulates a person's first and last names, and stores it as a string. Reconsider the Person class from example 7, and make the `name` string an instance attribute.\n\nThe class should have the following methods:\n\n- `def __init__(self, first_name, last_name)`: constructor to initialize a new `Person` object with first and last names.\n- `def __str__(self)`: returns the person's name in the form of a string.\n- `def __eq__(self, other)`: checks if two Person objects have the same name, up to the first and last names.\n- `def get_first_name(self)`: returns the person's first name.\n- `def get_last_name(self)`: returns the person's last name.\n- `def get_full_name(self)`: returns the person's full name in the form of a string.\n- `def set_first_name(self, first_name)`: sets the person's first name.\n- `def set_last_name(self, last_name)`: sets the person's last name.\n- `def build_full_name(self)`: builds the person's full name from its first and last names and returns it as a string.\n- `def is_valid_full_name(self)`: checks if a full name is valid, i.e., it consists of two names separated by a blank space.\n- `def build_full_name_from_first_and_last_name(self, first_name, last_name)`: this method is a helper function that builds a full name from the first and last name, and returns it as a string.\n- `def build_first_and_last_name_from_full_name(self, full_name)`: this method is a helper function that splits a full name into first and last names."}, {"instruction": "Design a C++ class called `SafeString` that implements string buffer management, memory allocation, and array bounds checks. Define a constructor that takes a `size_t` as an argument, and initialize the string buffer with a `size_t` of `0`. Define a `string_append` function that takes a `char` pointer as an argument that stores the new string. The function should append the new string to the end of the existing buffer and resize the buffer if needed. Define a destructor with no arguments that automatically releases the string buffer."}, {"instruction": "Implement a Python class named Person, with the following methods:\n- `greet`: a function that takes a person object and returns a personalized greeting message in the format of 'Hello (name)'.\n- `is_adult`: a function that takes a person object and returns a boolean value indicating whether the person is an adult. If the person is under 18 years old, the function should return False; otherwise, it should return True.\n- `get_age`: a function that takes a person object and returns the age of the person in years."}, {"instruction": "Create a Python class that represents a generic object that can be created with a string representation of its value, or read from a file. The class should provide the following functionalities:\n\n- create a new object with a string representation of its value\n- read an object from a file containing a string representation of its value\n- assign a value to an existing object\n- return the string representation of the value of the object\n\nThe expected behavior is as follows:\n\n```python\ndata = \"[1, 'foo', 3.14, 'bar']\"\nobj = Data(data)\nobj.value     # \"[1, 'foo', 3.14, 'bar']\"\nobj.to_file('data.txt')\nData.from_file('data.txt') == obj   # True\nobj.value = data\nobj.value == data                   # True\nobj.to_file('data.txt')\nData.from_file('data.txt') == obj   # True\n```"}, {"instruction": "Create a custom `Counter` class that has an implementation of the same interface as `collections.Counter`, but takes an additional `growth_ratio` parameter as an initialization argument. The `Counter` should have the same behavior as `collections.Counter` when the `growth_ratio` is `1.0`, but its behavior should be different when the `growth_ratio` is greater than 1.0.\n\nWhen the `growth_ratio` is greater than 1.0, the `Counter` should be initialized with a `growth_ratio` of `1.0` and the elements should be incremented according to `Counter`'s interface. When the `growth_ratio` is less than 1.0, the `Counter` should be initialized with a `growth_ratio` of `growth_ratio` and the elements should be incremented according to `Counter`'s interface. The `growth_ratio` should be stored in the `growth_ratio` field. The `growth_ratio` should be a precondition of the `increment` method, and the program should raise a `ValueError` if the `growth_ratio` is less than 1.0. The `increment` method should trigger the correct behavior based on the `growth_ratio` instead of a hard-coded `1.0`."}, {"instruction": "Design a Python class `Shape` with a constructor that takes two arguments: `width` and `height`, representing the width and height of the shape. Define two class methods `area` and `perimeter`, which compute the area and perimeter of the shape, respectively. The class should have three subclasses: `Rectangle`, `Square`, and `Circle`. Each sub-class should have a constructor that takes the same two arguments as `Shape`, and implement the `area` and `perimeter` methods according to the shape's specific characteristics."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 4\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: looping through multiple base cases, handling input and output, modular arithmetic computation, conditional looping\n\n### Task", "fingerprint": null, "content": {"code": "int main()\n{IN;//OUT;\n    ios::sync_with_stdio(0);\n    cin.tie(NULL);\n    int n,c;\n    cin>>n>>c;\n    ll res=0;\n    FOR (i,0,1){\n    \tFOR (j,0,1){\n    \t\tres=(res+calc(n,i,j,c))%K;\n    \t}\n    }\n    cout<<res<<endl;\n    \n\t\n         return 0;\n}", "docstring": "//cout<<n<<\" \"<<a1<<\" \"<<a2<<\" \"<<c<<\" \"<<d[n][a1][a2][c]<<endl;", "function_name": "calc"}, "id": 282, "seed": "int main()\n{IN;//OUT;\n    ios::sync_with_stdio(0);\n    cin.tie(NULL);\n    int n,c;\n    cin>>n>>c;\n    ll res=0;\n    FOR (i,0,1){\n    \tFOR (j,0,1){\n    \t\tres=(res+calc(n,i,j,c))%K;\n    \t}\n    }\n    cout<<res<<endl;\n    \n\t\n         return 0;\n}", "__index_level_0__": 76, "concepts": ["looping through multiple base cases", "handling input and output", "modular arithmetic computation", "conditional looping"], "parsing_result": [{"instruction": "Develop a Python program that computes the geometric mean of a list of numbers. The program should first prompt the user to enter the number of values they want to input. Then, it should prompt the user to enter the values themselves. Finally, it should calculate the geometric mean of the values and display the result."}, {"instruction": "Design a Python program that takes two positive integers as inputs and returns a list of all prime numbers between them. You should use modular arithmetic and a prime number generator to efficiently find prime numbers. You should also construct a trace of the operations it checks."}, {"instruction": "Write a Python program that takes an integer `num` as input and prints its binary representation. The program should take in the `num` as input and convert it into its binary representation, utilizing conditional loops to handle the different cases."}, {"instruction": "Design a Python program that simulates a magic square board game. The program should take an odd integer `n` as input and build an `n`-by-`n` magic square with each element initialized to 0. The program should ask the user to enter a row and column number `r, c` to place a number, and then place the number at the corresponding row/column. The program should then check if the sum of all elements in the magic square is 15. If it is, the program should print a message saying that the magic square constructed by the user is indeed a magic square. If not, the program should print a message saying that the square is not a magic square."}, {"instruction": "Design a Python program that asks the user to input two positive integer numbers `n` and `d`. The program should then compute the value of the following expression:\n\n`n * (n + 1) * (n + 2) * ... * (n + d) - (n - 1) * (n) * (n - 2) * ... * (n - d)`"}, {"instruction": "Develop a Python program that performs a base-10 conversion of a decimal integer into a given base. The program should prompt the user for a base, and then accept a decimal integer input from the user. The program should then compute the base-10 equivalent of the input and print the result. The program should handle invalid base inputs and return an error message if the base is not between 2 and 36."}, {"instruction": "Write a Python program that prompts the user to enter two positive integers, `num1` and `num2`. The program should then print all the integers between `num1` and `num2`, inclusive, in ascending order. If `num1` is greater than `num2`, the program should print all the integers between `num2` and `num1`, inclusive, in descending order."}, {"instruction": "Write a Python program that computes the sum of the factorials of all positive integers divisible by 5. The program should also print out the intermediate results of each step, along with the final sum."}, {"instruction": "Develop a Python program that takes a list of integers and outputs the sum of the integers under 200. The program should handle cases where the input is an empty list, a list of non-numeric values, and a list of integers that contain negative or floating-point numbers. The program should also output a message if the sum is greater than 200 and the input contains negative or floating-point numbers."}, {"instruction": "Develop a Python program that calculates the mean absolute error (MAE) between two lists of numbers, `y_true` and `y_pred`. MAE is the sum of absolute differences between the two lists of numbers, divided by the total number of elements in the lists.\n\nThe program should use a loop to iterate through the two lists simultaneously. It should return the error as a float."}, {"instruction": "Implement a Python program that takes an integer N as input and generates the following output pattern:\n```\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n```"}, {"instruction": "Write a program that accepts a 4-digit binary integer from the user and converts it to its equivalent decimal value. The program should handle cases where the number is invalid or not a 4-digit binary integer. Utilize modular arithmetic to compute the decimal value of each digit, and loop through base cases to check for invalid inputs."}, {"instruction": "Write a Python program that reads a string from user input and prints out all the permutations of the given string. The program should be efficient enough to handle strings of any length."}, {"instruction": "Write a Python program that computes the GCD (Greatest Common Divisor) of two positive integers. The program should display an error message if the input is not a positive integer. The program should also handle `0` as a special case, returning `0` for the GCD."}, {"instruction": "Design a Python program to generate a list of prime numbers using recursion. The program should continue to add numbers to the list until the list contains 100 prime numbers. The program should return the final list of prime numbers."}, {"instruction": "Write a simple Python program that takes in two integers as input and computes the GCD (greatest common divisor) of the two numbers using [Euclid's algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm). The algorithm can be implemented as a recursive function or as a loop."}, {"instruction": "Implement a Python program that simulates dice rolling. Your program should randomly generate two integers between 1 and 6, inclusive, representing the roll of two dice. The program should print the sum of the dice and the individual dice results, along with the result of the roll. The program should allow for multiple rolls."}, {"instruction": "Build a Python program that counts the number of integers between 1 and 100 that are multiples of 3, 5, and 7. The program should ensure that each of the base cases are handled correctly by the user, including handling negative or invalid values. In addition, your program should handle the case where the user inputs the lower limit greater than the upper limit."}, {"instruction": "Write a Python program that takes a number from user input and prints the sum of its digits. Use the modulus operator to extract the ones digit and the quotient digit to combine them into the sum. Continue this process until there are no more digits left in the input number."}, {"instruction": "Write a Python program that reads two positive integers from the user and computes their Greatest Common Divisor (GCD) and Least Common Multiple (LCM) respectively. The program should use recursion to compute the GCD, and handle cases where the two numbers are equal."}, {"instruction": "Develop a Python program that takes a number from the user and prints the sum of the positive integers from `1` to the input. Allow the user to repeatedly enter a number until `0` is entered. The program should be written as a function that uses recursion to compute the sum of positive integers. The function should have a base case when the input is `0`."}, {"instruction": "Write a Python program to compute the value of `n` for each of the following inequalities, given two integers `a` and `b` as inputs:\n\n- `a <= n < b`\n- `a < n <= b`\n- `n <= a < b`\n- `n < a <= b`\n\nThe program should ask the user to enter a, b, and n and then print out the result. It should handle invalid inputs gracefully, such as when `a` or `b` is not an integer or `n` is outside the range of `[a, b]`."}, {"instruction": "Write a Python program that implements a recursive function called `convert_to_base` that converts a decimal number to a different base. The function should take a decimal number and a base as arguments, and return the converted number as a string.\n\nThe function should handle cases where the base is 2, 8, or 16. The function should also validate arguments to ensure that they are non-negative integers and the base is between 2 and 16, inclusive."}, {"instruction": "Write a Python program that takes a positive integer `n` as input from the user and generates a list of all the fibonacci numbers less than `n`."}, {"instruction": "Design a Python program to convert a decimal number to binary representation using recursion. The program should handle cases where the input and output are integers between 0 and 255, inclusive. The program should handle errors gracefully by printing a message when the input or output is out of range."}, {"instruction": "Develop a Python program that generates all possible combinations of a given string, in sorted order. This program should handle the cases where the given string is empty or contains invalid characters."}, {"instruction": "Write a Python program that implements a simple calculator that accepts user input and performs simple arithmetic calculations based on the given operations: \"add\", \"subtract\", \"multiply\", \"divide\". The program should handle the following cases:\n\n- Valid operation: the operation is one of the four operations allowed by the program.\n- Invalid operation: the operation is not one of the four operations allowed by the program.\n- Invalid operands: the operands are either non-numeric or do not match the operation type.\n- Invalid operand count: the operation requires at least two operands, but the number of operands is less than two.\n\nThe program should simply print out the result of the operation."}, {"instruction": "Design a Python program that repeatedly prompts the user for a word, finds all the permutations of that word, and prints them out. This program should use recursion to handle cases where the word is at least 4 letters long and non-empty. Additionally, the program should handle cases where the input word is empty or shorter than the minimum length."}, {"instruction": "Write a Python program that takes a non-negative integer input from the user and prints a string with the decimal representation of the number spelled out, in English. For example, `123` should be printed as `\"one hundred twenty three\"`. The program should use a recursive function to spell out the integer, and the base cases should be defined as integers from 0 to 19, and from 20 to 99. The program should also handle cases where the input number is not a valid non-negative integer."}, {"instruction": "Write a Python program that prints out all the positive integers that are multiples of 3 or 5 below a given `n`. However, don't print out any multiples of both 3 and 5 in the same iteration."}, {"instruction": "Write a Python program that implements a recursive function `fibonacci_impl(n)` that computes the `n`th Fibonacci number. The function should accept a non-negative integer `n` as an argument, and should return the `n`th Fibonacci number as a result. However, it should not use any loops or iterative constructs such as `for` or `while`. Instead, it should use recursion to compute the Fibonacci numbers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: hard\nconcepts: C++ API for OpenCV image processing API, initialization of image, pointer dereference, dereferencing in loops, conditional image processing\n\n### Task", "fingerprint": null, "content": {"code": "IplImage CreationImageFTMP_3(IplImage *src,IplImage *templ_3)//src=image camera ,templ=image de reference (une des fleches)\n{\n//d\u00e9finition de la taille(largeur, hauteur) de l'image ftmp\n    int iwidth = src->width - templ_3->width + 1;\n    int iheight = src->height - templ_3->height + 1;\n\n\t//Creer un pointeur d'image ftmp de type IplImage et de taille iwidth et iheight\n    IplImage *ftmp_3 = cvCreateImage(cvSize(iwidth,iheight),IPL_DEPTH_32F,1);\n\treturn *ftmp_3;\n}", "docstring": "//Creer un pointeur d'image ftmp de type IplImage et de taille iwidth et iheight", "function_name": "CreationImageFTMP_2"}, "id": 285, "seed": "IplImage CreationImageFTMP_3(IplImage *src,IplImage *templ_3)//src=image camera ,templ=image de reference (une des fleches)\n{\n//d\u00e9finition de la taille(largeur, hauteur) de l'image ftmp\n    int iwidth = src->width - templ_3->width + 1;\n    int iheight = src->height - templ_3->height + 1;\n\n\t//Creer un pointeur d'image ftmp de type IplImage et de taille iwidth et iheight\n    IplImage *ftmp_3 = cvCreateImage(cvSize(iwidth,iheight),IPL_DEPTH_32F,1);\n\treturn *ftmp_3;\n}", "__index_level_0__": 77, "concepts": ["C++ API for OpenCV image processing API", "initialization of image", "pointer dereference", "dereferencing in loops", "conditional image processing"], "parsing_result": [{"instruction": "Implement a Python program that performs image processing using the OpenCV image processing library and NumPy arrays. The program should output an image in which each pixel is replaced with its opposite color. The solution should contain robust error handling for invalid inputs, such as invalid image files or missing dependencies."}, {"instruction": "Implement a program that loads the image from a file and generates a new image based on the provided transformation function.\nThe function should accept an image of any type supported by OpenCV, and should apply a transformation function to the image's pixels. The transformation function should be defined as a lambda function, and should accept a single pixel as an argument and return the transformed pixel value.\nThe program should also have a function that applies the transformation to each pixel of the image in a loop, and the loop should be parallelized with the OpenCV API.\nThe program should also have a function that applies the transformation to each pixel of the image in a vectorized manner, and the vectorized function should be written in C++ using the OpenCV API."}, {"instruction": "Write a Python program that uses the OpenCV image processing API (e.g., `cv2`) to process a given image. The image should be read from a file path provided by the user. The program should then create a new image based on the input image, with each pixel reassigned based on a specific algorithm. The output should be saved to a new file.\n\nFor example, given an input image with shape (800, 600, 3) and a reassignment function that reassigns a pixel's values based on the following rules:\n\n- If the pixel is blue, set the new value to (255, 0, 0).\n- If the pixel is green, set the new value to (0, 255, 0).\n- If the pixel is red, set the new value to (0, 0, 255).\n- For any other color, set the new value to (0, 0, 0).\n\nThe program should save the output image to a new file with the same name as the original image but with a new file extension (e.g., \".png\"). The reassignment function should be implemented using C++ and the OpenCV API."}, {"instruction": "Create a Python program that reads an image from disk, performs a series of image processing operations, and saves the result to a new file.\n\nFor example, given an input image `input.jpg`, the program should perform the following operations:\n\n- Convert the image to grayscale.\n- Apply a Gaussian blur with kernel size 5x5 and standard deviation 1.0.\n- Apply a median blur with kernel size 3x3.\n- Apply a bilateral filter with kernel size 5x5, sigma range 72, and sigma color 72.\n- Apply a Canny edge detection algorithm with low threshold 40 and high threshold 60.\n\nThe program should save the result to a new file `output.jpg`, overwriting the original image."}, {"instruction": "Given an image of a pizza, design a Python script that extracts the coordinates of the pizza's edges and draws the edges onto a new image. This task is for the sake of demonstrating how OpenCV can be used to implement image processing in Python.\n\nFor example, given the following image:\n\n![input image](input.jpg)\n\nThe script should output the following image:\n\n![output image](output.png)"}, {"instruction": "Construct a Python program that reads an image from a file and performs image processing operations to convert the image to grayscale and apply a Gaussian blur filter. The program should read the image from a file using the OpenCV API, convert the image to grayscale using the `cv2.cvtColor` function, and apply a Gaussian blur filter using a 5x5 kernel using the `cv2.GaussianBlur` function. The program should output the processed image to a file using the `cv2.imwrite` function.\n\nFor example, given a file named 'skyline.jpg', the program should read the image from the file, convert it to grayscale, and apply a Gaussian blur filter using a 5x5 kernel. The processed image should be written to a file named 'skyline_grayscale.png' and 'skyline_blur.png' respectively."}, {"instruction": "Implement a Python program that reads an image file, converts it to grayscale, and displays the image with a red rectangle drawn around each face detected in the image. The code must also be robust against invalid image file paths and handle exceptions appropriately.\n\nThe program must also include a robust error handling mechanism to validate the user-provided image file path and ensure it points to a valid image file."}, {"instruction": "Create a Python program that processes an image using the OpenCV image processing API. The program should accept an image file as input and output an image file with the processed pixels. The program should include robust error handling to validate the input file and check that it is an image file before proceeding.\n\nFor example, given the input image `input.jpg`, the program should output a new image `output.jpg` after processing the pixels based on the following rules:\n\n- The pixels in the output image should be the average of their 8 neighbors in the input image.\n- A pixel at the border should be excluded from the average.\n- A pixel at the corner should be excluded from the average of the 3 neighbors it shares.\n- A pixel at the center should be excluded from the average of the 5 neighbors it shares.\n\nThe output image should not be a snap shot of the processed pixels. The output should be a new image that reflects the processed pixels."}, {"instruction": "Create a Python program that implements a basic image processing application using the OpenCV library. The program should open a specified image file and apply a series of image processing operations to the image based on user input. The program should support image opening, image processing, and image saving operations. The program should handle the following commands:\n\n- `Open`: Open and display the specified image file.\n- `Grayscale`: Convert the image to grayscale.\n- `Blur`: Blur the image using a Gaussian blur with a specific kernel size.\n- `Sharpen`: Sharpen the image using an unsharp mask filter.\n- `Threshold`: Threshold the image using a specified threshold value.\n- `Save`: Save the processed image as a new file.\n\nWhen the program is run, it should prompt the user to enter a command, followed by the file path to the image to be processed. The program should continue to prompt for more commands until the user enters the `Exit` command. The program should handle all exceptions and error conditions gracefully."}, {"instruction": "Implement a Python program for image processing that applies different filters to an input image, and outputs the resulting image. The program should be written in such a way that it can be easily extended to support other kinds of filters. The following filters should be supported:\n\n- `grayscale`: convert to grayscale\n- `blur`: apply Gaussian blur\n- `threshold`: apply a thresholding operation on the input image\n- `sharpen`: apply a sharpening operation on the input image\n\nFor example, given an input image `input_image.png`, the program should output a new image `output_image.png` in the same directory, which applies a Gaussian blur to the input image and applies a threshold operation to the resulting image."}, {"instruction": "Implement a Python program that loads an image from a file and applies a specific image processing filter based on a user-defined filter function. The program should allow users to apply any image processing filter to the image, including the built-in filters such as `blur`, `brightness`, `contrast`, `saturation`, and `gamma` (i.e., $f(x) = \\text{brightness} \\times x + \\text{contrast}$, where $x$ is the input pixel value and $\\text{brightness}, \\text{contrast}$ and $\\text{saturation}$ are floating point numbers). The program should also allow users to apply custom image filters that can be implemented in C/C++ using OpenCV's image processing API.\n\nFor example, given the image `lenna.png`, the program should allow users to apply the built-in `blur` filter with the kernel size of 5 to the image, the custom `brightness` filter with a value of 1.5, the custom `contrast` filter with a value of 1.3, and the custom `saturation` filter with a value of 0.5."}, {"instruction": "Create a Python program that loads an image from a file, applies a median blur filter to the image, and saves the resulting image to a new file. The program should not use any pre-built image processing libraries or functions, relying only on the OpenCV library. The program should handle invalid file paths, file load errors, and image format errors.\n\nFor example, given an image file named `image.jpg` and a filter size of 5, the program should apply a median blur filter of size 5 to the image, saving the resulting image to a new file named `image_processed.jpg`."}, {"instruction": "Create a Python program that processes an input image represented as a NumPy array. The program should apply a convolutional filter to the image using a C++ API for the OpenCV image processing library. The filter is a 3x3 kernel that implements a Gaussian blur, i.e., the kernel should average the values of the central pixel and its surrounding pixels. The program should then output the processed image as a NumPy array. Ensure that the program handles invalid inputs such as non-square images or invalid filters, in which case the program should return an empty NumPy array."}, {"instruction": "Implement a Python program that performs image processing using the [OpenCV](https://opencv.org/) library. The program should accept a file path as input. The program should read the image from the file, resize the image to 500x500 pixels, and apply a Gaussian blur with a standard deviation of 3 pixels. The program should output the processed image to a new file.\n\nFor example, given the input file `image.jpg`, the program should read the image, resize it to 500x500 pixels, apply a Gaussian blur with a standard deviation of 3 pixels, and output the processed image to a new file `output.jpg`."}, {"instruction": "Create a C++ program that processes an image file using the OpenCV image processing API. The program should load the image from a file provided by the user and then display a modified version of the image on the screen. The modification should involve creating a new image with the same dimensions as the original image and converting each pixel to its inverse color, thus producing a negative version of the image."}, {"instruction": "Given an image, the function should convert each pixel in the image to its corresponding grayscale value. The function should output a new image in the same format as the input image.\n\nFor example, given the input image with 100x100 pixels, the function should return an image of the same dimensions with grayscale values ranging from 0 to 255."}, {"instruction": "Create a Python program that reads in an image from a given path and performs image processing on it in C++ using OpenCV. The program should load a color image from the given path, then apply a series of image processing operations to the image, including pixel value manipulation, color space conversion, and noise reduction (e.g., Gaussian blur). Afterwards, the program should save the resulting image to a new path. Include error handling to handle invalid input paths, file format exceptions, and other potential errors that may occur during image processing.\n\nFor example, given an input image `input.jpg` in the `images` directory, the program should load the image, apply the image processing operations, and then save the resulting image to a new path `output.jpg`."}, {"instruction": "Write a program that imports and opens an image using OpenCV's C++ API and processes the pixels in the image using image processing techniques. The program should also export the processed image as a new file. The solution should be written in C++ and use appropriate image processing techniques to alter the colors of the pixels."}, {"instruction": "Create a Python program that applies an image processing API using the OpenCV library. The program should take a path to an image file as input, open the image, and apply some processing to the image. The program should output the modified image."}, {"instruction": "Implement a Python program that processes images using OpenCV's image processing API. The program should accept a path to an image file as an input and perform the following operations:\n\n- Read the image file using OpenCV's `imread` function.\n- Flip the image vertically using OpenCV's `flip` function.\n- Convert the image to grayscale using OpenCV's `grayscale` function.\n- Threshold the image based on a predefined threshold value (e.g., 100) using OpenCV's `threshold` function.\n- Blend a blended image using OpenCV's `addWeighted` function. The function should accept two images, `img1` and `img2`, and compute a weighted sum of the two images as specified by a weight parameter `alpha`. For example, the function should output the following: `alpha * img1 + (1 - alpha) * img2`.\n\nThe program should output the processed image in a new file, and the output file should be named after the input file's name with the extension \"_processed.jpg\"."}, {"instruction": "Write a Python program that takes an input image and applies Canny edge detection to it. The program should first prompt the user to enter the path to an image file, and then load the image using the OpenCV `imread` function. The program should then apply Canny edge detection using the OpenCV `Canny` function and save the result as a new image. The program should include robust error handling for invalid input files and invalid Canny edge detection parameters."}, {"instruction": "Write a Python program to detect and count the number of distinct faces in a sequence of images. The program should also extract the face bounding boxes from each image and display each detected face. Each image should be processed using the OpenCV `detectMultiScale` function and the Python `cv2.rectangle` function to draw bounding boxes around the faces.\n\nThe program should output a count of the total faces detected and their bounding boxes spanning the entire image. The output should be displayed using the Python `cv2.imshow` function with a window title of \"Faces detected\".\n\nFor example, given the following four images, the program should detect and count the number of faces in each image and output the following results:\n\n```\nImage 1: 2 faces detected\nImage 2: 0 faces detected\nImage 3: 1 faces detected\nImage 4: 3 faces detected\n```"}, {"instruction": "Create a Python program that uses OpenCV's image processing API to load and process an image. The program should first load an image and resize it to a specific width and height. Then, the program should convert the image to grayscale and threshold it based on a user-provided threshold value. Finally, the program should save the processed image to a new file.\n\nThe program should include robust error handling to check that the image path is valid, as well as input validation to ensure that the threshold value is within a valid range."}, {"instruction": "Create a Python program that uses OpenCV's image processing API to perform a basic grayscale transformation on an image using an operation that converts the colors to grayscale. The program should prompt the user for an image file name and load the image into memory. It should apply the grayscale transformation to the image data and display the resulting image in a new window."}, {"instruction": "Write a Python function to process an image by loading and manipulating it using the OpenCV library.\nThe function should accept an image path as the only parameter and return a processed image in memory. The function should include error handling to verify that the image is valid, and should use the OpenCV library to perform image processing operations.\n\nFor example, the function should pass the following assertions:\n```python\nimage_path = '/path/to/image.png'\nprocessed_image = process_image(image_path)\nassert processed_image.shape == (480, 640, 3)\nassert processed_image.dtype == np.uint8\n```"}, {"instruction": "Create a Python program that reads an image from file and performs basic image processing operations. The program should read in an image as a NumPy array, convert the image to grayscale using OpenCV, and then write the processed image to a new file using the same file format as the original image. The processing operations should include:\n\n- Convert the image to grayscale using the OpenCV `cvtColor` function.\n- Apply a Gaussian blur to the image using the OpenCV `GaussianBlur` function.\n- Apply a median filter to the image using the OpenCV `medianBlur` function.\n- Apply a bilateral filter to the image using the OpenCV `bilateralFilter` function.\n- Convert the image back to RGB using the OpenCV `cvtColor` function.\n\nIf the user provides an invalid filename or the image format is not supported, the program should print a message indicating the error and exit."}, {"instruction": "Implement a Python program that takes two paths to image files as arguments. The program should load the two images, perform some basic image processing operations on the images, and then save the processed images to a new folder with a new name. The program should also display the images after all operations are complete.\n\nThe image processing operations should include:\n\n- Blurring the image using the `GaussianBlur()` function in OpenCV;\n- Converting the image to grayscale using the `cvtColor()` function in OpenCV; and\n- Cropping the image using the `crop()` function from the `skimage.util` library in Python.\n\nEnsure that the program handles invalid inputs, such as unreadable files, invalid image paths, or any image processing errors that occur during the operations."}, {"instruction": "Create a Python program that processes a list of color images provided by the user. Each image is represented as a 2-dimensional NumPy array, where each pixel is a 3-tuple of RGB values. The program should output a new image that applies a grayscale conversion to each input image, using a formula similar to the following:\n\n$$\n\\text{grayscale}(r, g, b) = \\frac{0.299r + 0.587g + 0.114b}{255}\n$$\n\nThe solution should include robust error handling to check that the input format is valid and the image format is supported.\n\nFor example, given the input `[[(255, 0, 0), (0, 255, 0), (0, 0, 255)], [(255, 255, 0), (0, 255, 255), (255, 0, 255)]]`, the program should output `[[(0.98039216, 0.98039216, 0.98039216), (0.98039216, 0.98039216, 0.98039216), (0.98039216, 0.98039216, 0.98039216)], [(0.98039216, 0.98039216, 0.98039216), (0.98039216, 0.98039216, 0.98039216), (0.98039216, 0.98039216, 0.98039216)]]`"}, {"instruction": "Implement a Python program that uses the OpenCV image processing API to process an image. The program should input an image file path and extract features from the image. The program should use `cv2.imread` to load the image and use the image processing methods from the OpenCV API, such as `cv2.cvtColor` to convert the image to grayscale, `cv2.GaussianBlur` to smooth the image, `cv2.Laplacian` to compute the Laplacian image, and `cv2.Canny` to detect edges. The program should output the processed grayscale, smoothed, and edge-detected images in a new folder."}, {"instruction": "Create a Python program that uses the OpenCV image processing API to load and display an image, convert it to grayscale, and apply a Gaussian blur to the image. The program should include robust error handling to check that at least one image file is provided.\n\nFor example, given the following image file `example.png`:\n\n![example.png](https://tva1.sinaimg.cn/large/008i3skNly1gyxc8y732gj30y40u079h.jpg)\n\nThe program should output the following processed image:\n\n![example_processed.png](https://tva1.sinaimg.cn/large/008i3skNly1gyxc8y732gj30y40u079h.jpg)"}, {"instruction": "Create a C++ program that processes an image by applying two filters:\n\n- Blurring using an averaging filter\n- Applying a custom-defined sharpening filter\n\nThe program should take an image as input and output the blurred and sharpened image as outputs. The solution should include robust error handling to validate the input image and check that at least one argument is provided before proceeding."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: IVectorView implementation, C++/WinRT function call, int to uint32_t conversion\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR uint32_t IVectorView_1_GetAt_m401DCF98BCB09DE624254EC85C6D723CE6492CAC (RuntimeObject* __this, uint32_t ___index0, const RuntimeMethod* method)\n{\n\tIVectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5* ____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5 = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5::IID, reinterpret_cast<void**>(&____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Native function invocation\n\tuint32_t returnValue = 0;\n\thr = ____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5->IVectorView_1_GetAt_m401DCF98BCB09DE624254EC85C6D723CE6492CAC(___index0, &returnValue);\n\t____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\treturn returnValue;\n}", "docstring": "// Marshaling cleanup of parameter U27___items1U27 native representation", "function_name": "IVectorView_1_GetMany_mEBDD2A781BF98D9450B52E34F2265FA193840186"}, "id": 294, "seed": "IL2CPP_METHOD_ATTR uint32_t IVectorView_1_GetAt_m401DCF98BCB09DE624254EC85C6D723CE6492CAC (RuntimeObject* __this, uint32_t ___index0, const RuntimeMethod* method)\n{\n\tIVectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5* ____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5 = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5::IID, reinterpret_cast<void**>(&____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Native function invocation\n\tuint32_t returnValue = 0;\n\thr = ____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5->IVectorView_1_GetAt_m401DCF98BCB09DE624254EC85C6D723CE6492CAC(___index0, &returnValue);\n\t____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\treturn returnValue;\n}", "__index_level_0__": 78, "concepts": ["IVectorView implementation", "C++/WinRT function call", "int to uint32_t conversion"], "parsing_result": [{"instruction": "Create a C++/WinRT function `to_uint32` that converts a 32-bit signed integer to a 32-bit unsigned integer. The function must use the following method signature: `uint32_t to_uint32(int32_t);`. The implementation should use the existing C++ `bit_cast` template function that is provided by the STL."}, {"instruction": "Develop a C++/WinRT function that takes a `IVectorView<uint32_t>` and a `uint32_t` value, and returns the index of the first element that is greater than or equal to the value, or `NA` if there is no such element."}, {"instruction": "Write a C++ function `IMath::Add` that takes two `int` values and returns their sum. The function should also support `IMath` reference and pointer types as arguments. Define the `IMath` interface class:\n\n```cpp\n    class IMath\n    {\n    public:\n        virtual int Add(int a, int b) = 0;\n        virtual ~IMath() = default;\n    };\n```"}, {"instruction": "Implement the `IVectorView` interface in C++/WinRT for Windows 10, which is a set of functions that allow you to access data stored in an underlying vector. The interface is defined in the header `winrt/Windows.Foundation.Collections.h` and implemented in `winrt/Windows.Foundation.Collections.h`.\n\nThe interface contains the following methods that take the underlying vector as input:\n- `begin()`: returns an iterator to the beginning of the underlying vector\n- `end()`: returns an iterator to the end of the underlying vector\n- `size()`: returns the number of elements in the underlying vector\n- `get(index: uint32_t)`: returns the value at the specified index of the underlying vector\n\nThe function should return the value at the specified index of the underlying vector."}, {"instruction": "Develop a Python function that takes an IVectorView and a `uint32_t` value as arguments, and returns true if the input value can be found in the IVectorView. The function should be implemented as a C++/WinRT function call."}, {"instruction": "Develop a C++ function that uses IVectorView to create an array of unsigned 32-bit integers from a string with 32-bit unsigned integers. For example, the input string `\"1234567890\"` should be converted to the array `{1234, 5678, 90}` (in this case, the input string contains 3 elements, and each string element is 4 characters)."}, {"instruction": "Design a C++/WinRT function that converts an `IVectorView` to the `std::vector`, to allow for a more C++-ish API. The input `IVectorView<hstring>` should be converted into a `std::vector<std::wstring>`."}, {"instruction": "Write a Python function that takes a `Microsoft.UI.Xaml.Input.PointerPoint` object as an argument and returns a `Microsoft.UI.Input.PointerPoint` object. The function should be implemented using C++/WinRT and the C++/WinRT interface `Microsoft.UI.Xaml.Input.IPointerPoint`."}, {"instruction": "Develop a Python function `bitwise_swap` that takes two 32-bit integers and returns a new integer with the bits of the second integer swapped with the bits of the first integer. You write assertions to ensure both integers are 32-bit unsigned integers."}, {"instruction": "Write a function `AddOne` that takes an `IVectorView` as an input parameter and returns a new `IVectorView` that contains a new vector with each element increased by 1. Note that the `IVectorView` is defined in the C++/WinRT `winrt::Windows::Foundation::Collections` namespace.\n\nThe function should be implemented in the C++/WinRT language. The function should be implemented to run with the following `winrt::Windows::Foundation` namespace import:\n\n```cpp\n#include <winrt/Windows.Foundation.h>\n#include <winrt/Windows.Foundation.Collections.h>\n```"}, {"instruction": "Develop a C++/WinRT class `IVectorView` that implements a simple read-only view of a fixed-size array of `uint32_t`s. The class should be able to support the following methods: `begin()`, `end()`, and `at(index)`, where `begin()` returns an iterator to the first element, `end()` returns an iterator to one position past the last element, and `at(index)` returns the element at a specified index. The implementation does not have to support all methods, just the ones that are required by the task.\n\nDevelop a C++ function `func(IVectorView<uint32_t> view)` that takes a `IVectorView` instance as argument and iterates over the elements in the view, printing their values as `uint32_t`. Test the function by calling `func(IVectorView<uint32_t>(array))` with the following array definition:\n\n```cpp\nuint32_t array[] = {1, 2, 3, 4, 5};\n```"}, {"instruction": "Implement the `IVectorView` interface for `std::vector` and `std::array`. Specifically, you should define `size()` and `at()` methods. The `at()` method should throw `std::out_of_range` when the given index is out of range.\n\nThe two implementations are distinct, so you can use `std::vector` for `std::array` and a native array."}, {"instruction": "Develop a C++/WinRT function that takes in a `IVectorView<uint32_t>` as arguments and returns a `IVectorView<int>` that contains the same elements as the input vector. The function should be implemented as a WinRT component."}, {"instruction": "Create a C++/WinRT function that returns the IVectorView of a collection of uint32_t values from the given IVectorView of uint32_t values. The function should accept two arguments: the first is a reference to an IVectorView of uint32_t values, and the second is a uint32_t value. The function should return an IVectorView of uint32_t values that contains the sum of the values of the collection and the input uint32_t value."}, {"instruction": "Write a C++ function `IVectorView::IndexOf(const T& value, uint32_t startIndex, int32_t& outIndex)` that takes three arguments:\n- `value`: the value to find\n- `startIndex`: the index from which the search starts\n- `outIndex`: the output index where `value` is found\n\nThe function should return `true` if `value` is found, otherwise `false`.\n\nImplement the C++ function in a header file called `custom_vector_view.h`. You can test your function in the `main` function of another C++ file called `function_test.cpp`."}, {"instruction": "Create a Windows Runtime Component (WRC) that exposes a public function `int Add(int a, int b)` that takes two integers `a` and `b` as input, and returns the sum of them. The component should be implemented in C++/WinRT (or C++/CX) with C++/WinRT functions.\n\nThe component should be called and executed in a UWP application."}, {"instruction": "Create a function that takes an `array<int32_t>` and returns an `IVectorView<int32_t>` from the `vector` class."}, {"instruction": "Develop a C++/WinRT function `IntToUInt` that takes an int and returns a `Windows::Foundation::IVectorView<uint32_t>`. The input integer should be able to fit into an unsigned int32_t value."}, {"instruction": "Develop a Python function to calculate the sum of all `IVectorView` values that are stored in a given `Windows::Foundation::Collections::IVector<Windows::Foundation::Point>` object."}, {"instruction": "Design a Python function that takes a `IVectorView` object and returns an `IVector` object containing all the elements in the input vector. The function should use the `as_vector` method from `IVectorView` to perform the conversion."}, {"instruction": "Implement a function `Gradient` that takes one argument `n` of type `int` and returns an `IVectorView` of `float` type that represents an array of `n` equidistant values in [0, 1]. The values should be calculated using the formula:\n$$\n\\text{Gradient}(n) = \\begin{cases}\n    \\frac{1}{n} & \\text{if } n = 1 \\\\\n    \\frac{1}{x} + \\frac{1}{x+1} & \\text{if } n > 1\n\\end{cases}\n$$"}, {"instruction": "Implement the IVectorView interface in the [C++/WinRT](https://docs.microsoft.com/en-us/uwp/cpp-ref-for-winrt/windows.foundation.collections.ivectorview) namespace that enables the following:\n\n```cpp\nusing namespace winrt;\nusing namespace Windows::Foundation::Collections;\nusing namespace std;\n\nint main() {\n    IVectorView<int> vec{ 1, 2, 3 };\n    vector<int> copied_vec;\n    vec.CopyTo(copied_vec);\n    // copied_vec == { 1, 2, 3 }\n    for (auto v : copied_vec) {\n        cout << v << endl;\n    }\n}\n```"}, {"instruction": "Write a Python function to convert an `IVectorView<Windows::Foundation::IString>` to a `D2D1_POINT_2F` structure. The function should accept an `IVectorView<Windows::Foundation::IString>` as an argument and return a `D2D1_POINT_2F` value."}, {"instruction": "Develop a C++/WinRT function `GetVectorView` that takes a `IVector<int>` and returns a `IVectorView<int>` that is a read-only view into the original vector. The function should perform the following:\n- Implement the IVectorView interface.\n- The function should fail gracefully if the original vector is not of type IVector<int>.\n- C++/WinRT should be used to implement the IVectorView interface."}, {"instruction": "Write a Windows Runtime function that takes a string and returns a `Windows::Foundation::IVectorView<uint32_t>` containing the Unicode code points of the input string."}, {"instruction": "Create a C++/WinRT function that takes a `Windows::Foundation::IVectorView` of `uint32_t` elements and returns the total sum of all the elements."}, {"instruction": "Write a Python function `sum_of_squares` that takes in a list of integers and returns the sum of the squares of its elements. The function should accept an IVectorView object that is a view (possibly a subset) of the list."}, {"instruction": "Write a Python function `int_view_from_slice` that accepts a slice object and returns an `IVectorView` instance that allows to read the elements of the slice."}, {"instruction": "Write a Python function `wrap` that takes an integer `value` and a `wrap_mod` to convert it to either a 32-bit unsigned integer or a 32-bit signed integer depending on the value of `wrap_mod`. The function should return True if `value` is successfully converted to a 32-bit unsigned integer, and False otherwise.\n\nIn addition to the examples mentioned in the task description, the following code demonstrates how the function should work:\n\n```python\nassert wrap(0, 3) == 0\nassert wrap(-1, 3) == 2\nassert wrap(2, 3) == 2\nassert wrap(3, 3) == 0\nassert wrap(4, 3) == 1\nassert wrap(-4, 3) == 2\nassert wrap(5, 3) == 0\nassert wrap(6, 3) == 1\nassert wrap(-5, 3) == 2\nassert wrap(-6, 3) == 1\nassert wrap(7, 3) == 0\nassert wrap(-7, 3) == 1\nassert wrap(8, 3) == 2\nassert wrap(-8, 3) == 0\n```"}, {"instruction": "Write a function that converts an integer to a WinRT `IVectorView` of its digits. The function should be able to process a `uint32_t` which is an unsigned 32-bit integer."}, {"instruction": "Implement the IVectorView class in C++ and expose it through the C++/WinRT interface definition. The interface should take in a `std::vector<int>` and allow for iterating over the underlying collection and accessing individual elements by index.\n\nIn C++ we derive from `winrt::implements<IVectorView, IVectorViewNative>` and implement the `IVectorView` interface with the required methods. The interface should take in a `std::vector<int>` and allow for iterating over the underlying collection and accessing individual elements by index.\n\nIn C++/WinRT we derive from `winrt::implements<winrt::Windows::Foundation::Collections::IVectorView<int>>` and implement the `IVectorView` interface with the required methods. The interface should take in a `std::vector<int>` and allow for iterating over the underlying collection and accessing individual elements by index.\n\nIn C++ we implement the `IVectorView` interface with the required methods, and provide a constructor to take in a `std::vector<int>`.\n\nTo test the C++/WinRT interface, we must define the following:\n\n- a `Windows::Foundation::Collections::IVectorView<int>` class that derives from `winrt::implements<winrt::Windows::Foundation::Collections::IVectorView<int>>`.\n- a `std::vector<int>` called `vector` that stores an array of integers. We provide a constructor that takes in an initializer list of integers.\n- a `winrt::Windows::Foundation::Collections::IVectorView<int>` class that derives from `winrt::implements<winrt::Windows::Foundation::Collections::IVectorView<int>, IVectorViewNative>`.\n- a `std::vector<int>` called `vector` that stores an array of integers. We provide a constructor that takes in an initializer list of integers.\n\nIn C++, we can call functions in C++/WinRT from C++.\n\nIn C++, we can call functions in C++/WinRT from C++."}, {"instruction": "Create a Windows Runtime Component that implements a `IVectorView<int>` interface. The component should have a `GetValueAt(uint32_t index)` method that returns an integer value at the given index in the collection. The component should also have a `IndexOf(int value)` method that searches for the given value in the collection and returns the index of the first occurrence, or -1 if the value does not exist. The component should also implement `Vector<int>` as a wrapper to the underlying `IVectorView<int>` interface.\n\nUse C++/WinRT to implement the component and call the `IndexOf` method. The method should return the index of an integer in a vector."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: digital input reading, debounce delay, condition checking\n\n### Task", "fingerprint": null, "content": {"code": "int getButtton(int pinNumber){\n  int lastState;\n  int reading;\n  lastState = digitalRead(pinNumber);\n  do  {\n    reading = digitalRead(pinNumber);\n    if (reading != lastState) {\n      lastDebounceTime = millis();\n      lastState = reading;\n    } \n  } \n  while ((millis() - lastDebounceTime) < debounceDelay);\n  //  lastDebounceTime = millis();\n  return reading;\n}", "docstring": "// only send if a button is pushed!", "function_name": "loop"}, "id": 299, "seed": "int getButtton(int pinNumber){\n  int lastState;\n  int reading;\n  lastState = digitalRead(pinNumber);\n  do  {\n    reading = digitalRead(pinNumber);\n    if (reading != lastState) {\n      lastDebounceTime = millis();\n      lastState = reading;\n    } \n  } \n  while ((millis() - lastDebounceTime) < debounceDelay);\n  //  lastDebounceTime = millis();\n  return reading;\n}", "__index_level_0__": 79, "concepts": ["digital input reading", "debounce delay", "condition checking"], "parsing_result": [{"instruction": "Create a Python function to check if a digital input has been held on for more than a given time delay. The function takes two arguments: `input` for the digital input signal and `delay` for the time delay in milliseconds. The function returns a boolean value indicating whether the digital input is held on for the specified time delay.\n\nFor example, if the input signal is 1, and the delay is 500 milliseconds, the function should return True because the input is held on for at least 500 milliseconds. However, if the input signal is 1, but the delay is 1000 milliseconds, the function should return False because the input is only held on for 500 milliseconds."}, {"instruction": "Write a Python function `read_digital_input` that takes an integer `bit_width` as input and returns a list of integer values corresponding to the digital input. Assume that the input is a string of 0/1 values of length `bit_width` that represents a digital input.\n\nThe function should first check for `bit_width` being an integer greater than or equal to 1. If it's not, raise an `AssertionError`. Then, it should maintain a debounce delay of 1 ms. After the debounce delay, it should check if any of the input's bit values are different from its previous value. If so, it should update the previous value and return the new list of bit values.\n\nIf the input is not a string of 0/1 values of the right length, `read_digital_input` should raise a `ValueError`. The function should handle all other cases gracefully by returning the previous value."}, {"instruction": "Create a Python function to read a digital input and return a logical state of a switch that is debounced. The input is a list of consecutive `0`, `1`, and `None` elements representing the switch being pressed down, released, or not touched at all. The function should return `True` if the switch is pressed down and `False` if the switch is not pressed down (or is not touched at all). The input list is assumed to be a continuous stream of events. The function should detect a switch-down event followed by a debounce period of 0.25 seconds. The function should be able to handle fluctuating input signals, including fluctuations in the middle of a debounce period, and in the middle of a switch-down event."}, {"instruction": "Write a Python function `read_button_state` that reads the current state of a digital input button and returns `0` if the button is not pressed, and `1` if it is. The function also implements a simple debounce filter; when the button is pressed, it will ignore the first three reads for 100 ms to ensure the button is stable before outputting a `1`. This function should be robust to noise and interference from other events."}, {"instruction": "Write a Python function `read_input` that reads a string of 8 binary digits (0/1) representing a digital input value, and returns a boolean indicating whether the input is 0 or 1. The function should wait for a maximum of 50ms for more input before returning the result. If no input is received for 50ms, the function should return `None`.\n\nHere are the rules for reading the input:\n1. If the input is 0, the function should return 0 immediately.\n2. If the input is 1, the function should wait for 20ms, then return 0 or 1 based on future input, until there is no signal for 50ms.\n3. If there is no signal for the 50ms, ignore all future signals (so the input will be considered lost) and return `None`."}, {"instruction": "Develop a Python function `monitor_input` that monitors the state of a digital input pin and returns `True` if a rising edge is detected on the pin. Use a debounce delay of 20 milliseconds and a minimum of 100 milliseconds between detections for a rising edge."}, {"instruction": "Implement a Python function `read_and_debounce_input` that takes an input and a delay (in milliseconds) as parameters. The function should continuously read the input and output the most recent value until the specified delay has elapsed. The function should also ensure that the input is only read when it changes (i.e., debounce the input)."}, {"instruction": "Create a Python function `press_button` that takes a digital input pin and a debounce delay as arguments. The function should return `True` when the input is pressed and `False` otherwise. The function should also work properly if the button is pressed and released during the debounce delay."}, {"instruction": "Develop a Python function `read_button_states` that takes an input array of 0/1 integer values and returns an array of the same length containing 0/1 integer values. The function should read the input array to detect changes from 0 to 1 and 1 to 0. The function should identify a delay of 100 ms on each button press and discard the values that are not a multiple of 100 ms after the button is released.\n\nFor example, if the input array is [0, 1, 0, 0, 1, 0, 0, 1], the function should return [0, 1, 0, 1] because the first press of button 1 was ignored because it was less than 100 ms after the previous release."}, {"instruction": "Write a Python function `read_digital_input` that reads a digital input from a 4-bit binary-coded decimal (BCD) number. The function should take the input as an integer from 0 to 15, and return the corresponding BCD number as a string. The input is a 4-bit BCD number. Each of the four binary digits in the input represents a decimal digit, from 0 to 9. For example, `read_digital_input(12)` should return `'12'`. You should implement the function with a debounce delay of 100 ms, which means that an input signal may change multiple times within the debounce period before it is considered stable."}, {"instruction": "Develop a Python function `read_digital_input` that reads a digital input and returns its value based on specific conditions and conditions. For simplicity, assume that the digital input is a simple binary switch that has two states: on and off. The function should read the state of the input and wait until a change in the state is detected. Once the input changes, the function should return the resulting state. The function should also include a debounce delay of 200ms to avoid false readings that may occur due to mechanical bounce."}, {"instruction": "Develop a Python function `read_digital_input` that reads digital input from a digital sensor. The function should return `True` if the sensor is connected to a high voltage or `False` if it is connected to a low voltage. The function should also account for the delay in the input connection, which is not instantaneous. To prevent the function from returning an incorrect result, the connection delay should be debounced by a 10-millisecond window. The function should return `False` if the input does not match the previous input within the debounced window."}, {"instruction": "Write a Python function `read_switch` that reads a digital input and returns `True` if the value changes from `0` to `1` and back to `0` within a specified debounce delay. The function should accept a `delay` argument representing the debounce delay in microseconds."}, {"instruction": "Create a Python function to read a digital input from a sensor and return a value of `1` if the sensor is activated, `0` otherwise. The function should deal with digital input bouncing and handle the digital input delay between `1` and `0` states. You can simulate the sensor by setting a variable to `1` if the input is active and `0` otherwise. The function should check if the sensor state has been changed from `0` to `1` or vice versa."}, {"instruction": "Design a digital input reading function that simulates the digital signal from a switch or a button and returns the boolean value of the signal. The function should take in the input signal as a boolean and the debounce delay (in milliseconds) as arguments. The function should return the current value of the signal immediately after the debounce delay."}, {"instruction": "Create a Python function `wait_until_keypress` that waits until a key is pressed on the keyboard. After the key is pressed, the function should return the key's ASCII value. It should not return until a key is pressed and should not block the calling program."}, {"instruction": "Develop a Python function to read a digital input pin and output the state of the pin to stdout. The pin should be read from an external hardware source and returned as a boolean value. The function should also include a debounce delay to mitigate noise in the input signal. When the pin changes state, the function should output the new state, along with the time the change occurred. The function should output when the pin is on or off. The function should handle cases where the pin state is not a boolean value."}, {"instruction": "Create a Python function to read a digital input signal and return the digital state of the signal. The function should wait for a short period of time (say 10 ms) after the signal is changed for it to be considered stable. The function should return the stable state of the signal after it is stable. Make sure to handle the case where the signal is unstable."}, {"instruction": "Create a Python function to read digital input from a binary sensor and debounce it with a specified debounce delay. The function should accept an input from a binary sensor value and return the output as a boolean value to indicate whether the value changes from the previous value or not. Optionally, the function can also set a minimum change detection threshold to indicate the minimum change that should be detected.\n\nFor example, if the function is called with the following input and the debounce delay is set to 200ms, the output should be `True` for the first two inputs and `False` for the third input.\n- Input: `0`, `0`, `0` --> Output: `False`\n- Input: `0`, `1`, `0` --> Output: `True`\n- Input: `0`, `1`, `0` --> Output: `False`\n- Input: `0`, `0`, `0` --> Output: `False`"}, {"instruction": "A digital input reading is a measure of a physical quantity with a discrete number of possible values. A digital input to a computer system is often provided by a transducer that converts a physical quantity into a discrete value. For example, a transducer might convert the pressure within a tank into a number of discrete values representing the tank's pressure (e.g., 0--7). Each discrete value may correspond to a physical quantity (e.g., 0 corresponds to no pressure, 1 corresponds to a moderate amount of pressure, 2 corresponds to a lot of pressure, etc.).\n\nHere is a list of example digital input readings and their corresponding physical quantities:\n\n|Reading|Physical Quantity|\n|---|---|\n|0|No pressure|\n|1|Moderate pressure|\n|2|A lot of pressure|\n|3|Extreme pressure|\n\nA digital input transducer can be implemented using a mechanical switch and a light bulb. The switch is opened when the quantity is low; closed when the quantity is high. When the switch is opened, the bulb lights up to show that it is on. When the switch is closed, the bulb shuts off.\n\nCreate a Python function `digital_input_to_physical_quantity` that takes a digital input reading as `reading` and converts it to its corresponding physical quantity. The function should return `None` if the input is invalid (e.g., `reading` is out of range). Note that the function does not need to be able to handle negative readings. Here are some example usages:\n\n```python\nreading = 0  # No pressure\nquantity = digital_input_to_physical_quantity(reading)  # Returns 'No pressure'\n\nreading = 1  # Moderate pressure\nquantity = digital_input_to_physical_quantity(reading)  # Returns 'Moderate pressure'\n\nreading = 2  # A lot of pressure\nquantity = digital_input_to_physical_quantity(reading)  # Returns 'A lot of pressure'\n\nreading = 3  # Extreme pressure\nquantity = digital_input_to_physical_quantity(reading)  # Returns 'Extreme pressure'\n```\n\n- The function should support reading from different input sources (e.g., a file, network socket, or sensor).\n- The function should be able to handle invalid inputs gracefully (e.g., reading from an invalid range or a bad format).\n- The function should support multiple concurrent inputs."}, {"instruction": "Create a Python function to detect whether a digital input switch is pressed or not. The input is provided as a string of 16 0--1 characters, each representing a digital input. The task is to determine whether any of the 16 inputs is currently in the \"pressed\" state.\n\nThe function should return a boolean value, indicating whether any of the inputs is in the \"pressed\" state. The switch state is assumed to be \"pressed\" after the switch is first pressed, and remains in the \"pressed\" state until it is released.\n\nThe function should consider both valid and invalid input cases. For example, the input string `\"1111111100000000\"` should return `False` since all the 16 inputs are already in the \"pressed\" state. Also, the input string `\"1111111111111111\"` should return `True` since one of the inputs is in the \"pressed\" state.\n\nInclude error handling to ensure the input string only contains valid 0/1 characters."}, {"instruction": "Develop a Python function `wait_for_input` with the following signature: `wait_for_input(pin: int, debounce_delay: int) -> bool`. The function should continuously read the state of the input pin, which is specified by the parameter `pin`. If the pin's state changes from 0 to 1, the function should wait for `debounce_delay` microseconds (1 microsecond = 0.001 ms) and check again if the state has changed. If it has, the function should return `True` and wait again for `debounce_delay` microseconds and check again. If not, the function should return `False`.\n\nThe function should handle invalid inputs gracefully, such as if `pin` is not a valid pin number, or `debounce_delay` is not a non-negative integer.\n/week1/part3/README.md\n---\ntitle: \"Week 1, Part 3\"\ndescription: \"Practice Problems for Week 1, Part 3\"\n---\n\n# Week 1, Part 3\n\nPart 3 is an extension of Part 2. It focuses on connecting the hardware and programming skills learned in Part 2 to create interactive programs.\n\nThe main objective of this part is to extend the programs with user input. A user will be able to interact with the circuit and the program by using the buttons and joystick."}, {"instruction": "Create a Python function that implements a debounce delay for a switch input. The function should take three arguments: `switch_state`, a boolean representing the current state of the switch; `prev_switch_state`, a boolean representing the previous state of the switch; and `switch_bounce_time`, a number representing the switch bounce time in milliseconds. The function should return a boolean representing the final state of the switch after bounce time passes. The switch bounce time is defined as the time interval between the switch's state change and the switch's actual state, which may be different from the bounce time due to system delays in the process."}, {"instruction": "Write a Python function for reading a digital input signal and debouncing its transitions. The function should take one parameter: `pin_number`, an integer representing the number of the digital pin on the microcontroller. The function should return a boolean value representing the digital input signal. The function should be able to check for bouncing transitions and return false values only after a delay period. The bouncing delay should be configurable."}, {"instruction": "Write a Python function `read_sensor_input(sensor: Sensor) -> bool` that reads a sensor input. The function should return a boolean value indicating whether the sensor is triggered. The function should handle invalid inputs gracefully by raising errors.\n\nThe `Sensor` class is defined as follows:\n```\nclass Sensor:\n    def __init__(self, trigger_interval):\n        self.trigger_interval = trigger_interval\n        self.last_trigger_time = None\n\n    def read(self, cur_time: int):\n        \"\"\"\n        Reads the sensor input at the specified time. Returns a boolean\n        indicating whether the sensor has been triggered since the last\n        reading.\n        \"\"\"\n        if self.last_trigger_time is None or cur_time - self.last_trigger_time >= self.trigger_interval:\n            self.last_trigger_time = cur_time\n            return True\n        return False\n```\n\nHere is an example of how to test the function:\n```\nsensor = Sensor(500)  # sensor triggers every 500ms\ncur_time = 0\nwhile True:\n    sensor_input = sensor.read(cur_time)\n    print(f\"Sensor triggered: {sensor_input}\")\n    cur_time += 1\n```"}, {"instruction": "Given a digital input `A` that receives a `1` or `0` based on a switch being turned on or off, implement a Python function to monitor the input and determine the time elapsed between successive `1`s. If the digital input is held on for more than one second, the function should return `True`.\n\nThe input `A` is read every 0.1 seconds. The function should treat `A` as a signal source to which a filter has been applied. The function should return `True` if the system is in a state where the input is held on for at least 1 second. The function should return `False` otherwise. The given `A` is a list of `0`s and `1`s."}, {"instruction": "Develop a Python function `debounce` that returns a boolean value indicating whether a given button is currently pressed or not. The function is supposed to return `True` if the button is pressed for a certain amount of time (e.g., 0.5 seconds), and `False` if the button is left unpressed. The function should utilize a debounce timer that delays the output of the function to prevent falsely detecting the button press.\n\n- Implement the function using a `threading.Timer` object.\n- Check the status of the button every 100 ms to update the debounce timer.\n- Run a `while` loop to monitor the button status and return the desired result."}, {"instruction": "Develop a Python function `get_input` that polls for user input over a given communication channel and returns the first available character. The function must wait for the input to be received for a specified period of time before returning the character. The function must return `None` if no input is received within the specified time limit."}, {"instruction": "Develop a Python function `read_button` that monitors a binary input signal from a momentary pushbutton. The function should return `True` if the button is being pressed, and `False` otherwise. The function should also implement a debounce delay to avoid falsely triggering the button event when the button is repeatedly pressed.\n\nThe `read_button` function should accept two parameters: `signal`, a binary input signal as a string of 1s and 0s that represents the button's momentary state; and `delay`, an integer that represents the debounce delay in milliseconds. The function must also implement a logic to avoid falsely triggering the button event when the button is repeatedly pressed."}, {"instruction": "Create a Python function to read the state of a digital input. The function should be able to handle multiple inputs, and should take a list of input pins to check. It should also take a time delay to delay the response of the function. The function should return the list of inputs that are currently HIGH."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: command-line parsing, command-line argument parsing, file reading, string parsing, file writing, function calls with multiple params, string concatenation, conditional branching, conditional argument assignment\n\n### Task", "fingerprint": null, "content": {"code": "int main(int argc, char* argv[]) {\n\tif (argc <= 1) {\n\t\treturn 0;\n\t}\n\n\tcxxopts::Options options(\"Model Converter\", \"Converts model format with Assimp\");\n\toptions.add_options()\n\t\t//General\n\t\t(\"i,inputFilepath\", \"Input filepath\", cxxopts::value<std::string>())\n\t\t(\"o,outputFilepath\", \"Output filepath (must contain extension)\", cxxopts::value<std::string>())\n\t\t(\"h,help\", \"Displays help\")\n\t\t(\"v,version\", \"Displays version\")\n\t\t//Assimp options\n\t\t(\"aiProcess_CalcTangentSpace\", \"Calculates the tangents and bitangents for the imported meshes\")\n\t\t(\"aiProcess_JoinIdenticalVertices\", \"Identifies and joins identical vertex data sets within all imported meshes\")\n\t\t(\"aiProcess_MakeLeftHanded\", \"Converts all the imported data to a left-handed coordinate space\")\n\t\t(\"aiProcess_Triangulate\", \"Triangulates all faces of all meshes\")\n\t\t(\"aiProcess_RemoveComponent\", \"Removes some parts of the data structure (animations, materials, light sources, cameras, textures, vertex components)\")\n\t\t(\"aiProcess_GenNormals\", \"Generates normals for all faces of all meshes\")\n\t\t(\"aiProcess_GenSmoothNormals\", \"Generates smooth normals for all vertices in the mesh\")\n\t\t(\"aiProcess_SplitLargeMeshes\", \"Splits large meshes into smaller sub-meshes\")\n\t\t(\"aiProcess_PreTransformVertices\", \"Removes the node graph and pre-transforms all vertices with the local transformation matrices of their nodes\")\n\t\t(\"aiProcess_LimitBoneWeights\", \"Limits the number of bones simultaneously affecting a single vertex to a maximum value\")\n\t\t(\"aiProcess_ValidateDataStructure\", \"Validates the imported scene data structure\")\n\t\t(\"aiProcess_ImproveCacheLocality\", \"Reorders triangles for better vertex cache locality\")\n\t\t(\"aiProcess_RemoveRedundantMaterials\", \"Searches for redundant/unreferenced materials and removes them\")\n\t\t(\"aiProcess_FixInfacingNormals\", \"This step tries to determine which meshes have normal vectors that are facing inwards and inverts them\")\n\t\t(\"aiProcess_SortByPType\", \"This step splits meshes with more than one primitive type in homogeneous sub-meshes\")\n\t\t(\"aiProcess_FindDegenerates\", \"This step searches all meshes for degenerate primitives and converts them to proper lines or points\")\n\t\t(\"aiProcess_FindInvalidData\", \"This step searches all meshes for invalid data, such as zeroed normal vectors or invalid UV coords and removes/fixes them\")\n\t\t(\"aiProcess_GenUVCoords\", \"This step converts non-UV mappings (such as spherical or cylindrical mapping) to proper texture coordinate channels\")\n\t\t(\"aiProcess_TransformUVCoords\", \"This step applies per-texture UV transformations and bakes them into stand-alone vtexture coordinate channels\")\n\t\t(\"aiProcess_FindInstances\", \"This step searches for duplicate meshes and replaces them with references to the first mesh\")\n\t\t(\"aiProcess_OptimizeMeshes\", \"A postprocessing step to reduce the number of meshes\")\n\t\t(\"aiProcess_OptimizeGraph\", \"A postprocessing step to optimize the scene hierarchy\")\n\t\t(\"aiProcess_FlipUVs\", \"This step flips all UV coordinates along the y-axis and adjusts material settings and bitangents accordingly\")\n\t\t(\"aiProcess_FlipWindingOrder\", \"This step adjusts the output face winding order to be CW\")\n\t\t(\"aiProcess_SplitByBoneCount\", \"This step splits meshes with many bones into sub-meshes so that each su-bmesh has fewer or as many bones as a given limit\")\n\t\t(\"aiProcess_Debone\", \"This step removes bones losslessly or according to some threshold\")\n\t\t//Assimp macros\n\t\t(\"aiProcessPreset_TargetRealtime_Fast\", \"\")\n\t\t(\"aiProcessPreset_TargetRealtime_MaxQuality\", \"\")\n\t\t(\"aiProcessPreset_TargetRealtime_Quality\", \"\")\n\t\t;\n\tauto result = options.parse(argc, argv);\n\n\tif (result.count(\"help\") != 0) {\n\t\tstd::cout << options.help() << std::endl;\n\t\treturn 0;\n\t}\n\tif (result.count(\"version\") != 0) {\n\t\t//Version of Model Converter\n\t\tstd::cout << VERSION_STR << std::endl;\n\t\tstd::cout << std::endl;\n\t\t//Version of Assimp\n\t\tstd::cout << \"Assimp v\" << aiGetVersionMajor() << \".\" << aiGetVersionMinor() << \".\" << aiGetVersionRevision() << std::endl;\n\t\tstd::cout << std::endl;\n\t\t//Legal string of Assimp\n\t\tstd::cout << aiGetLegalString() << std::endl;\n\n\t\treturn 0;\n\t}\n\n\tif (result.count(\"inputFilepath\") == 0) {\n\t\tstd::cerr << \"Error: You must specify input filepath\" << std::endl;\n\t\treturn -1;\n\t}\n\tif (result.count(\"outputFilepath\") == 0) {\n\t\tstd::cerr << \"Error: You must specify output filepath\" << std::endl;\n\t\treturn -1;\n\t}\n\n\tauto inputFilepath = result[\"inputFilepath\"].as<std::string>();\n\tauto outputFilepath = result[\"outputFilepath\"].as<std::string>();\n\n\tunsigned int readFileOptions = 0;\n\t//Assimp options\n\tif (result.count(\"aiProcess_CalcTangentSpace\") != 0) {\n\t\treadFileOptions |= aiProcess_CalcTangentSpace;\n\t}\n\tif (result.count(\"aiProcess_JoinIdenticalVertices\") != 0) {\n\t\treadFileOptions |= aiProcess_JoinIdenticalVertices;\n\t}\n\tif (result.count(\"aiProcess_MakeLeftHanded\") != 0) {\n\t\treadFileOptions |= aiProcess_MakeLeftHanded;\n\t}\n\tif (result.count(\"aiProcess_Triangulate\") != 0) {\n\t\treadFileOptions |= aiProcess_Triangulate;\n\t}\n\tif (result.count(\"aiProcess_RemoveComponent\") != 0) {\n\t\treadFileOptions |= aiProcess_RemoveComponent;\n\t}\n\tif (result.count(\"aiProcess_GenNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_GenNormals;\n\t}\n\tif (result.count(\"aiProcess_GenSmoothNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_GenSmoothNormals;\n\t}\n\tif (result.count(\"aiProcess_SplitLargeMeshes\") != 0) {\n\t\treadFileOptions |= aiProcess_SplitLargeMeshes;\n\t}\n\tif (result.count(\"aiProcess_PreTransformVertices\") != 0) {\n\t\treadFileOptions |= aiProcess_PreTransformVertices;\n\t}\n\tif (result.count(\"aiProcess_LimitBoneWeights\") != 0) {\n\t\treadFileOptions |= aiProcess_LimitBoneWeights;\n\t}\n\tif (result.count(\"aiProcess_ValidateDataStructure\") != 0) {\n\t\treadFileOptions |= aiProcess_ValidateDataStructure;\n\t}\n\tif (result.count(\"aiProcess_ImproveCacheLocality\") != 0) {\n\t\treadFileOptions |= aiProcess_ImproveCacheLocality;\n\t}\n\tif (result.count(\"aiProcess_RemoveRedundantMaterials\") != 0) {\n\t\treadFileOptions |= aiProcess_RemoveRedundantMaterials;\n\t}\n\tif (result.count(\"aiProcess_FixInfacingNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_FixInfacingNormals;\n\t}\n\tif (result.count(\"aiProcess_SortByPType\") != 0) {\n\t\treadFileOptions |= aiProcess_SortByPType;\n\t}\n\tif (result.count(\"aiProcess_FindDegenerates\") != 0) {\n\t\treadFileOptions |= aiProcess_FindDegenerates;\n\t}\n\tif (result.count(\"aiProcess_FindInvalidData\") != 0) {\n\t\treadFileOptions |= aiProcess_FindInvalidData;\n\t}\n\tif (result.count(\"aiProcess_GenUVCoords\") != 0) {\n\t\treadFileOptions |= aiProcess_GenUVCoords;\n\t}\n\tif (result.count(\"aiProcess_TransformUVCoords\") != 0) {\n\t\treadFileOptions |= aiProcess_TransformUVCoords;\n\t}\n\tif (result.count(\"aiProcess_FindInstances\") != 0) {\n\t\treadFileOptions |= aiProcess_FindInstances;\n\t}\n\tif (result.count(\"aiProcess_OptimizeMeshes\") != 0) {\n\t\treadFileOptions |= aiProcess_OptimizeMeshes;\n\t}\n\tif (result.count(\"aiProcess_OptimizeGraph\") != 0) {\n\t\treadFileOptions |= aiProcess_OptimizeGraph;\n\t}\n\tif (result.count(\"aiProcess_FlipUVs\") != 0) {\n\t\treadFileOptions |= aiProcess_FlipUVs;\n\t}\n\tif (result.count(\"aiProcess_FlipWindingOrder\") != 0) {\n\t\treadFileOptions |= aiProcess_FlipWindingOrder;\n\t}\n\tif (result.count(\"aiProcess_SplitByBoneCount\") != 0) {\n\t\treadFileOptions |= aiProcess_SplitByBoneCount;\n\t}\n\tif (result.count(\"aiProcess_Debone\") != 0) {\n\t\treadFileOptions |= aiProcess_Debone;\n\t}\n\t//Assimp macros\n\tif (result.count(\"aiProcessPreset_TargetRealtime_Fast\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_Fast;\n\t}\n\tif (result.count(\"aiProcessPreset_TargetRealtime_MaxQuality\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_MaxQuality;\n\t}\n\tif (result.count(\"aiProcessPreset_TargetRealtime_Quality\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_Quality;\n\t}\n\n\t//Set aiProcessPreset_TargetRealtime_Quality as a default option if no options are set\n\tif (readFileOptions == 0) {\n\t\treadFileOptions = aiProcessPreset_TargetRealtime_Quality;\n\t}\n\n\tConvertModelFormat(inputFilepath, outputFilepath, readFileOptions);\n\n\treturn 0;\n}", "docstring": "//Get the file extension and determine the output format", "function_name": "ConvertModelFormat"}, "id": 301, "seed": "int main(int argc, char* argv[]) {\n\tif (argc <= 1) {\n\t\treturn 0;\n\t}\n\n\tcxxopts::Options options(\"Model Converter\", \"Converts model format with Assimp\");\n\toptions.add_options()\n\t\t//General\n\t\t(\"i,inputFilepath\", \"Input filepath\", cxxopts::value<std::string>())\n\t\t(\"o,outputFilepath\", \"Output filepath (must contain extension)\", cxxopts::value<std::string>())\n\t\t(\"h,help\", \"Displays help\")\n\t\t(\"v,version\", \"Displays version\")\n\t\t//Assimp options\n\t\t(\"aiProcess_CalcTangentSpace\", \"Calculates the tangents and bitangents for the imported meshes\")\n\t\t(\"aiProcess_JoinIdenticalVertices\", \"Identifies and joins identical vertex data sets within all imported meshes\")\n\t\t(\"aiProcess_MakeLeftHanded\", \"Converts all the imported data to a left-handed coordinate space\")\n\t\t(\"aiProcess_Triangulate\", \"Triangulates all faces of all meshes\")\n\t\t(\"aiProcess_RemoveComponent\", \"Removes some parts of the data structure (animations, materials, light sources, cameras, textures, vertex components)\")\n\t\t(\"aiProcess_GenNormals\", \"Generates normals for all faces of all meshes\")\n\t\t(\"aiProcess_GenSmoothNormals\", \"Generates smooth normals for all vertices in the mesh\")\n\t\t(\"aiProcess_SplitLargeMeshes\", \"Splits large meshes into smaller sub-meshes\")\n\t\t(\"aiProcess_PreTransformVertices\", \"Removes the node graph and pre-transforms all vertices with the local transformation matrices of their nodes\")\n\t\t(\"aiProcess_LimitBoneWeights\", \"Limits the number of bones simultaneously affecting a single vertex to a maximum value\")\n\t\t(\"aiProcess_ValidateDataStructure\", \"Validates the imported scene data structure\")\n\t\t(\"aiProcess_ImproveCacheLocality\", \"Reorders triangles for better vertex cache locality\")\n\t\t(\"aiProcess_RemoveRedundantMaterials\", \"Searches for redundant/unreferenced materials and removes them\")\n\t\t(\"aiProcess_FixInfacingNormals\", \"This step tries to determine which meshes have normal vectors that are facing inwards and inverts them\")\n\t\t(\"aiProcess_SortByPType\", \"This step splits meshes with more than one primitive type in homogeneous sub-meshes\")\n\t\t(\"aiProcess_FindDegenerates\", \"This step searches all meshes for degenerate primitives and converts them to proper lines or points\")\n\t\t(\"aiProcess_FindInvalidData\", \"This step searches all meshes for invalid data, such as zeroed normal vectors or invalid UV coords and removes/fixes them\")\n\t\t(\"aiProcess_GenUVCoords\", \"This step converts non-UV mappings (such as spherical or cylindrical mapping) to proper texture coordinate channels\")\n\t\t(\"aiProcess_TransformUVCoords\", \"This step applies per-texture UV transformations and bakes them into stand-alone vtexture coordinate channels\")\n\t\t(\"aiProcess_FindInstances\", \"This step searches for duplicate meshes and replaces them with references to the first mesh\")\n\t\t(\"aiProcess_OptimizeMeshes\", \"A postprocessing step to reduce the number of meshes\")\n\t\t(\"aiProcess_OptimizeGraph\", \"A postprocessing step to optimize the scene hierarchy\")\n\t\t(\"aiProcess_FlipUVs\", \"This step flips all UV coordinates along the y-axis and adjusts material settings and bitangents accordingly\")\n\t\t(\"aiProcess_FlipWindingOrder\", \"This step adjusts the output face winding order to be CW\")\n\t\t(\"aiProcess_SplitByBoneCount\", \"This step splits meshes with many bones into sub-meshes so that each su-bmesh has fewer or as many bones as a given limit\")\n\t\t(\"aiProcess_Debone\", \"This step removes bones losslessly or according to some threshold\")\n\t\t//Assimp macros\n\t\t(\"aiProcessPreset_TargetRealtime_Fast\", \"\")\n\t\t(\"aiProcessPreset_TargetRealtime_MaxQuality\", \"\")\n\t\t(\"aiProcessPreset_TargetRealtime_Quality\", \"\")\n\t\t;\n\tauto result = options.parse(argc, argv);\n\n\tif (result.count(\"help\") != 0) {\n\t\tstd::cout << options.help() << std::endl;\n\t\treturn 0;\n\t}\n\tif (result.count(\"version\") != 0) {\n\t\t//Version of Model Converter\n\t\tstd::cout << VERSION_STR << std::endl;\n\t\tstd::cout << std::endl;\n\t\t//Version of Assimp\n\t\tstd::cout << \"Assimp v\" << aiGetVersionMajor() << \".\" << aiGetVersionMinor() << \".\" << aiGetVersionRevision() << std::endl;\n\t\tstd::cout << std::endl;\n\t\t//Legal string of Assimp\n\t\tstd::cout << aiGetLegalString() << std::endl;\n\n\t\treturn 0;\n\t}\n\n\tif (result.count(\"inputFilepath\") == 0) {\n\t\tstd::cerr << \"Error: You must specify input filepath\" << std::endl;\n\t\treturn -1;\n\t}\n\tif (result.count(\"outputFilepath\") == 0) {\n\t\tstd::cerr << \"Error: You must specify output filepath\" << std::endl;\n\t\treturn -1;\n\t}\n\n\tauto inputFilepath = result[\"inputFilepath\"].as<std::string>();\n\tauto outputFilepath = result[\"outputFilepath\"].as<std::string>();\n\n\tunsigned int readFileOptions = 0;\n\t//Assimp options\n\tif (result.count(\"aiProcess_CalcTangentSpace\") != 0) {\n\t\treadFileOptions |= aiProcess_CalcTangentSpace;\n\t}\n\tif (result.count(\"aiProcess_JoinIdenticalVertices\") != 0) {\n\t\treadFileOptions |= aiProcess_JoinIdenticalVertices;\n\t}\n\tif (result.count(\"aiProcess_MakeLeftHanded\") != 0) {\n\t\treadFileOptions |= aiProcess_MakeLeftHanded;\n\t}\n\tif (result.count(\"aiProcess_Triangulate\") != 0) {\n\t\treadFileOptions |= aiProcess_Triangulate;\n\t}\n\tif (result.count(\"aiProcess_RemoveComponent\") != 0) {\n\t\treadFileOptions |= aiProcess_RemoveComponent;\n\t}\n\tif (result.count(\"aiProcess_GenNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_GenNormals;\n\t}\n\tif (result.count(\"aiProcess_GenSmoothNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_GenSmoothNormals;\n\t}\n\tif (result.count(\"aiProcess_SplitLargeMeshes\") != 0) {\n\t\treadFileOptions |= aiProcess_SplitLargeMeshes;\n\t}\n\tif (result.count(\"aiProcess_PreTransformVertices\") != 0) {\n\t\treadFileOptions |= aiProcess_PreTransformVertices;\n\t}\n\tif (result.count(\"aiProcess_LimitBoneWeights\") != 0) {\n\t\treadFileOptions |= aiProcess_LimitBoneWeights;\n\t}\n\tif (result.count(\"aiProcess_ValidateDataStructure\") != 0) {\n\t\treadFileOptions |= aiProcess_ValidateDataStructure;\n\t}\n\tif (result.count(\"aiProcess_ImproveCacheLocality\") != 0) {\n\t\treadFileOptions |= aiProcess_ImproveCacheLocality;\n\t}\n\tif (result.count(\"aiProcess_RemoveRedundantMaterials\") != 0) {\n\t\treadFileOptions |= aiProcess_RemoveRedundantMaterials;\n\t}\n\tif (result.count(\"aiProcess_FixInfacingNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_FixInfacingNormals;\n\t}\n\tif (result.count(\"aiProcess_SortByPType\") != 0) {\n\t\treadFileOptions |= aiProcess_SortByPType;\n\t}\n\tif (result.count(\"aiProcess_FindDegenerates\") != 0) {\n\t\treadFileOptions |= aiProcess_FindDegenerates;\n\t}\n\tif (result.count(\"aiProcess_FindInvalidData\") != 0) {\n\t\treadFileOptions |= aiProcess_FindInvalidData;\n\t}\n\tif (result.count(\"aiProcess_GenUVCoords\") != 0) {\n\t\treadFileOptions |= aiProcess_GenUVCoords;\n\t}\n\tif (result.count(\"aiProcess_TransformUVCoords\") != 0) {\n\t\treadFileOptions |= aiProcess_TransformUVCoords;\n\t}\n\tif (result.count(\"aiProcess_FindInstances\") != 0) {\n\t\treadFileOptions |= aiProcess_FindInstances;\n\t}\n\tif (result.count(\"aiProcess_OptimizeMeshes\") != 0) {\n\t\treadFileOptions |= aiProcess_OptimizeMeshes;\n\t}\n\tif (result.count(\"aiProcess_OptimizeGraph\") != 0) {\n\t\treadFileOptions |= aiProcess_OptimizeGraph;\n\t}\n\tif (result.count(\"aiProcess_FlipUVs\") != 0) {\n\t\treadFileOptions |= aiProcess_FlipUVs;\n\t}\n\tif (result.count(\"aiProcess_FlipWindingOrder\") != 0) {\n\t\treadFileOptions |= aiProcess_FlipWindingOrder;\n\t}\n\tif (result.count(\"aiProcess_SplitByBoneCount\") != 0) {\n\t\treadFileOptions |= aiProcess_SplitByBoneCount;\n\t}\n\tif (result.count(\"aiProcess_Debone\") != 0) {\n\t\treadFileOptions |= aiProcess_Debone;\n\t}\n\t//Assimp macros\n\tif (result.count(\"aiProcessPreset_TargetRealtime_Fast\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_Fast;\n\t}\n\tif (result.count(\"aiProcessPreset_TargetRealtime_MaxQuality\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_MaxQuality;\n\t}\n\tif (result.count(\"aiProcessPreset_TargetRealtime_Quality\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_Quality;\n\t}\n\n\t//Set aiProcessPreset_TargetRealtime_Quality as a default option if no options are set\n\tif (readFileOptions == 0) {\n\t\treadFileOptions = aiProcessPreset_TargetRealtime_Quality;\n\t}\n\n\tConvertModelFormat(inputFilepath, outputFilepath, readFileOptions);\n\n\treturn 0;\n}", "__index_level_0__": 80, "concepts": ["command-line parsing", "command-line argument parsing", "file reading", "string parsing", "file writing", "function calls with multiple params", "string concatenation", "conditional branching", "conditional argument assignment"], "parsing_result": [{"instruction": "Develop a Python program that reads in a text file, parses the integer values, and writes the resulting values in a new text file. The program should output the following:\n\n- all integers greater than 0\n- all integers from 1 to 10, inclusive\n- all integers from 1 to 5,000, inclusive\n- all integers from 1 to 100,000, inclusive\n\nThe program should be invoked using the command line interface and should support the following case combinations:\n\n- `prog.py file_in.txt`\n- `prog.py file_in.txt file_out.txt`\n\nWrite assertions to confirm the input path is valid and the output path is valid only when the `file_out.txt` parameter is provided."}, {"instruction": "Write a Python class to read and write a CSV file. The CSV file is a table with three columns: an ID, a first name, and a last name. The class should be initialized with a file name, which is a path to the CSV file.\n\nThe class should support the following functions:\n- `read_csv_file()`: reads the CSV file and returns a list of `Person` objects by parsing the CSV file\n- `write_csv_file(data)`: takes the parsed `data` list as input and writes it to the CSV file. Note that the `data` list should be a list of `Person` objects.\n\nCreate a `Person` class that has three instance variables: `id`, `first_name`, and `last_name`. The class should be initialized with `id`, `first_name`, and `last_name`. The class should support the following methods:\n- `str()`: returns a string representation of the person object (e.g., `\"(id=1, first_name=Jane, last_name=Doe)\"`)\n- `to_dict()`: returns a dictionary representation of the person object"}, {"instruction": "Implement a Python class that parses the command-line arguments of a Python program. The class should have a method named `get_arguments()` that returns a dictionary of command-line arguments (`sys.argv`) as key-value pairs.\n\nThe class should also have a method named `process_files()` that takes a path to a directory as an input and generates a report in HTML format that contains the following information for each file: name, number of lines, number of words, number of characters.\n\nBy default, the directory is `/Users/johndoe/Documents/python/`. An optional command-line argument `--dir` can be used to define a different directory.\n\nThe HTML report should also contain a list of all the files and their respective statistics.\n\nThe report should be saved to a file named `report.html` in the same directory."}, {"instruction": "Implement a Python class that takes a filepath as input and provides the following functionalities with clean, readable, well-documented code:\n\n1. List all files below the directory specified by the filepath.\n2. List all files of a particular extension in the directory specified by the filepath.\n3. List all directories below the directory specified by the filepath.\n4. List all directories of a particular extension in the directory specified by the filepath.\n5. List the files and directories in the directory specified by the filepath.\n6. Print a file and its content in the directory specified by the filepath.\n7. List the files and directories in the directory specified by the filepath and print the files only.\n8. List the files and directories in the directory specified by the filepath and print the directories only.\n9. List the files and directories in the directory specified by the filepath and print the files and directories in a single line.\n\nImplement the following functionalities in the class:\n\n1. List all files below the directory specified by the filepath: list all files in a specified directory, which is the filepath provided as the input\n2. List all files of a particular extension in the directory specified by the filepath: list all files in a specified directory, which is the filepath provided as the input, and all files of a particular extension, which is the extension provided as the second input\n3. List all directories below the directory specified by the filepath: list all directories in a specified directory, which is the filepath provided as the input\n4. List all directories of a particular extension in the directory specified by the filepath: list all directories in a specified directory, which is the filepath provided as the input, and all directories of a particular extension, which is the extension provided as the second input\n5. List the files and directories in the directory specified by the filepath: list all files and directories in a specified directory, which is the filepath provided as the input, in a tuple and directory list\n6. Print a file and its content in the directory specified by the filepath: print a filecontent of a file, which is the filepath provided as the input, and the content of the file should be printed out to the console\n7. List the files and directories in the directory specified by the filepath and print the files only: list all files in a specified directory, which is the filepath provided as the input, in a tuple\n8. List the files and directories in the directory specified by the filepath and print the directories only: list all directories in a specified directory, which is the filepath provided as the input, in a tuple\n9. List the files and directories in the directory specified by the filepath and print the files and directories in a single line: list all files and directories in a specified directory, which is the filepath provided as the input, in a single line\n\nThe class should take the following attributes:\n\n- `filepath`: filepath of the directory to be listed\n- `file_extensions`: a list of file extensions (e.g., `['txt', 'py']`)\n- `dir_extensions`: a list of directory extensions (e.g., `['py']`)\n- `list_files`: a boolean that indicates whether to print a directory listing\n- `list_dirs`: a boolean that indicates whether to print a directory listing\n\nThe class should also take the following methods:\n\n- `list_files`: list all files below the directory specified by the filepath\n- `list_files_ext`: list all files of a particular extension in the directory specified by the filepath\n- `list_dirs`: list all directories below the directory specified by the filepath\n- `list_dirs_ext`: list all directories of a particular extension in the directory specified by the filepath\n- `list_files_dirs`: list the files and directories in the directory specified by the filepath\n- `print_file`: print a file and its content in the directory specified by the filepath\n- `list_files_only`: list the files and directories in the directory specified by the filepath and print the files only\n- `list_dirs_only`: list the files and directories in the directory specified by the filepath and print the directories only\n- `list_files_dirs_concat`: list the files and directories in the directory specified by the filepath and print the files and directories in a single line\n\nThe class should also handle the following options:\n\n- list all files below the directory specified by the filepath: `-f`\n- list all files of a particular extension in the directory specified by the filepath: `-f <extension>`\n- list all directories below the directory specified by the filepath: `-d`\n- list all directories of a particular extension in the directory specified by the filepath: `-d <extension>`\n- list the files and directories in the directory specified by the filepath: `-a`\n- print a file and its content in the directory specified by the filepath: `-p <filepath>`\n- list the files and directories in the directory specified by the filepath and print the files only: `-a -f`\n- list the files and directories in the directory specified by the filepath and print the directories only: `-a -d`\n- list the files and directories in the directory specified by the filepath and print the files and directories in a single line: `-a -c`\n\nThe class should also handle the following conditions:\n\n- filepath provided as the input is a directory: list all files and directories in the directory specified by the filepath, in a tuple\n- filepath provided as the input is a file: print a filecontent of a file, which is the filepath provided as the input, and the content of the file should be printed out to the console\n- no directory extensions are provided: list all files and directories in the directory specified by the filepath, in a tuple\n- no file extensions are provided: list all files and directories in the directory specified by the filepath, in a tuple\n\nThe class should handle the following invalid conditions and display an error message:\n\n- `filepath` provided as the input cannot be found: inform the user of this error and exit\n- `filepath` provided as the input is not a file or a directory: inform the user of this error and exit\n- `filepath` provided as the input is a file and `list_dirs` is True: inform the user of this error and exit\n- `filepath` provided as the input is a directory and `list_files` is True: inform the user of this error and exit\n- `filepath` provided as the input is a file and `list_dirs` or `list_files_dirs` is True: inform the user of this error and exit\n- `filepath` provided as the input is a directory and `list_files` or `list_dirs_only` is True: inform the user of this error and exit\n- `filepath` provided as the input is a directory and `list_files_dirs` is True and `list_dirs` is False: inform the user of this error and exit\n- `filepath` provided as the input is a directory and `list_dirs_only` is True and `list_files` is False: inform the user of this error and exit"}, {"instruction": "Write a Python class that provides a command-line interface to a set of three different functions. The `Command` class should be initialized with a list of `function` objects, which are all methods that operate on a passed list of data. Each `function` method has a corresponding `OptionParser` instance that defines a set of command-line arguments that are expected as input to the `function` method.\n\nThe `Command` class should allow the user to pass a file path on the command line to the `run` method that reads the contents of the file as a list of integers and then calls each of the three `function` methods with the passed data. The `run` method should output the results of each `function` call. The `OptionParser` class should be initialized with a list of `Option` objects, which defines each command-line argument that is expected as input to a `function` method. An `Option` object is initialized with a flag as a string (e.g., `--file`), a name as a string (e.g., `file_path`), a description as a string, and a default value as an integer. The `OptionParser` should also have a `parse_args` method that takes in the command-line arguments and returns a dictionary that stores the values for each `Option` object as input to the corresponding `function` method.\n\nThe `Option` class should be initialized with a flag, a name, a description, and a default value. The `parse_args` method should parse the command-line arguments and return a dictionary that stores the values for each `Option` object. The `parse_args` method should handle the case where a value is not specified, a value is specified, and multiple values are specified."}, {"instruction": "Implement a Python class with the following class attributes:\n\n- `filename`, the name of the CSV file that stores a table of customers' information, including `customer_id`, `customer_name`, `customer_address`, and `customer_phone`.\n- `n`, the maximum number of rows to read from the CSV file.\n- `growth_ratio`, the minimum growth ratio of the second column in the table.\n- `max_distance`, the maximum distance from the second column in the table.\n\nImplement the following class methods:\n- `read_file()`, reads `n` rows from the CSV file and returns a list of `Customer` objects.\n- `find_pairs()`, returns a list of all pairs of rows that meet the condition specified by the class attributes.\n\nThe `Customer` class should have the following class attributes:\n- `id`, the row index of the customer information.\n- `name`, the name of the customer.\n- `address`, the address of the customer.\n- `phone`, the phone number of the customer."}, {"instruction": "Develop a Python class that processes user input and executes the necessary steps to generate an output file based on the user input. This task can be solved in a single file with minimal code, or as separate files with self-contained functionality.\n\nThe class should take user input by parsing the command line arguments, and then execute the following steps:\n\n- read the contents of an input file and parse the contents for valid arguments\n- parse and validate the user input, or provide error messages and terminate the program\n- write the output file\n- print the output file contents to the terminal\n\nNote that the class should be defined in a separate file and a separate implementation file should be provided for each of the steps mentioned above. The files should be imported and used to implement the class."}, {"instruction": "Create a Python class with a method `parse_arguments(self, argv)` that takes a list of argument strings and parses them to initialize the class with the necessary attributes. The class should have 6 attributes: `input_file`, `output_file`, `max_distance`, `growth_ratio`, `min_value`, and `max_value`. The class should be initialized with `input_file`, and `output_file` (defaulting to `None` if not given) and the remaining attributes (defaulting to 10 and 100, respectively) should be optional.\n\nThe class should also have a method `run(self)` that behaves as follows:\n\n1. Read the input file and store its content as a list of integers in the class attribute `input_list`.\n2. Call the `parse_arguments` method with the argument list to initialize the class attributes with the correct values.\n3. Call the `find_pairs` method to find the pairs of elements in the `input_list` that satisfy the condition specified by the attributes and output the results to the `output_file` as a `csv` file.\n\nThe `find_pairs` method should have the following parameters:\n\n- `input_list`: a list of integers to be searched for pairs\n- `max_distance`: an integer that represents the maximum distance between two elements of the input list, where `0` indicates that no such condition should be applied\n- `growth_ratio`: a float that represents the minimum ratio between the second element of a pair and the first by which the pair should be selected, where `1` indicates that no such condition should be applied\n- `min_value`: an integer that represents the minimum value of a pair to be selected, where `None` indicates that no such condition should be applied\n- `max_value`: an integer that represents the maximum value of a pair to be selected, where `None` indicates that no such condition should be applied\n- `output_file`: the path of the output file that stores the result of the algorithm\n\nFor example, given the following input file `input.txt`:\n\n```\n7\n32\n5\n2\n9\n10\n14\n13\n15\n1\n```\n\nand the following argument list:\n\n```\npython main.py --input-file input.txt --output-file output.txt -m 3 -g 0.9 -v 5 -M 20\n```\n\nThe program should choose the following parameters:\n\n- `max_distance`: 3\n- `growth_ratio`: 0.9\n- `min_value`: 5\n- `max_value`: 20\n\nand search for pairs in the `input_list` based on these parameters. The results should be output as a `csv` file to `output.txt` with the following format:\n\n```\n32,14\n32,15\n32,1\n5,9\n5,10\n2,10\n2,14\n2,15\n2,1\n```\n\nPlease note that the order of the output pairs is not guaranteed to match the order of the input list, i.e., the order of the elements in the `input_list` should not be maintained in the `output_file`."}, {"instruction": "Implement a Python class for parsing a command line argument, where the command line argument is a string containing a command with associated arguments. The command format is:\n```\nCOMMAND [ARGUMENTS]\n```\nFor example, the command \"python script.py -d -f 20 file.txt\" has command \"python script.py\", followed by two arguments: \"-d\" and \"-f 20\". The class should implement a method `parse` that takes the command line argument as an input and returns a `namedtuple` with three fields: `command`, `arguments`, and `value`.\n\nThe `command` field should be the command name as a string, the `arguments` field should be a list of argument names as strings, and the `value` field should be the argument value as a string. In this case \"-d\" and \"-f 20\" should be interpreted as \"value\" and \"20\" respectively. For the sake of simplicity, all arguments should be specified as strings.\n\nA sample output of the class method call `parse` should be:\n```\nnamedtuple(command='python script.py', arguments=['-d', '-f 20'], value='20')\n```"}, {"instruction": "Design a Python class to read a list of integers from a file and remove all negative integers and all integers that are multiples of 3 from the list. The class should have a method `save_to_file` that takes an output file name as an input, writes the remaining elements to this file, and returns the file path of the newly created file.\n\nThe class should also have a method `find_max_length` that returns the maximum length of two strings from a list of strings. The method should return `-1` if the list is empty or contains a single element."}, {"instruction": "Develop a Python class that implements a multi-threaded web crawler that crawls a website from a given address. The crawler should take two arguments: the starting website URL, and the maximum number of threads to use during the crawl. The class should also handle user-interrupts and log all errors that occur during crawling. Generate a report of the crawled websites, including the URL, whether it was a file or a directory, and the number of files in the directory."}, {"instruction": "Implement a Python class that computes the average price of an arbitrary number of products read from a text file and writes the result to a text file. The input file is a text file containing comma-separated product information in the following format: `name,price` where `name` is a string and `price` is a floating point number. You should write a main method that takes one argument: a string specifying the path to the input file. The output file should be named `output.txt` and contain the average price of all products in the input file, as a floating point number."}, {"instruction": "Create a Python program that reads a file containing integers separated by spaces and writes to a new file, a list where each integer is represented by its base 10 and base 16 representations, separated by a tab. Each line should also contain the number of digits in its base 10 and base 16 representations.\n\nFurthermore, you will need to parse command line arguments to determine the input and output files. The program should provide appropriate error handling if the input file cannot be read, or if the output file cannot be written."}, {"instruction": "Write a Python class with a method `run_test(self)` that reads a text file consisting of one or more lines containing a test case, and writes the output of the method call to another file. The method call should contain two arguments: `input_file`, the path to the file with the test case, and `output_file`, the path to the file to write the result to. The test case file should be structured as follows:\n\n```\ncase_name 1st_arg 2nd_arg ...\ncase_name 1st_arg 2nd_arg ...\ncase_name 1st_arg 2nd_arg ...\n```\n\nEach line in the test case file is an independent test case of the method call to be executed. Each test case is comprised of a single word representing the method name, which should be a Python class method that has a single argument, a string, and a return value of type `bool`. Each test case also contains several arguments, which must be converted to the appropriate data type before the method call. The output of the method call should be written to a new file using the same format as the original test case file.\n\nThe output file should contain the test case name, along with the output of the executed method call. If the method call throws an exception, the exception should be written to the output file as well.\n\nFor example, given the following test case file:\n\n```\ntest_method 1 2\ntest_method 3 4\n```\n\nthe class should read this file, execute `test_method` with the given arguments, and write the results to a new file. The output file should contain the following:\n\n```\ntest_method 1 2 True\ntest_method 3 4 False\n```\n\nThe class should also read the test cases from a file in this format, execute the method call, and return the results."}, {"instruction": "Create a Python class with a method `find_similar_files(path)` that takes a file path as an argument and returns a list of paths for all files within that directory that are similar to the file at the provided path. Implement a similarity metric that measures the number of lines of common content between the file at the provided path and other files within the directory. The similarity metric should be normalized to the range of [0--1]."}, {"instruction": "Implement a Python class that parses command-line arguments and writes the results to a text file. The class should have a method `parse(args)` that takes `args` as input.\n\nThe `args` input is a list of command-line arguments. A command-line argument is a string that consists of a name and a value separated by an equal sign (e.g., `--name=value`).\n\nThe method should parse the list of arguments and return a dictionary whose keys are the names of arguments and values are the parsed values. When the argument has a value of `True`, assign the parsed value to `True`. Otherwise, if the argument has no value, assign it to `False`.\n\nThe parsed values of a given name should be stored in the dictionary in the same order as they are in the input. For example, given a list of arguments:\n- `--name=value1`\n- `--name`\n- `--name=value2`\n\nthe method should return a dictionary with the following keys and values:\n- `'name': ['value1', 'value2']`\n\nConsider the following edge cases in the input:\n- `--name=True`\n- `name=value`\n- `--name=1`\n- `--name=value=value`\n\nThe method should handle these edge cases in a consistent way.\n\nImplement the class and the method according to the above description in the same file."}, {"instruction": "Develop a Python class that reads the contents of a file line-by-line and processes them. The file is defined by the `input_file` parameter, and the processing can be defined by the `function_params` argument. This class should be able to define a unique hash for each instance to ensure the execution is deterministic.\n\nThe `function_params` argument is a list containing the name of the function to execute and the parameters for that function. For example, for `function_params = ['split_string', 'a', 'b']`, the file processing function should be `split_string(line, 'a', 'b')`.\n\nDefine a function named `split_string` that takes three parameters, `line`, `a`, and `b` and returns the number of occurrences of `a` within `line` if `a` is within `line` and `b` otherwise."}, {"instruction": "Implement a Python class with `run_program(filename)` method that automates the execution of a Python program on a text file. The text file should contain a single line of Python code that should be executed. The class should parse the code and execute the program. If the code contains multiple lines, the program should be executed for each line."}, {"instruction": "Create a Python class with a method `run_program(program_path, filename)` that takes in a program path and a filename as command-line arguments. The program should move the file at the `program_path` to a location within the current directory (i.e., the path of the program) and then write a new file named `filename` in the same location with the contents of the original file appended by a new line at the end."}, {"instruction": "Create a Python class `Song` that should contain information about a song that can be represented as a string. The class should allow for a variety of constructors to specify the song's information including:\n\n- A string with the song's title and artist name\n- A string with the song's full title, including the album name\n- A string with the artist's name (the song has no title)\n- A string with the album name (the song has no title or artist)\n- A string with the first line of the song lyrics\n- A string with the full song lyrics\n\nObserve the following rules for parsing the input string in the constructors:\n\n- If the input string contains the song's title and artist, the song's title should be extracted from the input string, and the artist should be set to `None`.\n- If the input string contains the song's full title, the song's title should be set to the string before the album name, and the album name should be set to the string after the album name.\n- If the input string contains the artist name only, the song's title should be set to the artist name, and the artist should be set to `None`.\n- If the input string contains the album name only, the song's title should be set to the album name, and the artist should be set to `None`.\n- If the input string contains the first line of the lyrics, the song's lyrics should be set to the input string, and the song's title should be set to the empty string.\n- If the input string contains the full song lyrics, the song's lyrics should be set to the input string, and the song's title should be set to the empty string, and the song's artist should be set to the empty string.\n\nAdditionally, the class should allow for the following functions to be called on the instance of the class:\n\n- `print_lyrics()` should print the song's title and lyrics.\n- `print_full_song()` should print the song's title, artist, album, and lyrics.\n- `write_song_to_file(filename)` should write the song's information to a new text file with the song's title as the file name."}, {"instruction": "Implement a Python class with the `add_to_file` method that takes in a file path and a line of text to add to the file. It should return True if the line is successfully added to the file. The method should print a log message to the console indicating the status of the addition of the line.\n\nInclude a function to remove all lines from the file that contain a given word."}, {"instruction": "Develop a Python program that reads a text file containing one URL per line and returns the top 10 most visited URLs in descending order of total visits. Ensure that the program also handles cases where the file is empty or is missing. Additionally, include error handling and logging to manage exceptions that might occur during the execution of the program."}, {"instruction": "Develop a Python class that reads a file of order-based tickets, order number and price, and validates the order. The input file can be provided as command-line argument to the program.\n\nThe program should then present an interactive menu with the options to add a new order, remove an existing order, print the entire list of orders, and exit the program. The menu should ensure users input valid options and updates the output accordingly.\n\nWhen the `add` option is selected, the user should be prompted to enter an order number and price, which should then be added to the order list. If the number is already in the list, an error message should be displayed and the user should be prompted to enter a new number. The `remove` option should be similarly implemented. If the user does not enter an order number or if the number is not found, an error message should be displayed.\n\nThe `print` option should display the entire order list, displaying the order number and price, on separate lines.\n\nAfter the `exit` option is selected, the program should terminate."}, {"instruction": "Implement a Python class that reads configs from a config file in JSON format and performs various operations based on these configs. The class should support the following operations:\n\n- `parse_config_file`: reads the JSON file and parses it into a dictionary\n- `parse_params`: parses the command-line arguments into a dictionary\n- `save_params_to_file`: saves a dictionary of params to an output file specified by the user\n- `read_file_with_params`: reads a file specified by the user and prints the contents of the file with the specified params\n- `print_params`: prints the values of the params to the user\n- `update_config`: updates a specific field in the config with the provided value\n- `delete_config`: deletes a specific field in the config\n- `add_config`: adds a specific key and value to the config\n\nEach of these functions should return an error code indicating whether the function was executed successfully or not. Utilize the `argparse` Python module to parse command-line arguments and enforce argument validation. Utilize the `json` Python module to read the config file."}, {"instruction": "Design a Python class that processes text files (.txt) containing commands and text. The class should read a text file and parse each line into a command and optionally a parameter. It should then call other functions according to the command.\n\nThe class should only accept commands and parameters from a set of user-defined commands. Other commands should be ignored (except for `quit`) and parameters should be ignored (except for variable assignment) when the command is not among the valid ones.\n\nThe class should write the output of each function call to a separate output file, which should be named by the command with the extension .txt appended. For example, if the command is `function`, the output file should be named 'function.txt'.\n\nThe class should output error messages to the standard output if there is an error in parsing the command or if it makes any other mistake."}, {"instruction": "Design a Python class that defines a program that reads the configuration file in a specified directory that contains the following information:\n\n- `filename`: the name of the source file (e.g., `data.txt`)\n- `delimiter`: the delimiter used to separate data in the source file (e.g., `,`)\n- `header`: whether the source file has a header that defines column names (e.g., `True`)\n- `header_row`: if the source file has a header, the row where the column names are defined (e.g., `2`)\n- `target_column`: the target column to be predicted (e.g., 0)\n- `feature_columns`: the list of feature columns to be used as inputs (e.g., `[1, 3]`)\n- `num_folds`: the number of folds used for cross-validation (e.g., `10`)\n\nThe class should also include a method `train` that trains a machine learning algorithm on the given data and predicts the target column with the training data. In addition, the class should also include a method `save_model` that saves the trained model to a specified directory."}, {"instruction": "Write a Python program that accepts an integer `n` as command line argument and creates a file named `textfile.txt` in the current directory. The file should contain `n` lines, each of which is a string of space-separated numbers.\n\nThen, read the file and print the following:\n\n- the first line, containing the sum of all numbers in the first line\n- the second line, containing the average of all numbers in the second line\n- the third line, containing the `min` and `max` elements of all numbers in the third line\n- the fourth line, containing the first unique string among all the strings in the fourth line\n- the fifth line, containing the number of unique strings among all the strings in the fifth line\n\nThe program should utilize function calls with multiple parameters, and it should be written in a reusable way such that the file path and the number of lines can be passed into a single function call."}, {"instruction": "Implement a Python class that reads a file and parses the lines in it. The class should be initialized with a file path as input and provide methods `read_lines()` and `write_lines()`, which respectively read and write lines in the file. The `read_lines()` method should return the contents as a list of strings, while the `write_lines()` method should write the supplied list of strings to the file.\n\nThe class should also provide a method `read_lines_and_write_lines()` that reads the lines in the file and writes the lines with modified contents to the file. The method should call `read_lines()` and `write_lines()` internally.\n\nThe class should also provide a method `read_lines_and_modify_lines()` that reads the lines in the file and modifies the lines with a provided function for each line and writes the modified lines to the file. The method should call `read_lines()` and `write_lines()` internally.\n\nThe class should also provide a method `read_lines_and_modify_lines_with_params()` that reads the lines in the file and modifies the lines with a provided function for each line and writes the modified lines to the file. The method should call `read_lines()` and `write_lines()` internally, and it should also take a list of parameters to be passed to the function in the second argument."}, {"instruction": "Implement a Python class with a method `merge_files` that takes one argument, a list of file paths, and creates a new text file of the same name as the last file path in the list, where the contents of each file are merged in the order they appear in the list. The file should be written in the same directory as the last file path in the list. Use the Python standard library to read and write files."}, {"instruction": "Implement a Python class with a method `filter_files` that takes in command-line arguments as input via `sys.argv` and outputs the names of all files within a specified directory that satisfy certain criteria.\n\nThe `filter_files` method should output the file names of all files in the directory path defined by the `--dir` argument, those whose file size is greater than the specified `--size` argument, and those whose name contains the specified `--search` argument, if provided. The method should also provide a `--verbose` flag that outputs the file sizes in human readable format. When logging is disabled, the method should not output any logs.\n\nThe method should take in at least three command-line arguments: the directory to search, the file size threshold, and the search string. The search string is optional. You can assume the directory path is in the format `/home/user/dir_path` and all file sizes are positive integers in bytes.\n\nThe method should check if `--size`, `--search`, and `--verbose` are provided as command-line arguments by verifying their presence in `sys.argv`. If they are not, the method should return without doing anything. If they are, the method should output the following messages accordingly:\n- `--size`: \"Using the size threshold of $size$\"\n- `--search`: \"Using the search string of $search$\"\n- `--verbose`: \"Log verbosity enabled\"\n\n**Note:** The method should be able to handle spaces in directory path and search string.\n\nThe method should handle cases where the directory path or search string is invalid, such as if the directory path is a relative path. In these cases, the method should print out a relevant error message and exit."}, {"instruction": "Implement a Python class with a method `string_parser(file_path, delimiter, header_row)` that reads a CSV file with a header row and returns a list of dictionaries of key-value pairs separated by the given `delimiter`. The method should also optionally take an integer `header_row` to indicate the row number of the header row.\n\nThe class method should utilize the `argparse` module to parse command-line arguments for the `file_path`, `delimiter`, and `header_row`. If a `header_row` is not provided, the method should assume the first row of the file is the header.\n\nWrite assertions to ensure the input file exists and is readable. Handle any exceptions that occur during file reading. When the input file is successfully read, write the parsed data to a new CSV file, `file_path_2` with the same header row and delimiter."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: structure declaration, pointer declaration, pointer dereferencing, pointer function argument, pointer to structure variable, pointer to structure function return, pointer arithmetic\n\n### Task", "fingerprint": null, "content": {"code": "int main()\n{\n    struct Sparse s1,s2,*s3;\n    cout <<\"Creating the Matrix1\\n\";\n    Create(&s1);\n    cout <<\"Creating the Matrix2\\n\";\n    Create(&s2);\n    s3 = add(&s1, &s2);\n    cout <<\"Displaying the First Matrix\\n\";\n    Display(s1);\n    cout <<\"\\nDisplaying the Second Matrix\\n\";\n    Display(s2);\n    cout <<\"\\nDisplaying the Sum of the Matrix1 and Matrix2\\n\";\n    Display(*s3);// As this was a pointer so derefrencing it.\n    return 0;\n}", "docstring": "// Array of type element and size num.", "function_name": "Create"}, "id": 305, "seed": "int main()\n{\n    struct Sparse s1,s2,*s3;\n    cout <<\"Creating the Matrix1\\n\";\n    Create(&s1);\n    cout <<\"Creating the Matrix2\\n\";\n    Create(&s2);\n    s3 = add(&s1, &s2);\n    cout <<\"Displaying the First Matrix\\n\";\n    Display(s1);\n    cout <<\"\\nDisplaying the Second Matrix\\n\";\n    Display(s2);\n    cout <<\"\\nDisplaying the Sum of the Matrix1 and Matrix2\\n\";\n    Display(*s3);// As this was a pointer so derefrencing it.\n    return 0;\n}", "__index_level_0__": 81, "concepts": ["structure declaration", "pointer declaration", "pointer dereferencing", "pointer function argument", "pointer to structure variable", "pointer to structure function return", "pointer arithmetic"], "parsing_result": [{"instruction": "Design a Python function to calculate the sum of the digits of a positive integer. The function should accept a pointer to a structure of type `DigitList` that contains a linked list of integers. The `DigitList` structure should contain a pointer to the head `DigitNode` and a pointer to the tail `DigitNode`. Each `DigitNode` should contain a `value` field and a `next` pointer to the next node. The `value` field should store an integer digit."}, {"instruction": "Design a function that converts a hex string into a byte array of integers. The function should accept one input parameter, a pointer to a character array, which represents a hex string. The function should return a pointer to a byte array of integers, with each integer representing a byte of the original hex string. The function should dynamically allocate memory for the byte array based on the length of the input hex string."}, {"instruction": "Create a Python function `print_structure_info` that prints the structure name, size, alignment, and address of a C-style structure. The function should take a pointer to the structure as an argument. It should also include a function prototype for the function to be implemented."}, {"instruction": "Design a Python function to convert a pointer to a structure into a pointer to its structure member. The function should accept a pointer to a structure as an input and return a pointer to the member of the structure. The function should be able to handle both primitive and derived types in the structure. The function should also be able to handle pointer arithmetic and dereferencing."}, {"instruction": "Design a function `generate_pointer` that takes two integer arguments, `row` and `col`, and returns a pointer to an array of pointers that represents a 2D array."}, {"instruction": "Design a Python function that accepts an array of structures as an input, and returns a pointer to a structure that has a value of 10 in the array of structures. The function should iterate over the array of structures and return a pointer to the first structure having the value of 10. Provide clear error handling and logging to manage exceptions that might occur during the execution of the function."}, {"instruction": "Create a Python function to implement a function that takes a pointer to an embedded structure as an argument and returns a pointer to the structure type. The function should also update the target structure's member variables to reflect the input values."}, {"instruction": "Create a Python function `create_pointer_dereference_function` that takes a pointer to a structure variable as input, along with the structure name, and returns a pointer function that dereferences the pointer variable and returns the value stored in the structure."}, {"instruction": "Design a function that takes a pointer to an array of structures as its input, and sorts the elements of the array based on the value of a particular member variable of the structure. The function should work for any data type that can be stored in the member of the structure.\n\nThe function should support sorting the array by multiple member variables, and should return the sorted array as a pointer to the array of structures."}, {"instruction": "Create a Python function that takes a pointer to a structure variable as an argument and returns the pointer to another structure variable containing the sum of the original structure's fields."}, {"instruction": "Create a Python function to declare a `struct` type `Person` with two fields, `name` and `age`, and implement a function called `print_person` to print the values of these fields. The function should take a pointer to the `Person` struct as an argument and dereference it to access the `name` and `age` fields."}, {"instruction": "Implement a Python function `my_strcpy` that copies a string from a given source pointer to a given destination pointer. It should use pointers to perform the copying operation without using any other pointer-related functions or methods."}, {"instruction": "Design a Python function to swap two numbers without using an additional variable. Solve the problem using pointers and pointer arithmetic."}, {"instruction": "The repository contains a large collection of example codes for introductory programming concepts. These examples are intended to be easy to understand and implement, but they do not contain all the necessary information to solve the actual coding tasks. Your task is to modify each example code to include the missing information and make it understandable.\n\nThis task requires a combination of designing, debugging, and refactoring the code to make it work and maintainable."}, {"instruction": "Create a Python function called `reverse_string` that takes a pointer to a C-style string as an input and returns a pointer to a new reversed C-style string. The function should modify the original C-style string in-place and return a pointer to the new string. The function should use a recursive approach, where it reverses the characters of the original string using a temporary buffer for storing the reversed characters. The function should use pointer arithmetic to traverse the string and modify the characters in-place.\n\nAn example of the function's usage might be:\n```python\nstring_ptr = \"hello world\"\nreverse_string(string_ptr)\nprint(string_ptr)  # outputs \"dlrow olleh\"\n```"}, {"instruction": "Write a Python function `get_pointer_size` that returns the size in bytes of a pointer type (e.g., int*, char*, void*). The function should take no input arguments and should use macros to statically determine the size of type 'void*' as 8 bytes."}, {"instruction": "Implement a Python function `calculate_max_profit` that accepts two integer arrays `prices` and `costs` as input. The function should return the maximum profit that can be obtained by selling financial assets with the given prices and costs. The function should also output a list of indices that indicate the optimal transaction strategy that produces the maximum profit."}, {"instruction": "Write a Python function `combine_rectangle` that takes two rectangles (represented as tuples of four integers) as parameters. The function should return a new rectangle that is the union of the two input rectangles. The new rectangle should be calculated using the minimum and maximum values of the coordinates along each axis. Use pointers in the implementation."}, {"instruction": "Design a Python function that accepts a pointer to a structure declaration. The function should traverse the linked list of structures stored in the `next` field of each structure and print the values of the fields of the structure. The function should also print the values of each structure's `next` field to test the correctness of the function."}, {"instruction": "Design a Python function that takes an array of integers and prints the unique list of integers as a single linked-list structure. The linked-list should be traversed sequentially and print all the elements."}, {"instruction": "Create a Python function that takes a pointer to a structure as an argument, and returns a pointer to the structure as a result. The function should modify the structure's value of some attributes and return the modified structure."}, {"instruction": "Write a Python function named `print_list_of_struct` that takes a pointer to a structure array and the array size as arguments and prints the contents of the structure array. The structure should contain three fields: a string, an integer, and a pointer to a structure."}, {"instruction": "Create a Python function to implement a recursive function that takes an integer, `n`, as an input and returns the sum of all natural numbers from 1 to `n` (inclusive). The function should use a pointer to a structure to store the return value."}, {"instruction": "Design a Python function that implements a simple linked list data structure with the following operations:\n\n- init_list: initializes the linked list by assigning a head node with a given value.\n- insert_node: inserts a new node with a given value before a given node.\n- insert_head: inserts a new node with a given value at the head of the linked list.\n- remove_node: removes a given node from the linked list.\n- delete_list: deletes the whole linked list.\n- traverse_list: traverses the whole linked list and prints out the values of all nodes.\n\nInclude assertions to check if the input is valid and to ensure that the list is functional after each operation. The function should be written in the most optimized way to achieve the best performance."}, {"instruction": "Write a Python program to implement a linked list with the following operations:\n1. `init_list` - creates a new linked list and returns a pointer to the list's head node\n2. `insert_node` - adds a node to the linked list at the specified position\n3. `delete_node` - removes a node from the linked list at the specified position\n4. `print_list` - prints the contents of the linked list to the console\n\nEach node in the linked list should contain a `data` field and a `next` pointer that points to the next node in the list.\n\nThe program should include a `main` function that tests the linked list operations and utilizes the `init_list`, `insert_node`, `delete_node`, and `print_list` functions to create and modify a linked list."}, {"instruction": "Develop a Python function to create a phone directory structure, where each entry is a namedtuple containing the name, phone number, and email address of a person. The function should accept a list of tuples of names and phone numbers, and return a dictionary where each name is mapped to the corresponding entry in the list. Use a pointer to the list of names as the first argument of the function, and use a pointer to the dictionary as the second argument.\n\nThe function should also implement a function named `lookup_by_name` that takes a dictionary and a name as arguments, and returns the entry for the given name. This function should use pointer dereferencing to access the dictionary and the name from the arguments."}, {"instruction": "Create a Python function that implements a stack data structure that supports push, pop, peek, and print functions. The structure should use dynamically allocated memory to store the values on the stack. The function should also implement the `len` function to return the number of elements in the stack."}, {"instruction": "Design a Python function to swap the values of two integers using a pointer to an integer. The function should perform the swap without using a temporary variable."}, {"instruction": "Implement a Python function to parse a JSON document and return a dictionary representation of it. The function should support the following syntax:\n\n```python\nparse_json(json_string)\n```\n\nThe function should return a dictionary containing the parsed JSON document. The function should support the following features:\n\n- Support for basic JSON types: strings, integers, floating point numbers, boolean literals, null values\n- Support for JSON arrays: `[...]`\n- Support for JSON objects: `{...}`\n- Support for nested JSON objects and arrays\n- Support for values of type string that contain escaped characters (e.g., `\\\\\"`)"}, {"instruction": "Design a Python function `swap_pointers` that takes two pointer variables to structure instances and swaps their values. The function should not return anything, and you must use pointer arithmetic to swap the values. For example, given two structure instances A and B, the function should swap their values and return nothing."}, {"instruction": "Write a Python function `print_struct_fields` that takes a pointer to a structure and returns a string containing the names (and optionally values) of all its fields in the order they are declared in the structure's declaration. The function should use a pointer to a structure as a parameter, not a structure object directly."}, {"instruction": "Write a Python function called `swap_member_values`, which takes three pointers to members of a structure, `ptr1`, `ptr2`, and `ptr3`, each of which points to a member of a structure type, `Structure`. The function should swap the values of `ptr1` and `ptr2`, and `ptr1` and `ptr3` respectively.\n/examples/example_6.py\ndef convert_size(size):\n    suffix = 'bytes'\n    if size >= 1024:\n        size /= 1024\n        suffix = 'KB'\n        if size >= 1024:\n            size /= 1024\n            suffix = 'MB'\n            if size >= 1024:\n                size /= 1024\n                suffix = 'GB'\n                if size >= 1024:\n                    size /= 1024\n                    suffix = 'TB'\n    return f\"{round(size, 1)}{suffix}\"\n\n\nif __name__ == '__main__':\n    print(convert_size(1024 * 512))  # 512.0KB\n    print(convert_size(1024**2 - 1))  # 1024.0KB\n   if s[i] == s[i+1]:\n                return False\n            elif i == 0:\n                continue\n            if s[i-1] == s[i+1]:\n                return False\n        return True\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: SOAP type instantiation, namespace handling, data structure instantiation, data structure manipulation, variable declaration\n\n### Task", "fingerprint": null, "content": {"code": "soap_instantiate_ns3__FECAEARequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FECAEARequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tns3__FECAEARequest *p;\n\tsize_t k = sizeof(ns3__FECAEARequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FECAEARequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FECAEARequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FECAEARequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FECAEARequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_in_ns3__FECAEARequest"}, "id": 321, "seed": "soap_instantiate_ns3__FECAEARequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FECAEARequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tns3__FECAEARequest *p;\n\tsize_t k = sizeof(ns3__FECAEARequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FECAEARequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FECAEARequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FECAEARequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FECAEARequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "__index_level_0__": 82, "concepts": ["SOAP type instantiation", "namespace handling", "data structure instantiation", "data structure manipulation", "variable declaration"], "parsing_result": [{"instruction": "Develop a Python function that parses an XML document and creates an object model to represent the document. The function should return a tagged object, where each element has a unique tag name and each tag has a dictionary of attributes and a list of child elements of the same type. The function should be able to handle both well-formed and invalid XML inputs and provide robust error handling.\n\nFor example, given the following XML input:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n    <person id=\"1\">\n        <name></name>\n        <address>\n            <street>2600 University Avenue</street>\n            <city>Boston</city>\n            <state>MA</state>\n            <zip>02115</zip>\n        </address>\n    </person>\n</root>\n```\n\nThe function should return the following object model:\n\n```python\n{\n    'root': [\n        {\n            'person': [\n                {\n                    'id': '1',\n                    'name': '',\n                    'address': {\n                        'street': '2600 University Avenue',\n                        'city': 'Boston',\n                        'state': 'MA',\n                        'zip': '02115'\n                    }\n                }\n            ]\n        }\n    ]\n}\n```"}, {"instruction": "Create a Python function that accepts an XML file as input and returns a data structure that represents the information from the XML file. The input file should be trimmed to only contain the XML data and no other text, comments, or empty tags. The function should return the parsed data structure as a `dict` or another appropriate data structure based on the context of the supplied XML file. The solution should include robust error handling to handle any potential exceptions and fail gracefully."}, {"instruction": "Build a Python function that takes a serialized SOAP data structure as a string and returns an unserialized equivalent Python object. The input string contains a SOAP data structure in XML format and includes the SOAP namespace prefix for easier parsing. The function should handle the complex data types such as arrays, dictionaries, and nested structures.\n\nFor example, given the input string `'<Result><Response>{\"id\": 1, \"name\": \"\", \"items\": [{\"id\": 1, \"name\": \"Item 1\"}, {\"id\": 2, \"name\": \"Item 2\"}]}</Response></Result>'`, the function should return a Python object with the structure `{\"id\": 1, \"name\": \"\", \"items\": [{\"id\": 1, \"name\": \"Item 1\"}, {\"id\": 2, \"name\": \"Item 2\"}]}` with type checking and nested data structure instantiation."}, {"instruction": "Design a Python function `soap_to_obj(data)` that converts a SOAP request string into an object using the data structure in the SOAP specification; the function should handle multiple namespaces for the same element, as well as different namespaces for different elements. The input data should be in the form of a string.\n\nFor example, when given the input `\"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns=\"http://www.example.com/ns\"><soapenv:Header/><soapenv:Body><ns:SampleRequest><ns:name>John</ns:name><ns:age>25</ns:age></ns:SampleRequest></soapenv:Body></soapenv:Envelope>\"`, the function should create an object with the following structure:\n\n```python\n{'soapenv:Envelope': {'xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"': 'xmlns:ns=\"http://www.example.com/ns\"', 'xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"': {'ns:SampleRequest': {'ns:name': 'John', 'ns:age': '25'}}}}\n```"}, {"instruction": "Write code to implement the SOAP type `SOAPFault` that consists of the following properties:\n- faultcode: a string representing the fault code\n- faultstring: a string representing the fault string\n- detail: an optional data structure that provides additional information about the fault\n\nThe SOAP type `SOAPFault` should be initialized with the appropriate properties when an exception is raised that needs to be converted to a SOAP fault message."}, {"instruction": "Construct a Python function to generate a SOAP envelope based on a Python object. The function should implement the logic to construct a SOAP envelope with a well-formed and valid XML document. The function should accept a Python object, such as a dictionary or a class instance, and the function should return the corresponding SOAP envelope as a string. The function should also handle edge cases such as handling the missing or invalid data in the input object."}, {"instruction": "Develop a Python function that parses SOAP XML (Simple Object Access Protocol XML) to extract data into a data structure. The function should accept an XML string as input and return the corresponding data structure.\n\nFor example, the function should parse the SOAP XML from the following example and return the data structure for the root element `Person`:\n\n```xml\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Body>\n        <soap:Person>\n            <soap:FirstName>Jane</soap:FirstName>\n            <soap:LastName>Smith</soap:LastName>\n            <soap:Age>21</soap:Age>\n        </soap:Person>\n    </soap:Body>\n</soap:Envelope>\n```"}, {"instruction": "Design a Python function that takes a SOAP request payload and extracts the values from the body of the request. The function should only accept SOAP messages with a body, and should handle both standard and custom namespaces.\n\nFor example, given the following SOAP message:\n\n```xml\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soapenv:Header>\n        <auth:Authentication xmlns:auth=\"http://auth.example.com/\">\n            <auth:credentials>\n                <auth:username>john</auth:username>\n                <auth:password></auth:password>\n            </auth:credentials>\n        </auth:Authentication>\n    </soapenv:Header>\n    <soapenv:Body>\n        <wsse:UsernameToken xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n            <wsse:Username>joe</wsse:Username>\n            <wsse:Password></wsse:Password>\n        </wsse:UsernameToken>\n    </soapenv:Body>\n</soapenv:Envelope>\n```\n\nThe function should return the following values:\n\n```json\n{\n    \"username\": \"joe\",\n    \"password\": \"\"\n}\n```"}, {"instruction": "Build a Python function that processes SOAP messages. The function should accept a string representation of a SOAP message and return a tuple containing the following information:\n\n- SOAP version: a string representing the SOAP document version (e.g. '1.1' or '1.2').\n- SOAP action: the action of the SOAP method call.\n- SOAP method: the name of the SOAP method call.\n- SOAP namespace: the namespace of the SOAP method call.\n- SOAP body: the dictionary containing all of the body elements."}, {"instruction": "Implement a Python function that extracts and converts an XML element into a dictionary with nested dictionaries and lists. This function will receive a string that represents an XML element with the following format.\n\n```python\n\"<element attr1='value1' attr2='value2'>text</element>\"\n```\n\nThe function should extract the element name, attributes, and text content from the provided string. The function should return a dictionary with the following structure.\n\n```python\n{'element': {'attr1': 'value1', 'attr2': 'value2'}, 'text': 'text'}\n```\n\nAdditionally, the function should handle nested elements in the input XML string. For example, the following XML string should be converted to a nested dictionary.\n\n```python\n\"<element attr1='value1' attr2='value2'><subelement attr3='value3'>text</subelement></element>\"\n```\n\nThe function should return a dictionary with the following structure.\n\n```python\n{'element': {'attr1': 'value1', 'attr2': 'value2'}, 'subelement': {'attr3': 'value3', 'text': 'text'}}\n```"}, {"instruction": "Assume that the provided XML document contains the necessary data to build a SOAP request. Create a Python function to parse the XML document and instantiate the SOAP request with the appropriate data. Utilize the SOAP type instantiation and namespace handling to create a valid SOAP request.\n\nThe function should parse the given XML document and return a valid SOAP request with the appropriate data. It should also handle cases where there are multiple SOAP requests in the document.\n\nFor example, given the following XML document:\n\n```xml\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <ns2:getQuote xmlns:ns2=\"http://www.dneonline.com/calculator.asmx\">\n         <ns2:number>100</ns2:number>\n      </ns2:getQuote>\n   </soapenv:Body>\n</soapenv:Envelope>\n```\n\nThe function should return the following SOAP request:\n\n```xml\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <soap:Body>\n      <ns2:getQuote xmlns:ns2=\"http://www.dneonline.com/calculator.asmx\">\n         <ns2:number>100</ns2:number>\n      </ns2:getQuote>\n   </soap:Body>\n</soap:Envelope>\n```\n/README.md\n# PythonCodingTask\n\nThis repository contains a series of coding tasks designed to test Python coding skills. Each task is designed to be original, distinct, diverse, and high-quality, fostering logical thinking. Completing the tasks will strengthen your Python coding skills and prepare you for interviews or job applications.\n\n## Tasks\n\nThe tasks are grouped based on the type of task (function implementation, class implementation, or program implementation). Each task is designed to be completed with the specified language and uses the specified concepts."}, {"instruction": "Construct a Python function `soap_type_instance_from_schema(schema)` to construct a Python SOAP type instance from an XML Schema definition of a SOAP type. The function should accept a string of XML Schema and return a corresponding Python SOAP type instance. The function should perform XML Schema compliant type validation and exception handling.\n\nFor example, given the following XML Schema definition:\n\n```xml\n<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <xsd:element name=\"data\">\n    <xsd:complexType>\n      <xsd:sequence>\n        <xsd:element name=\"name\" type=\"xsd:string\"/>\n        <xsd:element name=\"age\" type=\"xsd:int\"/>\n        <xsd:element name=\"address\" type=\"xsd:string\"/>\n      </xsd:sequence>\n    </xsd:complexType>\n  </xsd:element>\n</xsd:schema>\n```\n\nThe function should construct a Python type that can be used to create an instance of an object with these member variables:\n\n```python\ndata = Data(name='Name', age=42, address='Address')\n```"}, {"instruction": "Design a Python function to output a SOAP message given a set of data and a namespace. The function should accept three arguments: a list of data to be formatted into XML, a root element name, and a namespace prefix. The function should return the XML representation of the data as a string.\n\nFor example, given the input `[(100, 'foo.1', 1), (200, 'foo.2', 1), (300, 'foo.3', 1)]`, `('foo', 'http://foo.com')`, and `{}`, the function should return the following XML:\n\n```xml\n<foo xmlns=\"http://foo.com\">\n    <foo.1>100</foo.1>\n    <foo.2>200</foo.2>\n    <foo.3>300</foo.3>\n</foo>\n```"}, {"instruction": "Develop a Python function `create_soap_type_instance` that utilizes data structures to create a SOAP type instance for the given input. The function should accept a namespace as a string and a list of variable names as a list of strings. The function should iterate over the variable names, create a local variable using the variable name, and assign the variable to the corresponding SOAP field. Additionally, the function should handle multiple types (int, float, bool, list, and dict) appropriately.\n\nFor example, given the input `['http://example.com/soap/types', ['a', 'b', 'c', 'd']`, the function should output the following SOAP type instance:\n\n```xml\n<SOAPType xmlns=\"http://example.com/soap/types\">\n  <a>42</a>\n  <b>3.14</b>\n  <c>false</c>\n  <d>\n    <item>\n      <name>John</name>\n      <age>30</age>\n    </item>\n    <item>\n      <name>Bob</name>\n      <age>25</age>\n    </item>\n  </d>\n</SOAPType>\n```"}, {"instruction": "Design a Python function that parses a SOAP message with a set of data structures and values. The function should return an object representing the structure and values of the data.\n\nFor example, given the following SOAP message:\n\n```xml\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tns=\"http://www.example.com/schema\">\n    <soap:Body>\n        <tns:ActivateSite>\n            <tns:siteID>123</tns:siteID>\n            <tns:siteName>Example Site</tns:siteName>\n            <tns:siteStatus>Active</tns:siteStatus>\n        </tns:ActivateSite>\n    </soap:Body>\n</soap:Envelope>\n```\n\nThe function should return an object of the following structure:\n\n```python\n{\n    'Envelope': {\n        'xmlns:soap': 'http://schemas.xmlsoap.org/soap/envelope/',\n        'xmlns:tns': 'http://www.example.com/schema',\n        'Body': {\n            'ActivateSite': {\n                'siteID': '123',\n                'siteName': 'Example Site',\n                'siteStatus': 'Active'\n            }\n        }\n    }\n}\n```"}, {"instruction": "Develop a Python function that takes two input SOAP service instances, `service_a` and `service_b`, and returns a Boolean indicating if they are equal or not. The function should handle the case where the variables in the SOAP service instances are lists or dictionaries, and should handle the case where one variable is an instance of a nested class and the other is not.\n\nFor example, given the following two SOAP service instances:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <soap:Body>\n    <GetLanguagesResponse xmlns=\"http://tempuri.org/\">\n      <GetLanguagesResult xmlns=\"http://schemas.datacontract.org/2004/07/KMDb.Business.Entities\">\n        <Languages>\n          <Language>\n            <Id>1</Id>\n            <LanguageCode>en</LanguageCode>\n            <LanguageCodeISO3>eng</LanguageCodeISO3>\n            <Name>English</Name>\n            <VernacularNames></VernacularNames>\n          </Language>\n          <Language>\n            <Id>2</Id>\n            <LanguageCode>es</LanguageCode>\n            <LanguageCodeISO3>spa</LanguageCodeISO3>\n            <Name>Spanish</Name>\n            <VernacularNames></VernacularNames>\n          </Language>\n        </Languages>\n      </GetLanguagesResult>\n    </GetLanguagesResponse>\n  </soap:Body>\n</soap:Envelope>\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <soap:Body>\n    <GetLanguagesResponse xmlns=\"http://tempuri.org/\">\n      <GetLanguagesResult xmlns=\"http://schemas.datacontract.org/2004/07/KMDb.Business.Entities\">\n        <Languages>\n          <Language>\n            <Id>1</Id>\n            <LanguageCode>en</LanguageCode>\n            <LanguageCodeISO3>eng</LanguageCodeISO3>\n            <Name>English</Name>\n            <VernacularNames></VernacularNames>\n          </Language>\n          <Language>\n            <Id>2</Id>\n            <LanguageCode>es</LanguageCode>\n            <LanguageCodeISO3>spa</LanguageCodeISO3>\n            <Name>Spanish</Name>\n            <VernacularNames></VernacularNames>\n          </Language>\n        </Languages>\n      </GetLanguagesResult>\n    </GetLanguagesResponse>\n  </soap:Body>\n</soap:Envelope>\n```\n\nThe function should return `True` to indicate that the two SOAP service instances are equivalent, as both contain the same data."}, {"instruction": "Create a Python function that validates a SOAP web service document against a WSDL schema. The function should take the filepath to the WSDL and web service document as input parameters. The function should return a boolean value indicating whether the WSDL schema is valid against the web service document."}, {"instruction": "Develop a Python function `soap_type_instantiate(name, namespace, data_source)` to instantiate SOAP type objects with a given name, namespace, and a data source dictionary. The function should accept a data source in the form of a dictionary with key/value pairs corresponding to the SOAP type's fields and their values. The function should also accept a namespace dictionary in the same form. The function should generate a valid SOAP type object with the given name and namespace, and apply the data source to the fields of the type. The generated type object should be returned as a Python object.\n\nFor example, given the data source `{'name': 'John', 'age': 26}` and the namespace dictionary `{'xmlns:person': 'https://example.com/person'}`, the function should return a `Person` object with a `name` field set to 'John' and an `age` field set to 26."}, {"instruction": "Build a SOAP service that performs arithmetic operations between two real numbers. The service should accept a SOAP message with an operation tag, an operand1 and an operand2 tag, and return the result of the operation. The SOAP message should be parsed and interpreted if it contains the correct structure, and the operation should support addition, subtraction, multiplication, and division. In case the message is invalid, the service should return an appropriate response."}, {"instruction": "Develop a Python function that translates a SOAP request into a Python dictionary. The SOAP request should be specified as a string with the following properties:\n\n- it should be well-formed\n- it should have a root element with a defined namespace\n- it should contain child elements with a defined namespace\n- it should contain child elements with a defined type\n\nThe function should return a dictionary representing the SOAP request."}, {"instruction": "Construct a Python function that performs an XML-based operation to create a SOAP message with a given message body. The message should be constructed with a SOAP envelope with a given body, which is composed of a series of elements and attributes. The function should utilize the `lxml` library to parse the XML data and build an `ElementTree` object from the string representation.\n\nThe function should also take a namespace URI as an argument and specify a default namespace for the elements and attributes. The function should also support nested element and attribute definitions."}, {"instruction": "Construct a Python function `soap_type_factory(body, header, operation)` that takes a SOAP request body, SOAP header, and an operation name to construct a SOAP type object. The function should return a SOAP type object with the provided header and body. The function should throw an error if the provided arguments are invalid, or if the operation name is not recognized.\n\nFor example, given the following body and header:\n\n```\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Body>\n        <ns1:add>\n            <a>1</a>\n            <b>2</b>\n        </ns1:add>\n    </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\n```\n\nand the operation name 'add', the function should return a SOAP type object with the following attributes:\n\n```\noperation = 'add'\nbody = {\n    'a': 1,\n    'b': 2\n}\n```"}, {"instruction": "Design a Python function `constructSOAPMessage(namespace, type, parent, content, attribute)` that returns a SOAP message of the specified type and structure as a string. All parameters are required, and the content and attribute parameters are optional.\n\nExamples of the SOAP message type include `Ack`, `Body`, and `Envelope`. The content and attribute parameters should be specified as a tuple of key-value pairs. The `attribute` parameter should be a dictionary that contains the key-value pairs that are to be placed into the SOAP header.\n\nImplement a Python function that is able to construct a SOAP message using the provided namespace, type, parent, content, and attribute parameters."}, {"instruction": "Create a Python function that accepts a SOAP XML string as an input and returns a tuple of instantiated objects that match the SOAP schema. The XML is supposed to be well-formed and follow the specification of the SOAP schema.\n\nThe function should work with SOAP versions, so that it can be used with both SOAP 1.1 and SOAP 1.2.\n\nFor example, the function should return the following for the input XML string:\n\n```xml\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:exc=\"http://schemas.microsoft.com/clr/soap/exception/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <exc:Exception>\n         <exc:ExceptionType>System.Web.Services.Protocols.SoapException</exc:ExceptionType>\n         <exc:Message>\n             ...\n         </exc:Message>\n         <exc:StackTrace>\n             ...\n         </exc:StackTrace>\n      </exc:Exception>\n   </soapenv:Body>\n</soapenv:Envelope>\n```"}, {"instruction": "Develop a Python function `soapify_dict(data_dict)` that converts a dictionary into an appropriate SOAP XML Schema structure. The function should accept a dictionary with the following properties, and return an appropriate SOAP XML Schema structure:\n\n- `type` of the dictionary, e.g., `str`, `int`, `list`, `dict`\n- `name` of the dictionary, e.g., `data`, `features`\n- `value` for string and integer types, e.g., `\"John\"`, `27`\n- list of dictionaries for list types, e.g., `['John', '27']`\n- list of dictionaries for dictionary types, e.g., `{'name': 'John', 'age': '27'}`\n\nFor example, given the input dictionary `{'name': 'John', 'age': 27}`, the function should return the following SOAP XML Schema structure:\n\n```xml\n<person>\n    <name>John</name>\n    <age>27</age>\n</person>\n```"}, {"instruction": "Create a Python function that parses and generates a SOAP request. The SOAP request should be created with the input data and the SOAP envelope. Use the namespaces provided in the template to structure the request."}, {"instruction": "Create a Python function that dynamically instantiates a SOAP message type with the given name and corresponding value. The function should construct an instance of a SOAP message using the XML string schema provided in the source file. The function should be able to handle a set of complex data types including string, int, long, float, and boolean. The function should also handle variable declaration and namespace handling."}, {"instruction": "Create a Python function `simple_soap_client` that receives a SOAP request in the form of a string and returns the corresponding SOAP response as a string. The function should accept a SOAP request as a string and return the corresponding SOAP response as a string.\n\nThe request and response should meet the following constraints:\n- The request string must be well-formed xml with valid syntax.\n- The request string must contain a SOAP body.\n- The request string must contain a SOAP Action attribute with a valid value.\n- The response must contain a SOAP body with a SOAP response element.\n\nThe function should throw an exception if the request string is not well-formed or does not contain a SOAP body.\n\nThe response should match the following format:\n```xml\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap:Body>\n    <soap:Response>\n      <result>...</result>\n    </soap:Response>\n  </soap:Body>\n</soap:Envelope>\n```"}, {"instruction": "Create a Python function that accepts an XML document as a string and returns a corresponding Python object. The function should be able to handle multiple top-level elements, nested elements, and attribute values. The function should return an object that maps each top-level element to a dictionary of key-value pairs, where the key is the element's tag name and the value is the element's text content. Additionally, the function should handle nested elements, attributes, and tag name conflicts by creating lists or dictionaries for each tag.\n\nFor example, given the following input:\n\n```xml\n<root>\n<child1>\n    <grandchild1>text</grandchild1>\n    <grandchild2>text</grandchild2>\n</child1>\n<child2>\n    <child3>text</child3>\n    <child4>text</child4>\n</child2>\n</root>\n```\n\nThe function should return the following data structure:\n\n```python\n{\n    'root': {\n        'child1': {\n            'grandchild1': 'text',\n            'grandchild2': 'text'\n        },\n        'child2': {\n            'child3': 'text',\n            'child4': 'text'\n        }\n    }\n}\n```"}, {"instruction": "Develop a Python function `construct_soap_type()` that accepts a SOAP type name as an input and returns a corresponding Python object that represents the type. The function should support multiple levels of nested types, for example 't1:item' can represent 'item' type within a 't1' namespace. The function should be robust to the input data and handle the following scenarios:\n\n- invalid input: missing namespace or type name\n- invalid namespace: the namespace name does not exist\n- invalid type: the type name does not exist within the namespace"}, {"instruction": "Design a Python function `parse_soap_message(soap_message)` to extract the data from an XML SOAP message. The function should take a valid SOAP message as a string and extract all of its contents into a Python object. The XML message may contain multiple elements, each of which may contain text or other elements as children. The function should also handle missing or unexpected elements or attributes.\n\nFor example, given the following input SOAP message:\n\n```xml\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\n    <soap:Header>\n        <WS-Security xmlns=\"http://schemas.xmlsoap.org/ws/2002/12/secext\" />\n    </soap:Header>\n    <soap:Body>\n        <GetAccountBalance xmlns=\"http://tempuri.org/\">\n            <accountNumber>1234567890</accountNumber>\n        </GetAccountBalance>\n    </soap:Body>\n</soap:Envelope>\n```\n\nThe function should return a Python object with the following structure:\n\n```python\n{\n    'soap:Envelope': {\n        'xmlns:soap': 'http://www.w3.org/2003/05/soap-envelope',\n        'soap:Header': {\n            'WS-Security': {\n                'xmlns': 'http://schemas.xmlsoap.org/ws/2002/12/secext'\n            }\n        },\n        'soap:Body': {\n            'GetAccountBalance': {\n                'xmlns': 'http://tempuri.org/',\n                'accountNumber': '1234567890'\n            }\n        }\n    }\n}\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: C++ exception handling, COM interface function invocation, COM interface function return value specification\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR uint32_t IVector_1_get_Size_mE153CC42F19B88AD5568B2251C4AFC600A431C50 (RuntimeObject* __this, const RuntimeMethod* method)\n{\n\tIVector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D* ____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D::IID, reinterpret_cast<void**>(&____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Native function invocation\n\tuint32_t returnValue = 0;\n\thr = ____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D->IVector_1_get_Size_mE153CC42F19B88AD5568B2251C4AFC600A431C50(&returnValue);\n\t____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\treturn returnValue;\n}", "docstring": "// Marshaling cleanup of parameter U27___items0U27 native representation", "function_name": "IVector_1_ReplaceAll_m2AEA0484E455AA62B3AD0802FBC213043247FDDA"}, "id": 327, "seed": "IL2CPP_METHOD_ATTR uint32_t IVector_1_get_Size_mE153CC42F19B88AD5568B2251C4AFC600A431C50 (RuntimeObject* __this, const RuntimeMethod* method)\n{\n\tIVector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D* ____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D::IID, reinterpret_cast<void**>(&____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Native function invocation\n\tuint32_t returnValue = 0;\n\thr = ____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D->IVector_1_get_Size_mE153CC42F19B88AD5568B2251C4AFC600A431C50(&returnValue);\n\t____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\treturn returnValue;\n}", "__index_level_0__": 83, "concepts": ["C++ exception handling", "COM interface function invocation", "COM interface function return value specification"], "parsing_result": [{"instruction": "Write a function `CalculateDistance` that takes two points, represented by a tuple, as input and returns the Euclidean distance between the two points represented by the tuples. The function should throw a `ValueError` exception if the input is not a valid point."}, {"instruction": "Design a Python function to invoke a COM interface function that returns an error code. The function should take a `com_handle` object as the first argument, and a list of arguments as second argument. The function should throw a `COMException` if the function call returns an error code other than 0."}, {"instruction": "Create a Python function `com_get_names` that takes a COM interface as an argument and returns a `list` of its member names as strings. Handle the following exceptions:\n\n- `TypeError`: `com` is not an instance of `COM`\n- `Exception`: COM interface invocation failed\n\nNote: The COM interface class can be found at [COM Interface.py](https://github.com/alex-pritcak/python-coding-tasks/blob/master/COM%20Interface.py). The COM interface class should be imported from the `COM Interface.py` file and has attributes `COMInterface`, `COMInterface.COMMethod` and `COMInterface.COMMethod.COMMethodReturnValue`."}, {"instruction": "Design a Python function with the following signature to invoke a COM interface function written in C++:\n\n```c++\nLONG invoke_interface_function(\n    IUnknown* interface,\n    REFIID interface_id,\n    LPOLESTR function_name,\n    VARIANT* arguments,\n    WORD argument_count,\n    VARIANT* return_value)\n```\n\nwhere\n\n- `interface` is a COM interface pointer\n- `interface_id` is a COM interface ID\n- `function_name` is a function name\n- `arguments` is a list of arguments\n- `argument_count` is the number of arguments\n- `return_value` is a pointer to an empty VARIANT\n\nThe function should raise an exception if:\n\n- the function name is not recognized\n- the function name is recognized but the provided arguments don't match the function's signature\n- the function name is recognized but the function throws an exception\n- an unexpected exception occurs\n\nFor example, the following function should simply return a string containing the input:\n\n```c++\nSTDMETHODIMP IStringFunction::Echo(\n    BSTR arg,\n    BSTR* result)\n{\n    *result = arg;\n    return S_OK;\n}\n```"}, {"instruction": "Write a Python function to implement a public interface function signature of a COM interface for a .NET assembly. The function should take in a COM object (the specified interface), and two arguments of type `int`. If the function is invoked with a valid COM object, the function should return the sum of the two arguments. Otherwise, the function should raise an exception."}, {"instruction": "Create a Python function `invoke_com_interface` that takes a COM interface function name and a list of arguments as arguments. The function should use the Python `ctypes` library to invoke the COM interface function with the specified arguments. The function should raise an exception if the arguments are invalid or the invocation fails, along with a descriptive error message. The function should not return.\n\nTo ensure that the function works as intended, test the function with the following COM interface:\n\n```python\nimport ctypes, uuid\n\ndef test_com_interface(iface_name, args):\n    try:\n        iface = getattr(ctypes.windll.ole32, iface_name)\n    except AttributeError:\n        raise TypeError(\n            f\"The interface '{iface_name}' does not exist or is invalid.\"\n        )\n\n    if not callable(iface):\n        raise TypeError(\n            f\"The interface '{iface_name}' is not a function.\"\n        )\n\n    try:\n        iface(*args)\n    except Exception:\n        raise TypeError(\n            f\"An error occurred while invoking the interface function '{iface_name}'.\"\n        )\n```"}, {"instruction": "Create a Python function `add_exception_handling` that decorates a function with try-except blocks for common exceptions, such as `ValueError`, `KeyError`, `TypeError`, and `IndexError`. Each exception should print the exception type and message to the console for debugging purposes. If the decorated function encounters an exception, it should re-raise the exception, otherwise it should return the result of the decorated function."}, {"instruction": "Write a Python function `com_call(function, *args)` using COM interfaces to call a C++ function with the specified arguments. The function should handle C++ exceptions and return values in a proper manner."}, {"instruction": "Create a Python function that accepts a COM interface as a function argument. The function should return the value of the return value from the invoked COM interface function, except in the case where the function may not return a value because of an exception being raised. The function must ensure that no exceptions are raised when the COM interface function is invoked. The function should handle both the case where the COM interface function throws an exception and the case where the COM interface function returns a value."}, {"instruction": "Write a Python function `get_function_return_value_from_com_interface` that takes a string argument `com_operator`, specifying which COM interface method to invoke, along with the arguments to supply for the method call. The function should raise an exception if the COM interface does not define a method with the given name, and return the return value of the method invocation as a string. If the method returns a value, specify the return type of the method in the docstring of the function."}, {"instruction": "Write a Python function `calculate_integral` that takes two arguments `func` and `delta_x`, where `func` is a Python function that accepts a single argument `x` (a scalar floating point number). The function should return a floating point number that approximates the integral of `func` over the interval from 0 to 1. The function should delegate to a COM-based function `CalculateIntegralCOM` that takes in `func` and `delta_x` as arguments and returns a floating point number approximation.\n\nThe function should raise a `ValueError` if the supplied `func` cannot be converted to a COM interface function."}, {"instruction": "Write a Python function `com_invoke` that takes a COM interface name and an interface function name as an argument. The COM interface should be defined as a Python COM object (defined or imported) that retains all its member functions as methods. The function should return the return value of the specified function call. The function should throw an exception if the interface function is called while the COM object is busy or if the interface function cannot be invoked due to an error."}, {"instruction": "Implement a Python function in C++ that performs exception handling for a COM interface method, and return the underlying COM function's return value. The function signature should look similar to that of the actual COM interface method, with an additional `HRESULT` return value indicating the status of the error."}, {"instruction": "Implement a Python function `calculate_interest(principal, rate, years)` to calculate the interest on a given principal at the specified rate and years, as a float. The function should throw `InvalidPrincipal` if the principal is not positive, or `InvalidRate` if the rate is beyond the range [0.05, 0.1] (both inclusive). In case of an invalid rate, the function should throw a `ValueError` with an appropriate message."}, {"instruction": "Design a Python function to accept a COM interface function pointer and return a value or raise an exception. The function should be written in C++, and the COM interface function to be invoked is defined by the following C++ function signature:\n\n```c++\nint MyFunction(double x, double y, double z);\n```\n\nThe function should accept three double-precision floating-point arguments, and return the product of the first two arguments. However, the function may throw an `out_of_range` C++ exception if the third argument is negative."}, {"instruction": "Create a Python function `add_numbers` that takes two arguments, `a`, and `b`, and adds them together, returning the result. If the arguments are not numeric, the function should raise a Python exception of type `TypeError` with a message indicating the problem. If the arguments are not numeric and can't be converted to numeric types, the function should raise a Python exception of type `ValueError` with a message indicating the problem. If any other error occurs, the function should raise a Python exception of type `RuntimeError` with a message indicating the problem."}, {"instruction": "Design a Python function `get_com_class` that takes a string that corresponds to the name of a COM class as an argument. The function should return the COM class with the given name. If the COM class cannot be found, it should raise a `FileNotFoundError` exception. If the COM class name is not provided, then `get_com_class` should raise a `ValueError` exception."}, {"instruction": "Create a Python function `com_invoke(com_interface, method_name, *args)` that invokes a COM interface function with the given method name and arguments. The function should handle `RuntimeError` exceptions by printing a warning to the console. The function should handle a missing COM interface by raising a `ValueError`."}, {"instruction": "Create a Python function `com_interface_function_call` that invokes a COM interface function and returns the return value, if specified. The function should accept two arguments: `com_interface`, an object representing an implementation of a COM interface; and `function`, a string specifying the name of the function to be invoked, with a list of parameters to pass to the function. The return value should be a list of return values specified by the COM interface function in its return value documentation.\n\nThe function should handle the following exceptions:\n\n- `COM interface function does not exist`\n- `COM interface function return value does not match the specification`"}, {"instruction": "Create a Python function `calculate_with_exceptions` that accepts two arguments: `operation`, a function pointer that accepts two integer arguments and returns the result of `operation` on the two integers; and `args`, a list of integers. The function should calculate the result of `operation` on each pair of consecutive integers in `args`, and return the list of results. If one of the inputs is less than 0, the function should throw a `ValueError` with a message indicating which of the inputs is invalid."}, {"instruction": "Write a Python function `calculate_avg_with_exceptions` to calculate the average of a list of numbers. It should accept a list of input numbers and handle any exceptions that might be raised from the `len` and `sum` functions. If an exception is raised, the function should handle the exception and return `None` as the average. Otherwise, the function should calculate the average of the list of numbers."}, {"instruction": "Implement a Python function `call_com_interface(com_object, method_name)` that invokes a C++ COM interface and returns the return value. The function should raise an exception if the COM interface cannot be initialized or the COM interface method returns an exception. The function should handle cases where a COM interface cannot be initialized or the COM interface method returns an exception. Additionally, the function should include robust error handling to validate the COM interface name and COM interface method name and check that they are valid before proceeding."}, {"instruction": "Write a Python function `exception_handling_example` that throws a Python exception. Invoke this method in a C++ program using the `PyRun_SimpleString` function, and use COM interface calls to execute the method. Ensure the function can handle exceptions and returns the correct value."}, {"instruction": "Construct a Python function `safe_call(func, argument)` that calls a function and catches an exception. The function should return `True` if the call was made successfully, or `False` if any exception was caught. The function should handle the following exceptions:\n\n- `TypeError`: if the provided function is not callable or does not accept the argument\n- `TypeError`: if the argument is not a string or bytes array\n- `TypeError`: if the argument is a string or bytes array but the length is greater than 1000\n- `COMError`: if the COM interface function call returns an error from the COM object\n- `NameError`: if the COM interface function is not found"}, {"instruction": "Create a C++ function that throws a C++ exception of a user-defined type `MyException` when the input is not a prime number. The function should accept two arguments: an integer `n` and a `MyException` object `obj`. If the input is not a prime number, the user should be prompted to provide a different input."}, {"instruction": "Implement a Python function `find_prime_factors(n)` that returns all prime factors of the given positive integer `n`. Your function should raise `ValueError` if the given argument is not positive."}, {"instruction": "Create a Python function to implement the `IUnknown` interface for a COM object, allowing the object to be called by a Python program using `__call__` syntax. The function should work in the following way:\n\n```python\nmy_com_object = COMWrapper()\nmy_com_object(42)\n```\n\nThe `__call__` method should accept multiple arguments and return an integer value."}, {"instruction": "Create a Python function to invoke COM interface functions in Microsoft Office and Excel. The function should accept COM interface function names and parameters as arguments. The function should return the result of the invocation as an integer. In cases of exceptions, the function should return `-1`. Ensure the function handles the following exceptions:\n\n```python\n- COM Error\n- Return Value Error\n```"}, {"instruction": "Implement a Python function `raise_zero_div_exception(n)` that raises a `ZeroDivisionError` exception if `n` is 0, and returns `1/n` otherwise. Use the `try`-`except` Python statement to handle `ZeroDivisionError` exceptions and return the result of the division."}, {"instruction": "Implement a Python function named `call_function` that takes two arguments: `dll_path`, a string of the absolute path to a DLL, and `function_name`, a string of the function name to be invoked inside the DLL. The function should call the specified function in the DLL, return the returned value from the function, and throw an exception if the function failed to execute. The function should return the return value of the function, which may be either a `bytes` object or `float` depending on the function's return type."}, {"instruction": "Create a Python function `com_interface_fun` to invoke a COM interface function in C++ by catching the corresponding COM exception. The function should take two arguments: `wrapper_obj`, an object of type `Wrapper` that represents the COM interface, and `fun_name`, a string representing the COM function name. The function should return the result of the invoked COM function as a string. The function should throw an exception if the COM exception is not of type `COMException`.\n\nThe COM interface `Wrapper` has the following [C++](https://docs.microsoft.com/en-us/windows/win32/com/callable-interfaces) code:\n\n```cpp\nclass Wrapper\n{\npublic:\n    Wrapper();\n    ~Wrapper();\n\n    int sum(int a, int b);\n    int get_length();\n};\n```\n\nThe COM exception class `COMException` has the following [C++](https://docs.microsoft.com/en-us/windows/win32/com/exception-handling-and-com) code:\n\n```cpp\nclass COMException : public std::exception\n{\npublic:\n    COMException(HRESULT hresult);\n    virtual ~COMException() = default;\n\n    const char* what() const noexcept override;\n    HRESULT get_hresult() const noexcept;\n\nprivate:\n    HRESULT hresult_;\n};\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: registering HID elements from dictionary, memory management, kernel return code handling\n\n### Task", "fingerprint": null, "content": {"code": "bool  registerElements( IOKitController& controller )\n{\n   DBG_BLOCK( os_hid, \"registerElements\" );\n\n   // Retrieve properties dictionary.\n   CFMutableDictionaryRef  properties;\n   kern_return_t kr = IORegistryEntryCreateCFProperties(\n      controller.hidDevice,\n      &properties,\n      kCFAllocatorDefault,\n      kNilOptions\n   );\n   if( kr != KERN_SUCCESS )\n   {\n      DBG_MSG( os_hid, \"ERROR - IORegistryEntryCreateCFProperties failed.\" );\n      return false;\n   }\n   CHECK( properties != NULL );\n\n   bool ok = registerElementsFromDict( (CFDictionaryRef)properties, controller );\n\n   return ok;\n}", "docstring": "// switch( usagePage )", "function_name": "registerElementsFromDict"}, "id": 329, "seed": "bool  registerElements( IOKitController& controller )\n{\n   DBG_BLOCK( os_hid, \"registerElements\" );\n\n   // Retrieve properties dictionary.\n   CFMutableDictionaryRef  properties;\n   kern_return_t kr = IORegistryEntryCreateCFProperties(\n      controller.hidDevice,\n      &properties,\n      kCFAllocatorDefault,\n      kNilOptions\n   );\n   if( kr != KERN_SUCCESS )\n   {\n      DBG_MSG( os_hid, \"ERROR - IORegistryEntryCreateCFProperties failed.\" );\n      return false;\n   }\n   CHECK( properties != NULL );\n\n   bool ok = registerElementsFromDict( (CFDictionaryRef)properties, controller );\n\n   return ok;\n}", "__index_level_0__": 84, "concepts": ["registering HID elements from dictionary", "memory management", "kernel return code handling"], "parsing_result": [{"instruction": "Design a Python function that accepts a dictionary of HID elements and registers them in the kernel. The function should return the integer value of the kernel return code (errno). The function should handle the creation of HID elements with valid device, vendor, and path names and their associated properties.\n\n- [HID Devices](https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf)\n- [HID Properties](https://www.usb.org/sites/default/files/documents/hid1_11.pdf)"}, {"instruction": "Construct a Python function that registers HID elements from a dictionary using the Element class from the PyGObject library. The function should read the dictionary's elements and create PyGObject HID elements. The function should handle memory management for the elements and return a Kernel.h result code, which denotes the success or failure of the operation."}, {"instruction": "Create a Python function to create a Linux kernel driver that registers a new HID device. You design the structure of the device to be based on a dictionary mapping a series of HID elements to their values. The function takes in the dictionary and should return a pointer to the kernel device object. The resulting structure should be able to accept any number of HID elements and their values and return the correct configuration in the form of a Device_ID, Device_Table_ID, and Feature_Report_ID."}, {"instruction": "Implement a Python function that registers HID elements from a dictionary and returns a kernel return code. The dictionary should contain a list of elements to register (along with their attributes) as key-value pairs. The elements are represented by a tuple with the following order:\n\n- Usage Page\n- Usage\n- Length\n- Value\n- Report ID\n- Name (optional)\n- Report Type (optional)\n- Report ID (optional)\n- Report Count (optional)\n- Report Size (optional)\n- Logical Min (optional)\n- Logical Max (optional)\n- Physical Min (optional)\n- Physical Max (optional)\n- Unit (optional)\n- Unit Exponent (optional)\n- Push (optional)\n- Pop (optional)\n\nThe function should return the status code and, if applicable, log an error message with the `hid_error` function. The function should handle the following return codes:\n\n- `HID_SUCCESS`\n- `HID_INVALID_PARAM`\n- `HID_INVALID_OBJECT`\n- `HID_ALLOC_FAIL`\n- `HID_INSERT_FAIL`\n- `HID_INVALID_ELEMENT_COUNT`\n- `HID_INVALID_ELEMENT_SIZE`\n- `HID_INVALID_ELEMENT_USAGE`\n- `HID_INVALID_ELEMENT_USAGEPAGE`\n- `HID_ELEMENT_NOT_FOUND`\n- `HID_ELEMENT_TYPE_NOT_FOUND`\n- `HID_DUPLICATE_ELEMENT_FOUND`\n- `HID_INVALID_REPORT_ID`\n- `HID_INVALID_REPORT_TYPE`\n- `HID_INVALID_REPORT_COUNT`\n- `HID_INVALID_REPORT_SIZE`\n- `HID_INVALID_USAGE_MIN`\n- `HID_INVALID_USAGE_MAX`\n- `HID_INVALID_LOGICAL_MIN`\n- `HID_INVALID_LOGICAL_MAX`\n- `HID_INVALID_PHYSICAL_MIN`\n- `HID_INVALID_PHYSICAL_MAX`\n- `HID_INVALID_UNIT`\n- `HID_INVALID_UNIT_EXPONENT`\n- `HID_INVALID_PUSH`\n- `HID_INVALID_POP`\n- `HID_INVALID_USAGE_PAGE`\n- `HID_INVALID_USAGE`\n- `HID_REPORT_SIZE_MISMATCH`\n- `HID_USAGE_PAGE_NOT_FOUND`\n- `HID_USAGE_NOT_FOUND`\n- `HID_NOT_READY`\n- `HID_HIDP_ERROR`\n- `HID_NOT_POSSIBLE`\n- `HID_UNKNOWN_ERROR`\n\nThe function should handle `KeyboardInterrupt` exceptions gracefully and produce an error message to the log."}, {"instruction": "Create a Python function to register HID elements from a dictionary. The input should be a dictionary of code-element mappings, where the key is the HID code and the value is the label of the element. The function should return a string that describes the result of the registration. If the registration is successful, the function should return \"Registration succeeded\". If the element already exists, the function should return \"Element {element} already registered\". If the element is not a valid HID code, the function should return \"Invalid HID code: {code}\".\n\nFor example, given the following dictionary:\n\n```python\nregister_elements = {\n    0x00: \"Play\",\n    0x01: \"Pause\",\n    0x02: \"Stop\",\n    0x03: \"Record\",\n    0x04: \"Rewind\",\n    0x05: \"Fast Forward\",\n    0x06: \"Eject\",\n    0x07: \"Randomize\"\n}\n```\n\nThe function should return \"Registration succeeded\" if the input is valid and the element does not already exist, and \"Element {element} already registered\" otherwise."}, {"instruction": "Create a Python function `register_hid` that handles the registration of HID elements from a dictionary, as inputted by the user. The function should be resilient to any errors, such as non-existent files or invalid input, and should only terminate gracefully when it successfully registers the HID element. The function should handle the following error conditions:\n\n- FileNotFoundError: the path to the configuration file does not exist\n- PermissionError: the user does not have permission to access the configuration file\n- KeyError: the provided configuration dictionary does not contain the expected keys\n- ValueError: the provided configuration dictionary is invalid or contains invalid values\n- IOError: an error occurred when writing to the configuration file\n\nThe function should work across multiple invocations, generating a new unique file name for each configuration."}, {"instruction": "Create a Python function that registers HID elements from a provided dictionary of elements, and handles the memory management and error handling for the input and output transfers. The function should accept a dictionary of HID elements, and will output a dictionary with elements that can be stored in a buffer."}, {"instruction": "Create a Python function to register HID elements from a dictionary, by fetching the values from the dictionary and passing them to a kernel-level API function that handles the registration. The function should handle cases where the API function returns an error code, and gracefully handle memory management exceptions."}, {"instruction": "Create a Python function to list all the HID elements in a kernel's device tree. The function should take as input the absolute path to the device tree file and output a list of all the HID elements, including their bus type, bus path, and the bus ID. The output should be in the form of a dictionary with bus type as the key and a list of bus paths as the value."}, {"instruction": "Create a Python function `register_hids` to register HID elements in a pre-defined format. You must first create a dictionary that maps a HID name to a list of elements of type `HIDElement`. The elements are represented as tuples of format `(type, name, ...)` where the first element indicates the type of the element and the remaining elements are the parameters for the element. The function should validate the inputs and return a dictionary containing the registered HID elements. The function should also validate the format of the input and raise an appropriate error if the format is invalid.\n\nFor example, given the following input:\n\n```python\nhids = {\n    'keyboard': [\n        ('key', 'KeyA'),\n        ('key', 'KeyB'),\n        ('key', 'KeyC')\n    ],\n    'mouse': [\n        ('button', 'LeftButton'),\n        ('button', 'RightButton'),\n        ('button', 'MiddleButton')\n    ]\n}\n```\n\nThe function should return the following output:\n\n```python\n{'keyboard': [HIDElement('key', 'KeyA'), HIDElement('key', 'KeyB'), HIDElement('key', 'KeyC')], 'mouse': [HIDElement('button', 'LeftButton'), HIDElement('button', 'RightButton'), HIDElement('button', 'MiddleButton')]}\n```"}, {"instruction": "Create a Python function to register HID elements from a given dictionary. The function should handle the following scenarios:\n- If the input dictionary is empty, the function should return `0` to indicate the process has finished successfully.\n- If the input dictionary contains invalid key-value pairs, the function should raise an `InvalidElementError` with a descriptive error message.\n- Otherwise, the function should perform the following tasks:\n  - Parse the key and value from each pair and check if the key is a valid HID element number.\n  - If the key is valid, the function should try to register the key-value pair.\n  - If the key is invalid, the function should raise an `InvalidElementError` with a descriptive error message.\n  - If the key is valid and the registration process is successful, the function should return the total number of elements registered successfully.\n  - If the key is valid but the registration is unsuccessful, the function should raise an `ElementRegistrationError` with a descriptive error message.\n- The function should handle `ValueError` exceptions by returning the total number of elements registered successfully until the error occurred.\n- The function should handle `KeyError` exceptions by returning the total number of elements registered successfully until the error occurred.\n- The function should handle `ElementRegistrationError` exceptions by returning the total number of elements registered successfully until the error occurred.\n- The function should handle `InvalidElementError` exceptions by returning the total number of elements registered successfully until the error occurred.\n- The function should handle `InterruptError` exceptions by returning the total number of elements registered successfully until the error occurred.\n\nFor example, the function should pass the following assertions:\n```python\n# Valid key-value pairs\nassert register_hid_elements({16: 'Keyboard', 48: 'Mouse'}) == 2\n# Invalid key-value pairs\ntry:\n    register_hid_elements({'Keyboard': 16, 'Mouse': 48})\nexcept InvalidElementError as e:\n    pass\n# Invalid keys\ntry:\n    register_hid_elements({200: 'Keyboard'})\nexcept InvalidElementError as e:\n    pass\n# Invalid key format\ntry:\n    register_hid_elements({'Keyboard!': 'Mouse'})\nexcept InvalidElementError as e:\n    pass\n# Key-value pairs with invalid element number\ntry:\n    register_hid_elements({'Keyboard': 0, 'Mouse': 100})\nexcept ElementRegistrationError as e:\n    pass\n```"}, {"instruction": "Create a Python function to check whether a string is a valid NFC tag, according to the following validation rules:\n\n- It must start with the tag header 'C3B218', represented by the hexadecimal string 'C3B218'\n- It must have 15 characters, excluding the header\n- Each of the 48 characters in the content area must be from 0 to 9, A, B, C, D, E, F, or an uppercase letter from A to F\n- The checksum byte must be correct, calculated as the sum of all the 48 bytes in the content area modulo 16."}, {"instruction": "Implement a Python function `register_HID` that accepts a dictionary of HID elements to be registered with a HID driver. The function should return a kernel return code indicating if all the registration operations were successful. It should also handle cases where one or more elements are not valid (e.g. if the same element is registered multiple times)."}, {"instruction": "Create a Python function to process a list of HID elements from a dictionary and return the corresponding IDs from the element names. The function should be able to return multiple IDs for each element name.\n\nThe function should first check if the element name is valid. If not, the function should return 0, otherwise, it should proceed to register the element with the kernel and return its ID.\n\nThe function should handle potential kernel return codes with error handling and logging. If an error occurs during the registration process, the function should print the error message alongside the corresponding element name and the function should return 0.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert register_hid_elements({'Yoga S3': 5, 'Celeron 1000': 4}) == [4, 0, 0, 0, 5]\nassert register_hid_elements({'Celeron 1000': 4, 'Yoga S3': 5}) == [4, 5, 0, 0, 0]\ntry:\n    register_hid_elements({'Apple MacBook': 6})\nexcept RuntimeError as e:\n    pass\n```"}, {"instruction": "Create a Python function that registers HID elements from a dictionary using the Windows user interface APIs. The function should accept a dictionary of elements, where each key is the element identifier (e.g., button 1, LED 2, etc.) and each value is a dictionary of element properties. The function should return a list of kernel return codes from device driver registration, where each element represents the return code for a given element in the dictionary."}, {"instruction": "Create a Python function that registers HID elements from a dictionary. The function should accept a dictionary representing the elements to register, with each element having a unique \"ElementID\" as the key and a \"Name\" as the value.\n\nThe function should return a kernel return code (`int`) for each element in the dictionary, where `0` indicates success and a non-zero value indicates an error.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert register_hid_from_dict({0: 'Root', 1: 'Keyboard', 2: 'Key'}) == [0, 0, 0]\nassert register_hid_from_dict({0: 'Root', 1: 'Keyboard', 2: 'Key'}) == [0, 0, 0]\nassert register_hid_from_dict({0: 'Root', 1: 'Keyboard', 2: 'Key'}) == [0, 0, 0]\n```"}, {"instruction": "Implement a Python function that registers and initializes HID elements from a dictionary using the [HIDAPI](https://github.com/signal11/hidapi) library, without using the `hid.register_raw_hid_device` function. This function should accept a dictionary of HID elements as input and return the device handle."}, {"instruction": "Implement a Python function `register_hid_elements` that registers HID elements from a configuration dictionary. The function should search for the dictionary keys 'deviceTypes' and 'items' and register each HID element defined within the 'items' key. The 'deviceTypes' key should be a list of dictionaries defining the HID device types. Each device type is defined by a 'name' key, which is a string identifying the device category (e.g., 'mouse', 'keyboard', 'sensor') and a 'subtypes' key, which is a list of subtypes that the device type corresponds to (e.g., 'pointing', 'button').\n\nThe 'items' key should also be a list of dictionary items. Each item is defined by a 'type' that specifies the HID element type, e.g., 'button', 'sensor', 'button_group', etc. Each item also includes a 'name' that specifies the HID element name, and a 'usage' that specifies the HID usage value. The 'name' and 'usage' keys are used to search the 'deviceTypes' key to determine the appropriate HID element type and subtype, respectively, and register the element accordingly.\n\nThe function should return a list of the registered elements with their associated names. For example, given the following dictionary:\n\n```python\n{\n    'deviceTypes': [\n        {'name': 'mouse', 'subtypes': ['pointing']},\n        {'name': 'keyboard', 'subtypes': ['button']}\n    ],\n    'items': [\n        {'type': 'button', 'name': 'left', 'usage': 0x0001},\n        {'type': 'button', 'name': 'middle', 'usage': 0x0020},\n        {'type': 'button', 'name': 'right', 'usage': 0x0002},\n        {'type': 'sensor', 'name': 'temperature', 'usage': 0x0032}\n    ]\n}\n```\n\nThe function should return the following list:\n\n```python\n[\n    {'type': 'mouse', 'subtype': 'pointing', 'name': 'left', 'usage': 0x0001},\n    {'type': 'mouse', 'subtype': 'pointing', 'name': 'middle', 'usage': 0x0020},\n    {'type': 'mouse', 'subtype': 'pointing', 'name': 'right', 'usage': 0x0002},\n    {'type': 'sensor', 'subtype': 'temperature', 'name': 'temperature', 'usage': 0x0032}\n]\n```"}, {"instruction": "Design a Python function that registers HID elements with the operating system, returning the result of the operation. The function should accept a dictionary of input/output data as specified by the HID specification and return an error code as specified by the OS. This function should handle exceptional cases such as memory allocation failures, as well as valid return codes. The function should also gracefully handle unexpected input data and return appropriate error codes."}, {"instruction": "Design a Python function to register HID elements from a dictionary in a Linux kernel driver. The function should accept three arguments: a dictionary, a kernel module file path, and a kernel module name. The function should register the elements in the dictionary with the kernel module specified by its file path and name. The function should handle cases where the dictionary is empty, the file path is invalid, or the name is not a valid kernel module file name.\n\nFor example, given the dictionary `{'GPIO1': 31, 'GPIO2': 32}` and the file path `'/dev/gpio-1'`, the function should register the elements with the kernel module loaded from the specified file path and name."}, {"instruction": "Implement a Python function `register_elements` that registers the HID elements from the given dictionary of `element_id` and `element_name` pairs. The function should take a list of HID elements as `input_list` and register them in the system. The function should raise a `KernelException` with a description that summarizes the failed elements. The specific error type should be determined from the kernel return code: `0` for success, and `1` for failure. The `KernelException` should be handled by the caller, but the function itself should not raise any exceptions.\n\nFor example, if the function is called with `input_list = [{'element_id': '00001', 'element_name': 'DeviceName'}, {'element_id': '00002', 'element_name': 'DeviceName'}]`, and the kernel returns `0`, the function should successfully register the HID elements. If the kernel returns `1`, the function should raise a `KernelException` with the error message `Failed to register HID elements`."}, {"instruction": "Create a Python function that registers HID elements from a dictionary. The dictionary should contain mappings between input element names and their size and offset relative to the base address. The function should return a dictionary of the actual register values as a result. The function should handle memory management and kernel return codes."}, {"instruction": "Create a Python function to generate a string representation of a HID element. The function should accept a dictionary of HID elements as input, and return a string representation of the element in the form of \"Field: {field_name}\\nValue: {field_value}\", where \"Field\" and \"Value\" are the keys of the dictionary. The function should handle cases where the input dictionary is empty, has no elements, or cannot be properly converted to string."}, {"instruction": "Create a Python function to register a series of HID elements from a dictionary using the `RegisterHidDevice` API call. The function should accept a dictionary of HID elements, where each key is the element's registration name and each value is a list of HID attributes. The function should return the first registered element's device ID."}, {"instruction": "Develop a Python function that registers a list of HID elements, each with an integer ID, a string label, and a boolean `is_optional` flag. The function should ensure that all IDs are unique, and that the label is properly formatted. The function should also return a tuple of memory addresses, where each ID is mapped to the corresponding memory address."}, {"instruction": "Create a Python function that uses a dictionary to define a custom HID device, including the device's manufacturer, product type, and version. The function also takes a list of elements to be registered with the device, where each element includes a name, type, and size. The function should register the elements in the order provided and return a result code based on the status of the operation.\n\nThe result code should be 0 if the operation is successful, or a positive integer if the error occurred. If there is an issue during registration, the function should return -1. To build the device, the function should allocate memory for the elements and perform necessary operations to ensure compatibility with the host."}, {"instruction": "Develop a Python function to use a 3rd-party library, `PyUSB`, to register HID elements from a dictionary. The function should evaluate whether a given HID element is already registered and return the appropriate error code. Error codes include `0x01`, `0x02`, `0x03`, and `0x04`."}, {"instruction": "Develop a Python function that creates a custom HID report descriptor and registers it with the Windows kernel. The function should accept a dictionary that defines the HID elements, along with their data types, ranges, and other properties. The function should return a byte array representing the report descriptor."}, {"instruction": "Create a Python function that takes a list of HID elements as an input, processes them, and returns a list of processed elements as the output. The function should handle errors by appropriately raising exceptions to represent the following conditions:\n\n- the input list is empty\n- the input list contains invalid HID elements\n- the input list contains duplicate HID elements\n\nThe function should also handle the following kernel return codes:\n\n- `ENODEV`: the device does not exist\n- `EBUSY`: the device is busy\n- `EINVAL`: invalid operation"}, {"instruction": "Design a Python function that registers HID elements from a dictionary of element IDs and descriptions. The function should accept a dictionary of elements with IDs as the key and descriptions as the value. The IDs must be unique, otherwise the function should raise a ValueError.\n\nThe function should return a dictionary of elements with IDs as the key and a tuple of element properties as the value. The tuple should include an integer for the element ID, a string for the element description, and a boolean flag indicating whether the element is active. The function should also handle invalid element IDs and return an empty dictionary if the input is empty.\n\nFor example, the following dictionary of five elements should be registered without any errors:\n\n```python\nelements = {\n    'H': 'hydrogen',\n    'He': 'helium',\n    'Li': 'lithium',\n    'Be': 'berylium',\n    'B': 'boron',\n}\n```\n\nThe function should return the following dictionary:\n\n```python\n{\n    'H': (0, 'hydrogen', False),\n    'He': (1, 'helium', False),\n    'Li': (2, 'lithium', True),\n    'Be': (3, 'berylium', False),\n    'B': (4, 'boron', False),\n}\n```\n/exercises/example_exercises/example_7_function.py\nimport re\n\ndef parse_duration(duration):\n    # Your code goes here.\n    return 0\n\n\nprint(parse_duration('15s'))\nprint(parse_duration('2min'))\nprint(parse_duration('1h'))\nprint(parse_duration('1d'))\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass/exercises/example_exercises/example_8_function.py\ndef format_size(size):\n    # Your code goes here.\n    return \"\"\n\n\nprint(format_size(1024 * 512))\nprint(format_size(1024**2 - 1))/exercises/example_exercises/example_6_program.py\nimport os\n\ndef process_commands():\n    # Your code goes here.\n    pass\n\n\ndef main():\n    process_commands()\n\n\nif __name__ == '__main__':\n    main()/exercises/example_exercises/example_3_program.py\ndef search_list(lst, target, trace=[]):\n    # Your code goes here.\n    return -1\n\n\nprint(search_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))/exercises/example_exercises/example_4_program.py\ndef process_candidates(target, match_rule, *candidates):\n    # Your code goes here.\n    return 0\n\n\nprint(process_candidates('apple', 'CaseSensitive', 'Apple', 'banana', 'APPLE'))\nprint(process_candidates('apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE'))/exercises/example_exercises/example_1_function.py\ndef ceil_divide_without_div(n, b):\n    # Your code goes here.\n    return 0\n\n\nprint(ceil_divide_without_div(9, 2))\nprint(ceil_divide_without_div(8, 2))\nprint(ceil_divide_without_div(7, 2))\nprint(ceil_divide_without_div(6, 2))\nprint(ceil_divide_without_div(5, 2))/exercises/example_exercises/example_5_function.py\ndef encode_integer(num):\n    # Your code goes here.\n    return \"\"\n\n\nprint(encode_integer(0))\nprint(encode_integer(1))\nprint(encode_integer(2))\nprint(encode_integer(3))\nprint(encode_integer(4))\nprint(encode_integer(5))\nprint(encode_integer(6))\nprint(encode_integer(7))\nprint(encode_integer(8))\nprint(encode_integer(9))\nprint(encode_integer(10))\nprint(encode_integer(11))/exercises/example_exercises/example_2_function.py\nimport torch\n\ndef calculate_top_k_accuracy(predictions, labels, k=3):\n    # Your code goes here.\n    return 0\n\n\nprint(calculate_top_k_accuracy(torch.randn(2, 3), torch.tensor([0, 2])))\nprint(calculate_top_k_accuracy(torch.randn(2, 3), torch.tensor([1, 2])))/exercises/example_exercises/example_6_function.py\nimport os\n\ndef process_commands(commands):\n    # Your code goes here.\n    pass\n\n\nprint(process_commands(['echo \"Hello World!\"']))\nprint(process_commands(['echo \"Hello World!\"', 'echo \"Goodbye World!\"']))"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: C++ to JavaScript interoperability, native function call with function arguments, function return value, native function call with function return value, function argument validation\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_DirectionalLight_illuminanceHDR_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::DirectionalLight *arg1 = (cc::scene::DirectionalLight *) NULL ;\n    float arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::DirectionalLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) int, short, long, signed char, float, double\n    ok &= sevalue_to_native(args[0], &arg2, nullptr);\n    SE_PRECONDITION2(ok, false, \"DirectionalLight_illuminanceHDR_set,2,SWIGTYPE_float\"); \n    cc_scene_DirectionalLight_illuminanceHDR_set(arg1,arg2);\n    \n    \n    return true;\n}", "docstring": "// out 1", "function_name": "js_cc_scene_DirectionalLight_illuminance_get"}, "id": 333, "seed": "static bool js_cc_scene_DirectionalLight_illuminanceHDR_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::DirectionalLight *arg1 = (cc::scene::DirectionalLight *) NULL ;\n    float arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::DirectionalLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) int, short, long, signed char, float, double\n    ok &= sevalue_to_native(args[0], &arg2, nullptr);\n    SE_PRECONDITION2(ok, false, \"DirectionalLight_illuminanceHDR_set,2,SWIGTYPE_float\"); \n    cc_scene_DirectionalLight_illuminanceHDR_set(arg1,arg2);\n    \n    \n    return true;\n}", "__index_level_0__": 85, "concepts": ["C++ to JavaScript interoperability", "native function call with function arguments", "function return value", "native function call with function return value", "function argument validation"], "parsing_result": [{"instruction": "Create a Python function that converts a C++ function `int function(int a, int b)` into a JavaScript function, using native function calls and interoperability with Python. The function should accept two integers as arguments, and should return the result of the C++ function.\n\nEnsure that the function correctly handles cases where the function input is invalid, such as non-integer arguments or function arguments that exceed the maximum integer value."}, {"instruction": "Create a function in Python that takes a C++ function with one int argument and returns its value as a function in JavaScript. The function should take in a number and return a number."}, {"instruction": "Create a Python function that takes a C++ function as an argument and returns its return value. The function must be callable from both Python and C++. Ensure that the function works with both raw and wrapper C++ functions. Add validation to ensure the C++ function is callable."}, {"instruction": "Implement a function `square_with_default_16(n)` that squares a number `n` and returns the result, with a default value of 16 raised to the square of `n`. The function should accept a single input, the number to square, and should use native function calls to the C++ method `square` to perform the square operation. Additionally, the function should validate its input using assertions to ensure it is a non-negative integer."}, {"instruction": "Write a Python function to convert a C++ function call into JavaScript syntax. The function should accept a `function_name` and a `list` of arguments, and return a string in the form of JavaScript's native function syntax, allowing for the function call to be evaluated without runtime errors.\n\nThe arguments should be converted into an appropriate format for the JavaScript function, such as a comma-separated list of values. Additionally, if the function has a return value, the return value should be evaluated and returned appropriately.\n\nFor example, given a function `sum` with two arguments and a return value of a number, the function should return `sum(1, 2)` as a string, where the arguments are converted to a JavaScript syntax, and the return value is returned from the function call. Similarly, given a function `divide` with two arguments and a return value of a number, the function should return `divide(1, 2)` as a string, where the arguments are converted to a JavaScript syntax, and the return value is returned from the function call."}, {"instruction": "Implement a Python function capable of calling a native C++ function with one or more arguments. It should also be able to return a value from the native function call.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert call_c_func('factorial', 4) == 24\nassert call_c_func('factorial', 1) == 1\n```"}, {"instruction": "Implement a Python function `volume` that takes two numeric parameters, `width` and `height`, and returns the volume of a rectangle. This function should be implemented in C++ using a native function call to a C++ function that implements the calculation. Additionally, the function should return the volume as a JavaScript function.\n\nThe native function call should accept parameters of type `double` and return a `double` value. If the function is not implemented in C++, the function should throw an exception."}, {"instruction": "Develop a Python function that converts a C++ function that takes a string and returns an integer into a JavaScript function. The input string should be a function call with arguments (e.g., \"foo(1, 2)\"). Parse the function call and return the result of the C++ function. The function should be able to handle invalid input such as invalid function calls, missing parentheses, or invalid arguments."}, {"instruction": "Create a Python function `convert_c_to_js` that takes a C++ function declaration string and converts it into a JavaScript function declaration string that is equivalent. The input should be a string representation of a function declaration in C++ that includes the return type, function name, and parameters. The output should be a JavaScript function declaration equivalent to the input function. The function should handle cases where the input function:\n\n- has no return value,\n- has a non-void return type,\n- has a void return type,\n- has multiple parameters,\n- has a compound return type (e.g., a struct or class object),\n- is overloaded, or\n- has default parameter values."}, {"instruction": "Write a Python function that takes a function as an argument and calls it with appropriate arguments based on the function's definition. The function should be called with the same arguments as the function definition, but it should return the return value of the function call. A wrapper function that calls a function with a certain number of required and optional arguments is provided as a template."}, {"instruction": "Write a Python function that accepts a C++ function pointer and a list of inputs. The function should call the C++ function pointer with the specified inputs, and return the result in Python. Utilize a named function as the C++ function pointer and the list of inputs as the arguments. Ensure the function handles cases with invalid inputs, such as non-C++ functions, empty inputs, or an insufficient number of inputs."}, {"instruction": "Implement a Python function `sum_of_all_even_squares` that accepts a list of integers as input and returns the sum of all even squares in the list. The function should handle edge cases, such as lists with no or only one element, and return `0` when the input list is empty.\n\nThe function should not use list comprehension or `sum` to calculate the sum of even squares. Instead, it should implement a native C++ function, `sum_of_all_even_squares`, that computes the sum of all even squares in the input list. This function should be exposed to Python as a native Python function with C++ implementation."}, {"instruction": "Construct a JavaScript function `calculate_sum` that takes a list of numbers as a parameter and returns the sum of its elements. Ensure the function calls native C++ functions to implement the computation and handles edge cases (empty list, list with negative elements). Ensure the function is interoperable with Python. Ensure the function is exposed to the caller as a native JavaScript function using `Function.call()`. If the function is called incorrectly (incorrect argument type, invalid input), the function should raise an error."}, {"instruction": "Implement a Python function that accepts a function name as an argument and returns the return value of that function.\n\nFor example, if the function argument is `f = lambda x: x**2`, then the return value should be `16`."}, {"instruction": "Write a Python function that converts a C++ function call with function arguments to a JavaScript function call with function arguments. The function should return the JavaScript function call with the function return value.\n\nFor example, given the C++ function call `func(a1, a2, a3)` with a function argument type of `bool`, `int`, and `char *`, the function should return the JavaScript function call `func(a1, a2, a3)` where the function return value is of type `bool`."}, {"instruction": "Design a Python function that accepts a C++ function pointer as an argument to call from Python and returns a Python function that calls the C++ function. Utilize native function calls, function calls in JavaScript, and function return values to achieve the desired result. Also, ensure that the function accepts a variable number of arguments and returns a single value."}, {"instruction": "Create a Python function to convert a C++ function into a JavaScript function. The function should accept and return a native value as well as native values as function arguments. The function should handle validation of function arguments and return values to ensure they pass the Python interpreter."}, {"instruction": "Create a Python function that takes a Python function and a list of arguments as input, and returns the result of calling the input function with the arguments.\n\nFor example, given a function `f`, the function should pass the following assertions:\n\n```python\ndef f(x): return x + 1\nassert eval_function(f, [4]) == 5\nassert eval_function(lambda x: x ** 2, [5]) == 25\n```\n\nThe function should also support calling any native Python functions, including user-defined functions."}, {"instruction": "Develop a Python function `matrix_multiply` to multiply two matrices of arbitrary size using JavaScript. The result should be returned as a new matrix. The function should pass the following assertions:\n\n```python\nassert np.array_equal(matrix_multiply(np.array([[1, 2], [3, 4]]), np.array([[5, 6], [7, 8]]))) == np.array([[19, 22], [43, 50]])\nassert np.array_equal(matrix_multiply(np.array([[1, 2, 3], [4, 5, 6]]), np.array([[7, 8], [9, 10], [11, 12]]))) == np.array([[58, 64], [139, 154]])\nassert np.array_equal(matrix_multiply(np.array([[1]]), np.array([[1]]))) == np.array([[1]])\n```"}, {"instruction": "Write a Python function that converts C++-like function calls into JavaScript-like function calls. The function should accept a string representing a C++ function call and return a corresponding JavaScript function call. A C++ function call includes the function name, potentially an argument list, and optionally a return value. The JavaScript function call should be identical to the C++ call with the following exceptions:\n\n- The JavaScript function call should not include the function name. Instead, the function name should be specified in the JavaScript function body.\n- The JavaScript function call should not include the argument list.\n- The JavaScript function call should include a return value, if the C++ function call had a return value.\n\nFor example, the function should pass the following assertions:\n```python\nassert cpp_to_js('sum(1, 2)') == 'sum(1, 2);'\nassert cpp_to_js('sum(1, 2);', 'return value;') == 'function() { return value; }'\ntry:\n    cpp_to_js('sum(1, 2) = 3;')\nexcept TypeError as e:\n    pass\n```"}, {"instruction": "Create a Python function that calls a C++ function and returns its result as a string. The function should take three string arguments: `function_name`, `arg1`, and `arg2`, and call the function with these arguments. The function should raise an error if any of the arguments are empty or contain non-alphanumeric characters."}, {"instruction": "Implement a Python function that computes the maximum subarray sum in an array.\nThe function should accept a list of integers as input and return the maximum contiguous subarray sum as an integer. A subarray is a contiguous sequence of elements within the original array. If the sum of all numbers in the array is negative, return the sum of the whole array.\n\nFor example, given the array `[1, -2, 3, 4, -5]` the function should return `8` (because the subarray `[3, 4]` has the largest sum). Note that the subarray should be contiguous (i.e., it should not include numbers that are not contiguous as segments)."}, {"instruction": "Translate a C++ function into a JavaScript function that accepts one argument and returns a value. Use native JavaScript functions to implement the C++ function. Ensure the function returns the value of the native function call with the provided argument. Similarly, the function should accept the value of the native function call and return the value of the argument. Also, ensure the function calls are performed without the need for explicit function argument and return value definitions."}, {"instruction": "Develop a Python function `to_js_func` that converts a Python function into a JavaScript function. It should support both Python functions with no arguments and those with arguments. The output should be a JavaScript function definition that can be executed as a function object with the same arguments as the input Python function. Utilize a closure to maintain the environment of the input function, and include error handling to allow for cases when the input function will not be callable from JavaScript."}, {"instruction": "Write a Python function that takes a list and a function as input and applies the given function to each element of the list. The function should accept the list element as the only argument and produce the return value of the function call as the function return value. Ensure the function argument and return value are native types for JavaScript, for example, `Number`, `String`, and `Array`."}, {"instruction": "Write a Python function `calculate_sum_of_squares` that takes an integer `n` and computes the sum of squares from 0 to `n` inclusive. The function should accept the value of `n` as a native JavaScript function argument and return the computed sum of squares as a native JavaScript function return value. The input should be validated to ensure that it is a positive integer."}, {"instruction": "Create a Python function that converts a C++ function definition into a JavaScript equivalent without the need to use any external libraries. The function definition should include the function name, argument types, and return type. If the function has no arguments, there should be no parentheses after the function name. If the function takes no arguments and has no return value, it should be equivalent to `void foo()`. Additionally, the function should be able to validate arguments and return values.\n\nFor example, given the C++ definition:\n\n```c++\nint add(int a, int b) { return a + b; }\n```\n\nThe equivalent JavaScript function should be equivalent to:\n\n```javascript\nfunction add(a, b) {\n    if (typeof a !== 'number' || typeof b !== 'number') {\n        throw new Error('Arguments must be numbers');\n    }\n    return a + b;\n}\n```"}, {"instruction": "Create a Python function that converts a C++ function definition to a JavaScript definition using JavaScript function expressions. Include a JavaScript equivalent for each of the following C++ functions:\n- `int sum(int a, int b)`\n- `int sum(int a, int b, bool c = true)`\n- `int sum(int a, int b, bool c = true, int d = 0)`\n\nThe function should accept arguments and return values in a way that is native to JavaScript."}, {"instruction": "Write a Python function to convert a C++ function that takes two integer arguments and returns an integer value into a JavaScript function that has the same functionality.\n\nFor example, given the C++ function `int add(int a, int b){ return a + b; }`, the corresponding JavaScript function should be `function add(a, b){ return a + b; }`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: linear algebra, optical flow, vectorization, iterators\n\n### Task", "fingerprint": null, "content": {"code": "cv::Mat getDenseOpticFlowRobustLeft(cv::Mat frame1_1C,cv::Mat frame2_1C,cv::Mat imageToDrawOn){\n    Mat flow, frame;\n    // some faster than mat image container\n    UMat  flowUmat, prevgray;\n    vector<Vec4f> interestingPoints;\n    vector<Vec4f> nonInterestingPoints;\n    vector<Vec4f> allPoints;\n    vector<float> angles;\n    vector<float> absoluteSize;\n    \n    // For all optical flow you need a sequence of images.. Or at least 2 of them. Previous and current frame\n    \n    // calculate optical flow\n    calcOpticalFlowFarneback(frame1_1C, frame2_1C, flowUmat, 0.5, 2, 50, 3, 5, 1.1, 0);\n    // copy Umat container to standard Mat\n    flowUmat.copyTo(flow);\n    \n    // By y += 5, x += 5 you can specify the grid\n    for (int y = 0; y < imageToDrawOn.rows; y += 20){\n        for (int x = 0; x < imageToDrawOn.cols; x += 20)\n        {\n            // get the flow from y, x position * 10 for better visibility\n            const Point2f flowatxy = flow.at<Point2f>(y, x) * 10;\n            line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(0,0,255));\n            allPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n            \n            // draw line at flow direction\n            int minimumDistance = 10;\n            //Minimum Parameters for angle and resultant distance\n            double resultantDistance = sqrt((flowatxy.x*flowatxy.x)+(flowatxy.y*flowatxy.y));\n            float angletemp = atanf((abs(flowatxy.y))/(abs(flowatxy.x)));\n            //                            cout<< \"angletemp= \"<<angletemp*180/M_PI<<endl;\n            float calculatedAngle;\n            if(flowatxy.x<0 && flowatxy.y<0 ){\n                calculatedAngle = M_PI-angletemp;\n            }else if (flowatxy.x<0 && flowatxy.y>0){\n                calculatedAngle =M_PI + angletemp;\n            }else if(flowatxy.x>0&&flowatxy.y>0 ){\n                calculatedAngle = 2*M_PI - angletemp;\n            }else{\n                calculatedAngle = angletemp;\n            }\n            //Filter Lines\n            if (resultantDistance>minimumDistance){\n                if(calculatedAngle <20*M_PI/180 || calculatedAngle>270*M_PI/180){\n                    angles.push_back(calculatedAngle);\n                    absoluteSize.push_back(resultantDistance);\n                    interestingPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n                    line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(255,255,0));\n                    //                    line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(255,255,0));\n                    //                                    cout<<\"calculatedAngle= \"<<calculatedAngle*180/M_PI<<endl;\n                    //                                    imshow(\"imageDebug\", imageToDrawOn);\n                    //\n                    //                                    waitKey();\n                }else{\n                    nonInterestingPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n                }\n            }\n            circle(imageToDrawOn, Point(x, y), 1, Scalar(0, 0, 0), -1);\n        }\n    }\n    \n    bool isCarCuttingIn;\n    int sizeOfInterestingPoints = interestingPoints.size();\n    int sizeOfNonInterestingPoints = nonInterestingPoints.size();\n    \n    float sumAngles;\n    float sumDistances;\n    \n    //    cout<<\"Interesting Points\"<<interestingPoints.size()<<endl;\n    //    cout<<\"Non-Interesting Points\"<<nonInterestingPoints.size()<<endl;\n    \n    if(interestingPoints.size()>nonInterestingPoints.size()){\n        //average the angles and the magnitude\n        for (int k=0; k<angles.size(); k++) {\n            sumAngles += angles[k];\n            sumDistances += absoluteSize[k];\n        }\n        float averageAngle =sumAngles/angles.size();\n        float averageDistances = sumDistances/absoluteSize.size();\n        \n        float width  = imageToDrawOn.cols;\n        float height = imageToDrawOn.rows;\n        \n        float averageY;\n        float averageX;\n        \n        if(averageAngle>90*M_PI/180 && averageAngle<180*M_PI/180){\n            // x -ve y +ve\n            averageAngle = averageAngle-(90*M_PI/180);\n            \n            averageY = averageDistances * -sin(averageAngle);\n            averageX = averageDistances * -(cos(averageAngle));\n        }else if(averageAngle>180*M_PI/180 && averageAngle<270*M_PI/180){\n            // x -ve y -ve\n            averageAngle = averageAngle-(180*M_PI/180);\n            \n            averageY = averageDistances * (sin(averageAngle));\n            averageX = averageDistances * -(cos(averageAngle));\n        }else if(averageAngle>270*M_PI/180 && averageAngle<360*M_PI/180){\n            // x +ve y -ve\n            averageAngle = averageAngle-(270*M_PI/180);\n            \n            averageY = averageDistances * (sin(averageAngle));\n            averageX = averageDistances * (cos(averageAngle));\n        }else{\n            averageX = averageDistances*cos(averageAngle);\n            averageY = averageDistances*sin(averageAngle);\n        }\n        \n        \n        //        float y = averageDistances*sin(averageAngle);\n        //        float x = averageDistances*cos(averageAngle);\n        \n        //Draw Large arrows\n        arrowedLine(imageToDrawOn, Point(width/2,height/2), Point(averageX+width/2,averageY+height/2), Scalar(255,0,0));\n        // turn bool on cutting lane\n        isCarCuttingIn = true;\n        //        cout<<\"Car cutting in\"<<endl;\n    }else{\n        //turn Bool on cutting lane\n        //        cout<<\"Car NOT cutting in\"<<endl;\n        isCarCuttingIn = false;\n    }\n    \n    if (isCarCuttingIn) {\n        circle(imageToDrawOn, Point(100,50), 10, Scalar(0,0,255),-1, 8, 0);\n//        objectCuttingIn=true;\n    }else{\n        circle(imageToDrawOn, Point(100,50), 10, Scalar(255,255,255),-1, 8, 0);\n//        objectCuttingIn=false;\n    }\n    \n    return imageToDrawOn;\n}", "docstring": "//    cout<<\"Non-Interesting Points\"<<nonInterestingPoints.size()<<endl;", "function_name": "getDenseOpticFlowRobustRight"}, "id": 334, "seed": "cv::Mat getDenseOpticFlowRobustLeft(cv::Mat frame1_1C,cv::Mat frame2_1C,cv::Mat imageToDrawOn){\n    Mat flow, frame;\n    // some faster than mat image container\n    UMat  flowUmat, prevgray;\n    vector<Vec4f> interestingPoints;\n    vector<Vec4f> nonInterestingPoints;\n    vector<Vec4f> allPoints;\n    vector<float> angles;\n    vector<float> absoluteSize;\n    \n    // For all optical flow you need a sequence of images.. Or at least 2 of them. Previous and current frame\n    \n    // calculate optical flow\n    calcOpticalFlowFarneback(frame1_1C, frame2_1C, flowUmat, 0.5, 2, 50, 3, 5, 1.1, 0);\n    // copy Umat container to standard Mat\n    flowUmat.copyTo(flow);\n    \n    // By y += 5, x += 5 you can specify the grid\n    for (int y = 0; y < imageToDrawOn.rows; y += 20){\n        for (int x = 0; x < imageToDrawOn.cols; x += 20)\n        {\n            // get the flow from y, x position * 10 for better visibility\n            const Point2f flowatxy = flow.at<Point2f>(y, x) * 10;\n            line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(0,0,255));\n            allPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n            \n            // draw line at flow direction\n            int minimumDistance = 10;\n            //Minimum Parameters for angle and resultant distance\n            double resultantDistance = sqrt((flowatxy.x*flowatxy.x)+(flowatxy.y*flowatxy.y));\n            float angletemp = atanf((abs(flowatxy.y))/(abs(flowatxy.x)));\n            //                            cout<< \"angletemp= \"<<angletemp*180/M_PI<<endl;\n            float calculatedAngle;\n            if(flowatxy.x<0 && flowatxy.y<0 ){\n                calculatedAngle = M_PI-angletemp;\n            }else if (flowatxy.x<0 && flowatxy.y>0){\n                calculatedAngle =M_PI + angletemp;\n            }else if(flowatxy.x>0&&flowatxy.y>0 ){\n                calculatedAngle = 2*M_PI - angletemp;\n            }else{\n                calculatedAngle = angletemp;\n            }\n            //Filter Lines\n            if (resultantDistance>minimumDistance){\n                if(calculatedAngle <20*M_PI/180 || calculatedAngle>270*M_PI/180){\n                    angles.push_back(calculatedAngle);\n                    absoluteSize.push_back(resultantDistance);\n                    interestingPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n                    line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(255,255,0));\n                    //                    line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(255,255,0));\n                    //                                    cout<<\"calculatedAngle= \"<<calculatedAngle*180/M_PI<<endl;\n                    //                                    imshow(\"imageDebug\", imageToDrawOn);\n                    //\n                    //                                    waitKey();\n                }else{\n                    nonInterestingPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n                }\n            }\n            circle(imageToDrawOn, Point(x, y), 1, Scalar(0, 0, 0), -1);\n        }\n    }\n    \n    bool isCarCuttingIn;\n    int sizeOfInterestingPoints = interestingPoints.size();\n    int sizeOfNonInterestingPoints = nonInterestingPoints.size();\n    \n    float sumAngles;\n    float sumDistances;\n    \n    //    cout<<\"Interesting Points\"<<interestingPoints.size()<<endl;\n    //    cout<<\"Non-Interesting Points\"<<nonInterestingPoints.size()<<endl;\n    \n    if(interestingPoints.size()>nonInterestingPoints.size()){\n        //average the angles and the magnitude\n        for (int k=0; k<angles.size(); k++) {\n            sumAngles += angles[k];\n            sumDistances += absoluteSize[k];\n        }\n        float averageAngle =sumAngles/angles.size();\n        float averageDistances = sumDistances/absoluteSize.size();\n        \n        float width  = imageToDrawOn.cols;\n        float height = imageToDrawOn.rows;\n        \n        float averageY;\n        float averageX;\n        \n        if(averageAngle>90*M_PI/180 && averageAngle<180*M_PI/180){\n            // x -ve y +ve\n            averageAngle = averageAngle-(90*M_PI/180);\n            \n            averageY = averageDistances * -sin(averageAngle);\n            averageX = averageDistances * -(cos(averageAngle));\n        }else if(averageAngle>180*M_PI/180 && averageAngle<270*M_PI/180){\n            // x -ve y -ve\n            averageAngle = averageAngle-(180*M_PI/180);\n            \n            averageY = averageDistances * (sin(averageAngle));\n            averageX = averageDistances * -(cos(averageAngle));\n        }else if(averageAngle>270*M_PI/180 && averageAngle<360*M_PI/180){\n            // x +ve y -ve\n            averageAngle = averageAngle-(270*M_PI/180);\n            \n            averageY = averageDistances * (sin(averageAngle));\n            averageX = averageDistances * (cos(averageAngle));\n        }else{\n            averageX = averageDistances*cos(averageAngle);\n            averageY = averageDistances*sin(averageAngle);\n        }\n        \n        \n        //        float y = averageDistances*sin(averageAngle);\n        //        float x = averageDistances*cos(averageAngle);\n        \n        //Draw Large arrows\n        arrowedLine(imageToDrawOn, Point(width/2,height/2), Point(averageX+width/2,averageY+height/2), Scalar(255,0,0));\n        // turn bool on cutting lane\n        isCarCuttingIn = true;\n        //        cout<<\"Car cutting in\"<<endl;\n    }else{\n        //turn Bool on cutting lane\n        //        cout<<\"Car NOT cutting in\"<<endl;\n        isCarCuttingIn = false;\n    }\n    \n    if (isCarCuttingIn) {\n        circle(imageToDrawOn, Point(100,50), 10, Scalar(0,0,255),-1, 8, 0);\n//        objectCuttingIn=true;\n    }else{\n        circle(imageToDrawOn, Point(100,50), 10, Scalar(255,255,255),-1, 8, 0);\n//        objectCuttingIn=false;\n    }\n    \n    return imageToDrawOn;\n}", "__index_level_0__": 86, "concepts": ["linear algebra", "optical flow", "vectorization", "iterators"], "parsing_result": [{"instruction": "Implement a Python function that computes the sum of the absolute differences between a 2D image and a corresponding template in the [optical flow](https://en.wikipedia.org/wiki/Optical_flow) context. The function should accept a 2D image and a 2D template as input, and return the sum of the absolute differences between each corresponding pixel pair in the two images.\n\nFor example, given the image and template below, the function should return 23.\n\n![optical flow image](optical_flow_image.png)\n![optical flow template](optical_flow_template.png)"}, {"instruction": "Design a Python function that takes two images, `img1` and `img2`, and performs optical flow to compute the flow between them. The function should return a NumPy array of the same size as the input images with a value of 1 if the pixels at the corresponding locations are moving in the same direction, and a value of -1 if moving in opposite directions. If the optical flow cannot be computed for a pixel, e.g. when the pixel is on the edge of an image, the corresponding value should be 0.\n\nSolve the problem by implementing the Lucas-Kanade optical flow algorithm using vectorized operations, and use iterators to avoid unnecessary computations. The function should handle handling the case where the first image is empty (i.e. only the second image is provided)."}, {"instruction": "Implement a Python function `optical_flow` that takes two images as inputs and outputs the optical flow map between them. The optical flow map should be a 2D NumPy array of shape (height, width), where each element is a tuple of the corresponding (u, v) optical flow vectors (u and v can be negative to indicate reverse direction).\n\nUse the Sobel operator and the following equations to calculate the optical flow: (https://en.wikipedia.org/wiki/Optical_flow)\n\n$$\n\\begin{align}\nIx &= \\frac{\\partial f}{\\partial x} = \\frac{f(x+1, y) - f(x-1, y)}{2} \\\\\nIy &= \\frac{\\partial f}{\\partial y} = \\frac{f(x, y+1) - f(x, y-1)}{2} \\\\\n\\end{align}\n$$\n\nThen, use the following equation to calculate the (u, v) optical flow vectors for each pixel:\n$$\n\\begin{align}\nu = - \\frac{Ix}{\\sqrt{Ix^2 + Iy^2}} \\\\\nv = - \\frac{Iy}{\\sqrt{Ix^2 + Iy^2}}\n\\end{align}\n$$\n\nFor this task, you should use the Sobel operator to calculate the first derivatives of the image intensity, and then use these derivatives to calculate the optical flow vectors. You do not need to consider the actual image intensity at each pixel."}, {"instruction": "Create a Python function `find_lsm_clusters` that takes a sequence of 2D points as input and returns a list of clusters that form a rough approximation of the local structure of the input points. Each cluster is defined as a set of connected, nearly-identical points within a certain distance threshold, and the clusters should be separated by a distance threshold.\n\nThe function should return a list of clusters in the order of appearance in the input sequence. The function should use a linear time algorithm to solve the problem with a time complexity of O(N) where N is the length of the input sequence."}, {"instruction": "Implement a Python function that computes the first `k` principal components of an image, where the input image is a NumPy array of doubles and the output is a NumPy array of doubles. The input image should be normalized to have the mean pixel value of 0 and standard deviation of 1. The function should compute the first `k` principal components, which are the eigenvectors of the covariance matrix of the normalized pixels."}, {"instruction": "Write a Python function that takes two images as input and computes the optical flow between them using the Lucas\u2013Kanade algorithm. The output should be a NumPy array of the same size as the first input image, where each pixel contains the magnitude and direction of the optical flow vector for that pixel. Use the `cv2.calcOpticalFlowFarneback` function from the OpenCV library for this task."}, {"instruction": "Write a Python function that implements the Lucas-Kanade optical flow algorithm to compute flow vectors for each pixel of an image. The function should accept two images and return a NumPy array containing flow vectors. Optimize the function to run in linear time complexity."}, {"instruction": "Write a Python function `optical_flow` that takes two frames of the same size as input and computes the optical flow between them. The function should accept a `Numpy` array of pixels representing the first frame, a `Numpy` array representing the second frame, and a `Numpy` array representing the mask of the first frame. The function should return a list of `Numpy` arrays representing the optical flows for each pixel in the first frame.\n\nThe optical flow should be computed for each pixel in the first frame. For a given pixel, its optical flow should be the vector representing the displacement of the pixel between the two frames. Use the Euclidean distance as the metric for computing the magnitude of the optical flow.\n\nTo compute the optical flow for a particular pixel, use the following steps:\n\n- Create a linear space `x` between 0 and the width of the frame, with a specified step size. This will be the x coordinate of the pixel.\n- Create a linear space `y` between 0 and the height of the frame, with a specified step size. This will be the y coordinate of the pixel.\n- For each `(x, y)` pair, compute the optical flow between the pixel in the first frame and the pixel at the same coordinates in the second frame.\n- Store the resulting optical flow as a vector in the corresponding position in the output list."}, {"instruction": "Implement a Python function that calculates the optical flow between two images. The function should take two images as arguments and return the optical flow in the form of a NumPy array. The optical flow should be calculated by the Lucas-Kanade method, a popular optical flow algorithm that uses a series of image derivatives to calculate the optical flow.\n\nYou should use the following assumptions:\n\n- The images to be passed to the function are grayscale.\n- Both images have the same size.\n- The images are grayscale with 8-bit unsigned integer pixel values.\n- The images have the same number of rows and columns."}, {"instruction": "Implement a Python function that computes an optical flow (i.e., the difference between two frames) using the Lucas-Kanade method. The function should take a list of images as input and output a list of optical flow images.\n\nThe optical flow from frame `i` to frame `i+1` is defined as the displacement `u` and `v` of the pixels at the center of the image, given by `u = (Ix - Ix-1) / 2` and `v = (Iy - Iy-1) / 2`. The optical flow is computed for each pixel independently in each image. The final optical flow is defined as the average of all the pixel optical flows.\n\nTo detect the edge of a frame, you can use the `sobel` function from `cv2.ximgproc`."}, {"instruction": "Design a Python function to implement optical flow between two videos. The function should accept two input video files, `video1` and `video2`, and output the optical flow as a numpy array representing the difference of the video frames. The function should be vectorized to run on NumPy arrays, while the computation should be parallelized using iterators."}, {"instruction": "Implement a Python function `calculate_optical_flow` that takes as input an image `I` and a list of keypoints `kps` and computes the optical flow field, or the vector indicating the displacement of each pixel from the previous frame. The function should output a NumPy array of the same dimension as the input image. This function should be efficient, meaning that the algorithm should not iterate over each pixel in the image sequentially, but be vectorized and run in parallel."}, {"instruction": "Create a Python function for estimating optical flow using the Lucas-Kanade method and vectorization. The algorithm should take a series of images as input, and return the optical flow vectors for each image. The optical flow vectors should be represented as a 2D NumPy array, where each element represents the flow vector between two consecutive images. The optical flow vectors should be estimated using the algorithm described in \"Optical Flow: A Tutorial\" by , , and .\n\nThere are several possible implementations for the algorithm, and you should choose the approach that best matches your programming language."}, {"instruction": "Write a Python function that calculates the optical flow for a video sequence using a chosen optical flow method. The function should accept three arguments: `video`, a NumPy array of pixels from an input video, `k`, the number of neighbors to use in the optical flow method, and `method`, the name of the optical flow method to use.\n\nUse the following definitions for the optical flow methods:\n\n- 'DFT' (discrete Fourier transform)\n- 'Horn-Schunck' (Horn-Schunck optical flow)\n\nFor the 'DFT' method, use the following normalization method:\n\n```python\ndef normalize(flow):\n    flow_norm = np.sqrt(np.sum(np.square(flow), axis=2))\n    return np.stack((\n        flow[:, :, 0] / flow_norm,\n        flow[:, :, 1] / flow_norm\n    ), axis=2)\n```\n\nFor the 'Horn-Schunck' method, use the following pseudocode:\n\n```python\ndef horn_schunck(video, k, method='horn-schunck'):\n    # obtain optical flow for each neighbor by taking the average of the \n    # difference between the center pixel and its neighbors\n    flow_x = np.mean(video[:, :, :-k, :] - video[:, :, k:2*k, :], axis=2)\n    flow_y = np.mean(video[:, :, :-k, :] - video[:, :, k:2*k, :], axis=2)\n    # store each neighbor's optical flow\n    neighbors_flow_x = np.zeros(video.shape)\n    neighbors_flow_y = np.zeros(video.shape)\n    # iterate over the video and fill in the neighbors' optical flow\n    for row in range(video.shape[0]):\n        for col in range(video.shape[1]):\n            if col - k >= 0 and col + k < video.shape[1]:\n                # use the optical flow of the center pixel as the average\n                neighbors_flow_x[row, col, col - k:col + k] = flow_x[row, col]\n                neighbors_flow_y[row, col, col - k:col + k] = flow_y[row, col]\n            elif col - k < 0:\n                # use the optical flow calculated from the neighboring pixels\n                neighbors_flow_x[row, col, :] = flow_x[row, col]\n                neighbors_flow_y[row, col, :] = flow_y[row, col]\n            else:\n                # use the optical flow calculated from the neighboring pixels\n                neighbors_flow_x[row, col, :] = flow_x[row, col]\n                neighbors_flow_y[row, col, :] = flow_y[row, col]\n    # if the method is Horn-Schunck, use the calculated neighbor optical flow\n    if method == 'horn-schunck':\n        return neighbors_flow_x, neighbors_flow_y\n    # otherwise, normalize the neighbor optical flow\n    else:\n        return normalize(neighbors_flow_x), normalize(neighbors_flow_y)\n```\n\nFor other methods, you may need to use NumPy's `np.roll` function to shift the video frame to calculate the neighbor optical flow."}, {"instruction": "Design a Python function that takes two images and computes the optical flow between the two using the Lucas-Kanade method. The function should return a new image containing the optical flow lines computed between the two images. The algorithm should be implemented using vectorized computation and using iterator-based approaches."}, {"instruction": "Implement a function to compute the L2-norm of an input vector or matrix. For a vector, the L2-norm is calculated by summing the squares of the vector's values, then taking the square root. For a matrix, the L2-norm is calculated by summing the squares of the matrix's flattened values, then taking the square root. Make sure to include assertions to ensure that the input is a vector or matrix.\n\nUse vectorization wherever possible. Use iterators wherever possible."}, {"instruction": "Implement a Python function `solve_optical_flow` that takes two NumPy arrays `img1` and `img2` representing two frames of a video. The function should return a NumPy array of shape `(10, 10, 3)` representing the optical flow between these two frames. The optical flow in each pixel is represented by a vector that contains the horizontal and vertical movement offsets. The function should use a sliding window technique to compute the optical flow of each pixel within a 10x10 window. Additionally, the function should use vectorization to process the entire image efficiently."}, {"instruction": "Implement a Python function `find_motion_vectors` that takes a list of `ndarray`s representing images and a function `motion_func` to calculate the motion vectors between two images. The function should return a list of the motion vectors, each represented as a NumPy array, for all consecutive pairs of images. Assume that all images are of the same size and the function `motion_func` only determines the motion vectors between two pairs of images.\n\nFor example, given a list of 5 images, the function should output a list of 4 motion vectors, corresponding to the motion vectors between each pair of consecutive images."}, {"instruction": "Create a Python function that takes two arrays representing the homography matrix and two points in the image plane, and returns the coordinates of the second point in the real world. The function should be vectorized to handle multiple points at once.\n\nSolve the problem in three lines of code, one for the input validation, one for the main logic, and the other for the output."}, {"instruction": "Write a Python function that takes a video file stored in an opencv VideoCapture object and returns an iterator of the frames. You can assume the video is uncompressed and has 25 frames per second. Use the following formula to calculate how many frames of a video have passed during a specific time interval:\n\n```\nnum_frames = (time / 1000) * fps\n```\n\nThe function should support the following operations:\n\n- `next()`: yields the next frame\n- `iter()`: returns the iterator itself\n- `frame_by_time(time)`: returns a generator yielding the frame of the video that has passed during a specific time interval (taking into account the `fps` of the video)\n\nIn other words, this function should provide an iterator of frames that yields the frames that are used to calculate the `time` parameter."}, {"instruction": "Write a Python function `compute_optical_flow` that takes two images as NumPy arrays and calculates the Discrete Fourier Transform (DFT) of the images. The function should return the magnitude of the DFT as a NumPy array of the same shape. The function should accept a `window_size` parameter (default 10) to adjust the size of the window used to calculate the FFT."}, {"instruction": "Implement a Python function `estimate_optical_flow` that takes two input images and computes the optical flow between them. It should return the absolute optical flow for each pixel in a NumPy array, where each pixel is a vector containing the x and y components of the optical flow. The function should accept a two-dimensional NumPy array as input and return a NumPy array of the same shape.\n\nThe optical flow should be calculated using the Sobel operator and the [Lucas-Kanade method](https://en.wikipedia.org/wiki/Optical_flow#Lucas%E2%80%93Kanade_method) for computation. To get the x and y components of the optical flow, you can use the `scipy.ndimage.filters.sobel` function to apply the Sobel operator to the image.\n\nFor example, given two images `image1` and `image2`, the function should compute the optical flow between them and return the absolute optical flow for each pixel in a NumPy array."}, {"instruction": "Design a Python function that computes optical flow between two images, given two pixel coordinates. The function should return a 2D NumPy array of the same size as the input images, and should be able to handle images of different sizes. The returned array should contain vectors of the same length as the input images, with components corresponding to the displacement between each pixel pair.\n\nFor example, given the following images:\n\n![example1](./example1.png)\n\n![example2](./example2.png)\n\nThe function should return the following 2D NumPy array:\n\n```\narray([[[-0.36054688,  0.36054688],\n        [-0.11328125,  0.11328125],\n        [ 0.        ,  0.        ],\n        ...\n```"}, {"instruction": "Write a Python function to perform optical flow detection in an image. Optical flow is the change in position and orientation of an object relative to a reference frame. It can be used to calculate changes in distance, velocity, or direction. The function should accept an input image, a reference image, and an integer `n` as its parameters. The function should return an iterator that yields the optical flow between each pair of consecutive frames in the input image. The iterator should contain a tuple of the format `(frame_index, (x_offset, y_offset))`, where `frame_index` is the index of the current frame, and `(x_offset, y_offset)` is the optical flow (in pixels) between the current frame and the reference frame.\n\nFor example, given the following input image:\n\n![Example 9 Input Image](examples/example9.png)\n\nThe function should return an iterator that yields the following tuples:\n\n```\n(0, (-10.0, -10.0))\n(1, (-10.0, -10.0))\n(2, (20.0, -10.0))\n(3, (20.0, -10.0))\n(4, (20.0, 30.0))\n```"}, {"instruction": "Implement a Python function that computes the optical flow between two video frames. The function should take three arguments: `frame1`, a NumPy array of the first frame, `frame2`, a NumPy array of the second frame, and a boolean `verbose` indicating whether the function should print out the optical flow indices. The function should return a tuple of two NumPy arrays: the first of which contains the x component of the optical flow (horizontal vector), and the second of which contains the y component."}, {"instruction": "Implement a Python function that finds the maximal optical flow for any two images using the Lucas-Kanade algorithm. The input is two 2D numpy arrays, `prev_frame` and `curr_frame`, representing the previous and current image frames, respectively. The function should return a `numpy.ndarray` with the same dimensions as `curr_frame` representing the optical flow, with each element being the displacement of the corresponding pixel in the current frame."}, {"instruction": "Design a Python function that takes a 2D grid as an input and computes the optical flow from it. Optical flow is the vector field that describes the relative displacement between consecutive frames of a video. The grid has discrete values for pixel intensities between 0 and 255, where 0 represents black and 255 represents white. The function should return a 2D grid with the same size as the input grid and each pixel should be the optical flow vector from that grid to the next frame.\n\nFor example, given the following grid with 3 frames that are adjacent in time:\n```\n    [[120 150 160 180]\n     [120 160 180 190]\n     [100 150 190 180]\n     [100 130 180 170]]\n```\nThe function should return the following grid with the optical flow vectors:\n```\n    [[20  0  0  0]\n     [10  0  0  0]\n     [0  0  0  0]\n     [0  0  0  0]]\n```"}, {"instruction": "Design a Python function that takes as input two 2D numpy arrays of the same size and computes the sum of squared differences between them. The output should be a scalar. The function should run in linear time complexity."}, {"instruction": "Design a Python function that takes two images as NumPy arrays, computes the optical flow between them, and returns the result as a new NumPy array of shape: `(height, width, 12)`, where each element is the optical flow between the corresponding pixels in the two images. Each element should be a tuple of `(x1, y1, x2, y2)` that indicates the displacement between the corresponding pixels in the two images.\n\nFor example, given two images of the same size:\n\n| Original image | Optical flow |\n| --- | --- |\n| ![Original image](./imgs/img1.jpg) | ![Optical flow](./imgs/img2.jpg) |\n\nThe function should return a NumPy array of shape `(height, width, 12)` where each element is a tuple of `(x1, y1, x2, y2)`, representing the optical flow between the corresponding pixels in the two images. For example, the element `(2, 2, 44, 44)` indicates that pixel at position `(2, 2)` in the first image has a displacement of `(22, 22)` to its corresponding pixel in the second image."}, {"instruction": "Design a Python function to compute the optical flow of a sequence of 2D points between two consecutive frames using the Lucas-Kanade method. The function should return a list of vectors that represent the optical flow for each point. The optical flow is defined as the displacement vector from the first frame to the second, so the list should be of the same length as a list of points. Each vector element in the list should be a two-dimensional vector [u, v].\n\nYou can use any libraries that may help in the implementation. For example, NumPy, SciPy, OpenCV, and PyTorch may be useful for this task."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 8\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation, unsigned integer and floating-point conversion, conditional branching\n\n### Task", "fingerprint": null, "content": {"code": "float16 uint32_to_float16(uint32_t x) {\n    // float16 is formatted as follows: sign(1 bit) exponent(5 bits) mantissa(10 bits). The value is interpreted\n    // The value is interpreted using following formula:\n    // (-1)^sign * 1, mantissa * 2 ^ (exponent - 15)\n    // Here we set the following values:\n    // sign = 0\n    // exponent = 15, for obtaining a zero exponent.\n    // mantissa = 10 right bits from generated uint32 random value.\n\n    uint16_t x_uint16 = static_cast<uint16_t>(x);\n    convert_types out_val = {(static_cast<uint16_t>(15) << 10) | (x_uint16 & 0x3ffu)};\n    return out_val.f16 - static_cast<float16>(1);\n}", "docstring": "// mantissa = 23 right bits from generated uint32 random value.", "function_name": "uint32_to_float"}, "id": 341, "seed": "float16 uint32_to_float16(uint32_t x) {\n    // float16 is formatted as follows: sign(1 bit) exponent(5 bits) mantissa(10 bits). The value is interpreted\n    // The value is interpreted using following formula:\n    // (-1)^sign * 1, mantissa * 2 ^ (exponent - 15)\n    // Here we set the following values:\n    // sign = 0\n    // exponent = 15, for obtaining a zero exponent.\n    // mantissa = 10 right bits from generated uint32 random value.\n\n    uint16_t x_uint16 = static_cast<uint16_t>(x);\n    convert_types out_val = {(static_cast<uint16_t>(15) << 10) | (x_uint16 & 0x3ffu)};\n    return out_val.f16 - static_cast<float16>(1);\n}", "__index_level_0__": 87, "concepts": ["bitwise operation", "unsigned integer and floating-point conversion", "conditional branching"], "parsing_result": [{"instruction": "Design a Python program that takes a user-provided integer and determines whether it is a power of 2. The program should use bitwise operations to accomplish this task."}, {"instruction": "Create a Python program that implements a simple calculator using bitwise operations, a stack, and a linked list. The program should perform both integer and floating-point arithmetic, as well as add, subtract, multiply, divide, and square root operations. The program should handle invalid input and should correctly handle the order of operations."}, {"instruction": "Create a Python program that includes an infinite loop and checks for user input in the following format: `x = X.Y`. If the format is invalid, the program should print the error message \"INVALID INPUT\" and re-prompt the user for valid input. If the format is valid, the program should print out the corresponding decimal value of the input, assuming X is an integer and Y is a floating-point number.\n\nUse bitwise operations to convert between the integer and floating-point representations. To accommodate the variable-length float, use two unsigned integers to store the integer and fractional parts of the float, respectively."}, {"instruction": "Create a Python program that takes a positive integer as input and determines whether it is a perfect power (base to the power of exponent) of another positive integer. Return `True` if the input is a perfect power, otherwise return `False`.\n\nFor example, `is_perfect_power(256)` should return `True` since `256 = 2**8` and `is_perfect_power(257)` should return `False` since `257` is not a perfect power of any positive integer."}, {"instruction": "Design a Python program that takes a float number and an unsigned integer as input and checks if the most significant bit of the float is equal to the least significant bit of the unsigned integer. For this program to be robust, the input should be checked for validity, and the program should handle cases where the input data cannot be converted into a float or an unsigned integer."}, {"instruction": "Write a Python program that accepts a floating-point number as input, and prints `1` if the input represents a positive even or negative even number, and `0` if it represents a positive odd or negative odd number. The program should use a bitwise operation to access and test the sign bit of the floating-point representation. If the input is not a valid floating-point number, print `-2` instead."}, {"instruction": "Create a Python program to convert an unsigned integer to a floating-point number. The program should use the bitwise operator to convert the integer as follows:\n\n- If the most significant bit is 0, the result is the original integer.\n- Otherwise, the result is a floating-point number with bit-wise representation equal to the original integer, except the most significant bit is cleared."}, {"instruction": "Design a Python program that computes the greatest common divisor of two integers using the Euclidean algorithm. The first number is the denominator, and the second is the numerator. Both are guaranteed to be non-negative integers. The program should output the GCD result as an unsigned integer. The solution should include robust error handling to prevent erroneous division by zero."}, {"instruction": "Create a Python program to check whether a floating-point number is an integer. The program should employ bitwise operators and conditional branching to determine whether a given number can be represented as an integer in the binary floating-point format."}, {"instruction": "Design a Python program that checks if an unsigned 32-bit integer is a power of 2. Recall that a power of 2 is a number that is evenly divisible by itself."}, {"instruction": "Create a Python program that reads two input integers from the user and finds the GCD (Greatest Common Divisor) of them. The program should handle all non-integer input. The GCD is the largest positive integer that divides both the input integers. For example, `12` and `9` have a GCD of `3`."}, {"instruction": "Write a Python program that checks whether a floating-point number is a power of 2. For example, `check_power_of_two(5.2)` should return `False` because the floating-point number 5.2 is not a power of 2."}, {"instruction": "Implement a Python program to compute the value of a floating-point number (where the exponent is at least 3) using bitwise operations. The program should use a `while` loop to compute the value for positive exponents and a `for` loop to compute the value for negative exponents."}, {"instruction": "Design a Python program that computes the square root of a given number. Use a binary search approach, checking for a result within a range of values. The program should define a function `find_square_root` that accepts a number to square root, a lower bound, and an upper bound, and returns the square root of the number if found. Otherwise, it should return `None`. A trace of the search should be included in the output, which should list the bounds and the midpoint of each iteration."}, {"instruction": "Write a Python program that generates a random floating-point number between 1 and 10 (inclusive). The program should use bitwise operations to convert the number to an integer and then to a floating-point number. The program should then display the original floating-point number and the converted floating-point number."}, {"instruction": "Design a Python program that reads in a floating-point number from user input and outputs its binary representation (e.g., 3.14159265359 is 0b11.1011111011111111011111110111111110000000000000000000000). Provide robust error handling for invalid input. The solution should also include proper unit testing to validate the functionality of the program."}, {"instruction": "Design a Python program that takes a number of seconds and prints the equivalent time and date in HH:MM:SS format. The program should accept negative seconds as input, which should be handled by printing the absolute value of the input. The program should handle cases where the input is 0, printing no output."}, {"instruction": "A non-negative integer is called happy when it eventually reaches 1 after a sequence of steps. These steps are the following:\n\n- If the integer is even, divide it by 2.\n- If the integer is odd, multiply it by 3 and add 1.\n\nConstruct a Python program to determine whether a given positive integer is happy."}, {"instruction": "Write a Python program that prompts the user to enter a floating-point number and then returns its equivalent binary representation. The output should be rounded to 2 decimal places. Employ bitwise operations for this conversion."}, {"instruction": "Create a Python program that reads a floating-point number from the standard input and outputs it in hexadecimal form. For example, the input `12345.6789` should output the hex `0x4D2BFD2BFD2BFD2C`."}, {"instruction": "Create a Python program that prints the sum of all numbers in a list that are within some range of a given threshold. The input is a list of numbers and an integer threshold. The program should print the sum of all numbers in the list that are between 0 and the threshold, inclusive. The threshold is the absolute value of the difference between the number and the average of the list. If the difference between the number and the average is greater than the threshold, the program should print the sum of the number. Otherwise, the program should print `None`."}, {"instruction": "Write a Python program to select a random integer in the range [0, 1024) and output its binary representation. If the integer is even, output the number of bits that are set to 1; otherwise, output the integer."}, {"instruction": "Construct a Python program to compute the average of two numbers that are given in binary form, in decimal form, and in floating-point form. The program should use various bitwise operations to extract individual bits from the binary-form numbers."}, {"instruction": "Design a Python program that implements a calculator with three operations: addition, subtraction, and division. Use bitwise operations to perform the required arithmetic operation on two integers. Round the result to the nearest integer if it is a division. The program should handle invalid inputs and return error messages."}, {"instruction": "Create a Python function that computes the integer square root of a non-negative integer using Newton's method."}, {"instruction": "Design a Python program that accepts an integer input `n` and returns `True` if `n` is a power of two (i.e., `n = 2^x`). Solve the problem using bitwise operators."}, {"instruction": "Implement a program in Python to compute the median of two sorted, non-empty sequences of numbers. Assume the sequences are of type `float`."}, {"instruction": "Write a Python program that implements a simple calculator. The input is a string with a sequence of numbers and operators separated by spaces. The program should parse the input into a list of numbers and operators, and then compute the result. The program should handle the following operators: '+', '-', '*', '/', ** (power), and '**' (exponentiation). The program should also handle the following functions: sin, cos, tan, log, and exp. Note that all functions are implemented as mathematical functions, and exponential is the natural logarithm. The program should handle floating-point numbers, and all functions take floating-point arguments. The program should handle the following exceptions:\n\n- Syntax errors: the input string is not well-formed and cannot be parsed into a valid list of numbers and operators.\n- Invalid operators: the input string contains an operator that is not supported by the calculator.\n- Invalid functions: the input string contains a function that is not supported by the calculator.\n- Invalid arguments: the input string contains a function with invalid arguments.\n- Invalid operands: the input string contains operators with invalid operands."}, {"instruction": "Design a Python program that takes a floating-point number as an input and prints the number of times that it could be divided by 2 without a remainder. The program should employ bitwise operations, and use conditional branching to convert the number to an unsigned integer."}, {"instruction": "Design a Python program that computes the total price of a purchase given the unit price and the quantity. The program should read a string from the user, which is the name of the item. It should then request the unit price and quantity from the user and compute the total price accordingly. It should use built-in Python functions like `int` and `float` to convert the input string to a number."}, {"instruction": "Create a Python program that evaluates a binary tree based on the order of operations. The tree is represented as a list of integers where each even index is an operator with the corresponding odd index as its operands. The tree evaluates to a single integer value. The program should handle cases where the input format is invalid or a tree is not properly formed."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 7\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: C++ object-oriented programming, JavaScript object-oriented programming, scripting, C++ dynamic typing, stack creation, stack manipulation\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_delete_cc_scene_PassDynamicsValue(se::State& s)\n{\n    // js_dtoroverride\n    return true;\n}", "docstring": "// out 1", "function_name": "js_cc_scene_PassDynamicsValue_value_get"}, "id": 342, "seed": "static bool js_delete_cc_scene_PassDynamicsValue(se::State& s)\n{\n    // js_dtoroverride\n    return true;\n}", "__index_level_0__": 88, "concepts": ["C++ object-oriented programming", "JavaScript object-oriented programming", "scripting", "C++ dynamic typing", "stack creation", "stack manipulation"], "parsing_result": [{"instruction": "Write a Python program that implements a virtual Stack using a linked list as its underlying data structure. The Stack should support methods `push(self, item)` and `pop(self)`. The `push` method should add a new node with the given item as its value and add it to the top of the list. The `pop` method should remove a node from the top of the list and return its value, or return `None` if the list is empty.# Subset Sum Problem\n\n## Description\nGiven a set of positive integers, find if there exists a subset of them which sums to a given number."}, {"instruction": "Develop a Python program that implements a stack data structure, providing push and pop functionality. The program should support pushing and popping a single item, as well as pushing and popping a list of items at once. The program should handle erroneous inputs gracefully, such as incorrect input types or empty stacks.\n\nThe program should demonstrate the working of the stack by printing the current stack contents after each operation."}, {"instruction": "Design a Python program that creates a stack data structure and allows the user to push and pop elements to and from the stack. It should support the following commands:\n\n- **push**: `push(element)` pushes an element onto the top of the stack, where `element` is an integer or a string.\n- **pop**: `pop()` removes and returns the top element from the stack.\n- **peek**: `peek()` returns the top element in the stack without removing it.\n- **clear**: `clear()` removes all elements from the stack.\n- **show**: `show()` returns the top element of the stack without removing it.\n\nThe program should handle cases where the stack is empty and display an error message accordingly."}, {"instruction": "The Python programming language supports object-oriented programming (OOP) via its `class` and `object` keywords. Develop a C++ program to perform the equivalent operations on C++ objects. In particular, you should create two classes: `Stack` and `StackItem`. The `Stack` class should be used to store a stack of `StackItem` objects. The `Stack` class should have methods for adding/removing items from the stack, retrieving its size, and iterating over its contents. The `Stack` class should act as a wrapper around a dynamic array or vector.\n\nThe `StackItem` class should be an abstract class with two integer members: `key` and `value`. It should have a default constructor and a constructor that accepts an integer value for both members. It should also have an `operator<<` overload for outputting the member values in a human-readable format.\n\nYour program should use the `Stack` class to create a stack of `StackItem` objects and populate it with different instances of `StackItem` and their corresponding values. The program should then output the size of the stack, perform various operations on the stack, and print its contents."}, {"instruction": "Implement a Python program that reads a text file containing a stack definition and evaluates the stack using the given operators and operands. The file should be processed line-by-line, and each line should be evaluated as a stack operation. The operators are:\n- `CREATE` followed by a name for the new stack\n- `PUSH` followed by something to be pushed on the stack\n- `POP` followed by a variable name to pop the top value off the stack and assign it to the variable\n- `DUMP` prints the contents of the stack\n- `CLEAR` clears the stack\n\nThe program should work for any combination of these operations and correct input. It should ignore blank lines and comments."}, {"instruction": "Develop a Python program that emulates a call stack in a scripting language. The program should support basic operations on the stack: pushing elements, popping elements, and checking the size of the stack. Each operation should be assigned an operator symbol, such as `--`, `+`, and `pop`. The program should terminate with a `quit` command. The program should handle multiple commands on the same line, using a space as a separator.\n\nThe program should also support the following extended operations:\n- `dup`: duplicates the top element of the stack and pushes it back to the stack\n- `stack`: displays the current stack on the terminal\n\nThe program should handle erroneous inputs gracefully, such as invalid operator symbols and invalid command syntax."}, {"instruction": "Develop a Python program that allows creating and manipulating stacks, using the central `Stack` class, which supports the following operations:\n\n- `Stack(capacity: int) -> Stack`\n- `Stack.push(value: any) -> Stack`\n- `Stack.pop() -> any`\n- `Stack.top() -> any`\n- `Stack.capacity() -> int`\n- `Stack.is_empty() -> bool`\n- `Stack.is_full() -> bool`\n\nThe `Stack` class should be implemented as a dynamic C++ or JavaScript object. Create an instance of the `Stack` class, and use it to push and pop values of any data type. The push and pop operations should be implemented using a Python function and should handle the stack overflow and stack underflow conditions. Additionally, implement the `Stack` class with additional methods, such as `Stack.size()`, `Stack.clear()`, and `Stack.is_empty()` or `Stack.is_full()`."}, {"instruction": "Develop a Python program that reads a text file containing multiple mathematical expressions written as \"infix\", and evaluates them using a stack-based approach. The program should use a Python interpreter to import the expression and evaluate it."}, {"instruction": "Design a Python program that reads a C++ or JavaScript file (or any file with a programmatic syntax) and identifies blocks of code that use dynamic typing. The program should detect the following dynamic types: strings, integers, floats, booleans, arrays, and objects. The program should also detect whether the type is const (a C++ keyword) or const (a JavaScript keyword). The output must be a list of type blocks with the specified dynamic types and their corresponding line numbers."}, {"instruction": "Develop a Python program that implements a stack and its associated operations. The stack should be implemented using the `list` data type and should support a minimum of three operations: push, pop, and peek."}, {"instruction": "Design a Python-based program that reads a file containing an arbitrary number of C++ or JavaScript scripts, executes them, and prints the results to the console. The program should handle C++ scripts by executing them in a C++ interpreter or shell environment. Similarly, JavaScript scripts should be executed by a Node.js environment.\n\nThe program should validate and parse the input files, ensuring that they contain valid scripts of the relevant language. It should also handle exceptions that might occur during the execution of the scripts."}, {"instruction": "Design a Python program to instantiate a stack data structure, and perform the following operations:\n- `push(item)` adds an item to the top of the stack.\n- `pop()` removes the top item from the stack and returns it.\n- `peek()` returns the value of the top item without removing it from the stack.\n- `is_empty()` returns `True` if the stack is empty and `False` otherwise."}, {"instruction": "Design a multi-lingual calculator to perform basic arithmetic operations. The calculator should support addition, subtraction, multiplication, division, and exponentiation. The calculator should accept inputs in either decimal or binary format. The calculator should be able to handle multiple operations in a single expression. The calculator should use parentheses to define the order of operations. The calculator should support multiple base formats, including hexadecimal, octal, and binary."}, {"instruction": "Design a Python program to reverse a stack. The program should not use any other stack or list structure. Instead, the program should perform the reversal on the original stack. The reversal should be done in-place, without using additional memory."}, {"instruction": "Create a Python program to create a stack in C++ or JavaScript using C++ objects or JavaScript classes. The stack should support the following operations:\n- push: add an element to the top of the stack\n- pop: remove the top element of the stack\n- peek: return the top element of the stack without removing it\n- size: return the number of elements in the stack\n- empty: return `True` if the stack is empty, and `False` otherwise\n\nThe program should be modularized and error-checked to ensure that all operations are defined. The program should also be documented and tested through integration tests."}, {"instruction": "Extend the Python code in 9.1 and 9.2 to accommodate both C++ and JavaScript code. The code should accept a sequence of C++ code snippets as input, and execute them on the stack maintained by the interpreter. The code should implement a stack of JavaScript objects, similar to that used in 9.2."}, {"instruction": "Develop a Python program to simulate a stack with the following operations with the data type of `int` only:\n- push: `push(item: int) -> bool`\n- pop: `pop() -> int`\n- is_empty: `is_empty() -> bool`\n- is_full: `is_full() -> bool`\n\nThe `push` and `pop` operations should accept and return an integer. The `is_empty` and `is_full` operations should return a boolean indicating if the stack is empty or full, respectively."}, {"instruction": "Develop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Develop a Python program that uses C++ or JavaScript to manipulate a stack of integers. The program should be able to push and pop integers onto the stack, and also check if the stack is empty. The program should handle stack underflow and stack overflow errors."}, {"instruction": "Develop a program that reads a JavaScript file containing a programming language (C++ or JavaScript) and outputs a stack of the instructions. The program should parse the file and generate a stack of instructions, which can be executed directly in the programming language."}, {"instruction": "Develop a Python program that manages a stack of integers, which can perform the basic operations of push and pop. The program should be able to accept commands from a user via the command line and execute them. The commands are formatted in the form `<operator>:<value>` where `operator` is one of `push` or `pop` and `value` is an integer. The program should handle commands that are not recognized or invalid."}, {"instruction": "Design a Python program that will create a stack of strings, where each string represents a different type of animal. The stack should be implemented as a list of strings. The program should be able to accept commands that add, remove, and print the contents of the stack. The program should be able to execute these commands with a single command from the command-line. The following commands must be supported:\n- `add [animal_name]`: this command should add the animal name to the stack\n- `remove [animal_name]`: this command should remove the animal name from the stack\n- `print`: this command should print the contents of the stack\n\nThe program should behave properly if the command is not recognized or the stack is empty."}, {"instruction": "Create a Python program that implements a stack using a linked list in C++ or JavaScript. The stack should support operations such as `push`, `pop`, and `peek`. The program should handle all errors gracefully, such as stack underflow and overflow."}, {"instruction": "Develop a Python program that implements a simple stack data structure with the following operations:\n- `push(item: any)` - adds an item to the top of the stack\n- `pop()` - removes and returns the top item from the stack\n- `peek()` - looks at the top item without removing it\n- `is_empty()` - checks if the stack is empty\n\nImplement the stack using a list as the internal data structure. Use object-oriented programming to create the stack class. The program should handle different types of inputs for the stack."}, {"instruction": "Develop a program that reads a list of commands from a C++ or JavaScript program and executes them sequentially. The commands should be interpreted as C++ or JavaScript code, using the specified compiler or interpreter to execute them. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands."}, {"instruction": "Create a Python program that accepts a C++ or JavaScript program as input and returns a new program with a predefined `max_stack` that uses a stack to store the values. The stack should be initialized with an empty list. The program should then read the input one line at a time and execute the lines in the input program. For each line, the program should perform the following operations based on the line content:\n- If the line begins with `push` or `pop`, the program should push or pop the value of the variable indicated after the `push` or `pop` keyword. For instance, `push x` pushes the value of the variable `x` into the stack.\n- If the line begins with `peek`, the program should print the top item from the stack.\n- If the line begins with `top`, the program should print the position of the top item in the stack.\n- If the line begins with a variable name, the program should print the value of the variable.\n- Otherwise, the program should ignore the line and continue with the next line.\n\nThe program should return an error if any of the lines in the input program are invalid or if any of the variables declared in the code are missing a value. The program should handle handling invalid input gracefully, such as an empty input file or invalid input lines."}, {"instruction": "Develop a Python program that simulates the tower of Hanoi. Given the number of disks ranging from 1 to 9, the program should construct a tower with 3 pegs, with the disks placed on the first peg in decreasing order of size.\n\nThe program should be written in either C++ or JavaScript, and should be able to be executed from the command line. Additionally, the code should handle invalid input gracefully, such as non-numeric values."}, {"instruction": "Develop a Python program that manages a stack of characters. The stack should be created with an initial capacity of 10000 characters. The stack can then be used to push and pop characters from the stack. The program should also provide a method to extend the capacity of the stack. This method should be implemented using a C++ program that has direct access to the stack's private members and should perform the necessary operations to increase the stack's capacity.\n\nThe program should have two modes: interactive and file. In interactive mode, the program should take user input to perform stack operations. In file mode, the program should read commands from an input file and execute them."}, {"instruction": "Design a Python program to simulate a stack of stacks, containing a maximum of 100 stacks. Each stack should be a separate class, which manages a list of 100 values. The stack has the following operations:\n\n- `increase_capacity`: increase the capacity of the stack by 100, if the capacity of the stack is not already 100.\n- `push(item)`: push an item into the top stack. If the top stack is full, create a new stack and push the item to this new stack.\n- `pop()`: pop an item from the top stack. If the top stack is empty, return `None`.\n- `peek()`: return the topmost item in the stack. If the top stack is empty, return `None`.\n\nThe stack class should be implemented as a Python class with appropriate attributes and methods. The program should handle errors for invalid operations, such as pushing an item to a full stack, or popping an empty stack."}, {"instruction": "Develop a Python program that simulates the working of a stack (LIFO). It should contain a `Stack` class with a `push` and `pop` method. The `push` method should accept an object of any type as an argument and push it into the stack. The `pop` method should return the object at the top of the stack without modifying it. It should handle any errors that might occur during the execution of the program."}, {"instruction": "Design a Python program that supports the following operations on a stack of integers:\n- create_stack(size): creates a stack of size `size`\n- push(value): pushes an integer value `value` onto the top of the stack\n- pop(): removes and returns the integer value at the top of the stack\n- top(): returns the integer value at the top of the stack\n- clear(): clears the entire stack (returning all integers to an empty state)"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 3\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: binary string hash computation, file content reading, string hashing, named tuples, conditional file content reading\n\n### Task\nImplement a Python function that computes different types of hash values for the binary content of a file whose path is defined by an input string. You should calculate 'md5', 'sha1', 'sha256', and 'sha512' and return a `namedtuple` of these fields. When the input string does not correspond to a file, the function should directly compute the hash values of path itself.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: Lua state, C++ object reference, C++ class method invocation, C++ method call, C++ method call with return value\n\n### Task", "fingerprint": null, "content": {"code": "static int _cocos2d_PhysicsJointRotarySpring_createConstraints(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsJointRotarySpring *self = nullptr;\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsJointRotarySpring\");\n\n    // bool createConstraints()\n    bool ret = self->createConstraints();\n    int num_ret = olua_push_bool(L, ret);\n\n    olua_endinvoke(L);\n\n    return num_ret;\n}", "docstring": "// static cocos2d::PhysicsJointRotarySpring *construct(cocos2d::PhysicsBody *a, cocos2d::PhysicsBody *b, float stiffness, float damping)", "function_name": "_cocos2d_PhysicsJointRotarySpring_construct"}, "id": 343, "seed": "static int _cocos2d_PhysicsJointRotarySpring_createConstraints(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsJointRotarySpring *self = nullptr;\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsJointRotarySpring\");\n\n    // bool createConstraints()\n    bool ret = self->createConstraints();\n    int num_ret = olua_push_bool(L, ret);\n\n    olua_endinvoke(L);\n\n    return num_ret;\n}", "__index_level_0__": 89, "concepts": ["Lua state", "C++ object reference", "C++ class method invocation", "C++ method call", "C++ method call with return value"], "parsing_result": [{"instruction": "Create a Python function `get_lua_table_value` that returns a string value from a Lua table stored in a C++ state. It should accept two arguments: `lua_state` and `table_name`. The `lua_state` argument should be a pointer to the C++ state in which the Lua table is defined. The `table_name` argument should be a string that represents the name of the Lua table containing the desired string value. The function should return the value of the string keyed with the name `\"data\"`, which should correspond to the actual string value."}, {"instruction": "Create a Python function `evaluate_lua` that takes a `str` argument and evaluates it as a Lua expression. The function should work with any Lua expression (e.g., `1 + 2 * 3`, `5 - 4 / 2`, etc.), including nested expressions such as `math.pow(10, 2)`. The function should return the evaluated Lua expression as a float.\n\nThe `evaluate_lua` function should use the C++ Lua state and implement C++ class methods to interact with the Lua state. The function should use C++ method calls to invoke a C++ class method, and the function should use C++ method calls with return values to access the return value of a C++ method."}, {"instruction": "Write a Python function in Lua that takes a function and an arbitrary number of arguments. The function should create a C++ object of a custom class and assign the function as an instance method of this class. The C++ object should be created in the Python interpreter's Lua state, where it can be invoked from the function. The function should also take a function object as an additional argument, and the function should invoke this function from the C++ object."}, {"instruction": "Create a Python function `calc_sum` that accepts two arguments, `LuaState` and `sum`, as inputs and returns a new `sum` object that implements a function `add(x)` to add a number to the sum. The `LuaState` argument is an object that stores a Lua state, which is a collection of C++ objects that provide a way to invoke C++ methods from Lua."}, {"instruction": "Create a Python function `lua_state_handler` that accepts a string as an argument and returns the Lua state that is created when the provided string is executed. You should use the `ctypes` package to implement the function, which is a Python package that provides seamless integration between C and Python. The function should create a Lua state (initialized with the `lua_open` function) and execute the provided string, which should be passed as the argument to `lua_loadbufferx`. The function should return the created state as an object reference."}, {"instruction": "Create a Python function `LuaToCpp(lua_state)` that takes a Lua state as an input and returns a C++ object reference to a corresponding C++ state. The function should define a new C++ state and copy the input Lua state into it."}, {"instruction": "Write a Python function `get_lua_state` that returns a Lua state object. The function should ensure that a Lua state is created only once and return it to the caller. The function should be implemented using `ctypes`."}, {"instruction": "Write a Python function to create a Lua state and perform a simple C++ object reference counting in Lua. The function should create a Lua state, define a C++ class `ClassA`, and invoke the method `ClassA.method` twice from Lua. The logic should follow the following specification:\n\n`create_lua_state` - Create a new Lua state and return it.\n\n`ClassA.new` - Create a new instance of ClassA, return its reference.\n\n`ClassA.method` - Invoke the `method` method from the instance of ClassA, without returning the value.\n\n`ClassA.get` - Invoke the `get` method from the instance of ClassA, and return the return value."}, {"instruction": "Write Python code that demonstrates the use of a C++ class and its method invocation from a Lua script. The class should be instantiated with a string parameter and should be able to:\n\n- Provide a method to return the length of the string.\n- Provide a method to return a string in reverse order.\n- Provide a method to print the string in the console."}, {"instruction": "Write a C++ function that takes a Lua state object as input, and performs the following tasks:\n\n- Create a new C++ object of type `LuaState` and store it in a Lua variable.\n- Call the C++ method `set_name` of the `LuaState` object with the input string \"\"\n- Call the C++ method `print_name` of the `LuaState` object\n- Call the C++ method `print_name` of the `LuaState` object with the input string \"\""}, {"instruction": "Create a Python function `call_lua_method` that takes two arguments, `lua_state`, a Python object that represents a Lua state, and `func_name`, a string that represents the method name in the Lua state. The function should return the return value of the function call to the Lua state, which represents the result of the Lua function call. The supplied Lua state should be a Python object that represents a Lua state, and the `func_name` should be a string that represents the method name."}, {"instruction": "Develop a Python function called `run_lua_script` that accepts a Lua script path as input and executes it in a Lua state. The function should return the return value of the executed Lua script if it exists. The script path should be a string and the return value should be a number."}, {"instruction": "Implement the following Python function `run_lua_script` in C++ that runs a Lua script and returns the result of the `process` function as a string. The function should take a Lua script file path as input, open the file, and load the script into a Lua state. The function should then execute the `process` function in the script, capturing the return value as a `std::string`."}, {"instruction": "Write a Python function `mimic_string` that takes a string as input and mimics the behavior of the C++ function `std::strtok` in the C++ standard library. `std::strtok` is a function that splits a string into tokens according to a specified set of delimiters. The function should return a list of tokens extracted from the input string.\n\n```py\nassert mimic_string(\"hello world\", \" \") == [\"hello\", \"world\"]\nassert mimic_string(\"my name is Jack\", \" \") == [\"my\", \"name\", \"is\", \"Jack\"]\nassert mimic_string(\"  \", \" \") == []\nassert mimic_string(\"one\", \" \") == [\"one\"]\nassert mimic_string(\"one two\", \" \") == [\"one\", \"two\"]\nassert mimic_string(\"one two three\", \" \") == [\"one\", \"two\", \"three\"]\nassert mimic_string(\"one   two\", \" \") == [\"one\", \"two\"]\nassert mimic_string(\"one  two  three\", \" \") == [\"one\", \"two\", \"three\"]\nassert mimic_string(\"one    two    three\", \" \") == [\"one\", \"two\", \"three\"]\nassert mimic_string(\"one   two   three\", \" \") == [\"one\", \"two\", \"three\"]\n```"}, {"instruction": "Create a Python function `create_lua_state` that creates and returns an object of type `lua_State` from the [Lua](https://www.lua.org/) library. The function should allow programmers to invoke Lua functions or method calls directly from within Python."}, {"instruction": "Create a Python function to instantiate a Lua 5.4 state, load a Lua file, execute Lua code, and access the global and local variables from the Lua state. The function should return the local variables as a Python dictionary."}, {"instruction": "Create a Python function `call_lua_method` that takes two arguments: a Python string representing a Lua script file path, and a tuple of arguments to be passed to the script file's main function. The function should execute the Lua script and invoke the main function with the given arguments. The function should return the main function's return value as a Python list."}, {"instruction": "Write a Python function `get_lua_version` that executes a Lua script named `hello.lua` and returns the version string returned by `hello.lua`. The Lua script should be located in the same directory as the Python script and use the `print()` function to output the version string. The Python function should be implemented using the `subprocess` library."}, {"instruction": "Extend the `LanguageProcessor` class from the previous exercise by implementing a method `inline_process_sentence` that processes a sentence and returns the processed sentence as a string. The method should accept a single argument `sentence` as a string. The method should process the given sentence by replacing all words in the sentence with their spelled-out versions, e.g., `\"hello\"` should be replaced with `\"Hallo\"` and `\"goodbye\"` should be replaced with `\"Auf Wiedersehen\"`."}, {"instruction": "Write a Python function to invoke a C++ class method from a Lua state. The function should take a Lua state as an argument and return the C++ object reference (pointer) as the result. The C++ class method should be defined in a C++ source file and exposed to a Lua script by using `extern \"C\"`.\n\nThe Lua script should be able to call the class method by using the C++ object reference pointer as the first argument, followed by the method parameters."}, {"instruction": "Write a Python function that returns the sum of the first `n` Fibonacci numbers using a C++ class that stores the previous two Fibonacci numbers and implements a function `compute_fibonacci` that computes the next Fibonacci number. The C++ class should accept a private member variable `n` that stores the number of Fibonacci numbers to be computed. The function should be implemented as a wrapper of the C++ class method `compute_fibonacci`."}, {"instruction": "Create a Python function `call_cpp_function` that takes a string `name` and a list of arguments `args` as input. The function should create a Lua state, import the C++ module specified by `name` and call a function with the specified arguments. The function should return a list of the results from the function call.\n\nFor example, given a string `name` of \"foo\" and a list of arguments `args` of `[0, 1, 2]`, the function should import the C++ module \"foo\" and call the function \"add_all\" with the input arguments `[0, 1, 2]`. Once the function is executed, the function should return a list of the results from the function call `[3, 4, 5]`."}, {"instruction": "Write a Python function to pass Lua state from Python to C++ and call a C++ method that operates on a C++ object as if it was a Python object. The function should accept both a Lua state and a C++ object reference. The function should return the return value of the C++ method."}, {"instruction": "Create a Python function that invokes a C++ class method and returns the value of the method. The function should accept two arguments: a string `class_name` representing the name of the C++ class, and a `method_name` string representing the name of the method to be invoked. The function should return the value returned by the method invocation."}, {"instruction": "Develop a Python function that takes a character string as input and returns an object from the state of a Lua interpreter. Create a Lua interpreter instance and use the `load` method to read the string as a Lua script. Call the `pcall` method to execute the Lua script, and return an object representing the return value of the script as an output. In this case, the Lua interpreter is used to represent a C++ program whose class contains a method `TestMethod`. Your function should use the C++ objects to execute the method `TestMethod` and return the return value."}, {"instruction": "Write a Python function that makes an HTTP `GET` request to a given endpoint in a Lua virtual machine. The function should use the `curl` utility to make the request and return the response body as a string. The function should accept two parameters: `endpoint`, a string containing the URL to the endpoint, and `params`, a dictionary containing the parameters to be sent in the request."}, {"instruction": "Write a Python function that loads a Lua script from a file or a string, evaluates the script and returns the resulting Lua state. In the example, the script is defined as a string to avoid the need to create a temporary file."}, {"instruction": "Write a Python function to initialize a Lua state, create a C++ object, invoke a C++ class method with a C++ object reference, and invoke a C++ method call with a return value. The function should return the return value of the C++ method call."}, {"instruction": "Write a Python function `call_lua_method` that accepts a Python string representing a Lua function path, a Python list of arguments, and a Lua state. The function should invoke the Lua function with the given arguments and return the output as a list of Python objects. You should implement a Lua function called `process_results` that accepts a list of Python objects as input and returns a new list of Python objects with each element converted to a string. The function should return the result of `process_results`."}, {"instruction": "Create a Python function `convert_lua_number` that converts a number from Lua state to a Python float. This function requires a Lua state, a Lua number, and a Python class reference (or pointer) to a C++ class. The function should convert a Lua number to a Python float, using the `LuaNumber` class to access the underlying number value from the Lua state."}, {"instruction": "Implement a Python function named `call_c_method` that takes an object reference `ptr` and a string method name `name` as arguments. The function should call the method specified by the `name` argument using the `ptr` object as the first argument, and return the result of the method invocation."}, {"instruction": "Write a Python function that makes a Lua call to a C++ class method. The function should import the C++ class into the Lua state and invoke the method. The method should take two arguments, `str` and `num`, and return the result as a string. The solution should use the C++ class method invocation syntax."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 5\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: hard\nconcepts: array processing, iteration with a while loop, conditional branching, nested loops, sorting, moving of subarray elements, array re-initialization, array length update, type conversion\n\n### Task", "fingerprint": null, "content": {"code": "int main() {\n    /**1st part of the task*/\n    start_first_task();\n\n    /**\n     * 2st part of the task\n     * \u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 N \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430,\n        \u043a\u0440\u0430\u0442\u043d\u043e\u0433\u043e 5. \u0423\u0434\u0432\u043e\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0440\u0430\u0432\u043d\u044b\u0435 k. \u0415\u0441\u043b\u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 4, \u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0435 5\n        \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043a\u043e\u043d\u0435\u0446 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043d\u0435 \u043c\u0435\u043d\u044f\u044f \u043f\u043e\u0440\u044f\u0434\u043e\u043a\n        \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0447\u0430\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e\n        \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n     *\n     * */\n\n    start_second_task();\n\n    return 0;\n}", "docstring": "// push to zeros array indices of elements equal to zero", "function_name": "second_part_fourth_task"}, "id": 344, "seed": "int main() {\n    /**1st part of the task*/\n    start_first_task();\n\n    /**\n     * 2st part of the task\n     * \u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 N \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430,\n        \u043a\u0440\u0430\u0442\u043d\u043e\u0433\u043e 5. \u0423\u0434\u0432\u043e\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0440\u0430\u0432\u043d\u044b\u0435 k. \u0415\u0441\u043b\u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 4, \u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0435 5\n        \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043a\u043e\u043d\u0435\u0446 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043d\u0435 \u043c\u0435\u043d\u044f\u044f \u043f\u043e\u0440\u044f\u0434\u043e\u043a\n        \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0447\u0430\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e\n        \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n     *\n     * */\n\n    start_second_task();\n\n    return 0;\n}", "__index_level_0__": 90, "concepts": ["array processing", "iteration with a while loop", "conditional branching", "nested loops", "sorting", "moving of subarray elements", "array re-initialization", "array length update", "type conversion"], "parsing_result": [{"instruction": "This is a tough one. The problem: Given an array of integers, write a program that sorts the array in ascending order by removing any one integer from the array and swapping it with the first integer. Repeat this process until no integers remain.\n\nFor example, given `[1, 5, 3, 8, 2, 4]` as the input, the program should output `[1, 2, 3, 4, 5, 8]`. The first pass should remove `5`, resulting in `[1, 3, 8, 2, 4]`, and swap `1` with `3`. The resulting array sort will be `[1, 2, 3, 4, 8]`. The second pass should remove `8`, resulting in `[1, 2, 3, 4]`, and swap `1` with `2`. The final result is `[1, 2, 3, 4]`.\n\nProvide clear error handling to manage invalid inputs such as non-integer elements or negative numbers. Include assertions to validate the input and output."}, {"instruction": "Develop a Python program that simulates a simple banking system. The program should prompt the user for two types of commands: deposit and withdraw. Deposits are positive amounts and withdrawals are negative amounts. Deposits and withdrawals should be validated for amount ranges and amounts that are not numeric."}, {"instruction": "Implement a Python program that solves the [Levenshtein distance problem](https://en.wikipedia.org/wiki/Levenshtein_distance). Two strings are said to be at a distance `d` from each other if at least `d` of their characters differ. The Levenshtein distance between two strings A and B is defined as the minimum number of single-character edits (insertions, deletions, or substitutions) required to transform A into B.\n\nDevelop a Python program that iteratively computes the Levenshtein distance between two strings one character at a time. Each time you identify a single-character edit, print the intermediate strings being transformed and the edit. The program should also report the overall edit distance at the end."}, {"instruction": "Write a Python program that takes the following inputs: an array of numbers, a list of indices where the user would like to move the numbers, and the number of times the user would like to move the numbers. The program should perform these moves by iterating over the indices and incrementing the value at that index by the number of times the move is to be repeated.\n\nFor example, given a list of 10 elements `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]` and the indices `[0, 3, 4, 6]` and the moves `2`, the program should output the list `[5, 6, 8, 9, 10, 7, 1, 2, 3, 4]`.\n\nNote that the program should handle cases where the indices are out of range or if the number of times to move is negative."}, {"instruction": "Implement a Python program that moves all negative elements to one side of the list and all positive elements to the other. The program should maintain the relative order of elements in each side. The program should handle edge cases where the array size is 0, 1, or 2. Write assertions to ensure the input is a list of integers."}, {"instruction": "Create a Python program that initializes an array of 10 elements randomly (0--100) and prints its contents. Next, the program should print the array with the number of distinct elements at the beginning of each line. Then, the program should loop through the array and move each element to the first available slot in the array (demonstrating that elements must be moved to make room for new elements).\n\nAfter the loop, the program should print the array again showing the number of distinct elements at the beginning of each line.\n\nInclude error handling and logging to manage cases where array slots are unavailable./main.py\n#   Copyright 2021 \n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\nimport random\n\nimport numpy as np\n\nimport pandas as pd\n\n\ndef huffman_decompress(compressed_data, huffman_tree):\n    \"\"\"Decompresses Huffman-compressed data.\"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError(\"Implement `huffman_decompress`\")\n\n\ndef cluster_segmentation(size, breakpoints):\n    \"\"\"Segments a random array into clusters.\"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError(\"Implement `cluster_segmentation`\")\n\n\ndef case_matching(target, candidates, case_insensitive=False):\n    \"\"\"Returns the number of occurrences of `target` in `candidates`\n    based on case matching.\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError(\"Implement `case_matching`\")\n\n\ndef command_execution(commands_file):\n    \"\"\"Executes commands in a list of shell commands.\"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError(\"Implement `command_execution`\")\n\n\ndef search_with_recursion(target_list, target, index=0, trace=[]):\n    \"\"\"Searches `target_list` for `target` using recursion.\n\n    Returns a tuple containing:\n        1. the index of the `target` if it is found\n        2. a list of indices it checks to locate `target`\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError(\"Implement `search_with_recursion`\")\n\n\ndef encode_strings(string_list):\n    \"\"\"Returns a new list with unique strings encoded as asterisks.\"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError(\"Implement `encode_strings`\")\n\n\nif __name__ == \"__main__\":\n    # Example 3\n    huffman_tree = [\n        [\n            [0, 1],  # Y0\n            [1, 2],  # Y1\n            [2, 3],  # Y2\n            [3, 4],  # Y3\n            [4, 5],  # Y4\n            [5, 6],  # Y5\n            [6, 7],  # Y6\n            [7, 8],  # Y7\n            [8, 9],  # Y8\n            [9, 10],  # Y9\n        ],\n        [\n            [7, 10],  # A\n            [0, 0],  # B\n            [5, 5],  # C\n            [6, 6],  # D\n            [4, 4],  # E\n            [1, 1],  # F\n            [3, 3],  # G\n            [2, 2],  # H\n            [8, 8],  # I\n            [9, 9],  # J\n        ],\n    ]\n    compressed_data = [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0]\n    huffman_decompress(compressed_data, huffman_tree)\n\n    # Example 4\n    size = 10\n    breakpoints = [3, 6, 8]\n    cluster_segmentation(size, breakpoints)\n\n    # Example 5\n    target = \"apple\"\n    candidates = [\"Apple\", \"apple\", \"banana\", \"APPLE\"]\n    case_matching(target, candidates)\n\n    # Example 6\n    commands_file = \"./commands.txt\"\n    command_execution(commands_file)\n\n    # Example 7\n    target_list = [1, 8, 2, 9, 3, 1, 7, 5, 4]\n    target = 1\n    search_with_recursion(target_list, target)\n\n    # Example 8\n    string_list = [\"a\", \"a\", \"b\", \"a\", \"c\"]\n    encode_strings(string_list)\n\n    # Example 9\n    size = 10\n    breakpoints = [0, 5, 10]\n    while size > 0:\n        arr = np.random.randint(0, 100, size=size)\n        indices = np.argsort(arr)\n\n        num_distinct = len(np.unique(arr))\n        print(f\"{arr}\")\n        print(f\"{num_distinct}\")\n\n        arr_sorted = arr[indices]\n        arr_unique = arr_sorted\n        for i in range(len(arr_sorted) - 1):\n            if arr_sorted[i] != arr_sorted[i + 1]:\n                arr_unique = np.insert(arr_unique, i + 1, \"*\")\n\n        print(f\"{arr_unique}\")\n        print(\"\")\n        size -= 1"}, {"instruction": "Implement a Python program that reverses the order of the elements in a list by moving the subarray of the list to the end of the list. For instance, given an array `a = [0, 1, 2, 3, 4, 5]`, the program should print `[5, 4, 3, 2, 1, 0]`.\n\nThe program should ensure that the input array is not modified, so a new array should be created. For example, given an input array of length 5, the program should create another array of length 5 and move the subarray of the input array to the end of the array. The program should also implement the ability to handle cases where the array is empty or contains negative numbers."}, {"instruction": "Write a Python program that reorders the order in which elements appear in an array of integers by flipping the signs of certain elements. The program should update the array in-place and return the original array. The sign flipping may occur at most once in each iteration. The program should handle cases where there are no flips to perform, in which case the original array should be returned as it is.\n\nFor example, given the input `[-1, 2, -3, 4, 5, 6, -7, 8, 9]`, the program should first flip the sign of the second element so that the array becomes [`-1, -2, -3, 4, 5, 6, -7, 8, 9`], then flip the signs of the first and last elements so that the array becomes `[1, -2, -3, 4, 5, 6, -7, -8, 9]`."}, {"instruction": "Write a Python program that initializes a 2D array of integers and performs a series of operations on it. The array should be processed using the following rules:\n\n- Initialize the array of n x m dimensions with integers in the range [1, n x m]\n- Replace each odd element with 0\n- For each element, if the element is surrounded by odd elements, the corresponding element gets incremented by 1\n- Clear all elements that are 0\n\nThe program should handle unexpected inputs such as negative dimensions, invalid operations, and array elements that are out of range."}, {"instruction": "Design a Python program that initializes a NumPy array of integers, `array`, and an integer `k`, and then copies `k` elements of `array` into a new array, `subarray`, in a sorted order. If either of the parameters are invalid, the program should throw a ValueError. If `k` is larger than the size of `array`, the program should output all of the elements in `array` and return an empty array.\n\nIn addition to the above requirements, the solution should include robust error handling to ensure that the array and `k` are valid inputs."}, {"instruction": "Design a Python program that reads a list of integers from the user and prints the minimum, maximum, and median of the list. The program should handle cases where the list is empty, contains only one element, or contains repeated elements.\n\nFind out the source code of this program [here](https://github.com/jackiekazil/pydata-toolbox/blob/master/01-python/03-data-manipulation/02-array-processing/02-array-processing.py)."}, {"instruction": "Develop a Python program that creates a single array of 100 elements using NumPy and partitions it into two equal halves. These halves are flipped and then merged back together into a new array. The original array remains untouched.\n\nFor example, given a size 100 and breakpoints [0, 50, 100], the program should first initialize a NumPy array of 100 random elements between 0 and 1 and then output two arrays: one with elements 0-49, and the other with elements 50-99. These two arrays should then be flipped, and finally the original array should be re-initialized to be the concatenation of the two arrays with the flipped elements."}, {"instruction": "Write a Python program that recreates and manages a two-dimensional array of arbitrary size. The array should be initialized by inputting two integers `rows` and `columns` from the user. The data for the array should be initialized randomly between 1 and 100.\n\nThe program should then prompt the user to input an index location (`row` and `column`) and a desired value (`value`) to set at that location. After setting the value at the given location, the program should update the array to reflect the changes by moving the corresponding subarray elements.\n\nFinally, the program should print the updated array on the console.\n\nFor example, if the array is initialized as a 4x5 two-dimensional array with default values of 1-100, the user inputs `row 2, column 1, value 100`, and `row 3, column 2, value 90`, the program should output the array updated as [[1, 2, 3, 4, 5], [100, 90, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]].\n\nEnsure that the program handles the following cases:\n\n- the user enters invalid input for row and column (e.g., negative index)\n- the user enters a value that is out of range for the given array\n- the user enters an invalid row and column combination (e.g., row 5, column 3)\n- the user enters a value that is already at the specified location (e.g., row 2, column 1, value 2)\n- the user enters a value that is already at the same location as the one indicated by the previous command"}, {"instruction": "Write a Python program that removes the K-th largest element from an array of integers. The program should also return the new array. The program should have a robust error handling mechanism to validate the input, such as the K value being non-negative and the array size being greater than K."}, {"instruction": "Design a Python program that takes an array of integers and sorts it into non-decreasing order. The program should handle cases where the array is already sorted or all elements are of the same value. For example, given an array `[10, 3, 5, 7, 2]` the program should sort it into `[2, 3, 5, 7, 10]`."}, {"instruction": "Write a Python program that clips a given array and returns a subarray of the original array based on provided parameters. The function should handle error conditions such as negative array lengths and invalid indices. Utilize NumPy arrays and the `copy()` function to make a copy of the original array so that the array elements are not affected by further operations."}, {"instruction": "Write a Python program that takes a list as input and reorders its elements in a way that the first element is the largest and the last element is the smallest in value. Use a while loop to iterate and compare elements. Create a new array to store the ordered elements. The program must handle cases where the input is not a list, or the input is an empty list."}, {"instruction": "Write a Python program that processes an array of integers. The program should replace any negative integers with 0. The program should perform the following operations on the array:\n\n- remove any duplicate integers that occur within the array\n- sort the array in ascending order\n- move all negative integers to the end of the array in their original order\n- ensure that the array contains only integers\n\nInclude clear error handling in your solution, including robustness to empty arrays and improper input types."}, {"instruction": "Write a Python program that initializes an unsorted array of integers, partitions the array into two subarrays, and then reorders the elements in the subarrays such that elements with smaller values appear in the first subarray and elements with larger values appear in the second subarray. The program should additionally keep track of the number of swaps made in the reordering process.\n\nFor example, given an array `[2, 4, 1, 6, 5, 3, 9, 7]`, the program should output `[1, 2, 3, 4, 5, 6, 7, 9]`, which represents the reordering. The program should also output the number of swaps, which is 4, since the initial array is `[2, 4, 1, 6, 5, 3, 9, 7]` and after reordering, the array becomes `[1, 2, 3, 4, 5, 6, 7, 9]`.\n\nInclude error handling to handle cases where the array is empty or if the input is not a list of integers."}, {"instruction": "Write a Python program that reverses a list of integers of arbitrary length and assigns the result to a new list. For example, given a list `l = [1, 2, 3, 4, 5]`, the program should return a new list `l_reversed = [5, 4, 3, 2, 1]`. The program should make use of a temporary array to store the reversed result with the same structure as the original list."}, {"instruction": "Implement a Python program that returns a new array with elements from the same type as the original array from a given list. The new array should contain the same elements as the original array but in a randomized order. The order of the elements in the new array should be randomized using `shuffle`.\n\nFor example, given `[1, 2, 3, 4, 5, 6]`, the program should output a new array with the same elements but in a randomized order."}, {"instruction": "Write a Python program that implements a simple calculator with the following operations: addition, subtraction, multiplication, division, and square root. The program should prompt the user for an operation and two numbers. The program should be robust to invalid input and provide reasonable error handling. The program should support the following sequence of operations:\n- `quit` or `exit` to exit\n- `operation` `number` `number` to perform the operation\n- `sqrt` `number` to compute the square root\n\nFor example, the user might enter:\n```\nsqrt 25\n25.0\n```\nif the user wants to compute the square root of 25."}, {"instruction": "Design a Python program that initializes a one-dimensional NumPy array of random integers, and then sorts the array in ascending order. The program should provide two options for sorting the elements.\n- Sort in-place by utilizing an in-place sorting algorithm, such as merge sort. Include robust error handling to check for invalid input type or length.\n- Sort a copy of the array by utilizing NumPy's `sort` function. Include robust error handling to check for invalid input type or length.\n\nComment on the efficiency of the two approaches and state which approach is the most efficient."}, {"instruction": "Write a Python program that rotates an array by `k` elements. For instance, given [1, 2, 3, 4, 5], `k = 2`, the function should return [4, 5, 1, 2, 3]."}, {"instruction": "Design a Python program that takes one or more arrays of equal widths as input and outputs the sum of corresponding elements from all the arrays. The program should handle cases where the arrays have different widths or if there are no arrays at all. The solution should include robust error handling to validate the inputs and provide clear messages when invalid data is provided. For example, if `array_a` and `array_b` are arrays of equal widths, then `output = array_a + array_b` should be a valid operation and `output` should be an array of the same width as `array_a`."}, {"instruction": "Design a Python program that finds the longest increasing subsequence in a given array. The subsequence should be non-decreasing and maintain the original sequence as much as possible. The program should output the length of the subsequence and the corresponding elements in the original array."}, {"instruction": "Write a Python program that initializes an array of 10000 elements, fills it with random values, and then reverses it. The program must take no user input, but should output to the console the array length after the reversal, and should not use any library functions or methods for array reversal."}, {"instruction": "Implement a Python program that initializes an array of integers from a user-defined length with random values between 0 and 100. The program should then perform a series of operations on the array, such as swapping two elements, shifting and removing elements, sorting, reversing, and re-initializing. Handle error checking to manage invalid inputs such as negative array sizes."}, {"instruction": "Design a Python program that reads two comma-separated lists of numbers from the command line, sorts the elements, and prints out all pairs of numbers that add up to the sum of the two lists. If there are no such pairs, the program should print a message that no such pairs exist. For example, given input `1, 2, 9, 4, 4.5, 9.5, 4.5, 4.6, 7, 3, 2, 1, 0.5, 0.5, 0.4, 0.3, 0.2` and `5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21`, the program should output the pairs `4.5, 7.5, 4.5, 16.5`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: managing textures, texture binding, image loading with SOIL, texture filtering and wrapping options, error handling\n\n### Task", "fingerprint": null, "content": {"code": "GLuint BindCubeTexture(const string path)\n{\n    int width, height;\n    unsigned char* image = NULL;\n    vector<string> faces;\n\n    /* \u83b7\u53d6\u7acb\u65b9\u4f53\u5404\u9762\u8def\u5f84 */\n    faces.push_back(path + \"right.jpg\");\n    faces.push_back(path + \"left.jpg\");\n    faces.push_back(path + \"top.jpg\");\n    faces.push_back(path + \"bottom.jpg\");\n    faces.push_back(path + \"back.jpg\");\n    faces.push_back(path + \"front.jpg\");\n\n    GLuint textureID;\n    glGenTextures(1, &textureID);\n    glBindTexture(GL_TEXTURE_CUBE_MAP, textureID);\n    for(GLuint i = 0;i < faces.size(); ++i)\n    {\n        image = SOIL_load_image(faces[i].c_str(), &width, &height, 0, SOIL_LOAD_RGB);\n        if(image == NULL)\n            cout << \"ERROR:: path:\" << faces[i] << \"\\n\" << endl;\n        // \u4e3a\u5404\u4e2a\u9762\u5199\u5165\u7eb9\u7406\n        glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_RGB, width, height,\n                     0, GL_RGB, GL_UNSIGNED_BYTE, image);\n        SOIL_free_image_data(image);\n    }\n    //glGenerateMipmap(GL_TEXTURE_CUBE_MAP);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);\n    glBindTexture(GL_TEXTURE_CUBE_MAP, 0);\n\n    return textureID;\n}", "docstring": "// \u8bbe\u7f6e\u7eb9\u7406\u5c5e\u6027", "function_name": "BindTexture"}, "id": 346, "seed": "GLuint BindCubeTexture(const string path)\n{\n    int width, height;\n    unsigned char* image = NULL;\n    vector<string> faces;\n\n    /* \u83b7\u53d6\u7acb\u65b9\u4f53\u5404\u9762\u8def\u5f84 */\n    faces.push_back(path + \"right.jpg\");\n    faces.push_back(path + \"left.jpg\");\n    faces.push_back(path + \"top.jpg\");\n    faces.push_back(path + \"bottom.jpg\");\n    faces.push_back(path + \"back.jpg\");\n    faces.push_back(path + \"front.jpg\");\n\n    GLuint textureID;\n    glGenTextures(1, &textureID);\n    glBindTexture(GL_TEXTURE_CUBE_MAP, textureID);\n    for(GLuint i = 0;i < faces.size(); ++i)\n    {\n        image = SOIL_load_image(faces[i].c_str(), &width, &height, 0, SOIL_LOAD_RGB);\n        if(image == NULL)\n            cout << \"ERROR:: path:\" << faces[i] << \"\\n\" << endl;\n        // \u4e3a\u5404\u4e2a\u9762\u5199\u5165\u7eb9\u7406\n        glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_RGB, width, height,\n                     0, GL_RGB, GL_UNSIGNED_BYTE, image);\n        SOIL_free_image_data(image);\n    }\n    //glGenerateMipmap(GL_TEXTURE_CUBE_MAP);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);\n    glBindTexture(GL_TEXTURE_CUBE_MAP, 0);\n\n    return textureID;\n}", "__index_level_0__": 91, "concepts": ["managing textures", "texture binding", "image loading with SOIL", "texture filtering and wrapping options", "error handling"], "parsing_result": [{"instruction": "Create a Python program that renders a 2D image of a checkerboard pattern onto a 2D window on the screen. The window should be filled with the checkered pattern. The checkerboard pattern should be generated using the SOIL library to load a 32-bit image file. This program should render to the window using OpenGL and GLFW. The window size should be 800 x 600 pixels.\n\nThe checkered pattern should be generated in such a way that the dark and light squares in the checkerboard should be generated using different colors. The checkerboard pattern should be generated in such a way that the dark and light squares in the checkerboard should be generated using different colors."}, {"instruction": "Create a Python program that loads an image file, converts it to a texture, and displays the image on the screen. The program should also allow the user to move the image on the screen using the arrow keys.\n\nThe program should display the image at a resolution of 640 x 480 pixels and allow the user to move the image around the screen with the arrow keys. The image should be displayed using a texture on the screen.\n\nThe image should be loaded using the SOIL library. The image should be converted into a texture using a texture object.\n\nThe program should enable the user to move the image around the screen using the arrow keys. The image should be moved using the texture coordinate coordinates, which are stored in the texture object.\n\nThe program should allow the image to be scaled and rotated using the mouse. The user should be able to zoom in and out by scrolling the scroll wheel while the cursor is inside the window. The user should be able to rotate the image by dragging the mouse while the left mouse button is pressed.\n\nThe program should handle any errors that may occur during the image loading process. The program should handle any potential errors that may occur when performing operations on the texture object.\n\nThe program should utilize the GLUT library for window management and OpenGL for rendering."}, {"instruction": "Design a Python program that displays an image of a car or any other texture on a window. Use the [SOIL](https://www.lonesock.net/soil.html) library to load the image, and specify appropriate texture filtering and wrapping options."}, {"instruction": "Design a Python program that renders a 2D scene with a user-defined background color and a wireframe model created by a 3D model file in Wavefront OBJ format.\n\nThe scene should be rendered using OpenGL and its corresponding bindings in Python. The program should also read a 3D model file and load it into OpenGL's GPU memory with the correct vertex data for rendering.\n\nThe model file should be parsed and the vertices, normals, and texture coordinates should be stored in the program's memory. The model's texture should be loaded as a texture in OpenGL's GPU memory.\n\nThe program should also support the following user inputs:\n\n- Input of a background color in RGB space, using a command line argument. The program should take color values in the range [0, 1] for each channel.\n- Toggle of the wireframe mode, using a command line argument.\n- Toggle of the wireframe thickness, using a command line argument.\n\nThe program should render the scene using the following steps:\n\n- Bind the active texture unit.\n- Load the texture in GPU memory.\n- Set the texture filtering and wrapping options in OpenGL.\n- Draw a triangle for each triangle in the model.\n- Render the background color.\n\nThe program should handle the following conditions:\n\n- Handling of invalid texture file paths.\n- Handling of invalid model file paths.\n- Handling of invalid model file formats.\n- Handling of missing texture coordinates in the model.\n- Handling of missing normals in the model."}, {"instruction": "Design a Python program that, given a filename, loads an image from that file and displays it on the screen using Pygame."}, {"instruction": "Design a program that loads and displays a texture from a file. The program should be able to handle both PNG and JPG file types. The program should also be able to handle various texture filtering and wrapping options."}, {"instruction": "Create a Python program that loads a 2D texture from a file and displays it using PyGame.\nThe program must handle the error when the file is not found, using exception handling and error messages."}, {"instruction": "Create a Python program that displays a window with a moving square. The square should be made of a texture. The texture should be generated programmatically and loaded from a file. The texture should be generated using the SOIL library, and the filtering and wrapping modes should be set to GL_LINEAR_MIPMAP_LINEAR, GL_LINEAR, and GL_REPEAT, respectively. The program should handle errors that might occur due to texture loading, filtering and wrapping modes.\n\nIf the program encounters any errors, the window should display a message that informs the user about the error.\n\nUse the `pygame` and `SOIL` libraries to complete the implementation. Use the `glTexImage2D` function to generate the texture."}, {"instruction": "Develop a Python program that displays an image on the screen using OpenGL as well as certain textures in the framebuffer."}, {"instruction": "Given a 2D image with pixel values between 0 and 255, design a Python program to convert it into grayscale by averaging out the pixel values for each pixel position. The output should be a new 2D array with pixel values between 0 and 255. The input and output images should be of the same dimensions.\n\nThe program should be able to handle all types of image formats, including PNG, JPEG, and BMP. In addition, it should support reading from and writing to file-based inputs and outputs.\n\nThe program should also display an error message and exit with an appropriate code if the input or output file does not exist or if it is not a supported image format."}, {"instruction": "Design a Python program that loads an image from a file and displays it in a window. The window should display the image at its original size, maintain the aspect ratio of the image while scaling it to fit but not exceed a specified maximum size.\n\nThe image should be loaded using the SOIL library and displayed using OpenGL. The program should include functionality for the user to change the maximum image size in the form of a text field. Once a new maximum size is entered, the window should be resized to the new maximum size, maintain the aspect ratio of the image while scaling it to fit, and update the image."}, {"instruction": "Create a Python program that loads an image file from disk and displays it in a window using the OpenGL library. The program should allow the user to resize the window, apply filtering options, and set the texture wrapping options."}, {"instruction": "Design a Python program to automate the process of texture loading with SOIL (Simple OpenGL Image Library), texture filtering, and texture wrapping for a simple 2D game. The program should load a 2D image from a file, and use the texture filtering and wrapping options to generate a texture object."}, {"instruction": "Create a C++ program that displays a 10x10 checkerboard pattern on the screen. The checkerboard should be created using 2D textures. The checkerboard pattern should be drawn using OpenGL shaders. The checkerboard pattern should be drawn on a plane of coordinates (0, 0) to (10, 10)."}, {"instruction": "Develop a Python program that creates a window with a texture mapped image. When the program is run, the window should display the image centered. Clicking anywhere within the window should hide the image.\n\nThe program should use SOIL to load an image, and use the OpenGL extension GL_TEXTURE_MIN_FILTER and GL_TEXTURE_MAG_FILTER to specify texture filtering and wrapping options. The program should use the texture_filter_option parameter to control the filtering option. The program should only use basic OpenGL functionality to create the window and manage the display of the image."}, {"instruction": "Create a Python program that reads image files and displays them to the screen as texture objects. The program should take in a single command-line argument which is the path to an image file. The image file should be read in using the SOIL library.\nWhen the image file is successfully loaded, the program should:\n1. Create a texture object, and use the SOIL library to load the image file into the texture.\n2. Bind the texture object to a texture unit.\n3. Enable the texture filtering and wrapping options.\n4. Disable the texture filtering and wrapping options.\n5. Destroy the texture object.\nThe program should handle the case where the image file cannot be loaded by SOIL."}, {"instruction": "Develop a Python program that loads and displays an image using the Simple OpenGL Image Library (SOIL). The program should take two command-line arguments: the path to an image file (image.png) and the path to an output image file (out.png). The program should load the file specified by the first argument and display it using an OpenGL window. The loaded image should be resized to the dimensions of the file and saved to the file specified by the second argument. The program should handle the case where the image cannot be loaded, for instance when the file does not exist or when it is not an image file."}, {"instruction": "Create a program that loads an image into a texture and displays it on a screen."}, {"instruction": "Develop a Python program to display an image using the OpenGL library."}, {"instruction": "Create a Python program that loads an image and applies a variety of texture parameters to it, including filtering, wrapping, and mipmapping."}, {"instruction": "Read in a texture from a file and display it on screen, using OpenGL's `glTexImage2D` function."}, {"instruction": "Create a Python program that displays a 2D texture on the screen using OpenGL. The program should utilize the [OpenGL Python bindings](https://github.com/mcfletch/pyopengl-ci), [PyGLFW](https://github.com/glfw/glfw), and [SOIL](https://github.com/kiteco/soil) to load a texture from a file and display it on the screen. The program should support an optional command-line argument that specifies the name of the texture file to be loaded."}, {"instruction": "Develop a Python program that loads an image from a file and stores it in a texture. The program should allow the user to select from a list of texture filtering and wrapping modes. It should then display the image on a surface."}, {"instruction": "Design a Python program that displays an image on a 2D window. The program should load the image from a file and display it on a 2D window. The size of the window should be 512x512 pixels. The program should also use the `SOIL` library to load the image and display it with the correct image format. The program should enable the user to select an image file via a file selection dialog. The program should handle invalid file extensions, file size too large, and file size too small."}, {"instruction": "Design a Python program to implement the photorealistic rendering of a virtual camera using OpenGL and the Python binding PyOpenGL.\n\nIn the rendering process, the program should load two images as textures and render the corresponding scene with the corresponding textures on the corresponding camera. The scene is composed of two spheres, which are placed at the origin with radii of 1.0 and 2.0 respectively. The images should be rendered using the following steps:\n\n- Load the image \"grid.png\" with SOIL.\n- Apply texture filtering and wrapping options in the texture binding process.\n- Use the texture sampling function of OpenGL to sample both textures for each pixel.\n- Read the RGB values from the texture to render the corresponding pixels.\n- Render the final image on the window."}, {"instruction": "Write a Python program that renders a textured cube. The program should use OpenGL and the OpenGL bindings for Python (PyOpenGL) to load and render a texture onto a cube. The texture should be loaded from an image file using the SOIL library. The cube should be centered at the origin, with a side length of 1.0. The cube should be rotated about the Y axis by 90 degrees when you start the program. The program should run indefinitely, allowing the user to change the texture used for the cube."}, {"instruction": "Design a Python program that loads textures from PNG files and displays them on a window using the OpenGL library. The program should interact with the user via keyboard input to move the images around the window. Use SOIL library to load and display the image files."}, {"instruction": "Develop a Python program that demonstrates the use of texture filtering and wrapping options to enhance the visual appearance of a 3D model. The program should load an image as a texture, and apply the texture to a 3D model using OpenGL. The texture filtering and wrapping options should be flexible enough to handle different scenarios, providing a consistent and visually appealing result."}, {"instruction": "Create a Python application that serves as an interface between the computer graphics API and a simple image. The application should take a path to an image file and a desired output path as command line arguments. It should first load the image using SOIL and create an OpenGL texture object for the image. The application should then bind the texture and display the image on the screen. The application should be implemented as a single Python script, without any external dependencies."}, {"instruction": "Design a program that displays a 2D image on screen using OpenGL. The program should take command-line arguments: an image file, an optional image format, and an optional texture filtering model.\n\nThe program should handle the following cases:\n- If no image file is provided, the program should print an error message and exit.\n- If an image format is provided but not recognized, the program should print an error message and exit.\n- If the texture filtering model is not recognized, the program should print an error message and exit.\n\nThe program should also handle the following cases:\n- If the image file is not found, an error message should be printed and the program should exit.\n- If the image has an invalid format, an error message should be printed and the program should exit.\n- If the texture filtering model is invalid, an error message should be printed and the program should exit."}, {"instruction": "Design a Python program that uses SOIL to read an image file and display it on the screen using OpenGL."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 2\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 6\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: static function definition, function signature and parameter types, object method definition, function call\n\n### Task", "fingerprint": null, "content": {"code": "static int _cocos2d_PhysicsJointRatchet_setRatchet(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsJointRatchet *self = nullptr;\n    lua_Number arg1 = 0;       /** ratchet */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsJointRatchet\");\n    olua_check_number(L, 2, &arg1);\n\n    // void setRatchet(float ratchet)\n    self->setRatchet((float)arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "docstring": "// void setPhase(float phase)", "function_name": "_cocos2d_PhysicsJointRatchet_setPhase"}, "id": 355, "seed": "static int _cocos2d_PhysicsJointRatchet_setRatchet(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsJointRatchet *self = nullptr;\n    lua_Number arg1 = 0;       /** ratchet */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsJointRatchet\");\n    olua_check_number(L, 2, &arg1);\n\n    // void setRatchet(float ratchet)\n    self->setRatchet((float)arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "__index_level_0__": 92, "concepts": ["static function definition", "function signature and parameter types", "object method definition", "function call"], "parsing_result": [{"instruction": "Create a Python function `g` that conditionally returns `a` if `a` is greater than or equal to 0, and returns 0 otherwise. The function should be implemented with the following signature:\n\n```python\ndef g(a: float) -> float:\n    ...\n```"}, {"instruction": "We have a class named `Calculator` with a static function `add_numbers` defined, with the signature `add_numbers(a, b: int) -> int`. It takes two integers and returns their sum. Write a Python function that uses the `Calculator` class to add together two arbitrary numbers of type `int`."}, {"instruction": "Create a Python function `even_numbers_between(lo, hi)` that returns a list of even numbers that exist between the given bounds (lo and hi inclusive). The function should accept two integers as input parameters and return a list of even numbers.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert even_numbers_between(0, 10) == [0, 2, 4, 6, 8, 10]\nassert even_numbers_between(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert even_numbers_between(5, 30) == [6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\nassert even_numbers_between(11, 14) == [12]\n```"}, {"instruction": "Create a Python function `get_objects_count_by_type(objects, type)` that accepts a list of objects and a type name as strings, and returns the count of objects of the given type. The type name should be a string that corresponds to the object's class name. For example, `get_objects_count_by_type([1, 'foo', 'bar'], 'str')` should return `2`, as there are two strings in the input list."}, {"instruction": "Create a Python function `create_func_with_args` that accepts a list of arguments, and returns a generator function that accepts a list of values and returns the result of a mathematical operation. The generator function should be defined statically, so that it cannot be called directly. It should be possible to create multiple generator functions with different arguments.\n\nThe function should accept an arbitrary number of arguments, which should be used as the operation's parameters. The function should return a generator that accepts a list of values and calculates the result of the operation by substituting the arguments with the values.\n\nThe generator function should be a static method and can be called without an instance (e.g., `create_func_with_args([1, 2, 3], '+')` should return a generator function that can be called as `func([4, 5, 6])` and returns the result of `[(1 + 4), (2 + 5), (3 + 6)]`).\n\nFor example, the function should pass the following assertions:\n\n```python\nfunc = create_func_with_args([1, 2, 3], '+')\nassert func([4, 5, 6]) == [(1 + 4), (2 + 5), (3 + 6)]\nassert create_func_with_args([1, 2, 3], '+')([4, 5, 6]) == [(1 + 4), (2 + 5), (3 + 6)]\n```"}, {"instruction": "Create a Python function `is_prime(n)` that determines if a given integer `n` is prime, using the following algorithm:\n\n- If `n` is less than or equal to 1, return `False`\n- If `n` is 2 or 3, return `True`\n- If `n` is divisible by any number between 2 and `n-1`, return `False`\n- Else, return `True`"}, {"instruction": "Construct a Python function `average_of_arrays(*arrays)` to calculate the arithmetic average of a set of arrays. Each array is represented as a list of numbers. The function should return a new array of the same length, with each element representing the average of the corresponding elements in the input arrays. The function should satisfy the following assertions:\n\n```python\nassert average_of_arrays([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [4, 5, 6]\nassert average_of_arrays([2, 4, 6], [1, 3, 5]) == [2.5, 4, 5.5]\nassert average_of_arrays([1, 1, 1], [1, 1, 1]) == [1, 1, 1]\nassert average_of_arrays([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [3.5, 4.5, 5.5, 6.5, 7.5]\nassert average_of_arrays([2, 4, 6], [1, 3, 5]) == [2.5, 4, 5.5]\nassert average_of_arrays([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [3.5, 4.5, 5.5, 6.5, 7.5]\nassert average_of_arrays([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [4, 5, 6]\n```"}, {"instruction": "Create a Python function `is_prime(num)` with a signature that accepts a positive integer `num` and returns `True` if the number is prime and `False` otherwise. Utilize the Sieve of Eratosthenes algorithm for efficient prime number checking. Write the function in a way that allows for future extension and enhancement to incorporate different prime number checking algorithms. Ensure the function is clean, efficient, and concise."}, {"instruction": "Implement a Python function `get_class_method` that accepts a class, a method name, and method parameters as strings and returns the corresponding method object for the class. The function should raise an `AttributeError` exception if the specified method is not found within the class.\n\n```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_full_name(self):\n        return self.name + ' ' + str(self.age)\n\nobj = get_class_method(Person, 'get_full_name')\nprint(obj())\n# output: \n```"}, {"instruction": "Design a Python function `calculate_area_rectangle` that accepts two parameters `width` and `height` in inches (type `int` or `float`), and returns the area of a rectangle in square inches. If either parameter is less than or equal to 0, the function should return 0."}, {"instruction": "Create a Python function `get_product_of_two_numbers` that receives two integers and returns their product. The function should be implemented as a static function so that it cannot be modified outside of the class. The function should also have a signature that matches the parameter types given. Additionally, the function should be defined as an object method of the `Number` class so that it can be called from the `Number` class. The method should also contain a unit test to ensure the function works correctly."}, {"instruction": "Design a Python function `merge_lists(list_a, list_b)` to merge two sorted lists of integers, `list_a` and `list_b`, into a new sorted list, where the elements of `list_a` precede the elements of `list_b`.\n\nThe function should satisfy the following assertions:\n\n```python\nassert merge_lists([], []) == []\nassert merge_lists([1], [2]) == [1, 2]\nassert merge_lists([2], [1]) == [1, 2]\nassert merge_lists([1, 4], [2, 3]) == [1, 2, 3, 4]\nassert merge_lists([2, 3], [1, 4]) == [1, 2, 3, 4]\nassert merge_lists([1, 2, 3], [4]) == [1, 2, 3, 4]\nassert merge_lists([4], [1, 2, 3]) == [1, 2, 3, 4]\n```"}, {"instruction": "Implement a Python function `get_all_files(path, extensions)` that returns a list of all files in a directory at `path` matching the given `extensions`.\nUtilize static method definition and define a signature and parameter types to enforce stricter type checks in function calls."}, {"instruction": "Design a Python function `validate_function(function)` to validate a function's signature. The function should return a boolean indicating whether the function has a valid signature. A valid signature for a function includes the following:\n\n- the function is defined as static, i.e., with the `static` keyword to ensure its lifetime is independent of any object it is called on\n- the function accepts a single parameter of type `Callable[[Any], Any]`\n- the function returns a result of type `Callable[[Any], Any]`\n\nNote:\n- The function parameter is defined as `Any` as a type hint, indicating that any data type is accepted.\n- `Callable` is a built-in type hint for functions.\n- The function return type is again defined as `Any` to allow for any type of return value.\n\nFor example, the function should pass the following assertions:\n\n```python\ndef add(x):\n    return x + 1\n\nassert validate_function(add)\n\nclass CustomClass:\n    @staticmethod\n    def subtract(x: Callable[[int], int]) -> Callable[[int], int]:\n        return lambda y: x(y) - 1\n\nassert not validate_function(CustomClass.subtract)\n```"}, {"instruction": "Implement a Python function `func` that takes one positional parameter and one keyword parameter. The function's signature should be `func(x, y=3)`. The function should return the result of calling `func(x, y)` where `x` is a list of integers and `y` is an integer."}, {"instruction": "Write a Python function that takes a list of integers and returns its unique elements. The function can assume that the input list is non-empty.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert unique_elements([1, 2, 3, 4, 1, 2]) == [1, 2, 3, 4]\nassert unique_elements([1, 1, 1, 2, 3, 4, 5, 4, 3]) == [1, 2, 3, 4, 5]\nassert unique_elements([]) == []\n```"}, {"instruction": "Create a Python function that checks if a given Python function is a static method, using its signature and parameter types.\n\nFor example,\n\n```python\n# Static method\n@staticmethod\ndef func_static(a, b):\n    return a + b\n\n# Non-static method\ndef func_non_static(a, b):\n    return a - b\n\nassert check_static(func_static, 'func_static', ['int', 'int'], 'int')\nassert not check_static(func_non_static, 'func_non_static', ['int', 'int'], 'int')\n```"}, {"instruction": "Create a Python function `create_partition_function(partition_size)` that accepts a partition size (an integer) and returns a function that partitions a list into sublists of size 'partition_size', rounding up the final sublist if necessary. The function should be able to handle both positive and negative partition sizes.\n\nFor example, the function should pass the following assertions:\n\n```python\npartition_function = create_partition_function(2)\nassert partition_function([1, 2, 3, 4, 5, 6, 7, 8]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\npartition_function = create_partition_function(-2)\nassert partition_function([1, 2, 3, 4, 5, 6, 7, 8]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n```"}, {"instruction": "Develop a Python function decorator `retry_n_times(n)` that allows a function to be executed up to `n` times with a specified delay in between each execution. The function decorator should handle exceptions that may occur during the function execution, and should return the result of the function if it is successful after `n` attempts. The function decorator should raise a `RuntimeError` if it fails to execute the function after `n` attempts.\n\n```python\n@retry_n_times(3)\ndef function_that_might_fail():\n    # function implementation\n\nfunction_that_might_fail()\n# raises RuntimeError\n```"}, {"instruction": "Write a Python function to convert a given integer value representing a binary number into a string representation of its corresponding hexadecimal number. The function should utilize the \"static\" keyword to define a static function that is independent of any object instance. The function should also accept a single integer type parameter to convert the input integer representation to a hexadecimal string."}, {"instruction": "Create a Python function `add_two_numbers(num1, num2)` that returns the sum of two integers."}, {"instruction": "Design a Python function `get_function_signature(func)` that returns a string representation of the signature of a function `func`. The returned signature should be in the following format: `func_name(param_type_1, param_type_2, ...)` where `func_name` is the name of the function, and `param_type_i` is the data type of the i-th parameter of the function.\n\nFor example, the following assertions should pass:\n\n```python\ndef foo(x, y):\n    return x + y\n\ndef bar(x, y):\n    return x + y\n\ndef baz(x, y):\n    return x * y\n\nassert get_function_signature(foo) == 'foo(int, int)'\nassert get_function_signature(bar) == 'bar(int, int)'\nassert get_function_signature(baz) == 'baz(int, int)'\n```"}, {"instruction": "Consider the following Python code:\n\n```python\nclass A:\n    @staticmethod\n    def f(x):\n        print(f'f({x})')\n\n\nclass B(A):\n    def g(self, x):\n        print(f'g({x})')\n\n\nB.f(2)\n```\n\nThe code should output:\n\n```bash\nf(2)\n```\n\nIn this example, the `f` method is statically defined, which is a function that belongs to the class, but does not require an instance of the class to be called. The method uses the `print` function to output a formatted string containing the method name, class name, and the argument passed to the function."}, {"instruction": "Create a Python function `add_args(a, b)` that returns the sum of a and b without calling the `+` operator. The function should be defined as a static method of another class, with `int` parameters, and should have a `float` return type."}, {"instruction": "Create a Python function `add` that sums two numbers of any type (float or integer). You must use the `+` operator for the operation. You may not use any built-in operations or functions."}, {"instruction": "Create a Python function `create_static_function()` to create a static function that adds two numbers and returns the result. The function should accept two arguments and return their sum. Additionally, the function should be defined in the class `StaticFunction` with a static method `add(a, b)`, where `a` and `b` are integers."}, {"instruction": "Implement a Python function `get_method_names(obj)` that returns a list of all public method names in the given object. The function should follow the following constraints:\n- It should return the names of the public methods only, without including private methods and methods inherited from the parent class.\n- The function should not rely on any third-party libraries or external modules."}, {"instruction": "Implement a Python function `sum_of_squares(a, b)` that returns the sum of squares of integers `a` and `b`, where `a` and `b` are passed as integer parameters to the function.\n\nFor example, the function should pass the following assertions:\n```python\nassert sum_of_squares(3, 4) == 25\nassert sum_of_squares(5, 10) == 225\n```"}, {"instruction": "Write a Python function named `get_distance` that calculates the distance between two points with coordinates `x1`, `y1`, `x2`, and `y2` using the formula:\n\n$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\nFor example, the function should pass the following assertions:\n\n```python\nassert get_distance(2, 5, 4, 10) == 7.0710678118654755\nassert get_distance(0, 0, 3, 4) == 5.0\nassert get_distance(0, 0, 3, 4) == 5.0\n```"}, {"instruction": "Design a Python function with a signature of `fn(a: int, b: str)` to define a static function that accepts an integer `a` and a string `b`. The function should return an integer arrived at by subtracting the first two characters of `b` from the sum of `a` and the last two characters of `b` converted to an integer. For example, the function call `fn(124, 'abcde')` should return `150`."}, {"instruction": "Develop a Python function `convert_to_uppercase` that takes a string as an input and returns the string with all characters uppercased. Ensure that the function is defined as a static method within a class defined as `class StrConverter(object):`.\n\nThe function should accept a string as input, convert all characters to uppercase, and return the uppercase string."}, {"instruction": "Construct a Python function `mult` that takes two numbers as arguments, and returns their product. Utilize the `__mul__` special method to implement this functionality. Additionally, ensure the function works with numbers, strings, and other primitive types."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: hard\nconcepts: data type coercion, pointer dereferencing, data type validation, element begin/end, namespaces\n\n### Task", "fingerprint": null, "content": {"code": "SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)\n{\n\tconst char *soap_tmp_faultcode;\n\tsoap_tmp_faultcode = soap_QName2s(soap, a->faultcode);\n\t(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_afip_SOAP_ENV__Fault), type))\n\t\treturn soap->error;\n\tif (soap_out__QName(soap, \"faultcode\", -1, (char*const*)(void*)&soap_tmp_faultcode, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"faultstring\", -1, (char*const*)&a->faultstring, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"faultactor\", -1, (char*const*)&a->faultactor, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Detail(soap, \"detail\", -1, &a->detail, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Code(soap, \"SOAP-ENV:Code\", -1, &a->SOAP_ENV__Code, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Reason(soap, \"SOAP-ENV:Reason\", -1, &a->SOAP_ENV__Reason, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"SOAP-ENV:Node\", -1, (char*const*)&a->SOAP_ENV__Node, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"SOAP-ENV:Role\", -1, (char*const*)&a->SOAP_ENV__Role, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Detail(soap, \"SOAP-ENV:Detail\", -1, &a->SOAP_ENV__Detail, \"\"))\n\t\treturn soap->error;\n\treturn soap_element_end_out(soap, tag);\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_serialize_SOAP_ENV__Fault"}, "id": 358, "seed": "SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)\n{\n\tconst char *soap_tmp_faultcode;\n\tsoap_tmp_faultcode = soap_QName2s(soap, a->faultcode);\n\t(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_afip_SOAP_ENV__Fault), type))\n\t\treturn soap->error;\n\tif (soap_out__QName(soap, \"faultcode\", -1, (char*const*)(void*)&soap_tmp_faultcode, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"faultstring\", -1, (char*const*)&a->faultstring, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"faultactor\", -1, (char*const*)&a->faultactor, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Detail(soap, \"detail\", -1, &a->detail, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Code(soap, \"SOAP-ENV:Code\", -1, &a->SOAP_ENV__Code, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Reason(soap, \"SOAP-ENV:Reason\", -1, &a->SOAP_ENV__Reason, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"SOAP-ENV:Node\", -1, (char*const*)&a->SOAP_ENV__Node, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"SOAP-ENV:Role\", -1, (char*const*)&a->SOAP_ENV__Role, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Detail(soap, \"SOAP-ENV:Detail\", -1, &a->SOAP_ENV__Detail, \"\"))\n\t\treturn soap->error;\n\treturn soap_element_end_out(soap, tag);\n}", "__index_level_0__": 93, "concepts": ["data type coercion", "pointer dereferencing", "data type validation", "element begin/end", "namespaces"], "parsing_result": [{"instruction": "Implement a Python program that reads a text file in a specified format, validates the data, and writes the data in a new file with the same format. The text files to be processed are in the following format:\n- n lines of integers\n- each integer is either a positive integer or a negative integer\n- each integer is separated by one or more spaces\n\nThe program should read the file, validate the data, and write the valid data in the new file in the following format:\n- n lines of integers\n- each integer is either a positive integer or a negative integer\n- each integer is separated by one or more spaces\n\nThe program should display a message if the input file is empty, and a warning message if any of the integers are invalid."}, {"instruction": "Design a Python program that takes a directory path as input and prints all invalid file paths in the directory to stdout. The program should run in O(n) time complexity, where n is the total number of files in the directory. Invalid file paths include:\n- Files with empty name\n- Files with names that include leading or trailing whitespace or other non-whitespace characters\n- Files with extension not in a set of valid extensions"}, {"instruction": "Write a Python program that allows a user to enter a string and print all possible words that can be formed using the letters of the string.\nThe program should use a tree data structure to store all possible words formed from the letters of the string. The tree structure should store the words as nodes, with children nodes for each letter of the input string. The tree structure should recursively print all possible words by traversing its branches.\n/example-problems/example-1.py\ndef get_sum_repeats(lst):\n    \"\"\"\n    Returns the sum of counts for elements that occur more than once.\n\n    Parameters\n    ----------\n    lst : list\n        List to be processed.\n\n    Returns\n    -------\n    tuple\n        The sum of counts for elements that occur more than once.\n    \"\"\"\n    # TODO: Write the logic for the task.\n    raise NotImplementedError(\"You need to write a solution for this task.\")\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 1, 2, 2, 3, 4, 5, 5]\n    print(get_sum_repeats(lst))\n/example-problems/example-8.py\nclass PrimeFinder:\n    \"\"\"\n    Implements a class that finds the n-th prime number using memoization.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the PrimeFinder class.\n        \"\"\"\n        # TODO: Write the logic for the task.\n        raise NotImplementedError(\"You need to write a solution for this task.\")\n\n    def find_nth_prime_memoized(self, n):\n        \"\"\"\n        Returns the nth prime number, where n is a positive integer.\n\n        Parameters\n        ----------\n        n : int\n            Index of the prime number to be found.\n\n        Returns\n        -------\n        int\n            The nth prime number.\n        \"\"\"\n        # TODO: Write the logic for the task.\n        raise NotImplementedError(\"You need to write a solution for this task.\")\n\n\nif __name__ == \"__main__\":\n    prime_finder = PrimeFinder()\n    print(\n        \"The 100th prime number is {}.\".format(prime_finder.find_nth_prime_memoized(100))\n    )\n/example-problems/example-4.py\ndef string_encoder(lst):\n    \"\"\"\n    Encodes a list of strings into a unique list with the same length, order, and meaning.\n    The new list is formed by appending asterisks (*) to duplicate strings.\n\n    Parameters\n    ----------\n    lst : list\n        List to be encoded.\n\n    Returns\n    -------\n    list\n        The encoded list of strings.\n    \"\"\"\n    # TODO: Write the logic for the task.\n    raise NotImplementedError(\"You need to write a solution for this task.\")\n\n\nif __name__ == \"__main__\":\n    lst = [\"a\", \"a\", \"b\", \"a\", \"c\"]\n    print(string_encoder(lst))\n/example-problems/example-6.py\ndef insert_sort(lst, target):\n    \"\"\"\n    Returns a valid index where target can be inserted to maintain the\n    array's sorted order.\n\n    Parameters\n    ----------\n    lst : list\n        Sorted list to be processed.\n    target : int\n        Target value to be inserted.\n\n    Returns\n    -------\n    int\n        The valid index to insert target to maintain array's order.\n    \"\"\"\n    # TODO: Write the logic for the task.\n    raise NotImplementedError(\"You need to write a solution for this task.\")\n\n\nif __name__ == \"__main__\":\n    lst = [1, 3, 5, 5, 6]\n    print(insert_sort(lst, 5))\n/example-problems/example-5.py\ndef get_pairs(lst, growth_ratio, maximum_distance):\n    \"\"\"\n    Returns all pairs of elements within a list of integers where the\n    second element of the pair is at least greater than the first by\n    growth_ratio and the indices of the elements are within a specified\n    maximum_distance from each other.\n\n    Parameters\n    ----------\n    lst : list\n        List of integers to be processed.\n    growth_ratio : int\n        The growth ratio to check in the pairs.\n    maximum_distance : int\n        The maximum distance allowed between the elements.\n\n    Returns\n    -------\n    list\n        The list of valid pairs of elements within the input list.\n    \"\"\"\n    # TODO: Write the logic for the task.\n    raise NotImplementedError(\"You need to write a solution for this task.\")\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5]\n    pairs = get_pairs(lst, 1, 4)\n    print(pairs)\n/example-problems/example-3.py\ndef parse_duration(time_string):\n    \"\"\"\n    Converts a string representation of a time duration into its total number of seconds.\n\n    Parameters\n    ----------\n    time_string : str\n        The string representation of the time duration.\n\n    Returns\n    -------\n    int\n        The total number of seconds represented by the time duration.\n    \"\"\"\n    # TODO: Write the logic for the task.\n    raise NotImplementedError(\"You need to write a solution for this task.\")\n\n\nif __name__ == \"__main__\":\n    assert parse_duration(\"15s\") == 15\n    assert parse_duration(\"2min\") == 120\n    assert parse_duration(\"1h\") == 3600\n    assert parse_duration(\"1d\") == 86400\n    try:\n        parse_duration(\"30\")\n    except ValueError as e:\n        pass"}, {"instruction": "Design a Python program that takes a compressed data file in `input.txt` and extracts all lines with a valid 8-digit hexadecimal number, and writes the results to a file `output.txt` that displays all binary digits of the hexadecimal number in order, separated by newlines.\n\nFor instance, the file `input.txt` might have the following content:\n\n```text\n0x12345678: 0011 0010 0011 0100 0101 0110 0111 1000\n0x76543210: 1110 0110 0101 0110 0101 0010 0011 0010\n```\n\nThe file `output.txt` should have the following content:\n\n```text\n0\n1\n1\n0\n1\n1\n0\n0\n1\n1\n1\n1\n0\n0\n1\n1\n1\n0\n0\n0\n1\n1\n1\n1\n0\n0\n0\n1\n```"}, {"instruction": "Design a Python program that performs the following operations:\n- Prompt the user for two integers, `a` and `b`, where `b` is greater than `a`.\n- Validate the user input as integers.\n- Check whether `a` and `b` are both positive integers.\n- Add the first `b - a` integers from `a` to `b` inclusive.\n- Subtract the first `b - a` integers from `b` to `a` inclusive.\n- Sum the first `b - a` integers from `a` to `b` inclusive.\n- Print the results.\n\nThe program should handle any errors (invalid inputs, negative integers, etc.) gracefully."}, {"instruction": "Create a Python program that reads a file and determines how many times each word is used. The program should read the file, load it into memory, and print a list of all the words and their counts in alphabetical order. Handle edge cases for file input and output."}, {"instruction": "Create a Python program that counts the number of positive integers, negative integers, and zeroes within an integer array. The program should keep prompting the user to enter more integers until the user enters 0, which should terminate the program."}, {"instruction": "Design a Python program that reads a list of lines from a file and concatenates them in reverse order.\n\nFor example, the file with lines\n```\n1st line\n2nd line\n3rd line\n```\nshould produce output\n```\n3rd line\n2nd line\n1st line\n```"}, {"instruction": "Write a program that reads in the data from a text file, processes the data, and generates a text output file. The file format for the input file is as follows:\n- The first line contains a single integer `n`, indicating the number of lines of data.\n- Each of the next `n` lines contains the following data:\n  - A string of uppercase letters\n  - An integer from 0 to 9\n  - A single character from `'0'`, `'1'`, `'2'`, and `'3'`\n- The data is separated by whitespace and/or commas.\n\nThe program should parse the input data and find the longest run of consecutive integers that are all greater than the integer in the middle of the run. The program should then print out the first and last index of this run to stdout.\n\nThe program should continue reading in the next set of data, and print the longest run to stdout for each new data set.\n\nThe program should also print out the longest run to stderr for the last data set.\n\nThe program should handle the case where the run of numbers is unsorted (i.e., the run does not begin at the middle).\n\nThe program should handle the case where the last run does not end at the end of the file.\n\nThe program should handle the case where the last run is invalid (e.g., when the last run starts at a position greater than the number of lines of data).\n\nThe program should handle the case where the last run is part of the middle of a longer run.\n\nThe program should handle the case where the last run is part of the middle of the longest run.\n\nThe program should handle the case where the last run is the longest run.\n\nThe program should handle the case where the input file has no data.\n\nThe program should handle the case where the input file is empty.\n\nThe program should handle the case where the input file is a text file of invalid data.\n\nThe program should handle unexpected input.\n\nThe program should handle unexpected output.\n\nThe program should handle unexpected behavior.\n\nThe program should handle unexpected program termination.\n\nThe program should handle unexpected program behavior.\n\nThe program should handle unexpected program exit.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes.\n\nThe program should handle unexpected program exit codes."}, {"instruction": "Create a Python program that implements a calculator that performs the following operations:\n- addition\n- subtraction\n- multiplication\n- division\n- modulo\n\nThe program should take two arguments, a number and an operation, and output the result. If the operation is invalid, the program should raise a ValueError."}, {"instruction": "Create a Python program that utilizes a set of classes and data structures to parse and analyze a list of strings of the form 'key:value' with unique key values and any number of unique values. The program should perform the following operations for each string in the list:\n1. Validate that the key and value strings contain only alphanumeric characters.\n2. Convert the value string to a set of values by splitting values with a pipe character, and removing duplicates.\n3. Check that the value set contains no duplicate items.\n4. If the string is valid, the key should be added to a set of keys. If the key already exists, the value set should be added to the corresponding key's value set.\n5. After all operations are completed, print the number of keys and of unique values for each key."}, {"instruction": "Design a program that can read a CSV file and prints out the number of elements in each column. The program should take the path of a CSV file as an argument. The program should print out the number of elements in each column of the file."}, {"instruction": "Write a Python program that reads a text file and prints out the first 100 characters of the text file. The text file is given as a command line argument."}, {"instruction": "Create a Python program that, given a list of integers, prints the index of the first non-repeating integer. If there are no non-repeating integers, the program should print a negative number."}, {"instruction": "Inspired by the classic game of Master Mind, implement a Python program that plays the game with two players. The program should prompt the user for the number of guesses before exiting. After each guess, the user should be informed as to whether or not the guess was too low or too high. The user should be informed after each guess that the current number of guesses remains. If the user successfully guesses the correct number of the computer's secret code within the allowed number of guesses, the game should conclude and the user should be informed of a win. If the user fails to guess the correct number in the allowed number of guesses, the game should conclude and the user should be informed of a loss with the computer's secret code."}, {"instruction": "Create a Python program that reads a YAML file that stores a list of items, each having a name and a price. The list is stored in a list named \"items\". Print a table of contents with the item name and price for each item.\n\nEnsure that the program accepts a YAML file in the following format:\n```yaml\nitems:\n    - name: ''\n      price: 4.95\n    - name: ''\n      price: 9.95\n    - name: ''\n      price: 10.00\n    - name: ''\n      price: 10.00\n    - name: ''\n      price: 4.50\n    - name: ''\n      price: 4.99\n    - name: ''\n      price: 4.50\n    - name: ''\n      price: 6.00\n```\nThe program should also print the total cost of the items in the list."}, {"instruction": "Write a C program to perform the following:\n1. Input a number, n, from the user.\n2. Declare and initialize a pointer to a dynamically allocated integer array with n length.\n3. Allocate memory for each integer array element using malloc.\n4. Ask the user to enter n integers for each array element.\n5. Print the sum of all n integers in the array, as well as the average.\n6. Deallocate memory allocated by step 3, and end the program."}, {"instruction": "Implement a Python program to convert a list of elements in a JSON format into an array of objects. The input list should contain a list of objects where each object has a `begin` and `end` property. The program should return a single object with the property `elements` that contains a list of all the elements in the input list with the property `type` set to `begin` or `end` depending on the type of element. For example, given `input_list = [{'begin': 0, 'end': 1}, {'begin': 2, 'end': 4}, {'begin': 1, 'end': 2}]`, the program should return the following output:\n\n```python\noutput = {\n    'elements': [\n        {'type': 'begin', 'begin': 0, 'end': 1},\n        {'type': 'end', 'begin': 1, 'end': 2},\n        {'type': 'begin', 'begin': 2, 'end': 4}\n    ]\n}\n```"}, {"instruction": "Create a Python program that converts a series of numbers in a list into a list of strings. The input numbers are between 0 and 9 inclusive, and the numbers are in decimal notation. For numbers between 0 and 999.999 inclusive, the program should print the numbers as money. For numbers outside of this range, the program should print the numbers as scientific notation. Use a numeric type cast and a string type cast to convert numbers to strings to convert prices to money, and to convert decimals to integer and scientific notation."}, {"instruction": "Create a Python program that takes an input file and merges duplicates in the same line into a single line.\nEach line contains a sequence of words, separated by spaces.\n\nYou can assume that each line has at least one word (no empty lines), and that there are no more than 50 words in a line.\n\nYou can assume that each word is a sequence of alphanumeric characters, and that there are no more than 100 characters in a word.\n\nThe merged line should be printed to standard output.\n\nFor example, given the following input file:\n```\nthe foo bar\nthe\nbaz\nqux\n\nfoo bar\nbaz\nqux\n```\n\nThe program should output:\n```\nthe foo bar baz qux\nfoo bar baz qux\n```\n\nHints:\n- A line may contain more than one duplicate word.\n- A line may contain fewer than 50 words.\n- A word may contain more than 100 characters.\n- There may be multiple blank lines.\n- The input file may be a text file."}, {"instruction": "Design a Python program that takes a module name as an input and prints the names of all its classes/functions/methods. Utilize the `inspect` module to retrieve the module's source code at runtime. The program should run in a single pass without parsing the source code twice."}, {"instruction": "Design a Python program to find all unique permutations of elements in a specified list. Utilize the python `itertools` package for permutations. For example, given a list of elements `['a', 'b', 'c']`, the program should print out all possible unique permutations in the following format:\n\n```\nabc\nacb\nbac\nbca\ncab\ncba\n```"}, {"instruction": "Write a Python program that reads in all text data from a given text file and prints the number of occurrences of each character. Your program should display the characters and their frequencies, sorted from least frequently used to most frequently used. The characters in the file should be counted regardless of case."}, {"instruction": "Write a program that counts the number of seconds in a day, where the first second is considered to be 00:00:00. The program should read a line of input from the console and output the number of seconds between the time specified in the input and the current time."}, {"instruction": "Write a program that generates a random `n` \u00d7 `m` matrix of integers within a specified range and prints the matrix to standard output. The values in the matrix are separated by spaces such that each row of the matrix is printed on a new line. Also, print the minimum and maximum values of the matrix."}, {"instruction": "Create a Python program that can print any string of text in a rectangle window with a specified height and width. The program should also save the output to a file. The window should either be filled with a background color or have no background. Ensure the specified width and height are validated by adding empty spaces to the beginning/end of the string in a new line to ensure that it fits."}, {"instruction": "Create a Python program that detects the presence of a specific string in a Python program's source code. The program should take three command-line arguments: a main program file (`main_file`), a string to search (`needle`), and a print-on-mismatch flag (`print_on_mismatch`).\n\nThe program should identify and print [line, column] pairs on the original source code where the string matches, where line is line number and column is column number. Print the [line, column] pairs in ascending order of line and column.\n\nUse Python's `ast` module to parse the original source code, where `ast.parse` returns a tree of nodes that represents the program. Use the tree to locate the relevant string match and print the line and column number.\n\nTest this program on the Python standard library with a main program file (such as `os.py`) and the string `os.chdir`. Then test on your own main program file of your choice and the string of your choice."}, {"instruction": "Implement a Python program that creates an array of length 100 and fills it with random integers between 1 and 100 (inclusive). Print the number of even numbers in this array."}, {"instruction": "Create a Python program that determines whether an array of integers contains a continuous subarray of the same number. The program should run in linear time complexity."}, {"instruction": "Create a Python program that reads a text file and prints the number of words in the file that are not present in the English dictionary."}, {"instruction": "Create a program that takes a text file as input, and modifies the text file by removing all occurrences of the words in a given list. For example, given a text file, \"alice.txt\", containing the following text:\n\n```plaintext\nAlice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, \"and what is the use of a book,\" thought Alice \"without pictures or conversation?\"\n```\n\nThe text file \"alice_cleaned.txt\" should contain only the following:\n\n```plaintext\nwas beginning get tired sitting sister bank having nothing doing once twice peeping book sister reading pictures conversations use\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: linear search with recursion, default parameter initialization, multiple base cases in recursion\n\n### Task\nDesign a Python program that not only searches for a target value in a list using recursion but also constructs a trace of the indices it checks. This program should return both the index of the target, if found, or `-1` if not, alongside a list of the indices it examined during the search. The function should handle cases where the target is not present in the list.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: function call, default parameter values, multiple base cases in functions\n\n### Task", "fingerprint": null, "content": {"code": "inline hw_uint<16> mpr16b_32_8_rd15_select(in_cache& in, int d0, int d1, int d2, int dynamic_address) {\n#ifdef __VIVADO_SYNTH__\n#endif //__VIVADO_SYNTH__\n  // mpr16b_32_8_rd15 read pattern: { mpr16b_32_8_update_0[d0, d1, d2] -> in[7 + 8d0, 1 + 2d1, d2] : 0 <= d0 <= 15 and 0 <= d1 <= 63 and 0 <= d2 <= 63 }\n  // Read schedule : { mpr16b_32_8_update_0[d0, d1, d2] -> [d2, 1 + 2d1, d0, 2] : 0 <= d0 <= 15 and 0 <= d1 <= 63 and 0 <= d2 <= 63 }\n  // Write schedule: { in_update_0[d0, d1, d2] -> [d2, d1, d0, 1] : 0 <= d0 <= 15 and 0 <= d1 <= 127 and 0 <= d2 <= 63 }\n  auto value_in_in_update_0_write7 = in.in_in_update_0_write7_merged_banks_2.peek_0();\n  return value_in_in_update_0_write7;\n  return 0;\n}", "docstring": "// Write schedule: { in_update_0[d0, d1, d2] -> [d2, d1, d0, 1] : 0 <= d0 <= 15 and 0 <= d1 <= 127 and 0 <= d2 <= 63 }", "function_name": "mpr16b_32_8_rd14_select"}, "id": 359, "seed": "inline hw_uint<16> mpr16b_32_8_rd15_select(in_cache& in, int d0, int d1, int d2, int dynamic_address) {\n#ifdef __VIVADO_SYNTH__\n#endif //__VIVADO_SYNTH__\n  // mpr16b_32_8_rd15 read pattern: { mpr16b_32_8_update_0[d0, d1, d2] -> in[7 + 8d0, 1 + 2d1, d2] : 0 <= d0 <= 15 and 0 <= d1 <= 63 and 0 <= d2 <= 63 }\n  // Read schedule : { mpr16b_32_8_update_0[d0, d1, d2] -> [d2, 1 + 2d1, d0, 2] : 0 <= d0 <= 15 and 0 <= d1 <= 63 and 0 <= d2 <= 63 }\n  // Write schedule: { in_update_0[d0, d1, d2] -> [d2, d1, d0, 1] : 0 <= d0 <= 15 and 0 <= d1 <= 127 and 0 <= d2 <= 63 }\n  auto value_in_in_update_0_write7 = in.in_in_update_0_write7_merged_banks_2.peek_0();\n  return value_in_in_update_0_write7;\n  return 0;\n}", "__index_level_0__": 94, "concepts": ["function call", "default parameter values", "multiple base cases in functions"], "parsing_result": [{"instruction": "Write a Python function that takes a list of integers and returns a list of the same size where the elements at each index are the sum of the indices and the corresponding element in the original list. For example:\n- Input: [1, 2, 3] --> Output: [0, 3, 6]\n- Input: [1, 2, 3, 4] --> Output: [0, 3, 6, 10]"}, {"instruction": "Design a Python function that implements the `sum()` intrinsic in Python. The function should accept a list of numbers and return the sum of all the numbers as an integer. If the input is not a list, the function should raise a TypeError."}, {"instruction": "Create a Python function that takes two arguments, `n` and `k`, and returns a list of all possible combinations of `k` elements from the range `[1, n]`. For example, if `n` is 5 and `k` is 3, the function should return `[1, 2, 3, 1, 2, 4, 1, 2, 5, 1, 3, 4, 1, 3, 5, 1, 4, 5, 2, 3, 4, 2, 3, 5, 2, 4, 5]`."}, {"instruction": "Create a Python function that takes two integers as input, `x` and `y`, and returns the value of `x^y` (x to the power of y).\n\nThe function should handle cases with `x = 0` and `y = 0` separately."}, {"instruction": "Implement a Python function that takes a list of items as input and returns a new list that contains the reverse of each item. The input list should not be modified."}, {"instruction": "Create a Python function `get_next_prime(n)` that returns the next prime number greater than the input, `n`. The function should work for both integers as well as floats."}, {"instruction": "Create a Python function that implements the classic \"fibonacci\" sequence with a recursive algorithm. The function should take a number `n` and return the `n`th fibonacci number in the sequence."}, {"instruction": "Create a Python function that takes two integers `x` and `y` and returns their product, or the negative of their sum, or 0 if both are negative. The function should handle cases where either input is 0."}, {"instruction": "Design a Python function that accepts an integer parameter `n` and returns both the `n`th Fibonacci number and the `n`th Lucas number. The function should handle cases where `n` is less than or equal to 1.\n\nThe Fibonacci sequence is a series of numbers in which each number is the sum of the previous two numbers. The Lucas sequence is a variation of the Fibonacci sequence where the first two numbers are 2 and 1."}, {"instruction": "Create a Python function that returns the count of the number of times the input string appears in the input list. If the list contains duplicate elements, the count should be one higher than the actual frequency of the string in the list up until the first occurrence."}, {"instruction": "Create a Python function that, given a tree structure, returns all the values in the tree in pre-order traversal. Use recursion to implement the function.\n\nFor example, the following tree:\n\n```\n      1\n     / \\\n    2   3\n   / \\\n  4   5\n```\n\nshould return the following list: [1, 2, 4, 5, 3]"}, {"instruction": "Create a Python function that implements a binary search algorithm. The function takes two arguments: a sorted list and a target value. Return the index of the target value in the list, or -1 if not found. The function should handle cases where the target is not present in the list."}, {"instruction": "Design a Python function that accepts a string, `s`, and returns the first unique character of the string. If the string is empty or contains only unique characters, return an empty string."}, {"instruction": "Write a Python function to calculate the factorial of a number n using recursion."}, {"instruction": "Design a Python function that takes a list of function names, and returns a function that executes all the functions in the list in sequence. The function should handle the case where there are no functions to execute, or where there is only one function in the list."}, {"instruction": "Write a Python function that takes an integer (positive or negative) and outputs the integer's absolute value. If the integer is 0 or negative, the function should return 0. In addition, write a test program that calls the function for some inputs."}, {"instruction": "Create a Python function that reverses the elements within a list using recursion. The function should handle cases where the list is empty or consists of a single element."}, {"instruction": "Write a Python function that returns the value of $e^x$ (where $e$ is Euler's number and $x$ is a real number). The function should use the Taylor approximation for $e^x$ as follows:\n\n$$e^x = \\sum_{n=0}^{\\infty} \\frac{x^n}{n!}$$\n\nThe function should accept an argument `x`, the argument should default to 0 and the function should handle cases where the input is `0` or `1`. The function should handle inaccuracies due to rounding errors and should raise an exception when the function is called with an invalid input."}, {"instruction": "Design a Python function `fibonacci(n)` to return the `n`-th Fibonacci number. The Fibonacci numbers are defined as follows:\n\n```\nF(0) = 0\nF(1) = 1\nF(n) = F(n-1) + F(n-2), n >= 2\n```\n\n- `fibonacci(0) --> 0`\n- `fibonacci(2) --> 1`\n- `fibonacci(7) --> 13`"}, {"instruction": "Design a Python function `print_tree(root)` to print a binary tree in an indented\nformatted way. The function should accept a root node of a binary tree with integer values as inputs. The function should print the tree using indentation to visually indicate the tree structure.\n\nFor example, the function should pass the following assertions:\n\n```python\nprint_tree([1])\n# 1\n\nprint_tree([1, [2]])\n#    1\n#    2\n\nprint_tree([1, [2, [3]], [4, [5]]])\n#    1\n#    2\n#    3\n#    4\n#        5\n```"}, {"instruction": "Create a Python function `get_customer_name` that takes a customer ID as a string and an optional first and last name as arguments. If the ID is not valid, the function should return a default string, and otherwise it should return the formatted name, consisting of the first and last name separated by a space.\n\nFor example, `get_customer_name('000001', 'John', 'Doe')` should return '', while `get_customer_name('123456', 'John')` should return 'John'."}, {"instruction": "Write a Python function that takes a list of numbers and returns the minimum number in the list. The function should handle cases where the list is empty or contains only one item. The function should also support a default value for the minimum number, `minimum=float('inf')`."}, {"instruction": "Create a Python function that takes three arguments: a base, an exponent, and an optional flag. The function should return the result of base raised to the power of exponent. When the flag is set to `True`, the result should be rounded up to the nearest integer. If the flag is not set, the function should return the floating-point result. The function should handle base and exponent inputs of `-1` and `0` in a special way: base should be set to 1 and exponent should be set to 0, respectively."}, {"instruction": "Design a Python function that recursively computes the Fibonacci sequence starting with `0` and `1`. The function should accept a target integer `n` and return the `n-th` Fibonacci number."}, {"instruction": "Create a Python function that accepts two integers and a boolean value `is_true`. The function should return the sum of the two integers if `is_true` is `True` or the difference of the two integers if `is_true` is `False`. Use default parameter values to avoid extra function calls."}, {"instruction": "Implement a Python function `is_prime(n: int)` that determines whether a given integer `n` is prime. Use recursion and utilize the modulo operator to test if `n` is divisible by any other values from 2 to `n - 1`."}, {"instruction": "Design a Python function to reverse a string using recursion. The function should handle cases where the input string is empty or only has one character."}, {"instruction": "Create a Python function called `check_for_match` which takes two parameters `param_1` and `param_2`. If `param_1` is a list, the function should return True if `param_2` is present in `param_1`, otherwise return False. If `param_1` is not a list, the function should return False."}, {"instruction": "Design a Python function that takes an integer `n` as input and returns the integer factorial (n!). The function should handle cases where `n` is negative, zero, or a positive integer."}, {"instruction": "Create a Python function `f(x, y, z=1)` that takes three inputs:\n- x: an integer that represents the number of times to iterate\n- y: an integer specifying the number of times to repeat the iteration\n- z: an integer specifying the value to add on to the iteration count\n\nThe function should iterate `x` times and add `z` to the count on each iteration. After the last iteration, the function should print the total count."}, {"instruction": "Write a Python function that takes a number `n` and returns the `n`th Fibonacci number. The function should handle invalid input gracefully, such as negative input or not-integer input."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: OpenCV functions for image manipulation, OpenCV data type definitions, OpenCV data type conversion, OpenCV image processing, OpenCV drawing functions\n\n### Task", "fingerprint": null, "content": {"code": "cv::RotatedRect rmvTheDot( cv::Mat& labeledObjs){\n\n    /// Find contours\n    cv::Mat hierarchy;\n    std::vector< std::vector<cv::Point> > contours;\n    cv::Mat threshold_output = labeledObjs.clone(); //only reference, I guess\n    findContours( threshold_output, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0) );\n\n    /// Find the rotated rectangles and ellipses for each contour\n    std::vector<cv::RotatedRect> minRect( contours.size() );\n    std::vector<cv::RotatedRect> minEllipse( contours.size() );\n    std::vector<double> dotRat( contours.size(), 0.0 );\n    std::vector<int> dotDet( contours.size(), 0 );\n\n    int cntDet=0;\n    for( int i = 0; i < contours.size(); i++ ){\n        minRect[i] = minAreaRect( cv::Mat(contours[i]) );\n        if( contours[i].size() > 5 ){\n            minEllipse[i] = fitEllipse( cv::Mat(contours[i]) );\n\n            cv::Size s(minEllipse[i].size);\n            float sratio = (s.width/(float)s.height);\n            dotRat[i] = sratio;\n            int mxs = (s.width>s.height) ? s.width : s.height;\n\n            dotDet[i] = ( (sratio>=DOT_SIZE_RATIO) && (sratio<=1/DOT_SIZE_RATIO ) &&\\\n                          ((mxs)>DOT_SIZE_MINOMAX) && ((mxs)<DOT_SIZE_MAXPMAX)  );\n            cntDet += dotDet[i];\n            std::cerr << \"s[\"<<i<<\"]: \" << s << \" | ratio: \" << sratio << \" | det: \" << (int)dotDet[i] << \"\\n\";\n        }\n     }\n\n\n    ////In case not found\n    if(cntDet==0){\n        cv::RotatedRect empt;\n        //(cv::Point(0,0), cv:Size(0,0), 0);\n\n        return empt;\n    }\n\n    ////Selecting the dot\n    int idet=-1;\n    double mn=99999;\n    if(cntDet>1){ //multiple\n\n        std::cerr << \"dotRat.size=\" << dotRat.size() <<\"\\n\";\n\n        for(int i=0; i<dotRat.size(); i++ ){\n            if(dotDet[i]){\n                dotRat[i] = fabs(1.0-dotRat[i]);\n                std::cerr << \"new[\" << i<<\"]=\" << dotRat[i] << \" \";\n                if( mn > dotRat[i] ){\n                    mn = dotRat[i];\n                    idet = i;\n                    std::cerr << \"new idet\";\n                }\n                std::cerr << \"\\n\";\n            }\n        }\n    }else{\n        for(int i=0; i<dotDet.size(); i++ ){\n            if(dotDet[i]){\n                idet = i;\n                break;\n            }\n        }\n\n    }\n\n    ///Removing the dot from objects mask\n    labeledObjs(minRect[idet].boundingRect()) = 0;\n\n    return minRect[idet];\n\n    /*\n            /// Draw contours + rotated rects + ellipses\n            RNG rng;\n            cv::Mat drawing = cv::Mat::zeros( threshold_output.size(), CV_8UC3 );\n            for( int i = 0; i< contours.size(); i++ )\n               {\n                 //Scalar color = Scalar( 100, 000, 220 );\n                 Scalar color = Scalar( rng.uniform(0,255), rng.uniform(0,255), rng.uniform(0,255) );\n\n                 // contour\n                 drawContours( drawing, contours, i, color, 1, 8, std::vector<Vec4i>(), 0, Point() );\n                 // ellipse\n                 ellipse( drawing, minEllipse[i], color, 2, 8 );\n                 // rotated rectangle\n                 Point2f rect_points[4]; minRect[i].points( rect_points );\n                 for( int j = 0; j < 4; j++ )\n                    line( drawing, rect_points[j], rect_points[(j+1)%4], color, 1, 8 );\n               }\n\n            imshow(\"drawcircs\", drawing);\n            moveWindow(\"drawcircs\", 800, 1500 );\n            cv::waitKey(0);\n    */\n}", "docstring": "//(int)hasObj[0];", "function_name": "filterObjs4Dial"}, "id": 363, "seed": "cv::RotatedRect rmvTheDot( cv::Mat& labeledObjs){\n\n    /// Find contours\n    cv::Mat hierarchy;\n    std::vector< std::vector<cv::Point> > contours;\n    cv::Mat threshold_output = labeledObjs.clone(); //only reference, I guess\n    findContours( threshold_output, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0) );\n\n    /// Find the rotated rectangles and ellipses for each contour\n    std::vector<cv::RotatedRect> minRect( contours.size() );\n    std::vector<cv::RotatedRect> minEllipse( contours.size() );\n    std::vector<double> dotRat( contours.size(), 0.0 );\n    std::vector<int> dotDet( contours.size(), 0 );\n\n    int cntDet=0;\n    for( int i = 0; i < contours.size(); i++ ){\n        minRect[i] = minAreaRect( cv::Mat(contours[i]) );\n        if( contours[i].size() > 5 ){\n            minEllipse[i] = fitEllipse( cv::Mat(contours[i]) );\n\n            cv::Size s(minEllipse[i].size);\n            float sratio = (s.width/(float)s.height);\n            dotRat[i] = sratio;\n            int mxs = (s.width>s.height) ? s.width : s.height;\n\n            dotDet[i] = ( (sratio>=DOT_SIZE_RATIO) && (sratio<=1/DOT_SIZE_RATIO ) &&\\\n                          ((mxs)>DOT_SIZE_MINOMAX) && ((mxs)<DOT_SIZE_MAXPMAX)  );\n            cntDet += dotDet[i];\n            std::cerr << \"s[\"<<i<<\"]: \" << s << \" | ratio: \" << sratio << \" | det: \" << (int)dotDet[i] << \"\\n\";\n        }\n     }\n\n\n    ////In case not found\n    if(cntDet==0){\n        cv::RotatedRect empt;\n        //(cv::Point(0,0), cv:Size(0,0), 0);\n\n        return empt;\n    }\n\n    ////Selecting the dot\n    int idet=-1;\n    double mn=99999;\n    if(cntDet>1){ //multiple\n\n        std::cerr << \"dotRat.size=\" << dotRat.size() <<\"\\n\";\n\n        for(int i=0; i<dotRat.size(); i++ ){\n            if(dotDet[i]){\n                dotRat[i] = fabs(1.0-dotRat[i]);\n                std::cerr << \"new[\" << i<<\"]=\" << dotRat[i] << \" \";\n                if( mn > dotRat[i] ){\n                    mn = dotRat[i];\n                    idet = i;\n                    std::cerr << \"new idet\";\n                }\n                std::cerr << \"\\n\";\n            }\n        }\n    }else{\n        for(int i=0; i<dotDet.size(); i++ ){\n            if(dotDet[i]){\n                idet = i;\n                break;\n            }\n        }\n\n    }\n\n    ///Removing the dot from objects mask\n    labeledObjs(minRect[idet].boundingRect()) = 0;\n\n    return minRect[idet];\n\n    /*\n            /// Draw contours + rotated rects + ellipses\n            RNG rng;\n            cv::Mat drawing = cv::Mat::zeros( threshold_output.size(), CV_8UC3 );\n            for( int i = 0; i< contours.size(); i++ )\n               {\n                 //Scalar color = Scalar( 100, 000, 220 );\n                 Scalar color = Scalar( rng.uniform(0,255), rng.uniform(0,255), rng.uniform(0,255) );\n\n                 // contour\n                 drawContours( drawing, contours, i, color, 1, 8, std::vector<Vec4i>(), 0, Point() );\n                 // ellipse\n                 ellipse( drawing, minEllipse[i], color, 2, 8 );\n                 // rotated rectangle\n                 Point2f rect_points[4]; minRect[i].points( rect_points );\n                 for( int j = 0; j < 4; j++ )\n                    line( drawing, rect_points[j], rect_points[(j+1)%4], color, 1, 8 );\n               }\n\n            imshow(\"drawcircs\", drawing);\n            moveWindow(\"drawcircs\", 800, 1500 );\n            cv::waitKey(0);\n    */\n}", "__index_level_0__": 95, "concepts": ["OpenCV functions for image manipulation", "OpenCV data type definitions", "OpenCV data type conversion", "OpenCV image processing", "OpenCV drawing functions"], "parsing_result": [{"instruction": "Create a Python class called `ImageProcessor` that supports reading and writing images with OpenCV and providing some basic image processing functions. The class should provide the following methods:\n\n- `read` to read an image from a file. If the file format is not supported, the method should raise a `ValueError` exception.\n- `write` to write an image to a file.\n- `resize` to resize an image. The method should accept a target size as a tuple with width and height in the order of the dimensions and return a new resized image.\n- `add_overlay` to add an overlay to an image. The method should accept an image and return a new image with the overlay included. The overlay image should be a 100x100 pixel rectangle with black background with a red border.\n- `add_text` to add text to an image. The method should accept a text string and return a new image with the text overlayed.\n\nThe class should also have a constructor that accepts image file paths. If the file format is not supported, the constructor should raise a `ValueError` exception.\n\nThe class should provide the following static methods:\n\n- `get_image_types` that takes no input and returns a dictionary with supported image types as keys and file extensions as values.\n- `get_shapes` that takes no input and returns a dictionary with supported shapes as keys and image file extensions as values.\n\nFinally, the class should also provide an `ImageProcessor` factory method `from_content` that takes a string representing the image content as bytes and returns an `ImageProcessor` instance."}, {"instruction": "Develop a Python class `Image` to represent an image in a 3-dimensional array. The class should have the following public methods:\n- `load(path)`\n- `save(path)`\n- `resize(new_width, new_height)`\n- `crop(x1, y1, x2, y2)`\n- `get_pixel(x, y)`\n- `set_pixel(x, y, r, g, b)`\n- `get_width()`\n- `get_height()`\n- `get_color_histogram()`\n- `get_grayscale_histogram()`\n- `get_histogram()`\n- `find_object(target_image, x, y)`\n- `scale_object(target_image)`\n- `rotate_object(angle)`\n- `crop_object(target_image)`\nThe class should also support the standard Python data type conversions `int` and `float` between the image data type and the OpenCV data type."}, {"instruction": "Create a Python class that depicts an image. The class should use OpenCV to create a wrapper over the image data. The class should have the following methods:\n- `save(filename)` to write the image data into the specified file format\n- `rotate(angle)` to rotate the image by the specified angle in degrees\n- `crop(x0, y0, x1, y1)` to crop the image with the given coordinates\n- `resize(new_width, new_height)` to resize the image with the given dimensions\n- `get_width()` to get the width of the image in pixels\n- `get_height()` to get the height of the image in pixels"}, {"instruction": "Develop a Python class named `Image` to implement a simple image viewer. Initially, the class should accept a path to an image as the sole constructor parameter (string). Then, it should have the following methods:\n* `show()`: displays the image using OpenCV in a window.\n* `save(save_path)`: saves the image to the specified path as a PNG file.\n* `get_data()`: returns the image data as a NumPy array.\n* `get_shape()`: returns the shape of the image (height, width, channels).\n* `draw_rectangle(start_point, end_point, color)`: draws a rectangle on the image.\n* `draw_text(start_point, text, color)`: draws a text on the image.\n* `get_pixel(x, y)`: returns the color of the specified pixel in the image as a NumPy array.\n* `set_pixel(x, y, color)`: sets the color of the specified pixel in the image to the specified color.\n* `resize(width, height)`: resizes the image to the specified size.\n* `crop(start_point, end_point)`: crops the image to the specified area.\n\nThe class should validate the input path and throw an exception if the path is not valid."}, {"instruction": "Create a Python class that contains a single method `generate_image(width, height)` that generates and returns an Image object from the specified dimensions. A 32-bit RGBA image is used with the following pixel values:\n\n```text\n0000: 128, 0, 0, 255\n0004: 0, 128, 0, 255\n0008: 0, 0, 128, 255\n000c: 255, 255, 255, 255\n```\n\nAfter the image has been created, the method should draw a grid of 30x30 pixels with a 2-pixel white border around each cell. The grid top left corner should be located at pixel coordinates (25, 25).\n\nThe image class should also include a method `draw_crosshair(x, y)` that draws an 'X' centered at the given pixel coordinates."}, {"instruction": "Develop a Python class `ImageManipulator` that performs various image processing tasks on an image.\n- `ImageManipulator.__init__(self, image_path)` - creates the object by loading an image from the specified file path. The image must be in the JPEG format.\n- `ImageManipulator.save(self, save_path, save_format)` - saves the manipulated image to the specified file path in the specified format. The image must be in the JPEG format.\n- `ImageManipulator.adjust_brightness(self, brightness)` - adjusts the brightness of the image by a given amount. The brightness should be a floating-point number ranging from -1 to 1, where negative values darken the image and positive values brighten it.\n- `ImageManipulator.adjust_contrast(self, contrast)` - adjusts the contrast of the image by a given amount. The contrast should be a floating-point number ranging from -1 to 1, where negative values reduce the contrast and positive values increase it.\n- `ImageManipulator.adjust_saturation(self, saturation)` - adjusts the saturation of the image by a given amount. The saturation should be a floating-point number ranging from -1 to 1, where negative values reduce the saturation and positive values increase it.\n- `ImageManipulator.crop(self, left, top, width, height)` - crops the image by the specified region. The region should be a rectangle with the specified top-left coordinates and the specified width and height.\n- `ImageManipulator.rotate(self, angle)` - rotates the image by the specified angle (in degrees). The angle should be a floating-point number ranging from 0 to 360, where a positive angle rotates the image clockwise and a negative angle counterclockwise.\n- `ImageManipulator.flip(self, direction)` - flips the image horizontally or vertically. The direction should be either 'horizontal' or 'vertical'.\n\nFor example, the class can be used as follows:\n```python\nimg = ImageManipulator('example.jpg')\nimg.adjust_brightness(0.5)\nimg.save('result.jpg', 'jpg')\nimg.crop(100, 50, 100, 100)\nimg.rotate(90)\nimg.flip('horizontal')\n```"}, {"instruction": "Implement a Python class named `ImageProcessor` that provides the following methods:\n- `load_image`: loads an image from a specified file path\n- `convert_color_space`: converts the image to a given color space\n- `find_orange_circles`: performs edge detection on the image to find orange circles\n- `draw_circles`: draws circles onto the image using OpenCV\n- `save_image`: saves the image to a specified file path\n\nFor the `convert_color_space` method, the supported color spaces are BGR, HSV, and LAB. This method should raise an error if the color space is not one of these cases.\n\nFor the `find_orange_circles` method, the `HSV` color space is used to find the yellow circles in an image. The following steps are applied to perform this task:\n- Convert the image from RGB color space to HSV color space\n- Compute the difference between the H and S components of the HSV image for each image pixel\n- Apply the difference threshold to the difference image and compute the connected components based on the threshold\n- Compute the contours of each connected component to find the circle centers and radii\n- Draw the circles onto the original image\n\nThe `save_image` method is used to save the image to a file. It should raise an error if the file path does not have an appropriate extension."}, {"instruction": "Develop a Python class `Image` that encapsulates image processing and manipulation functions commonly used in computer vision. The class should include the following member variables:\n\n- self.path: the path to the image file\n- self.image: the image data in the form of a NumPy array (e.g., a 3-dimensional array)\n- self.height: the height in pixels of the image\n- self.width: the width in pixels of the image\n- self.channels: the number of channels in the image\n\nThe class should include the following member functions:\n\n- `read()`: read the image from the specified path and return the image data as a NumPy array\n- `show()`: display the image in a window\n- `save(path)`: save the image data to the specified path\n\nImplement the class so that it satisfies the following assertions:\n\n```python\nimg = Image('files/me.jpg')\nassert img.read() is not None\nassert img.show() is not None\nimg.save('files/me_saved.jpg')\n```"}, {"instruction": "Construct a Python class that wraps the OpenCV image processing library to perform image manipulation. The class should be able to open an image from disk, display it, save it to disk, and rotate the image by a specified number of degrees. The class should also have a `draw_rectangle` method to draw a rectangle on the image with specified left, top, width, and height."}, {"instruction": "Create a Python class that represents a Sudoku puzzle, and contains a method `check_sudoku` that returns `True` if the puzzle is solvable, and `False` otherwise. Assume that the puzzle is a 9x9 matrix of integers in row-major order form."}, {"instruction": "Create a Python class that processes an image and returns the same image with a green rectangle drawn around the detected faces. The rectangle should be centered on the detected face and have a fixed size. The input image should be a cropped photo from a video to focus on a single face, and the output image will be the original image with the detected face outlined with a green rectangle.\n\nThe class should have the following methods:\n\n- `process_image()`: processes the input image to return the output as a new image\n- `process_image_file()`: processes the input image to return the same image as a new image, but writes out the image as a file instead of returning it\n- `get_faces()`: returns a list of (x, y, width, height) tuples representing face locations in the input image"}, {"instruction": "Create a Python class that encapsulates the fundamental image processing operations of OpenCV. The class should include an initialization function that takes an image as input and saves the image as a private attribute. The class should implement the following methods to process the image:\n- invert_image(): inverts the color values of the image.\n- grayscale_image(): converts the image to grayscale.\n- display_image(): displays the image in a GUI window.\n\nThe class should also implement a static function take_screenshot() that takes a screenshot of the entire desktop, and returns the image as a 3-D NumPy array. The screenshot should be returned as BGR, 8-bit unsigned, with each channel having values in the range [0, 255]."}, {"instruction": "Create an image processing application in Python that inputs a camera image and outputs a processed image according to the specified rules. The application should accept the following command-line arguments:\n- `input_filename`: the name of the input image file\n- `output_filename`: the name of the output image file\n- `algorithm`: the name of the processing algorithm (e.g., 'blur' or 'edges')\n- `size`: the size of the kernel for convolution-based algorithms (only applicable for blurring)\n\nThe image processing algorithm should include the following:\n- `blur`: applies a blur filter based on the kernel size\n- `edges`: uses edge detection to highlight the dominant edges in the image\n\nFor example, to run the program on the provided input image, you can call:\n\n```\npython image_processing.py input.jpg output.png edges\n```\n\nThe resulting output should contain the highlighted edges."}, {"instruction": "Construct a Python class that represents a 3D point in a right-handed coordinate system (X-Y-Z) where the origin is at left-bottom of the viewport. The class should support basic operations of addition, subtraction, and scalar multiplication, as well as the ability to convert the point to a 2D tuple with respect to a given viewport. The class should also include class methods to create points from raw XYZ coordinates, and a class method that converts a list of XYZ coordinates into a list of 2D points."}, {"instruction": "Develop a Python class named `Image` that encapsulates basic image operations (e.g., resizing, rotation, flipping). The class should have the following methods:\n- `def __init__(self, file_name)`: Initialize an object with the given file name.\n- `def __str__(self)`: Return a string representation of the object.\n- `def __iter__(self)`: Return a generator that iterates over the image pixels.\n- `def __getitem__(self, index)`: Return the pixel at the given index.\n- `def __setitem__(self, index, value)`: Set the pixel at the given index to the given value.\n- `def resize(self, width, height)`: Resize the image to the given width and height.\n- `def rotate(self, degrees)`: Rotate the image by the given number of degrees.\n- `def flip(self, direction)`: Flip the image horizontally or vertically.\n- `def sharpen(self)`: Sharpen the image by applying a convolution with the given kernel."}, {"instruction": "Create a Python class `Image` that represents an image with a height, a width, and an optional array of pixels. The class should provide methods to load an image from a file or array, to draw rectangles, to draw text, and to save the image to a file. Use the OpenCV library to implement the methods. The class should be capable of accepting any pixel value (any numerical data type or string representation) and any numerical data type (integer or float) as image pixels.\n\nThe class should provide a static method `load_from_file` to load an image from a file into a new instance of the class. The method should throw an exception if the file does not exist or if the file is not an image.\n\nThe class should provide a static method `load_from_array` to load an image from a 2-dimensional array of pixels into a new instance of the class.\n\nThe class should provide a method `draw_rectangle` that draws a rectangle with four parameters to specify the coordinates of the top left and the bottom right corners of the rectangle, and the color of the rectangle. The method should throw an exception if the drawing coordinates are out of range.\n\nThe class should provide a method `draw_text` that draws some text with the specified coordinates, font, color, and text size. The method should throw an exception if the coordinates are out of range.\n\nThe class should provide a method `save_to_file` that saves the image to a file. The method should throw an exception if the file could not be written.\n\nThe class should provide a static method `draw_line` that draws a line with four parameters to specify the coordinates of the first and the last points of the line, and the color of the line. The method should throw an exception if the drawing coordinates are out of range."}, {"instruction": "Conduct an experiment to compare the speed of image processing operations using OpenCV versus basic NumPy operations. The program should take an image as input and display it in two separate windows. The first window should display the original image, and the second window should display the result of converting the image to grayscale using both OpenCV functions and NumPy operations. Time both operations and record the results. In the report, plot and compare the execution times for each operation."}, {"instruction": "Develop a Python class that processes an image, and implements the following methods:\n- `load_image(filename)`: Loads an image file from disk into memory.\n- `show_image(window_name, delay)`: Shows the current image in a window.\n- `save_image(filename)`: Saves the current image from memory to disk.\n- `close_image()`: Closes the current image window.\n- `get_size(frame)`: Returns the size of the specified image.\n- `get_size_width(frame)`: Returns the width of the specified image.\n- `get_size_height(frame)`: Returns the height of the specified image.\n- `flip_horizontal(frame)`: Flips the specified image horizontally.\n- `flip_vertical(frame)`: Flips the specified image vertically.\n- `rotate(frame, angle)`: Rotates the specified image by the specified angle.\n- `threshold(frame, thresh, max_val)`: Thresholds the specified image using the specified threshold range.\n- `blur(frame, ksize)`: Uses a Gaussian blur to smooth the specified image with the specified kernel size.\n- `invert(frame)`: Inverts the colors in the specified image.\n- `find_contours(frame, mode, method)`: Find contours in the specified image.\n- `draw_contours(frame, contours, index, color, thickness)`: Draws the specified contours in the specified image.\n- `draw_rectangle(frame, pt1, pt2, color, thickness)`: Draws a rectangle with the specified coordinates and color.\n- `draw_circle(frame, center, radius, color, thickness)`: Draws a circle with the specified center and radius.\n- `draw_line(frame, pt1, pt2, color, thickness)`: Draws a line from the specified points.\n- `draw_text(frame, text, org, font_size, font_type, thickness)`: Draws the specified text in the specified image.\n\nYour class should be able to process a variety of image formats, including PNG, JPEG, and BMP."}, {"instruction": "Write a Python class to manipulate images using OpenCV functions. The class should support the following functionalities:\n\n- `get_image(filename)`: gets an image from the specified `filename` and returns an OpenCV array containing the image\n- `get_image_count(path)`: returns the number of images in the specified `path`\n- `get_image_width(filename)`: returns the width of the image specified by `filename`\n- `get_image_height(filename)`: returns the height of the image specified by `filename`\n- `get_image_size(filename)`: gets a tuple of the width and height of the image specified by `filename`\n- `get_image_type(filename)`: gets the type of the image specified by `filename` as a string\n- `get_image_size(filename)`: gets the size of the image specified by `filename` as a tuple\n- `copy_image(filename, width, height)`: creates a new image of the specified `width` and `height` and copies the content of the original image to the new one\n- `flip_image(filename, direction)`: creates a new image that is the flipped version of the original image. The `direction` parameter can have the following values: 'horizontal', 'vertical', and 'both'\n- `adjust_brightness(filename, value)`: creates a new image that is the adjusted brightness version of the original image. The `value` parameter determines the amount of brightness adjustment. `value` is a floating-point number between 0 and 2. A value of 0 causes the new image to be identical to the original image, while a value of 1 has no effect, and a value of 2 multiplies the values in every pixel by 2.\n- `adjust_contrast(filename, value)`: creates a new image that is the adjusted contrast version of the original image. The `value` parameter determines the amount of contrast adjustment. `value` is a floating-point number between 0 and 2. A value of 0 causes the new image to be identical to the original image, while a value of 1 has no effect, and a value of 2 increases the contrast in the image by a factor of 2.\n- `adjust_saturation(filename, value)`: creates a new image that is the adjusted saturation version of the original image. The `value` parameter determines the amount of saturation adjustment. `value` is a floating-point number between 0 and 2. A value of 0 causes the new image to be identical to the original image, while a value of 1 has no effect, and a value of 2 increases the saturation in the image by a factor of 2.\n- `adjust_hue(filename, value)`: creates a new image that is the adjusted hue version of the original image. The `value` parameter determines the amount of hue adjustment. `value` is a floating-point number between 0 and 2. A value of 0 causes the new image to be identical to the original image, while a value of 1 has no effect, and a value of 2 rotates the image clockwise by 180 degrees.\n- `rotate_image(filename, angle)`: creates a new image that is the rotated version of the original image. The `angle` parameter determines the angle of rotation in degrees.\n- `resize_image(filename, width, height)`: creates a new image that is the resized version of the original image. The `width` and `height` parameters determine the new dimensions of the image.\n- `crop_image(filename, x, y, width, height)`: creates a new image that is the cropped version of the original image. The `x` and `y` parameters determine the position to start cropping from and the `width` and `height` parameters determine the dimensions of the crop.\n- `draw_line(filename, x1, y1, x2, y2, color, thickness)`: creates a new image with a line drawn between the coordinates `x1`, `y1` and `x2`, `y2`. The `color` parameter is a 3-tuple that determines the color of the line. The `thickness` parameter determines the thickness of the line in pixels.\n- `draw_text(filename, text, pos_x, pos_y, font_scale, color, thickness)`: creates a new image with an image drawn into the image at position `pos_x`, `pos_y`. The `text` parameter is the text to be drawn. The `color` parameter is a 3-tuple that determines the color of the text. The `font_scale` parameter determines the size of the text. The `thickness` parameter determines the thickness of the text in pixels."}, {"instruction": "Given two images, write a program that adjusts the color of the second image such that the two images overlap as closely as possible. The solution should take a weighted sum of the two images. For example, for the following inputs:\n\n```python\nimg1 = cv2.imread('img1.png')\nimg2 = cv2.imread('img2.png')\n```\n\nThe output should be a weighted sum of `img1` and `img2` where the image at pixel `(500, 50)` of the output is a weighted sum of the two input images at pixel `(500, 50)`.\n\nYou can assume that the images are the same size, have red, green, and blue channels, and are stored as 8-bit unsigned integers."}, {"instruction": "Construct a Python class that implements a generic image processing pipeline. The class must take a grayscale image as input and output a grayscale image. The class should include various processing steps, such as thresholding, smoothing, color mapping, and denoising. The class should include a method to display the result of each step. For example, the class should include a method to show the original image, a method to show the result of thresholding, a method to show the result of smoothing, and a method to show the result of denoising.\n\nThe class must also include a method to show the original image, the result of each step, and an overlay of the results. The overlay should include a title for each step and a legend for the color map."}, {"instruction": "Write a Python class that implements an image processing pipeline. The class should provide the following methods:\n- `add_step(self, func)`: adds a function to the pipeline, which converts an image from its input to its output.\n- `process(self, img_in)`: processes the image `img_in` by applying each function in the pipeline to the input image, from left to right. This method returns the resulting image.\n- `add_step_params(self, func, **kwargs)`: adds a function with parameters to the pipeline, which constrains the number of input arguments the function can accept.\n- `process(self, img_in, *args)`: processes the image `img_in` by applying each function in the pipeline to the input image, from left to right. The function can accept arbitrary number of positional and keyword arguments."}, {"instruction": "Create a Python class `Image` that encapsulates a digital image. The class should support the following methods:\n- `size`: returns the width and height of the image as a tuple\n- `type`: returns the image's data type as a string, e.g., 'uint8'\n- `pixel(x, y)`: returns the RGB value of the pixel at position (x, y)\n- `set_pixel(x, y, value)`: sets the RGB value of the pixel at position (x, y) to the value given in the `value` argument\n- `draw_line(start, end)`: draws a line segment between the two positions (start, end)\n- `draw_circle(center, radius)`: draws a circle centered at the position (center, center) with the given radius\n- `draw_rectangle(top_left, bottom_right)`: draws a rectangle with the top left corner (top_left, top_left) and the bottom right corner (bottom_right, bottom_right)\n\n> Important: In order to draw an image, the image should be converted to the BGR data type, which can be achieved using the `cv2.cvtColor()` function."}, {"instruction": "Create a Python class that represents a camera that can be used for taking pictures. The camera should properly handle the following scenarios:\n\n- The camera has an initial state (e.g., idle, taken, or captured), which is not specified\n- When the camera is idle or taken, it can be activated with the `take` method, which returns a new capture object (a class extending the `Capture` class)\n- When a capture is taken, the `take` method should raise an error if the camera is in the idle or taken status, and the `take` method should raise an error if an existing capture is already in progress\n- Captured images should be stored in a temporary directory\n- The camera should be able to process captured images with the `process` method, which returns an image processing result (a class extending the `ImageProcessingResult` class)"}, {"instruction": "Create a Python class that represents an image in a 2-dimensional space. The class should support the following public methods:\n\n- load_image(filename): Initialize a new Image class from an image file\n- save_image(filename): Save an image to a specified file\n- resize(scale): Resize an image to a new size\n- color_threshold(lower, upper): Color threshold an image based on a range of RGB color values\n- blur(kernel_size): Apply a Gaussian blur to an image\n- draw_circle(center, radius, color): Draw a circle in an image\n- show(): Display an image to the screen\n\nIn addition, the class should support a public property `width` and `height` to get the dimensions of the image."}, {"instruction": "Create a Python class `ImageProcessor` that implements basic image processing operations, such as image rotation and flipping. The class should provide three methods: `rotate_right`, `rotate_left`, and `flip_vertical`. The class should be initialized with an input image as a `numpy` array, and should have a corresponding method to load the image from a file and store it in the class. The methods should work with a tolerance of one pixel for proper image flipping."}, {"instruction": "Create a Python program to display an image with an overlay for:\n\n- an object in an image, with a given color and transparency\n- a rectangle, with a given color and thickness\n- a line, with a given color and thickness\n\nThe program should also support a live input stream to take in user input commands to modify the overlay. The program should exit upon receiving an 'exit' command, or upon pressing any key on the keyboard.\n\nFor example, the user could input 'foam', '123', or '123, 456' to set the overlay color to '#123', '#123, 456', or '#123, 456, 123'. The user could also input 'rect', '123, 456, 789, 1011', or '123, 456, 789, 1011, 123, 456, 789, 1011' to set up a rectangle."}, {"instruction": "Develop a Python program that accepts a local file path of an image from user input, loads the image from the file path, enhances the image by using OpenCV's built-in functions, and then saves the enhanced image back into the same file path. The program should use the following OpenCV functions:\n- `cv2.imread`: to load an image from a file path\n- `cv2.imshow`: to display an image in a window\n- `cv2.imwrite`: to save an image to a file path\n- `cv2.cvtColor`: to convert an image from one color space to another\n- `cv2.GaussianBlur`: to blur an image\n\nFor example, the program should pass the following assertions:\n\n```python\n# TODO: add assertions\n```"}, {"instruction": "Create a Python class that encapsulates functions for image manipulation. The class should define the following data properties:\n- `filename`: the string name of the image file\n- `image`: the OpenCV image data\n- `dimensions`: the image width and height in pixels\n- `channels`: the number of channels per pixel\n- `colorspace`: the colorspace of the image, as a tuple (three integers)\n- `dtype`: the data type of the image, as a tuple (two integers)\n\nAdd the following methods to the class:\n- `load_image(filename)`: load an image file given a string name\n- `print_properties()`: print the properties of the image to standard output\n- `save_image(filename)`: save the image to a file given a string name, using the same filename extension as the original image\n- `get_rgb_image()`: return an OpenCV image in RGB colorspace\n- `get_gray_image()`: return an OpenCV image in grayscale colorspace\n- `get_image_channels(colorspace)`: return an OpenCV image with the specified colorspace and number of channels\n- `get_image_size(width, height)`: return an OpenCV image with the specified width and height\n- `get_image_dtype(image_type)`: return an OpenCV image with the specified data type\n- `draw_rectangle(image, x1, y1, x2, y2, color, thickness)`: draw a rectangle on an image with the specified coordinates, color, and thickness\n- `draw_circle(image, x, y, radius, color, thickness)`: draw a circle on an image with the specified coordinates, color, and thickness\n- `draw_line(image, x1, y1, x2, y2, color, thickness)`: draw a line on an image with the specified coordinates, color, and thickness\n- `get_image_channels(colorspace)`: return an OpenCV image with the specified colorspace and number of channels\n\nThe class should satisfy the following unit tests:\n\n```python\nimage = Image()\nimage.load_image('image.jpg')\nimage.print_properties()\nassert image.dimensions == (1024, 768)\nassert image.channels == 3\nassert image.colorspace == (8, 8, 8)\nassert image.dtype == (8, 8)\nimage.save_image('new_image.jpg')\nimage.load_image('new_image.jpg')\nassert image.channels == 3\nassert image.dtype == (8, 8)\nimage.image = image.get_rgb_image()\nassert image.channels == 3\nimage.image = image.get_gray_image()\nassert image.channels == 1\nimage.image = image.get_image_channels((8, 8, 8))\nassert image.channels == 3\nimage.image = image.get_image_channels((8, 8, 8, 8))\nassert image.channels == 4\nimage.image = image.get_image_size(1024, 768)\nassert image.dimensions == (1024, 768)\nimage.image = image.get_image_size(1024)\nassert image.dimensions == (1024, 768)\nimage.image = image.get_image_dtype('uint8')\nassert image.dtype == (8, 8)\nimage.image = image.get_image_dtype('uint16')\nassert image.dtype == (16, 16)\nimage.draw_rectangle(image.image, 0, 0, 1024, 768, (255, 0, 0), 2)\nimage.draw_circle(image.image, 512, 384, 256, (0, 0, 255), 3)\nimage.draw_line(image.image, 0, 0, 1024, 768, (0, 255, 0), 2)\n```"}, {"instruction": "Develop a class that contains methods for a basic image processing pipeline. The class should support the following operations:\n- reading an image from the disk and converting it into a PIL image object\n- resizing an image using a built-in function from the OpenCV library\n- converting an image from grayscale to RGB\n- converting an image from RGB to HSV\n- applying a Gaussian blur to an image\n- applying edge detection to an image using Canny edge detection\n- drawing a rectangle over an image\n- applying a custom convolution\n\nThe class should allow developers to set options for resizing, color space conversion, and edge detection to be used."}, {"instruction": "Construct a Python class that processes images from an input stream. The class should include the following methods:\n- `load_image`: load an image from a file or a URL using OpenCV, and return the image object\n- `resize`: resize the image with the specified dimensions, and return the resized image object\n- `save`: convert the image object into a PNG file using OpenCV, and save the file to a specified path\n- `convert_color`: convert the image to a specified color space, and return the color-converted image object\n- `draw`: draw a line on the image using OpenCV functions, and return the image object\nThe class should also include an `__init__` method to initialize instance attributes, and a `__str__` method to represent the image object in a string format.\n\n#"}, {"instruction": "Create a Python class that encapsulates a basic image processing pipeline. The class should provide the following functions:\n\n- load(self, image_path) - loads an image from the specified path into an internal variable.\n- display(self) - displays the image from the internal variable.\n- blur(self, radius) - blurs the image with a Gaussian kernel with the specified radius.\n- contrast_stretch(self) - applies a contrast stretching algorithm to the image.\n- convert(self, new_type) - converts the image type to the specified type.\n- save(self, output_path) - saves the image to the specified output path."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 4\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: insertion point for a sorted array, optimized time complexity\n\n### Task\nDesign a Python function that takes a sorted array and a target value, and return a valid index where target can be inserted to maintain the array's sorted order. Optimize the function to run in logarithmic time complexity.\n\nFor example, given `array = [1, 3, 5, 5, 6]` and `target = 5`, the function should return either 2 or 3 because 5 presents at both indices 2 and 3.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operations for number conversion, bit shifting, removal of leading zeros\n\n### Task", "fingerprint": null, "content": {"code": "fastfloat_really_inline uint32_t  parse_eight_digits_unrolled(uint64_t val) {\n  const uint64_t mask = 0x000000FF000000FF;\n  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)\n  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)\n  val -= 0x3030303030303030;\n  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;\n  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;\n  return uint32_t(val);\n}", "docstring": "// handle overflow", "function_name": "large_add_from"}, "id": 365, "seed": "fastfloat_really_inline uint32_t  parse_eight_digits_unrolled(uint64_t val) {\n  const uint64_t mask = 0x000000FF000000FF;\n  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)\n  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)\n  val -= 0x3030303030303030;\n  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;\n  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;\n  return uint32_t(val);\n}", "__index_level_0__": 96, "concepts": ["bitwise operations for number conversion", "bit shifting", "removal of leading zeros"], "parsing_result": [{"instruction": "Design a Python program that converts a binary string of any length into a decimal number. The program should accept a binary string as input and return the corresponding decimal number.\n\nFor example, `0101` should return `5`, and `10110000000` should return `640`."}, {"instruction": "Implement a Python program that takes a string containing a nonnegative integer in base-10 and converts it into an integer in base-2. For example, given the string \u201c12345\u201d, the program should output the binary representation of the number 12345, which is \u201c100110100101\u201d. Ensure that the program handles all cases correctly, including cases where the input integer is 0, negative, or if the input string is not a valid nonnegative integer. Include error handling to ensure the program handles invalid inputs."}, {"instruction": "Implement a Python program that converts a decimal integer to binary and then converts it back to decimal. The program should not use built-in functions like `int` or `bin`, and should ensure that the conversion is accurate and the input is a positive integer. Write assertions to ensure the program works correctly with positive integers."}, {"instruction": "Design a Python program that inputs a base-10 number, `a`, and a new base, `b`, and converts `a` into the equivalent number in base `b`. The program should handle conversions up to base 10, but not beyond.\n\nInclude assertions to verify the range of input values, and ensure the program handles cases where the number is negative or the base is invalid."}, {"instruction": "Implement a Python program that reads a number from a string and converts it from decimal to binary. Use bitwise operations to implement this conversion."}, {"instruction": "Create a Python program that converts an unsigned number into a string representation of its binary form. The program should handle leading zeros and prevent the string from having any trailing zeros."}, {"instruction": "Write a Python program that takes an integer as input and translates it into a string representation of an IP address. For example, `172381736` should be translated into `192.168.3.11`."}, {"instruction": "Implement a Python program that converts a 64-bit unsigned integer into the byte sequence that represents it in big-endian format. The program should accept one argument from the command line and print the result on the screen.\n\nFor example, given the input 1125899906842624, the program should print the byte sequence [4, 0, 0, 0, 0, 0, 0, 255]."}, {"instruction": "Write a Python program that converts a binary number represented as a string into an integer, by ignoring leading zeros and converting the remaining bits to decimal.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert convert_binary_to_decimal('1111110100100000000') == 941632\nassert convert_binary_to_decimal('1000000') == 64\nassert convert_binary_to_decimal('11000011') == 105\n```"}, {"instruction": "Develop a Python program that performs the following operations:\n1. Converts a given integer `num` to binary.\n2. Removes the leading zeros from the binary representation.\n3. Converts the remaining binary digits back to an integer and outputs it.\n\nFor example, given the number 11, the program should convert it to binary: `1011`, remove the leading zeros: `1011`, convert the remaining digits back to an integer: `11`."}, {"instruction": "Write a Python program that converts a string representation of a binary number to its integer value and vice versa. The program should be able to handle leading zeros, trailing zeros, and invalid inputs such as non-binary strings."}, {"instruction": "Write a Python program that takes a list of unsigned integers (represented as binary strings) as input and converts each integer into its binary representation with leading zeros removed. The input should be a list of numbers in string format, and the output should be a list of numbers in string format.\n\nFor example, given the input [1, 2, 3, 4, 5], the output should be [00000001, 00000010, 00000011, 00000100, 00000101]. Note that the numbers in the output should be strings instead of integers."}, {"instruction": "Implement a program that converts an integer into a binary string, by converting the integer into its binary representation. Include bit shifting operations to move the binary representation to the left and remove the leading 0s from the binary string. Follow the example format of the program:\n\n```console\nEnter an integer: 6\nBinary number: 110\n```"}, {"instruction": "Implement a Python function that takes a number and returns its binary representation. For example, given 12, the function should return 1100. Utilize bitwise operations and bit shifting to achieve the desired result."}, {"instruction": "Design a Python program to convert a number in binary representation to its decimal value. The program should use bitwise shifting and masking operations to convert the input to its decimal representation. Include error handling to handle invalid inputs such as negative numbers, leading zeros, and invalid binary representations.\n\nFor example, the program should accept a binary string and return the corresponding decimal integer."}, {"instruction": "Implement a Python program that takes a string representation of a number (e.g., `345`) and converts it to its binary equivalent. You should utilize bitwise operations and bit shifting to extract each character from the input string, determine its ASCII value, perform bit shifting to convert it into binary, and finally combine all the binary numbers to form a final binary string."}, {"instruction": "Create a Python program that takes in a non-negative integer and prints out its binary representation. Do not use any built-in functions for converting to binary.\n\nFor example, given `15`, the program should print `1111`."}, {"instruction": "Develop a Python program that takes a list of binary strings from user input and converts it into a decimal number. Binary strings can be any length, but the output should be a 32-bit decimal number. Use bitwise operations for the conversion."}, {"instruction": "Implement a Python program that converts a positive decimal integer to its binary representation, with leading zeros removed. The program should return the binary string, as well as the number of bits used to represent the integer. Use bitwise operations and bit shifting to achieve the result."}, {"instruction": "Implement a Python program that converts a decimal integer into a binary integer and removes the leading zeros.\n\nFor example, `112` should be converted to `1100100` and `10` should be converted to `10`."}, {"instruction": "Design a Python program that converts a binary integer to a string that represents its equivalent decimal value. The program should also remove the leading zeros from the string representation if possible. The program should work for integers in the range [0, 2**32).\n\nFor example, given the binary integer `10001000`, the program should return `'136'`."}, {"instruction": "Create a Python program that takes two numbers, `n` and `m`, and converts each of them into a binary representation. Then, the program should calculate the sum of these two binary numbers and print out their sum in decimal form. Ensure that the program handles negative input."}, {"instruction": "Implement a Python program to convert a given integer to a hexadecimal and decimal string representation. Use bitwise operations to convert the integer into a bitwise representation, and then convert the bitwise representation into a hexadecimal and a decimal string."}, {"instruction": "Implement a Python program that converts a decimal number into a binary string by employing bitwise operators.\n\nFor example, given the decimal number 20, the program should output the binary string '10100'. The program should handle negative numbers correctly by adding the sign bit (in the most significant bit) and the leading zeros."}, {"instruction": "Create a Python program that converts a binary representation into decimal form. The input will be a string of 1's and 0's, and the output will be an integer. Each 1 in the input represents a 1 in the output.\n\nFor example, given the input '1001' the output should be 9."}, {"instruction": "Create a Python program that converts a positive integer into its binary representation, removing the leading zeros. Employ bitwise operations to convert the integer into a string of ones and zeros."}, {"instruction": "Write a Python program that initializes three 32-bit integers, each with 10 random bits in the range 0-2. Compare the three numbers and print out the ones with the highest similarity. Use bitwise operations to count the number of 1's and 0's at every bit position, and compare the bit counts for each pair of numbers."}, {"instruction": "Implement a Python program that reads a decimal number and converts it into binary representation. The program should handle negative numbers and handle any scale for the binary representation. For instance, given a decimal number `5` and a binary scale of `3`, the program should output `00101`."}, {"instruction": "Write a Python program that takes a positive integer as input and returns the minimum number of operations to convert it to binary (base 2) that contains no leading zeros. The program should use bitwise operations for number conversion, bit shifting, and removal of leading zeros.\n\nFor example, the program would take 5 as input and return 4, since the binary form of 5 is 101 and the result of 101 >> 1 is 100, which has no leading zeros."}, {"instruction": "Implement a Python program that takes a 32-bit integer and converts it to its binary representation. The program should also convert and print the number of leading zeros in the binary representation."}, {"instruction": "Design a Python program that converts a decimal integer into a binary integer. The program must utilize bitwise operators to achieve the conversion. Ensure that the program handles negative numbers by converting them to positive values first, and then using the two's complement method to convert them back to negative integers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dictionary-based counting, filtering unique elements with list comprehension, summation of elements based on condition\n\n### Task\nWrite a Python function that takes a list from user input and prints the sum of counts for elements that occur more than once. Use a dictionary to count frequencies efficiently. Utilize a list comprehension to extract repeated elements based on the frequency counts, and sum their corresponding counts from the dictionary.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: special formula implementation, odd and even number handling, function composition\n\n### Task\nHere are two special formulas:\n\n$$\nf_1(a, b) = (a + 1) \\cdot (b + 1) - 1\n$$\n\n$$\nf_2(k) = \\begin{cases}\n    \\frac{(k + 1)^2}{2} + k + 1 & \\text{if } k \\text{ is odd} \\\\\n    \\frac{k^2}{2} + 2k + 1 & \\text{if } k \\text{ is even}\n\\end{cases}\n$$\n\nWrite a Python function to return $f_2(f_1(a, b))$ for given `a` and `b`.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: 2-pointer technique, conditional loop, string traversal and character comparison, count accumulation\n\n### Task\nWrite a Python function called `count_conditional_matches` that takes two strings, `str1` and `str2`, as well as a boolean flag `strict` as arguments. The function should count how many times characters from the end of `str1` match with characters from the beginning of `str2` when both strings are traversed simultaneously. The traversal should continue until a pair of characters do not match or until a specific condition influenced by the `strict` flag is met:\n\n- If `strict` is `True`, stop counting as soon as a non-matching pair is found.\n- If `strict` is `False`, skip the non-matching character in `str1` and continue matching with the next character.\n\nThe function should return the total count of matching characters. This implementation requires managing two pointers for the characters in `str1` and `str2`, respectively, and using a conditional loop to handle different stopping criteria based on the `strict` parameter.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: string manipulation and parsing, list comprehension, iterative list extension, handling text connectors\n\n### Task\nCreate a concise Python function that transforms a string into a list of individual items. The input string contains a list of items separated by commas and the last item preceded by an optional \"and\". For example:\n- Input: \"Eeeny, Meeny, Miney, Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"Eeeny, Meeny, Miney, and Moe\" --> Output: ['Eeeny', 'Meeny', 'Miney', 'Moe']\n- Input: \"San Francisco and San Mateo\" --> Output: ['San Francisco', 'San Mateo']\nRemove any leading or trailing whitespace.\n\n## Example 6\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: case-insensitive string matching, controlled case matching based on an option, list comprehension\n\n### Task\nConstruct a Python program that processes a list of strings provided by the user. The first element is a target string, the second is either 'CaseSensitive' or 'CaseInsensitive' to determine the matching approach, and the remaining elements are candidates for comparison. The program should output the number of times the target appears among the candidates according to the specified matching rule. The solution should include robust error handling to validate the matching rule and check that at least two strings are provided before proceeding.\n\nFor example, given the input `['apple', 'CaseInsensitive', 'Apple', 'banana', 'APPLE']`, the program should output `2` since 'Apple' and 'APPLE' match the target 'apple' in a case-insensitive manner.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: NumPy array initialization, iteration over break points, cluster segmentation, nested loops\n\n### Task\nImplement a Python program that initializes a NumPy array randomly (0--1) and segments it into clusters based on provided breakpoints. Each cluster is defined by consecutive elements between two breakpoints. The output should be a list of NumPy arrays representing these clusters.\n\nFor example, given a size 10 and breakpoints `[3, 6, 8]`, the program should first initialize a NumPy array of 10 random elements between 0 and 1 and then output three clusters: elements at indices `0-2`, `3-5`, `6-7`, and `8-9`. Ensure that the program handles cases where breakpoints are at the boundaries of the array or if there are no breakpoints, in which case the entire array should be a single cluster. Include error handling to manage invalid inputs such as negative array sizes or breakpoints that are out of range.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: List of inserted objects, index modification, exception handling\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_IList_Insert_mA598B2B5AAC3779A06B3CF9243AD90C7451D6667_gshared (List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 * __this, int32_t ___index0, RuntimeObject * ___item1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeObject * L_0 = ___item1;\n\t\t((  void (*) (RuntimeObject *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 9)->methodPointer)((RuntimeObject *)L_0, (int32_t)((int32_t)20), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 9));\n\t}\n\nIL_0008:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tint32_t L_1 = ___index0;\n\t\tRuntimeObject * L_2 = ___item1;\n\t\tNullCheck((List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *)__this);\n\t\t((  void (*) (List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *, int32_t, X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 31)->methodPointer)((List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *)__this, (int32_t)L_1, (X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB )((*(X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB *)((X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB *)UnBox(L_2, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 7))))), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 31));\n\t\tgoto IL_002a;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&InvalidCastException_tD99F9FF94C3859C78E90F68C2F77A1558BCAF463_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0017;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0017:\n\t{ // begin catch(System.InvalidCastException)\n\t\tRuntimeObject * L_3 = ___item1;\n\t\tRuntimeTypeHandle_tC33965ADA3E041E0C94AF05E5CB527B56482CEF9  L_4 = { reinterpret_cast<intptr_t> (IL2CPP_RGCTX_TYPE(method->klass->rgctx_data, 11)) };\n\t\tIL2CPP_RUNTIME_CLASS_INIT(((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&Type_t_il2cpp_TypeInfo_var)));\n\t\tType_t * L_5;\n\t\tL_5 = Type_GetTypeFromHandle_m8BB57524FF7F9DB1803BC561D2B3A4DBACEB385E((RuntimeTypeHandle_tC33965ADA3E041E0C94AF05E5CB527B56482CEF9 )L_4, /*hidden argument*/NULL);\n\t\tThrowHelper_ThrowWrongValueTypeArgumentException_m4E9CD2C01D79997EE1808CF75715BB6BB3738F0C((RuntimeObject *)L_3, (Type_t *)L_5, /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_002a;\n\t} // end catch (depth: 1)\n\nIL_002a:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "List_1_System_Collections_ICollection_CopyTo_m979A262A55A01E0E4355C141CE7F5A3EA37C916C_gshared"}, "id": 367, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_IList_Insert_mA598B2B5AAC3779A06B3CF9243AD90C7451D6667_gshared (List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 * __this, int32_t ___index0, RuntimeObject * ___item1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeObject * L_0 = ___item1;\n\t\t((  void (*) (RuntimeObject *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 9)->methodPointer)((RuntimeObject *)L_0, (int32_t)((int32_t)20), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 9));\n\t}\n\nIL_0008:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tint32_t L_1 = ___index0;\n\t\tRuntimeObject * L_2 = ___item1;\n\t\tNullCheck((List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *)__this);\n\t\t((  void (*) (List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *, int32_t, X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 31)->methodPointer)((List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *)__this, (int32_t)L_1, (X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB )((*(X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB *)((X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB *)UnBox(L_2, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 7))))), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 31));\n\t\tgoto IL_002a;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&InvalidCastException_tD99F9FF94C3859C78E90F68C2F77A1558BCAF463_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0017;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0017:\n\t{ // begin catch(System.InvalidCastException)\n\t\tRuntimeObject * L_3 = ___item1;\n\t\tRuntimeTypeHandle_tC33965ADA3E041E0C94AF05E5CB527B56482CEF9  L_4 = { reinterpret_cast<intptr_t> (IL2CPP_RGCTX_TYPE(method->klass->rgctx_data, 11)) };\n\t\tIL2CPP_RUNTIME_CLASS_INIT(((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&Type_t_il2cpp_TypeInfo_var)));\n\t\tType_t * L_5;\n\t\tL_5 = Type_GetTypeFromHandle_m8BB57524FF7F9DB1803BC561D2B3A4DBACEB385E((RuntimeTypeHandle_tC33965ADA3E041E0C94AF05E5CB527B56482CEF9 )L_4, /*hidden argument*/NULL);\n\t\tThrowHelper_ThrowWrongValueTypeArgumentException_m4E9CD2C01D79997EE1808CF75715BB6BB3738F0C((RuntimeObject *)L_3, (Type_t *)L_5, /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_002a;\n\t} // end catch (depth: 1)\n\nIL_002a:\n\t{\n\t\treturn;\n\t}\n}", "__index_level_0__": 97, "concepts": ["List of inserted objects", "index modification", "exception handling"], "parsing_result": [{"instruction": "Create a Python function that takes in a list of integers and a target value. The function should return a list of the two indices of the two integers that add up to the target value, if such a pair exists. If no such pair exists, the function should return `None`. The function should handle invalid input gracefully, such as:\n- Invalid input types (e.g., non-integer values)\n- Negative or zero target values\n- Empty input lists\n- Non-unique pairs of indices\n\nFor example, given the input `list([1, 2, 3, 4])` and the target value `5`, the function should return `[1, 2]`, since `1 + 4 = 5`."}, {"instruction": "Write a Python function that takes a list of objects as input and returns a list of objects that is sorted by the object's `key` value. The input list can contain duplicates and the output list should contain the same number of objects as the input. The function should ensure that the input list is not modified during the sorting process.\n\nFor example, given the input `[1, 2, 3, 1, 2, 3, 1, 2, 3]` and the key function `lambda x: x % 2`, the output should be `[1, 1, 1, 2, 2, 2, 3, 3, 3]`."}, {"instruction": "Write a Python function that reverses a list of numbers while maintaining the order of occurrences of each element. For example, given a list `l = [3, 4, 1, 2, 4, 5]`, the function should return `[5, 4, 2, 1, 4, 3]` without modifying the original list.\n\nTo solve this problem, your function should check the type of each element in the list and add an instance of the same type to the end of the list. You can use a `try`/`except` block to handle cases where the types do not match. If the list contains any non-numeric type, your function should throw an appropriate error message."}, {"instruction": "Write a Python function to insert a new element into a sorted Lis of Integers. The function should return the sorted list of integers. For example, the function should return `[-1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8]` for the input of `[2, 3, 5, 6, 7, 8]`, and `[1]`, and `[-1]` for `[-1]`. If the new element is already present, no new elements should be added."}, {"instruction": "Write a Python function called `input_with_prompt` that takes a prompt string as an argument and asks the user to provide input until a valid input is provided. This function should return the input. \n- Use a `try`/`except` block to handle exceptions such as `KeyboardInterrupt` and `EOFError`.\n- The function should handle empty input as valid input.\n- Ensure that the function handles valid inputs of different types (e.g., integer, float, string, lists, etc.) without raising exceptions.\n- Include error handling to handle invalid inputs and unexpected errors.\n- The function should handle user input appropriately and return the string representation of the input as a result."}, {"instruction": "Suppose you are given the list of objects in Python:\n\n```\nobjects = [1, 2, 3, 4, 5]\n```\n\nWrite a function `list_insert` that takes a list of objects and an index as arguments, and returns a new list with the original list elements inserted at the given index. If the index is out of bounds, the function should raise an exception.\n\nFor example, `list_insert(objects, 2)` should return `[1, 2, 1, 2, 3, 4, 5]`."}, {"instruction": "Write a Python function that takes a list of strings and a character as arguments. The function should return a list of strings with all occurrences of the specified character replaced with a single space character (\" \"). Don't use any built-in list methods for this task."}, {"instruction": "Write a Python function that takes a list as input and returns a new list with the same items, but with a new element inserted at the beginning and end of the original list. The new element should be the string \"inserted\". The function should handle errors in the case where the list contains non-string objects and should raise a TypeError exception."}, {"instruction": "Write a Python function that takes a list of objects and returns a new list containing all the objects in the original list, except for the duplicates. The function should also report a list of objects that are duplicates."}, {"instruction": "Given a list of objects, write a Python function that takes an index and an object as arguments and inserts the object at the specified index. The function should handle the situation where the index is out of range of the list or if the provided index is greater than the number of elements in the list."}, {"instruction": "Write a Python function `insert_objects` that takes as input a list of objects and two indices: an index `i` and a value `v`. The function should insert the value `v` into the list at the given index `i` and return the resulting list. Ensure that the function handles incorrect inputs appropriately, such as negative indices or invalid insertion indices (i.e., greater than or equal to the length of the list)."}, {"instruction": "Write a Python function that takes an integer `n` as input, and returns a list of the first `n` positive integers. If `n` is negative, raise a ValueError. If `n` is a float, round up the result. After each iteration, append the current value to a list."}, {"instruction": "Create a Python function called `insert_between` that takes a list of objects and two other objects, `value` and `delimiter`, as arguments, and inserts `value` between each pair of objects in the list, except for the first object in the list. The function should return a list of objects with `value` inserted between each pair of objects, except for the first object in the list.\n\nThe function should handle the following exceptions:\n- Exception 1: If the list `lst` is empty or if `lst` contains only one object, raise a `ValueError` exception.\n- Exception 2: If the `value` and `delimiter` objects are the same, raise a `ValueError` exception."}, {"instruction": "Create a Python function `insert_next` that takes two arguments: a list `lst` and an object `obj`. The function should insert `obj` into the list at the index `i` where `i` is the index immediately following the last index with a value of the same type.\n\nIf the value of `obj` is not the same type as any of the existing elements in `lst`, the function should insert it into the list at the index 0.\n\nIf `obj` is already present in the list, the function should do nothing.\n\nIf there are no elements in `lst` with the same type as `obj`, the function should raise an IndexError exception."}, {"instruction": "The `insert_element` function takes a list `ls` and two values `val` and `idx` as arguments. `idx` specifies the location at which `val` should be inserted into the list. If `idx` is greater than or equal to the length of the list, then `val` is appended to the list. Otherwise, `val` is inserted at position `idx` in the list.\n\nThe function returns a new list with the desired modifications. If the list `ls` is an empty list, an empty list is returned. If `idx` is not a positive integer, or less than 0, or greater than or equal to the length of the list, an exception is raised and the original list is returned unchanged."}, {"instruction": "Write a Python function that takes a list of objects and a target object as arguments. The function should insert the target object into the list at the index where the target object is the last object listed. If the target object is not present in the list, the list should be extended with the target object at the end. In either case, the function should return the new list."}, {"instruction": "Implement a Python function `merge_sorted_lists` that takes two sorted lists as arguments and merges them into a third sorted list. The function should return the merged list. The implementation should include robust error handling to detect and handle cases where either input list is empty.\n\nFor example, given the input `[[1, 3, 5], [2, 4, 6]]`, the function should return `[1, 2, 3, 4, 5, 6]`."}, {"instruction": "Create a Python function called `rearrange_list` that takes a list of objects of type `int` and a number `n` as arguments. The function should insert an additional `n` objects of type `int` into the list at a specific index `i` such that `i` is between `0` and the length of the list, inclusive. If `i` is out of bounds, the function should return the original list unchanged. Note that the list may be empty and `i` may be `0` or negative. Ensure that the function handles exceptions and does not modify the original list in any way."}, {"instruction": "Given a list of unsorted integers, create a function that returns a list of sorted integers without using any built-in sorting algorithms."}, {"instruction": "Implement a Python function that takes a list of objects as input and a target object. The function should insert the target object into the list at the first index where it is not equal to any of the existing elements in the list. If the target object is already in the list, ignore the request. The function should return the updated list of objects after inserting the target object. Implement a robust error handling mechanism to handle invalid input and edge cases."}, {"instruction": "Write a Python function to check if a list of numbers contains a consecutive sequence of values. The function should return the starting and ending indices of the sequence. Ensure that the solution handles invalid inputs gracefully, such as when the list contains fewer than three elements or is empty."}, {"instruction": "Create a Python function that takes an integer `n` and a list of integers `input_list`, and inserts every element from `input_list` into the middle of a list of `n` consecutive ones. The function should return the resulting list, or throw a `ValueError` when `n` is either negative or not even, or when the input list is empty or `None`.\n\nFor example, given an input of `[1, 4, 5, 6, 7]` and `n = 3`, the function should return `[1, 1, 1, 4, 5, 6, 7, 1, 1, 1]`.\n\nAdditionally, if the input list is already in the list of consecutive ones, then the function should return the original list unchanged."}, {"instruction": "Write a Python function `insert_object` that takes a list and an object as arguments and inserts the object into the list at the first available position. The function should return the modified list and raise an exception if the object cannot be inserted into the list.\n\nUse exception handling to handle the case where the object cannot be inserted into the list."}, {"instruction": "Write a Python function that accepts a list and an object as inputs. The function should add the object to the list at the index where the list was created. If the object is not found in the list, the function should raise an exception."}, {"instruction": "Implement a Python function that takes two arguments, a list and a new object to be inserted. The function should return a new list that contains the original list, but with an extra element inserted at the appropriate index. If an invalid index value is provided, the function should raise an exception that explains the error. Additionally, the function should handle empty lists and list insertion at the beginning and end of the list."}, {"instruction": "Design a Python function that takes two lists of objects of the same type and returns a new list that contains the objects from both lists, with the objects in the first list inserted in the middle of the second list at even indices.\n\nFor example, the following input:\n- list1: `[1, 2, 3, 4, 5, 6]`\n- list2: `['a', 'b', 'c', 'd', 'e', 'f']`\n\nshould return the following output:\n- `[1, 'a', 'b', 2, 'c', 'd', 3, 'e', 'f', 4, 5, 6]`\n\nWhen the input lists do not have the same number of elements, the output should have the missing elements appended to the end of the list. For example, the following input:\n- list1: `[1, 2, 3]`\n- list2: `['a', 'b', 'c', 'd', 'e', 'f']`\n\nshould return the following output:\n- `[1, 'a', 'b', 2, 'c', 'd', 3, 'e', 'f']`\n\nInclude robust error handling to ensure that the input lists contain the same number of elements."}, {"instruction": "Write a Python function called `has_sublist(sublist, lst)` that takes two lists as input, `sublist` and `lst`. The function should return `True` if `sublist` is a sublist of `lst` in any order and `False` otherwise. The function should handle edge cases and handle `sublist` being empty or None and `lst` being empty."}, {"instruction": "Write a Python function called `insert_objects_at_index` that accepts a list `mylist` and a number of objects `obj` and an index `idx`. The function should insert the objects into the list at the specified index, shifting the existing elements towards the end of the list. If the index is greater than the length of the list, the function should append the objects to the end of the list. If the index is less than 0, the function should raise an exception.\n\nFor example, given the following inputs:\n\n- `mylist = [1, 2, 3, 4]`, `obj = [\"a\", \"b\", \"c\"]`, `idx = 2`\n- `mylist = [1, 2, 3, 4]`, `obj = [\"a\", \"b\", \"c\"]`, `idx = 6`\n\nthe function should return `mylist = [1, 2, \"a\", \"b\", \"c\", 3, 4]`."}, {"instruction": "Write an efficient Python function that takes a list of integers as input and returns a new list where each element is multiplied by 3. This function should not modify the original list. The function should handle unexpected inputs gracefully by throwing exceptions."}, {"instruction": "Write a Python function to merge two sorted lists in a single sorted list. The function should handle situations where one of the lists is empty or both lists are empty."}, {"instruction": "Write a Python function that takes a list of objects and a replacement object as arguments and returns a new list with the replacement object inserted into the original list at the same position for each object in the original list. If the original list is empty, return an empty list.\n\nFor example, given the input `['apple', 'banana', 'orange']` and `['grape']`, the function should return `['grape', 'apple', 'grape', 'banana', 'grape', 'orange']`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: top-k accuracy computation, tensor operations in PyTorch, batch processing, default arguments\n\n### Task\nCreate a Python function `calculate_top_k_accuracy` using PyTorch that calculates the top-k accuracy from a batch of predictions and actual labels. It should accept two tensors, `predictions` and `targets`, and an integer `k` (default 3). The function should return the average top-k accuracy as a float, determining if the true label is within the top `k` predictions for each input.\n\n## Example 2\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: data partitioning and slicing, learning from input-output examples\n\n### Task\nConstruct a Python function `create_folds(data, count)` to create a list of folds from the given data, where each fold is a subsequence of the original data. The length of each fold should be approximately equal with at most a difference of 1. The function should satisfy the following assertions:\n\n```python\nassert create_folds(range(12), 2) == [range(0, 6), range(6, 12)]\nassert create_folds(range(8), 2) == [range(0, 4), range(4, 8)]\nassert create_folds(range(25), -5) == []\nassert create_folds(range(6), 2) == [range(0, 3), range(3, 6)]\n```\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iteration with a while loop, index-based data access, conditional branching, nested loops\n\n### Task\nCreate a Python function that identifies all pairs of elements within a list of integers where the second element of the pair is at least greater than the first by `growth_ratio` and the indices of the elements are within a specified `maximum_distance` from each other.\n\n## Example 8\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: object-oriented programming, string formatting and manipulation, encapsulation, input validation\n\n### Task\nDevelop a Python class `StringEnhancer` that offers advanced tools for managing a string. The class should maintain an internal state that is initially an empty string. The class should support extending the string with additional prefix or suffix, converting the entire string to lowercase or uppercase, and altering specific characters within the string. All the operations are communicated through a central method: `apply_operation(self, operation: str)`.\n\nThe method `apply_operation` interprets the operations specified in the form of `\"[opname]:[arg]\"`. Here are the detailed formats for each operation, explained through examples:\n- Prefix addition: `apply_operation(\"prefix:Hello, \")`\n- Suffix addition: `apply_operation(\"suffix: World!\")`\n- Lowercase conversion: `apply_operation(\"lower:\")`\n- Uppercase conversion: `apply_operation(\"upper:\")`\n- Character replacement: `apply_operation(\"replace:a->e\")`\n\nThe class should handle erroneous inputs gracefully, such as incorrect operation formats or arguments. Additionally, implement the `__str__` method to return a formatted string showing the current value of the string and a list of operations that have been applied to it.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: Windows data type conversion, array iteration, string concatenation, formatted string output, error handling\n\n### Task", "fingerprint": null, "content": {"code": "HRESULT VectorToString(DBVECTOR* pVector, DBTYPE wType, WCHAR* pwszBuffer, DBLENGTH ulMaxSize)\n{\n    ASSERT(pVector);\n    ASSERT(pwszBuffer);\n    HRESULT hr = S_OK;\n\n    //No-op\n    if(!ulMaxSize)\n        return S_OK;\n\n    VARIANT Variant;\n    VARIANT* pVariant = NULL;\n    WCHAR* pwsz = pwszBuffer;\n    WCHAR* pwszEnd = pwsz + ulMaxSize;\n    pwsz[0] = L'\\0';\n\n    //Make sure we are dealing with the base type...\n    wType &= ~DBTYPE_VECTOR;\n\n    //Loop over the vector...\n    for(ULONG iEle=0; iEle<pVector->size; iEle++)\n    {\n        //Initialize Variant\n        pVariant = &Variant;\n        pVariant->vt = VT_EMPTY;\n\n        //NOTE: The pVariant is really just a pointer to the data.  We don't free the data\n        //since the vector data doesn't belong to us, we are just convering the given data to\n        //a string.  The simplest way to do this is to dump into a variant and let our helper\n        //function VariantToString deal with this...\n\n        //Obtain the data from the vector...\n        switch(wType)\n        {\n        case VT_EMPTY:\n        case VT_NULL:\n            V_VT(pVariant) = wType;\n            break;\n\n        case VT_I2:\n        case VT_I4:\n        case VT_R4:\n        case VT_R8:\n        case VT_CY:\n        case VT_DATE:\n        case VT_BSTR:\n        case VT_DISPATCH:\n        case VT_ERROR:\n        case VT_BOOL:\n        case VT_UNKNOWN:\n        case VT_I1:\n        case VT_UI1:\n        case VT_UI2:\n        case VT_UI4:\n        case VT_I8:\n        case VT_UI8:\n        case VT_INT:\n        case VT_UINT:\n        {\n            LONG lTypeSize = GetDBTypeSize(wType);\n\n            V_VT(pVariant) = wType;\n            memcpy(&V_I4(pVariant), (BYTE*)pVector->ptr + (lTypeSize*iEle), (size_t)lTypeSize);\n            break;\n        }\n\n        case VT_DECIMAL:\n            //DECIMAL is not part of the VARIANT union\n            V_VT(pVariant)\t\t= wType;\n            V_DECIMAL(pVariant) = *(DECIMAL*)((BYTE*)pVector->ptr + (sizeof(DECIMAL)*iEle));\n            break;\n\n        case VT_VARIANT:\n            //just place directly into our variant.\n            pVariant = (VARIANT*)((BYTE*)pVector->ptr + (sizeof(VARIANT)*iEle));\n            break;\n\n\n        default:\n            //Unable to handle this type...\n            TESTC_(hr = E_FAIL,S_OK);\n        }\n\n        //Convert VARIANT To String\n        TESTC_(hr = VariantToString(pVariant, pwsz, (ULONG)(pwszEnd - pwsz)),S_OK);\n        pwsz += wcslen(pwsz);\n\n        //Vector Seperator\n        if(iEle<pVector->size-1 && (pwsz < pwszEnd))\n        {\n            *pwsz = L',';\n            pwsz++;\n        }\n    }\n\nCLEANUP:\n    return hr;\n}", "docstring": "//Everything complete successfully...", "function_name": "StringToSafeArray"}, "id": 369, "seed": "HRESULT VectorToString(DBVECTOR* pVector, DBTYPE wType, WCHAR* pwszBuffer, DBLENGTH ulMaxSize)\n{\n    ASSERT(pVector);\n    ASSERT(pwszBuffer);\n    HRESULT hr = S_OK;\n\n    //No-op\n    if(!ulMaxSize)\n        return S_OK;\n\n    VARIANT Variant;\n    VARIANT* pVariant = NULL;\n    WCHAR* pwsz = pwszBuffer;\n    WCHAR* pwszEnd = pwsz + ulMaxSize;\n    pwsz[0] = L'\\0';\n\n    //Make sure we are dealing with the base type...\n    wType &= ~DBTYPE_VECTOR;\n\n    //Loop over the vector...\n    for(ULONG iEle=0; iEle<pVector->size; iEle++)\n    {\n        //Initialize Variant\n        pVariant = &Variant;\n        pVariant->vt = VT_EMPTY;\n\n        //NOTE: The pVariant is really just a pointer to the data.  We don't free the data\n        //since the vector data doesn't belong to us, we are just convering the given data to\n        //a string.  The simplest way to do this is to dump into a variant and let our helper\n        //function VariantToString deal with this...\n\n        //Obtain the data from the vector...\n        switch(wType)\n        {\n        case VT_EMPTY:\n        case VT_NULL:\n            V_VT(pVariant) = wType;\n            break;\n\n        case VT_I2:\n        case VT_I4:\n        case VT_R4:\n        case VT_R8:\n        case VT_CY:\n        case VT_DATE:\n        case VT_BSTR:\n        case VT_DISPATCH:\n        case VT_ERROR:\n        case VT_BOOL:\n        case VT_UNKNOWN:\n        case VT_I1:\n        case VT_UI1:\n        case VT_UI2:\n        case VT_UI4:\n        case VT_I8:\n        case VT_UI8:\n        case VT_INT:\n        case VT_UINT:\n        {\n            LONG lTypeSize = GetDBTypeSize(wType);\n\n            V_VT(pVariant) = wType;\n            memcpy(&V_I4(pVariant), (BYTE*)pVector->ptr + (lTypeSize*iEle), (size_t)lTypeSize);\n            break;\n        }\n\n        case VT_DECIMAL:\n            //DECIMAL is not part of the VARIANT union\n            V_VT(pVariant)\t\t= wType;\n            V_DECIMAL(pVariant) = *(DECIMAL*)((BYTE*)pVector->ptr + (sizeof(DECIMAL)*iEle));\n            break;\n\n        case VT_VARIANT:\n            //just place directly into our variant.\n            pVariant = (VARIANT*)((BYTE*)pVector->ptr + (sizeof(VARIANT)*iEle));\n            break;\n\n\n        default:\n            //Unable to handle this type...\n            TESTC_(hr = E_FAIL,S_OK);\n        }\n\n        //Convert VARIANT To String\n        TESTC_(hr = VariantToString(pVariant, pwsz, (ULONG)(pwszEnd - pwsz)),S_OK);\n        pwsz += wcslen(pwsz);\n\n        //Vector Seperator\n        if(iEle<pVector->size-1 && (pwsz < pwszEnd))\n        {\n            *pwsz = L',';\n            pwsz++;\n        }\n    }\n\nCLEANUP:\n    return hr;\n}", "__index_level_0__": 98, "concepts": ["Windows data type conversion", "array iteration", "string concatenation", "formatted string output", "error handling"], "parsing_result": [{"instruction": "Create a Python program to read the list of files in a given directory, sort them, and output the sorted file names to a text file. The program should search recursively for files of a given extension in the specified directory tree. If the extension is not specified, all files with extensions are considered.\n\nThe program should handle errors gracefully by printing the names of any files that cannot be read or accessed in the directory tree. The program should also report any files that are not valid file names, such as special characters or forbidden characters."}, {"instruction": "Create a Python program that synchronizes a local copy of files that are in a remote directory with the latest copies from the centralized server. The program should perform the following four steps:\n\n1. Retrieve the list of files from the remote directory.\n2. Retrieve the latest copies of the files from the centralized server.\n3. Synchronize the local copy of the files with the latest copies from the centralized server.\n4. Report the status of the synchronization.\n\nIf required, use the `os` module to handle operations like file listing and file copying. Use the `pathlib` module to handle file paths and directory paths.\n\n### Notes\n- The remote directory structure contains a set of files organized in a hierarchical directory structure.\n- The local copy of the files should be stored in a directory on the local machine.\n- The synchronization process should be implemented to support all files in the remote directory.\n- The synchronization process should skip files that are already up-to-date with the latest copies on the centralized server.\n- The program should print the status of the synchronization to the console."}, {"instruction": "Develop a Python program that reads a CSV file to extract data from a database. The program should output a CSV file containing the names and addresses of the customers who reside in a particular state. For example, the program should be able to output a file called `customers.csv` containing the following content:\n\n```\n,123 Fake Street,New York,NY\n,456 Main Street,Los Angeles,CA\n,789 Fifth Avenue,San Francisco,CA\n```\n\nThe program should also handle erroneous inputs gracefully, such as incorrect file paths or missing database data."}, {"instruction": "Implement a Python program that prompts the user to enter two positive integers, `n` and `m`, and outputs the first `m` non-negative integers that satisfy the following formula:\n\n`n[i] = (n[i - 1] + i) % m`\n\nwhere `n[0]` is the first element of the sequence with a value of 0.\n\nThe program should handle erroneous input gracefully, such as invalid integers or non-positive integers. Additionally, ensure that the program outputs the correct answer for any valid input."}, {"instruction": "Write a Python program to visualize the number of occurrences of each unique character in a given string. The program should output a formatted string showing the character and its count."}, {"instruction": "Create a Python program that accepts a list of integers from the user as input, and then prints out the following statistics in the form of formatted string output:\n- The minimum value in the list\n- The maximum value in the list\n- The mean value of the list\n- The median value of the list"}, {"instruction": "Create a Python program that converts a string of numbers separated by commas to a list of integers. The program should be able to handle negative numbers, decimal numbers, and multiple delimiters, such as `.` and `,`.\n\n```python\nassert str_to_int_list(\"2,4,8,10\") == [2, 4, 8, 10]\nassert str_to_int_list(\"2.4,4.8,8.10\") == [2, 4, 8, 10]\nassert str_to_int_list(\"-2,4,8,10\") == [-2, 4, 8, 10]\nassert str_to_int_list(\"-2.4,4.8,8.10\") == [-2, 4, 8, 10]\nassert str_to_int_list(\"2,4,8.10\") == [2, 4, 8, 10]\nassert str_to_int_list(\"2,4,8,10,\") == [2, 4, 8, 10]\n```"}, {"instruction": "Develop a Python program that reads a list of integer values from a file, converts them to binary strings, and outputs them as a formatted text table to the console. The file should be located in a specific path and the program should support multiple files for input."}, {"instruction": "Develop a Python program that converts a given date and time string in the format `YYYY-MM-DD HH:MM:SS` to a representation in the format `YYYY-MM-DD HH:MM:SS.sss`. The program should accept the date and time string as command-line arguments. The program should support the following behaviors:\n- If the date and time string is in the correct format, it should print the converted string to the console.\n- If the date and time string is not in the correct format, the program should print the string as-is to the console, indicating that the conversion failed.\n- If the input file cannot be found or read, the program should print an error message to the console and exit."}, {"instruction": "Create a Python program that reads a text file containing a list of numbers separated by newlines and converts it to a single-dimensional array of integers. The program should check for valid input and handle any errors gracefully. Additionally, the program should print the resulting array to the console in a formatted manner, with each number on a separate line."}, {"instruction": "Develop a Python program that reads the content of multiple text files and concatenates them into a single string. The program should employ the strategy pattern to process the files in parallel, with each worker thread reading a single file and concatenating its content into a shared string variable. Additionally, the program should ensure that all threads finish before the final result is written to a file.\n\nEach thread should read the file in the following order:\n- Open the file using the `open` function.\n- Read and decode the file using the `read` method.\n- Close the file using the `close` method.\n\nThe program should use the `with` statement to ensure proper file handling. Additionally, the program should utilize the `thread` module to spawn multiple threads to process the files in parallel."}, {"instruction": "Develop a command-line program to read and process a CSV file that contains students' personal information. The information includes student ID, first name, last name, and academic grades. The program should parse the input file and compute and print the following statistics:\n1. The total number of students.\n2. The student ID of the student with highest academic grade.\n3. The average academic grade of all the students.\n4. The number of students with the top 20% highest academic grades.\n5. The number of students who achieved all the academic grades.\n\nThe program should handle errors gracefully, such as invalid input file, incorrect data format, or errors during parsing. Additionally, implement an interactive mode that allows users to specify the path of the input file and the output path of the result file."}, {"instruction": "Create a Python program that evaluates the following expression, and prints the result, `4 * (2 + 3)`. The evaluation should use the standard Python operators (addition, subtraction, multiplication, division, and exponentiation), and the program should handle all possible inputs, including operators of different precedence, divide by zero, and any errors that may occur during evaluation."}, {"instruction": "Write a program to convert all binary numbers in a text file to decimal format. Save the file into a new text file with a `.dec` extension. The program should be able to handle cases where the text file doesn't contain any binary numbers, where some binary numbers are malformed, or where the text file has data other than binary numbers."}, {"instruction": "Create a Python program that reads a text file containing a list of words separated by newlines. The program should use the following functions to analyze the text file:\n- `to_lowercase(text: str) -> str`: Converts the given text to lowercase.\n- `to_uppercase(text: str) -> str`: Converts the given text to uppercase.\n- `to_camel_case(text: str) -> str`: Converts the given text to camel case.\n- `to_snake_case(text: str) -> str`: Converts the given text to snake case.\n\nThe program should execute all the functions on the text as specified in the `input.txt` file. Each function call should be formatted as a single line of the following form: `function:argument`. For example, the `to_lowercase` function can be invoked as follows:\n```\nto_lowercase:hello, world!\n```\nThe program should handle errors in the input file gracefully:\n- The program should skip invalid lines in the input file.\n- The program should terminate with an error message if the given function name is invalid.\n\nThe program should output the results of each function call to the `output.txt` file. Each line of the output file should contain the result of the corresponding function call."}, {"instruction": "A Python program to convert a Windows file size from bytes to human-readable units."}, {"instruction": "Create a Python program that reads a file with the extension `.csv` and creates a new file with the same name but the extension `.json`. The new file should contain the data from the original file, but in a JSON format. The program should handle errors gracefully, such as missing or invalid data files."}, {"instruction": "Create a Python program that converts a binary-encoded integer into a single-byte UTF-8 string. The program should be able to convert integers in the range 0-255, inclusive, into the corresponding UTF-8 string. It should also be able to handle erroneous inputs gracefully, such as non-numeric characters or integers that are not in the range 0-255."}, {"instruction": "Create a Python program that reads two 3x3 matrices of integers from the command line and multiplies them together, producing a 3x3 matrix as the result. If the multiplication is possible, then print the result matrix to the console. If the multiplication cannot be performed, print an error message to the console showing the cause of the error.\n\nIf the input matrices are not 3x3, print an error message to the console that displays the input matrix size. For example, the following input matrices are invalid:\n\n```\n1 2 3\n4 5 6\n7 8 9\n\n1 2 3\n4 5\n7 8 9\n```\n\nThe following input matrices are valid:\n\n```\n1 2 3\n4 5 6\n7 8 9\n\n1 2\n3 4\n5 6\n```"}, {"instruction": "Develop a Python program to convert a file containing student data in CSV format into a table in Microsoft Excel. The program should read the data from a CSV file and write it to an Excel spreadsheet."}, {"instruction": "Create a Python program that reads in three data files, `data_1.txt`, `data_2.txt`, and `data_3.txt`, containing numeric data. The program should combine these files into a single dataset of all three files, and output the mean, standard deviation, median, and interquartile range (IQR) for each data file.\n\nIf there are any errors while reading the files, the program should print out an error message and exit gracefully. The program should also handle the case where no files are provided as input.\n\nThe program should provide sufficient error checking to ensure the input data is valid and properly formatted. Additionally, it should take advantage of Python's powerful data structures and processing capabilities to efficiently combine and process the data."}, {"instruction": "Develop a Python program that reads a CSV file with nested JSON strings, converts it into a dictionary, and performs some processing on each record.\n\nThe program should read the nested JSON strings from the file and convert them into dictionaries, which are then stored in a list of dictionaries. The program should then iterate over each dictionary in the list and perform some processing on them, such as extracting the nested values or creating new key-value pairs. The program should handle invalid input gracefully and provide useful error messages."}, {"instruction": "Write a Python program that converts a binary string into its corresponding integer value. The binary string follows the format of `0b[digits]`, where `[digits]` is a sequence of 0's and 1's.\nThe program should handle two scenarios: converting a binary string into its integer value and printing an error message when the input is not a valid binary string."}, {"instruction": "Create a Python program that converts a text file to a CSV file, where the output file has 4 columns: Invoice, Customer, Amount, and Notes. The input file has 4 columns: Date, Customer, Amount, and Note. The program should handle invalid data in the input file, such as missing values and non-numeric values. It should also handle any error when reading the input file or writing to the output file. Additionally, the program should handle invalid input argument values and display a usage message."}, {"instruction": "Write a Python program to extract all email addresses from a string. The program should recognize both the following formats of email addresses:\n- ``\n- ``"}, {"instruction": "Create a Python program that converts the date in the format yyyy-mm-dd to the format dd-mmm-yy. The program should handle the following errors:\n- invalid date format\n- invalid date components (e.g., month is invalid)"}, {"instruction": "Develop a Python program that converts a collection of binary files into a single text file containing binary data. The program should accept the following arguments:\n\n- `-i/--input_path`: a string indicating the path to the directory containing the binary files\n- `-o/--output_path`: a string indicating the path to the directory to write the converted text file\n- `-f/--file_extension`: a string indicating the extension of the binary files\n- `-n/--num_digits`: an integer indicating the number of digits to pad the file names with\n\nThe program should iterate over all binary files in the input directory, read the binary data, and write the data into a single text file in the output directory.\n\nThe program should handle errors gracefully, such as files not found, I/O errors, and conversion errors. Additionally, the program should output helpful error messages for improper usage."}, {"instruction": "Write a program to convert a series of integers from a Windows-style string into a series of integers using Python. The input string is in the form of a comma-separated sequence of decimal numbers without spaces, for example: `\"1,2,3,4\"`\n\nThe program should handle the following exceptions:\n- `ValueError` when the input string contains non-numeric characters.\n- `ValueError` when the input string contains no integers.\n- `OverflowError` when the sum of the integers in the input string exceeds the range of signed 64-bit integers.\n\nThe program should also print the output as a comma-separated sequence of the same integers, with no spaces between them."}, {"instruction": "Write a Python program that converts a list of Python strings into a Windows-style string, where each element is separated by a backslash followed by a space and a double quote.\n\nThe program should handle any errors gracefully and display a message when a wrong data type is encountered."}, {"instruction": "Create a Python program that takes an input file containing a list of integers and performs the following tasks:\n- Sorts the integers in ascending order\n- Prints the numbers with a space between them\n- Prints the average of the numbers\n- Prints the number of integers that are divisible by 3\n\nThe program should gracefully handle inputs that are not numeric values, such as non-integer or decimal values, and report the details of the errors."}, {"instruction": "Create a Python program to convert a numeric value from one Windows data type to another, such as `int` to `str` or `int` to `float`. The program should handle data type conversion between `int`, `float`, `str`, and `bytes` types. It should also handle errors gracefully."}, {"instruction": "Develop a Python program that calculates and prints the volume of a set of cubes with different dimensions. The volume of a cube is calculated as the product of its dimensions. The cubes are represented as a list of strings, where each string represents a cube with its dimensions. The program should read the list of cubes from the input and calculate the volume of each cube, print the volumes in a formatted output, and exit successfully.\n\nIf the input is incorrect, the program should print an error message to the user and exit with an error code.\n\nFor example, the program should pass the following assertions:\n\n```python\nassert calculate_volume(['1x1x1', '2x2x2', '3x3x3']) == [1, 8, 27]\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: prime number memoization, n-th prime calculation, efficiency in prime checks\n\n### Task\nImplement a Python class with a method `find_nth_prime_memoized(n)` that returns the nth prime number, where n is a positive integer. Utilize memoization to store already found prime numbers in a list within the class to avoid recalculating primes for multiple method calls. Ensure the method efficiently updates and references this list to find new primes as needed. Additionally, enhance performance by avoiding unnecessary prime checks.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: regular expression for pattern matching, dictionary lookup for suffix mapping, error handling with exceptions\n\n### Task\nCreate a Python function that converts a string representation of a time duration into its total number of seconds.\nThe input string should follow a format that includes a numeric part followed by a time unit suffix without any spaces between.\nThe time unit can be seconds in the form of 's' or 'sec', minutes in the form of 'm' or 'min', hours in the form of 'h' or 'hour', and days in the form of 'd' or 'day' (units are in small case).\nIf the input format is invalid, the function should raise a ValueError.\n\nFor example, the function should pass the following assertions:\n\n```python\nassert parse_duration('15s') == 15\nassert parse_duration('2min') == 120\nassert parse_duration('1h') == 3600\nassert parse_duration('1d') == 86400\ntry:\n    parse_duration('30')\nexcept ValueError as e:\n    pass\n```\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: arithmetic operations for size conversion, rounding numbers, dynamic unit selection, string interpolation\n\n### Task\nCreate a Python function to format a file size in bytes into a human-readable string representation, using 'bytes', 'KB' (kilobytes), 'MB' (megabytes), 'GB' (gigabytes), or 'TB' (terabytes) units. The output should be rounded to one decimal place and follow the format: \"{X.Y}{Unit}\", where \"Unit\" is the appropriate size unit and \"X.Y\" is the rounded size. For example, `format_size(1024 * 512)` should return `'512.0KB'`, and `format_size(1024**2 - 1)` should return `'1024.0KB'`.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: list comprehension, unique string creation, precondition checking for type validation\n\n### Task\nDesign a Python function to encode a list of strings into a unique list with the same length, order, and meaning. The new list is formed by appending asterisks (*) to duplicate strings. For instance, given ['a', 'a', 'b', 'a', 'c'], the function should return ['a', 'a*', 'b', 'a**', 'c'], while for ['a', 'b', 'c'] it should return ['a', 'b', 'c'] without any changes. Write assertions to ensure the input is a list of strings.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: 5-bit chunk encoding with bitwise shifts, ASCII value manipulation, continuation bit signaling\n\n### Task\nCreate a Python function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operation for division, ceiling without division or float, input validation with assertions, non-negative integer checks\n\n### Task\nDevelop a Python function `ceil_divide_without_div` that computes the ceiling of `n / 2**b` without using division, floating-point operations, built-in functions like `math.ceil`, or converting it into computing the floor. Instead, use bit manipulation to achieve the result. You write assertions to ensure both `n` and `b` are non-negative integers.\n\n## Example 7\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterating over file lines, command execution from file input, new line character removal\n\n### Task\nDevelop a Python program that reads a text file containing one shell command per line and executes these commands sequentially. Each command should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the commands.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: decoding compressed data, binary tree traversal, byte array processing\n\n### Task\nWrite a Python function `huffman_decompress` that takes two arguments: `compressed_data`, a byte array of 0/1 sequence representing Huffman compressed data, and `huffman_tree`, a Huffman tree that stores the actual data (each leaf is associated with a character). The function should return the original uncompressed data as `bytes`. Define the `HuffmanNode` class yourself as a general tree structure with a `children` list.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iterator traversal, error handling with exceptions, error handling with try-except, error handling with try-except-finally, precondition checking for type validation, list comprehension\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR bool IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_gshared (IIteratorToIEnumeratorAdapter_1_t2558291098 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tbool L_0 = (bool)__this->get_hadCurrent_2();\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\treturn (bool)0;\n\t}\n\nIL_000a:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tbool L_1 = (bool)__this->get_initialized_1();\n\t\t\tif (L_1)\n\t\t\t{\n\t\t\t\tgoto IL_002c;\n\t\t\t}\n\t\t}\n\nIL_0012:\n\t\t{\n\t\t\tRuntimeObject* L_2 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tbool L_3 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::get_HasCurrent() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_2);\n\t\t\t__this->set_hadCurrent_2(L_3);\n\t\t\t__this->set_initialized_1((bool)1);\n\t\t\tgoto IL_003d;\n\t\t}\n\nIL_002c:\n\t\t{\n\t\t\tRuntimeObject* L_4 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_4);\n\t\t\tbool L_5 = InterfaceFuncInvoker0< bool >::Invoke(2 /* System.Boolean Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::MoveNext() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_4);\n\t\t\t__this->set_hadCurrent_2(L_5);\n\t\t}\n\nIL_003d:\n\t\t{\n\t\t\tbool L_6 = (bool)__this->get_hadCurrent_2();\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0056;\n\t\t\t}\n\t\t}\n\nIL_0045:\n\t\t{\n\t\t\tRuntimeObject* L_7 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_7);\n\t\t\tPlayableBinding_t354260709  L_8 = InterfaceFuncInvoker0< PlayableBinding_t354260709  >::Invoke(0 /* T Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_7);\n\t\t\t__this->set_current_3(L_8);\n\t\t}\n\nIL_0056:\n\t\t{\n\t\t\tgoto IL_0071;\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__exception_local = (Exception_t *)e.ex;\n\t\tif(il2cpp_codegen_class_is_assignable_from (Exception_t_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_0058;\n\t\tthrow e;\n\t}\n\nCATCH_0058:\n\t{ // begin catch(System.Exception)\n\t\t{\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(Marshal_t1757017490_il2cpp_TypeInfo_var);\n\t\t\tint32_t L_9 = Marshal_GetHRForException_m813614142(NULL /*static, unused*/, (Exception_t *)((Exception_t *)__exception_local), /*hidden argument*/NULL);\n\t\t\tif ((!(((uint32_t)L_9) == ((uint32_t)((int32_t)-2147483636)))))\n\t\t\t{\n\t\t\t\tgoto IL_006f;\n\t\t\t}\n\t\t}\n\nIL_0064:\n\t\t{\n\t\t\tInvalidOperationException_t56020091 * L_10 = (InvalidOperationException_t56020091 *)il2cpp_codegen_object_new(InvalidOperationException_t56020091_il2cpp_TypeInfo_var);\n\t\t\tInvalidOperationException__ctor_m237278729(L_10, (String_t*)_stringLiteral1621028992, /*hidden argument*/NULL);\n\t\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(L_10, NULL, IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_RuntimeMethod_var);\n\t\t}\n\nIL_006f:\n\t\t{\n\t\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(__exception_local, NULL, IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_RuntimeMethod_var);\n\t\t}\n\t} // end catch (depth: 1)\n\nIL_0071:\n\t{\n\t\tbool L_11 = (bool)__this->get_hadCurrent_2();\n\t\treturn L_11;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m506314125_gshared"}, "id": 372, "seed": "IL2CPP_METHOD_ATTR bool IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_gshared (IIteratorToIEnumeratorAdapter_1_t2558291098 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tbool L_0 = (bool)__this->get_hadCurrent_2();\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\treturn (bool)0;\n\t}\n\nIL_000a:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tbool L_1 = (bool)__this->get_initialized_1();\n\t\t\tif (L_1)\n\t\t\t{\n\t\t\t\tgoto IL_002c;\n\t\t\t}\n\t\t}\n\nIL_0012:\n\t\t{\n\t\t\tRuntimeObject* L_2 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tbool L_3 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::get_HasCurrent() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_2);\n\t\t\t__this->set_hadCurrent_2(L_3);\n\t\t\t__this->set_initialized_1((bool)1);\n\t\t\tgoto IL_003d;\n\t\t}\n\nIL_002c:\n\t\t{\n\t\t\tRuntimeObject* L_4 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_4);\n\t\t\tbool L_5 = InterfaceFuncInvoker0< bool >::Invoke(2 /* System.Boolean Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::MoveNext() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_4);\n\t\t\t__this->set_hadCurrent_2(L_5);\n\t\t}\n\nIL_003d:\n\t\t{\n\t\t\tbool L_6 = (bool)__this->get_hadCurrent_2();\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0056;\n\t\t\t}\n\t\t}\n\nIL_0045:\n\t\t{\n\t\t\tRuntimeObject* L_7 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_7);\n\t\t\tPlayableBinding_t354260709  L_8 = InterfaceFuncInvoker0< PlayableBinding_t354260709  >::Invoke(0 /* T Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_7);\n\t\t\t__this->set_current_3(L_8);\n\t\t}\n\nIL_0056:\n\t\t{\n\t\t\tgoto IL_0071;\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__exception_local = (Exception_t *)e.ex;\n\t\tif(il2cpp_codegen_class_is_assignable_from (Exception_t_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_0058;\n\t\tthrow e;\n\t}\n\nCATCH_0058:\n\t{ // begin catch(System.Exception)\n\t\t{\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(Marshal_t1757017490_il2cpp_TypeInfo_var);\n\t\t\tint32_t L_9 = Marshal_GetHRForException_m813614142(NULL /*static, unused*/, (Exception_t *)((Exception_t *)__exception_local), /*hidden argument*/NULL);\n\t\t\tif ((!(((uint32_t)L_9) == ((uint32_t)((int32_t)-2147483636)))))\n\t\t\t{\n\t\t\t\tgoto IL_006f;\n\t\t\t}\n\t\t}\n\nIL_0064:\n\t\t{\n\t\t\tInvalidOperationException_t56020091 * L_10 = (InvalidOperationException_t56020091 *)il2cpp_codegen_object_new(InvalidOperationException_t56020091_il2cpp_TypeInfo_var);\n\t\t\tInvalidOperationException__ctor_m237278729(L_10, (String_t*)_stringLiteral1621028992, /*hidden argument*/NULL);\n\t\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(L_10, NULL, IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_RuntimeMethod_var);\n\t\t}\n\nIL_006f:\n\t\t{\n\t\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(__exception_local, NULL, IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_RuntimeMethod_var);\n\t\t}\n\t} // end catch (depth: 1)\n\nIL_0071:\n\t{\n\t\tbool L_11 = (bool)__this->get_hadCurrent_2();\n\t\treturn L_11;\n\t}\n}", "__index_level_0__": 99, "concepts": ["iterator traversal", "error handling with exceptions", "error handling with try-except", "error handling with try-except-finally", "precondition checking for type validation", "list comprehension"], "parsing_result": [{"instruction": "Write a Python program that reads a text file containing one shell command per line, and executes those commands sequentially. The program should provide clear error handling and logging to manage exceptions that might occur during the execution of the commands. The program should also handle the case that some commands might be missing from the input file.\n\nIf the program is run with a valid file as input, it should print the result of each command to the console. If the program is run with an invalid file, it should print the exceptions that occurred during the execution of the commands and log the exception."}, {"instruction": "Write a Python program to read a text file and compute the unique words in the file. Print the number of words and the unique words separated by a newline. Use a try-except-finally block to handle any exceptions."}, {"instruction": "Write a Python program that reads three integers from the command line and raises a ValueError if the integers do not all satisfy the condition `1 <= x <= 100`. Otherwise, the program should add the integers and display the result."}, {"instruction": "Develop a Python program that reads a text file containing a list of integers, one integer per line. Convert these integers into a Python list, and print the total of all the integers. Write assertions to ensure all inputs are integers before reading them from the file."}, {"instruction": "Develop a Python program that reads a text file containing one student name per line. Each line represents a student in a classroom. The program should print the names of students that are present in the file, but not in the classroom."}, {"instruction": "Develop a Python program that checks the validity of a password given by the user. The program should prompt the user to enter a password and then verify the password's length. Write assertions to ensure the input is a string. If the password is too short, the program should raise a ValueError with a descriptive message."}, {"instruction": "Develop a Python program that reads integers from a file and prints the number the user enters. The program should terminate if the user enters 0. Write assertions to ensure that the user inputs a valid integer."}, {"instruction": "Develop a Python program that reads a text file containing positive integers separated by spaces. The program should find the number of distinct integers and print the average. If any line in the file is not a positive integer or there are no integers in the file, the program should print 0 and skip this line."}, {"instruction": "Design a Python program that reads a text file, extracts the valid email addresses from the file, and stores them in a list. The file contains a list of lines with one email address per line. It is possible that multiple emails can be in a single line, so in such cases, the program should return a list of all valid emails. Do not store duplicate emails in the list.\n\nWrite assertions to ensure the input is a list of strings."}, {"instruction": "Develop a Python program to read a sequence of numbers from a file and determine the average of the numbers with an error handling strategy. The program should use the command line arguments to specify the file to be read, and print the result.\n\nThe program should handle the following scenarios:\n- If the program is called without any arguments or with a file that does not exist, it should print an error message and exit.\n- If the program is called with a file that contains non-numeric values, it should print a more detailed error message with the list of invalid entries and exit.\n- If the program is called with a file that contains numeric values, it should calculate the average of all numbers and print the result.\n\nWrite assertions to test the program with a variety of inputs."}, {"instruction": "Develop a Python program that reads a text file containing one integer number per line. The program should print out the average value of all numbers in the file. You need to handle the case when the file is empty, for example, by using an appropriate `try-except-finally` pattern and provide clear error handling and logging to manage exceptions that might occur during the execution of the program."}, {"instruction": "Develop a Python program that reads a text file containing one integer per line. Each integer should be a positive integer in the range [1, 10000] and signifies the length of a Huffman tree that has been encoded into a compressed sequence of bits. After reading the integers, the program should reconstruct the Huffman tree and decode the compressed data into a new text file. Ensure that the program catches all assertions and exceptions that might occur during the execution."}, {"instruction": "Create a Python program that checks the validity of a given list of parentheses, where each element in the list is a string of parentheses, and each string is balanced. For example, for the following input:\n\n```python\n['()()()()()()()()()', '(((((((((())', '((()(((())))((()))()))(((()))))())(()()(())))))()()()()()(()())()()()()()()(()))]\n```\n\nThe output should be `[True, True, False]`."}, {"instruction": "Develop a Python program that implements a simple command-line calculator. The program should accept two integers and a binary operator from user input, and then perform the calculations utilizing the operator. For example, given `10 + 20`, the program should return `30`.\n\nWrite assertions to ensure the input is a valid integer and operator. Use `try-except` to catch exceptions that might occur during calculations."}, {"instruction": "Develop a Python program that asks for the number of students in a class, then prompts the user to enter each student's name and math score. The program should use a list of tuples to store each student's information. Once the user enters all the students' information, iterate through this list to compute the class average score. Ensure the input is an integer, and avoid running the program if the input is not an integer."}, {"instruction": "Develop a Python program that computes the sum of all even numbers from 1 to N, where N is a positive integer input. Provide clear error handling for all possible exceptions that might arise during the execution of the program."}, {"instruction": "Design a Python program to read a text file and print all the palindromes found in it. A palindrome is a word that is the same forwards and backwards. For instance, \"racecar\" and \"abba\" are palindromes. The program should handle Unicode characters properly."}, {"instruction": "Design a Python program that takes a file path as a CLI argument and returns the number of lines in that file. The program should handle any exceptions that might occur during the file reading process and report the error details to the user."}, {"instruction": "Develop a Python program that iterates over the lines of a text file and ensures that each line is a proper Python statement before executing it. Use try-except or try-except-finally to handle exceptions that might occur during the execution of each line."}, {"instruction": "Create a Python program to read a list of integers from a file and print out the largest integer in the list. Write assertions to ensure the file exists, is readable, and contains integers."}, {"instruction": "Design a Python program to reverse the given list of integers, such that the first element in the list becomes the last element, the second element in the list becomes the second-to-last element, and so on. The input should be a list of integers. The program should print the reversed list, or return it when no print statement is present. Also, define the precondition checks for the type of the input list."}, {"instruction": "Develop a Python program that reads an integer sequence from a file and computes the sum of the first `n` integers in the sequence, where `n` is a non-negative integer supplied by the user. Use the `sum` function from the Python standard library to compute the sum. Additionally, handle errors gracefully and log exceptions to a log file."}, {"instruction": "Develop a Python program that reads a text file containing one Python code snippet per line and executes these snippets. The code snippets should be sanitized by removing unnecessary newline characters before execution. Provide clear error handling and logging to manage exceptions that might occur during the execution of the code."}, {"instruction": "Develop a Python program that reads a text file containing products with a list of attributes and prints a list of products that match all the given attributes. For each product, the program should print the attributes of its properties in the order defined in the input file.\n\nFor example, given the following input file `products_input.txt`:\n\n```\nname: 'Apple', price: 1.23, color: yellow, brand: Apple\nname: 'Banana', price: 2.45, color: yellow, brand: Banana\nname: 'Orange', price: 5.67, color: orange, brand: Orange\n```\n\nand the following attributes `green_apple`:\n\n```\ncolor: green\nbrand: Apple\n```\n\nthe program should output the following:\n```\nname: 'Apple', price: 1.23, color: green, brand: Apple\n```\n\nConsider using the `csv` library to read the product attributes."}, {"instruction": "Develop a Python program that reads a text file containing one line of JSON data. The program should parse and parse the JSON data as a Python dictionary, and print the number of keys contained in the dictionary. If there is an error in parsing the JSON data, the program should display an error message."}, {"instruction": "Design a Python program that reads a list of integers from a text file and writes its squared values to another text file. Provide clear error handling and logging to manage exceptions that might occur during the handling of the input and output files. Write assertions to ensure the input is a list of integers."}, {"instruction": "Develop a Python program that reads a file and prints the contents in a specific format. The program should accept a filename as an argument on the command line and print its contents in the following format:\n\n```python\nLine 1: Header (1st line of file)\nLine 2: Header (2nd line of file)\nLine 3: Header (3rd line of file)\nLine 4: Content\nLine 5: Content\nLine 6: Content\n```\n\nEach line should be printed in the same line of the console. If there is no header, print only the content. Provide clear error handling and logging to manage exceptions that might occur during reading the file."}, {"instruction": "Write a Python program to copy the contents of the file \"nmap.txt\" into another file named \"nmap_copy.txt\" in the same directory. Each line in the \"nmap.txt\" file should be copied to the \"nmap_copy.txt\" file.\n\nWrite assertions to ensure the input and output files are valid files and that the input file is not empty.\n\nSolve the problem in two lines of code, one for the precondition check and the other for the main logic."}, {"instruction": "Develop a Python program that reads a text file containing one integer per line and computes the sum of those integers, ignoring any invalid data encountered in the file. For each line, the program should verify that the input data is a valid integer, using assertions. It should also handle exceptions that might occur when reading the file."}, {"instruction": "Design a Python program that takes two command-line arguments, a file path and a string, and prints the index of the first occurrence of the string within the file path. If the string is not found, the program should print a message \"Not found\" and exit with an exit code of 1. Employ assertions to ensure the input file path is a valid file path."}, {"instruction": "Develop a Python program that reads a sequence of non-negative integers from a text file and prints the numbers in reverse order of the input. If the input file does not exist or contains an invalid value, the program should raise an exception that is caught and handled by the error handler. The program should also write to the standard error stream the number of invalid values in the input."}, {"instruction": "Develop a Python program that reads a CSV file containing a list of names and their respective phone numbers. The file might have an invalid format, a non-existent file, or a non-existent column. Your program should take an optional argument specifying the column to be processed, and should ensure the input is a list of strings. If the column argument is not specified, the program should use the first column as default. If the column is invalid or the file is missing, your program should raise an appropriate error. In all cases, your program should handle the error and print a descriptive message to the console."}]}
