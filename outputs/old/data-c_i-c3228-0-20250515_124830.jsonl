{c"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: generic programming, C# List<T> class\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1__ctor_m2716C5BEDCDB58D5B0C144DA4837DAF99E86D871_gshared (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 * __this, RuntimeObject* ___collection0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var);\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tRuntimeObject* V_0 = NULL;\n\tint32_t V_1 = 0;\n\tRuntimeObject* V_2 = NULL;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tNullCheck((RuntimeObject *)__this);\n\t\tObject__ctor_m88880E0413421D13FD95325EDCE231707CE1F405((RuntimeObject *)__this, /*hidden argument*/NULL);\n\t\tRuntimeObject* L_0 = ___collection0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000f;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentNullException_m539081110B94B71D92C9761B273E617B23B4BBA5((int32_t)6, /*hidden argument*/NULL);\n\t}\n\nIL_000f:\n\t{\n\t\tRuntimeObject* L_1 = ___collection0;\n\t\tV_0 = (RuntimeObject*)((RuntimeObject*)IsInst((RuntimeObject*)L_1, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2)));\n\t\tRuntimeObject* L_2 = V_0;\n\t\tif (!L_2)\n\t\t{\n\t\t\tgoto IL_0050;\n\t\t}\n\t}\n\t{\n\t\tRuntimeObject* L_3 = V_0;\n\t\tNullCheck((RuntimeObject*)L_3);\n\t\tint32_t L_4;\n\t\tL_4 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* System.Int32 System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::get_Count() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_3);\n\t\tV_1 = (int32_t)L_4;\n\t\tint32_t L_5 = V_1;\n\t\tif (L_5)\n\t\t{\n\t\t\tgoto IL_002f;\n\t\t}\n\t}\n\t{\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_6 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_6);\n\t\treturn;\n\t}\n\nIL_002f:\n\t{\n\t\tint32_t L_7 = V_1;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_8 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)(AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)SZArrayNew(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 1), (uint32_t)L_7);\n\t\t__this->set__items_1(L_8);\n\t\tRuntimeObject* L_9 = V_0;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_10 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)__this->get__items_1();\n\t\tNullCheck((RuntimeObject*)L_9);\n\t\tInterfaceActionInvoker2< AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*, int32_t >::Invoke(5 /* System.Void System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::CopyTo(T[],System.Int32) */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_9, (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)L_10, (int32_t)0);\n\t\tint32_t L_11 = V_1;\n\t\t__this->set__size_2(L_11);\n\t\treturn;\n\t}\n\nIL_0050:\n\t{\n\t\t__this->set__size_2(0);\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_12 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_12);\n\t\tRuntimeObject* L_13 = ___collection0;\n\t\tNullCheck((RuntimeObject*)L_13);\n\t\tRuntimeObject* L_14;\n\t\tL_14 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<kcp2k.Kcp/AckItem>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 3), (RuntimeObject*)L_13);\n\t\tV_2 = (RuntimeObject*)L_14;\n\t}\n\nIL_0069:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_0077;\n\t\t}\n\nIL_006b:\n\t\t{\n\t\t\tRuntimeObject* L_15 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_15);\n\t\t\tAckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  L_16;\n\t\t\tL_16 = InterfaceFuncInvoker0< AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<kcp2k.Kcp/AckItem>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 4), (RuntimeObject*)L_15);\n\t\t\tNullCheck((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this);\n\t\t\t((  void (*) (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *, AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5)->methodPointer)((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this, (AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 )L_16, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5));\n\t\t}\n\nIL_0077:\n\t\t{\n\t\t\tRuntimeObject* L_17 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_17);\n\t\t\tbool L_18;\n\t\t\tL_18 = InterfaceFuncInvoker0< bool >::Invoke(0 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var, (RuntimeObject*)L_17);\n\t\t\tif (L_18)\n\t\t\t{\n\t\t\t\tgoto IL_006b;\n\t\t\t}\n\t\t}\n\nIL_007f:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x8B, FINALLY_0081);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_0081;\n\t}\n\nFINALLY_0081:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_19 = V_2;\n\t\t\tif (!L_19)\n\t\t\t{\n\t\t\t\tgoto IL_008a;\n\t\t\t}\n\t\t}\n\nIL_0084:\n\t\t{\n\t\t\tRuntimeObject* L_20 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_20);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var, (RuntimeObject*)L_20);\n\t\t}\n\nIL_008a:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(129)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(129)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x8B, IL_008b)\n\t}\n\nIL_008b:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "List_1_InsertRange_mDEF514565A34924F191DBC38F0E98BE48AD1AB6A_gshared"}, "id": 1, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1__ctor_m2716C5BEDCDB58D5B0C144DA4837DAF99E86D871_gshared (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 * __this, RuntimeObject* ___collection0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var);\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tRuntimeObject* V_0 = NULL;\n\tint32_t V_1 = 0;\n\tRuntimeObject* V_2 = NULL;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tNullCheck((RuntimeObject *)__this);\n\t\tObject__ctor_m88880E0413421D13FD95325EDCE231707CE1F405((RuntimeObject *)__this, /*hidden argument*/NULL);\n\t\tRuntimeObject* L_0 = ___collection0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000f;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentNullException_m539081110B94B71D92C9761B273E617B23B4BBA5((int32_t)6, /*hidden argument*/NULL);\n\t}\n\nIL_000f:\n\t{\n\t\tRuntimeObject* L_1 = ___collection0;\n\t\tV_0 = (RuntimeObject*)((RuntimeObject*)IsInst((RuntimeObject*)L_1, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2)));\n\t\tRuntimeObject* L_2 = V_0;\n\t\tif (!L_2)\n\t\t{\n\t\t\tgoto IL_0050;\n\t\t}\n\t}\n\t{\n\t\tRuntimeObject* L_3 = V_0;\n\t\tNullCheck((RuntimeObject*)L_3);\n\t\tint32_t L_4;\n\t\tL_4 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* System.Int32 System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::get_Count() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_3);\n\t\tV_1 = (int32_t)L_4;\n\t\tint32_t L_5 = V_1;\n\t\tif (L_5)\n\t\t{\n\t\t\tgoto IL_002f;\n\t\t}\n\t}\n\t{\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_6 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_6);\n\t\treturn;\n\t}\n\nIL_002f:\n\t{\n\t\tint32_t L_7 = V_1;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_8 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)(AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)SZArrayNew(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 1), (uint32_t)L_7);\n\t\t__this->set__items_1(L_8);\n\t\tRuntimeObject* L_9 = V_0;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_10 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)__this->get__items_1();\n\t\tNullCheck((RuntimeObject*)L_9);\n\t\tInterfaceActionInvoker2< AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*, int32_t >::Invoke(5 /* System.Void System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::CopyTo(T[],System.Int32) */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_9, (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)L_10, (int32_t)0);\n\t\tint32_t L_11 = V_1;\n\t\t__this->set__size_2(L_11);\n\t\treturn;\n\t}\n\nIL_0050:\n\t{\n\t\t__this->set__size_2(0);\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_12 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_12);\n\t\tRuntimeObject* L_13 = ___collection0;\n\t\tNullCheck((RuntimeObject*)L_13);\n\t\tRuntimeObject* L_14;\n\t\tL_14 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<kcp2k.Kcp/AckItem>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 3), (RuntimeObject*)L_13);\n\t\tV_2 = (RuntimeObject*)L_14;\n\t}\n\nIL_0069:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_0077;\n\t\t}\n\nIL_006b:\n\t\t{\n\t\t\tRuntimeObject* L_15 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_15);\n\t\t\tAckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  L_16;\n\t\t\tL_16 = InterfaceFuncInvoker0< AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<kcp2k.Kcp/AckItem>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 4), (RuntimeObject*)L_15);\n\t\t\tNullCheck((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this);\n\t\t\t((  void (*) (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *, AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5)->methodPointer)((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this, (AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 )L_16, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5));\n\t\t}\n\nIL_0077:\n\t\t{\n\t\t\tRuntimeObject* L_17 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_17);\n\t\t\tbool L_18;\n\t\t\tL_18 = InterfaceFuncInvoker0< bool >::Invoke(0 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var, (RuntimeObject*)L_17);\n\t\t\tif (L_18)\n\t\t\t{\n\t\t\t\tgoto IL_006b;\n\t\t\t}\n\t\t}\n\nIL_007f:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x8B, FINALLY_0081);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_0081;\n\t}\n\nFINALLY_0081:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_19 = V_2;\n\t\t\tif (!L_19)\n\t\t\t{\n\t\t\t\tgoto IL_008a;\n\t\t\t}\n\t\t}\n\nIL_0084:\n\t\t{\n\t\t\tRuntimeObject* L_20 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_20);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var, (RuntimeObject*)L_20);\n\t\t}\n\nIL_008a:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(129)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(129)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x8B, IL_008b)\n\t}\n\nIL_008b:\n\t{\n\t\treturn;\n\t}\n}", "concepts": ["generic programming", "C# List<T> class"], "parsing_result": [{"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a function `applyFilter` that filters out the elements in a list that don't match a given function."}, {"instruction": "Write a Python function that removes duplicates from a list.\n(Provided is a sample implementation of a Python `List` class that emulates the Python `list` class.)"}, {"instruction": "Write a Python function `reverse` that reverses a string."}, {"instruction": "Write a function `removeDuplicates` that returns a list without duplicates."}, {"instruction": "Create a Python function `remove_duplicates` which returns a list with duplicates removed."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `sumVector` that returns the sum of all elements in a vector of integers."}, {"instruction": "Create a Python function `sumGenerator` that returns a generator object that sums numbers indefinitely, until the sum exceeds a given target value."}, {"instruction": "Write a Python function `sumList` that returns the sum of all elements in a list."}, {"instruction": "Write a Python function `allUnique` that returns the number of unique elements in a given list."}, {"instruction": "Write a Python function that returns the smallest element in a list."}, {"instruction": "Create a Python function `remove_multiples` that removes all multiples of a specified integer from a vector of integers."}, {"instruction": "Write a Python function `remove_duplicates(list)` that returns a new list with all duplicates removed."}, {"instruction": "Write a Python function `sumVector` that returns the sum of all elements in a vector of integers."}, {"instruction": "Create a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a function `removeDuplicates` that removes duplicates from a Python list."}, {"instruction": "Write a function `removeDuplicates` that removes duplicate elements from a Python list."}, {"instruction": "Create a Python function `merge` that returns the sorted result of merging two lists."}, {"instruction": "Write a Python function `maxDifference` that returns the non-trivial max difference between two elements in a list."}, {"instruction": "Implement a Python function `remove_duplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci using generators."}, {"instruction": "Write a Python implementation of `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `sumList` that takes in a list of integers and returns their sum."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `count` that counts the number of times a given integer occurs in a sequence of integers."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Implement a Python function `removeDuplicates` that returns a list with duplicates removed.\n project.\n/README.md\n# CS304-RecursionExercises\nA collection of exercises to use recursion in Python and C++.\n\n## Contents\n- [Project Requirements](https://github.com/jbarton3/CS304-RecursionExercises/blob/main/ProjectRequirements.md)\n- [Example Code](https://github.com/jbarton3/CS304-RecursionExercises/tree/main/src)\n- [Examples](https://github.com/jbarton3/CS304-RecursionExercises/blob/main/Examples.md)\n\n## Usage\nClone this repository and refer to the README in each/ProjectRequirements.md\n# CS304 - Project Requirements\n## Project Description\nFor this project, you'll create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Project Requirements\n1. Design and implement a series of coding tasks that are original, distinct, diverse, and high-quality.\n2. Use recursion in at least one of your tasks.\n3. Each task should be written in a programming language of your choice.\n4. Each task must adhere to specified properties:\n\t- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n\t- language: the programming language to be used\n\t- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n\t- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n5. Design the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n6. Write a README file that describes your project, and describes the tasks you implemented."}, {"instruction": "Write a Python function `is_palindrome` that checks if a given string is a palindrome."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operations, integer representation\n\n### Task", "fingerprint": null, "content": {"code": "bool testUnpacker(){\r\n\tuint32 inst = 0xdeadface;\r\n\tsize_t unpackerSize = sizeof(Instruction::UNPACKER);\r\n\t//std::cout << \"sizeof(Instruction::UNPACKER) = \" << unpackerSize << endl;\r\n\tif(unpackerSize != sizeof(uint32)){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tInstruction::UNPACKER &inst2= reinterpret_cast<Instruction::UNPACKER &>(inst);\r\n\r\n\tif(inst2.i.op != inst2.j.op){\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}", "docstring": "//char *buffer = new char[length];\r", "function_name": "readFile"}, "id": 3, "seed": "bool testUnpacker(){\r\n\tuint32 inst = 0xdeadface;\r\n\tsize_t unpackerSize = sizeof(Instruction::UNPACKER);\r\n\t//std::cout << \"sizeof(Instruction::UNPACKER) = \" << unpackerSize << endl;\r\n\tif(unpackerSize != sizeof(uint32)){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tInstruction::UNPACKER &inst2= reinterpret_cast<Instruction::UNPACKER &>(inst);\r\n\r\n\tif(inst2.i.op != inst2.j.op){\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}", "concepts": ["bitwise operations", "integer representation"], "parsing_result": [{"instruction": "Write a Python function `factorial` that returns the factorial of a non-negative integer."}, {"instruction": "Write a Python function `countBits` that counts the number of bits in a non-negative integer."}, {"instruction": "Write a Python function `countBits` that counts the number of 1 bits in an integer."}, {"instruction": "Write a Python function `isPowerOfTwo` that returns true if a given integer is a power of two."}, {"instruction": "Write a Python function `check_balanced` that returns `True` if a given string has balanced parentheses, or `False` otherwise.\n/challenges/07_two_sum/README.md\n# Two Sum\n## Problem\nGiven an array of integers and a target integer, find the indices of two numbers such that they add up to the target.\n\nIf no such pair exists, return `-1`."}, {"instruction": "Write a Python function `isPrime` that returns true if an integer is prime."}, {"instruction": "Write a Python function `power` that computes base raised to an integer exponent."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Write a Python function `gcd` that takes two integers `a` and `b` as arguments and returns their greatest common divisor using the Euclidean algorithm."}, {"instruction": "Write a Python function `isPowerOf2` that returns true if a given integer is a power of two."}, {"instruction": "Write a Python function `isPowerOfThree` that returns `True` if an integer is a power of 3."}, {"instruction": "Write a Python function `convertToBinary` that converts an integer to its binary representation."}, {"instruction": "Write a Python function `even` that returns a boolean indicating whether an integer is even."}, {"instruction": "Write a Python function `bitwise_reverse` that reverses the bits of an integer."}, {"instruction": "Create a Python function `toBin` that converts a number to its binary representation."}, {"instruction": "Write a Python function `binary` that converts an integer to its binary representation."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `countBits` that counts the number of bits in an integer."}, {"instruction": "Write a Python function `power` that computes base raised to an integer exponent."}, {"instruction": "Write a Python function `fibonacci` that returns a list of the first `n` Fibonacci numbers."}, {"instruction": "Write a Python function `isEven` that returns true if an integer is even, false otherwise."}, {"instruction": "Write a function `isPowerOf2` that returns `True` if an integer is a power of two."}, {"instruction": "Create a Python function `isPowerOfTwo` that returns true if an integer is a power of two."}, {"instruction": "Write a Python function `isPrime` that returns true if a given integer is prime."}, {"instruction": "Create a Python function `getBits` that returns the binary representation of an integer."}, {"instruction": "Write a Python function `countBits` that computes the number of `1` bits in a 32-bit integer."}, {"instruction": "Write a Python function `countBits` that counts the number of binary digits in an integer."}, {"instruction": "Write a Python function `parity` that returns the parity of a non-negative integer."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Write a Python function `isPrime` that determines whether an integer is prime."}, {"instruction": "Write a Python function `hammingDistance` that returns the Hamming distance between two non-negative integers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: generic programming, list traversal, map, return value, STL map\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_ICollection_CopyTo_mE384ED5CFB72BD40E4ED9118312BBCCA784A85A8_gshared (List_1_t4172DDD081E8C31E82629AD17BC2912ECE329CCD * __this, RuntimeArray * ___array0, int32_t ___arrayIndex1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeArray * L_0 = ___array0;\n\t\tif (!L_0)\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tRuntimeArray * L_1 = ___array0;\n\t\tNullCheck((RuntimeArray *)L_1);\n\t\tint32_t L_2;\n\t\tL_2 = Array_get_Rank_mE9E4804EA433AA2265F9D9CA3B1B5082ECD757D0((RuntimeArray *)L_1, /*hidden argument*/NULL);\n\t\tif ((((int32_t)L_2) == ((int32_t)1)))\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)7, /*hidden argument*/NULL);\n\t}\n\nIL_0012:\n\t{\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tCachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E* L_3 = (CachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E*)__this->get__items_1();\n\t\tRuntimeArray * L_4 = ___array0;\n\t\tint32_t L_5 = ___arrayIndex1;\n\t\tint32_t L_6 = (int32_t)__this->get__size_2();\n\t\tArray_Copy_m3F127FFB5149532135043FFE285F9177C80CB877((RuntimeArray *)(RuntimeArray *)L_3, (int32_t)0, (RuntimeArray *)L_4, (int32_t)L_5, (int32_t)L_6, /*hidden argument*/NULL);\n\t\tgoto IL_0033;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&ArrayTypeMismatchException_tFD610FDA00012564CB75AFCA3A489F29CF628784_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0029;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0029:\n\t{ // begin catch(System.ArrayTypeMismatchException)\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)((int32_t)18), /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_0033;\n\t} // end catch (depth: 1)\n\nIL_0033:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "List_1_System_Collections_IList_Add_mB11B0BE086058B75AABAFE706CC3AAA0012259E8_gshared"}, "id": 4, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_ICollection_CopyTo_mE384ED5CFB72BD40E4ED9118312BBCCA784A85A8_gshared (List_1_t4172DDD081E8C31E82629AD17BC2912ECE329CCD * __this, RuntimeArray * ___array0, int32_t ___arrayIndex1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeArray * L_0 = ___array0;\n\t\tif (!L_0)\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tRuntimeArray * L_1 = ___array0;\n\t\tNullCheck((RuntimeArray *)L_1);\n\t\tint32_t L_2;\n\t\tL_2 = Array_get_Rank_mE9E4804EA433AA2265F9D9CA3B1B5082ECD757D0((RuntimeArray *)L_1, /*hidden argument*/NULL);\n\t\tif ((((int32_t)L_2) == ((int32_t)1)))\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)7, /*hidden argument*/NULL);\n\t}\n\nIL_0012:\n\t{\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tCachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E* L_3 = (CachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E*)__this->get__items_1();\n\t\tRuntimeArray * L_4 = ___array0;\n\t\tint32_t L_5 = ___arrayIndex1;\n\t\tint32_t L_6 = (int32_t)__this->get__size_2();\n\t\tArray_Copy_m3F127FFB5149532135043FFE285F9177C80CB877((RuntimeArray *)(RuntimeArray *)L_3, (int32_t)0, (RuntimeArray *)L_4, (int32_t)L_5, (int32_t)L_6, /*hidden argument*/NULL);\n\t\tgoto IL_0033;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&ArrayTypeMismatchException_tFD610FDA00012564CB75AFCA3A489F29CF628784_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0029;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0029:\n\t{ // begin catch(System.ArrayTypeMismatchException)\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)((int32_t)18), /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_0033;\n\t} // end catch (depth: 1)\n\nIL_0033:\n\t{\n\t\treturn;\n\t}\n}", "concepts": ["generic programming", "list traversal", "map", "return value", "STL map"], "parsing_result": [{"instruction": "Write a Python function `product` that takes a list of integers and returns the product of them."}, {"instruction": "Write a Python function `count_vowels` that returns the number of vowels (a, e, i, o, u) in a string, ignoring case."}, {"instruction": "Write a Python function `findCommon` that returns a list of common elements from two lists."}, {"instruction": "Create a Python function `maxSubarray` that returns the maximum subarray sum."}, {"instruction": "Write a Python function `anagramCheck` that checks if two strings are anagrams (the two strings have the same characters in a different order)."}, {"instruction": "Write a Python function `findMedian` that returns the median of a list of numbers."}, {"instruction": "Given a vector of integers, return a vector containing all the elements in the first vector that appear in the second vector."}, {"instruction": "Create a Python function `reverse` that takes a string and returns a reversed version of the string."}, {"instruction": "Write a Python function that takes a list of integers and returns a new list that contains only the even elements."}, {"instruction": "Write a Python function `sum_lists` that takes two lists of integers and returns their sum as a list, ignoring overflow."}, {"instruction": "Write a Python function `toMap` that returns a dictionary of integers as keys and their frequencies as values."}, {"instruction": "Write a Python function `isAnagram` that returns True if the two strings are anagrams of each other, and False otherwise."}, {"instruction": "Write a Python function `myMap` that applies a function to all elements in a list, returning a new list of results."}, {"instruction": "Create a Python function `swap` to exchanges the values of two integers."}, {"instruction": "Write a Python function `ordered_map` that creates a map that stores values by their key in ascending order."}, {"instruction": "Write a Python function `sort` that takes a list of key-value pairs and sorts them by key."}, {"instruction": "Create a Python function `mergeSort` that sorts a list using the merge sort algorithm."}, {"instruction": "Write a Python function `selectionSort` to sort a list of integers."}, {"instruction": "Create a Python function `mergeSort` that sorts a list of integers using the MergeSort algorithm."}, {"instruction": "Write a Python function `sort` that sorts a list of integers using the bubble sort algorithm.\nt."}, {"instruction": "Write a Python function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Write a Python function `findFactors` that returns a map of the factors and multiplicities of a number."}, {"instruction": "Write a Python function `findPairs` that finds all pairs of integers in a list whose sum is 0."}, {"instruction": "Create a Python function `findMin` to return the minimum value in a list of integers."}, {"instruction": "Write a Python function `mergeSort` that sorts a list using the merge sort algorithm."}, {"instruction": "Create a Python function `to_dict` that takes a list of tuples and returns a dictionary."}, {"instruction": "Write a Python function `findMode` that returns the mode of a list of integers."}, {"instruction": "Write a Python function `findCommon` that returns a list of common elements from two lists."}, {"instruction": "Write a Python function `printMap` that prints the keys and values of a dictionary in the format `key -> value`."}, {"instruction": "Write a Python function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Write a Python function `histogram` that takes a list of integers and returns a frequency map of integers to their frequency in the list."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: constant expressions, bit shifting, arithmetic\n\n### Task", "fingerprint": null, "content": {"code": "constexpr int foo(int a) {\n    return -a << 2; // cxx17-note {{left shift of negative value -10}} \\\n                    // ref-cxx17-note {{left shift of negative value -10}} \\\n                    // cxx17-note {{left shift of negative value -2}} \\\n                    // ref-cxx17-note {{left shift of negative value -2}}\n  }", "docstring": "// cxx17-warning {{shifting a negative signed value is undefined}} \\\n                    // ref-cxx17-warning {{shifting a negative signed value is undefined}} \\\n                    // cxx17-note {{left shift of negative value -1}} \\\n                    // ref-cxx17-note {{left shift of negative value -1}}", "function_name": "negativeShift"}, "id": 7, "seed": "constexpr int foo(int a) {\n    return -a << 2; // cxx17-note {{left shift of negative value -10}} \\\n                    // ref-cxx17-note {{left shift of negative value -10}} \\\n                    // cxx17-note {{left shift of negative value -2}} \\\n                    // ref-cxx17-note {{left shift of negative value -2}}\n  }", "concepts": ["constant expressions", "bit shifting", "arithmetic"], "parsing_result": [{"instruction": "Implement a Python class `Arithmetic` that computes basic arithmetic operations on integers."}, {"instruction": "Implement a Python class `BitVector` that represents a vector of bits."}, {"instruction": "Write a Python function `getDistance` that computes the Euclidean distance between two points."}, {"instruction": "Write a Python class `Counter` that implements a radix-10 counter."}, {"instruction": "Write a Python class `Point` that represents a point in 2-dimensional space. The class should have two attributes, `x` and `y`, which both represent the horizontal and vertical coordinates of the point. The class should have two methods, `distance`, which takes another `Point` object as an argument and returns the distance between the two points, and `line_segment`, which takes another `Point` object as an argument and returns a line segment connecting the two points."}, {"instruction": "Write a Python class `BitCounter` that counts the number of bits in a given integer."}, {"instruction": "Write a Python class `Bit` for representing an unsigned 64-bit integer. The class should have the following methods:\n- `to_unsigned_str`: return a string representation of the integer in base 2.\n- `to_decimal_str`: return a string representation of the integer in base 10.\n- `to_hex_str`: return a string representation of the integer in base 16.\n- `to_binary_str`: return a string representation of the integer in base 2.\n- `to_octal_str`: return a string representation of the integer in base 8.\n- `to_base`: return a string representation of the integer in the given base.\n- `to_base_str`: return a string representation of the integer in the given base.\n- `to_signed_str`: return a string representation of the integer in signed base 2."}, {"instruction": "Create a python class `Date` that represents a date on a calendar."}, {"instruction": "Write a Python class `Binary` that implements a binary number with integer values as its attributes, and overloads the binary operators `+`, `-`, `*`, `/`, and `%`."}, {"instruction": "Create a Python class `Point` that represents a point in 2-dimensional space."}, {"instruction": "Write a Python class called `Binary` that implements binary arithmetic."}, {"instruction": "Implement a Python class `Fraction` that represents a fraction and defines operations for addition, subtraction, multiplication, and division."}, {"instruction": "Write a Python class `BinarySearchTree` that represents a binary search tree."}, {"instruction": "Write a Python class `IntBitShifter` that has a function `shift` that shifts an integer by a given number of bits."}, {"instruction": "Write a Python class `BitSwapper` that has a single instance variable `val`, and methods `setVal` and `getVal` that set and return `val` as a binary bit string."}, {"instruction": "Write a function `isPowerOfTwo` that returns true if a given number is a power of two."}, {"instruction": "Write a Python class `BinaryTree` with methods `inorder`, `preorder`, and `postorder` that compute the in-order, pre-order, and post-order traversals of a binary tree in terms of recursion."}, {"instruction": "Write a Python class `Decimal` that represents a decimal number with a precision of 8 digits."}, {"instruction": "Implement a Python class `Fraction` that represents rational numbers. The class must be able to perform basic arithmetic operations on rational numbers."}, {"instruction": "Implement a Python class `Binary` that supports binary arithmetic and bitwise operations."}, {"instruction": "Create a Python class `BinaryTree` that implements a binary search tree."}, {"instruction": "Create a Python class `Number` that represents a number in base 2."}, {"instruction": "Write a Python class `Vector` that implements a vector in 2D space. You may choose to implement the vector using an array of integers or a tuple of floating point numbers."}, {"instruction": "Write a Python class `CountingMachine` that implements the following behavior:\n\n- `def __init__(self, start)` - the constructor stores `start` as an instance attribute\n- `def step(self)` - increments the attribute `start` by 1\n- `def get_count(self)` - returns the value of the attribute `start`\n- `def reset(self)` - resets the attribute `start` to 0"}, {"instruction": "Implement a Python class `TwoNumberArithmetic` with an instance method `add` that adds two integers."}, {"instruction": "Write a Python class `TwoButtonControl` that contains two buttons, each with a label, an on/off state, and a callback function."}, {"instruction": "Write a Python class `IntPair` that represents a pair of integers. Your class should have a constructor with 2 integer arguments, and an `add` function that adds its arguments and returns the result."}, {"instruction": "Write a Python class `ShiftRegister` that implements a 3-bit shift register with an initial value."}, {"instruction": "Implement a Python class `BitCounter` that contains a method `count_bits` that counts the number of bits that are equal to 1."}, {"instruction": "Create a Python class `Fraction` that represents a fraction object."}, {"instruction": "Implement a Python class `BitField` that stores a string of bits, and provides methods for manipulating the bits."}, {"instruction": "Write a Python function `intToBase` that returns the integer given in a base 2 to base 10."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: boolean state, debouncing, button presses\n\n### Task", "fingerprint": null, "content": {"code": "boolean isButtonPressed(void) {\n  // read the state of the switch into a local variable:\n  int reading = digitalRead(buttonPin);\n\n  // check to see if you just pressed the button \n  // (i.e. the input went from LOW to HIGH),  and you've waited \n  // long enough since the last press to ignore any noise:  \n\n  // If the switch changed, due to noise or pressing:\n  if (reading != lastButtonState) {\n    // reset the debouncing timer\n    lastDebounceTime = millis();\n  } \n  \n  if ((millis() - lastDebounceTime) > debounceDelay) {\n    // whatever the reading is at, it's been there for longer\n    // than the debounce delay, so take it as the actual current state:\n\n    // if the button state has changed:\n    if (reading != buttonState) {\n      buttonState = reading;\n\n      // only toggle the LED if the new button state is HIGH\n      if (buttonState == HIGH) {\n        lastButtonState = reading;\n        setRegisterPin(LCD_BTN, HIGH);\n        return true;\n      }else{\n        setRegisterPin(LCD_BTN, LOW);\n      }\n    }\n  }\n\n  // save the reading.  Next time through the loop,\n  // it'll be the lastButtonState:\n  lastButtonState = reading;\n  return false;\n}", "docstring": "//Serial.println(\" Fahrenheit\");", "function_name": "getTemp"}, "id": 14, "seed": "boolean isButtonPressed(void) {\n  // read the state of the switch into a local variable:\n  int reading = digitalRead(buttonPin);\n\n  // check to see if you just pressed the button \n  // (i.e. the input went from LOW to HIGH),  and you've waited \n  // long enough since the last press to ignore any noise:  \n\n  // If the switch changed, due to noise or pressing:\n  if (reading != lastButtonState) {\n    // reset the debouncing timer\n    lastDebounceTime = millis();\n  } \n  \n  if ((millis() - lastDebounceTime) > debounceDelay) {\n    // whatever the reading is at, it's been there for longer\n    // than the debounce delay, so take it as the actual current state:\n\n    // if the button state has changed:\n    if (reading != buttonState) {\n      buttonState = reading;\n\n      // only toggle the LED if the new button state is HIGH\n      if (buttonState == HIGH) {\n        lastButtonState = reading;\n        setRegisterPin(LCD_BTN, HIGH);\n        return true;\n      }else{\n        setRegisterPin(LCD_BTN, LOW);\n      }\n    }\n  }\n\n  // save the reading.  Next time through the loop,\n  // it'll be the lastButtonState:\n  lastButtonState = reading;\n  return false;\n}", "concepts": ["boolean state", "debouncing", "button presses"], "parsing_result": [{"instruction": "Create a Python function `isButtonPressed` that takes a boolean input representing whether a button has been pressed. The function should return True if the button has been pressed for more than 200 ms."}, {"instruction": "Create a Python function `checkPresses` that returns True if a button has been pressed for at least 500 milliseconds."}, {"instruction": "Create a Python function `isButtonPressed` that takes a button press event and returns its boolean state."}, {"instruction": "Write a Python function `debounce` that takes a list of 0s and 1s, representing button presses, and outputs a new list where 0s and 1s are only printed when the state of the button changes."}, {"instruction": "Create a function `isBtnPressed` that takes a button state and returns true if the button is pressed."}, {"instruction": "Write a Python function that takes a number of button presses and returns the state of the button."}, {"instruction": "Create a Python function `buttonPress` that returns True when a button is pressed and False if it is not. This function must debounce the button presses."}, {"instruction": "Create a Python function `isPressed` that takes a string with a list of button presses and returns true if the string contains consecutive button presses."}, {"instruction": "Create a Python function `pressButton` that takes a string and prints the button presses in the string.\n\nThe string will consist of either an ordered sequence of buttons, or a sequence of button presses that correspond to button sequences.\n\nFor example, if the text is \"a\", then the user presses the button once. If the text is \"ab\", then the user presses the button twice. If the text is \"a12ab34\", then the user presses 12 buttons, then the buttons in the sequence \"ab\" are triggered, followed by 34 buttons."}, {"instruction": "Create a Python function `isOn` that returns whether or not a switch is on."}, {"instruction": "Write a function `is_pressed` that takes a boolean state and returns true if the state is pressed. The function is debounced: it should return false if the button is pressed for less than 100ms in a row."}, {"instruction": "Write a Python function that simulates a keypad button press in a remote control."}, {"instruction": "Create a function `checkButton` that returns `True` if a button is pressed for at least 100 ms, and `False` otherwise. The function should use function decorators to perform debouncing."}, {"instruction": "Write a function that takes two integer arrays as input. The function returns true if the first array is a permutation of the second array."}, {"instruction": "Create a Python function `debounce` that takes a function and returns a new function that delays a function's execution by a given amount of time."}, {"instruction": "Create a Python function `toggle` that returns true when a button is pressed. The function should be debounced (i.e., ignore multiple consecutive button presses)."}, {"instruction": "Create a Python function `isPressed` that returns true when the user presses a button, and false otherwise."}, {"instruction": "Write a Python function `checkDebouncing` that takes a list of button presses and a list of valid button states, and returns true if the button presses are valid."}, {"instruction": "Write a Python function `debounced` that, when passed a function `f`, returns a new function that:\n\n- takes a sequence of arguments\n- delays `f` by 100ms and passes the delay to `f` with the arguments\n- returns the result of `f`"}, {"instruction": "Create a Python function `buttonPressed` that takes a button press and returns whether it is debounced (i.e., whether the button has been pressed for at least 100 milliseconds)."}, {"instruction": "Create a function `debounce` that takes a function and an interval (in milliseconds) as its arguments and returns a new debounced function that will only call the original function every interval milliseconds."}, {"instruction": "Create a Python function `autoClicker` that performs a mouse click whenever a button is pressed within a certain time interval."}, {"instruction": "Create a Python function `buttonPressed` that takes a list of button presses and returns a list of tuples where each tuple contains two elements: the time at which the button was pressed and a boolean value indicating whether the button was pressed."}, {"instruction": "Create a Python function `debounce` that takes a function and returns a function that will only call the original function once every 50 milliseconds. The returned function should also only return the latest argument passed to the original function."}, {"instruction": "Write a Python function `button_pressed` that returns true if a user has provided a button press."}, {"instruction": "Develop a Python program that displays a GUI with a button, displaying a message when the button is pressed."}, {"instruction": "Create a Python function `isButtonPressed` that returns true if the user has pressed the button within the last two seconds."}, {"instruction": "Create a Python function `debounce` that takes a state and a function `f` as inputs. The function `f` should take a state `x` and a signal `y` as inputs and return a new state `z`. The function `f` should only be called if `y == True` and only when the state has not changed from the previous call."}, {"instruction": "Write a Python function `isRising` that returns true if a given boolean state is rising (true transitions to true) and false otherwise."}, {"instruction": "Write a Python function `debounce` that takes a function `f` and a duration `d` and returns a function `f_debounced` that runs `f` at most once every `d` seconds, even if `f` is called multiple times in that duration."}, {"instruction": "Using the `pygame` library and a single button, write a program to count how many times the user presses the button./README.md\n# Code Challenge #100\n\n## The Challenge\n\nCreate a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: locking, garbage collection, finalizer\n/Test-IOLab/Assets/Samples/Scripts/Test.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Test : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            Debug.Log(i);\n        }\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}/Test-IOLab/Assets/Samples/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\", menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}\n/Test-IOLab/Assets/Samples/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0, tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type, value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensAPI.cs\n\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n[CreateAssetMenu(fileName = \"Singleton\", menuName = \"TokensAPI\")]\npublic class TokensAPI : ScriptableObject\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensManager.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class TokensManager : MonoBehaviour\n{\n    public Text tokenType, tokenValue;\n\n    private void Start()\n    {\n        StartCoroutine(TokensAPI.Instance.GetToken());\n        StartCoroutine(TokensAPI.Instance.SetToken());\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            StartCoroutine(TokensAPI.Instance.GetToken());\n        }\n\n        if (Input.GetKeyDown(KeyCode.S))\n        {\n            StartCoroutine(TokensAPI.Instance.SetToken());\n        }\n    }\n}\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR void PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87 (PairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tbool V_3 = false;\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\t// lock(this) {\n\t\tV_0 = __this;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0005:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_0 = V_0;\n\t\t\tMonitor_Enter_mC5B353DD83A0B0155DF6FBCC4DF5A580C25534C5(L_0, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\t\t// if (swigCPtr.Handle != global::System.IntPtr.Zero) {\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A * L_1 = __this->get_address_of_swigCPtr_2();\n\t\t\tintptr_t L_2 = HandleRef_get_Handle_m095712F299EA36BF75975343C726FA160EE38277((HandleRef_t876E76124F400D12395BF61D562162AB6822204A *)L_1, /*hidden argument*/NULL);\n\t\t\tbool L_3 = IntPtr_op_Inequality_mB4886A806009EA825EFCC60CD2A7F6EB8E273A61((intptr_t)L_2, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\tV_2 = L_3;\n\t\t\tbool L_4 = V_2;\n\t\t\tif (!L_4)\n\t\t\t{\n\t\t\t\tgoto IL_005a;\n\t\t\t}\n\t\t}\n\nIL_0028:\n\t\t{\n\t\t\t// if (swigCMemOwn) {\n\t\t\tbool L_5 = ((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->get_swigCMemOwn_1();\n\t\t\tV_3 = L_5;\n\t\t\tbool L_6 = V_3;\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0048;\n\t\t\t}\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\t// swigCMemOwn = false;\n\t\t\t((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->set_swigCMemOwn_1((bool)0);\n\t\t\t// SharingClientPINVOKE.delete_PairingListener(swigCPtr);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_7 = __this->get_swigCPtr_2();\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(SharingClientPINVOKE_tFF4292D2BC5A9EB345172E6D4F8BE281B3799A1F_il2cpp_TypeInfo_var);\n\t\t\tSharingClientPINVOKE_delete_PairingListener_m3062D45600088FD3230AF5587AC8AB7A4C246B64(L_7, /*hidden argument*/NULL);\n\t\t}\n\nIL_0048:\n\t\t{\n\t\t\t// swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_8;\n\t\t\tmemset(&L_8, 0, sizeof(L_8));\n\t\t\tHandleRef__ctor_mCD64E7F91766FE7602EE34A8CEEF6C1EF4C943BB((&L_8), NULL, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\t__this->set_swigCPtr_2(L_8);\n\t\t}\n\nIL_005a:\n\t\t{\n\t\t\t// global::System.GC.SuppressFinalize(this);\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(GC_tC1D7BD74E8F44ECCEF5CD2B5D84BFF9AAE02D01D_il2cpp_TypeInfo_var);\n\t\t\tGC_SuppressFinalize_m037319A9B95A5BA437E806DE592802225EE5B425(__this, /*hidden argument*/NULL);\n\t\t\t// base.Dispose();\n\t\t\tListener_Dispose_mF59F4962F238FD2A986747D0092EC14293296D30(__this, /*hidden argument*/NULL);\n\t\t\tIL2CPP_LEAVE(0x76, FINALLY_006b);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_006b;\n\t}\n\nFINALLY_006b:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_9 = V_1;\n\t\t\tif (!L_9)\n\t\t\t{\n\t\t\t\tgoto IL_0075;\n\t\t\t}\n\t\t}\n\nIL_006e:\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_10 = V_0;\n\t\t\tMonitor_Exit_m49A1E5356D984D0B934BB97A305E2E5E207225C2(L_10, /*hidden argument*/NULL);\n\t\t}\n\nIL_0075:\n\t\t{\n\t\t\tIL2CPP_RESET_LEAVE(0x76);\n\t\t\tIL2CPP_END_FINALLY(107)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(107)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x76, IL_0076)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t}\n\nIL_0076:\n\t{\n\t\t// }\n\t\treturn;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "PairingListener_Finalize_m82AB68AB825ECE83AA5351C4FBB3A5568D9D1B96"}, "id": 18, "seed": "IL2CPP_METHOD_ATTR void PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87 (PairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tbool V_3 = false;\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\t// lock(this) {\n\t\tV_0 = __this;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0005:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_0 = V_0;\n\t\t\tMonitor_Enter_mC5B353DD83A0B0155DF6FBCC4DF5A580C25534C5(L_0, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\t\t// if (swigCPtr.Handle != global::System.IntPtr.Zero) {\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A * L_1 = __this->get_address_of_swigCPtr_2();\n\t\t\tintptr_t L_2 = HandleRef_get_Handle_m095712F299EA36BF75975343C726FA160EE38277((HandleRef_t876E76124F400D12395BF61D562162AB6822204A *)L_1, /*hidden argument*/NULL);\n\t\t\tbool L_3 = IntPtr_op_Inequality_mB4886A806009EA825EFCC60CD2A7F6EB8E273A61((intptr_t)L_2, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\tV_2 = L_3;\n\t\t\tbool L_4 = V_2;\n\t\t\tif (!L_4)\n\t\t\t{\n\t\t\t\tgoto IL_005a;\n\t\t\t}\n\t\t}\n\nIL_0028:\n\t\t{\n\t\t\t// if (swigCMemOwn) {\n\t\t\tbool L_5 = ((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->get_swigCMemOwn_1();\n\t\t\tV_3 = L_5;\n\t\t\tbool L_6 = V_3;\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0048;\n\t\t\t}\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\t// swigCMemOwn = false;\n\t\t\t((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->set_swigCMemOwn_1((bool)0);\n\t\t\t// SharingClientPINVOKE.delete_PairingListener(swigCPtr);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_7 = __this->get_swigCPtr_2();\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(SharingClientPINVOKE_tFF4292D2BC5A9EB345172E6D4F8BE281B3799A1F_il2cpp_TypeInfo_var);\n\t\t\tSharingClientPINVOKE_delete_PairingListener_m3062D45600088FD3230AF5587AC8AB7A4C246B64(L_7, /*hidden argument*/NULL);\n\t\t}\n\nIL_0048:\n\t\t{\n\t\t\t// swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_8;\n\t\t\tmemset(&L_8, 0, sizeof(L_8));\n\t\t\tHandleRef__ctor_mCD64E7F91766FE7602EE34A8CEEF6C1EF4C943BB((&L_8), NULL, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\t__this->set_swigCPtr_2(L_8);\n\t\t}\n\nIL_005a:\n\t\t{\n\t\t\t// global::System.GC.SuppressFinalize(this);\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(GC_tC1D7BD74E8F44ECCEF5CD2B5D84BFF9AAE02D01D_il2cpp_TypeInfo_var);\n\t\t\tGC_SuppressFinalize_m037319A9B95A5BA437E806DE592802225EE5B425(__this, /*hidden argument*/NULL);\n\t\t\t// base.Dispose();\n\t\t\tListener_Dispose_mF59F4962F238FD2A986747D0092EC14293296D30(__this, /*hidden argument*/NULL);\n\t\t\tIL2CPP_LEAVE(0x76, FINALLY_006b);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_006b;\n\t}\n\nFINALLY_006b:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_9 = V_1;\n\t\t\tif (!L_9)\n\t\t\t{\n\t\t\t\tgoto IL_0075;\n\t\t\t}\n\t\t}\n\nIL_006e:\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_10 = V_0;\n\t\t\tMonitor_Exit_m49A1E5356D984D0B934BB97A305E2E5E207225C2(L_10, /*hidden argument*/NULL);\n\t\t}\n\nIL_0075:\n\t\t{\n\t\t\tIL2CPP_RESET_LEAVE(0x76);\n\t\t\tIL2CPP_END_FINALLY(107)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(107)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x76, IL_0076)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t}\n\nIL_0076:\n\t{\n\t\t// }\n\t\treturn;\n\t}\n}", "concepts": ["locking", "garbage collection", "finalizer\n/Test-IOLab/Assets/Samples/Scripts/Test.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Test : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            Debug.Log(i);\n        }\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}/Test-IOLab/Assets/Samples/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\"", "menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}\n/Test-IOLab/Assets/Samples/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0", "tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type", "value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensAPI.cs\n\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n[CreateAssetMenu(fileName = \"Singleton\"", "menuName = \"TokensAPI\")]\npublic class TokensAPI : ScriptableObject\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0", "tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0", "tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensManager.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class TokensManager : MonoBehaviour\n{\n    public Text tokenType", "tokenValue;\n\n    private void Start()\n    {\n        StartCoroutine(TokensAPI.Instance.GetToken());\n        StartCoroutine(TokensAPI.Instance.SetToken());\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            StartCoroutine(TokensAPI.Instance.GetToken());\n        }\n\n        if (Input.GetKeyDown(KeyCode.S))\n        {\n            StartCoroutine(TokensAPI.Instance.SetToken());\n        }\n    }\n}"], "parsing_result": [{"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a C# function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in an integer."}, {"instruction": "Write a Python script that counts the number of lines in a file and outputs it to a text file."}, {"instruction": "Write a Python function that counts the number of words in a given string."}, {"instruction": "Implement the `Token` class to store a token's type and value. Create a class `TokenInfo` that stores information about a token. Create a TokenGenerator class that generates a set of tokens for the TokenManager to use."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Create a Unity project and implement a token system in it, as described above."}, {"instruction": "Create a visual representation of the design process of the tokens manager using the Design Tokens asset."}, {"instruction": "Write a C# function `SayMyName` that prints your name."}, {"instruction": "Write a C++ program that computes the Fibonacci sequence."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python program that counts the number of tokens in a given string."}, {"instruction": "Write a C# program that counts the number of tokens in the `TokenInfo` scriptable object, spawns a `TokenGenerator` object with a token number of `tokenNum` and assigns an instance of `TokenInfo` to the `tokenInfo` field of the `TokenGenerator` component."}, {"instruction": "Write a C# program that creates an object of class `Token` and displays its type and value in the Unity console."}, {"instruction": "Write a C# function `getToken` that returns a random token from a list.\n\n/Assets/Samples/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0, tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type, value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}/Assets/Samples/Scripts/TokensAPI.cs\n\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n[CreateAssetMenu(fileName = \"Singleton\", menuName = \"TokensAPI\")]\npublic class TokensAPI : ScriptableObject\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}/Assets/Samples/Scripts/TokensManager.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class TokensManager : MonoBehaviour\n{\n    public Text tokenType, tokenValue;\n\n    private void Start()\n    {\n        StartCoroutine(TokensAPI.Instance.GetToken());\n        StartCoroutine(TokensAPI.Instance.SetToken());\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            StartCoroutine(TokensAPI.Instance.GetToken());\n        }\n\n        if (Input.GetKeyDown(KeyCode.S))\n        {\n            StartCoroutine(TokensAPI.Instance.SetToken());\n        }\n    }\n}/Assets/Samples/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\", menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}"}, {"instruction": "Write a C# program that prints out a token every time the T key is pressed."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `countVowels` that counts the number of vowels in a given string."}, {"instruction": "Write a Python function `countTokens` that counts the number of words in a given string."}, {"instruction": "Write a Python program that adds a set of integers and returns the total."}, {"instruction": "Write a C# function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a function `isPalindrome` that detects if a given string is a palindrome."}, {"instruction": "Create a function `createToken` that creates a token object."}, {"instruction": "Create a Unity application that shows a single text field that outputs a random token from a list of tokens. The tokens should be generated via a script asset. The script asset should have a list of tokens and a method to get a random token from that list.\n\nThe application should have a button to call the method to generate a random token."}, {"instruction": "Write a Python function `countLetters` that returns the number of letters in a given string."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in an integer."}, {"instruction": "Write a Python program that outputs the number of tokens in the given file."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: static method, dynamic method, static method, object initialization, accessor, mutator, function call, class instantiation, member access\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Pass_resetTextures(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Pass *arg1 = (cc::scene::Pass *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Pass>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->resetTextures();\n    \n    \n    return true;\n}", "docstring": "// js_function", "function_name": "js_cc_scene_Pass_resetUBOs"}, "id": 19, "seed": "static bool js_cc_scene_Pass_resetTextures(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Pass *arg1 = (cc::scene::Pass *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Pass>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->resetTextures();\n    \n    \n    return true;\n}", "concepts": ["static method", "dynamic method", "static method", "object initialization", "accessor", "mutator", "function call", "class instantiation", "member access"], "parsing_result": [{"instruction": "Create a Python class `Point` that represents a two-dimensional point."}, {"instruction": "Create a Python class `Person` whose constructor accepts a name and returns an object with three attributes:\n- `name`: a string representing the person's name\n- `age`: an integer representing the person's age\n- `birthday`: a date object representing the person's birthday\n\nThe `Person` class should include a `birthday()` method that returns a string representation of the person's birthday in the format \"Month, Date Year\"."}, {"instruction": "Create a Python class `Counter` that provides a counter for incrementing and decrementing integers."}, {"instruction": "Implement a Python class `Vector` that represents a vector in 3 dimensions and returns the magnitude of the vector."}, {"instruction": "Create a Python class `Vector` that implements a two-dimensional vector. The vector class should store its elements in two floating-point numbers, `x` and `y`. It should include a static method `Distance` that takes two vectors as parameters and returns the distance between them, and a dynamic method `Length` that returns the length of the vector."}, {"instruction": "Create a Python class `Rectangle` that contains four attributes, `length`, `width`, `height`, and `area`, as well as a method, `volume`, that returns the volume of the rectangle."}, {"instruction": "Create a Python class `Rectangle` that represents a two-dimensional rectangle with sides `a` and `b` and a color value. The class should have three methods:\n\n- `area`: returns the area of the rectangle\n- `perimeter`: returns the perimeter of the rectangle\n- `get_color`: returns the color value of the rectangle"}, {"instruction": "Create a Python class `Rectangle` that represents a rectangle."}, {"instruction": "Create a Python class called `Point` that represents a Cartesian point, and has a `calcDistance` static method that calculates the distance between two points."}, {"instruction": "Create a Python class `Rectangle` that holds the height and width of a rectangle, and has a method `area` that returns the area of the rectangle."}, {"instruction": "Design a Python class called `MyList` that represents a list of integers. The class should have the following attributes:\n\n- `elements`: a list of integers\n- `size`: the number of elements in `elements`\n- `capacity`: the number of elements the `elements` list can store\n\nThe class should have the following methods:\n\n- `add`: adds an element to the end of the `elements` list\n- `remove`: removes the last element from the `elements` list\n- `insert`: inserts an element at a specified index in the `elements` list\n- `find`: returns the index of the first occurrence of a specified element in `elements`\n- `clear`: clears the `elements` list\n- `isEmpty`: returns `True` if `elements` is empty, `False` otherwise\n- `print`: prints the `elements` list"}, {"instruction": "Create a Python class `Stat` that contains the following methods:\n\n- `mean` which calculates the arithmetic mean of a list of numbers\n- `variance` which calculates the variance of a list of numbers\n- `standard_deviation` which calculates the standard deviation of a list of numbers"}, {"instruction": "Define a `Person` class with properties for name, age, and favorite color. Define a `Greeter` class with a `greet` method that takes a `Person` object as its argument and returns a greeting in the format \"Hi, my name is {person's name}. My age is {person's age}. My favorite color is {person's favorite color}.\"."}, {"instruction": "Write a Python class `Student` that defines a student with name, age, and major. The class should include a `getStudentInfo` method that returns the name, age, and major of a student."}, {"instruction": "Create a Python class `Employee` with the following properties:\n- `name`\n- `salary`\n\nCreate a Python class `Manager` with the following properties:\n- `name`\n- `salary`\n- `employees`\n\nCreate a Python function `calculateSalaries` that calculates the total salary of all Employee objects in the Manager object."}, {"instruction": "Create a Python class `Vector` that represents a two-dimensional vector."}, {"instruction": "Create a Python class `Vector` with three integer fields: `x, y, z`. Write a Python class method `length` that returns the length of a vector. Write a Python class method `dot_product` that computes the dot product of two vectors. Write a Python class method `cross_product` that computes the cross product of two vectors. Write a Python class method `add` that adds two vectors and returns a new vector. Write a Python class method `scalar_mul` that multiplies a vector by a scalar and returns a new vector."}, {"instruction": "Create a Python class for a bank account."}, {"instruction": "Write a Python class that will represent a bank account, with the following properties and methods:\n- `account_holder`: the name of the account holder\n- `balance`: the current balance of the account\n- `deposit(amount)`: adds money to the account balance\n- `withdraw(amount)`: subtracts money from the account balance\n- `check_balance()`: returns the current account balance"}, {"instruction": "Create a Python class `Stack` that implements a stack data structure."}, {"instruction": "Create a Python class `Rectangle`.\n\nThe class should have two attributes: `length` and `width`.\n\nThe class should have two methods: `area` and `perimeter`. The method `area` should return the rectangle's area, and `perimeter` should return the rectangle's perimeter."}, {"instruction": "Create a Python class `Student` with a static method `getName` that returns the name of the Student, and three instance methods `setName`, `setGPA`, and `getGPA` that set and return the name and GPA of a Student."}, {"instruction": "Implement a Python class `Vector` that represents a vector in Euclidean space and has the following methods:\n\n- `dot(u, v)`: returns the dot product of two vectors\n- `cross(u, v)`: returns the cross product of two vectors\n- `unit_vector()`: returns a unit vector of the same direction as the current vector\n- `angle(u)`: returns the angle between two vectors\n- `add(u)`: returns the sum of two vectors\n- `sub(u)`: returns the difference of two vectors\n- `multiply(u, c)`: returns the product of a vector and a constant\n- `divide(u, c)`: returns the quotient of a vector and a constant\n- `magnitude()`: returns the magnitude of the vector\n- `normalize()`: returns a unit vector of the same direction as the current vector"}, {"instruction": "Create a Python class `Point` that has two attributes, `x` and `y`. The class should have static and dynamic methods, accessor and mutator functions, and a function to initialize an object of the class."}, {"instruction": "Create a Python class `Circle`.\n\nA circle has a center, and a radius.\n\nThe center of a circle is a tuple of two integers, containing the center's x-coordinate and y-coordinate.\n\nThe radius of a circle is an integer.\n\nA circle has the following public methods:\n- `calc_area()`: returns a float representing the area of the circle\n- `calc_perimeter()`: returns a float representing the perimeter of the circle\n\nA circle also has the following public static methods:\n- `calc_circle_area(radius)`: returns a float representing the area of a circle with the given radius.\n- `calc_circle_perimeter(radius)`: returns a float representing the perimeter of a circle with the given radius.\n\nCreate a constructor for the class `Circle`, which takes in two integers, the center's x-coordinate and the center's y-coordinate, and an integer, the radius.\n\nDefine the `Circle` class's `__str__` method to print a string representation of the circle."}, {"instruction": "Create a Python class `Counter` that keeps track of the number of objects of that class."}, {"instruction": "Create a Python class `Node` that represents a node in a singly-linked list. It should have the following members:\n\n- data - the integer stored in the node\n- next - a pointer to the next node (type `Node`)\n\nAdditionally, the class should have the following methods:\n\n- `insert` - inserts a new node with the given data after the current node\n- `delete` - deletes the current node\n- `reverse` - reverses the linked list\n- `get_data` - returns the data of the current node\n- `get_next` - returns the next node in the linked list\n- `print_list` - prints the contents of the linked list"}, {"instruction": "Implement a Python class of a point."}, {"instruction": "Create a Python class `CircularQueue` that implements a circular queue."}, {"instruction": "Create a Python class `Counter` that keeps track of its member variable `value` and implements the following member functions:\n- `increment_by`: increments the counter by a given value\n- `increment`: increments the counter by one\n- `decrement_by`: decrements the counter by a given value\n- `decrement`: decrements the counter by one\n- `reset`: resets the counter to zero\n- `get`: returns the current value of the counter"}, {"instruction": "Implement a Python class `ArithmeticProgression` that models an arithmetic progression. The class should have a parameterized constructor that takes a start value and a step size as arguments, and the following methods:\n- `get_start()`\n- `get_step()`\n- `increment()`\n- `get_current()`\n- `reset()`\n- `is_done()`\n\nThe value returned by `get_current()` should be the next term in the progression after the value returned by the previous call to `get_current()`. `reset()` resets the progression to its starting point and `is_done()` returns True when the progression reaches the end of its sequence."}, {"instruction": "Create a class `Dice` that represents a dice."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: struct/class instantiation, dynamic allocation, type casting, function overload, pointer arithmetic\n\n### Task", "fingerprint": null, "content": {"code": "soap_instantiate_ns3__FEDetRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FEDetRequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEDetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEDetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEADetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEADetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECompConsResponse\"))\n\t\treturn soap_instantiate_ns3__FECompConsResponse(soap, n, NULL, NULL, size);\n\tns3__FEDetRequest *p;\n\tsize_t k = sizeof(ns3__FEDetRequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FEDetRequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FEDetRequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FEDetRequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FEDetRequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_in_ns3__FEDetRequest"}, "id": 22, "seed": "soap_instantiate_ns3__FEDetRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FEDetRequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEDetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEDetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEADetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEADetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECompConsResponse\"))\n\t\treturn soap_instantiate_ns3__FECompConsResponse(soap, n, NULL, NULL, size);\n\tns3__FEDetRequest *p;\n\tsize_t k = sizeof(ns3__FEDetRequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FEDetRequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FEDetRequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FEDetRequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FEDetRequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "concepts": ["struct/class instantiation", "dynamic allocation", "type casting", "function overload", "pointer arithmetic"], "parsing_result": [{"instruction": "Implement a Python program that asks the user for three integers, and then prints the sum and product of those three numbers."}, {"instruction": "Write a Python program that parses two integers from a file, adds them together, and writes the result to a file."}, {"instruction": "Create a Python class `Complex` that represents a complex number."}, {"instruction": "Write a Python program that solves a quadratic equation."}, {"instruction": "Write a Python program to simulate a simple bank account."}, {"instruction": "Implement a Python program `random_series` that generates a sequence of random numbers."}, {"instruction": "Write a Python program that simulates a simple banking system. The customer's balance should be 10000.00. The user should be able to deposit, withdraw, and print the balance."}, {"instruction": "Write a Python program that constructs a doubly-linked list of integers."}, {"instruction": "Write a Python program that takes an array of integers and returns the first missing positive integer."}, {"instruction": "Write a Python program that uses a structure-like class named `Rectangle` to model a rectangle. The class should have two instance variables named `width` and `height`, and two methods named `set_width` and `set_height` that will set the values of the instance variables. It should also have a method named `get_area` that returns the area of the rectangle."}, {"instruction": "Create a Python program that reads a range of integers from the command-line and prints the following results:\n\n- the minimum value in the range\n- the maximum value in the range\n- the number of even values in the range\n- the number of odd values in the range\n- the number of zeros in the range\n- the sum of the integers in the range\n- the average value of the integers in the range"}, {"instruction": "Write a Python program that prompts the user to enter a number between 0 and 9 (inclusive), and prints the cardinal number of that number."}, {"instruction": "Write a Python function `fizzbuzz` that takes a positive integer `n`, and prints all numbers from 1 to `n` in order. However, if the number is divisible by 3, the program should print `Fizz` instead. If the number is divisible by 5, the program should print `Buzz`. If the number is divisible by both 3 and 5, the program should print `FizzBuzz`."}, {"instruction": "Write a Python class `Person` that implements the following methods:\n* `__init__()` with a default name and age\n* `getName()`\n* `getAge()`\n* `setName(name)`\n* `setAge(age)`"}, {"instruction": "Write a Python program that reads in a string and a character, and prints out the number of occurrences of the character in the string."}, {"instruction": "Write a Python function that when given a list of integers, returns a list of all possible sets of indices in the input list."}, {"instruction": "Write a Python program to generate a fibonacci sequence of length n."}, {"instruction": "Implement a Python program that prompts the user to enter an integer n, then creates and prints an n x n matrix of n x n size. The matrix is filled with the numbers 0, 1, 2, ..., n^2 - 1. When n = 3, the matrix should be:\n```\n0 1 2\n3 4 5\n6 7 8\n```"}, {"instruction": "Write a Python program that creates a song struct and prints its lyrics."}, {"instruction": "Write a Python program that reads a list of integers from standard input and prints the sum of the first and the last elements."}, {"instruction": "Implement a Python program that reads in a text file (passed as a command-line argument), and outputs a JSON file containing the number of occurrences of each word."}, {"instruction": "Write a Python program that takes an integer and returns a list of integers that is equivalent to the inputted integer, but with each value increased by 1."}, {"instruction": "Write a Python program that implements a `Rectangle` class, with a constructor that takes its length and width, and two methods: `getArea` and `getPerimeter`."}, {"instruction": "Implement a Python program that reads in the size of 2-dimensional array `M` and creates a 2-dimensional array `M` of integers. Then, it reads in `R` rows of `M`, and for each row, it reads in `C` elements of the row and fills it into a 1-dimensional array `row`. Finally, it prints out the 1-dimensional array `row`."}, {"instruction": "Write a Python program that uses the Mersenne prime generator algorithm to generate a list of 100 Mersenne primes of the form 2<sup>n</sup>\u2005\u2212\u20051."}, {"instruction": "Implement the following Python classes and functions:\n- `Random` class that provides random integers and floating point values between 0 and 1.\n- `Point` class that represents a point in 2D space.\n- `Vector` class that represents a vector in 2D space.\n- `Triangle` class that represents a triangle in 3D space.\n- `Rectangle` class that represents a rectangle in 2D space.\n- `Circle` class that represents a circle in 2D space.\n- `Ellipse` class that represents an ellipse in 2D space."}, {"instruction": "Write a Python function that returns a list of the first n positive integers."}, {"instruction": "Write a Python function `fib` that returns the Nth Fibonacci number, where N is an integer greater than or equal to 0."}, {"instruction": "Write a Python program that creates a class `Student`, which stores information about an individual student's name and a floating point GPA. The class should also have a function `getGPA`, which returns the student's GPA."}, {"instruction": "Write a Python program that takes a sequence of numbers as input and returns the new sequence with duplicates removed."}, {"instruction": "Write a Python program that implements the C++ function `gcd` from the first example."}, {"instruction": "Write a Python function `reverseString` that reverses a string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: hash tables, encapsulation, exception handling, threading, hash map\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool KeyHandler_ValueExists_mF5375C620ADF2D5B81AFA657D39C7DFB42F73EFF (KeyHandler_tB9094857C733957C9D709512D2AD478828B119FF * __this, String_t* ___name0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&String_t_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tString_t* L_0 = ___name0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\tString_t* L_1 = ((String_t_StaticFields*)il2cpp_codegen_static_fields_for(String_t_il2cpp_TypeInfo_var))->get_Empty_5();\n\t\t___name0 = L_1;\n\t}\n\nIL_000a:\n\t{\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_2 = __this->get_values_5();\n\t\tV_0 = L_2;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_3 = V_0;\n\t\tMonitor_Enter_mBEB6CC84184B46F26375EC3FC8921D16E48EA4C4(L_3, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_4 = __this->get_values_5();\n\t\tString_t* L_5 = ___name0;\n\t\tNullCheck(L_4);\n\t\tbool L_6;\n\t\tL_6 = VirtFuncInvoker1< bool, RuntimeObject * >::Invoke(19 /* System.Boolean System.Collections.Hashtable::Contains(System.Object) */, L_4, L_5);\n\t\tV_2 = L_6;\n\t\tIL2CPP_LEAVE(0x34, FINALLY_002a);\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_7 = V_1;\n\t\t\tif (!L_7)\n\t\t\t{\n\t\t\t\tgoto IL_0033;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_8 = V_0;\n\t\t\tMonitor_Exit_mA776B403DA88AC77CDEEF67AB9F0D0E77ABD254A(L_8, /*hidden argument*/NULL);\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x34, IL_0034)\n\t}\n\nIL_0034:\n\t{\n\t\tbool L_9 = V_2;\n\t\treturn L_9;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "KeyHandler_Flush_m56255985F7D2CBDE0231B579C9795A56B516F3C7"}, "id": 26, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool KeyHandler_ValueExists_mF5375C620ADF2D5B81AFA657D39C7DFB42F73EFF (KeyHandler_tB9094857C733957C9D709512D2AD478828B119FF * __this, String_t* ___name0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&String_t_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tString_t* L_0 = ___name0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\tString_t* L_1 = ((String_t_StaticFields*)il2cpp_codegen_static_fields_for(String_t_il2cpp_TypeInfo_var))->get_Empty_5();\n\t\t___name0 = L_1;\n\t}\n\nIL_000a:\n\t{\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_2 = __this->get_values_5();\n\t\tV_0 = L_2;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_3 = V_0;\n\t\tMonitor_Enter_mBEB6CC84184B46F26375EC3FC8921D16E48EA4C4(L_3, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_4 = __this->get_values_5();\n\t\tString_t* L_5 = ___name0;\n\t\tNullCheck(L_4);\n\t\tbool L_6;\n\t\tL_6 = VirtFuncInvoker1< bool, RuntimeObject * >::Invoke(19 /* System.Boolean System.Collections.Hashtable::Contains(System.Object) */, L_4, L_5);\n\t\tV_2 = L_6;\n\t\tIL2CPP_LEAVE(0x34, FINALLY_002a);\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_7 = V_1;\n\t\t\tif (!L_7)\n\t\t\t{\n\t\t\t\tgoto IL_0033;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_8 = V_0;\n\t\t\tMonitor_Exit_mA776B403DA88AC77CDEEF67AB9F0D0E77ABD254A(L_8, /*hidden argument*/NULL);\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x34, IL_0034)\n\t}\n\nIL_0034:\n\t{\n\t\tbool L_9 = V_2;\n\t\treturn L_9;\n\t}\n}", "concepts": ["hash tables", "encapsulation", "exception handling", "threading", "hash map"], "parsing_result": [{"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Implement a Python class `HashTable` that implements hash tables."}, {"instruction": "Create a Python class `HashTable` that stores key-value pairs in a hash table."}, {"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Write a Python class `HashTable` that creates a hash table."}, {"instruction": "Implement a Python class `HashTable` that uses a hash table to store dictionaries."}, {"instruction": "Implement a Python class `HashTable` that stores key-value pairs using a hash map."}, {"instruction": "Implement a Python class `HashMap` that stores key-value pairs."}, {"instruction": "Implement a Python class `HashTable` that maps keys to values."}, {"instruction": "Write a Python class `HashTable` that implements a hash table to store key-value pairs.\nts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n# Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcep#!/bin/bash\n\n# Install needed software\nsudo apt-get update\nsudo apt-get install -y make cmake\n\n# Clone this repo\ngit clone https://github.com/taylorjg/cpp-coding-challenge\n\n# Build and run the program\ncd cpp-coding-challenge/example_1/\ncmake.\nmake\n./example_1\n\n# Cleanup\ncd..\nrm -rf cpp-coding-challenge\n\necho \"Done. Now you're ready to create your own exampl\ne.\"ge: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n# Example 3\n### Properties\ncategory: function implementation\nlangua# Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n# Example 10\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: hard\nconcepts: integer sequences, recursion, base case\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python class `Cache` that implements a simple cache, acceptable with respect to time complexity."}, {"instruction": "Implement a Python class `HashTable` that implements a hash table using Python dictionaries."}, {"instruction": "Implement a Python class `HashTable` that stores key-value pairs."}, {"instruction": "Create a Python class `HashTable` that implements a hash table using Python dictionaries."}, {"instruction": "Write a Python class `Account` that creates a bank account with a balance, username, and password."}, {"instruction": "Implement a thread-safe hash map with `get`, `put`, and `remove` methods."}, {"instruction": "Write a Python class `HashMap` that implements a hash map."}, {"instruction": "Create a Python class `HashTable` that stores and accesses key-value pairs using a hash map."}, {"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Create a Python class `User` with four attributes: the name of the user, the username, and password, and a set of friends."}, {"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Write a class in Python that uses the hash map data structure and implements the following methods:\n\n- `add`\n- `remove`\n- `size`\n- `contains`\n- `get`"}, {"instruction": "Implement an object-oriented Python class `SafeQueue` that provides a thread-safe queue interface. The class should function like the `queue.Queue` class in the Python Standard Library."}, {"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Create a Python class `User` with the following properties:\n- a unique user ID\n- a user name\n- a password\n- a list of groups\n- a list of books"}, {"instruction": "Implement a Python class that represents a hash table and provides functionality as described below.\n\n- `__init__` takes a size parameter for the initial size of the hash table.\n- `put` takes an integer key and value and adds the key, value pair to the table.\n- `containsKey` takes an integer key and returns `True` if the key is present in the table and `False` otherwise.\n- `get` takes an integer key and returns the value associated with the key if the key is present in the table and raises an exception otherwise.\n- `remove` takes an integer key and removes the key, value pair from the table if the key is present in the table and raises an exception otherwise."}, {"instruction": "Implement a Python class `Account` that models an account with a balance and an initial balance."}, {"instruction": "Implement a Python class `HashTable` that is similar to a hash table."}, {"instruction": "Implement a Python class `HashTable` that supports key-value pairs and avoids collisions using separate chaining."}, {"instruction": "Implement a Python class `HashTable` that supports hash lookups and updates."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: pass-by-value, arithmetic operators, conditional execution, template specialization\n\n### Task", "fingerprint": null, "content": {"code": "LinearQuadraticStage approximateStage(OptimalControlProblem& optimalControProblem, TrajectoryRef start, StateTrajectoryRef end,\n                                      bool isInitialTime) {\n  const auto modelData = approximateIntermediateLQ(optimalControProblem, start.t, start.x, start.u, MultiplierCollection());\n\n  // checking the numerical properties\n  const auto errSize = checkSize(modelData, start.x.rows(), start.u.rows());\n  if (!errSize.empty()) {\n    throw std::runtime_error(\"[[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errSize);\n  }\n  const std::string errProperties =\n      checkDynamicsProperties(modelData) + checkCostProperties(modelData) + checkConstraintProperties(modelData);\n  if (!errProperties.empty()) {\n    throw std::runtime_error(\"[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errProperties);\n  }\n\n  LinearQuadraticStage lqStage;\n  const auto dt = end.t - start.t;\n\n  lqStage.cost = modelData.cost;\n  lqStage.cost *= dt;\n\n  // Linearized Dynamics after discretization: x0[k+1] + dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k])\n  lqStage.dynamics = approximateDynamics(modelData, start, dt);\n  // Adapt the offset to account for discretization and the nominal trajectory :\n  // dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k]) - x0[k+1]\n  lqStage.dynamics.f -= end.x;\n\n  lqStage.constraints = approximateConstraints(modelData, isInitialTime);\n\n  return lqStage;\n}", "docstring": "// checking the numerical properties", "function_name": "getLinearQuadraticApproximation"}, "id": 29, "seed": "LinearQuadraticStage approximateStage(OptimalControlProblem& optimalControProblem, TrajectoryRef start, StateTrajectoryRef end,\n                                      bool isInitialTime) {\n  const auto modelData = approximateIntermediateLQ(optimalControProblem, start.t, start.x, start.u, MultiplierCollection());\n\n  // checking the numerical properties\n  const auto errSize = checkSize(modelData, start.x.rows(), start.u.rows());\n  if (!errSize.empty()) {\n    throw std::runtime_error(\"[[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errSize);\n  }\n  const std::string errProperties =\n      checkDynamicsProperties(modelData) + checkCostProperties(modelData) + checkConstraintProperties(modelData);\n  if (!errProperties.empty()) {\n    throw std::runtime_error(\"[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errProperties);\n  }\n\n  LinearQuadraticStage lqStage;\n  const auto dt = end.t - start.t;\n\n  lqStage.cost = modelData.cost;\n  lqStage.cost *= dt;\n\n  // Linearized Dynamics after discretization: x0[k+1] + dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k])\n  lqStage.dynamics = approximateDynamics(modelData, start, dt);\n  // Adapt the offset to account for discretization and the nominal trajectory :\n  // dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k]) - x0[k+1]\n  lqStage.dynamics.f -= end.x;\n\n  lqStage.constraints = approximateConstraints(modelData, isInitialTime);\n\n  return lqStage;\n}", "concepts": ["pass-by-value", "arithmetic operators", "conditional execution", "template specialization"], "parsing_result": [{"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers using recursion and pass-by-value."}, {"instruction": "Implement a Python function `sumUp` that calculates the sum of two integers passed as parameters. If the two integers are equal, return 10 times their sum."}, {"instruction": "Implement a Python function `sumList` that returns the sum of all elements in a list."}, {"instruction": "Create a Python function `multiply` that takes a set of integers and multiplies them together. The function should allow for integers that are passed as arguments."}, {"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Implement a Python function `fibonacci` that returns the nth Fibonacci number."}, {"instruction": "Write a Python function `compute` that takes a string representing an arithmetic expression and returns the value of the expression. The expression contains only the following arithmetic operators: `+`, `-`, `*`, `/`. The expression does not contain any other characters."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two integers using Euclid's algorithm."}, {"instruction": "Implement a Python function `is_palindrome` that takes a string and returns whether it is a palindrome."}, {"instruction": "Implement a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Implement a Python function `sumOfSquares` that computes the sum of the squares of all positive integers less than 100."}, {"instruction": "Implement a Python function `factorial` that returns the factorial of an integer."}, {"instruction": "Implement a Python function `isPerm` that returns True if two lists of integers are permutations of each other."}, {"instruction": "Implement a Python function `add` that returns the sum of two numbers."}, {"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers using `pass-by-value` arithmetic."}, {"instruction": "Implement a Python function `generatePascalTriangle` that prints the first N levels of Pascal's triangle."}, {"instruction": "Write a Python function `compress` that takes a string and returns the compressed version of the string."}, {"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Implement a Python function `isEven` that takes an integer and returns True if the number is even, False otherwise."}, {"instruction": "Create a Python function `sumDigits` that returns the sum of the digits in a number using recursion."}, {"instruction": "Write a Python function `sum_digits` that returns the sum of digits in an integer."}, {"instruction": "Implement a Python function `m**n` that returns `m` raised to the power of `n`."}, {"instruction": "Write a Python function `make_adder` that takes in an integer n and returns a function that adds n to whatever it is given as input."}, {"instruction": "Write a Python function `class_average` that computes the average of the grade of each class, returning the average of the average."}, {"instruction": "Implement a Python function `multiply` that takes two integers, and returns the product of the two."}, {"instruction": "Implement a Python function `sumIntegers` that returns the sum of all integers between 1 and a given integer, inclusive."}, {"instruction": "Write a function `add_two` that takes a number, adds two to it, and returns the result. The function must work for any number type."}, {"instruction": "Write a Python function `addTwo` that adds two numbers."}, {"instruction": "Implement a Python function `add` that adds two integers."}, {"instruction": "Implement the `add_vectors` function in Python, which takes a list of vectors of integers and returns the sum of all vectors."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: object instantiation, typecasting\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Model_updateLightingmap(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Model *arg1 = (cc::scene::Model *) NULL ;\n    cc::Texture2D *arg2 = (cc::Texture2D *) NULL ;\n    cc::Vec4 *arg3 = 0 ;\n    cc::Vec4 temp3 ;\n    \n    if(argc != 2) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 2);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Model>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,2,SWIGTYPE_p_cc__Texture2D\"); \n    // %typemap(in) SWIGTYPE&\n    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,3,SWIGTYPE_p_cc__Vec4\");\n    arg3 = &temp3;\n    \n    (arg1)->updateLightingmap(arg2,(cc::Vec4 const &)*arg3);\n    \n    \n    return true;\n}", "docstring": "// %typemap(in) SWIGTYPE*", "function_name": "js_cc_scene_Model_updateWorldBoundsForJSBakedSkinningModel"}, "id": 38, "seed": "static bool js_cc_scene_Model_updateLightingmap(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Model *arg1 = (cc::scene::Model *) NULL ;\n    cc::Texture2D *arg2 = (cc::Texture2D *) NULL ;\n    cc::Vec4 *arg3 = 0 ;\n    cc::Vec4 temp3 ;\n    \n    if(argc != 2) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 2);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Model>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,2,SWIGTYPE_p_cc__Texture2D\"); \n    // %typemap(in) SWIGTYPE&\n    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,3,SWIGTYPE_p_cc__Vec4\");\n    arg3 = &temp3;\n    \n    (arg1)->updateLightingmap(arg2,(cc::Vec4 const &)*arg3);\n    \n    \n    return true;\n}", "concepts": ["object instantiation", "typecasting"], "parsing_result": [{"instruction": "Write a Python class `Employee` that holds a full name, email, and salary. Provide methods for printing a sentence about the employee and calculating the yearly salary."}, {"instruction": "Write a Python program to represent a `Point` class with x and y coordinates. The class should have an `update` method that accepts x and y coordinates as arguments and assigns them to the x and y coordinates of the instance."}, {"instruction": "Implement a Python class `Student` that has attributes `name`, `age`, and `ranking`."}, {"instruction": "Implement a Python class `Person` with the following properties:\n- name: a string representing the person's name\n- age: an integer representing the person's age"}, {"instruction": "Implement a Python class `Stack` that implements a last-in, first-out (LIFO) stack."}, {"instruction": "Write a Python class `Node` that represents a node in a linked list."}, {"instruction": "Write a class `Rectangle` that calculates the area and perimeter of a rectangle."}, {"instruction": "Implement a Python class `Point` using the `__init__` and `__str__` methods."}, {"instruction": "Create a Python class `Person` with a method `say_name` that prints a person's name."}, {"instruction": "Implement a Python class `Point` that has attributes `x` and `y`."}, {"instruction": "Create a Python class `Fraction` that handles fractions."}, {"instruction": "Write a Python class, `Point`, that represents a point on a Cartesian plane."}, {"instruction": "Write a Python class `Point` that represents a point in 2D."}, {"instruction": "Implement a Python class `Fraction` that supports basic arithmetic operations on fractions, as well as equality checking."}, {"instruction": "Implement a Python class `BinarySearchTree` that defines a binary search tree."}, {"instruction": "Implement a Python class `Vector` that represents a geometric vector."}, {"instruction": "Write a Python class `Point` that defines the x and y coordinates of a point."}, {"instruction": "Write a class `Rectangle` that has a constructor that takes two arguments `width` and `height`, both of type `float`. It also has a method `area` that returns the area of the rectangle."}, {"instruction": "Write a Python class `Average` that takes an arbitrary number of integer values as input, and calculates the average of those values."}, {"instruction": "Implement a Python class `Point` with two attributes: `x` and `y`, and two methods: `distance` and `angle`."}, {"instruction": "Write a Python class `Student` that implements a student record."}, {"instruction": "Write a Python class `Point` that implements a point (x, y) in a 2D plane."}, {"instruction": "Create a Python class named `Point` that represents a two-dimensional point in space."}, {"instruction": "Implement a Python `Person` class with the following properties and behaviors:\n\n- `name`: a string that represents a person's name\n- `age`: an integer that represents a person's age\n- `speak`: a function that prints a greeting about the person's age and name\n- `add_age`: a function that increments the age of the person"}, {"instruction": "Write a Python class `Shape` that has a method `perimeter` that calculates the perimeter of a shape."}, {"instruction": "Write a Python class `Average` that calculates the average of any number of given integers."}, {"instruction": "Write a Python class `Stack` that implements a stack."}, {"instruction": "Implement a Python class `Circle` with the following methods:\n- `__init__`: initializes the instance with a radius (required)\n- `getArea`: returns the area of the circle\n- `getPerimeter`: returns the perimeter of the circle"}, {"instruction": "Implement a Python class `Account` that has two fields `balance` and `limit`. Instantiate an object of this class and implement getters and setters for the two fields."}, {"instruction": "Write a Python class `IntegerSet` to represent a set of integers, using a binary search tree."}, {"instruction": "Write a Python class `Fraction` that implements rational number arithmetic."}, {"instruction": "Create a Python class `Point` with attributes `x` and `y`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: vector iteration, Euclidean distance, geometry, minimum bounding box\n\n### Task", "fingerprint": null, "content": {"code": "GTEST_TEST(AabbTest, PlaneOverlap) {\n  // The aabb is *not* defined at the origin of the hierarchy frame.\n  const Vector3d p_HoBo_H = Vector3d{0.5, 0.25, -0.75};\n  const Vector3d half_width{1, 2, 3};\n  Aabb aabb_H{p_HoBo_H, half_width};\n\n  // Use brute force to find the position of the \"lowest\" corner of the box\n  // measured from Ho and expressed in frame P. \"Lowest\" means the corner with\n  // the smallest z-component. Note: the \"z-component\" trick only works because\n  // we expect the plane to be Pz = 0.\n  auto lowest_corner = [&half_width, &p_HoBo_H](const RotationMatrixd& R_PH) {\n    Vector3d p_HoCmin_P =\n        Vector3d::Constant(std::numeric_limits<double>::infinity());\n    for (const double x_sign : {-1.0, 1.0}) {\n      for (const double y_sign : {-1.0, 1.0}) {\n        for (const double z_sign : {-1.0, 1.0}) {\n          const Vector3d signs{x_sign, y_sign, z_sign};\n          const Vector3d p_BoC_H = half_width.cwiseProduct(signs);\n          const Vector3d p_HoC_P = R_PH * (p_HoBo_H + p_BoC_H);\n          if (p_HoC_P(2) < p_HoCmin_P(2)) {\n            p_HoCmin_P = p_HoC_P;\n          }\n        }\n      }\n    }\n    return p_HoCmin_P;\n  };\n\n  // Test epsilon is the product of three factors:\n  //  - machine epsilon\n  //  - Two orders of magnitude attributed to the various transformations.\n  //  - A scale factor that is the maximum of (box size, p_HoBo, p_PoHo)\n  const double kEps = 300 * std::numeric_limits<double>::epsilon();\n  // An arbitrary collection of orientations for the box's hierarchy frame H\n  // in the plane frame P.\n  std::vector<AngleAxisd> R_PHs{\n      AngleAxisd{0, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitZ()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 7, Vector3d{1, 2, 3}.normalized()},\n      AngleAxisd{7 * M_PI / 6, Vector3d{-1, 2, -3}.normalized()},\n      AngleAxisd{12 * M_PI / 7, Vector3d{1, -2, 3}.normalized()}\n  };\n  // An arbitrary collection of poses of the plane in the query frame Q.\n  std::vector<RigidTransformd> X_QPs{\n      RigidTransformd{},  // Identity matrix.\n      RigidTransformd{\n          RotationMatrixd{AngleAxisd{M_PI / 4, Vector3d{1, 2, 3}.normalized()}},\n          Vector3d{1, 2, 3}},\n      RigidTransformd{RotationMatrixd{AngleAxisd{\n                          12 * M_PI / 7, Vector3d{-1, -1, 3}.normalized()}},\n                      Vector3d{-3, -1, 2}}\n  };\n  for (const auto& angle_axis_PH : R_PHs) {\n    const RotationMatrixd R_PH{angle_axis_PH};\n    const Vector3d p_HoCmin_P = lowest_corner(R_PH);\n    for (const auto& X_QP : X_QPs) {\n      // Define the plane in the query frame Q.\n      const Vector3d& Pz_Q = X_QP.rotation().col(2);\n      Plane<double> plane_Q{Pz_Q, X_QP.translation()};\n\n      // We position Ho such that Cmin lies on the z = 0 plane in Frame P. Given\n      // we know p_HoCmin_P, we know its current z-value. To put it at zero, we\n      // must displace it in the negative of that z value. The x- and y-values\n      // don't matter, so we pick values we know not to be zero.\n      {\n        // Place the minimum corner just \"above\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Place the minimum corner just \"below\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n\n      // We repeat the same task but with Cmax. Cmax is the reflection of Cmin\n      // over Bo (the origin of the box). We'll express all vectors in the P\n      // frame so we can place that corner just above and below the Pz = 0\n      // plane using the same trick as documented above.\n      const Vector3d p_HoBo_P = R_PH * p_HoBo_H;\n      const Vector3d p_HoCmax_P = p_HoCmin_P + 2 * (p_HoBo_P - p_HoCmin_P);\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it up epsilon to\n        // guarantee intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it down epsilon to\n        // guarantee _no_ intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n    }\n  }\n}", "docstring": "// (if expect_overlap is false) or inside (if true).", "function_name": "GTEST_TEST"}, "id": 40, "seed": "GTEST_TEST(AabbTest, PlaneOverlap) {\n  // The aabb is *not* defined at the origin of the hierarchy frame.\n  const Vector3d p_HoBo_H = Vector3d{0.5, 0.25, -0.75};\n  const Vector3d half_width{1, 2, 3};\n  Aabb aabb_H{p_HoBo_H, half_width};\n\n  // Use brute force to find the position of the \"lowest\" corner of the box\n  // measured from Ho and expressed in frame P. \"Lowest\" means the corner with\n  // the smallest z-component. Note: the \"z-component\" trick only works because\n  // we expect the plane to be Pz = 0.\n  auto lowest_corner = [&half_width, &p_HoBo_H](const RotationMatrixd& R_PH) {\n    Vector3d p_HoCmin_P =\n        Vector3d::Constant(std::numeric_limits<double>::infinity());\n    for (const double x_sign : {-1.0, 1.0}) {\n      for (const double y_sign : {-1.0, 1.0}) {\n        for (const double z_sign : {-1.0, 1.0}) {\n          const Vector3d signs{x_sign, y_sign, z_sign};\n          const Vector3d p_BoC_H = half_width.cwiseProduct(signs);\n          const Vector3d p_HoC_P = R_PH * (p_HoBo_H + p_BoC_H);\n          if (p_HoC_P(2) < p_HoCmin_P(2)) {\n            p_HoCmin_P = p_HoC_P;\n          }\n        }\n      }\n    }\n    return p_HoCmin_P;\n  };\n\n  // Test epsilon is the product of three factors:\n  //  - machine epsilon\n  //  - Two orders of magnitude attributed to the various transformations.\n  //  - A scale factor that is the maximum of (box size, p_HoBo, p_PoHo)\n  const double kEps = 300 * std::numeric_limits<double>::epsilon();\n  // An arbitrary collection of orientations for the box's hierarchy frame H\n  // in the plane frame P.\n  std::vector<AngleAxisd> R_PHs{\n      AngleAxisd{0, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitZ()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 7, Vector3d{1, 2, 3}.normalized()},\n      AngleAxisd{7 * M_PI / 6, Vector3d{-1, 2, -3}.normalized()},\n      AngleAxisd{12 * M_PI / 7, Vector3d{1, -2, 3}.normalized()}\n  };\n  // An arbitrary collection of poses of the plane in the query frame Q.\n  std::vector<RigidTransformd> X_QPs{\n      RigidTransformd{},  // Identity matrix.\n      RigidTransformd{\n          RotationMatrixd{AngleAxisd{M_PI / 4, Vector3d{1, 2, 3}.normalized()}},\n          Vector3d{1, 2, 3}},\n      RigidTransformd{RotationMatrixd{AngleAxisd{\n                          12 * M_PI / 7, Vector3d{-1, -1, 3}.normalized()}},\n                      Vector3d{-3, -1, 2}}\n  };\n  for (const auto& angle_axis_PH : R_PHs) {\n    const RotationMatrixd R_PH{angle_axis_PH};\n    const Vector3d p_HoCmin_P = lowest_corner(R_PH);\n    for (const auto& X_QP : X_QPs) {\n      // Define the plane in the query frame Q.\n      const Vector3d& Pz_Q = X_QP.rotation().col(2);\n      Plane<double> plane_Q{Pz_Q, X_QP.translation()};\n\n      // We position Ho such that Cmin lies on the z = 0 plane in Frame P. Given\n      // we know p_HoCmin_P, we know its current z-value. To put it at zero, we\n      // must displace it in the negative of that z value. The x- and y-values\n      // don't matter, so we pick values we know not to be zero.\n      {\n        // Place the minimum corner just \"above\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Place the minimum corner just \"below\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n\n      // We repeat the same task but with Cmax. Cmax is the reflection of Cmin\n      // over Bo (the origin of the box). We'll express all vectors in the P\n      // frame so we can place that corner just above and below the Pz = 0\n      // plane using the same trick as documented above.\n      const Vector3d p_HoBo_P = R_PH * p_HoBo_H;\n      const Vector3d p_HoCmax_P = p_HoCmin_P + 2 * (p_HoBo_P - p_HoCmin_P);\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it up epsilon to\n        // guarantee intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it down epsilon to\n        // guarantee _no_ intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n    }\n  }\n}", "concepts": ["vector iteration", "Euclidean distance", "geometry", "minimum bounding box"], "parsing_result": [{"instruction": "Write a function `findMaxRect` that takes a vector of vectors and returns the index of the vector with the largest area enclosed by a rectangle."}, {"instruction": "Write a Python function `getBoundingBox` that takes a list of points and returns the minimum bounding box of those points."}, {"instruction": "Implement a Python function `findCircleCenter` that returns the center of a circle when given the radius and the coordinates of the center."}, {"instruction": "Implement a Python function `calculateHull` that takes a list of points and returns the minimum bounding rectangle."}, {"instruction": "Given a set of points `P`, find the minimum bounding box that contains all of the points."}, {"instruction": "Create a Python function `findClosest` that returns the two closest points from a list of points."}, {"instruction": "- Implement a function that takes in two lists of points, and returns the minimum bounding box around them.\n- The minimum bounding box is the smallest box that can be drawn around the points, while still containing all the points.\n- The box should be defined by two points, which are the two corners of the box.\n- The function should return a list of two points, where each point is a list of floats."}, {"instruction": "Given a list of 2D points, find the bounding box around the points, or the smallest rectangle that can contain all the points."}, {"instruction": "Write a Python function `find_minimum_bounding_box` that takes in a set of 2D points and returns the minimum bounding box that contains all of the points."}, {"instruction": "Write a Python function `calculateDistance` that calculates the distance between two points on a 2D plane."}, {"instruction": "Write a Python function `findMinDistance` that takes two vectors of x-y pairs and returns the shortest Euclidean distance between any two points."}, {"instruction": "Write a Python function `farthest_points` that takes a list of 2D points and returns the two points that are farthest from each other."}, {"instruction": "Write a Python function `distanceBetweenPoints` that calculates the Euclidean distance between two points."}, {"instruction": "Write a Python function `pointsInsideCircle` that checks if a vector of points are inside a circle with a given radius and center point."}, {"instruction": "Create a Python function `find_centroid` that finds the centroid of a given vector."}, {"instruction": "Create a Python function `findClosest` that takes a list of coordinates and returns the coordinates of the pair that are closest to each other."}, {"instruction": "Create a Python function `nearest` that takes a vector of points and returns the point closest to the origin."}, {"instruction": "Implement a Python function `euclidDist` that takes two points on a 2D plane and returns the Euclidean distance between the points."}, {"instruction": "Create a Python function `collisionDetection` that detects collision between two arbitrarily-shaped objects."}, {"instruction": "Implement a function `furthestPoints` that returns the furthest points from a given set of points."}, {"instruction": "Write a Python function `findOptimalPlacements` that returns a vector of vectors of two integers, representing the optimal position of one or more peanuts in front of a window."}, {"instruction": "Create a Python function `getDistance` that takes a set of points and returns the Euclidean distance between them."}, {"instruction": "Create a Python function `closestPair` that finds the closest pair of points in a given list of 2D points."}, {"instruction": "Write a Python function `distance` that returns the Euclidean distance between two points."}, {"instruction": "Write a Python function `findClosestPair` that returns the closest pair of points from a point set."}, {"instruction": "Create a Python function `gravity` that calculates the acceleration due to gravity of an object at a distance."}, {"instruction": "Write a Python function `findBoundingBox` that takes two vectors of coordinates and returns the minimum bounding box (mouth, eye, and nose) as a vector of pairs."}, {"instruction": "Write a Python function `distanceBetweenPoints` that takes two points and returns the Euclidean distance between them."}, {"instruction": "Implement a Python function `findCenter` that finds the center of a cluster of points."}, {"instruction": "Write a Python function `minBoundingBox` that computes the minimum bounding box of a set of points."}, {"instruction": "Write a Python function `closestPair` that finds the closest pair of points in a vector of points."}, {"instruction": "Implement a function that takes a list of points and returns the minimum bounding box for those points."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: string manipulation, string concatenation, substring extraction, character encoding\n/README.md\n# Programming-Concepts\nA repository for a weekly collection of programming concepts\n\n## Resources\n- [The C++ Programming Language](https://www.stroustrup.com/Programming/)\n\n## Contributing\nIf you are a beginner looking to contribute to the repository, feel free to fork the repository and submit a pull request.\n\n## License\nThis repository is licensed under the [MIT License](LICENSE).\n\n### Task", "fingerprint": null, "content": {"code": "string cc_smart_shorten(string& s, int limiter){\n    //s = s.substr(0, limiter * 2);\n    int nl_pos = s.find_first_of(\"<\");\n    s = s.substr(0, nl_pos);\n    if(s.size() <= limiter) return s;\n\n    string ret = s.substr(0, limiter);\n    if(nl_pos <= limiter) return ret;\n\n    for(int i = limiter; i < s.size(); ++i){\n        if(i < s.size() - 3){\n            if(s[i] == -17 && s[i+1] == -68 && s[i+2] == -116) break;\n            if(s[i] == -29 && s[i+1] == -128 && s[i+2] == -126) break;\n            if(s[i] == ',' || s[i] == '.') break;\n        }\n        ret += s[i];\n    }\n\n    return ret;\n}", "docstring": "/* Exit immediately */", "function_name": "database_fatal"}, "id": 41, "seed": "string cc_smart_shorten(string& s, int limiter){\n    //s = s.substr(0, limiter * 2);\n    int nl_pos = s.find_first_of(\"<\");\n    s = s.substr(0, nl_pos);\n    if(s.size() <= limiter) return s;\n\n    string ret = s.substr(0, limiter);\n    if(nl_pos <= limiter) return ret;\n\n    for(int i = limiter; i < s.size(); ++i){\n        if(i < s.size() - 3){\n            if(s[i] == -17 && s[i+1] == -68 && s[i+2] == -116) break;\n            if(s[i] == -29 && s[i+1] == -128 && s[i+2] == -126) break;\n            if(s[i] == ',' || s[i] == '.') break;\n        }\n        ret += s[i];\n    }\n\n    return ret;\n}", "concepts": ["string manipulation", "string concatenation", "substring extraction", "character encoding\n/README.md\n# Programming-Concepts\nA repository for a weekly collection of programming concepts\n\n## Resources\n- [The C++ Programming Language](https://www.stroustrup.com/Programming/)\n\n## Contributing\nIf you are a beginner looking to contribute to the repository", "feel free to fork the repository and submit a pull request.\n\n## License\nThis repository is licensed under the [MIT License](LICENSE)."], "parsing_result": [{"instruction": "Source\n- [Codewars](https://www.codewars.com/)\n/c++/example-9.cpp\n// Write a C++ function celsiusToFahrenheit that converts Celsius to Fahrenheit.\n// The formula for conversion is:\n// F = C * 9 / 5 + 32\n\n#include <iostream>\n\nfloat celsiusToFahrenheit(float celsius) {\n    return celsius * 9 / 5 + 32;\n}\n\nint main() {\n    std::cout << celsiusToFahrenheit(0) << std::endl;\n    std::cout << celsiusToFahrenheit(100) << std::endl;\n    std::cout << celsiusToFahrenheit(212) << std::endl;\n\n    return 0;\n}\n/c++/example-1.cpp\n// Create a C++ function charFrequency that returns a frequency map of characters in a string.\n// The map returned should contain the characters in the string as keys and their frequencies as values.\n\n#include <iostream>\n#include <map>\n\nstd::map<char, int> charFrequency(std::string str) {\n    std::map<char, int> m; // empty map\n\n    // iterate through str\n    for (char ch : str) {\n        // if ch is in m, increment its value\n        if (m.count(ch)) {\n            ++m[ch];\n        } else {\n            // otherwise, add it as a new key with a value of 1\n            m.insert(std::make_pair(ch, 1));\n        }\n    }\n\n    return m;\n}\n\nint main() {\n    std::cout << charFrequency(\"hello\") << std::endl;\n    std::cout << charFrequency(\"abc\") << std::endl;\n    std::cout << charFrequency(\"aabbcc\") << std::endl;\n\n    return 0;\n}\n/c++/example-2.cpp\n// Create a C++ function isPrime that checks if a number is prime.\n\n#include <iostream>\n\nbool isPrime(int num) {\n    // 0 and 1 are not prime numbers\n    if (num < 2) {\n        return false;\n    }\n\n    // iterate from 2 to floor(sqrt(num))\n    for (int i = 2; i * i <= num; ++i) {\n        // if any number in the range divides num evenly\n        // num is not prime\n        if (num % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    std::cout << boolalpha << isPrime(0) << std::endl;\n    std::cout << boolalpha << isPrime(1) << std::endl;\n    std::cout << boolalpha << isPrime(2) << std::endl;\n    std::cout << boolalpha << isPrime(3) << std::endl;\n    std::cout << boolalpha << isPrime(4) << std::endl;\n    std::cout << boolalpha << isPrime(5) << std::endl;\n    std::cout << boolalpha << isPrime(6) << std::endl;\n    std::cout << boolalpha << isPrime(7) << std::endl;\n    std::cout << boolalpha << isPrime(8) << std::endl;\n    std::cout << boolalpha << isPrime(9) << std::endl;\n    std::cout << boolalpha << isPrime(10) << std::endl;\n    std::cout << boolalpha << isPrime(11) << std::endl;\n    std::cout << boolalpha << isPrime(12) << std::endl;\n\n    return 0;\n}"}, {"instruction": "Coding Guidelines\n- **Do not** copy code from other people's solutions.\n- **Do not** copy code from other repositories.\n- **Do not** copy code from online resources.\n- **Do not** copy code from exams (even if the exam is fake).\n- **Do not** ask anyone else to help you with your task.\n- **Do not** use the internet to find solutions to tasks.\n- **Do not** use solutions to tasks you found on the internet.\n- **Do not** use solutions to tasks you found on the internet.\n- **Do not** ask others to help you with your task.\n- **Do not** ask others to help you with your task.\n- **Do not** ask others to help you with your task.\n- **Do not** ask others to help you with your task.\n- **Do not** ask others to help you with your task.\n\n**This is not a malicious request. This is a request for a good-faith effort to continue to improve the repository.**\n\nThis repository is hosted on GitHub, and the owner of the repository grants the users the right to use it for their personal needs.\n\n### Repository Maintenance Guidelines\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n\n**This is not a malicious request. This is a request for a good-faith effort to continue to improve the repository.**\n\nThis repository is hosted on GitHub, and the owner of the repository grants the users the right to use it for their personal needs.\n\n### Resources\n- [Checkstyle](https://checkstyle.sourceforge.io/)\n- [Linux Subsystem for Windows](https://docs.microsoft.com/en-us/windows/wsl/install-win10)\n- [Visual Studio Code](https://code.visualstudio.com/)\n- [Visual Studio](https://visualstudio.microsoft.com/)\n- [Visual Studio Code Cpp Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)\n- [Git for Windows](https://git-scm.com/download/win)\n- [GitHub Desktop](https://desktop.github.com/)\n- [Visual Studio Code Markdown Preview Enhanced](https://github.com/shd101wyy/vscode-markdown-preview-enhanced)\n- [Visual Studio Code Spell Checker](https://github.com/streetsidesoftware/vscode-spell-checker)\n- [Visual Studio Code TSLint](https://github.com/Microsoft/vscode-tslint)\n/C++/dev/solution.cpp\n#include <iostream>\n#include <array>\n#include <string>\n\nusing std::cout;\nusing std::endl;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n\n    return 0;\n}\n/C++/dev/solution_hard.cpp\n#include <iostream>\n#include <array>\n#include <string>\n\nusing std::cout;\nusing std::endl;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n\n    return 0;\n}\n/C++/dev/Makefile\n# TODO: add a Makefile"}, {"instruction": "Form\n\nCreate a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Format\nCreate a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Format\nEach task must adhere to the following format:\n- `category`: the type of task (e.g., function implementation, class implementation, or program implementation)\n- `language`: the programming language to be used\n- `difficulty`: the complexity level of the task (e.g., easy, medium, or hard)\n- `concepts`: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Submission Process\n- For each task, create a branch with the format `task1-task1-submission`, where `task1-task1-submission` is the name of the task being submitted.\n- Create a pull request that will merge the branch into the `main` branch.\n/Tasks/task9-celsiusToFahrenheit/celsiusToFahrenheit.cpp\n#include <iostream>\n\nfloat celsiusToFahrenheit(float celsius) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task1-maxOfTwo/maxOfTwo.cpp\n#include <iostream>\n\nint maxOfTwo(int a, int b) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task8-celsiusToFahrenheit/README.md\n# Task 8 - Celsius to Fahrenheit\nImplement a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit and returns the result./Tasks/task5-findMin/findMin.cpp\n#include <iostream>\n\nint findMin(int* arr, int size) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task6-swap/swap.cpp\n#include <iostream>\n\nvoid swap(int* a, int* b) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task4-maxOfTwo/maxOfTwo.cpp\n#include <iostream>\n\nint maxOfTwo(int a, int b) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task3-countVowels/countVowels.cpp\n#include <iostream>\n\nint countVowels(std::string str) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task2-isPrime/isPrime.cpp\n#include <iostream>\n\nbool isPrime(int n) {\n\n}\n\nint main() {\n\n    return 0;\n}"}, {"instruction": "Ideas\n- Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n#"}, {"instruction": "Submission Guidelines\nAs part of your submission, please include:\n\n- The original task, including category, language, difficulty, and concepts.\n- Your solution to the task, in the appropriate language.\n- A link to your profile page in your GitHub account.\n\n### Review Guidelines\nWhen reviewing your pull request, please consider the following:\n\n- **Readability:** Does the solution follow good coding practices and is it easy to understand?\n- **Up-to-date:** Have you updated the solution to the latest version of the programming concept?\n- **Originality:** Is the solution unique and does it address the original programming concept?\n- **Testing:** Have you included tests that verify the solution is correct and address the expected behavior?\n- **Documentation:** Do you have a comprehensive README file that details the task, solution, and any necessary resources?\n- **Comments:** Do you have comments in your code that explain why you're doing something a certain way?\n- **Efficiency:** Have you considered the efficiency of your solution and are you using appropriate data structures and algorithms?\n- **Licensing:** Have you followed the licensing guidelines and included attribution in your solution?"}, {"instruction": "Guidelines\nCreate a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Ideas\n- Implement a function that returns the number of vowels in a string (e.g., \"Hello World\" -> 3)\n- Implement a function that returns the number of consonants in a string (\"Hello World\" -> 8)\n- Implement a function that reverses a string (\"Hello\" -> \"olleH\")\n- Implement a function that determines if a string is a palindrome (\"racecar\" -> true, \"hello\" -> false)\n- Implement a function that determines if a string is a pangram (e.g., \"The quick brown fox jumps over the lazy dog\" -> true)\n- Implement a function that determines if a string is a rotation of another string (e.g., \"Hello World\" rotates to \"World Hello\" -> true)\n- Create a function that returns a string with all non-alphanumeric characters removed (e.g., \"Hello World!\" -> \"HelloWorld\"\n- Implement a function that determines if a string is a pangram using a frequency map (e.g., \"The quick brown fox jumps over the lazy dog\" -> true)\n- Implement a function that determines if a number is prime (e.g., 9 -> false, 11 -> true)\n- Create a function that returns a frequency map of characters in a string (e.g., \"Hello World!\" -> {\"H\" -> 1, \"e\" -> 2, \"l\" -> 3, \"o\" -> 2, \" \" -> 1, \"W\" -> 1, \"r\" -> 1, \"d\" -> 1, \"!\" -> 1})\n- Implement a function that returns the nth Fibonacci number (e.g., 0 -> 1, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 5, 5 -> 8, 6 -> 13, 7 -> 21, 8 -> 34, 9 -> 55)\n- Implement a function that returns the value of a mathematical expression (e.g., \"1 + 2\" -> 3, \"1 + 5\" -> 6, \"3 * 5\" -> 15, \"(1 + 2) * 5\" -> 15, \"4 + (12 / 3)\" -> 5)\n/Examples/C++/celsiusToFahrenheit.cpp\n/*\n    Author: \n    Date: 4/11/2018\n    Purpose: Convert Celsius to Fahrenheit\n*/\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int celsius;\n    float fahrenheit;\n\n    cout << \"Enter a temperature in Celsius: \";\n    cin >> celsius;\n\n    fahrenheit = celsius * (9.0/5.0) + 32;\n\n    cout << celsius << \" degrees Celsius is \" << fahrenheit << \" degrees Fahrenheit.\";\n\n    return 0;\n}\n/Examples/C++/findMin.cpp\n/*\n    Author: \n    Date: 4/14/2018\n    Purpose: Find the minimum element in a vector of integers\n*/\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMin(vector<int> &arr) {\n    int min = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return min;\n}\n\nint main() {\n    vector<int> arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};\n    int min = findMin(arr);\n    cout << min;\n    return 0;\n}\n/Examples/C++/swap.c\n/*\n    Author: \n    Date: 4/14/2018\n    Purpose: Swap the values of two integers using pass-by-reference\n*/\n\n#include <iostream>\nusing namespace std;\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int a = 0, b = 0;\n    cout << \"Enter a: \";\n    cin >> a;\n    cout << \"Enter b: \";\n    cin >> b;\n    swap(a, b);\n    cout << \"a = \" << a << \", b = \" << b;\n\n    return 0;\n}\n/Examples/C++/maxOfTwo.cpp\n/*\n    Author: \n    Date: 4/11/2018\n    Purpose: Return the larger of two integers using the ternary operator\n*/\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cout << \"Enter a: \";\n    cin >> a;\n    cout << \"Enter b: \";\n    cin >> b;\n    cout << \"max(\" << a << \", \" << b << \") = \" << (a > b ? a : b);\n    return 0;\n}\n/Examples/C++/countVowels.c\n/*\n    Author: \n    Date: 4/11/2018\n    Purpose: Count the number of vowels (a, e, i, o, u) in a string\n    Properties: category: function implementation, language: C++, difficulty: easy, concepts: string traversal, case-insensitive comparison, loop with condition\n*/\n\n#include <iostream>\nusing namespace std;\n\nint countVowels(string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    string s;\n    cout << \"Enter a string: \";\n    getline(cin, s);\n    int count = countVowels(s);\n    cout << count << \" vowels in \" << s;\n    return 0;\n}"}, {"instruction": "Submission Workflow\n1. Fork the repository.\n2. Create a new folder in the root directory of this repository named `{concept}`.\n3. Create a new file in the folder named `{language}-{difficulty}-{concept}.md`.\n4. Write a description of the programming concept within the file, and copy the template below.\n5. Open a pull request against the main branch.\n\n```md"}, {"instruction": "Submission Process\n1. Create a new branch named `task-<task number>` and make your changes in this branch.\n2. Create a pull request from this branch to `master` branch.\n/task-11/README.md\n# Task 11\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: hard\n- concepts: bitwise operators, XOR, AND, OR, truth tables, boolean algebra\n\n## Task\nCreate a function `bitwiseAND` that takes two integers and returns the bitwise AND of the two.\n/task-1/README.md\n# Task 1\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: arithmetic operations, assignment, types\n\n## Task\nCreate a C++ function `isEven` that takes an integer and returns true if the integer is even, false otherwise.\n/task-3/README.md\n# Task 3\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: string manipulation, string concatenation, substring extraction, character encoding\n\n## Task\nCreate a function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n/task-5/README.md\n# Task 5\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: linear search, comparison, iteration\n\n## Task\nCreate a C++ function `findMin` to return the smallest element in a vector of integers.\n/task-2/README.md\n# Task 2\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: arithmetic operations, assignment, types\n\n## Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n/task-10/README.md\n# Task 10\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: arithmetic conversion, temperature formulas\n\n## Task\nCreate a function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n/task-9/README.md\n# Task 9\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: medium\n- concepts: recursion, base case, integer sequences\n\n## Task\nImplement a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n/task-4/README.md\n# Task 4\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: ternary operator, conditional logic, function return\n\n## Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n/task-8/README.md\n# Task 8\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: arithmetic conversion, temperature formulas\n\n## Task\nCreate a function `fahrenheitToCelsius` that converts Fahrenheit to Celsius.\n/task-6/README.md\n# Task 6\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: pass-by-reference, temporary variable, in-place mutation\n\n## Task\nCreate a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n/task-1/task-1.cpp\n#include <iostream>\nusing namespace std;\n\nbool isEven(int n) {\n    return (n % 2 == 0);\n}\n\nint main() {\n    int n;\n    cout << \"Enter an integer: \";\n    cin >> n;\n    if (isEven(n)) {\n        cout << \"The integer is even\";\n    } else {\n        cout << \"The integer is odd\";\n    }\n    cout << endl;\n    return 0;\n}\n/task-7/README.md\n# Task 7\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: bitwise operators, XOR, AND, OR, truth tables, boolean algebra\n\n## Task\nImplement a C++ function `bitwiseXOR` that takes two integers and returns the bitwise XOR of the two.\n/task-7/task-7.cpp\n#include <iostream>\nusing namespace std;\n\nint bitwiseXOR(int a, int b) {\n    return a ^ b;\n}\n\nint main() {\n    int a, b;\n    cout << \"Enter two integers: \";\n    cin >> a >> b;\n    cout << \"The bitwise XOR of \" << a << \" and \" << b << \" is \" << bitwiseXOR(a, b) << endl;\n    return 0;\n}\n/task-12/task-12.cpp\n#include <iostream>\nusing namespace std;\n\nint bitwiseAND(int a, int b) {\n    return a & b;\n}\n\nint main() {\n    int a, b;\n    cout << \"Enter two integers: \";\n    cin >> a >> b;\n    cout << \"The bitwise AND of \" << a << \" and \" << b << \" is \" << bitwiseAND(a, b) << endl;\n    return 0;\n}"}, {"instruction": "Sources\n- [Code Wars](https://www.codewars.com/)\n- [Codingame](https://www.codingame.com/)\n- [CodeFights](https://codefights.com)\n- [CodeChef](https://www.codechef.com)\n- [CodeSignal](https://codesignal.com)\n- [LeetCode](https://leetcode.com)\n- [TopCoder](https://www.topcoder.com)\n- [Project Euler](https://projecteuler.net)\n- [HackerRank](https://www.hackerrank.com)\n- [HackerEarth](https://www.hackerearth.com)\n- [HackerRank](https://www.hackerrank.com)\n/CPP/maxOfTwo.cpp\n#include <iostream>\n\nint mof2(int a, int b){\n  if(a < b){\n    return b;\n  }\n  else{\n    return a;\n  }\n}\n\nint main(){\n  int a, b;\n  std::cin >> a >> b;\n  std::cout << mof2(a, b);\n}\n/C/factorial.c\n#include <stdio.h>\n\nint factorial(int n){\n  int i;\n  int result = 1;\n  for(i = 1; i <= n; i++){\n    result *= i;\n  }\n  return result;\n}\n\nint main(){\n  int n;\n  printf(\"%d\\n\", factorial(n));\n}\n/C++/countVowels.cpp\n#include <iostream>\n#include <string>\n\nint countVowels(std::string str){\n  int count = 0;\n  for(int i = 0; i < str.size(); i++){\n    if(str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u'){\n      count += 1;\n    }\n  }\n  return count;\n}\n\nint main(){\n  std::string str;\n  getline(std::cin, str);\n  std::cout << countVowels(str) << std::endl;\n}"}, {"instruction": "Submission Guidelines\n- Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Categories\n- [x] array implementation\n- [x] class implementation\n- [x] function implementation\n- [x] program implementation\n- [x] string implementation"}, {"instruction": "Submission\nSubmit a pull request with your task.\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Complete the function below\nint findMin(vector<int> v) {\n\tint min = v[0];\n\tfor (int i = 0; i < v.size(); i++)\n\t{\n\t\tif (v[i] < min)\n\t\t{\n\t\t\tmin = v[i];\n\t\t}\n\t}\n\treturn min;\n}\n\n//Driver code\nint main() {\n    vector<int> v = { 1, 2, 3, 4, 5 };\n    int result = findMin(v);\n    cout << result;\n}\n#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\n// Complete the function below\nunordered_map<char, int> charFrequency(string s) {\n\tunordered_map<char, int> freq;\n\tfor (int i = 0; i < s.size(); i++)\n\t{\n\t\tfreq[s[i]] += 1;\n\t}\n\treturn freq;\n}\n\n//Driver code\nint main() {\n    string s = \"Hello World!\";\n    unordered_map<char, int> result = charFrequency(s);\n    cout << result['H'];\n    cout << result['o'];\n}\n#include <iostream>\nusing namespace std;\n\nint findMin(int a, int b) {\n\treturn a < b ? a : b;\n}\n\n//Driver code\nint main() {\n\tint a = 2, b = 4;\n\tint result = findMin(a, b);\n\tcout << result;\n}\n#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\n// Complete the function below\nbool isPrime(int n) {\n\tfor (int i = 2; i <= n / 2; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n//Driver code\nint main() {\n\tint n;\n\tcin >> n;\n\tbool result = isPrime(n);\n\tcout << result;\n}\n#include <iostream>\nusing namespace std;\n\nint countVowels(string s) {\n\tint vowels = 0;\n\tfor (int i = 0; i < s.size(); i++)\n\t{\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\t\t{\n\t\t\tvowels += 1;\n\t\t}\n\t}\n\treturn vowels;\n}\n\n//Driver code\nint main() {\n\tstring s;\n\tcin >> s;\n\tint result = countVowels(s);\n\tcout << result;\n}\n#include <iostream>\nusing namespace std;\n\n// Complete the function below\nint celsiusToFahrenheit(int celsius) {\n\treturn (celsius * 1.8) + 32;\n}\n\n//Driver code\nint main() {\n\tint celsius;\n\tcin >> celsius;\n\tint result = celsiusToFahrenheit(celsius);\n\tcout << result;\n}\n#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\n// Complete the function below\nbool isPrime(int n) {\n\tfor (int i = 2; i <= n / 2; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n//Driver code\nint main() {\n\tint n;\n\tcin >> n;\n\tbool result = isPrime(n);\n\tcout << result;\n}"}, {"instruction": "Format\nThe format of programming tasks is prescribed by the [Code Review StackExchange](https://codereview.stackexchange.com/tags/source-code/info) guidelines.\n\n### Note\nThis repository is a collection of programming concepts. It is not a programming course.\n/* Write a C++ function swap that exchanges the values of two integers using pass-by-reference. */\n\n#include <iostream>\nusing std::cin;\nusing std::cout;\nusing std::endl;\n\nint main() {\n    int num1, num2;\n    cout << \"Enter two integers: \";\n    cin >> num1 >> num2;\n    cout << \"num1 = \" << num1 << \", num2 = \" << num2 << endl;\n\n    cout << \"Swap the values...\" << endl;\n    int temp = num1;\n    num1 = num2;\n    num2 = temp;\n    cout << \"num1 = \" << num1 << \", num2 = \" << num2 << endl;\n\n    return 0;\n}"}, {"instruction": "Format\nEach task is formatted as follows:\n\n```\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nWrite a C++ function `isPrime` that checks if a number is prime.\n```\n\nThe properties of a task are separated by colons and are placed on their own line above the task description. The task is then separated by a line of three dashes and is followed by a single space.\n\n## Credits\nThis repository was created as a project for the [Programming Concepts](https://www.reddit.com/r/programmingconcepts) subreddit.\ncharFrequency(char *string)\n{\n    map<char, int> frequencyMap;\n\n    for (int i = 0; string[i]!= '\\0'; i++)\n    {\n        if (frequencyMap.find(string[i]) == frequencyMap.end())\n        {\n            frequencyMap.insert({ string[i], 1 });\n        }\n        else\n        {\n            frequencyMap[string[i]] += 1;\n        }\n    }\n\n    return frequencyMap;\n}\n\nint main()\n{\n    char string[] = \"This is a string to test the function.\";\n\n    map<char, int> frequencyMap = charFrequency(string);\n\n    for (auto it = frequencyMap.begin(); it!= frequencyMap.end(); ++it)\n    {\n        cout << it->first << \" appears \" << it->second << \" times.\" << endl;\n    }\n\n    return 0;\n}/C++/charFrequency.cpp\n#include <iostream>\n#include <map>\n\nusing namespace std;\n\nmap<char, int>"}, {"instruction": "Template\n```\n## Properties\ncategory: category\nlanguage: language\ndifficulty: difficulty\nconcepts: concept1, concept2, etc.\n\n### Task\n```\n/CPP/isPrime.cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    } else if (n <= 3) {\n        return true;\n    } else if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n\n    for (int i = 6; i * i <= n; i += 6) {\n        if (n % (i - 1) == 0 || n % (i + 1) == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    int num = 0;\n\n    cout << \"Enter an integer: \";\n    cin >> num;\n\n    cout << num << \" is prime: \" << isPrime(num) << endl;\n\n    return 0;\n}"}, {"instruction": "-Submission Checklist\n- [ ] The task has a clear description of the problem\n- [ ] The task has a clear set of specifications\n- [ ] The task has one or more examples\n- [ ] The task has a clear set of examples\n- [ ] The task has a clear set of expected outputs\n- [ ] The task has a clear set of expected errors\n- [ ] The task has a clear set of sample solutions\n- [ ] The task has a clear set of sample tests\n- [ ] The task has a clear set of sample inputs and outputs\n- [ ] The task has a clear set of unit tests/c++/fibonacci.cpp\n// C++ program to find the Nth Fibonacci number \r\n// using recursion\r\n#include <iostream>\r\nusing namespace std;\r\n\r\n// Recursive function to find Nth Fibonacci number \r\nint fibonacci(int n) \r\n{ \r\n\tif (n <= 1) \r\n\t\treturn n; \r\n\treturn fibonacci(n - 1) + fibonacci(n - 2); \r\n} \r\n\r\n// Driver code \r\nint main() \r\n{ \r\n\tint n = 9; \r\n\tcout << fibonacci(n); \r\n\treturn 0; \r\n}"}, {"instruction": "Guidelines\nPlease follow the guidelines outlined in [this article](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file-a-practical-guide/) when creating a task guide.#include <iostream>\n#include <map>\n#include <string>\n#include <vector>\nusing namespace std;\n\nmap<char, int> charFrequency(string s) {\n  // create frequency map\n  map<char, int> freq;\n  // map iterator\n  map<char, int>::iterator it;\n  // loop through string\n  for(int i = 0; i < s.length(); i++) {\n    // convert string to char\n    char c = s.at(i);\n    // increment frequency for each character\n    freq[c]++;\n  }\n  return freq;\n}\n\nint main() {\n  // your code goes here\n  cout << \"Hello World!\" << endl;\n  string s = \"Hello World!\";\n  map<char, int> freq = charFrequency(s);\n  for(auto i : freq) {\n    cout << i.first << \": \" << i.second << endl;\n  }\n}#include <iostream>\n#include <map>\nusing namespace std;\n\nbool isPrime(int n) {\n  // return false for non-positive numbers\n  if(n <= 0) return false;\n  // loop through numbers from 2 to n-1\n  for(int i = 2; i < n; i++) {\n    // if divisible by any of those numbers, return false\n    if(n % i == 0) return false;\n  }\n  // if none of those numbers were divisible, return true\n  return true;\n}\n\nint main() {\n  // your code goes here\n  cout << \"Hello World!\" << endl;\n  cout << isPrime(5) << endl;\n  cout << isPrime(11) << endl;\n  cout << isPrime(-5) << endl;\n  cout << isPrime(0) << endl;\n}"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: class member function, class initialization, function definition\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_SubModel_update(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SubModel *arg1 = (cc::scene::SubModel *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::SubModel>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->update();\n    \n    \n    return true;\n}", "docstring": "// js_dtoroverride", "function_name": "js_delete_cc_scene_SubModel"}, "id": 45, "seed": "static bool js_cc_scene_SubModel_update(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SubModel *arg1 = (cc::scene::SubModel *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::SubModel>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->update();\n    \n    \n    return true;\n}", "concepts": ["class member function", "class initialization", "function definition"], "parsing_result": [{"instruction": "Create a Python class `LinkedList` that implements a singly linked list."}, {"instruction": "Create a Python class `Rectangle` that represents a rectangle on a Cartesian plane with a given width and height."}, {"instruction": "Create a Python class `Book` with the following attributes:\n- title: the title of the book, a string\n- author: the author of the book, a string\n- pages: the number of pages in the book, an integer\n\nThe class should have a single instance method `summary()` that prints a summary of the book to standard output."}, {"instruction": "Create a Python class `Polynomial` that represents a polynomial. The class must have two member functions: `add` and `evaluate`."}, {"instruction": "Write a Python class `Node` that represents a node in a linked list."}, {"instruction": "Design a Python class `Person` with the following properties:\n- name\n- age\n- zipcode\n\nDesign a Python class `Student` that inherits the properties of `Person` and adds the following properties:\n- school\n- grade\n\nDesign a Python class `Teacher` that inherits the properties of `Person` and adds the following properties:\n- department\n- yearsOfExperience"}, {"instruction": "Write a Python program to implement the Fibonacci sequence."}, {"instruction": "Create a Python class `Rectangle` with instance variables `length` and `width` and two member functions `getArea` and `getPerimeter`."}, {"instruction": "Create a class `Node` with a `next` member. Write a function `reverseNodes` that takes as input a `Node` and reverses the nodes in place."}, {"instruction": "Implement a Python class `Triangle` that represents a 2-dimensional triangle with vertices at (x, y) and (x+1, y+1)."}, {"instruction": "Implement a Python `Point` class with attributes `x` and `y` that represents a two-dimensional point."}, {"instruction": "Implement a cute cat class and write a Python program that creates two cat objects and prints them out."}, {"instruction": "Implement a Python class `Student` that contains the following:\n\n- Student ID\n- Name\n- Grade"}, {"instruction": "Create a new Python program named `hash-map.py` that implements a hash map using a dictionary."}, {"instruction": "Implement a Python class `Rectangle` with the following properties:\n- width\n- height\n- area\n- perimeter"}, {"instruction": "Create a Python class `Point` that contains two class member variables `x` and `y` of type `int`. Create appropriate class member functions to find out the distance to a point."}, {"instruction": "Write a Python class `BankAccount` that has an associated balance and a `deposit` function."}, {"instruction": "Create a Python `Node` class that implements a singly linked list node."}, {"instruction": "Implement a Python class `FizzBuzz` that allows for a given integer `n` to be passed in and prints out the numbers from 1 to `n` in succession, except for multiples of 3 print \"Fizz\", multiples of 5 print \"Buzz\", and multiples of both print \"FizzBuzz\"."}, {"instruction": "Write a Python program that implements the `Factorial` class. The class must have a `factorial` function that calculates the factorial of a non-negative integer."}, {"instruction": "Write a Python program to simulate the rolling of two dice."}, {"instruction": "Implement a Python class `Circle` that represents a simple circle. The class should have the following member functions:\n\n- `getArea()`: returns the area of the circle\n- `getCircumference()`: returns the circumference of the circle"}, {"instruction": "Create a Python class `Stack` that has a `push` method which adds an element to the stack and a `pop` method which removes an element from the stack."}, {"instruction": "Implement a class `Student` with appropriate member variables and functions."}, {"instruction": "Write a Python class `Calculator` that has the following functions:\n\n- `add`: adds two numbers\n- `subtract`: subtracts one number from another\n- `multiply`: multiplies two numbers\n- `divide`: divides one number by another"}, {"instruction": "Implement a Python class called `BankAccount` that represents a bank account. It should have the following attributes:\n- `accountBalance`\n- `interestRate`\n\nIt should have the following methods:\n- `deposit`\n- `withdraw`\n- `getAccountBalance`"}, {"instruction": "Implement a Python class `Perfect` that represents a perfect number."}, {"instruction": "Write a Python program `IsList` that implements a class called `IsList`, which stores a Python list in an attribute `lst` and has the following member functions:\n\n- `IsList`, which initializes an `IsList` object with an empty Python list\n- `add`, which adds an element to the Python list\n- `remove`, which removes an element from the Python list\n- `print`, which returns the list as a string"}, {"instruction": "Write a class `QuadraticEquation` that computes the roots of a quadratic equation."}, {"instruction": "Create a Python class `VertexBufferObject` with the following features:\n- a constructor that initializes member variables\n- a member function `render` that draws the object"}, {"instruction": "Create a Python class `Person` that implements the `__init__` function for creating a person object, and a function `greet` that prints a greeting message."}, {"instruction": "Implement a Python class that performs a square root operation."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: file I/O, texture loading, 1D textures\n\n### Task", "fingerprint": null, "content": {"code": "GLuint createTFF1DTexture(const char* filename)\n{\n\t// read in the user defined data of transfer function\n\tifstream inFile(filename, ifstream::in);\n\tif (!inFile)\n\t{\n\t\tcerr << \"Error openning file: \" << filename << endl;\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tconst int MAX_CNT = 10000;\n\tGLubyte *tff = (GLubyte *)calloc(MAX_CNT, sizeof(GLubyte));\n\tinFile.read(reinterpret_cast<char *>(tff), MAX_CNT);\n\tif (inFile.eof())\n\t{\n\t\tsize_t bytecnt = inFile.gcount();\n\t\t*(tff + bytecnt) = '\\0';\n\t\tcout << \"bytecnt \" << bytecnt << endl;\n\t}\n\telse\n\t{\n\t\tcout << filename << \" read failed \" << endl;\n\t}\n\tGLuint tff1DTexture;\n\tglGenTextures(1, &tff1DTexture);\n\tglBindTexture(GL_TEXTURE_1D, tff1DTexture);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n\tglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\tglTexImage1D(GL_TEXTURE_1D, 0, GL_RGBA8, 256, 0, GL_RGBA, GL_UNSIGNED_BYTE, tff);\n\tfree(tff);\n\treturn tff1DTexture;\n}", "docstring": "// Create the shader program", "function_name": "createShaderProgram"}, "id": 46, "seed": "GLuint createTFF1DTexture(const char* filename)\n{\n\t// read in the user defined data of transfer function\n\tifstream inFile(filename, ifstream::in);\n\tif (!inFile)\n\t{\n\t\tcerr << \"Error openning file: \" << filename << endl;\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tconst int MAX_CNT = 10000;\n\tGLubyte *tff = (GLubyte *)calloc(MAX_CNT, sizeof(GLubyte));\n\tinFile.read(reinterpret_cast<char *>(tff), MAX_CNT);\n\tif (inFile.eof())\n\t{\n\t\tsize_t bytecnt = inFile.gcount();\n\t\t*(tff + bytecnt) = '\\0';\n\t\tcout << \"bytecnt \" << bytecnt << endl;\n\t}\n\telse\n\t{\n\t\tcout << filename << \" read failed \" << endl;\n\t}\n\tGLuint tff1DTexture;\n\tglGenTextures(1, &tff1DTexture);\n\tglBindTexture(GL_TEXTURE_1D, tff1DTexture);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n\tglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\tglTexImage1D(GL_TEXTURE_1D, 0, GL_RGBA8, 256, 0, GL_RGBA, GL_UNSIGNED_BYTE, tff);\n\tfree(tff);\n\treturn tff1DTexture;\n}", "concepts": ["file I/O", "texture loading", "1D textures"], "parsing_result": [{"instruction": "Write a Python program that loads a 3D model from a .obj file and outputs it to a .png file."}, {"instruction": "Create a Python program to render a 3D point cloud from a file containing 3D points."}, {"instruction": "Write a Python program which loads a texture from a file, converts it to a 1D texture, and displays it on a window."}, {"instruction": "Write a Python program that loads a 1D texture from a file and outputs it to the console."}, {"instruction": "Write a Python program to load and display texture from a given file."}, {"instruction": "Write a Python program that reads a texture from a file and displays it on the screen."}, {"instruction": "Write a Python program that creates a texture in OpenGL using an image file."}, {"instruction": "Write a Python program that creates a 2D texture."}, {"instruction": "Write a Python program that renders a 3D texture to a 1D texture by averaging adjacent pixels."}, {"instruction": "Write a Python program that loads a texture and displays it using OpenGL."}, {"instruction": "Write a Python program that uses OpenGL to load a 1D texture image file and display it in an OpenGL window."}, {"instruction": "Write a Python program that loads a texture from a file and creates three 1D textures that are copies of the loaded texture."}, {"instruction": "Write a Python program that renders a cube texture."}, {"instruction": "Write a Python program that reads an image and outputs a pixelated version."}, {"instruction": "Implement a Python function to load a texture into a 1D OpenGL texture."}, {"instruction": "Write a Python program that loads a texture from a file, converts it to grayscale, and saves it as a PNG file."}, {"instruction": "Write a Python program that reads information from a file and renders a 1D texture of the data."}, {"instruction": "Write a Python function that loads a 2D or 3D texture into a 1D texture."}, {"instruction": "Write a Python script that reads in a text file, counts the number of occurrences of each word in it, and writes a new file with each word on a separate line, along with its number of occurrences."}, {"instruction": "Create a Python program that draws a simple 2D isometric sine wave on a texture."}, {"instruction": "Write a Python program to create a 1D texture."}, {"instruction": "Create a Python program that loads a 2D texture and displays it on the screen, using a 1D texture."}, {"instruction": "Create a program with Python that reads a texture file and outputs a 1D texture array for OpenGL."}, {"instruction": "Write a program that loads a texture from a file and displays it on the screen."}, {"instruction": "Implement a program that loads a texture from disk, then displays the texture using the GLUT library."}, {"instruction": "Write a Python program that loads a desired texture, displays a GUI for the user to select the desired texture, and displays the texture on a given window."}, {"instruction": "Write a Python program that loads and displays a 1D texture image, using the `pyglet` library."}, {"instruction": "Write a Python program that takes a PNG image file and draws a 1D texture over it."}, {"instruction": "Implement a Python program that loads a texture from a file, and then renders it to the screen."}, {"instruction": "Write a program that loads a texture from a file, and displays it to the user using OpenGL."}, {"instruction": "Create a Python program that loads and renders an arbitrary image on the screen."}, {"instruction": "Write a Python program that loads a texture, and then draws a 1-D texture with the same image repeated."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: internet connection, ESP8266\n\n### Note\nPlease ensure that your snippet includes all the relevant code and comments. Including the keyword of function, variables, and comments is always good to have in the example, so that we can follow the syntax and comments easily.\n\n### Task", "fingerprint": null, "content": {"code": "void setup(void){\n  pinMode(2, OUTPUT);\n  randomSeed(10);\n  strip.begin();\n  strip.show();\n\n  //server.on(\"/\", handleRoot);\n  \n    server.on(\"/RainbowCycle\", [](){\n    val = 2;\n    Serial.println(\"RainbowCycle\");\n    rainbowCycle(20);\n  });\n  \n  server.on(\"/Rainbow\", [](){\n    val = 3;\n    Serial.println(\"Rainbow\");\n    rainbow(20);  \n  });\n    server.on(\"/ChaseRainbow\", [](){\n    val = 4;\n    Serial.println(\"ChaseRainbow\");\n    theaterChaseRainbow(50);\n  });\n  \n    server.on(\"/2_Color\", [](){\n     Serial.println(\"2_Color\");\n     doubleColor = 1;\n  });\n\n  server.begin();\n  Serial.println(\"HTTP server started\");\n  \n  Serial.begin(115200);\n  EEPROM.begin(512);\n  delay(10);\n  Serial.println();\n  Serial.println();\n  Serial.println(\"Startup\");\n  // read eeprom for ssid and pass\n  Serial.println(\"Reading EEPROM ssid\");\n  String esid;\n  for (int i = 0; i < 32; ++i)\n    {\n      esid += char(EEPROM.read(i));\n    }\n  Serial.print(\"SSID: \");\n  Serial.println(esid);\n  Serial.println(\"Reading EEPROM pass\");\n  String epass = \"\";\n  for (int i = 32; i < 96; ++i)\n    {\n      epass += char(EEPROM.read(i));\n    }\n  Serial.print(\"PASS: \");\n  Serial.println(epass);  \n  if ( esid.length() > 1 ) {\n      // test esid \n      //WiFi.mode(WIFI_AP_STA);\n      //WiFi.disconnect();\n      //delay(100);\n      WiFi.begin(esid.c_str(), epass.c_str());\n      WiFi.config(IPAddress(192,168,8,187), IPAddress(192,168,8,1), IPAddress(255,255,255,0),IPAddress(192,168,8,1));\n      if (testWifi()) {\n        launchWeb(0);\n        return;\n      }\n  }\n  setupAP();\n/*  \n  WiFi.begin(ssid, password);\n  WiFi.config(IPAddress(192,168,1,187), IPAddress(192,168,1,1), IPAddress(255,255,255,0),IPAddress(192,168,1,1));\n  Serial.println(\"\");\n\n  // Wait for connection\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"Connected to \");\n  Serial.println(ssid);\n  Serial.print(\"IP address: \");\n  Serial.println(WiFi.localIP());\n\n  if (MDNS.begin(\"esp8266\")) {\n    Serial.println(\"MDNS responder started\");\n  }\n  */\n  #if defined (__AVR_ATtiny85__)\n    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);\n  #endif\n\n  \n\n}", "docstring": "//", "function_name": "handleRoot"}, "id": 48, "seed": "void setup(void){\n  pinMode(2, OUTPUT);\n  randomSeed(10);\n  strip.begin();\n  strip.show();\n\n  //server.on(\"/\", handleRoot);\n  \n    server.on(\"/RainbowCycle\", [](){\n    val = 2;\n    Serial.println(\"RainbowCycle\");\n    rainbowCycle(20);\n  });\n  \n  server.on(\"/Rainbow\", [](){\n    val = 3;\n    Serial.println(\"Rainbow\");\n    rainbow(20);  \n  });\n    server.on(\"/ChaseRainbow\", [](){\n    val = 4;\n    Serial.println(\"ChaseRainbow\");\n    theaterChaseRainbow(50);\n  });\n  \n    server.on(\"/2_Color\", [](){\n     Serial.println(\"2_Color\");\n     doubleColor = 1;\n  });\n\n  server.begin();\n  Serial.println(\"HTTP server started\");\n  \n  Serial.begin(115200);\n  EEPROM.begin(512);\n  delay(10);\n  Serial.println();\n  Serial.println();\n  Serial.println(\"Startup\");\n  // read eeprom for ssid and pass\n  Serial.println(\"Reading EEPROM ssid\");\n  String esid;\n  for (int i = 0; i < 32; ++i)\n    {\n      esid += char(EEPROM.read(i));\n    }\n  Serial.print(\"SSID: \");\n  Serial.println(esid);\n  Serial.println(\"Reading EEPROM pass\");\n  String epass = \"\";\n  for (int i = 32; i < 96; ++i)\n    {\n      epass += char(EEPROM.read(i));\n    }\n  Serial.print(\"PASS: \");\n  Serial.println(epass);  \n  if ( esid.length() > 1 ) {\n      // test esid \n      //WiFi.mode(WIFI_AP_STA);\n      //WiFi.disconnect();\n      //delay(100);\n      WiFi.begin(esid.c_str(), epass.c_str());\n      WiFi.config(IPAddress(192,168,8,187), IPAddress(192,168,8,1), IPAddress(255,255,255,0),IPAddress(192,168,8,1));\n      if (testWifi()) {\n        launchWeb(0);\n        return;\n      }\n  }\n  setupAP();\n/*  \n  WiFi.begin(ssid, password);\n  WiFi.config(IPAddress(192,168,1,187), IPAddress(192,168,1,1), IPAddress(255,255,255,0),IPAddress(192,168,1,1));\n  Serial.println(\"\");\n\n  // Wait for connection\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"Connected to \");\n  Serial.println(ssid);\n  Serial.print(\"IP address: \");\n  Serial.println(WiFi.localIP());\n\n  if (MDNS.begin(\"esp8266\")) {\n    Serial.println(\"MDNS responder started\");\n  }\n  */\n  #if defined (__AVR_ATtiny85__)\n    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);\n  #endif\n\n  \n\n}", "concepts": ["internet connection", "ESP8266\n\n### Note\nPlease ensure that your snippet includes all the relevant code and comments. Including the keyword of function", "variables", "and comments is always good to have in the example", "so that we can follow the syntax and comments easily."], "parsing_result": [{"instruction": "Write a Python class called `WifiConnector` that enables users to connect to a WiFi network remotely, using the ESP8266 chip."}, {"instruction": "Create a Python class called `InternetConnection` that provides a method `send_message` to send a message on an ESP8266 WiFi module through the serial port."}, {"instruction": "Create a Python class `WiFi` with the following methods:\n- `update` to connect the ESP8266 to the local network.\n- `disconnect` to disconnect the ESP8266 from the local network.\n- `is_connected` to check whether the ESP8266 is connected to the local network."}, {"instruction": "Write a Python function to connect to an ESP8266 module and send commands."}, {"instruction": "Write a Python class `WiFiConnection` that establishes a connection to an external WiFi network. This class should include the following functions:\n- `__init__`: takes two parameters, `ssid` and `password`, and initializes the connection to the network.\n- `isConnected`: returns `True` if the connection is established, `False` otherwise."}, {"instruction": "Create a Python class called `IoTDevice` that collects data from a sensor."}, {"instruction": "Write a Python class `ESP8266` that connects to the ESP8266 WiFi module and allows data transfer to and from the host computer, as well as sending and receiving commands."}, {"instruction": "Write a Python function `downloadFile` that allows a user to download a file from the internet using an ESP8266.\n/examples/example3/example3.cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring toBinary(int x) {\n    string s;\n    while (x > 0) {\n        s += (x % 2) + '0';\n        x /= 2;\n    }\n    return s;\n}\n\nint main() {\n    cout << \"Please enter a non-negative number: \";\n    int x;\n    cin >> x;\n    cout << \"The binary representation of \" << x << \" is \" << toBinary(x) << endl;\n    return 0;\n}/examples/example5/example5.cpp\n#include <iostream>\n\nusing namespace std;\n\nvoid swap(int& x, int& y) {\n    int tmp = x;\n    x = y;\n    y = tmp;\n}\n\nint main() {\n    int x = 5;\n    int y = 6;\n    cout << \"Initial x: \" << x << \", y: \" << y << endl;\n    swap(x, y);\n    cout << \"Swapped x: \" << x << \", y: \" << y << endl;\n    return 0;\n}/examples/example1/example1.cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint sumVector(vector<int> v) {\n    int sum = 0;\n    for (int x : v) {\n        sum += x;\n    }\n    return sum;\n}\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    cout << \"Vector: \" << v.size() << \" elements\" << endl;\n    cout << \"Sum: \" << sumVector(v) << endl;\n    return 0;\n}"}, {"instruction": "Using the example ESP8266 code, implement a simple class that allows users to make GET requests to a REST API."}, {"instruction": "Write a Python function `is_internet_connected` that checks if there is an internet connection."}, {"instruction": "Write a Python snippet that publishes a message to an MQTT broker on the internet using the ESP8266 Wi-Fi module."}, {"instruction": "Write a Python class `Display` that writes an HTTP message to a serial port."}, {"instruction": "Write a snippet of Python code to connect your ESP8266 to the Internet and get the current time."}, {"instruction": "Implement a Python class named `ESP8266` that represents an ESP8266 module."}, {"instruction": "Implement an ESP8266 class that can be used to make HTTP GET requests."}, {"instruction": "Write a Python class `ESP8266` that represents a Wi-Fi connected ESP8266 device."}, {"instruction": "In the file `ESP8266.py`, write a Python function `getData` that connects to a URL and retrieves data from the address. This function should be a public function of the `ESP8266` class."}, {"instruction": "Implement a class `ESP8266` that allows us to send and receive data through an ESP8266 module through Wi-Fi."}, {"instruction": "Implement a Python class `ESP8266` that is capable of connecting to the internet using the ESP8266 chip."}, {"instruction": "Write a Python class `Connection` that implements a HTTP connection. The class should have a function `request` that takes a string to send as an argument, and returns the response as a string."}, {"instruction": "Write a Python class called `Network` that encapsulates the features and behavior of an ESP8266 network."}, {"instruction": "Write a Python class named `ESP8266` that encapsulates the `ESP8266` module as a class."}, {"instruction": "Create a Python class `WiFi` that connects to a WiFi network."}, {"instruction": "Implement a Python class `ESP8266` that allows you to control the ESP8266 over the internet."}, {"instruction": "Implement a Python program that sends a request to an online API with specified parameters and prints the response."}, {"instruction": "Write a Python function `display_weather` that prints the current weather on the screen.\n\nThe function should use `urllib` to perform the request to the OpenWeatherMap API."}, {"instruction": "Write a class `TCPClient` that establishes a TCP connection to a remote server and is used to transfer data to and from the server."}, {"instruction": "Write a Python function `esp8266_post` that sends a HTTP POST request to an ESP8266 server."}, {"instruction": "Design a Python class `IoT` that implements a simple, basic IoT device. This device will have a temperature sensor connected to it via a microcontroller and communication via an 802.11 Wi-Fi network. The IoT device will measure and store the temperature and store it for future use."}, {"instruction": "Write a Python class to connect to an ESP8266 module using a TCP/IP connection."}, {"instruction": "Create a `device.py` file that contains the class definition of a device. The class should have at least 3 attributes and 2 methods.\n- `SSID`: the name of the WiFi network to connect to\n- `PASSWORD`: the WiFi network password to connect to\n- `check_connection()`: check whether there is an internet connection\n- `send_message()`: send a message of a given length to a given serial port"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: string parsing, variable declarations, STL iterators, STL sorting, comparison, pointer arithmetic, pointer dereferencing, reference, integers, string manipulation, input streams, error handling, loops, loops control, boolean logic, recursion, recursion control, pointer control, sorting control, comparison control, iteration\n/algorithms/searching/linear_search/README.md\n# Linear search\n\n## Problem\nGiven an array of integers and a target value, find the index of the target value in the array. If the target value is not found in the array, return -1.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n### Task", "fingerprint": null, "content": {"code": "void YY(int i) // |\n{\n    punto da = strade[i];\n    punto a = strade[i+1];\n    \n    bool swapped = false;\n    // sempre dal basso verso l'alto\n    if ( a.y < da.y) swap(da, a),swapped = true;;\n    \n    punto *prima = lower_bound(fx, fx+F, da, cmpX);\n    punto *ultima = upper_bound(fx, fx+F, a, cmpX);\n    ultima--;\n    \n    if (prima == fx+F || prima->x != da.x|| ultima < prima)\n    { l_senza += pointDist(strade[i], strade[i+1]); return; }\n    \n    int ind_prima = prima - fx;\n    int ind_ultima = ultima - fx;\n    \n    error(ind_prima);\n    error(ind_ultima);\n    \n    int RMQY = rmq_x(ind_prima,ind_ultima);\n    error(RMQY);\n    smax(max_dist, RMQY);\n    if ( !swapped){\n        smax(max_dist, l_senza+ pointDist(strade[i], (*prima)));\n        l_senza = pointDist((*ultima), a);}\n    else\n    {\n        smax(max_dist, l_senza+ pointDist(strade[i], (*ultima)));\n        l_senza = pointDist((*prima), da);\n    }\n    error(max_dist);\n}", "docstring": "// sempre da sx a dx", "function_name": "XX"}, "id": 50, "seed": "void YY(int i) // |\n{\n    punto da = strade[i];\n    punto a = strade[i+1];\n    \n    bool swapped = false;\n    // sempre dal basso verso l'alto\n    if ( a.y < da.y) swap(da, a),swapped = true;;\n    \n    punto *prima = lower_bound(fx, fx+F, da, cmpX);\n    punto *ultima = upper_bound(fx, fx+F, a, cmpX);\n    ultima--;\n    \n    if (prima == fx+F || prima->x != da.x|| ultima < prima)\n    { l_senza += pointDist(strade[i], strade[i+1]); return; }\n    \n    int ind_prima = prima - fx;\n    int ind_ultima = ultima - fx;\n    \n    error(ind_prima);\n    error(ind_ultima);\n    \n    int RMQY = rmq_x(ind_prima,ind_ultima);\n    error(RMQY);\n    smax(max_dist, RMQY);\n    if ( !swapped){\n        smax(max_dist, l_senza+ pointDist(strade[i], (*prima)));\n        l_senza = pointDist((*ultima), a);}\n    else\n    {\n        smax(max_dist, l_senza+ pointDist(strade[i], (*ultima)));\n        l_senza = pointDist((*prima), da);\n    }\n    error(max_dist);\n}", "concepts": ["string parsing", "variable declarations", "STL iterators", "STL sorting", "comparison", "pointer arithmetic", "pointer dereferencing", "reference", "integers", "string manipulation", "input streams", "error handling", "loops", "loops control", "boolean logic", "recursion", "recursion control", "pointer control", "sorting control", "comparison control", "iteration\n/algorithms/searching/linear_search/README.md\n# Linear search\n\n## Problem\nGiven an array of integers and a target value", "find the index of the target value in the array. If the target value is not found in the array", "return -1.\n\nYou may assume that each input would have exactly one solution", "and you may not use the same element twice."], "parsing_result": [{"instruction": "Create a C++ function `linear_search` that returns the index of the target value in the array."}, {"instruction": "Implement a C++ function `linearSearch` that takes an array of integers and a target integer as input, and returns the index of the target integer in the array.\n\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n#"}, {"instruction": "Implement the linear search algorithm."}, {"instruction": "Write a function `linearSearch` that returns the index of the target value in an array of integers. If the target value is not found, return -1."}, {"instruction": "Write a C++ function `linearSearch` that returns the index of the target value in the array, or -1 if the target value is not found."}, {"instruction": "Design an algorithm that can take an array of integers and a target value and return the index of the target value in the array.\n\n#"}, {"instruction": "Write a C++ function `linearSearch` that returns the index of the target value in the array, or -1 if the value is not present in the array."}, {"instruction": "Write a Python function called `linearSearch` that takes two arguments: (1) an array of integers and (2) a target value to search for in the array. The function should return the index of the target value in the array if it is found, or `-1` if it is not. Assume that the target value will always be in the array."}, {"instruction": "Create a function that returns the index of the target value in the given array, or -1 if the target value is not in the array."}, {"instruction": "Write a function `linearSearch` that takes an array of integers and the value to search for and returns the index of the target value in the array or -1 if the target value is not found.\n\n### Constraints\n- Time complexity: $O(n)$\n- Space complexity: $O(1)$\n\n#"}, {"instruction": "Implement the `linear_search` function in the given [linear_search.h](./linear_search.h) header file.\n\n## Solution\nThe `linear_search` function in [linear_search.c](./linear_search.c) is implemented.\n\n## Testing\nThe following commands can be used for testing:\n- `make` to build the program\n- `make test` to run the test program"}, {"instruction": "Write a C++ function `linearSearch` that returns the index of a target value in a given array of integers."}, {"instruction": "Write a function that returns the index of the target value in the array. If the value is not found, return -1.\n\n## Solution\n```\nvoid linear_search( int array[], int n, int target )\n{\n    int index = -1;\n    for( int i = 0; i < n; i++ )\n    {\n        if( array[ i ] == target )\n        {\n            index = i;\n            break;\n        }\n    }\n\n    return index;\n}\n```\n\n## Complexity\nThe time complexity of this algorithm is O(n).\n\nThe space complexity of this algorithm is O(1)."}, {"instruction": "1\nWrite a C++ function `linearSearch` that takes an input vector of integers and an integer and returns the index of the target integer in the vector. If the target integer is not found, return -1.\n\n### Task 2\nWrite a C++ function `linearSearch2` that takes an input vector of integers and an integer and returns the index of the first target integer in the vector. If the target integer is not found, return -1.\n\n## Solution\nLinear search is an algorithm that finds the index of a given integer in a linear collection. It iterates through the collection, looking for the given integer. If the integer is found, it returns the index of the integer in the collection. If the integer is not found, it returns -1.\n\nThis algorithm has a time complexity of O(n), where n is the length of the collection. It iterates through the collection once, making it a linear search algorithm."}, {"instruction": "Write a function that takes two parameters, an array of integers and a target value, and returns the index of where the target value first occurs in the array. If the target value is not found in the array, return -1.\n\n## Algorithm\n1. Iterate through the array.\n2. Compare the current element with the target value.\n3. If the current element equals the target value, return the index of the current element.\n4. If the current element does not equal the target value, return -1.\n\n#"}, {"instruction": "Write a linear search algorithm that takes an array of integers and a target value as input.\n\n## Solution\nThe linear search algorithm will iterate over the array, comparing each element to the target value. If the target value is found, the algorithm will return the index of that element. Otherwise, the algorithm will return -1.\n\n### Code\n```python\ndef linear_search(array, target):\n  for index, value in enumerate(array):\n    if value == target:\n      return index\n  return -1\n```\n\n## Complexity Analysis\n- Time Complexity: O(n), where n is the length of the input array.\n- Space Complexity: O(1), the algorithm uses a constant amount of memory."}, {"instruction": "Given an array of integers and a target value, find the index of the target value in the array. If the target value is not found in the array, return -1.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n#"}, {"instruction": "Write a function that implements a linear search (also known as a sequential search).\n\n#"}, {"instruction": "Create a C++ function `linearSearch` that returns the index of the target element in a vector of integers."}, {"instruction": "Implement a C++ function `linearSearch` that takes an array of integers and a target value.\n\n## Solution"}, {"instruction": "Write a C++ function `linearSearch` that returns the index of the target value in a given array, or -1 if the target value is not found.\n\n#"}, {"instruction": "Create a C++ function `linearSearch` that takes an input array and a target value as input and returns the index of the target value in the array.\n\n#"}, {"instruction": "Write a function `linearSearch` that takes an array of integers and a target value, and returns the index of the target value in the array. If the target value is not found in the array, return -1."}, {"instruction": "Write a function `linearSearch` that finds the index of the target value in the given array.\n\n- `linearSearch` must use a linear search algorithm.\n- The input array must be a sorted array.\n- If the target is not found in the array, the function must return -1.\n- If the target is found at index $i$, the function must return $i$.\n\n#"}, {"instruction": "Implement a C++ function that returns the index of a target value in an array of integers.\n\n## Algorithm\n\nThe algorithm is simple:\n\n1. Iterate through the array.\n2. If the current element is equal to the target value, return the current index.\n3. Otherwise, move on to the next element."}, {"instruction": "Implement a function `linearSearch` that returns the index of the target value in the array."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: loop, map, string/string to integer conversion, integer/string operations\n\n### Task", "fingerprint": null, "content": {"code": "SumsOfAllDigit sumAlldigit(string strLimitNum,map<string,SumsOfAllDigit> &memoMap)\n{\t\n\t//Memoization \ud65c\uc6a9\n\tmap<string, SumsOfAllDigit>::iterator iter =memoMap.find(strLimitNum);\n\tif (iter != memoMap.end())\n\t{\t\t\n\t\treturn iter->second;\n\t}\n\tSumsOfAllDigit result;\n\t//\ud55c\uc790\ub9bf\uc218\uc77c \uacbd\uc6b0\n\tif (strLimitNum.length() == 1)\n\t{\n\t\t//int num = strLimitNum.at(0)-'0';\n\t\tint num = atoi(strLimitNum.c_str());\n\t\tfor (int i = 0; i <= num; i++)\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += 1;\n\t\t}\n\t\treturn result;\n\t}\n\t//---------------\uc5ec\uae30\uae4c\uc9c0 \uae30\uc800\n\tchar tempBuf[11];\n\n\t//\"\uccab\uc790\ub9bf\uc218\ub9cc\uc788\uace0 \ub098\uba38\uc9c0 0\uc758 \ud569\uacc4\" + \"\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ubd80\ud130 \ub9cc\ub4e0 \uc22b\uc790\uc758 \ud569\uacc4\"\n\t//\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ud569\uacc4\uad6c\ud558\uae30\n\tstring subDigits= strLimitNum.substr(1, strLimitNum.length() - 1);\n\tint subDigitsNum =atoi(subDigits.c_str());//\ub9e8\uc55e\uc790\ub9ac\ub97c \uc81c\uc678\ud55c \uc22b\uc790\n\tint firstDigitNum = strLimitNum.at(0) - '0';//\ub9e8\uc55e\uc790\ub9ac \uc22b\uc790\n\tif (0 == subDigitsNum)//\ub9e8 \uc55e\uc790\ub9ac \ube7c\uace0 \ub2e4 0\uc77c \uacbd\uc6b0\n\t{\n\t\tstring digitsOfNines;//\ud55c \uc790\ub9bf\uc218\uac00 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsOfNines.push_back('9');\n\t\tSumsOfAllDigit sumsOfNumberWithStartingOne;//\ud55c \uc790\ub9bf\uc218 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790\uc758 \ud569\uacc4\n\t\tint numberWithStartingOne = atoi(digitsOfNines.c_str()) + 1;\n\t\tsumsOfNumberWithStartingOne = sumAlldigit(digitsOfNines, memoMap);//9...\uc758 \uac83 \uad6c\ud558\uae30\n\t\t//sumsOfNumberWithStartingOne.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t\t\n\t\t//\ub9e8\uc55e\uc790\ub9ac \uc218\ub97c \ub2e4 \ub354\ud558\uae30\n\t\t//for (int i = 1; i < firstDigitNum; i++)//1\ubd80\ud130\uc778 \uc774\uc720\ub294 \ub9e8\uc55e\uc790\ub9ac\ub294 0\uc744 \uc148\ud558\uc9c0 \uc54a\uc544\uc11c\n\t\tfor (int i = 0; i < firstDigitNum; i++)//\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += numberWithStartingOne;//\n\t\t}\n\t\tresult.m_sumsOfDigit[firstDigitNum] += 1;\n\t\tresult = result + (sumsOfNumberWithStartingOne * firstDigitNum) ;//\ub9e8\uc55e\uc790\ub9ac\uc218\ub9cc \ubc14\ub00c\uba74\uc11c \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\tresult.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t}\n\telse\n\t{\n\t\tstring digitsWithAllZeroExceptFirst;//\ub9e8\uc55e\uc790\ub9ac \uc81c\uc678 0\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tdigitsWithAllZeroExceptFirst.push_back(strLimitNum.at(0));\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsWithAllZeroExceptFirst.push_back('0');\n\t\t//subDigits\uc758 \uc55e\uc790\ub9ac\uac00 0\uc77c \uacbd\uc6b0\ub300\ube44\n\t\tsprintf(tempBuf, \"%d\", atoi(subDigits.c_str()));\n\t\t//SumsOfAllDigit subDigitsSum = sumAlldigit(subDigits, memoMap);\n\t\tSumsOfAllDigit subDigitsSum = sumAlldigit(string(tempBuf), memoMap);\n\t\tresult = sumAlldigit(digitsWithAllZeroExceptFirst, memoMap) + subDigitsSum;\n\n\t\tsprintf(tempBuf, \"%d\", subDigitsNum);\n\t\t\n\t\tresult.m_sumsOfDigit[0] += ((subDigitsNum )* ((int)subDigits.length() - (int)string(tempBuf).length()))- (int)string(tempBuf).length();//-1\uc740 0\uc774 \uc911\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\t\n\t\tresult.m_sumsOfDigit[firstDigitNum] += subDigitsNum;//0\uc77c\ub54c\ub294 \ub354\ud574\uc838\uc11c \uc628\ub2e4.\uc148\ud558\uc9c0 \ub9d0\uac83\n\t}\n\n\t\n\t\n\t//Memoization \n\tmemoMap.insert(pair<string, SumsOfAllDigit>(strLimitNum, result));\n\treturn result;\n}", "docstring": "//result.printAllSums();", "function_name": "main"}, "id": 52, "seed": "SumsOfAllDigit sumAlldigit(string strLimitNum,map<string,SumsOfAllDigit> &memoMap)\n{\t\n\t//Memoization \ud65c\uc6a9\n\tmap<string, SumsOfAllDigit>::iterator iter =memoMap.find(strLimitNum);\n\tif (iter != memoMap.end())\n\t{\t\t\n\t\treturn iter->second;\n\t}\n\tSumsOfAllDigit result;\n\t//\ud55c\uc790\ub9bf\uc218\uc77c \uacbd\uc6b0\n\tif (strLimitNum.length() == 1)\n\t{\n\t\t//int num = strLimitNum.at(0)-'0';\n\t\tint num = atoi(strLimitNum.c_str());\n\t\tfor (int i = 0; i <= num; i++)\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += 1;\n\t\t}\n\t\treturn result;\n\t}\n\t//---------------\uc5ec\uae30\uae4c\uc9c0 \uae30\uc800\n\tchar tempBuf[11];\n\n\t//\"\uccab\uc790\ub9bf\uc218\ub9cc\uc788\uace0 \ub098\uba38\uc9c0 0\uc758 \ud569\uacc4\" + \"\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ubd80\ud130 \ub9cc\ub4e0 \uc22b\uc790\uc758 \ud569\uacc4\"\n\t//\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ud569\uacc4\uad6c\ud558\uae30\n\tstring subDigits= strLimitNum.substr(1, strLimitNum.length() - 1);\n\tint subDigitsNum =atoi(subDigits.c_str());//\ub9e8\uc55e\uc790\ub9ac\ub97c \uc81c\uc678\ud55c \uc22b\uc790\n\tint firstDigitNum = strLimitNum.at(0) - '0';//\ub9e8\uc55e\uc790\ub9ac \uc22b\uc790\n\tif (0 == subDigitsNum)//\ub9e8 \uc55e\uc790\ub9ac \ube7c\uace0 \ub2e4 0\uc77c \uacbd\uc6b0\n\t{\n\t\tstring digitsOfNines;//\ud55c \uc790\ub9bf\uc218\uac00 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsOfNines.push_back('9');\n\t\tSumsOfAllDigit sumsOfNumberWithStartingOne;//\ud55c \uc790\ub9bf\uc218 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790\uc758 \ud569\uacc4\n\t\tint numberWithStartingOne = atoi(digitsOfNines.c_str()) + 1;\n\t\tsumsOfNumberWithStartingOne = sumAlldigit(digitsOfNines, memoMap);//9...\uc758 \uac83 \uad6c\ud558\uae30\n\t\t//sumsOfNumberWithStartingOne.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t\t\n\t\t//\ub9e8\uc55e\uc790\ub9ac \uc218\ub97c \ub2e4 \ub354\ud558\uae30\n\t\t//for (int i = 1; i < firstDigitNum; i++)//1\ubd80\ud130\uc778 \uc774\uc720\ub294 \ub9e8\uc55e\uc790\ub9ac\ub294 0\uc744 \uc148\ud558\uc9c0 \uc54a\uc544\uc11c\n\t\tfor (int i = 0; i < firstDigitNum; i++)//\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += numberWithStartingOne;//\n\t\t}\n\t\tresult.m_sumsOfDigit[firstDigitNum] += 1;\n\t\tresult = result + (sumsOfNumberWithStartingOne * firstDigitNum) ;//\ub9e8\uc55e\uc790\ub9ac\uc218\ub9cc \ubc14\ub00c\uba74\uc11c \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\tresult.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t}\n\telse\n\t{\n\t\tstring digitsWithAllZeroExceptFirst;//\ub9e8\uc55e\uc790\ub9ac \uc81c\uc678 0\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tdigitsWithAllZeroExceptFirst.push_back(strLimitNum.at(0));\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsWithAllZeroExceptFirst.push_back('0');\n\t\t//subDigits\uc758 \uc55e\uc790\ub9ac\uac00 0\uc77c \uacbd\uc6b0\ub300\ube44\n\t\tsprintf(tempBuf, \"%d\", atoi(subDigits.c_str()));\n\t\t//SumsOfAllDigit subDigitsSum = sumAlldigit(subDigits, memoMap);\n\t\tSumsOfAllDigit subDigitsSum = sumAlldigit(string(tempBuf), memoMap);\n\t\tresult = sumAlldigit(digitsWithAllZeroExceptFirst, memoMap) + subDigitsSum;\n\n\t\tsprintf(tempBuf, \"%d\", subDigitsNum);\n\t\t\n\t\tresult.m_sumsOfDigit[0] += ((subDigitsNum )* ((int)subDigits.length() - (int)string(tempBuf).length()))- (int)string(tempBuf).length();//-1\uc740 0\uc774 \uc911\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\t\n\t\tresult.m_sumsOfDigit[firstDigitNum] += subDigitsNum;//0\uc77c\ub54c\ub294 \ub354\ud574\uc838\uc11c \uc628\ub2e4.\uc148\ud558\uc9c0 \ub9d0\uac83\n\t}\n\n\t\n\t\n\t//Memoization \n\tmemoMap.insert(pair<string, SumsOfAllDigit>(strLimitNum, result));\n\treturn result;\n}", "concepts": ["loop", "map", "string/string to integer conversion", "integer/string operations"], "parsing_result": [{"instruction": "Write a Python class called `WordCount` that keeps track of the frequency of each word in a string."}, {"instruction": "Classify the following strings as either a palindrome or not.\n\n- \"racecar\"\n- \"level\"\n- \"malayalam\"\n- \"lion\""}, {"instruction": "Create a Python class `Record` that includes a name and an ID number."}, {"instruction": "Create a Python class `Person` with attributes `name` and `age`."}, {"instruction": "Create a Python class `Map` that contains a list of points. The points are represented by tuples of two coordinates, (x, y). Add a method `distance` that returns the Euclidean distance between two points."}, {"instruction": "Implement a Python class `Integer` with the following properties:\n\n- The class must support the following methods:\n  - `Integer.add(self, other)`\n  - `Integer.subtract(self, other)`\n  - `Integer.multiply(self, other)`\n  - `Integer.divide(self, other)`\n  - `Integer.remainder(self, other)`\n- The class must support the following operations:\n  - `Integer.\\_\\_str\\_\\_(self)`\n  - `Integer.\\_\\_repr\\_\\_(self)`\n\nThe class should mimic the built-in `int` type by providing the same functionality."}, {"instruction": "Write a function `Area` that takes a list of length-2 lists representing the two end points of a rectangle and returns the area of the rectangle."}, {"instruction": "Write a Python class `Stack` that implements a last-in-first-out (LIFO) stack."}, {"instruction": "Create a Python class `DataDictionaries` that stores a mapping from data type to its expected size in bytes."}, {"instruction": "Create a Python class `Node` that implements an unordered linked list."}, {"instruction": "Create a class `Counter` with a data member `n`, an int type, that is initially set to 0. Write a class method `increment` that increments the value of `n` by 1. Write a class method `print` that prints the value of `n` to the terminal."}, {"instruction": "Create a Python class `Counter` that stores a count of its occurrences."}, {"instruction": "Create a Python class `Data` with two methods: `add` and `remove`. The `add` method will take a string and add it to the end of the class. The `remove` method will take a string and remove it from the class."}, {"instruction": "Write a Python class `WordFrequency` that takes a string and returns a map of words to frequencies."}, {"instruction": "Write a Python class, `Array` that represents an array of integers."}, {"instruction": "Write a Python class `Stack` that implements a stack."}, {"instruction": "Implement a Python class `Calculator` that contains the following methods:\n\n- `add`: adds two integers and returns the sum\n- `subtract`: subtracts two integers and returns the difference\n- `multiply`: multiplies two integers and returns the product\n- `divide`: divides two integers and returns the quotient\n- `square`: squares an integer and returns the result\n- `power`: raises an integer to an exponent and returns the result\n- `max`: takes any number of integers and returns the largest\n- `min`: takes any number of integers and returns the smallest\n- `sum`: takes any number of integers and returns the sum\n- `average`: takes any number of integers and returns the average"}, {"instruction": "Write a Python class called `Node` that represents a node in a linked list. The class should have two instance variables: `data` and `next`, which store a data element and a reference to the next node in the list, respectively."}, {"instruction": "Create a Python class `Node` that represents a node of a singly-linked list."}, {"instruction": "Implement a Python class `Stack` that implements a stack."}, {"instruction": "Create a Python class `Stack` that implements a stack data structure."}, {"instruction": "Create a class `BinaryTree` with the following methods:\n- `add` which adds a value to a binary tree (if it isn't already there)\n- `remove` which removes a value from a binary tree (if it exists)\n- `print` which prints a binary tree to the console\n- `isBalanced` which returns true if a binary tree is balanced (i.e., all subtrees differ by no more than 1 from each other) and false if it is not"}, {"instruction": "Write a Python class that implements a Stack."}, {"instruction": "Write a Python class `MyList` that has methods `append`, `remove`, and `count` that mimic the list methods."}, {"instruction": "Create a Python class `Time` that holds a time of the day as hour, minute, and second. Implement the following methods:\n\n- `Time.__init__` to initialize a new `Time` object\n- `time` to return the time as a string in the format \"h:mm:ss\", where `h` is the hour, and `mm` and `ss` are the minute and second, with leading zeroes to ensure that the string has exactly the form \"hh:mm:ss\"\n- `add` to add a time to another time as a `Time` object, and return a `Time` object representing the result.\n- `subtract` to subtract a time from another time, and return a new `Time` object representing the result.\n- `isEarlier` to determine if one time is earlier than another.\n- `isLater` to determine if one time is later than another.\n- `isEarlierOrEqual` to determine if one time is earlier or equal to another.\n- `isLaterOrEqual` to determine if one time is later or equal to another."}, {"instruction": "Write a Python class `Matrix` that implements a matrix with two dimensions."}, {"instruction": "Create a Python class `List` that implements a singly-linked list."}, {"instruction": "Write a Python class `Poem` that has a method `count_words(self)` that takes a string representing a poem and returns a dictionary mapping words to their frequencies."}, {"instruction": "Write a Python class named `Counter` that keeps track of the number of times something happens."}, {"instruction": "Write a Python class `Name` that stores a person's first and last name."}, {"instruction": "Implement the `Stack` class as a Python class."}, {"instruction": "Write a Python function `get_int` that returns an integer from a string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterators, STL, reflection\n\n### Task", "fingerprint": null, "content": {"code": "void List_1_AddEnumerable_m1553189708_gshared (List_1_t3612285922 * __this, RuntimeObject* ___enumerable0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_AddEnumerable_m1553189708_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tRuntimeObject* V_1 = NULL;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tRuntimeObject* L_0 = ___enumerable0;\n\t\tNullCheck((RuntimeObject*)L_0);\n\t\tRuntimeObject* L_1 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<System.Int32>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 20), (RuntimeObject*)L_0);\n\t\tV_1 = (RuntimeObject*)L_1;\n\t}\n\nIL_0007:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_001a;\n\t\t}\n\nIL_000c:\n\t\t{\n\t\t\tRuntimeObject* L_2 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tint32_t L_3 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<System.Int32>::get_Current() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 21), (RuntimeObject*)L_2);\n\t\t\tV_0 = (int32_t)L_3;\n\t\t\tint32_t L_4 = V_0;\n\t\t\tNullCheck((List_1_t3612285922 *)__this);\n\t\t\t((  void (*) (List_1_t3612285922 *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3612285922 *)__this, (int32_t)L_4, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\tRuntimeObject* L_5 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_5);\n\t\t\tbool L_6 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t3774429009_il2cpp_TypeInfo_var, (RuntimeObject*)L_5);\n\t\t\tif (L_6)\n\t\t\t{\n\t\t\t\tgoto IL_000c;\n\t\t\t}\n\t\t}\n\nIL_0025:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x35, FINALLY_002a);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t2748878030 *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_7 = V_1;\n\t\t\tif (L_7)\n\t\t\t{\n\t\t\t\tgoto IL_002e;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\nIL_002e:\n\t\t{\n\t\t\tRuntimeObject* L_8 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_8);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t4289139908_il2cpp_TypeInfo_var, (RuntimeObject*)L_8);\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x35, IL_0035)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t2748878030 *)\n\t}\n\nIL_0035:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "List_1_System_Collections_IList_set_Item_m37152599_gshared"}, "id": 64, "seed": "void List_1_AddEnumerable_m1553189708_gshared (List_1_t3612285922 * __this, RuntimeObject* ___enumerable0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_AddEnumerable_m1553189708_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tRuntimeObject* V_1 = NULL;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tRuntimeObject* L_0 = ___enumerable0;\n\t\tNullCheck((RuntimeObject*)L_0);\n\t\tRuntimeObject* L_1 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<System.Int32>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 20), (RuntimeObject*)L_0);\n\t\tV_1 = (RuntimeObject*)L_1;\n\t}\n\nIL_0007:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_001a;\n\t\t}\n\nIL_000c:\n\t\t{\n\t\t\tRuntimeObject* L_2 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tint32_t L_3 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<System.Int32>::get_Current() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 21), (RuntimeObject*)L_2);\n\t\t\tV_0 = (int32_t)L_3;\n\t\t\tint32_t L_4 = V_0;\n\t\t\tNullCheck((List_1_t3612285922 *)__this);\n\t\t\t((  void (*) (List_1_t3612285922 *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3612285922 *)__this, (int32_t)L_4, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\tRuntimeObject* L_5 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_5);\n\t\t\tbool L_6 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t3774429009_il2cpp_TypeInfo_var, (RuntimeObject*)L_5);\n\t\t\tif (L_6)\n\t\t\t{\n\t\t\t\tgoto IL_000c;\n\t\t\t}\n\t\t}\n\nIL_0025:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x35, FINALLY_002a);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t2748878030 *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_7 = V_1;\n\t\t\tif (L_7)\n\t\t\t{\n\t\t\t\tgoto IL_002e;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\nIL_002e:\n\t\t{\n\t\t\tRuntimeObject* L_8 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_8);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t4289139908_il2cpp_TypeInfo_var, (RuntimeObject*)L_8);\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x35, IL_0035)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t2748878030 *)\n\t}\n\nIL_0035:\n\t{\n\t\treturn;\n\t}\n}", "concepts": ["iterators", "STL", "reflection"], "parsing_result": [{"instruction": "Create a Python function `checkIfMagicSquare` that returns true if a matrix is a magic square."}, {"instruction": "Given a Python list of integers, write a function that returns a new list containing only the even numbers."}, {"instruction": "Create a Python function `sum` that computes the sum of all the elements in a list."}, {"instruction": "Create a Python function `isAnagram` that checks for anagrams using iterators."}, {"instruction": "Create a Python function `flatten` that flattens a nested list of integers."}, {"instruction": "Create a Python function `creditCalc` which calculates the monthly payment of a credit loan given its parameters."}, {"instruction": "Write a Python function `is_iterable` that returns true if an object is an iterable."}, {"instruction": "Create a Python function `isPythagoreanTriple` that returns true if the parameters are the length of the sides of a right triangle."}, {"instruction": "Create a Python function `capitalize` that takes a string as input and returns a capitalized version of the string using iterators."}, {"instruction": "Create a Python function `get_keys` that returns the keys of a dictionary."}, {"instruction": "Create a Python function `sortSquares` that sorts a list of numbers into descending order using a Python sort, where each element is the square of another element."}, {"instruction": "Create a Python function `sumOfNumbers` that returns the sum of the integers in a file."}, {"instruction": "Write a Python function `reverse` that takes a list and returns a reversed copy."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Create a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python function `sum` that returns the sum of the elements of a list of numbers."}, {"instruction": "Write a Python function `reverseList` that reverses a list, using iterators."}, {"instruction": "Create a Python function `reverse` that reverses the characters in a string and returns the result."}, {"instruction": "Create a Python function `print_all_files` that prints out the name of every file in a directory."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `map` that applies a function to every element in a list."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `get_function_name` that takes a callable as a parameter, and returns a string of the callable's name."}, {"instruction": "Write an iterator class that iterates through all possible permutations of the passed list of numbers."}, {"instruction": "Implement a Python function `get_upper_divisors` that returns the upper divisors of a given number."}, {"instruction": "Create a Python function `reflection` that returns a reflection of a string."}, {"instruction": "Create a Python function `palindrome` that returns true if a given string is a palindrome."}, {"instruction": "Create a Python function `isAnagram` that returns true if two strings are anagrams of each other."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Implement a Python function `isAnagram` that returns true if two strings are anagrams of each other."}, {"instruction": "Create a Python function `map` that's a clone of the built-in Python function of the same name."}, {"instruction": "Create a Python function `binarySearch` that returns the index of a target integer in an array using recursion."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: #\n\n### Task", "fingerprint": null, "content": {"code": "double NeuroSimSubArrayReadLatency(SubArray *subArray) {\t// For 1 weighted sum task on selected columns\n\tif (!param->NeuroSimDynamicPerformance) { return 0; }\t// Skip this function if param->NeuroSimDynamicPerformance is false\n\tif (subArray->cell.memCellType == Type::SRAM) {   // SRAM\n\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->capRow1, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->precharger.CalculateLatency(1e20, subArray->capCol, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->senseAmp.CalculateLatency(subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\tif (subArray->shiftAddEnable) {\n\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\t// There are numReadPulse times of shift-and-add\n\t\t}\n\t\tdouble resPullDown = CalculateOnResistance(subArray->cell.widthSRAMCellNMOS * subArray->tech.featureSize, NMOS, subArray->inputParameter.temperature, subArray->tech);\n\t\tdouble tau = (subArray->resCellAccess + resPullDown) * (subArray->capCellAccess + subArray->capCol) + subArray->resCol * subArray->capCol / 2;\n\t\ttau *= log(subArray->tech.vdd / (subArray->tech.vdd - subArray->cell.minSenseVoltage / 2));   /* one signal raises and the other drops, so cell.minSenseVoltage/2 is enough */\n\t\tdouble gm = CalculateTransconductance(subArray->cell.widthAccessCMOS * subArray->tech.featureSize, NMOS, subArray->tech);\n\t\tdouble beta = 1 / (resPullDown * gm);\n\t\tdouble colRamp = 0;\n\t\tsubArray->colDelay = horowitz(tau, beta, subArray->wlDecoder.rampOutput, &colRamp) * subArray->numRow * subArray->numReadPulse * subArray->activityRowRead;\n\n\t\treturn \tsubArray->wlDecoder.readLatency +\n\t\t\t\tsubArray->precharger.readLatency +\n\t\t\t\tsubArray->colDelay +\n\t\t\t\tsubArray->senseAmp.readLatency +\n\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\tsubArray->shiftAdd.readLatency;\n\n\t} \n    else {\t// eNVM\n\t\tif (subArray->digitalModeNeuro) {\t// Digital eNVM, row by row operation\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tif(subArray->parallelRead == true) \n                {   // for the parallel readout\n                    //void NewSwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {\t// For simplicity, assume shift register is ideal\n                    double capToDrive=MAX(subArray->capRow2,subArray->capRow1);\n                    double resToDrive=subArray->resRow;\n                    subArray->wlBlSwitchMatrix.CalculateLatency(1e20, capToDrive, resToDrive, subArray->numReadPulse * subArray->activityRowRead, 1);\n                   \n                    // only need the wl-bl decoder\n                    double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n                    // subArray->colDelay = 2.3 * subArray->resCol * capBL; //column delay\n                    \n                    // Calculate column latency\n\t\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;  // assume the 15~20% voltage drop is enough for sensing\n \n                    // the read circuit\n                    // The input capacitance of the read circuit\n                    double Cin_ReadCircuit = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\n                    // Use the maximum read current to determine the readpulsewidth\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n                    subArray->cell.readPulseWidth = Cin_ReadCircuit * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\n                    // Delay at the Mux the mux is driving the read circuit\n                    double colRamp=0;\n                    subArray->mux.CalculateLatency(colRamp, Cin_ReadCircuit, 1); // the drive resistance should be the input resistance of the read circuit, the cap is the cap of\n\n                    // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n                    int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n                    int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n                    subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n                    subArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n                    subArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n                   if (subArray->shiftAddEnable) {\n                       // two shift adders are needed. one to add\n                       subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n                   }\n                                \n                   return  MAX(subArray->wlBlSwitchMatrix.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n                           subArray->readCircuit.readLatency +\n                           subArray->subtractor.readLatency +\n                           subArray->colDelay+ // need furthercheck\n                           subArray->shiftAdd.readLatency;                \n                }\n                else {\n                   double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n\t\t\t\t   subArray->wlDecoder.CalculateLatency(1e20, subArray->capRow2, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\t\t\t   double colRamp = 0;\n\t\t\t\t   // double tau = subArray->resCol * capBL / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t   // subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t   // subArray->colDelay = 2.3 * subArray->resCol * capBL;\n\t\t\t\t   double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n                   subArray->colDelay = tau * 0.2 * subArray->numColMuxed * subArray->numRow * subArray->numReadPulse;                   \n                   subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t   // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\t   int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\t   int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n\t\t\t\t   subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n\t\t\t\t   double capInputLoad = capBL + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\t   subArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\t   if (subArray->shiftAddEnable) {\n\t\t\t\t\t   subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n                        subArray->colDelay+\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n                }\n                        \n\t\t\t} else {        // Cross-point\n\t\t\t\tdouble wlDecoderLoad = subArray->colDecoderDriver.capInvInput + subArray->colDecoderDriver.capTgGateN + subArray->colDecoderDriver.capTgGateP;\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, wlDecoderLoad, NULL, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderDriver.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow1, subArray->capRow1, subArray->resRow, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tdouble colRamp = 0;\n\t\t\t\t// double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t// subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t// subArray->colDelay = 2.3 * subArray->resCol * subArray->capCol;\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n                subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t// Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\tint numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\tint numInput = numAdder * subArray->numCellPerSynapse;\n\t\t\t\tsubArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP*numInput, 1, 1);\n\t\t\t\tdouble capInputLoad = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\tsubArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency + subArray->wlDecoderDriver.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency);\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t} else {\t// Analog eNVM\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->wlDecoderOutput.capNorInput, NULL, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderOutput.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow2, subArray->resRow, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->blSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);    // Don't care write\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n                    // Cin is the capacitance to collect the charge\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\t// the maximum read current\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlDecoderOutput.readLatency +\n\t\t\t\t\t\tsubArray->blSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency + \n                        subArray->colDelay;\n\n\t\t\t} else {\t\t// Cross-point\n\t\t\t\tsubArray->wlSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\tdouble Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n                // the column delay\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t}\n\t}\n}", "docstring": "// calculate the area from Subarray class", "function_name": "NeuroSimSubArrayArea"}, "id": 65, "seed": "double NeuroSimSubArrayReadLatency(SubArray *subArray) {\t// For 1 weighted sum task on selected columns\n\tif (!param->NeuroSimDynamicPerformance) { return 0; }\t// Skip this function if param->NeuroSimDynamicPerformance is false\n\tif (subArray->cell.memCellType == Type::SRAM) {   // SRAM\n\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->capRow1, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->precharger.CalculateLatency(1e20, subArray->capCol, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->senseAmp.CalculateLatency(subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\tif (subArray->shiftAddEnable) {\n\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\t// There are numReadPulse times of shift-and-add\n\t\t}\n\t\tdouble resPullDown = CalculateOnResistance(subArray->cell.widthSRAMCellNMOS * subArray->tech.featureSize, NMOS, subArray->inputParameter.temperature, subArray->tech);\n\t\tdouble tau = (subArray->resCellAccess + resPullDown) * (subArray->capCellAccess + subArray->capCol) + subArray->resCol * subArray->capCol / 2;\n\t\ttau *= log(subArray->tech.vdd / (subArray->tech.vdd - subArray->cell.minSenseVoltage / 2));   /* one signal raises and the other drops, so cell.minSenseVoltage/2 is enough */\n\t\tdouble gm = CalculateTransconductance(subArray->cell.widthAccessCMOS * subArray->tech.featureSize, NMOS, subArray->tech);\n\t\tdouble beta = 1 / (resPullDown * gm);\n\t\tdouble colRamp = 0;\n\t\tsubArray->colDelay = horowitz(tau, beta, subArray->wlDecoder.rampOutput, &colRamp) * subArray->numRow * subArray->numReadPulse * subArray->activityRowRead;\n\n\t\treturn \tsubArray->wlDecoder.readLatency +\n\t\t\t\tsubArray->precharger.readLatency +\n\t\t\t\tsubArray->colDelay +\n\t\t\t\tsubArray->senseAmp.readLatency +\n\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\tsubArray->shiftAdd.readLatency;\n\n\t} \n    else {\t// eNVM\n\t\tif (subArray->digitalModeNeuro) {\t// Digital eNVM, row by row operation\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tif(subArray->parallelRead == true) \n                {   // for the parallel readout\n                    //void NewSwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {\t// For simplicity, assume shift register is ideal\n                    double capToDrive=MAX(subArray->capRow2,subArray->capRow1);\n                    double resToDrive=subArray->resRow;\n                    subArray->wlBlSwitchMatrix.CalculateLatency(1e20, capToDrive, resToDrive, subArray->numReadPulse * subArray->activityRowRead, 1);\n                   \n                    // only need the wl-bl decoder\n                    double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n                    // subArray->colDelay = 2.3 * subArray->resCol * capBL; //column delay\n                    \n                    // Calculate column latency\n\t\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;  // assume the 15~20% voltage drop is enough for sensing\n \n                    // the read circuit\n                    // The input capacitance of the read circuit\n                    double Cin_ReadCircuit = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\n                    // Use the maximum read current to determine the readpulsewidth\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n                    subArray->cell.readPulseWidth = Cin_ReadCircuit * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\n                    // Delay at the Mux the mux is driving the read circuit\n                    double colRamp=0;\n                    subArray->mux.CalculateLatency(colRamp, Cin_ReadCircuit, 1); // the drive resistance should be the input resistance of the read circuit, the cap is the cap of\n\n                    // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n                    int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n                    int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n                    subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n                    subArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n                    subArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n                   if (subArray->shiftAddEnable) {\n                       // two shift adders are needed. one to add\n                       subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n                   }\n                                \n                   return  MAX(subArray->wlBlSwitchMatrix.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n                           subArray->readCircuit.readLatency +\n                           subArray->subtractor.readLatency +\n                           subArray->colDelay+ // need furthercheck\n                           subArray->shiftAdd.readLatency;                \n                }\n                else {\n                   double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n\t\t\t\t   subArray->wlDecoder.CalculateLatency(1e20, subArray->capRow2, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\t\t\t   double colRamp = 0;\n\t\t\t\t   // double tau = subArray->resCol * capBL / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t   // subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t   // subArray->colDelay = 2.3 * subArray->resCol * capBL;\n\t\t\t\t   double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n                   subArray->colDelay = tau * 0.2 * subArray->numColMuxed * subArray->numRow * subArray->numReadPulse;                   \n                   subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t   // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\t   int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\t   int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n\t\t\t\t   subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n\t\t\t\t   double capInputLoad = capBL + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\t   subArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\t   if (subArray->shiftAddEnable) {\n\t\t\t\t\t   subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n                        subArray->colDelay+\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n                }\n                        \n\t\t\t} else {        // Cross-point\n\t\t\t\tdouble wlDecoderLoad = subArray->colDecoderDriver.capInvInput + subArray->colDecoderDriver.capTgGateN + subArray->colDecoderDriver.capTgGateP;\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, wlDecoderLoad, NULL, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderDriver.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow1, subArray->capRow1, subArray->resRow, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tdouble colRamp = 0;\n\t\t\t\t// double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t// subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t// subArray->colDelay = 2.3 * subArray->resCol * subArray->capCol;\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n                subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t// Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\tint numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\tint numInput = numAdder * subArray->numCellPerSynapse;\n\t\t\t\tsubArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP*numInput, 1, 1);\n\t\t\t\tdouble capInputLoad = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\tsubArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency + subArray->wlDecoderDriver.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency);\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t} else {\t// Analog eNVM\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->wlDecoderOutput.capNorInput, NULL, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderOutput.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow2, subArray->resRow, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->blSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);    // Don't care write\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n                    // Cin is the capacitance to collect the charge\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\t// the maximum read current\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlDecoderOutput.readLatency +\n\t\t\t\t\t\tsubArray->blSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency + \n                        subArray->colDelay;\n\n\t\t\t} else {\t\t// Cross-point\n\t\t\t\tsubArray->wlSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\tdouble Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n                // the column delay\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t}\n\t}\n}", "concepts": ["#"], "parsing_result": [{"instruction": "Implement a Python class `Stack` that represents a stack."}, {"instruction": "Implement a Python class to represent a video game player with the following properties:\n\n- name\n- total time played\n- amount of coins\n- inventory of items"}, {"instruction": "Implement a Python class called `MyLinkedList` that simulates a singly-linked list."}, {"instruction": "Implement a Python class `Person` that represents a person with two fields: `name` and `age`. Create a constructor that initializes the name and age of the person."}, {"instruction": "Write a Python class `Vector` that implements a two-dimensional vector."}, {"instruction": "Create a Python class `Person` that defines a person's name, age, and height."}, {"instruction": "Write a Python class `Stack` that implements a stack as a list, keeping track of its size."}, {"instruction": "Write a Python class `Fraction` that represents a fraction."}, {"instruction": "Write a Python class `Point` that represents a point in 2D space, and contains the following methods:\n- `__init__`: takes two integer parameters, `x` and `y`, and sets the point's x- and y-coordinates accordingly\n- `distance`: takes another Point object and returns the distance between this point and the given point\n- `translate`: takes an integer parameter `d`, and translates the point by `d` units in both directions\n- `scale`: takes a floating point parameter `s`, and scales the point by a factor of `s`\n- `printPoint`: prints the point in the form `(x, y)`"}, {"instruction": "Write a Python class `Queue` with two methods `enqueue` and `dequeue`. The `enqueue` method adds a new element to the queue, and the `dequeue` method removes the oldest element from the queue."}, {"instruction": "Create a Python class `Deck` that represents a standard deck of cards."}, {"instruction": "Create a Python class `Person` that has attributes `name` and `age`, and has the following methods:\n1. `getName()`\n2. `getAge()`\n3. `increaseAge()`\n4. `isOlderThan(otherPerson)`"}, {"instruction": "#"}, {"instruction": "Write a class `Date` that models a date in the ISO 8601 format. It should support the following functionality:\n\n- default initialization\n- initialization with ISO 8601 string\n- comparison\n- addition and subtraction\n- format printing\n- date arithmetic"}, {"instruction": "Write a Python `class` that implements a stack."}, {"instruction": "Create a Python class `Stack` that implements a stack data structure."}, {"instruction": "Implement a Python class `Polygon` that stores the number of sides of a polygon and its name./python/1.1_count_digits/solution.py\n# Count the number of digits in an integer.\n\n# Input: An integer.\n# Output: The number of digits in the integer.\n# Examples:\n# 123 -> 3\n# 120 -> 3\n# 1200 -> 4\n# -123 -> 3\n# 0 -> 1\n\n\ndef countDigits(n):\n    if n >= 0:\n        return len(str(n))\n    else:\n        return len(str(-n))\n\n\n# Examples\nprint(countDigits(123))\nprint(countDigits(120))\nprint(countDigits(1200))\nprint(countDigits(-123))\nprint(countDigits(0))\n/python/1.3_count_words/solution.py\n# Count the number of words in a string.\n\n# Input: A string.\n# Output: The number of words in the string.\n# Examples:\n# '' -> 0\n# ' a ' -> 0\n# '   ' -> 0\n# ' ' -> 1\n# ' '   ' ' -> 1\n# ' one ' -> 1\n# ' one two ' -> 2\n# ' one two three ' -> 3\n# ' one two three four ' -> 4\n# ' one two three four five ' -> 5\n# ' one two three four five six ' -> 6\n# ' one two three four five six seven ' -> 7\n# ' one two three four five six seven eight ' -> 8\n# 'one two three four five six seven eight nine ten' -> 10\n\n\ndef countWords(s):\n    return len(s.split())\n\n\n# Examples\nprint(countWords(''))\nprint(countWords(' a '))\nprint(countWords('   '))\nprint(countWords(' '))\nprint(countWords('   '))\nprint(countWords(' one '))\nprint(countWords(' one two '))\nprint(countWords(' one two three '))\nprint(countWords(' one two three four '))\nprint(countWords(' one two three four five '))\nprint(countWords(' one two three four five six '))\nprint(countWords(' one two three four five six seven '))\nprint(countWords(' one two three four five six seven eight '))\nprint(countWords('one two three four five six seven eight nine ten'))\n/python/1.2_is_prime/solution.py\n# Check if a number is prime.\n\n# Input: A number.\n# Output: A boolean.\n# Examples:\n# isPrime(0) -> False\n# isPrime(1) -> False\n# isPrime(2) -> True\n# isPrime(3) -> True\n# isPrime(11) -> True\n# isPrime(12) -> False\n# isPrime(-1) -> False\n# isPrime(-2) -> False\n\n\ndef isPrime(n):\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n# Examples\nprint(isPrime(0))\nprint(isPrime(1))\nprint(isPrime(2))\nprint(isPrime(3))\nprint(isPrime(11))\nprint(isPrime(12))\nprint(isPrime(-1))\nprint(isPrime(-2))\n/python/1.4_reverse_string/solution.py\n# Reverse a string using the STL iterators.\n\n# Input: A string.\n# Output: The reversed string (using STL iterators).\n# Examples:\n# '' -> ''\n# ' ' -> ' '\n# '   ' -> '   '\n# 'a' -> 'a'\n# 'abc' -> 'cba'\n# 'ab' -> 'ba'\n# 'z' -> 'z'\n# '   z   ' -> '   z   '\n# '   z   a   b   c   ' -> '   c   b   a   z   '\n\n\ndef reverseString(s):\n    return \"\".join(reversed(s))\n\n\n# Examples\nprint(reverseString(''))\nprint(reverseString(' '))\nprint(reverseString('   '))\nprint(reverseString('a'))\nprint(reverseString('abc'))\nprint(reverseString('ab'))\nprint(reverseString('z'))\nprint(reverseString('   z   '))\nprint(reverseString('   z   a   b   c   '))"}, {"instruction": "Implement a Python class `Stack` that contains a list of stack elements."}, {"instruction": "Write a class `Rectangle` that represents a rectangle in 2D space, with a height and width. Add a method `area` to calculate the area of the rectangle."}, {"instruction": "Write a Python class `Point` that represents a point in 2D space."}, {"instruction": "Write a Python class `Matrix` that implements a matrix as a 2-dimensional list."}, {"instruction": "Write a Python class `Queue` that implements a queue using a Python list."}, {"instruction": "Write a Python class `Fraction` that models fractional numbers and supports arithmetic operations."}, {"instruction": "#"}, {"instruction": "Implement a Python class called `BinarySearchTree` that uses binary search trees to perform maximum, minimum, and search operations."}, {"instruction": "Write a Python class `Calculator` that implements basic arithmetic operations."}, {"instruction": "Write a Python class `MyList` that behaves like a Python list."}, {"instruction": "Create a Python class `Point` with attributes `x` and `y` and methods `getx` and `gety`."}, {"instruction": "Create a C# class `Rectangle` that contains two properties `Width` and `Height` of type `float`, and a method `Area` that returns the rectangle area."}, {"instruction": "Create a Python class `PrimeFactorGenerator` that generates all of the prime factors of a number."}, {"instruction": "Write a Python class `BinarySearchTree` that implements a binary search tree."}, {"instruction": "Write a Python class `Point` with an `__init__` method that takes an integer as input and sets the x coordinate of the point to that integer (e.g., `p = Point(10)`)."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: C method, C++ method, pointer arithmetic, return value, boolean type\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_Scene_autoReleaseAssets_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::Scene *arg1 = (cc::Scene *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::Scene>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"Scene_autoReleaseAssets_set,2,SWIGTYPE_bool\"); \n    cc_Scene_autoReleaseAssets_set(arg1,arg2);\n    \n    \n    return true;\n}", "docstring": "// %typemap(in) bool", "function_name": "js_cc_Scene_onBatchCreated"}, "id": 66, "seed": "static bool js_cc_Scene_autoReleaseAssets_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::Scene *arg1 = (cc::Scene *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::Scene>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"Scene_autoReleaseAssets_set,2,SWIGTYPE_bool\"); \n    cc_Scene_autoReleaseAssets_set(arg1,arg2);\n    \n    \n    return true;\n}", "concepts": ["C method", "C++ method", "pointer arithmetic", "return value", "boolean type"], "parsing_result": [{"instruction": "Write a C++ class `MyString` that implements a string class using C-style methods that supports the following operations:\n\n- `MyString(const char *)`\n- `MyString(const MyString &)`\n- `MyString concat(const MyString &)`\n- `int length()`\n- `char *toCStr()`\n- `MyString substr(int start, int length)`\n- `bool equals(const MyString &)`"}, {"instruction": "Implement a Python class `Node` that represents a node in a singly-linked list."}, {"instruction": "Create a Python class `Vector` that implements a basic vector class."}, {"instruction": "Implement a Python class `Foo` that has a method `bar` that takes an integer parameter `x`, and returns a boolean indicating whether the input value `x` is even."}, {"instruction": "Implement a Python class `Rectangle`."}, {"instruction": "Implement a Python class `ParkingLot` that represents a parking lot."}, {"instruction": "Create a Python class called `Rectangle` with the following attributes:\n- `width` (type `int`)\n- `height` (type `int`)\n\nCreate a method called `area` that returns the area of the rectangle."}, {"instruction": "Create a Python class called `Rectangle` that contains two instance variables and two methods:\n- 2 instance variables: width and height\n- 2 methods: `perimeter` and `area`"}, {"instruction": "Write a Python class `Node` that represents a node in a singly-linked list."}, {"instruction": "Implement a Python class `Rectangle` with methods `area`, `perimeter`, and `isSquare`."}, {"instruction": "Implement a C++ class `Node` that has a single data field of type `int` and an optional pointer to the next `Node`."}, {"instruction": "Implement a Python class `BinaryTree` with the following methods:\n\n- `insert`\n- `contains`\n- `preOrderTraverse`\n- `inOrderTraverse`\n- `postOrderTraverse`"}, {"instruction": "Create a Python class `Matrix` that implements matrix multiplication."}, {"instruction": "Create a Python class `Complex` that implements a complex number in the form a + bi, where a and b are real numbers and i is the imaginary unit. Implement a method `get_real` that returns the real component of the complex number as a float, and a method `get_imag` that returns the imaginary component of the complex number as a float. Also implement methods `conjugate` and `norm` that return the complex conjugate and the norm of a complex number, respectively."}, {"instruction": "Write a Python class `Set` that implements a mathematical set."}, {"instruction": "Write a Python class `PyBool` that implements a boolean type."}, {"instruction": "Implement a Python class `Point` that represents a point in a two-dimensional Cartesian coordinate system.\n* Implement a method `distance` that calculates the distance between two points.\n* Implement a method `distance` that calculates the distance between two points.\n* Implement a method `slope` that calculates the slope of a straight line between two points."}, {"instruction": "Write a Python class `Node` that contains the following methods:\n1. `get_data` that returns the node's value\n2. `get_next` that returns the next node\n3. `set_data` that sets the node's value\n4. `set_next` that sets the next node\n5. `__init__` that initializes the node with a `data` value and a `next` node"}, {"instruction": "Implement a Python class `Node` that contains two elements: a value and a pointer to the next element."}, {"instruction": "Implement the `reverseString` function."}, {"instruction": "Write a Python class `Student` with two attributes: `name` and `gpa`. `Student` has two methods: `writeGpa` and `readGpa`. `writeGpa` takes a `float` as a parameter and changes the `gpa` attribute. `readGpa` returns the `gpa` attribute as a `float`."}, {"instruction": "Write a Python class `Node` that stores a single value."}, {"instruction": "Implement a Python class `Student` with the following properties:\n\n- `name`: a string\n- `age`: an integer\n- `gpa`: a float\n\nHave the class provide the following methods:\n\n- `getName`: returns the name of the student\n- `getAge`: returns the age of the student\n- `getGPA`: returns the GPA of the student"}, {"instruction": "Create a Python class `MyString` that performs similar functionality to the string class."}, {"instruction": "Write a Python class `Node` that defines a singly linked list node."}, {"instruction": "Implement a C++ class `Point` that represents points in a 2D coordinate system."}, {"instruction": "Create a Python class `Point` with properties `x` and `y` and methods `set` and `get`."}, {"instruction": "Write a Python class `PyPerson` with attributes `name` and `age`. Implement a method `__bool__` that returns `True` if the person is older than 18."}, {"instruction": "Implement a Python class `Vector` that stores a list of three elements and provides methods for calculating the vector's magnitude, dot product, and cross product."}, {"instruction": "Implement the following functions for the `Complex` class (a class representing a complex number):\n\n- `__init__`: initializes the real and imaginary parts to `0`\n- `add`: adds two complex numbers\n- `sub`: subtracts two complex numbers\n- `mul`: multiplies two complex numbers\n- `abs`: returns the absolute value of the complex number\n- `conj`: returns the complex conjugate of the complex number"}, {"instruction": "Implement a Python class `Counter` that can be used to count and count down from a given integer."}, {"instruction": "Create a Python class `Node` that is a linked list node containing a value and a reference to the next node."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: UDP sockets, asynchronous, threads, struct\n\n### Task", "fingerprint": null, "content": {"code": "int client() {\n\t/*\n\tSimple udp client\n\t*/\n\tstruct sockaddr_in si_other;\n\tint s, slen = sizeof(si_other);\n\tchar buf[1500];\n\tchar message[BUFLEN];\n\tWSADATA wsa;\n\tchar ip_address[20];\n\n\tprintf(\"input the IP address, for default press d\\n\");\n\tscanf(\"%s\", ip_address);\n\tif (strcmp(ip_address, \"d\") == 0)\n\t\tstrcpy(ip_address, SERVER);\n\n\t//Initialise winsock\n\tprintf(\"\\nInitialising Winsock...\");\n\tif (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)\n\t{\n\t\tprintf(\"Failed. Error Code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\tprintf(\"Initialised.\\n\");\n\n\t//create socket\n\tif ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == SOCKET_ERROR)\n\t{\n\t\tprintf(\"socket() failed with error code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//setup address structure\n\tmemset((char *)&si_other, 0, sizeof(si_other));\n\tsi_other.sin_family = AF_INET;\n\tsi_other.sin_port = htons(PORT);\n\tsi_other.sin_addr.S_un.S_addr = inet_addr(ip_address);\n\n\tAS_FIELDS* asfieldo = (AS_FIELDS*)malloc(sizeof(AS_FIELDS));\n\tasfieldo->a = s;\n\tasfieldo->b = slen;\n\tasfieldo->si_other = si_other;\n\tDWORD myThreadID, dwExit= 0;\n\tHANDLE myHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\n\tchar c;\n\tgetchar();\n\n\tdo {\n\t\t// menu\n\t\tprintf(\"CLIENT MENU:\\n\");\n\t\tprintf(\"t - text message:\\n\");\n\t\tprintf(\"c - change connection:\\n\");\n\t\tprintf(\"f - send faulty packet:\\n\");\n\t\tprintf(\"d - doimplementacia:\\n\");\n\t\tprintf(\"e - exit program:\\n\");\n\t\tc = getchar();\n\t\tgetchar();\n\t\tswitch (c) {\n\t\tcase 't':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_text(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'c':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tchange_conn(s, si_other, slen);\n\t\t\tc = 'e';\n\t\t\tbreak;\n\t\tcase 'f':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_faulty_packet(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'd':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tdoimplementacia(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'e':\n\t\t\treturn 1;\n\t\t}\n\t} while (c != 'e');\n\t\n\tclosesocket(s);\n\tWSACleanup();\n\treturn 0;\n}", "docstring": "//try to receive some data, this is a blocking call", "function_name": "send_text"}, "id": 69, "seed": "int client() {\n\t/*\n\tSimple udp client\n\t*/\n\tstruct sockaddr_in si_other;\n\tint s, slen = sizeof(si_other);\n\tchar buf[1500];\n\tchar message[BUFLEN];\n\tWSADATA wsa;\n\tchar ip_address[20];\n\n\tprintf(\"input the IP address, for default press d\\n\");\n\tscanf(\"%s\", ip_address);\n\tif (strcmp(ip_address, \"d\") == 0)\n\t\tstrcpy(ip_address, SERVER);\n\n\t//Initialise winsock\n\tprintf(\"\\nInitialising Winsock...\");\n\tif (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)\n\t{\n\t\tprintf(\"Failed. Error Code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\tprintf(\"Initialised.\\n\");\n\n\t//create socket\n\tif ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == SOCKET_ERROR)\n\t{\n\t\tprintf(\"socket() failed with error code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//setup address structure\n\tmemset((char *)&si_other, 0, sizeof(si_other));\n\tsi_other.sin_family = AF_INET;\n\tsi_other.sin_port = htons(PORT);\n\tsi_other.sin_addr.S_un.S_addr = inet_addr(ip_address);\n\n\tAS_FIELDS* asfieldo = (AS_FIELDS*)malloc(sizeof(AS_FIELDS));\n\tasfieldo->a = s;\n\tasfieldo->b = slen;\n\tasfieldo->si_other = si_other;\n\tDWORD myThreadID, dwExit= 0;\n\tHANDLE myHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\n\tchar c;\n\tgetchar();\n\n\tdo {\n\t\t// menu\n\t\tprintf(\"CLIENT MENU:\\n\");\n\t\tprintf(\"t - text message:\\n\");\n\t\tprintf(\"c - change connection:\\n\");\n\t\tprintf(\"f - send faulty packet:\\n\");\n\t\tprintf(\"d - doimplementacia:\\n\");\n\t\tprintf(\"e - exit program:\\n\");\n\t\tc = getchar();\n\t\tgetchar();\n\t\tswitch (c) {\n\t\tcase 't':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_text(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'c':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tchange_conn(s, si_other, slen);\n\t\t\tc = 'e';\n\t\t\tbreak;\n\t\tcase 'f':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_faulty_packet(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'd':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tdoimplementacia(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'e':\n\t\t\treturn 1;\n\t\t}\n\t} while (c != 'e');\n\t\n\tclosesocket(s);\n\tWSACleanup();\n\treturn 0;\n}", "concepts": ["UDP sockets", "asynchronous", "threads", "struct"], "parsing_result": [{"instruction": "Write a Python class `UDPServer` that creates a UDP server and listens for messages."}, {"instruction": "Implement a Python class `UDPSocket` that models a UDP socket that allows clients to send and receive packets of data."}, {"instruction": "Create a program in Python that continually accepts a UDP packet, extracts the data, and prints it to the console."}, {"instruction": "Create a Python class `Server` that implements a server that receives multiple client connections and sends time-stamped messages to them."}, {"instruction": "Implement an asynchronous network client in Python using UDP sockets."}, {"instruction": "Create a Python class called `UDPServer` that creates a UDP server."}, {"instruction": "Create a Python class `Client` that simulates a simple client-server chat application."}, {"instruction": "Implement a UDP echo server that accepts client connections and sends the received data back with the same data length."}, {"instruction": "Create a Python class `UDPServer` that implements a UDP server."}, {"instruction": "Create a Python class that emulates a UDP server, listens on a port, and responds to UDP requests using threads."}, {"instruction": "Create a class `Incrementor` that implements a thread-safe `increment` method. The class should support two behaviors:\n\n1. The `increment` method should return the next integer, and\n2. The `increment` method should block until a value has been written.\n\nThe class should be implemented using a thread-safe `queue` and `threading.Lock` (e.g., a single `threading.Lock` for the class, or a `threading.Lock` for each instance of the class)."}, {"instruction": "Create a Python class called `Datagram` that represents a datagram in the Internet protocol."}, {"instruction": "Write a Python class that runs as a UDP server and receives a list of `struct`s, and returns a list of `struct`s back to the sender."}, {"instruction": "Implement a UDP server program that accepts numeric input from a client and returns the double of the number using the socket module and threading."}, {"instruction": "Write a Python class `UDPServer` that implements a server that receives a string from a client, performs some operation on the string, and sends the result to the client."}, {"instruction": "Write a Python class `UDPServer` that serves as a local UDP server that receives datagrams and then prints the received data."}, {"instruction": "Implement a Python UDP socket server that accepts a message and returns the message back to the client, using threads and asynchronous programming."}, {"instruction": "Create a Python class `UDPSocket` that implements a UDP client/server socket."}, {"instruction": "Create a Python class that implements a UDP socket in asynchronous mode using threads."}, {"instruction": "Write a TCP client and server that allows a user to send a message to another user and receive a reply."}, {"instruction": "Write a Python class `UDPConn` that implements a connection between 2 processes using a UDP socket. The class must have the following public methods:\n\n- `connect`: takes 2 arguments: `address` and `port`, which are used to connect to a server listening on that address and port\n- `send`: takes 1 argument: `data`, which is used to send a message to the server\n- `recv`: takes no arguments, and returns a string containing the received message"}, {"instruction": "Create a Python class `UDPSocket` that implements the [UDP socket API](https://docs.python.org/3/library/socket.html#socket.socket)."}, {"instruction": "Create a Python class `UDPServer` that implements an asynchronous UDP server."}, {"instruction": "Create a Python class `SynchronizedQueue` that implements a thread-safe queue."}, {"instruction": "Create a Python class `UDPClient` that sends UDP messages to a UDP server."}, {"instruction": "Create a Python class `UDPServer` that implements a UDP server that broadcasts messages from a client."}, {"instruction": "Implement a UDP server that responds to SRP login requests by responding with a challenge."}, {"instruction": "Create a Python class `UDPServer` that provides a UDP server that can receive a single message."}, {"instruction": "Write a Python class `UDPClient` that sends UDP datagrams using `socket.SOCK_DGRAM` and `socket.AF_INET` addressing."}, {"instruction": "Implement a Python class `UDPServer` that provides an asynchronous UDP server. The server should be configured to listen for incoming messages, process each message, and return a response."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: SOAP, SOAP server programming, soap_id_forward, SOAP_TAG_MISMATCH, SOAP_NO_TAG, SOAP_XML_STRICT, SOAP_OCCURS, SOAP_TAG_MISMATCH, SOAP_NO_TAG, soap_flag_loginCmsReturn1\n\n### Task", "fingerprint": null, "content": {"code": "soap_in__ns1__loginCmsResponse(struct soap *soap, const char *tag, _ns1__loginCmsResponse *a, const char *type)\n{\n\t(void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_in(soap, tag, 0, NULL))\n\t\treturn NULL;\n\ta = (_ns1__loginCmsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_afip__ns1__loginCmsResponse, sizeof(_ns1__loginCmsResponse), soap->type, soap->arrayType, afip_instantiate, afip_fbase);\n\tif (!a)\n\t\treturn NULL;\n\tif (soap->alloced && soap->alloced != SOAP_TYPE_afip__ns1__loginCmsResponse)\n\t{\tsoap_revert(soap);\n\t\t*soap->id = '\\0';\n\t\treturn (_ns1__loginCmsResponse *)a->soap_in(soap, tag, type);\n\t}\n\tif (soap->alloced)\n\t\ta->soap_default(soap);\n\tsize_t soap_flag_loginCmsReturn1 = 1;\n\tif (soap->body && *soap->href != '#')\n\t{\n\t\tfor (;;)\n\t\t{\tsoap->error = SOAP_TAG_MISMATCH;\n\t\t\tif (soap_flag_loginCmsReturn1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))\n\t\t\t{\tif (soap_in_std__string(soap, \"ns1:loginCmsReturn\", &a->_ns1__loginCmsResponse::loginCmsReturn, \"xsd:string\"))\n\t\t\t\t{\tsoap_flag_loginCmsReturn1--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsoap_check_result(soap, \"ns1:loginCmsReturn\");\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t\tsoap->error = soap_ignore_element(soap);\n\t\t\tif (soap->error == SOAP_NO_TAG)\n\t\t\t\tbreak;\n\t\t\tif (soap->error)\n\t\t\t\treturn NULL;\n\t\t}\n\t\tif (soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t\tif ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginCmsReturn1 > 0))\n\t\t{\tsoap->error = SOAP_OCCURS;\n\t\t\treturn NULL;\n\t\t}\n\t}\n\telse if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')\n\t{\tsoap->error = SOAP_OCCURS;\n\t\treturn NULL;\n\t}\n\telse\n\t{\ta = (_ns1__loginCmsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_afip__ns1__loginCmsResponse, SOAP_TYPE_afip__ns1__loginCmsResponse, sizeof(_ns1__loginCmsResponse), 0, afip_finsert, afip_fbase);\n\t\tif (soap->body && soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\treturn a;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_out__ns1__loginCmsResponse"}, "id": 73, "seed": "soap_in__ns1__loginCmsResponse(struct soap *soap, const char *tag, _ns1__loginCmsResponse *a, const char *type)\n{\n\t(void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_in(soap, tag, 0, NULL))\n\t\treturn NULL;\n\ta = (_ns1__loginCmsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_afip__ns1__loginCmsResponse, sizeof(_ns1__loginCmsResponse), soap->type, soap->arrayType, afip_instantiate, afip_fbase);\n\tif (!a)\n\t\treturn NULL;\n\tif (soap->alloced && soap->alloced != SOAP_TYPE_afip__ns1__loginCmsResponse)\n\t{\tsoap_revert(soap);\n\t\t*soap->id = '\\0';\n\t\treturn (_ns1__loginCmsResponse *)a->soap_in(soap, tag, type);\n\t}\n\tif (soap->alloced)\n\t\ta->soap_default(soap);\n\tsize_t soap_flag_loginCmsReturn1 = 1;\n\tif (soap->body && *soap->href != '#')\n\t{\n\t\tfor (;;)\n\t\t{\tsoap->error = SOAP_TAG_MISMATCH;\n\t\t\tif (soap_flag_loginCmsReturn1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))\n\t\t\t{\tif (soap_in_std__string(soap, \"ns1:loginCmsReturn\", &a->_ns1__loginCmsResponse::loginCmsReturn, \"xsd:string\"))\n\t\t\t\t{\tsoap_flag_loginCmsReturn1--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsoap_check_result(soap, \"ns1:loginCmsReturn\");\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t\tsoap->error = soap_ignore_element(soap);\n\t\t\tif (soap->error == SOAP_NO_TAG)\n\t\t\t\tbreak;\n\t\t\tif (soap->error)\n\t\t\t\treturn NULL;\n\t\t}\n\t\tif (soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t\tif ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginCmsReturn1 > 0))\n\t\t{\tsoap->error = SOAP_OCCURS;\n\t\t\treturn NULL;\n\t\t}\n\t}\n\telse if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')\n\t{\tsoap->error = SOAP_OCCURS;\n\t\treturn NULL;\n\t}\n\telse\n\t{\ta = (_ns1__loginCmsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_afip__ns1__loginCmsResponse, SOAP_TYPE_afip__ns1__loginCmsResponse, sizeof(_ns1__loginCmsResponse), 0, afip_finsert, afip_fbase);\n\t\tif (soap->body && soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\treturn a;\n}", "concepts": ["SOAP", "SOAP server programming", "soap_id_forward", "SOAP_TAG_MISMATCH", "SOAP_NO_TAG", "SOAP_XML_STRICT", "SOAP_OCCURS", "SOAP_TAG_MISMATCH", "SOAP_NO_TAG", "soap_flag_loginCmsReturn1"], "parsing_result": [{"instruction": "Implement a SOAP server to serve requests for CMS services in Python."}, {"instruction": "Create a SOAP server program that accepts a SOAP request with a single `loginCms` message."}, {"instruction": "Implement a SOAP web service to log a user in or out of the CMS. The web service should be implemented in Python."}, {"instruction": "Create a Python SOAP web service that a user can call to perform a login operation. The service has a single method called `loginCms` and has a single string parameter called `loginCms`. Return the string `success` if the login is successful or `failure` if the login is unsuccessful."}, {"instruction": "Implement a SOAP server that responds to requests for usernames and passwords."}, {"instruction": "Use SoapPy to implement a SOAP server that accepts a login credential (user name and password) and returns a boolean stating whether the login credentials are valid."}, {"instruction": "Write a Python function `loginCms` that takes a username and password for the Cisco UCS Director SOAP API and returns a session token."}, {"instruction": "Implement a soap server program that implements the following soap function:\n```\nSOAP_FMAC5 int SOAP_FMAC6 __loginCms(struct soap*, char *loginCms, int *loginCmsReturn);\n```\n\nThis function takes a char *loginCms parameter, and returns an integer indicating whether or not the login was successful."}, {"instruction": "Write a Python SOAP client that programmatically accesses a SOAP server to retrieve login credentials and create a user account."}, {"instruction": "Write a Python SOAP server that serves an operation `loginCms` and a method `loginCmsReturn` implemented in C++."}, {"instruction": "Implement a SOAP server program to check if a user has the authority to access a CMS."}, {"instruction": "Implement a SOAP client library for an HTTP server."}, {"instruction": "Implement a SOAP server in Python that returns a random number between 0 and 999. The server must be able to receive a SOAP request, extract the login credentials, and return the random number."}, {"instruction": "Implement a SOAP server for an online calculator."}, {"instruction": "Create a SOAP server that implements a simple login service using the soap_id_forward, SOAP_TAG_MISMATCH, SOAP_NO_TAG, SOAP_XML_STRICT, SOAP_OCCURS, SOAP_TAG_MISMATCH, SOAP_NO_TAG, soap_flag_loginCmsReturn1, and soap_element_begin_out functions."}, {"instruction": "Implement a SOAP server program that accepts requests from a SOAP client and returns a SOAP response.\n/exampleSolution/main.cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n\n#include \"exampleSolution.h\"\n\nint main() {\n    std::string input = \"aabcccdd\";\n    std::cout << isPalindrome(input) << std::endl;\n\n    std::cout << charFrequency(\"cccaadd\") << std::endl;\n\n    std::cout << reverseString(input) << std::endl;\n\n    std::cout << gcd(36, 63) << std::endl;\n\n    int a = 10;\n    int b = 2;\n    swap(a, b);\n    std::cout << a << ' ' << b << std::endl;\n\n    std::cout << countVowels(\"Hello, World!\") << std::endl;\n\n    std::vector<int> v = {1, 2, 3, 4, 5};\n    std::cout << sumVector(v) << std::endl;\n\n    std::cout << findMin(v) << std::endl;\n}\n/exampleSolution/exampleSolution.h\n#include <string>\n#include <map>\n#include <vector>\n\n// Return true if input is a palindrome, false otherwise\nbool isPalindrome(std::string input);\n\n// Return a frequency map of characters in input\nstd::map<char, int> charFrequency(std::string input);\n\n// Return input string reversed using STL iterators\nstd::string reverseString(std::string input);\n\n// Return the greatest common divisor of inputs\nint gcd(int a, int b);\n\n// Swap the values of two integers\nvoid swap(int &a, int &b);\n\n// Return the number of vowels in input\nint countVowels(std::string input);\n\n// Return the sum of all elements in vector v\nint sumVector(std::vector<int> v);\n\n// Return the smallest element in vector v\nint findMin(std::vector<int> v);\n/exampleSolution/exampleSolution.cpp\n#include <string>\n#include <map>\n#include <vector>\n\n#include \"exampleSolution.h\"\n\nbool isPalindrome(std::string input) {\n    return input == std::string(input.rbegin(), input.rend());\n}\n\nstd::map<char, int> charFrequency(std::string input) {\n    std::map<char, int> freq;\n    for (char c : input) {\n        freq[c]++;\n    }\n    return freq;\n}\n\nstd::string reverseString(std::string input) {\n    return std::string(input.rbegin(), input.rend());\n}\n\nint gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n}\n\nvoid swap(int &a, int &b) {\n    int t = a;\n    a = b;\n    b = t;\n}\n\nint countVowels(std::string input) {\n    int count = 0;\n    for (char c : input) {\n        switch (c) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                count++;\n        }\n    }\n    return count;\n}\n\nint sumVector(std::vector<int> v) {\n    int sum = 0;\n    for (int n : v) {\n        sum += n;\n    }\n    return sum;\n}\n\nint findMin(std::vector<int> v) {\n    int min = v[0];\n    for (int n : v) {\n        if (n < min) {\n            min = n;\n        }\n    }\n    return min;\n}\n/exampleSolution/Makefile\nall: main\n\nmain: main.cpp exampleSolution.cpp exampleSolution.h\n\tg++ -std=c++11 -Wall main.cpp exampleSolution.cpp -o main\n\nclean:\n\trm main"}, {"instruction": "Create a Python SOAP server that accepts a SOAP request with loginCms (username, password) and returns a SOAP response with accountDetails (accountId, accountName) if the login is successful."}, {"instruction": "Write a program to perform a SOAP call to the LoginCms SOAP service and return the result."}, {"instruction": "Write a SOAP server implementation in C++ using the Sofa framework."}, {"instruction": "Implement a SOAP server (using the `suds` Python module; see Chapter 12) in Python that takes an input of a username and password and responds with whether or not the username and password match the credentials for an existing user."}, {"instruction": "Create a SOAP web service that can be accessed by a client. The service should have a single operation called `loginCms`, which takes a string argument called `login` and returns a string argument called `loginCmsReturn`."}, {"instruction": "Write a SOAP server that returns the login credentials of a given user name."}, {"instruction": "Write a Python program `loginCms` that takes a login string and returns a token if the login succeeds."}, {"instruction": "Implement a SOAP web service for CMS. The service should have the following methods:\n\n- loginCms\n- logoutCms\n- getQuiz\n- submitQuiz\n\n`loginCms` should return the id of the signed in user. `logoutCms` should return the id of the signed out user. `getQuiz` should return the quiz consisting of questions and their answers. `submitQuiz` should return the result of the quiz."}, {"instruction": "Implement a SOAP server that exposes the `loginCms` function implemented in Example 10."}, {"instruction": "Create a SOAP server in Python using the `suds` library. The server should take a SOAP request with the parameters `login` and `password` and return `true` if there is a successful login."}, {"instruction": "Implement a SOAP web service that takes a string input and returns a string that is the reverse of the input."}, {"instruction": "Create a SOAP web service that takes a string username and password, and returns true if the credentials are valid."}, {"instruction": "Implement a Python SOAP server that accepts a string and returns a reversed version of the string."}, {"instruction": "Rewrite the SOAP server program for the `loginCms` function in Example 10 so that it uses the `loginCms` function from the `User` class in the `user_service.py` module."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: Image operations, pixel manipulation, clockwise rotation\n\n### Task", "fingerprint": null, "content": {"code": "cv::Mat matRotateClockWise180(cv::Mat src) { //\u987a\u65f6\u9488180\n    //0: \u6cbfX\u8f74\u7ffb\u8f6c\uff1b >0: \u6cbfY\u8f74\u7ffb\u8f6c\uff1b <0: \u6cbfX\u8f74\u548cY\u8f74\u7ffb\u8f6c\n    flip(src, src, 0);// \u7ffb\u8f6c\u6a21\u5f0f\uff0cflipCode == 0\u5782\u76f4\u7ffb\u8f6c\uff08\u6cbfX\u8f74\u7ffb\u8f6c\uff09\uff0cflipCode>0\u6c34\u5e73\u7ffb\u8f6c\uff08\u6cbfY\u8f74\u7ffb\u8f6c\uff09\uff0cflipCode<0\u6c34\u5e73\u5782\u76f4\u7ffb\u8f6c\uff08\u5148\u6cbfX\u8f74\u7ffb\u8f6c\uff0c\u518d\u6cbfY\u8f74\u7ffb\u8f6c\uff0c\u7b49\u4ef7\u4e8e\u65cb\u8f6c180\u00b0\uff09\n    flip(src, src, 1);\n    return src;\n    //transpose(src, src);// \u77e9\u9635\u8f6c\u7f6e\n}", "docstring": "// std::cout<<\"\u7f29\u653e\u5c3a\u5bf8 (\" << w << \", \"<<h<<\")\"<<std::endl;", "function_name": "resize_img"}, "id": 81, "seed": "cv::Mat matRotateClockWise180(cv::Mat src) { //\u987a\u65f6\u9488180\n    //0: \u6cbfX\u8f74\u7ffb\u8f6c\uff1b >0: \u6cbfY\u8f74\u7ffb\u8f6c\uff1b <0: \u6cbfX\u8f74\u548cY\u8f74\u7ffb\u8f6c\n    flip(src, src, 0);// \u7ffb\u8f6c\u6a21\u5f0f\uff0cflipCode == 0\u5782\u76f4\u7ffb\u8f6c\uff08\u6cbfX\u8f74\u7ffb\u8f6c\uff09\uff0cflipCode>0\u6c34\u5e73\u7ffb\u8f6c\uff08\u6cbfY\u8f74\u7ffb\u8f6c\uff09\uff0cflipCode<0\u6c34\u5e73\u5782\u76f4\u7ffb\u8f6c\uff08\u5148\u6cbfX\u8f74\u7ffb\u8f6c\uff0c\u518d\u6cbfY\u8f74\u7ffb\u8f6c\uff0c\u7b49\u4ef7\u4e8e\u65cb\u8f6c180\u00b0\uff09\n    flip(src, src, 1);\n    return src;\n    //transpose(src, src);// \u77e9\u9635\u8f6c\u7f6e\n}", "concepts": ["Image operations", "pixel manipulation", "clockwise rotation"], "parsing_result": [{"instruction": "Write a Python function `rotate_image` that accepts an image and returns the clockwise rotated version of the image."}, {"instruction": "Write a Python function `rotateImage` that rotates an image 90 degrees clockwise."}, {"instruction": "Write a Python function that rotates an image clockwise by an arbitrary number of degrees."}, {"instruction": "Write a Python function `rotate` that rotates an N-by-N RGB image clockwise by 90 degrees."}, {"instruction": "Write a Python function that rotates an image 90 degrees clockwise."}, {"instruction": "Create a Python function `add_logo` that adds a 5px watermark to an image."}, {"instruction": "Create a Python function `rotate90` that rotates an image 90 degrees clockwise.\n/*\n * \n * Assignment 1\n *\n * This program demonstrates a simple implementation of the Tic-Tac-Toe game.\n */\n\n#include <iostream>\n\nint main() {\n    int board[3][3] = {};  // Represents the game board\n\n    // Prompt the user to enter a position\n    std::cout << \"Enter the row and column of the position you want to place your mark (e.g., '1 1'): \";\n    int row, col;\n    std::cin >> row >> col;\n\n    // Place the player's mark on the board and print the board\n    board[row - 1][col - 1] = 1;\n    printBoard(board);\n\n    // Prompt the user to enter a position\n    std::cout << \"Enter the row and column of the position you want to place your mark (e.g., '1 1'): \";\n    std::cin >> row >> col;\n\n    // Place the player's mark on the board and print the board\n    board[row - 1][col - 1] = 1;\n    printBoard(board);\n\n    // Prompt the user to enter a position\n    std::cout << \"Enter the row and column of the position you want to place your mark (e.g., '1 1'): \";\n    std::cin >> row >> col;\n\n    // Place the player's mark on the board and print the board\n    board[row - 1][col - 1] = 1;\n    printBoard(board);\n\n    // Display what the board looks like\n    printBoard(board);\n\n    return 0;\n}"}, {"instruction": "Create a Python function `rotate` that rotates an image in clockwise direction."}, {"instruction": "Write a Python function that rotates an image clockwise by 90 degrees."}, {"instruction": "Write a Python function `rotateImage` that rotates an image 90 degrees clockwise."}, {"instruction": "Write a Python function `rotateImageClockwise` that rotates an image clockwise by 90 degrees."}, {"instruction": "Create a Python function `rotate` that rotates an image clockwise by 90 degrees."}, {"instruction": "Create a Python function `rotate_90_clockwise` that rotates a 3\u00d73 image clockwise 90 degrees."}, {"instruction": "Write a Python function `rotateImage` that takes a grayscale image and rotates it 90 degrees clockwise."}, {"instruction": "Write a Python function `rotate90` that accepts an image and rotates it clockwise by 90 degrees."}, {"instruction": "Write a Python function `rotate` that rotates an image by 90 degrees."}, {"instruction": "Write a Python function `rotateImage` that rotates an image clockwise by 90 degrees."}, {"instruction": "Write a Python function `rotate90` that rotates an image clockwise by 90 degrees."}, {"instruction": "Write a Python function `rotate` that takes an image and rotates it 90 degrees clockwise."}, {"instruction": "Write a Python function `rotateClockwise` that rotates an input `Image` 90 degrees clockwise."}, {"instruction": "Write a Python function `clockwise` that rotates an image clockwise 90 degrees."}, {"instruction": "Write a Python function `clockwiseRotation` that rotates an image 90 degrees clockwise."}, {"instruction": "Write a Python function `rotate` that rotates an image clockwise by n degrees."}, {"instruction": "In Python, write a function `rotate` that rotates an image clockwise by 90 degrees.\n\n# Contributing\nIf you're interested in contributing to this project, we'd love to have you! For more details about how to get started, see the [CONTRIBUTING.md](CONTRIBUTING.md) file.\n\n# License\nThis project is licensed under the terms of the MIT license. See the [LICENSE](LICENSE) file for details.\n/python/rotate.py\n\"\"\"\nPython implementation of the rotate function.\n\"\"\"\n\ndef rotate(image):\n    \n    return image\n/c/average.c\n/*\nC implementation of the average function.\n*/\n\n#include <stdio.h>\n\ndouble average(int numbers[], int size) {\n    int i;\n    int sum = 0;\n    double average;\n\n    for (i = 0; i < size; i++) {\n        sum += numbers[i];\n    }\n\n    average = (double) sum / size;\n\n    return average;\n}\n/python/test_average.py\nimport unittest\n\nfrom average import average\n\n\nclass TestAverage(unittest.TestCase):\n\n    def test_average_should_return_0_when_array_is_empty(self):\n        numbers = []\n        size = len(numbers)\n        result = average(numbers, size)\n\n        self.assertEqual(result, 0)\n\n    def test_average_should_return_2_when_array_contains_two_numbers(self):\n        numbers = [1, 2]\n        size = len(numbers)\n        result = average(numbers, size)\n\n        self.assertEqual(result, 2)\n\n    def test_average_should_return_5_when_array_contains_five_numbers(self):\n        numbers = [1, 2, 3, 4, 5]\n        size = len(numbers)\n        result = average(numbers, size)\n\n        self.assertEqual(result, 5)\n\nif __name__ == '__main__':\n    unittest.main()"}, {"instruction": "Create a Python function `rotate` that rotates the pixel values of an image clockwise by 90 degrees."}, {"instruction": "Write a Python function `rotate_clockwise` that rotates an image 90 degrees clockwise."}, {"instruction": "Write a Python function `rotate` that rotates an image 90 degrees clockwise."}, {"instruction": "Write a Python function `rotateImage` that rotates an image 90 degrees clockwise in-place."}, {"instruction": "Create a Python function `rotate_image` that rotates an image by 90 degrees clockwise."}, {"instruction": "Write a Python function `rotate_image` that accepts an image and returns a rotated image."}, {"instruction": "Write a Python function `rotateImage` that receives a 2D matrix and spins its elements 90 degrees clockwise."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: DS3231 RTC, date and time, LED blinking\n\n### Task", "fingerprint": null, "content": {"code": "void ReadDS3231()\n{\n\tsecondNoDst = Clock.getSecond();\n\tminuteNoDst = Clock.getMinute();\n\thourNoDst   = Clock.getHour(h12, PM);\n\tdayNoDst    = Clock.getDate();\n\tmonthNoDst  = Clock.getMonth(Century);\n\tyearNoDst   = Clock.getYear();\n//  temperature = Clock.getTemperature();\n\tsecond = secondNoDst;\n\tminute = minuteNoDst;\n\tday    = dayNoDst;\n\tmonth  = monthNoDst;\n\tyear   = yearNoDst;\n\tif (NowInDST())\n\t{\n\t\thour = hourNoDst + 1;\n\t\tif (hour >= 24)\n\t\t{\n\t\t\thour = 1;\n\t\t}\n\t}\n\telse\n\t{\n\t\thour = hourNoDst;\n\t}\n\n\tif (mode == LED_TEST_MODE)\n\t{\n\t\treturn;\n\t}\n\tif (bWriteOnSerial)\n\t{\n\t\tShowDateTimeOnSerial();\n\t}\n}", "docstring": "//Set the year (Last two digits of the year)", "function_name": "SetDS3231"}, "id": 82, "seed": "void ReadDS3231()\n{\n\tsecondNoDst = Clock.getSecond();\n\tminuteNoDst = Clock.getMinute();\n\thourNoDst   = Clock.getHour(h12, PM);\n\tdayNoDst    = Clock.getDate();\n\tmonthNoDst  = Clock.getMonth(Century);\n\tyearNoDst   = Clock.getYear();\n//  temperature = Clock.getTemperature();\n\tsecond = secondNoDst;\n\tminute = minuteNoDst;\n\tday    = dayNoDst;\n\tmonth  = monthNoDst;\n\tyear   = yearNoDst;\n\tif (NowInDST())\n\t{\n\t\thour = hourNoDst + 1;\n\t\tif (hour >= 24)\n\t\t{\n\t\t\thour = 1;\n\t\t}\n\t}\n\telse\n\t{\n\t\thour = hourNoDst;\n\t}\n\n\tif (mode == LED_TEST_MODE)\n\t{\n\t\treturn;\n\t}\n\tif (bWriteOnSerial)\n\t{\n\t\tShowDateTimeOnSerial();\n\t}\n}", "concepts": ["DS3231 RTC", "date and time", "LED blinking"], "parsing_result": [{"instruction": "Write a Python function `blink` that blinks the onboard LED of an RPi using the DS3231 RTC."}, {"instruction": "Write a Python script `alarm.py` that uses a DS3231 RTC to set an alarm that turns on an LED for 3 minutes, then turns it off."}, {"instruction": "Write a Python script that reads the DS3231 RTC and adjusts the time based on the current date and time. The time is increased by one minute, at random intervals, up to one hour after midnight."}, {"instruction": "Write a Python function `LED_blink` that displays a 1 on the DS3231 LED and waits for 500 ms."}, {"instruction": "Write a Python script that blinks an LED at a specified rate on a DS3231 RTC."}, {"instruction": "Using a DS3231 RTC and a Raspberry Pi, build a weather monitoring system that displays the current date and time, along with the temperature, humidity, and pressure."}, {"instruction": "Using the DS3231 RTC, a board for an Arduino, and an LED, write a Python script that blink the LED at a rate of 1 second for 10 seconds"}, {"instruction": "Write a Python script that uses the DS3231 RTC to turn on an LED for 5 minutes, then off for 5 minutes. Repeat this process every 30 seconds."}, {"instruction": "Design a C++ function to blink an LED on an Arduino board at a specified rate using a DS3231 RTC."}, {"instruction": "Write a script using the Raspberry Pi Pimoroni LED Matrix to blink a LED at regular intervals."}, {"instruction": "Write a Python function `blink` that blinks an LED 10 times at 3Hz. You can use any other Python library."}, {"instruction": "Write a function in Python that turns on an LED for 5 seconds if the RTC has a date-time stamp that matches the date-time stamp of one of the dates and times below.\n\ndate\ttime\n04/01/2021\t14:00:00\n04/01/2021\t14:30:00\n04/01/2021\t15:00:00\n04/01/2021\t15:30:00\n04/01/2021\t16:00:00\n04/01/2021\t16:30:00\n04/01/2021\t17:30:00\n04/01/2021\t18:00:00\n04/01/2021\t18:30:00\n05/01/2021\t12:00:00\n05/01/2021\t12:30:00\n05/01/2021\t13:00:00"}, {"instruction": "Write a Python function `blink` that displays an LED in a loop."}, {"instruction": "Create a Python function `blink` that controls an LED connected to a DS3231 RTC module. The function accepts 4 arguments: 1. the number of seconds between blinks, 2. the number of blinks that should be made, 3. the start time, and 4. the end time. The LED should blink once every second between the start and end times."}, {"instruction": "Write a Python function `blink` that blinks an LED connected to a DS3231 RTC every 10 seconds."}, {"instruction": "Write a Python function `blink` that blinks an LED on a DS3231 RTC."}, {"instruction": "Using a Raspberry Pi, write a Python script that turns on and off a LED every second."}, {"instruction": "Write a Python program to measure the time it takes for a function to execute."}, {"instruction": "Create a Python script that updates the time in the DS3231 RTC every five seconds. The RTC should blink an LED for every second."}, {"instruction": "Write a Python function to blink an LED connected to pin 8."}, {"instruction": "Create a Python program that blinks an LED connected to GPIO pin 17 every 2 seconds."}, {"instruction": "Python code that blinks the built-in LED on a Raspberry Pi Zero W connected to the DS3231 RTC using the `Pimoroni` package."}, {"instruction": "Use Python to create a program that reads the current date and time from a DS3231 RTC and toggles an LED every second."}, {"instruction": "Write a Python program that uses a DS3231 RTC to display the current time and to flash an LED with a 1 second interval."}, {"instruction": "Write a Python program that blinks an LED connected to the DS3231 RTC every second."}, {"instruction": "Write a Python function `blink` that takes a DS3231 RTC and a GPIO pin number as parameters. The function should blink the given GPIO pin at 1 Hz."}, {"instruction": "Write a Python function that will blink a LED on an Adafruit Feather M0 (Bluefruit)."}, {"instruction": "Build a Python function `blinkLED` that blinks an LED connected to the Grove I2C RGB LED module. The LED should blink once every second. The LED should blink 3 times before the program ends."}, {"instruction": "Use the DS3231 RTC to display current date and time on an LED matrix."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: XML parsing, element tags, attribute parsing, string building\n\n### Task", "fingerprint": null, "content": {"code": "soap_in_ns3__ArrayOfMoneda(struct soap *soap, const char *tag, ns3__ArrayOfMoneda *a, const char *type)\n{\n\t(void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_in(soap, tag, 0, NULL))\n\t\treturn NULL;\n\ta = (ns3__ArrayOfMoneda*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_afip_ns3__ArrayOfMoneda, sizeof(ns3__ArrayOfMoneda), soap->type, soap->arrayType, afip_instantiate, afip_fbase);\n\tif (!a)\n\t\treturn NULL;\n\tif (soap->alloced && soap->alloced != SOAP_TYPE_afip_ns3__ArrayOfMoneda)\n\t{\tsoap_revert(soap);\n\t\t*soap->id = '\\0';\n\t\treturn (ns3__ArrayOfMoneda *)a->soap_in(soap, tag, type);\n\t}\n\tif (soap->alloced)\n\t\ta->soap_default(soap);\n\tif (soap->body && *soap->href != '#')\n\t{\n\t\tfor (;;)\n\t\t{\tsoap->error = SOAP_TAG_MISMATCH;\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t{\tif (soap_in_std__vectorTemplateOfPointerTons3__Moneda(soap, \"ns3:Moneda\", &a->ns3__ArrayOfMoneda::Moneda, \"ns3:Moneda\"))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t\tsoap->error = soap_ignore_element(soap);\n\t\t\tif (soap->error == SOAP_NO_TAG)\n\t\t\t\tbreak;\n\t\t\tif (soap->error)\n\t\t\t\treturn NULL;\n\t\t}\n\t\tif (soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\telse\n\t{\ta = (ns3__ArrayOfMoneda *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_afip_ns3__ArrayOfMoneda, SOAP_TYPE_afip_ns3__ArrayOfMoneda, sizeof(ns3__ArrayOfMoneda), 0, afip_finsert, afip_fbase);\n\t\tif (soap->body && soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\treturn a;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_out_ns3__ArrayOfMoneda"}, "id": 87, "seed": "soap_in_ns3__ArrayOfMoneda(struct soap *soap, const char *tag, ns3__ArrayOfMoneda *a, const char *type)\n{\n\t(void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_in(soap, tag, 0, NULL))\n\t\treturn NULL;\n\ta = (ns3__ArrayOfMoneda*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_afip_ns3__ArrayOfMoneda, sizeof(ns3__ArrayOfMoneda), soap->type, soap->arrayType, afip_instantiate, afip_fbase);\n\tif (!a)\n\t\treturn NULL;\n\tif (soap->alloced && soap->alloced != SOAP_TYPE_afip_ns3__ArrayOfMoneda)\n\t{\tsoap_revert(soap);\n\t\t*soap->id = '\\0';\n\t\treturn (ns3__ArrayOfMoneda *)a->soap_in(soap, tag, type);\n\t}\n\tif (soap->alloced)\n\t\ta->soap_default(soap);\n\tif (soap->body && *soap->href != '#')\n\t{\n\t\tfor (;;)\n\t\t{\tsoap->error = SOAP_TAG_MISMATCH;\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t{\tif (soap_in_std__vectorTemplateOfPointerTons3__Moneda(soap, \"ns3:Moneda\", &a->ns3__ArrayOfMoneda::Moneda, \"ns3:Moneda\"))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (soap->error == SOAP_TAG_MISMATCH)\n\t\t\t\tsoap->error = soap_ignore_element(soap);\n\t\t\tif (soap->error == SOAP_NO_TAG)\n\t\t\t\tbreak;\n\t\t\tif (soap->error)\n\t\t\t\treturn NULL;\n\t\t}\n\t\tif (soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\telse\n\t{\ta = (ns3__ArrayOfMoneda *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_afip_ns3__ArrayOfMoneda, SOAP_TYPE_afip_ns3__ArrayOfMoneda, sizeof(ns3__ArrayOfMoneda), 0, afip_finsert, afip_fbase);\n\t\tif (soap->body && soap_element_end_in(soap, tag))\n\t\t\treturn NULL;\n\t}\n\treturn a;\n}", "concepts": ["XML parsing", "element tags", "attribute parsing", "string building"], "parsing_result": [{"instruction": "Write a Python function `xmlcount` that returns the number of XML elements in a nested XML string."}, {"instruction": "Write a Python function `parseXML` that returns a dictionary with the key/value pairs from an XML file."}, {"instruction": "Write a Python function `parse` that returns a dictionary of XML data from a given string."}, {"instruction": "Write a Python function `parseXML` that extracts the element tag and attribute information of an XML document.\n#include <iostream>\n#include <string>\n#include <map>\n\nstd::map<std::string, std::string> charFrequency(std::string str)\n{\n    std::map<std::string, std::string> freqMap;\n    std::string key;\n    int count;\n\n    for (int i = 0; i < str.length(); i++)\n    {\n        key = std::to_string(str[i]);\n        count = 0;\n\n        for (int j = 0; j < str.length(); j++)\n            if (str[i] == str[j])\n                count++;\n\n        if (freqMap.find(key) == freqMap.end())\n            freqMap.insert({key, std::to_string(count)});\n    }\n\n    return freqMap;\n}#include <iostream>\n\nbool isPalindrome(std::string str)\n{\n    for (int i = 0; i < str.length() / 2; i++)\n        if (str[i] != str[str.length() - 1 - i])\n            return false;\n\n    return true;\n}#include <iostream>\n#include <sstream>\n#include <string>\n\nstd::string toBinary(int n)\n{\n    std::string binary = \"\";\n    int remainder;\n\n    while (n > 0)\n    {\n        remainder = n % 2;\n        binary = std::to_string(remainder) + binary;\n        n = n / 2;\n    }\n\n    return binary;\n}#include <iostream>\n\nint countDigits(int n)\n{\n    int counter = 0;\n\n    while (n > 0)\n    {\n        n /= 10;\n        counter++;\n    }\n\n    return counter;\n}#include <iostream>\n\nint findMin(std::vector<int> arr)\n{\n    int min = arr[0];\n\n    for (int i = 1; i < arr.size(); i++)\n        if (arr[i] < min)\n            min = arr[i];\n\n    return min;\n}"}, {"instruction": "Create a Python function `xmlTagFinder` that returns a list of all XML tags in a given string."}, {"instruction": "Write a Python function `getXML` that returns a parsed version of a given XML string."}, {"instruction": "Write a Python function `parseXML` that takes XML data as input and returns the list of all tags in the data."}, {"instruction": "Write a Python function `parseXML` that reads an XML file and returns a dictionary of tag names to their attributes and text values."}, {"instruction": "Implement a Python function `countTags` that returns the frequency map of all tags in an XML document."}, {"instruction": "Write a Python function `xmlAttributes` that returns an XML tag with all its attributes and their values."}, {"instruction": "Create a Python function `parseXML` that takes an XML document as input and returns a dictionary of element tags and their attributes."}, {"instruction": "Write a Python function `parseXML` that returns the text content of all XML elements."}, {"instruction": "Write a Python function `parseXML` that extracts the value of the `type` attribute from the following XML document.\n```xml\n<root>\n  <name></name>\n  <age>34</age>\n  <type>student</type>\n  <course>Computer Science</course>\n</root>\n```"}, {"instruction": "Write a Python function `cleanXML` that removes unnecessary XML tags from an XML string."}, {"instruction": "Write a Python function `parseXML` that parses a string of XML and returns a dictionary of elements and their attributes."}, {"instruction": "Write a Python function `parseXML` that takes an XML file as input and returns a Python dictionary with the contents of the XML file."}, {"instruction": "Write a Python function `xmlBuilder` that accepts a list of strings specifying XML element names, attributes, and text as input, and returns a formatted XML string."}, {"instruction": "Write a Python function `parse_xml` that returns a dictionary representation of an XML document."}, {"instruction": "Create a function `parseXML` that parses a string of XML code and returns a dictionary of tag names and tag attributes."}, {"instruction": "Write a function `parse_xml` that parses a given XML string and returns a dictionary of XML tags, values, and attributes."}, {"instruction": "Write a Python function `parseXML` that parses an XML file and returns a dictionary containing the number of elements with the specified tag in the file."}, {"instruction": "Create a Python function `extract_words` that returns a set of words from an XML string."}, {"instruction": "Write a Python function `xml2dict` that takes an XML string as an input and converts it to a dictionary."}, {"instruction": "Create a Python function `parseXML` that parses an XML document, returning a dictionary of element tags and the values of their attributes."}, {"instruction": "Write a Python function `countTags` that returns a dictionary of the number of times each tag appears in an XML string."}, {"instruction": "Write a Python function `parse_xml_file` that accepts a file name as input and returns a dictionary of key/value pairs where the key is the name of the element and the value is a list of dictionaries where each dictionary contains the key attribute and value of the attribute."}, {"instruction": "Create a Python function `xmlParse` that returns a dictionary containing the tag name and the attributes of an XML element."}, {"instruction": "Write a Python function `parse_xml` that returns a dictionary of key/value pairs from an XML string."}, {"instruction": "Write a Python function `parseXML` that returns a list of dictionaries with key-value pairs of attributes from an XML string."}, {"instruction": "Create a Python function `xml_tag_count` that returns a dictionary of the number of times each tag is used in an XML document."}, {"instruction": "Write a Python function `tagCount` that returns the number of times a given XML tag appears in a given XML document."}, {"instruction": "Write a Python function `parseXML` that accepts a string of XML code, and returns a dictionary containing all the tags and attributes."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: casting, dynamic casting, Smart Pointers\n\n### Task", "fingerprint": null, "content": {"code": "SharedPtr<T> dynamic_pointer_cast(const SharedPtr<U> &sp){\n    //SharedPtr<T> tmpPtr(sp);\n    //couldn't use sp.objPtr because it is private\n    //T* tempPtr = dynamic_cast<T*>(sp.get());\n\n    SharedPtr<T> tempPtr(sp);\n    tempPtr.set(dynamic_cast<T*>(sp.get()));\n    return tempPtr;\n}", "docstring": "//couldn't use sp.objPtr because it is private", "function_name": "static_pointer_cast"}, "id": 89, "seed": "SharedPtr<T> dynamic_pointer_cast(const SharedPtr<U> &sp){\n    //SharedPtr<T> tmpPtr(sp);\n    //couldn't use sp.objPtr because it is private\n    //T* tempPtr = dynamic_cast<T*>(sp.get());\n\n    SharedPtr<T> tempPtr(sp);\n    tempPtr.set(dynamic_cast<T*>(sp.get()));\n    return tempPtr;\n}", "concepts": ["casting", "dynamic casting", "Smart Pointers"], "parsing_result": [{"instruction": "Create a Python class `Animal` with the following attributes:\n- `name`\n- `weight`\n- `age`\n- `food`\n\nCreate a Python class `Cat` that inherits from `Animal` and has the following attributes:\n- `color`\n\nThe class `Cat` should have the following methods:\n- `meow()`\n- `run()`\n- `display_info()`"}, {"instruction": "Create a Python class `Animal` with the following properties:\n\n```\n- name (string)\n- kind (string)\n- color (string)\n- sound (string)\n```\n\nWrite a Python class `Dog` that inherits from `Animal` with the following additional properties:\n\n```\n- barks (boolean)\n```\n\nWrite a Python class `Cat` that inherits from `Animal` with the following additional properties:\n\n```\n- purrs (boolean)\n```"}, {"instruction": "Create a Python class `DynamicArray` that mirrors the functionality of the `list` class but uses a dynamically-allocated array to store elements."}, {"instruction": "Write a Python class `Sphere` that has a radius and is able to compute the surface area and volume of a sphere using the formula `S = 4\u03c0r2` and `V = 4/3\u03c0r3`, respectively."}, {"instruction": "Implement a Python class `Vector` that represents a 3-dimensional vector. The class must implement the arithmetic operations (`__add__`, `__radd__`, `__mul__`, `__rmul__`, `__sub__`, `__rsub__`, `__truediv__`, `__rtruediv__`, `__floordiv__`, `__rfloordiv__`), as well as the `__str__` method."}, {"instruction": "Create a Python class `FuelTank` that defines a tank of a certain volume with a certain maximum fuel capacity. The class should have the following properties:\n- A static constant attribute `fuel_density` storing the density of gasoline in pounds per gallon\n- A member attribute `volume` storing the volume of the tank in gallons\n- A member attribute `max_fuel` storing the maximum fuel capacity of the tank in gallons\n- A member attribute `fuel_level` storing the fuel level of the tank in gallons\n- A member attribute `remaining_fuel` storing the remaining fuel in gallons\n\nThe constructor should take the volume of the tank in gallons and the maximum fuel capacity of the tank in gallons as arguments and initialize the remaining fuel attribute with the fuel level set to zero.\n\nThe class should have the following non-mutator methods:\n- `get_fuel_level` that returns the fuel level of the tank in gallons\n- `get_remaining_fuel` that returns the remaining fuel of the tank in gallons\n- `get_volume` that returns the volume of the tank in gallons\n- `get_max_fuel` that returns the maximum fuel capacity of the tank in gallons\n- `get_density` that returns the density of the fuel in gallons per gallon\n- `add_fuel` that takes a fuel level in gallons and adds it to the remaining fuel in the tank\n- `get_cost` that returns the cost of the remaining fuel in the tank, in dollars\n- `is_empty` that returns true if the fuel level of the tank is zero\n- `is_full` that returns true if the remaining fuel of the tank is the same as the maximum fuel capacity\n\nThe class should have the following mutator methods:\n- `set_fuel_level` that takes a fuel level in gallons and sets the fuel level of the tank to the value provided\n- `set_remaining_fuel` that takes a fuel level in gallons and sets the remaining fuel of the tank to the value provided\n- `set_volume` that takes a volume in gallons and sets the volume of the tank to the value provided\n- `set_max_fuel` that takes a maximum fuel capacity in gallons and sets the maximum fuel capacity of the tank to the value provided\n\nThe class should have the following class methods:\n- `from_fuel_level` that takes a fuel level in gallons and a maximum fuel capacity in gallons and returns a `FuelTank` object initialized with the fuel level provided as its fuel level and the maximum fuel capacity provided as its maximum fuel capacity\n- `from_volume` that takes a volume in gallons and a maximum fuel capacity in gallons and returns a `FuelTank` object initialized with the volume provided as its volume and the maximum fuel capacity provided as its maximum fuel capacity\n- `from_max_fuel` that takes a maximum fuel capacity in gallons and returns a `FuelTank` object initialized with the maximum fuel capacity provided as its maximum fuel capacity"}, {"instruction": "Implement a Python class `Shape` that has the following properties:\n- length: the length of the sides of all shapes\n- fillColor: the color of the shape's border\n- fill: a boolean indicating whether the shape is filled with its `fillColor`"}, {"instruction": "Implement a Python class `Point` representing a Cartesian coordinate (x, y) and a class `Line` representing a line in the plane. \nProvide a constructor that takes two arguments (x, y) and two methods `slope` and `intercept`."}, {"instruction": "Implement a Python class `Shape` with a constructor that takes in a `color` argument and an optional `filled` argument. Complete the constructor by adding the following methods:\n\n- `area()`: returns the shape's area\n- `perimeter()`: returns the shape's perimeter\n- `color`: returns the shape's color\n- `filled`: returns whether the shape is filled or not"}, {"instruction": "Implement a Python class `Stack` that implements a stack data structure."}, {"instruction": "Implement a Python class `SmartPointer` that wraps a pointer to an object and uses reference counting to implement a memory managed shared pointer."}, {"instruction": "Create a Python class that implements the function `is_even` that returns true if an integer is even, false otherwise."}, {"instruction": "Write a Python class `Rectangle` that represents a rectangle with width and height attributes."}, {"instruction": "Create a Python class `Vector2D` that implements a 2D vector with all the necessary operations."}, {"instruction": "Implement a Python class `PalindromeChecker` that accepts a string and returns True if it is a palindrome."}, {"instruction": "Implement C++ classes `Node` and `LinkedList` that represent a linked list. `Node` should have two member variables, a `value` of type `int` and a `next` of type `Node`. `LinkedList` should have two member variables, a `head` of type `Node` and a `length` of type `int`."}, {"instruction": "Create a Python class `Rectangle` with two private data members, `length` and `width`, and three public member functions, `getArea`, `getPerimeter`, and `getStats`, which return the area, perimeter, and a string representation of the rectangle (e.g., \"(3,6)\"), respectively."}, {"instruction": "Implement a Python class `Vehicle` that has a constructor that initializes the make, model, and year of the vehicle, as well as a `display_vehicle` method that prints the details of the vehicle."}, {"instruction": "Create a Python class `Student` that takes an `id` and a `name`. It also has a method `getName()` that returns the name of the student."}, {"instruction": "Create a Python class `Fraction` that implements a fractional number."}, {"instruction": "Implement a Python class that inherits from `list` to create a custom list class that supports the same operations and functionality as the built-in Python list."}, {"instruction": "Create a python class `Number` with an `__init__` function and the following methods:\n- `add(self, num)` - returns the sum of the current value and the input number\n- `subtract(self, num)` - returns the difference of the current value and the input number\n- `multiply(self, num)` - returns the product of the current value and the input number\n- `divide(self, num)` - returns the quotient of the current value and the input number\n- `squared(self)` - returns the square of the current value\n- `cube(self)` - returns the cube of the current value\n- `power(self, num)` - returns the value to the power of the input number\n- `abs(self)` - returns the absolute value of the current value\n- `max(self)` - returns the maximum of the two current values\n- `min(self)` - returns the minimum of the two current values\n- `round(self)` - returns the rounded (nearest integer) value of the current value"}, {"instruction": "Write a Python class `Fraction` that represents a fraction as a numerator and denominator, using only integer arithmetic."}, {"instruction": "Implement a Python class `Point` that represents a Cartesian coordinate point and provides methods that perform basic operations on points:\n- `Point(x, y)` creates a new point with `x` and `y` coordinates\n- `get_x()` returns the x-coordinate\n- `get_y()` returns the y-coordinate\n- `distance(other)` returns the distance between the point and the other point\n- `slope(other)` returns the slope between the point and the other point\n- `is_between(p1, p2)` returns `True` if the point is between the given points, `False` otherwise"}, {"instruction": "Create a Python class `Animal` whose instances represent living creatures with four attributes: `name`, `species`, `age`, and `weight`."}, {"instruction": "Create a Python class called `Shape` that can be used to create shapes with a side length."}, {"instruction": "Implement a Python class `Node` with a property `value` and methods `setNext` and `getNext` and a class `LinkedList` with a method `insertAtBack` that inserts a node at the back of the list."}, {"instruction": "Implement a Python class `Fraction` that represents a fraction in lowest terms."}, {"instruction": "Write a Python class `Rational` that models a simple fraction, with support for common operations (addition, subtraction, multiplication, division, equality). The class should support the following operations:\n\n- addition: `a + b`\n- subtraction: `a - b`\n- division: `a / b`\n- multiplication: `a * b`\n- equality: `a == b`"}, {"instruction": "Use the Python class `Vehicle` to create a program that:\n- asks the user for a car's base price and model year\n- creates a new car object based on the user's input\n- returns a statement indicating the car's value"}, {"instruction": "Implement a Python class `Point` with properties `x` and `y` representing Cartesian coordinates. This class also includes `__str__` and `__eq__` methods, which form the basis for the `__repr__` method."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: switch statement, conditional logic, digital I/O, loop execution\n\n### Task", "fingerprint": null, "content": {"code": "int keyboard() {\n\n  int touche = 5555;\n  /* Principe on balaye les colonne et on tcheck si une ligne est appuy\u00e9e\n     = 14 ; # = 15 ; A = 19 ; B = 18 ; C = 17 ;  D = 16 */\n  // colonne des 1 4 7 *\n  digitalWrite(13, LOW);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 14; // *\n  if (!digitalRead(10)) touche = 7;\n  if (!digitalRead(2)) touche = 4;\n  if (!digitalRead(0)) touche = 1;\n\n  // colonne des 2 5 8 0\n  digitalWrite(13, HIGH);\n  digitalWrite(12, LOW);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 0;\n  if (!digitalRead(10)) touche = 8;\n  if (!digitalRead(2)) touche = 5;\n  if (!digitalRead(0)) touche = 2;\n\n  // colonne des 3 6 9 #\n  digitalWrite(13, HIGH);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, LOW);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 15; // #HTTPClient\n  if (!digitalRead(10)) touche = 9;\n  if (!digitalRead(2)) touche = 6;\n  if (!digitalRead(0)) touche = 3;\n\n  // colonne des A B C D\n  digitalWrite(13, HIGH);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, LOW);\n\n  if (!digitalRead(3)) touche = 16; //D\n  if (!digitalRead(10)) touche = 17; // C\n  if (!digitalRead(2)) touche = 18; // B\n  if (!digitalRead(0)) touche = 19; // A\n  return touche;\n\n}", "docstring": "// Initialisation du WIFI", "function_name": "setup"}, "id": 91, "seed": "int keyboard() {\n\n  int touche = 5555;\n  /* Principe on balaye les colonne et on tcheck si une ligne est appuy\u00e9e\n     = 14 ; # = 15 ; A = 19 ; B = 18 ; C = 17 ;  D = 16 */\n  // colonne des 1 4 7 *\n  digitalWrite(13, LOW);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 14; // *\n  if (!digitalRead(10)) touche = 7;\n  if (!digitalRead(2)) touche = 4;\n  if (!digitalRead(0)) touche = 1;\n\n  // colonne des 2 5 8 0\n  digitalWrite(13, HIGH);\n  digitalWrite(12, LOW);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 0;\n  if (!digitalRead(10)) touche = 8;\n  if (!digitalRead(2)) touche = 5;\n  if (!digitalRead(0)) touche = 2;\n\n  // colonne des 3 6 9 #\n  digitalWrite(13, HIGH);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, LOW);\n  digitalWrite(16, HIGH);\n\n  if (!digitalRead(3)) touche = 15; // #HTTPClient\n  if (!digitalRead(10)) touche = 9;\n  if (!digitalRead(2)) touche = 6;\n  if (!digitalRead(0)) touche = 3;\n\n  // colonne des A B C D\n  digitalWrite(13, HIGH);\n  digitalWrite(12, HIGH);\n  digitalWrite(14, HIGH);\n  digitalWrite(16, LOW);\n\n  if (!digitalRead(3)) touche = 16; //D\n  if (!digitalRead(10)) touche = 17; // C\n  if (!digitalRead(2)) touche = 18; // B\n  if (!digitalRead(0)) touche = 19; // A\n  return touche;\n\n}", "concepts": ["switch statement", "conditional logic", "digital I/O", "loop execution"], "parsing_result": [{"instruction": "Write a Python class `Camera` that implements an argument-less constructor and a `click` method."}, {"instruction": "Implement the following digital latch circuits using Python:\n\n- [RC latch](https://en.wikipedia.org/wiki/RC_latch)\n- [D latch](https://en.wikipedia.org/wiki/Flip-flop_(digital))\n- [T flip-flop](https://en.wikipedia.org/wiki/T-flip-flop)\n- [S flip-flop](https://en.wikipedia.org/wiki/S_flip-flop)\n- [D flip-flop](https://en.wikipedia.org/wiki/D_flip-flop)"}, {"instruction": "Create a Python class `DigitalLock` that implements a digital lock for a safe.\n\nThe lock contains 3 numerical digits from 0 to 9. The lock may be unlocked by the correct combination of the digits, or by any permutation of that combination.\n\nOnce the lock is locked, a user may unlock it by attempting to guess the combination. Each guess should consist of 3 digits. If the guess is correct, the user wins and the lock is unlocked. If the guess is incorrect, the user remains locked.\n\nThe lock's `unlock()` function should return true if the lock is unlocked and the input guess is correct. Otherwise, it should return false."}, {"instruction": "Design a class in Python that implements a digital stopwatch."}, {"instruction": "Create a Python class called `Arduino`. The class should have the following attributes:\n\n- the number of analog pins (analog inputs)\n- the number of digital pins (digital I/O pins)\n- a boolean value that indicates whether the Arduino is an Arduino Uno\n\nThe class should also have the following methods:\n\n- a method that prints the number of analog pins\n- a method that prints the number of digital pins\n- a method that prints `Arduino Uno` if the Arduino is an Arduino Uno, or `Arduino` otherwise"}, {"instruction": "Write a Python class `DigitalClock` that simulates a simple digital clock."}, {"instruction": "Write a Python class `DigitalClock` that displays the current time in a digital clock format."}, {"instruction": "Create a `Calculator` class in Python that implements the following operations: addition, subtraction, multiplication, and division. The calculator should also keep track of the history of calculations."}, {"instruction": "Create a Python class `BinaryParser` that takes a binary string as input and returns a decimal integer."}, {"instruction": "Implement a Python class `AsyncSwitch` that allows a user to register and unregister multiple callbacks which are executed on a given event."}, {"instruction": "Write a Python class `BinaryReader` that reads a binary file and returns the contents as a Python `str` object."}, {"instruction": "Write a Python class `Car` that includes a method `drive` that simulates the vehicle's acceleration and braking."}, {"instruction": "Implement a class `DigitalClock` that stores the current time and allows users to increment the time by one second, to increment the time by one minute, and to increment the time by one hour."}, {"instruction": "Write a Python class `DigitalClock` that encapsulates a digital clock."}, {"instruction": "Implement a Python class `DigitalClock` that relies on the `time` and `datetime` modules to update the clock whenever it is instantiated."}, {"instruction": "Write a Python class called `MyButton` (for example) that implements a digital push button with a single input and one output."}, {"instruction": "Write a Python class `BinaryClock` that takes a 24-hour time (type `string`) and returns a binary 7x7 clock that represents the time (type `list`)."}, {"instruction": "Write a Python class `BankAccount` that represents a bank account. It should have the following attributes:\n\n- `balance`: the current balance of the bank account\n- `interest_rate`: the annual interest rate (floating point number)\n\nIt should also have the following methods:\n\n- `deposit`: a method to add money to the account\n- `withdraw`: a method to withdraw money from the account\n- `calculate_interest`: a method to calculate and update the interest earned\n- `to_string`: a method to return a string representation of the account"}, {"instruction": "Write a Python class `DigitalKey` that implements a digital keypad."}, {"instruction": "Implement a Python class `DigitalClock` that prints the current time using digital I/O."}, {"instruction": "Implement a Python class `DigitalClock` that has the following behavior:\n- It can be initialized with a time of day (e.g., `DigitalClock(8, 22)` would indicate that the digital clock should be set to 8:22).\n- It can be initialized with no arguments, in which case its time begins at midnight (e.g., `DigitalClock()`).\n- It has a private instance variable `time` that's a tuple of (hour, minute) for its time of day.\n- It has the following public instance methods:\n    - `setTime` takes two integers (hour and minute) and sets the time of day to the given time.\n    - `getTime` returns the time of day as a tuple (hour, minute).\n    - `increment` increases the time of day by one minute.\n    - `tick` increases the time of day by one minute and prints the time of day and whether it's am or pm."}, {"instruction": "Create a Python class `Robot` with the following attributes:\n- `name`\n- `hours` working\n- `offHours` not working\n- `status` on or off\n- `days` of the week it is working\n- `disposition` of the robot: either `active` or `inactive`\n\nWrite a command-line script that tests the Robot class by creating a robot object and instructing it to work on the weekdays."}, {"instruction": "Write a Python class named `Tile` that represents a single tile for a single player in the game [2048](http://gabrielecirulli.github.io/2048/)."}, {"instruction": "Implement a Python class `DigitalClock` that takes a time in the format `HH:MM:SS` and implements methods to print the time in a variety of formats."}, {"instruction": "Write a Python class `DigitalSystem` to represent a digital system. The digital system consists of 32 input binary numbers stored in 32-element array, and 32 binary numbers stored in output array."}, {"instruction": "Write a Python class `Knight` that implements the behavior of a Knight. A knight is able to move in an L-shaped pattern, regardless of whether the movement is legal or not."}, {"instruction": "Write a Python class `Binary` that implements a binary number."}, {"instruction": "Write a Python class `DigitalClock` that acts as a digital clock. When initialized, it should display the current time."}, {"instruction": "Write a Python class `DigitalKeyboard` that simulates the operation of a standard computer's digital keyboard."}, {"instruction": "Write a Python class `Input` that implements a digital input device with a `read()` method that reads the input."}, {"instruction": "Implement a Python class `DigitalKeypad` that simulates a keypad with 3 rows and 3 columns, the push of each button outputs a character."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: copy, square root, array assignment\n\n### Task", "fingerprint": null, "content": {"code": "float MX_HAND_GetScalarGyro(void)\r\n{\r\n    float gyro[ 3 ];\r\n    float ans = 0;\r\n\r\n    /*\r\n    while (!MX_HAND_HW_getData(acc, gyro)) {\r\n\r\n    }\r\n    */\r\n    memcpy(gyro, stashed_gyro, sizeof(gyro));\r\n\r\n    for (int i = 0; i < 3; i++) {\r\n        if (i != 0) {\r\n            ans += gyro[ i ] * gyro[ i ];\r\n        }\r\n    }\r\n\r\n    return sqrtf(ans);\r\n}", "docstring": "/*\r\n    bool isSwing = false;\r\n\r\n    if (isSwing && !p->bActive[ HAND_ID_Clash ]) {\r\n        p->bActive[ HAND_ID_Clash ]      = true;\r\n        p->u32TimeStamp[ HAND_ID_Clash ] = time;\r\n    }\r\n\r\n    if (!isSwing && p->bActive[ HAND_ID_Clash ]) {\r\n        p->bActive[ HAND_ID_Clash ] = false;\r\n    }\r\n    return p->bActive[ HAND_ID_Clash ];\r\n    */", "function_name": "MX_HAND_isClash"}, "id": 92, "seed": "float MX_HAND_GetScalarGyro(void)\r\n{\r\n    float gyro[ 3 ];\r\n    float ans = 0;\r\n\r\n    /*\r\n    while (!MX_HAND_HW_getData(acc, gyro)) {\r\n\r\n    }\r\n    */\r\n    memcpy(gyro, stashed_gyro, sizeof(gyro));\r\n\r\n    for (int i = 0; i < 3; i++) {\r\n        if (i != 0) {\r\n            ans += gyro[ i ] * gyro[ i ];\r\n        }\r\n    }\r\n\r\n    return sqrtf(ans);\r\n}", "concepts": ["copy", "square root", "array assignment"], "parsing_result": [{"instruction": "Write a Python method `sumOfSquares` that takes a list of numbers and returns the sum of their squares."}, {"instruction": "Implement a Python function `sqrt` that returns the square root of a nonnegative integer. Do not use the `math` library."}, {"instruction": "Implement a Python function `squareRoot` that computes the square root of a real number, given the float precision."}, {"instruction": "Implement a Python function `sqrt` that computes the square root of a positive integer."}, {"instruction": "Create a Python function `squareRoot` that returns the square root of a number by using copy assignment, square root, and iteration."}, {"instruction": "Implement a Python function `squareRoot` that returns the square root of a given integer."}, {"instruction": "Implement a Python function `squareRoot` that returns the square root of a number using a loop and the `copy` module."}, {"instruction": "Implement a Python function `isPrime` that returns true if the input is a prime number."}, {"instruction": "Create a Python function `copy` that takes a list and returns a new list that contains the same elements as the original."}, {"instruction": "Write a Python function `squareRoot` that returns the square root of an integer using the Newton's method (with a stopping criterion of 0.0001)."}, {"instruction": "Write a Python function `squareRoot` that implements the algorithm for computing a square root using the Newton's method."}, {"instruction": "Implement a Python function `isPerfectSquare` that returns true if an integer is a perfect square."}, {"instruction": "Implement a Python function `squareRoot` that finds the square root of a given number."}, {"instruction": "Implement a Python function `sqrt` that returns the square root of a number using a loop and the copy module."}, {"instruction": "Write a Python function `squareRoot` that returns the square root of a non-negative number using Newton's method."}, {"instruction": "Implement a Python function `squareRoot` that returns the square root of a non-negative integer using the copy and assignment operators."}, {"instruction": "Implement a Python function `sqrt` that returns the square root of a number."}, {"instruction": "Implement a Python function `squareRoot` that returns the square root of a number using copy assignment."}, {"instruction": "Create a Python function `squareRoot` that returns the square root of a positive integer."}, {"instruction": "Python: Write a function `squareRoot` using the copy method to return the square root of a given number."}, {"instruction": "Create a Python function `squared_copy` that takes an array of integers and returns a new array whose elements are the squares of the original array's elements."}, {"instruction": "Create a Python function `copyArray` that takes an array and returns a copy of the array using the built-in `copy` module."}, {"instruction": "Create a Python function `squareRoot` that returns the square root of a given number."}, {"instruction": "Write a Python function `squareRoot` that takes a float as input and returns its square root using the copy algorithm."}, {"instruction": "Write a Python function `squareRoot` that computes the square root of an integer."}, {"instruction": "Implement a Python function `sqrt` that returns the square root of a given number using the Newton-Raphson method."}, {"instruction": "Write a Python function `squareRoot` that returns the square root of a given number."}, {"instruction": "Implement a Python function `root` that returns the square root of a positive number."}, {"instruction": "Write a function `squareRoot` to compute the square root of a number `x` using the Babylonian method of iteration."}, {"instruction": "Write Python code to compute a square root of a provided floating-point number."}, {"instruction": "Create a Python function `squareRoot` that returns the result of the square root of a given number using the copy assignment operator."}, {"instruction": "Write a Python function `copyArray` that takes an array and returns a copy of that array."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: safe number operations, string operations, integer operations\n\n### Task", "fingerprint": null, "content": {"code": "std::string safe_number_to_string(const SafeNumber& a) {\n\tconst auto& val = compress_number(a);\n\tif (!safe_number_is_valid(val))\n\t\treturn NaN_str;\n\tif (safe_number_is_zero(val))\n\t\treturn \"0\";\n\tstd::stringstream ss;\n\tif (!val.sign) {\n\t\tss << \"-\";\n\t}\n\t// x = p.q\n\tauto e10 = uint64_pow(10, val.e);\n\tconst auto& e10_uint = simple_uint128_create(0, e10);\n\tconst auto& pq = simple_uint128_divmod(val.x, e10_uint);\n\tconst auto& p = pq.div_result;\n\tconst auto& q = pq.mod_result;\n\tss << simple_uint128_to_string(p, 10, 0);\n\n\tauto decimal_len = val.e;\n\tif (!simple_uint128_is_zero(q)) {\n\t\tauto decimal = simple_uint128_to_string(q, 10, decimal_len);\n\t\tss << \".\" << decimal;\n\t}\n\treturn ss.str();\n}", "docstring": "// r.x = r.x* 10 + big_a/big_b, big_a = (big_a % big_b) * 10, r.e += 1, Repeat this step until r.e >= 16 or big_a == 0 or rx > largest_x", "function_name": "safe_number_div"}, "id": 97, "seed": "std::string safe_number_to_string(const SafeNumber& a) {\n\tconst auto& val = compress_number(a);\n\tif (!safe_number_is_valid(val))\n\t\treturn NaN_str;\n\tif (safe_number_is_zero(val))\n\t\treturn \"0\";\n\tstd::stringstream ss;\n\tif (!val.sign) {\n\t\tss << \"-\";\n\t}\n\t// x = p.q\n\tauto e10 = uint64_pow(10, val.e);\n\tconst auto& e10_uint = simple_uint128_create(0, e10);\n\tconst auto& pq = simple_uint128_divmod(val.x, e10_uint);\n\tconst auto& p = pq.div_result;\n\tconst auto& q = pq.mod_result;\n\tss << simple_uint128_to_string(p, 10, 0);\n\n\tauto decimal_len = val.e;\n\tif (!simple_uint128_is_zero(q)) {\n\t\tauto decimal = simple_uint128_to_string(q, 10, decimal_len);\n\t\tss << \".\" << decimal;\n\t}\n\treturn ss.str();\n}", "concepts": ["safe number operations", "string operations", "integer operations"], "parsing_result": [{"instruction": "Write a Python class `Fraction` that has a constructor for fraction objects and implements methods for addition, subtraction, multiplication, division, and equality checking."}, {"instruction": "Create a Python class `Fraction` that represents a fraction and defines basic operations."}, {"instruction": "Write a Python class `Integer` that supports addition, subtraction, multiplication, division, and modulo."}, {"instruction": "Create a Python class `IntSet` that represents an integer set."}, {"instruction": "Write a Python class `Rational` that represents a rational number in lowest terms."}, {"instruction": "Write a Python class `Fraction` that implements a rational number."}, {"instruction": "Create a Python class `Point` that represents a 2D coordinate."}, {"instruction": "Write a Python class `Number` that represents a real number and supports operations for addition, subtraction, multiplication, and division."}, {"instruction": "Write a Python class `Fraction` that implements arithmetic operations for fractions: addition, subtraction, multiplication, and division."}, {"instruction": "Write a Python class `Fraction` that represents fractions."}, {"instruction": "Write a Python class `MyInt` that implements the same functionality as the built-in `int` class."}, {"instruction": "Write a Python class `Fraction` that represents a fraction and provides methods to perform basic arithmetic operations (addition, subtraction, multiplication, division, and equality)."}, {"instruction": "Implement the class `Counter` that allows integers to be incremented and decremented by a single string value."}, {"instruction": "Create a Python class `Rectangle` that implements a rectangular shape."}, {"instruction": "Create a python class `SafeInt` that is capable of performing safe integer arithmetic."}, {"instruction": "Write a Python class `GCD` that implements the Euclidean algorithm for finding the greatest common divisor of two positive integers."}, {"instruction": "Implement a Python class `Counter` that stores an integer value and can increment and decrement the value."}, {"instruction": "Write a Python class `ComplexNumber` with attributes `real` and `imag` (for real and imaginary parts, respectively) and methods `add` and `sub` that perform addition and subtraction between two complex numbers."}, {"instruction": "Write a Python class `Integer` that allows for arithmetic operations on integers."}, {"instruction": "Create a Python class `IntSet` that initializes an integer set from a collection of integers. The class should support:\n- insert(x)\n- delete(x)\n- __contains__(x)\n- __len__()\n- __iter__()"}, {"instruction": "Write a Python class `SafeInt` that accepts an integer as input and prevents integer overflow."}, {"instruction": "Write a Python class `Complex` that represents a complex number. It must contain methods to perform the following operations:\n\n- addition\n- subtraction\n- multiplication\n- division\n- modulus\n- conjugate\n- magnitude\n- inverse\n- equals"}, {"instruction": "Implement a Python class `Rational` with the following features:\n\n- Constructor accepts two integers, representing the numerator and denominator of a rational number\n- Defines the mathematical operations +, -, * and / for rational numbers\n- Raises a ValueError error when a denominator is zero\n- Uses string representations of the rational numbers for printing"}, {"instruction": "Write a Python class `Rational` that represents a rational number."}, {"instruction": "Create a Python class `Fraction`, which can perform basic arithmetical operations on fractions."}, {"instruction": "Implement a Python class `Integer` that represents a non-negative integer. \nThis class should be initialized with an integer value, and should support the following operations:\n- `str` method to support printing the value as a string\n- `int` method to support converting to an integer\n- `+` operator to support addition of two integers\n- `*` operator to support multiplication of an integer by an integer"}, {"instruction": "Create a Python class `Calculator` that models a simple calculator."}, {"instruction": "Implement a Python class `Fraction` that defines a rational number of the form n/d. Implement the following methods:\n\n- `numerator` returns the numerator of a Fraction\n- `denominator` returns the denominator of a Fraction\n- `add` adds two Fractions and returns a new Fraction\n- `subtract` subtracts two Fractions and returns a new Fraction\n- `multiply` multiplies two Fractions and returns a new Fraction\n- `divide` divides two Fractions and returns a new Fraction\n- `simplify` simplifies a Fraction\n- `compare` compares two Fractions"}, {"instruction": "Create a Python class `Fraction` that implements fraction arithmetic. The fraction class should have the following methods:\n- `add`\n- `subtract`\n- `multiply`\n- `divide`\n- `repr`\n- `simplify`\n- `equiv`\n- `reduce`\n- `inverse`\n\nThe `repr`, `simplify`, `equiv`, and `reduce` methods should return a simplified, reduced fraction string. The `inverse` method should return the reciprocal of a Fraction object."}, {"instruction": "Write a Python class `Mortgage`, which implements a mortgage calculator. A mortgage allows a borrower to repay loan principal and interest over a fixed repayment period. The loan is amortized over the repayment period and the borrower pays interest on unpaid balance."}, {"instruction": "Write a Python class `Fraction` that represents fractions.\n\nThe class must have the following public member functions:\n\n- `Fraction(int numerator, int denominator)`\n- `reduce()`\n- `add(Fraction other)`\n- `sub(Fraction other)`\n- `mul(Fraction other)`\n- `div(Fraction other)`\n- `eq(Fraction other)`\n- `lt(Fraction other)`\n- `gt(Fraction other)`\n\nThe class must also implement the `__str__` magic method, which should return a string representation of the fraction object."}, {"instruction": "Create an object-oriented Python class `Fraction` that represents fractions."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: binary search, loop termination condition, midpoint calculation, loop in-place mutation\n\n### Task", "fingerprint": null, "content": {"code": "Vector2f eval_time_spline(double t)\n{\n\tassert(t >= 0. && t <= t_max);\n\t\n\t//Do a binary search to find t coordinate for time value\n\tfloat lo = 0., hi = 1.;\n\tVector3f pt;\n\twhile(abs(lo - hi) > 1e-6)\n\t{\n\t\tfloat m = lo + (hi - lo) * .5;\n\t\tpt = eval_spline(m);\n\t\t\n\t\tif(pt.z() > t)\n\t\t\thi = m;\n\t\telse\n\t\t\tlo = m;\n\t}\n\t\n\t//Return the value of the spline at this time\n\treturn Vector2f(pt.x(), pt.y());\n}", "docstring": "//Validate data (assert that path is monotonic)", "function_name": "read_control_points"}, "id": 101, "seed": "Vector2f eval_time_spline(double t)\n{\n\tassert(t >= 0. && t <= t_max);\n\t\n\t//Do a binary search to find t coordinate for time value\n\tfloat lo = 0., hi = 1.;\n\tVector3f pt;\n\twhile(abs(lo - hi) > 1e-6)\n\t{\n\t\tfloat m = lo + (hi - lo) * .5;\n\t\tpt = eval_spline(m);\n\t\t\n\t\tif(pt.z() > t)\n\t\t\thi = m;\n\t\telse\n\t\t\tlo = m;\n\t}\n\t\n\t//Return the value of the spline at this time\n\treturn Vector2f(pt.x(), pt.y());\n}", "concepts": ["binary search", "loop termination condition", "midpoint calculation", "loop in-place mutation"], "parsing_result": [{"instruction": "Create a Python program to search for a number in an array using binary search."}, {"instruction": "Create a Python program that uses binary search to find a target value in a list, and return the index of the value if it exists."}, {"instruction": "Write a Python program that takes a sorted array and a value, and returns a boolean indicating if the value exists in the array."}, {"instruction": "Write a program that finds the largest number that divides evenly into both 100 and 150."}, {"instruction": "Write a Python program that takes a list of numbers and returns the minimum, maximum, and average."}, {"instruction": "Write a Python program that calculates the sum of the first N Fibonacci numbers where N is provided by the user."}, {"instruction": "Create a Python program that takes a sequence of numbers and prints the smallest, largest, mean, and median of the numbers."}, {"instruction": "Write a Python program to find the middle number in a given list."}, {"instruction": "Create a Python program that prints the Fibonacci sequence up to the nth number using binary search."}, {"instruction": "Create a Python program that asks the user for a positive integer between 1 and 1000, and returns the corresponding Fibonacci number."}, {"instruction": "Write a Python program that finds a number in a sorted list that is missing from the list."}, {"instruction": "Create a Python program that implements a binary search on an integer array."}, {"instruction": "Create a Python program that uses a binary search to find the index of a given number in a sorted list."}, {"instruction": "Create a Python program that implements binary search on a given list of integers."}, {"instruction": "Create a Python program that translates binary numbers to decimal numbers."}, {"instruction": "Write a Python function `binarySearch` that takes a sorted list of integers and an integer `key` and returns the index of `key` if it is found in the list, or `-1` otherwise."}, {"instruction": "Write a Python function that takes a sorted list of integers as input and returns the index of a target number if that number is in the list. If the target number is not in the list, return `-1`."}, {"instruction": "Create a Python function `binarySearch` that takes a sorted list of integers and returns True if a target integer is present, or False if not."}, {"instruction": "Create a Python program that implements binary search."}, {"instruction": "Write a Python program that takes a sorted array of integers and a number, and returns True if the number is in the array and False otherwise. Use binary search."}, {"instruction": "Create a Python program that finds the largest element in a list of integers."}, {"instruction": "Create a Python program that finds a number in a sorted array of integers using binary search."}, {"instruction": "Implement a Python function `binarySearch` that takes a sorted list of integers as input and returns the index of the target value if it is in the list or `-1` otherwise."}, {"instruction": "Create a Python program that takes a list of integers and prints out the integers in reverse order."}, {"instruction": "Write a Python function `binarySearch` that takes a sorted list of numbers and a target number and returns the index of the target number in the list, or -1 if the target number is not in the list."}, {"instruction": "Create a Python program that takes two lists of numbers as input and returns their sum, using a binary search."}, {"instruction": "Write a Python program that finds the middle element of a list."}, {"instruction": "Create a Python program that prints all even numbers from 0 to 1000."}, {"instruction": "Write a Python function `binarySearch` that takes a sorted list and a target value and returns the index of the target value's occurrence. If no occurrence is found, return `-1`."}, {"instruction": "Create a binary-search-based Python program that takes a list of numbers and returns the number of searches required to find the minimum number."}, {"instruction": "Create a program that accepts a list of strings and prints the contents of the list in alphabetical order."}, {"instruction": "Create a Python program that implements a binary search algorithm to return the index of a target item in a sorted list."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: static method, macro definition, creation of directories\n\n### Task", "fingerprint": null, "content": {"code": "static inline bool create_directory(string &path)\n{\n    assert(path.length() > 0);\n    //\u76f8\u5bf9\u8def\u5f84\n    if ('/' != path[0])\n    {\n        char abs_path[MAX_PATH_LEN];\n        getcwd(abs_path, MAX_PATH_LEN);\n        string cur_dir(abs_path);\n        path = cur_dir + \"/\" + path;\n    }\n    //\u521b\u5efa\u6587\u4ef6\u5939\n    try\n    {\n        mkdir(path.c_str(), S_IRWXU);\n        LOG(DEBUG) << \"CREATE DIR=\" << path << \" SUCCEED\";\n        return true;\n    }\n    catch (exception &err_msg)\n    {\n        LOG(ERROR) << \"CREATE DIR=\" << path << \" FAILED\"\n                   << \"error msg:\" << err_msg.what();\n    }\n    return false;\n}", "docstring": "//LOG(DEBUG)<<\"HEX STRING OF BYTES_BUF:\"<<buf.str();", "function_name": "trans_bytes_to_string"}, "id": 113, "seed": "static inline bool create_directory(string &path)\n{\n    assert(path.length() > 0);\n    //\u76f8\u5bf9\u8def\u5f84\n    if ('/' != path[0])\n    {\n        char abs_path[MAX_PATH_LEN];\n        getcwd(abs_path, MAX_PATH_LEN);\n        string cur_dir(abs_path);\n        path = cur_dir + \"/\" + path;\n    }\n    //\u521b\u5efa\u6587\u4ef6\u5939\n    try\n    {\n        mkdir(path.c_str(), S_IRWXU);\n        LOG(DEBUG) << \"CREATE DIR=\" << path << \" SUCCEED\";\n        return true;\n    }\n    catch (exception &err_msg)\n    {\n        LOG(ERROR) << \"CREATE DIR=\" << path << \" FAILED\"\n                   << \"error msg:\" << err_msg.what();\n    }\n    return false;\n}", "concepts": ["static method", "macro definition", "creation of directories"], "parsing_result": [{"instruction": "Write a Python function `mkdir` that creates multiple directories, given a list of directories to be created."}, {"instruction": "Write a python function `create_directories` that creates a series of directories with the specified names, one directory at a time, in a user-specified directory."}, {"instruction": "Write a Python function `isPrime` that returns true if an integer is prime."}, {"instruction": "Write a Python function `createDirectory` that creates a directory of the same name as the function."}, {"instruction": "Write a Python function `create_directory` that takes a path and a name of a new directory as arguments and creates a directory in the specified path with the given name."}, {"instruction": "Write a Python function `createDir` that creates a new directory with the given name."}, {"instruction": "Write a Python function `createDirectory` that creates a directory using the `mkdir` command with an optional input path and return the path to the created directory."}, {"instruction": "Write a Python function `make_directory` that creates a directory and any intermediate directories that do not exist."}, {"instruction": "Write a Python function `createDir` that creates a directory with a given name."}, {"instruction": "Write a Python function `mkdir` that creates a directory at a given path."}, {"instruction": "Write a Python function `create_directories` that takes a list of strings and creates on disk a series of directories with those names."}, {"instruction": "Write a Python program that recursively creates new directories given as command-line arguments in the form `name1/name2/name3...`.\n/C++/02-psuedocode-to-function/04-find-max-of-two/README.md\n# Find the maximum of two integers\n\nWrite a C++ function `max` that returns the maximum of two integers."}, {"instruction": "Write a Python function `createDirectories` that takes a string as input and creates an identical directory path."}, {"instruction": "Write a Python function `createDirs` that takes in a list of directory names, creates those directories, and assigns them to the current user in the home directory."}, {"instruction": "Write a Python function `createDirectories` that creates directories within the current working directory, given a list of relative directory names."}, {"instruction": "Write a Python function `createDirectory` that takes a string representing the path to a directory and creates it, if it does not already exist."}, {"instruction": "Write a Python function `create_directories` that creates a directory structure based on a given path string."}, {"instruction": "Create a Python function `build_file_tree` that takes a directory path and creates a file tree for each file in the directory."}, {"instruction": "Write a function `isLeap(year)` that returns `True` if a given year is a leap year, and `False` otherwise."}, {"instruction": "Create a Python function `createDirectories` that takes a list of paths and creates all directories in the path list."}, {"instruction": "Create a Python function `count_digits` that returns the number of digits in an integer."}, {"instruction": "Write a Python function `create_directories` that creates a directory structure by accepting a relative string path, e.g., `dir/subdir/file`."}, {"instruction": "Write a Python function `get_directories` that takes a list of file paths, and returns a list of directories that exist in the file system, as strings."}, {"instruction": "Write a Python function `createDirectory` that takes a directory name and returns the full path to the new directory."}, {"instruction": "Write a function `write_file` that takes a string argument named `filename` and a string argument named `content` and writes the content to the file with the given name in the following format:\n\n```\n# filename\n\ncontent\n```"}, {"instruction": "Write a Python function `makeDir` that creates a directory called `dirName` with a subdirectory `dirName/subDir`."}, {"instruction": "Write a Python function `copyDirectory` that copies a directory of files, as well as any files in child directories, to a new directory.\n/cpp/concepts/static_method.md\n# Static Methods\n\n## Definition\nA static method is a function that is a member of a class, but is not a member of any object. It can be called either on the class itself, or on a class object (the `this` pointer is not required). Static methods can only access static data members. Static methods are often used to implement helper functions. Static methods are not commonly used to implement an object's behavior; in this case, you would use an ordinary function instead."}, {"instruction": "Write a Python function `make_dir` that creates a directory with the same name as the function."}, {"instruction": "Write a Python function `createDirectories` that takes a file path as a string and returns the full path to the directory the file would be created in, given the path to the parent directory. Assume the path is valid, and the file system is not corrupted.\n/cpp/examples/06/01_palindrome/palindrome.cpp\n#include <iostream>\n#include <string>\n\nbool isPalindrome(std::string input)\n{\n    // check for empty input\n    if (input.empty()) {\n        return true;\n    }\n\n    // initialize left and right indices\n    int left = 0;\n    int right = input.length() - 1;\n\n    // loop while left index is less than right index\n    while (left < right) {\n        // check if characters on left and right are not equal\n        if (input[left] != input[right]) {\n            return false;\n        }\n\n        // move left and right indices\n        left++;\n        right--;\n    }\n\n    // if code is reached, string is a palindrome\n    return true;\n}\n\nint main()\n{\n    // prompt user for input\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n\n    // print whether string is a palindrome\n    std::cout << input << \" is a palindrome: \" << isPalindrome(input) << '\\n';\n}\n/cpp/examples/02/01_power/power.cpp\n#include <iostream>\n\nint power(int base, int exp)\n{\n    // initialize result variable\n    int result = 1;\n\n    // loop while exp is greater than zero\n    while (exp > 0) {\n        // if exp is odd, multiply result by base\n        if (exp % 2 == 1) {\n            result *= base;\n        }\n\n        // divide base by 2\n        base *= base;\n\n        // divide exp by 2\n        exp /= 2;\n    }\n\n    // return result\n    return result;\n}\n\nint main()\n{\n    // prompt user for base and exponent\n    int base;\n    std::cout << \"Enter a base: \";\n    std::cin >> base;\n\n    int exp;\n    std::cout << \"Enter an exponent: \";\n    std::cin >> exp;\n\n    // print result\n    std::cout << base << \" to the power of \" << exp << \" is \" << power(base, exp) << '\\n';\n}\n/cpp/examples/05/01_fibonacci/fibonacci.cpp\n#include <iostream>\n\nint fibonacci(int n)\n{\n    // check if n is valid\n    if (n < 2) {\n        return n;\n    }\n\n    // initialize result variables\n    int n0 = 0;\n    int n1 = 1;\n    int nth = 0;\n\n    // loop while n is greater than 0\n    while (n > 0) {\n        // calculate next number in sequence and move n closer to 0\n        nth = n0 + n1;\n        n1 = n0;\n        n0 = nth;\n        n--;\n    }\n\n    // return result\n    return nth;\n}\n\nint main()\n{\n    // prompt user for input\n    int n;\n    std::cout << \"Enter a number: \";\n    std::cin >> n;\n\n    // print nth Fibonacci number\n    std::cout << n << \"th Fibonacci number is \" << fibonacci(n) << '\\n';\n}\n/cpp/examples/06/03_reverse_string/reverse_string.cpp\n#include <algorithm>\n#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string reverseString(std::string input)\n{\n    // convert input string to vector of characters\n    std::vector<char> chars(input.begin(), input.end());\n\n    // reverse vector of characters\n    std::reverse(chars.begin(), chars.end());\n\n    // convert vector of characters to string\n    return std::string(chars.begin(), chars.end());\n}\n\nint main()\n{\n    // prompt user for input\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n\n    // reverse string\n    std::cout << \"The reversed string is \" << reverseString(input) << '\\n';\n}\n/cpp/examples/05/02_sum_vector/sum_vector.cpp\n#include <iostream>\n#include <vector>\n\nint sumVector(std::vector<int> input)\n{\n    // initialize result variable\n    int result = 0;\n\n    // loop through elements in input vector\n    for (auto element : input) {\n        // accumulate sum of elements in input\n        result += element;\n    }\n\n    // return result\n    return result;\n}\n\nint main()\n{\n    // prompt user for input\n    std::cout << \"Enter a list of integers (separated by spaces): \";\n\n    // initialize input vector\n    std::vector<int> input;\n\n    int element;\n    while (std::cin >> element) {\n        // add element to input vector\n        input.push_back(element);\n    }\n\n    // print sum of elements in input vector\n    std::cout << \"Sum of elements in vector is \" << sumVector(input) << '\\n';\n}\n/cpp/examples/04/01_swap/swap.cpp\n#include <iostream>\n\nvoid swap(int &a, int &b)\n{\n    // swap values of a and b using pass-by-reference\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main()\n{\n    // prompt user for input\n    int a;\n    std::cout << \"Enter a number: \";\n    std::cin >> a;\n\n    int b;\n    std::cout << \"Enter another number: \";\n    std::cin >> b;\n\n    // print original and swapped values\n    std::cout << \"Before swapping...\\na = \" << a << \", b = \" << b << '\\n';\n    swap(a, b);\n    std::cout << \"After swapping...\\na = \" << a << \", b = \" << b << '\\n';\n}\n/cpp/examples/README.md\n# C++ Examples\n\nThis directory contains example C++ code for a variety of C++ tasks.\n\n## Contents\n- [01_sum_vector](./01_sum_vector)\n- [02_power](./02_power)\n- [03_fibonacci](./03_fibonacci)\n- [04_swap](./04_swap)\n- [05_fibonacci](./05_fibonacci)\n- [06_palindrome](./06_palindrome)\n- [07_reverse_string](./07_reverse_string)\n- [08_count_digits](./08_count_digits)"}, {"instruction": "Implement a Python function `createDirectory` that creates a directory and the specified number of nested subdirectories within it."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: formatting, duration conversion, string conversion\n\n### Task", "fingerprint": null, "content": {"code": "QString formatDurationStr(std::chrono::seconds dur)\n{\n    using days = std::chrono::duration<int, std::ratio<86400>>; // can remove this line after C++20\n    const auto d{std::chrono::duration_cast<days>(dur)};\n    const auto h{std::chrono::duration_cast<std::chrono::hours>(dur - d)};\n    const auto m{std::chrono::duration_cast<std::chrono::minutes>(dur - d - h)};\n    const auto s{std::chrono::duration_cast<std::chrono::seconds>(dur - d - h - m)};\n    QStringList str_list;\n    if (auto d2{d.count()}) str_list.append(QObject::tr(\"%1 d\").arg(d2));\n    if (auto h2{h.count()}) str_list.append(QObject::tr(\"%1 h\").arg(h2));\n    if (auto m2{m.count()}) str_list.append(QObject::tr(\"%1 m\").arg(m2));\n    const auto s2{s.count()};\n    if (s2 || str_list.empty()) str_list.append(QObject::tr(\"%1 s\").arg(s2));\n    return str_list.join(\" \");\n}", "docstring": "// no default case, so the compiler can warn about missing cases", "function_name": "ConnectionTypeToQString"}, "id": 114, "seed": "QString formatDurationStr(std::chrono::seconds dur)\n{\n    using days = std::chrono::duration<int, std::ratio<86400>>; // can remove this line after C++20\n    const auto d{std::chrono::duration_cast<days>(dur)};\n    const auto h{std::chrono::duration_cast<std::chrono::hours>(dur - d)};\n    const auto m{std::chrono::duration_cast<std::chrono::minutes>(dur - d - h)};\n    const auto s{std::chrono::duration_cast<std::chrono::seconds>(dur - d - h - m)};\n    QStringList str_list;\n    if (auto d2{d.count()}) str_list.append(QObject::tr(\"%1 d\").arg(d2));\n    if (auto h2{h.count()}) str_list.append(QObject::tr(\"%1 h\").arg(h2));\n    if (auto m2{m.count()}) str_list.append(QObject::tr(\"%1 m\").arg(m2));\n    const auto s2{s.count()};\n    if (s2 || str_list.empty()) str_list.append(QObject::tr(\"%1 s\").arg(s2));\n    return str_list.join(\" \");\n}", "concepts": ["formatting", "duration conversion", "string conversion"], "parsing_result": [{"instruction": "Implement a Python class `Duration` that represents a duration of time."}, {"instruction": "Create a Python class `DisplayTime` that converts the elapsed time in seconds into `HH:MM:SS` format."}, {"instruction": "Write a Python class `Duration` that has a method `to_string` that returns the duration in the format [D] days [H] hours [M] minutes."}, {"instruction": "Implement a Python class `Date` that stores a date in the format mm/dd/yyyy and supports the following operations:\n\n- initialize a date\n- retrieve the day of week\n- return whether this date is a weekend day\n- return difference between this date and another date\n- return a date that is a certain number of days/weeks/months/years in the future/past"}, {"instruction": "Create a Python class `Duration` that stores a duration in seconds and performs various operations on the duration."}, {"instruction": "Implement a Python class `Duration` that represents the duration of a time span in seconds."}, {"instruction": "Create a Python class `Duration` that represents a duration in hours, minutes, and seconds."}, {"instruction": "Write a Python class `Time` that represents time with hours, minutes, and seconds as attributes, and provides methods to add and subtract time."}, {"instruction": "Create a Python class `Duration` that represents a time interval."}, {"instruction": "Write a Python class `Duration` that represents a duration of time in seconds. Implement all of its methods."}, {"instruction": "Create a class `Time` that implements addition of a `Time` object with a duration and a string representation of a `Time` object using Python."}, {"instruction": "Write a Python class `Time` that implements a class for time and duration calculations."}, {"instruction": "Create a Python class `Time` that represents a time of day and includes the following methods:\n\n- `Time(int, int, int)` (constructor)\n- `printTime()`\n- `addTime(Time)`\n- `isValid()` - returns True if the time is valid, False otherwise\n- `isMoreThan(Time)` - returns True if the current time is more than the given one, False otherwise\n- `increment(int)` - increments the time by the specified amount"}, {"instruction": "Implement a Python class `Time` with the following properties:\n\n- hours (0 - 23)\n- minutes (0 - 59)\n- seconds (0 - 59)\n\nImplement the following methods:\n\n- `__init__` - with two parameters: hour and minute\n- `time_to_seconds` - returns the total number of seconds in the time\n- `seconds_to_time` - takes an integer representing number of seconds and returns an instance of the `Time` class, representing the equivalent time\n- `increment_time` - takes an integer representing number of seconds and returns an instance of the `Time` class, representing the equivalent time\n- `is_valid` - returns true if the time is valid, false otherwise\n- `print_time` - prints the time in the format `hour:minute:seconds`"}, {"instruction": "Create a Python class `Time` that represents an arbitrary time such that the time is specified in hours, minutes, and seconds. The class must have the following properties:\n\n- `__init__` - creates a new `Time` object\n- `from_h_m_s` - sets the time from the number of hours, minutes, and seconds\n- `from_h_m` - sets the time from the number of hours and minutes\n- `from_h` - sets the time from the number of hours\n- `to_h_m_s` - returns the number of hours, minutes, and seconds\n- `to_h_m` - returns the number of hours and minutes\n- `to_h` - returns the number of hours\n- `__add__` - adds two time objects together\n- `__sub__` - subtracts two time objects together\n- `__eq__` - returns whether two time objects are equal\n- `__lt__` - returns whether one time object is less than another\n- `__gt__` - returns whether one time object is greater than another\n- `__le__` - returns whether one time object is less than or equal to another\n- `__ge__` - returns whether one time object is greater than or equal to another\n- `__str__` - returns a string representation of the time\n- `__repr__` - returns the string representation of the time"}, {"instruction": "Create a Python class `Date` that represents a date in the format DD/MM/YYYY. Implement methods to add, subtract, and compare dates."}, {"instruction": "Given a duration in days, hours, minutes, and seconds, write a Python class `Time` that implements the following methods:\n\n- `add`: adds two `Time` objects and returns a new `Time` object\n- `subtract`: subtracts two `Time` objects and returns a new `Time` object\n- `print`: prints the duration as a string in the format `D days, H hours, M minutes, S seconds`"}, {"instruction": "Create a Python class `Time` that, given a period of time as a string in the form `HH:MM:SS` or `H:MM:SS`, returns the number of seconds in that period of time."}, {"instruction": "Write a Python class `Time` that represents time in the 24-hour format, supports printing, adding, and subtracting time, and comparing times."}, {"instruction": "Create a Python class `Time` that represents a time of day (e.g., 11:00:00 AM, 12:00:00 PM, 1:00:00 AM, 1:00:00 PM, 1:00:00 PM, 12:00:00 AM, 12:00:00 PM, 12:00:00 AM, 12:00:00 AM, 12:00:00 PM, 12:00:00 PM)."}, {"instruction": "Write a Python class `Time` that represents a time of day on a clock that is not adjusted for daylight savings. The class should store hours, minutes, and seconds as attributes. It should have a method `timeString` that returns the string representation of the time. The format should be `hh:mm:ss` and should be in 24-hour format."}, {"instruction": "Implement the class `Time` in Python that represents a time point in time. The class should support the following operations:\n\n- constructor that takes two arguments, a value indicating the number of hours and an integer indicating the number of minutes, where the latter argument represents the number of minutes past the hour\n- a default constructor that initializes the time to 0:00\n- a constructor that takes an integer indicating the number of minutes and initializes the time to that amount of time\n- a constructor that takes two integers, the first representing the number of hours and the second representing the number of minutes, and initializes the time to those values\n- a method `getHour` that returns the number of hours\n- a method `getMinute` that returns the number of minutes\n- a method `setHour` that sets the number of hours\n- a method `setMinute` that sets the number of minutes\n- a method `setDuration` that sets the time to the given amount of time\n- an operator `==` that returns true if the two times are equal\n- an operator `>` that returns true if the left-hand operand is greater than the right-hand operand\n- a method `sum` that adds the given amount of time to the current time\n- a method `subtract` that subtracts the given amount of time from the current time\n- a method `getDuration` that returns the amount of time represented by the time\n- a method `toString` that returns a string representation of the time"}, {"instruction": "Create a Python class `Time` with attributes `hours`, `minutes`, `seconds`, and methods `to_string`, `add`, `subtract`, `format`, and `duration`."}, {"instruction": "Create a Python class `Time` that represents a time of day."}, {"instruction": "Create a Python class `Time` that implements time calculations and conversions."}, {"instruction": "Implement a Python class that represents a duration of time. The class should support addition and subtraction of durations."}, {"instruction": "Create a Python class that determines whether a given date is valid or not."}, {"instruction": "Create a Python class `Duration` that can be used to represent a duration of time."}, {"instruction": "Write a Python class that displays the elapsed time of a code block."}, {"instruction": "Create a Python class named `Duration` that represents a duration of time, with hours, minutes, and seconds. It should have the following methods:\n\n- `__init__`: should take hours (`int`), minutes (`int`), and seconds (`int`) as its parameters, and create a Duration object with the given number of hours, minutes, and seconds. If any parameters are invalid, raise a `ValueError` with an appropriate message.\n- `__str__`: should return a string representation of the duration in the format `HH:MM:SS`, where `HH` is the number of hours, `MM` is the number of minutes, and `SS` is the number of seconds (padded with leading zeros if necessary). If any of the hours, minutes, or seconds is negative, raise a `ValueError` with an appropriate message."}, {"instruction": "Write a Python class `Time` that represents a time."}, {"instruction": "Create a class `Duration` that stores a duration in hours, minutes, and seconds."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: high-level functions, asynchronous execution, error handling, memory management\n\n### Task", "fingerprint": null, "content": {"code": "static bool updateInstallationHelper(char * accessToken,\n\tstd::string id, UpdateInstallationObject body, std::string xEmbarcaderoApplicationId, std::string xEmbarcaderoAppSecret, std::string xEmbarcaderoMasterSecret, \n\tvoid(* handler)(UpdatedInstallationObject, Error, void* )\n\t, void* userData, bool isAsync)\n{\n\n\t//TODO: maybe delete headerList after its used to free up space?\n\tstruct curl_slist *headerList = NULL;\n\n\t\n\t{\n\t\tstring headerString(\"X-Embarcadero-Application-Id: \");\n\t\theaderString.append(stringify(&xEmbarcaderoApplicationId, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\t{\n\t\tstring headerString(\"X-Embarcadero-App-Secret: \");\n\t\theaderString.append(stringify(&xEmbarcaderoAppSecret, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\t{\n\t\tstring headerString(\"X-Embarcadero-Master-Secret: \");\n\t\theaderString.append(stringify(&xEmbarcaderoMasterSecret, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\tstring accessHeader = \"Authorization: Bearer \";\n\taccessHeader.append(accessToken);\n\theaderList = curl_slist_append(headerList, accessHeader.c_str());\n\theaderList = curl_slist_append(headerList, \"Content-Type: application/json\");\n\n\tmap <string, string> queryParams;\n\tstring itemAtq;\n\t\n\tstring mBody = \"\";\n\tJsonNode* node;\n\tJsonArray* json_array;\n\n\tif (isprimitive(\"UpdateInstallationObject\")) {\n\t\tnode = converttoJson(&body, \"UpdateInstallationObject\", \"\");\n\t}\n\t\n\tchar *jsonStr =  body.toJson();\n\tnode = json_from_string(jsonStr, NULL);\n\tg_free(static_cast<gpointer>(jsonStr));\n\t\n\n\tchar *jsonStr1 =  json_to_string(node, false);\n\tmBody.append(jsonStr1);\n\tg_free(static_cast<gpointer>(jsonStr1));\n\n\tstring url(\"/installations/{id}\");\n\tint pos;\n\n\tstring s_id(\"{\");\n\ts_id.append(\"id\");\n\ts_id.append(\"}\");\n\tpos = url.find(s_id);\n\turl.erase(pos, s_id.length());\n\turl.insert(pos, stringify(&id, \"std::string\"));\n\n\t//TODO: free memory of errormsg, memorystruct\n\tMemoryStruct_s* p_chunk = new MemoryStruct_s();\n\tlong code;\n\tchar* errormsg = NULL;\n\tstring myhttpmethod(\"PUT\");\n\n\tif(strcmp(\"PUT\", \"PUT\") == 0){\n\t\tif(strcmp(\"\", mBody.c_str()) == 0){\n\t\t\tmBody.append(\"{}\");\n\t\t}\n\t}\n\n\tif(!isAsync){\n\t\tNetClient::easycurl(InstallationsManager::getBasePath(), url, myhttpmethod, queryParams,\n\t\t\tmBody, headerList, p_chunk, &code, errormsg);\n\t\tbool retval = updateInstallationProcessor(*p_chunk, code, errormsg, userData,reinterpret_cast<void(*)()>(handler));\n\n\t\tcurl_slist_free_all(headerList);\n\t\tif (p_chunk) {\n\t\t\tif(p_chunk->memory) {\n\t\t\t\tfree(p_chunk->memory);\n\t\t\t}\n\t\t\tdelete (p_chunk);\n\t\t}\n\t\tif (errormsg) {\n\t\t\tfree(errormsg);\n\t\t}\n\t\treturn retval;\n\t} else{\n\t\tGThread *thread = NULL;\n\t\tRequestInfo *requestInfo = NULL;\n\n\t\trequestInfo = new(nothrow) RequestInfo (InstallationsManager::getBasePath(), url, myhttpmethod, queryParams,\n\t\t\tmBody, headerList, p_chunk, &code, errormsg, userData, reinterpret_cast<void(*)()>(handler), updateInstallationProcessor);;\n\t\tif(requestInfo == NULL)\n\t\t\treturn false;\n\n\t\tthread = g_thread_new(NULL, __InstallationsManagerthreadFunc, static_cast<gpointer>(requestInfo));\n\t\treturn true;\n\t}\n}", "docstring": "//TODO: free memory of errormsg, memorystruct", "function_name": "getInstallationsHelper"}, "id": 119, "seed": "static bool updateInstallationHelper(char * accessToken,\n\tstd::string id, UpdateInstallationObject body, std::string xEmbarcaderoApplicationId, std::string xEmbarcaderoAppSecret, std::string xEmbarcaderoMasterSecret, \n\tvoid(* handler)(UpdatedInstallationObject, Error, void* )\n\t, void* userData, bool isAsync)\n{\n\n\t//TODO: maybe delete headerList after its used to free up space?\n\tstruct curl_slist *headerList = NULL;\n\n\t\n\t{\n\t\tstring headerString(\"X-Embarcadero-Application-Id: \");\n\t\theaderString.append(stringify(&xEmbarcaderoApplicationId, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\t{\n\t\tstring headerString(\"X-Embarcadero-App-Secret: \");\n\t\theaderString.append(stringify(&xEmbarcaderoAppSecret, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\t{\n\t\tstring headerString(\"X-Embarcadero-Master-Secret: \");\n\t\theaderString.append(stringify(&xEmbarcaderoMasterSecret, \"std::string\"));\n\t\theaderList = curl_slist_append(headerList, headerString.c_str());\n\t}\n\n\tstring accessHeader = \"Authorization: Bearer \";\n\taccessHeader.append(accessToken);\n\theaderList = curl_slist_append(headerList, accessHeader.c_str());\n\theaderList = curl_slist_append(headerList, \"Content-Type: application/json\");\n\n\tmap <string, string> queryParams;\n\tstring itemAtq;\n\t\n\tstring mBody = \"\";\n\tJsonNode* node;\n\tJsonArray* json_array;\n\n\tif (isprimitive(\"UpdateInstallationObject\")) {\n\t\tnode = converttoJson(&body, \"UpdateInstallationObject\", \"\");\n\t}\n\t\n\tchar *jsonStr =  body.toJson();\n\tnode = json_from_string(jsonStr, NULL);\n\tg_free(static_cast<gpointer>(jsonStr));\n\t\n\n\tchar *jsonStr1 =  json_to_string(node, false);\n\tmBody.append(jsonStr1);\n\tg_free(static_cast<gpointer>(jsonStr1));\n\n\tstring url(\"/installations/{id}\");\n\tint pos;\n\n\tstring s_id(\"{\");\n\ts_id.append(\"id\");\n\ts_id.append(\"}\");\n\tpos = url.find(s_id);\n\turl.erase(pos, s_id.length());\n\turl.insert(pos, stringify(&id, \"std::string\"));\n\n\t//TODO: free memory of errormsg, memorystruct\n\tMemoryStruct_s* p_chunk = new MemoryStruct_s();\n\tlong code;\n\tchar* errormsg = NULL;\n\tstring myhttpmethod(\"PUT\");\n\n\tif(strcmp(\"PUT\", \"PUT\") == 0){\n\t\tif(strcmp(\"\", mBody.c_str()) == 0){\n\t\t\tmBody.append(\"{}\");\n\t\t}\n\t}\n\n\tif(!isAsync){\n\t\tNetClient::easycurl(InstallationsManager::getBasePath(), url, myhttpmethod, queryParams,\n\t\t\tmBody, headerList, p_chunk, &code, errormsg);\n\t\tbool retval = updateInstallationProcessor(*p_chunk, code, errormsg, userData,reinterpret_cast<void(*)()>(handler));\n\n\t\tcurl_slist_free_all(headerList);\n\t\tif (p_chunk) {\n\t\t\tif(p_chunk->memory) {\n\t\t\t\tfree(p_chunk->memory);\n\t\t\t}\n\t\t\tdelete (p_chunk);\n\t\t}\n\t\tif (errormsg) {\n\t\t\tfree(errormsg);\n\t\t}\n\t\treturn retval;\n\t} else{\n\t\tGThread *thread = NULL;\n\t\tRequestInfo *requestInfo = NULL;\n\n\t\trequestInfo = new(nothrow) RequestInfo (InstallationsManager::getBasePath(), url, myhttpmethod, queryParams,\n\t\t\tmBody, headerList, p_chunk, &code, errormsg, userData, reinterpret_cast<void(*)()>(handler), updateInstallationProcessor);;\n\t\tif(requestInfo == NULL)\n\t\t\treturn false;\n\n\t\tthread = g_thread_new(NULL, __InstallationsManagerthreadFunc, static_cast<gpointer>(requestInfo));\n\t\treturn true;\n\t}\n}", "concepts": ["high-level functions", "asynchronous execution", "error handling", "memory management"], "parsing_result": [{"instruction": "Write a Python function `sum_async` that takes a list of numbers and returns the sum of those numbers, asynchronously."}, {"instruction": "Write a Python function `sleepyFunction` that accepts a function and a number of seconds to sleep. The function should be executed asynchronously without blocking the main thread."}, {"instruction": "Write a Python function `async_sleep` that takes an integer number of seconds and non-deterministically sleeps for that many seconds."}, {"instruction": "Write a Python function that takes a file name as input and returns a single string containing all the text of the file."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `async_sum` that sums a list of integers in parallel using asynchronous execution."}, {"instruction": "Write a Python function `copyFiles` that recursively copies files from one directory to another, logging the file path and the time it took to copy."}, {"instruction": "Write a Python function `factorial` that returns the factorial of a given number."}, {"instruction": "Write a Python function `sleep` that pauses the execution of a thread for a given number of seconds."}, {"instruction": "Write a Python function `EvenOdd` that takes a list of integers and outputs a list of `even` and `odd` strings based on whether the number is even or odd. The function should throw an error if the input list has more than 10 elements."}, {"instruction": "Create a Python function `square` that asynchronously squares a value and returns the result."}, {"instruction": "Implement a Python function `make_request` that takes a URL and an optional timeout parameter and returns the response text from the URL as a string."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python function `async_factorial` that computes the factorial of an integer *asynchronously*."}, {"instruction": "Write a Python function that takes a matrix and returns the sum of all elements in the matrix."}, {"instruction": "Write a Python function `sum_list` that takes a list of integers and returns the sum of all elements in the list."}, {"instruction": "Create a Python function `factorial` that returns the factorial of a non-negative integer."}, {"instruction": "Create a Python function `sumVector` that returns the sum of all values in a vector of integers."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number."}, {"instruction": "Implement a Python function `harmonicSum` that takes a non-negative integer `n` and returns the sum of the first `n` terms of the harmonic series, where the `n`th term is 1/n."}, {"instruction": "Create a Python function `maxOfTwo` that returns the larger of two integers."}, {"instruction": "Write a Python function `hello` that prints `\"Hello, World!\"` when called."}, {"instruction": "Create a Python function `countWords` that counts the number of words in a given string, using asynchronous execution. The Python standard library `asyncio` is used."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number using asynchronous execution."}, {"instruction": "Write a Python function `prime` that returns a list of all prime numbers less than or equal to a given integer."}, {"instruction": "Write a Python function that takes a non-negative integer and returns the square of the integer."}, {"instruction": "Write a Python function `countLetters` that returns the number of occurrences of each character in a given string."}, {"instruction": "Write a Python function `printNumbers` that prints numbers from 1 to 100."}, {"instruction": "Create a Python function `slow_factorial` that returns a factorial value of a number."}, {"instruction": "Write a Python function `print_name` that prints out the user's name."}, {"instruction": "Write a Python function `isPrime` that determines whether a given integer is prime using an asynchronous implementation."}, {"instruction": "Write a function `simulate_async` that wraps a long-running function `f` and runs `f` in an asynchronous way."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: post-order traversal, recursive reconstruction\n\n### Task", "fingerprint": null, "content": {"code": "BNPosi<T> InPost(T* inOrder, T* postOrder, int size, BNPosi<T> parent) {\n\tif (size < 1)\treturn nullptr;\n\tBNPosi<T> x = new BinNode<T>(*(postOrder + size - 1), parent);\n\tif (size == 1)\treturn x;\n\n\t/*\u5bf9\u4e24\u4e2a\u5e8f\u5217\u8fdb\u884c\u5207\u5206\uff1a\n\t\u5bfb\u627epostOrder[size-1]\u5728inOrder\u4e2d\u7684\u4f4d\u7f6einBound\n\tinOrder[0, inBound)\u4e3a\u5de6\u5b50\u5e8f\u5217\t\tinOrder[inBound+1, size)\u4e3a\u53f3\u5b50\u5e8f\u5217\n\tpostOrder[0, inBound)\u4e3a\u5de6\u5b50\u5e8f\u5217\t\tpostOrder[inBound, size-1)\u4e3a\u53f3\u5b50\u5e8f\u5217*/\n\tint inBound = 0;\n\tfor (T* t = inOrder; *t != postOrder + size - 1; t++, inBound++);\n\n\tx->lchild = InPost(inOrder, postOrder, inBound, x);\t\t//\u9012\u5f52\u91cd\u6784\u5de6\u5b50\u6811\n\tx->rchild = InPost(inOrder + inBound + 1, postOrder + inBound, size - inBound - 1, x);\t\t//\u9012\u5f52\u91cd\u6784\u53f3\u5b50\u6811\n\treturn x;\n}", "docstring": "//\u9012\u5f52\u91cd\u6784\u53f3\u5b50\u6811", "function_name": "PreIn"}, "id": 122, "seed": "BNPosi<T> InPost(T* inOrder, T* postOrder, int size, BNPosi<T> parent) {\n\tif (size < 1)\treturn nullptr;\n\tBNPosi<T> x = new BinNode<T>(*(postOrder + size - 1), parent);\n\tif (size == 1)\treturn x;\n\n\t/*\u5bf9\u4e24\u4e2a\u5e8f\u5217\u8fdb\u884c\u5207\u5206\uff1a\n\t\u5bfb\u627epostOrder[size-1]\u5728inOrder\u4e2d\u7684\u4f4d\u7f6einBound\n\tinOrder[0, inBound)\u4e3a\u5de6\u5b50\u5e8f\u5217\t\tinOrder[inBound+1, size)\u4e3a\u53f3\u5b50\u5e8f\u5217\n\tpostOrder[0, inBound)\u4e3a\u5de6\u5b50\u5e8f\u5217\t\tpostOrder[inBound, size-1)\u4e3a\u53f3\u5b50\u5e8f\u5217*/\n\tint inBound = 0;\n\tfor (T* t = inOrder; *t != postOrder + size - 1; t++, inBound++);\n\n\tx->lchild = InPost(inOrder, postOrder, inBound, x);\t\t//\u9012\u5f52\u91cd\u6784\u5de6\u5b50\u6811\n\tx->rchild = InPost(inOrder + inBound + 1, postOrder + inBound, size - inBound - 1, x);\t\t//\u9012\u5f52\u91cd\u6784\u53f3\u5b50\u6811\n\treturn x;\n}", "concepts": ["post-order traversal", "recursive reconstruction"], "parsing_result": [{"instruction": "Implement the post-order traversal of a binary tree, using recursion."}, {"instruction": "Create a program that takes an expression in postfix notation as input and returns the result as output."}, {"instruction": "Design and implement a recursive program to reconstruct a binary tree from a sequence of pre-order and in-order traversals."}, {"instruction": "Create a Python program that reverses a binary tree according to the post-order traversal sequence."}, {"instruction": "Write a Python program that takes in a binary tree and outputs the post-order traversal of that tree."}, {"instruction": "Create a program in Python that traverses a binary tree in post-order and recreates the tree."}, {"instruction": "Write a Python program that prints the post-order traversal (left subtree, right subtree, root) of a binary tree."}, {"instruction": "Write a Python program that prints a chemical graph, implemented as a tree."}, {"instruction": "Write a Python program that outputs the result of a post-order traversal of a binary tree in infix format."}, {"instruction": "Implement a Python program that traverses a binary tree in post-order and reconstructs the original tree from a given post-order traversal. The implementation must use a stack."}, {"instruction": "Write a program that implements an abstract syntax tree (AST) and traverses it in post-order."}, {"instruction": "Write a Python program that takes a binary tree in post-order traversal and reconstructs it."}, {"instruction": "Given a binary tree, write a Python function `postorderTraversal` that returns the values of the nodes in post-order traversal."}, {"instruction": "Reconstruct a binary tree from a post-order traversal."}, {"instruction": "Given a binary tree, create a Python program that outputs the tree in post-order."}, {"instruction": "Write a Python program that takes a binary tree as input and outputs its post-order traversal."}, {"instruction": "Write an implementation of a function `invertBinaryTree` in Python that takes a binary tree and reverses it in-place."}, {"instruction": "Write a Python program that takes a postfix expression in string form and returns the result of evaluating that expression."}, {"instruction": "Implement a Python function `invertTree` that takes a binary tree and returns a new binary tree that is the inverse of the original tree."}, {"instruction": "Write a Python function `reverseTree` that reverses a binary search tree."}, {"instruction": "Given a binary tree, write a function that returns a list of strings in a post-order traversal."}, {"instruction": "Write a Python function `generateTree` that takes a list of integers and returns a binary tree, where each node contains the next value in the list."}, {"instruction": "Write a Python program that constructs a binary tree from an in-order and post-order traversal."}, {"instruction": "Write a Python program that takes an object and outputs its string representation in the form of a post-order list of values."}, {"instruction": "Write a Python program that takes a binary tree and prints out its post-order traversal."}, {"instruction": "Implement a Python program that recreates a binary search tree using post-order traversal."}, {"instruction": "The following is a Python program that prints the first n Fibonacci numbers:\n```\ndef nthFib(n):\n    if n <= 1:\n        return n\n    else:\n        return nthFib(n-1) + nthFib(n-2)\n\ndef main():\n    for i in range(1, 15):\n        print(nthFib(i))\n\nmain()\n```\nRewrite this program so that it prints the first n Fibonacci numbers using a post-order traversal of a binary tree."}, {"instruction": "Given a linked list, print out all nodes in the list in reverse, one per line."}, {"instruction": "Write a Python function `toBinary` that takes an integer and returns the same integer in binary form."}, {"instruction": "Implement a Python program that takes a string, and prints all possible ways to form a valid parenthesized expression from the characters. The output should be sorted in lexicographic order."}, {"instruction": "Given a binary tree, implement a Python function `postOrder` to return a list of values in the tree in post-order traversal."}, {"instruction": "Write a Python function that takes a binary tree and returns a list of all of its nodes, in post-order."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: function overloading, cocos2d object, pointer conversion\n\n### Task", "fingerprint": null, "content": {"code": "static int _cocos2d_PhysicsBody_setVelocity(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsBody *self = nullptr;\n    cocos2d::Vec2 arg1;       /** velocity */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsBody\");\n    olua_check_cocos2d_Vec2(L, 2, &arg1);\n\n    // void setVelocity(const cocos2d::Vec2 &velocity)\n    self->setVelocity(arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "docstring": "// void setTag(int tag)", "function_name": "_cocos2d_PhysicsBody_setTag"}, "id": 128, "seed": "static int _cocos2d_PhysicsBody_setVelocity(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsBody *self = nullptr;\n    cocos2d::Vec2 arg1;       /** velocity */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsBody\");\n    olua_check_cocos2d_Vec2(L, 2, &arg1);\n\n    // void setVelocity(const cocos2d::Vec2 &velocity)\n    self->setVelocity(arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "concepts": ["function overloading", "cocos2d object", "pointer conversion"], "parsing_result": [{"instruction": "Write a Python function `addSprites` that adds two sprites to a cocos2d scene."}, {"instruction": "Write a Python function that accepts a string and returns the number of non-whitespace characters."}, {"instruction": "Create a Python function `get_coin_name` that takes an integer representing the value of a single coin (1 = penny, 5 = nickel, 10 = dime, 25 = quarter, 50 = half-dollar, 100 = dollar) and returns a string representing its name."}, {"instruction": "Write a Python function `movementVector` that takes a `cocos2d.Point` as an argument and returns a `cocos2d.Point` indicating the direction and distance from the origin."}, {"instruction": "Write a Python function `createSquare` that creates a `cc.Sprite` object with a square image, where the size of the square is equal to the size of the screen."}, {"instruction": "Write a Python function `get_pythag_tuple` that takes an integer `n` as input and returns a tuple of length 3 where each element is an integer representing the side lengths of a right triangle with hypotenuse `n`."}, {"instruction": "Create a Python function `create_paddle` that draws a paddle with a given length and color, and returns it as a cocos2d object."}, {"instruction": "Write a Python function `getSpriteLocation` that takes a cocos2d object and returns its position."}, {"instruction": "Implement a Python function `pt_to_rect` that takes a Point object and returns a Rect object."}, {"instruction": "Write a Python function `rotate` that takes two arguments: a cocos2d node and an angle. The function should rotate the node around the origin by the specified angle."}, {"instruction": "Implement a Python function `move_coins` that moves coins on a 2D grid."}, {"instruction": "Create a Python function `distance` that takes two `cocos2d.object.Object`s and returns the distance between them."}, {"instruction": "Write a Python function `drawSquare` which takes a cocos2d object and draws a square in it."}, {"instruction": "Extend the Python function `drawCircle` from Example 9.2 and implement it so that the circle's radius can be specified as a function argument."}, {"instruction": "Write a Python function `position` that returns the axis-aligned rectangle that contains a cocos2d object."}, {"instruction": "Write a Python function `spawnEnemy` that spawns an enemy, with the following properties:\n\n- a sprite with a red cross shape\n- has a random speed (between 100ms and 1000ms)\n- has a random y-position (between the top and bottom of the screen)\n- has a random x-position (the left side of the screen)"}, {"instruction": "Write a Python function `Point` that represents an (x, y) coordinate on the Cartesian plane."}, {"instruction": "Write a Python function called `createPaddle` that creates a `cocos2d.sprite.Sprite` object."}, {"instruction": "Write a Python function `get_distance_traveled` which creates a cocos2d object `SpaceShip` and then calculates its distance traveled based on its starting position, distance, and angle."}, {"instruction": "Create a Python function `convert_cocos_to_py` that converts a cocos2d object to a pygame object."}, {"instruction": "Write a Python function `moveSprite` that moves a Sprite object in a Game Scene based on the current velocity of the Sprite."}, {"instruction": "Write a Python function `draw_triangle` that takes a cocos2d object and draws a triangle."}, {"instruction": "Write a Python function `rotate` that takes a non-empty string and an integer, and returns the string with the characters shifted by the given number. For example, `rotate(\"hello\", 3)` should return `klmno`."}, {"instruction": "Write a Python function `addSprites` that takes two sprites as arguments, with the first being a background and the second being a foreground. The foreground sprite should be added to the background sprite, and the resulting sprite should be returned to the caller."}, {"instruction": "Write a Python function `CScale` that takes a sprite as a parameter and returns a copy of the sprite that is scaled by a factor provided as a second parameter."}, {"instruction": "Write a Python function `digits2points` that converts a string of digits (e.g., '123') to a list of cocos2d points."}, {"instruction": "Extend the Cocos2D module to include a `toBinary` function for integers."}, {"instruction": "Implement a Python function `add` that adds two numbers. If the numbers are of different data types, the function will attempt to add them."}, {"instruction": "Write a Python function `count_vowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Implement a Python function `distance` that returns the euclidean distance between two objects of type `cocos2d.Sprite`."}, {"instruction": "Write a Python function `distance` that calculates the distance between two points on the Earth's surface in kilometers."}, {"instruction": "Write a Python function `drawSquare` that creates a square object using cocos2d, using the given function `drawPoint`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bit operations, modular arithmetic, branching\n\n### Task", "fingerprint": null, "content": {"code": "call777a()\n{\n        push(af);\n        push(bc);\n        push(de);\n        get16(bc,0x73df);\n        e=a;\n        get8(l,0x73e1); //get16(hl,0x73e1);\n        h=00;\n        c=h;\n        a=b;\nl7789:  cp(e);\n        if(!fc) goto l77b1;\n        if(!getByte(a)) goto l77d9;\n        push(de);\n        ex_de_hl();\n        l=a;\n        h=00;\n        a=b;\nl7797:  or(a);\n        if(fz) goto l77a3;\n        rl(l);\n        rl(h);\n        rl(c);\n        a--;\n        goto l7797;\nl77a3:  a=l;\n        or(e);\n        e=a;\n        a=h;\n        or(d);\n        d=a;\n        ex_de_hl();\n        pop(de);\n        a=0x08;\n        a+=b;\n        b=a;\n        goto l7789;\nl77b1:  push(hl);\n        a=e;\nl77b3:  or(a);\n        rr(c);\n        rr(h);\n        rr(l);\n        b--;\n        a--; fz=(a==0)?1:0;\n        if(!fz) goto l77b3;\n        a=b;\n        put8(0x73e0,a);\n        a=l;\n        put8(0x73e1,a);\n        a=0x0f;\n        pop(hl);\n        and(h);\n        h=a;\n        a=e;\n        cp(07);\n        if(!fz) goto l77d4;\n        h=00;\n        l=l&0x7f; //res     7,l\nl77d4:  pop(de);\n        pop(bc);\n        pop(af);\n        and(a);\n        return 0;\n\nl77d9:  pop(de);\n        pop(bc);\n        pop(af);\n        fc=1;//scf\n        return 0;\n}", "docstring": "//goto l785a;", "function_name": "call76d2"}, "id": 132, "seed": "call777a()\n{\n        push(af);\n        push(bc);\n        push(de);\n        get16(bc,0x73df);\n        e=a;\n        get8(l,0x73e1); //get16(hl,0x73e1);\n        h=00;\n        c=h;\n        a=b;\nl7789:  cp(e);\n        if(!fc) goto l77b1;\n        if(!getByte(a)) goto l77d9;\n        push(de);\n        ex_de_hl();\n        l=a;\n        h=00;\n        a=b;\nl7797:  or(a);\n        if(fz) goto l77a3;\n        rl(l);\n        rl(h);\n        rl(c);\n        a--;\n        goto l7797;\nl77a3:  a=l;\n        or(e);\n        e=a;\n        a=h;\n        or(d);\n        d=a;\n        ex_de_hl();\n        pop(de);\n        a=0x08;\n        a+=b;\n        b=a;\n        goto l7789;\nl77b1:  push(hl);\n        a=e;\nl77b3:  or(a);\n        rr(c);\n        rr(h);\n        rr(l);\n        b--;\n        a--; fz=(a==0)?1:0;\n        if(!fz) goto l77b3;\n        a=b;\n        put8(0x73e0,a);\n        a=l;\n        put8(0x73e1,a);\n        a=0x0f;\n        pop(hl);\n        and(h);\n        h=a;\n        a=e;\n        cp(07);\n        if(!fz) goto l77d4;\n        h=00;\n        l=l&0x7f; //res     7,l\nl77d4:  pop(de);\n        pop(bc);\n        pop(af);\n        and(a);\n        return 0;\n\nl77d9:  pop(de);\n        pop(bc);\n        pop(af);\n        fc=1;//scf\n        return 0;\n}", "concepts": ["bit operations", "modular arithmetic", "branching"], "parsing_result": [{"instruction": "Write a Python program that takes a list of 10 or more numbers, and then prints the following:\n\n    - the minimum number\n    - the maximum number\n    - the average of the numbers\n    - how many times each number appears in the list"}, {"instruction": "Write a Python function `sumOfDigits` that calculates the sum of the digits in a non-negative integer."}, {"instruction": "Write a Python program that simulates the operation of a calculator. When a user inputs a mathematical expression, the program should return the result of the calculation."}, {"instruction": "Write a Python program `collatz` that takes a positive integer, `n`, and repeatedly applies the following function:\n\n```python\nif n is even: n = n / 2\nelse: n = 3n + 1\n```\n\nThe function terminates when `n` is 1."}, {"instruction": "Create a Python program to check whether a number is a prime number."}, {"instruction": "Use Python to write a program that takes an integer N as input and outputs the sum of the first N natural numbers."}, {"instruction": "Write a Python program that takes a 10-digit US phone number and converts it to an international format."}, {"instruction": "Write a Python program that calculates the [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) between two Cartesian points."}, {"instruction": "Write a Python code that implements the [FizzBuzz](https://en.wikipedia.org/wiki/Fizz_buzz) game."}, {"instruction": "Write a Python program to calculate the total amount of money in a bank account after the first, second, and third month."}, {"instruction": "Write a Python program that prints the following pattern.\n\n```\n        *\n       * *\n      * * *\n     * * * *\n    * * * * *\n   * * * * * *\n  * * * * * * *\n * * * * * * * *\n* * * * * * * * *\n```"}, {"instruction": "Create a Python program that converts an integer number into a Roman numeral."}, {"instruction": "Write a Python program that computes the [Bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of a given integer and a given bit."}, {"instruction": "Create a Python program that takes a non-negative integer and computes the sum of the digits of the integer."}, {"instruction": "Write a Python program that finds the factors of a given integer."}, {"instruction": "Write a Python program that takes a decimal number and converts it to binary."}, {"instruction": "Write a Python program that calculates the Greatest Common Divisor (GCD) of two positive integers."}, {"instruction": "Write a Python function `isPrime` to determine whether a given integer is a prime number."}, {"instruction": "Write a Python program to convert a decimal number to binary."}, {"instruction": "Write a Python program that displays the sum of the digits of a given non-negative integer."}, {"instruction": "Write a program that takes a 64-bit unsigned integer and returns its base 2 representation."}, {"instruction": "Write a Python program that returns the number of odd integers in a list."}, {"instruction": "Write a Python program that reverse the bits of an integer."}, {"instruction": "Write a Python program that calculates the square root of a non-negative number."}, {"instruction": "Write a program that prompts a user to enter a positive integer and then prints an integer that is the sum of the squares of all the digits in the number."}, {"instruction": "Write a Python program that uses a `for` loop to compute the sum of the first 100 numbers."}, {"instruction": "Write a Python program that will convert a decimal number to binary."}, {"instruction": "Write a Python function `isPower` that returns true if a number is a power of two."}, {"instruction": "Write a Python program that implements the Sieve of Eratosthenes to find prime numbers up to a given number."}, {"instruction": "Write a Python program that simulates a rock-paper-scissors game."}, {"instruction": "Write a program that draws a staircase of '#' characters, where the height is given as an input parameter, with the following rules:\n\n- The first level contains one '#' character.\n- The second level contains two '#' characters.\n- Each subsequent level contains one more '#' character than the previous level."}, {"instruction": "Create a Python program that reads in an integer and returns the number of bits that are set to 1."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: inline function, inline expansion, C++ implementation\n\n### Task", "fingerprint": null, "content": {"code": "inline double torque_calc(double r,   //wheel radius\n                          double L,   //wheel load\n                          double wn,  //wheel numeric\n                          double sr){ //slip ratio\n  \n  return r*L*0.75*(1-exp(-0.3*wn*sr));\n}", "docstring": "//wheel numeric", "function_name": "towed_force_calc"}, "id": 136, "seed": "inline double torque_calc(double r,   //wheel radius\n                          double L,   //wheel load\n                          double wn,  //wheel numeric\n                          double sr){ //slip ratio\n  \n  return r*L*0.75*(1-exp(-0.3*wn*sr));\n}", "concepts": ["inline function", "inline expansion", "C++ implementation"], "parsing_result": [{"instruction": "Create a Python function `fizzBuzz` that prints the numbers from 1 to 100, except for multiples of 3, print \"Fizz\" instead of the number, and for multiples of 5, print \"Buzz\". For numbers that are multiples of both 3 and 5, print \"FizzBuzz\"."}, {"instruction": "Write a Python function `pascal` that returns the nth row of Pascal's triangle."}, {"instruction": "Create a Python function `gcd` to calculate the greatest common divisor of two numbers."}, {"instruction": "Create a Python function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Write a Python function `binary_to_decimal` that takes a string representing a binary number and converts it to a decimal number."}, {"instruction": "Write a Python function that takes a word and a string and returns the number of times the word appears in the string."}, {"instruction": "Create a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Create a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `is_prime` that takes an integer as input, and returns whether the number is prime or not."}, {"instruction": "Create a Python function `binarySearch` that implements the binary search algorithm in C++."}, {"instruction": "Create a Python function `celsiusToFahrenheit` that converts Celsius to Fahrenheit."}, {"instruction": "Write a Python function `celsiusToFahrenheit` that converts Celsius to Fahrenheit."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number."}, {"instruction": "Write a Python function CelsiusToFahrenheit that converts Celsius to Fahrenheit."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `celsiusToFahrenheit` that converts Celsius to Fahrenheit."}, {"instruction": "Implement a function `countVowels` in Python that returns the number of vowels (a, e, i, o, u), ignoring case, in a given string."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Create a Python function `celciusToFahrenheit` that converts Celsius to Fahrenheit."}, {"instruction": "Create a Python function `average` that calculates the average of integers in a list."}, {"instruction": "Create a Python function `printint` that calls the `print` builtin function, stringifying its arguments before calling `print`."}, {"instruction": "Write a Python function `count_words` that returns the number of words in a string."}, {"instruction": "Write a Python function `isPrime` that determines if a given integer is a prime number."}, {"instruction": "Write a Python function `max` that returns the maximum of two numbers."}, {"instruction": "Create a Python function `findMin` that finds the minimum element in a list."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Create a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function that takes an integer and returns its Fibonacci number."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: BFS, queue, path finding\n\n### Task", "fingerprint": null, "content": {"code": "int main() {\n    scanf(\"%d%d\", &N, &K);\n    queue<point> q;//\u521b\u5efa\u961f\u4f0d\n    q.push(point(N, 0));//\u519c\u592b\u521d\u59cb\u4f4d\u7f6e\u5165\u961f\n    int end_step = -1;//\u521d\u59cb\u5316\u6700\u7ec8\u6b65\u6570\n    while(!q.empty()) {\n        point this_pos = q.front();//\u8bfb\u53d6\u961f\u5934\n        q.pop();//\u5f39\u51fa\u961f\u5934\n        int x=this_pos.pos, step=this_pos.step;\n        if(x == K) { //\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7b49\u4e8e\u725b\u7684\u4f4d\u7f6e\n            end_step = step;\n            break;\n        }\n        if(x-1>=0 && x-1<=100000 && vis[x-1]==0) { //\u5411\u540e\u4e00\u6b65\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x-1, step+1));\n            vis[x-1] = 1;\n        }\n        if(x+1>=0 && x+1<=100000 && vis[x+1]==0) { //\u5411\u524d\u4e00\u6b65\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x+1, step+1));\n            vis[x+1] = 1;\n        }\n        if(x*2<=100000 && x*2>=0 && vis[x*2]==0) { //2\u500d\u4f4d\u7f6e\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x*2, step+1));\n            vis[x*2] = 1;\n        }\n    }\n    printf(\"%d\\n\", end_step);\n    return 0;\n}", "docstring": "//\u6784\u9020\u51fd\u6570....", "function_name": "point"}, "id": 145, "seed": "int main() {\n    scanf(\"%d%d\", &N, &K);\n    queue<point> q;//\u521b\u5efa\u961f\u4f0d\n    q.push(point(N, 0));//\u519c\u592b\u521d\u59cb\u4f4d\u7f6e\u5165\u961f\n    int end_step = -1;//\u521d\u59cb\u5316\u6700\u7ec8\u6b65\u6570\n    while(!q.empty()) {\n        point this_pos = q.front();//\u8bfb\u53d6\u961f\u5934\n        q.pop();//\u5f39\u51fa\u961f\u5934\n        int x=this_pos.pos, step=this_pos.step;\n        if(x == K) { //\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7b49\u4e8e\u725b\u7684\u4f4d\u7f6e\n            end_step = step;\n            break;\n        }\n        if(x-1>=0 && x-1<=100000 && vis[x-1]==0) { //\u5411\u540e\u4e00\u6b65\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x-1, step+1));\n            vis[x-1] = 1;\n        }\n        if(x+1>=0 && x+1<=100000 && vis[x+1]==0) { //\u5411\u524d\u4e00\u6b65\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x+1, step+1));\n            vis[x+1] = 1;\n        }\n        if(x*2<=100000 && x*2>=0 && vis[x*2]==0) { //2\u500d\u4f4d\u7f6e\u7684\u70b9\u5728\u8303\u56f4\u5185\u4e14\u6ca1\u6709\u8d70\u8fc7\n            q.push(point(x*2, step+1));\n            vis[x*2] = 1;\n        }\n    }\n    printf(\"%d\\n\", end_step);\n    return 0;\n}", "concepts": ["BFS", "queue", "path finding"], "parsing_result": [{"instruction": "Write a Python program that solves the following maze:\n\n```\nS-A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\n   |   |             |\n   |   |             |\nL-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\n   |   |             |\n   |   |             |\nL-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\n   |   |             |\n   |   |             |\nL-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\n```"}, {"instruction": "Write a Python function `findPath` that find the path from the start vertex to the goal vertex in a graph."}, {"instruction": "Implement a Python function `findPath` that returns a list of nodes along a path from root to leaf in a binary tree."}, {"instruction": "Write a Python function `bfs` that implements a Breadth-First Search algorithm."}, {"instruction": "Write a Python function `breadthFirstSearch` that implements a breadth-first search (BFS) algorithm for traversing a graph."}, {"instruction": "Write a Python function `shortestPath` that returns the shortest path from a starting node to a destination node in a 2D grid."}, {"instruction": "Create a Python function `findPath` that returns a path from one cell in a grid to another through a valid path on the grid."}, {"instruction": "Create a function `bfs` that takes in an adjacency list and a starting vertex and returns a list of the vertices visited by a Breadth-First Search (BFS) from that node."}, {"instruction": "Implement the Breadth-First Search algorithm as a Python function."}, {"instruction": "Create a Python function `find_path` that returns the shortest path from a starting index to an ending index in a graph."}, {"instruction": "Create a Python function `bfs` that returns a list of all nodes in a BFS tree."}, {"instruction": "Create a Python function `findPath` that returns a list of nodes in the shortest path between a starting node and an ending node."}, {"instruction": "Create a Python function `bfs` that finds the shortest path between two nodes in a graph."}, {"instruction": "Create a Python function `findShortestPath` that returns the shortest path between two nodes of a graph, allowing for edges of varying weights."}, {"instruction": "Create a Python function `bfs` that implements a breadth-first search algorithm for a graph."}, {"instruction": "Create a Python function `bfs` that takes a graph `G` and a start node `s` and finds the shortest path to the end node `e` from `s`, using BFS."}, {"instruction": "Implement a function `shortestRoute` that determines the shortest route between two points on a 2D grid."}, {"instruction": "Create a Python function `BFS` that returns a path between two nodes in a graph."}, {"instruction": "Implement a Python function `BFS` that takes a maze and a starting position as parameters, and returns a list of positions that represent a path from the start to the goal."}, {"instruction": "Write a Python function/class that determines whether a graph is connected."}, {"instruction": "Implement a Python function `BFS` that takes a graph object and a starting node as input, and returns the shortest path from the starting node to every other node."}, {"instruction": "Implement a Breadth-First Search algorithm in Python that finds the shortest path between two nodes in a grid based on whether coordinates are accessible."}, {"instruction": "Implement the Breadth-First Search algorithm using a queue as a data structure."}, {"instruction": "Write a Python function `findPath` that takes two-dimensional coordinates as input and returns the path of a randomly generated maze."}, {"instruction": "Implement the Breadth-First-Search algorithm to determine the shortest path from a source vertex to a destination vertex in an unweighted graph."}, {"instruction": "Create a Python function `breadthFirstSearch` that takes a graph and a starting node as inputs and returns a shortest path from the starting node to every other node."}, {"instruction": "Create a Python function `search` that uses BFS to search a graph for a specified value."}, {"instruction": "Create a Python function `BFS` that returns the Breadth-First Search path from source to target nodes in a graph."}, {"instruction": "Write a function `shortestPath` that returns the shortest path from the starting node to the destination node in a rectangular grid."}, {"instruction": "Implement the Breadth-First Search algorithm in Python."}, {"instruction": "Write a Python function `findPaths` that returns all paths from the start to the end of a maze."}, {"instruction": "Create a Python function `shortestPath` that finds the shortest path between two nodes in a graph."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: C++ method, C++/CLI wrapper, COM interop, STL containers, error handling\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR bool IVector_1_IndexOf_m672898A842984D0C417D15E67F519A98DF24BF4E (RuntimeObject* __this, RuntimeObject* ___value0, uint32_t* ___index1, const RuntimeMethod* method)\n{\n\tIVector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464* ____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464 = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464::IID, reinterpret_cast<void**>(&____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Marshaling of parameter U27___value0U27 to native representation\n\tIVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B* ____value0_marshaled = NULL;\n\tif (___value0 != NULL)\n\t{\n\t\tif (il2cpp_codegen_is_import_or_windows_runtime(___value0))\n\t\t{\n\t\t\til2cpp_hresult_t hr = ((Il2CppComObject *)___value0)->identity->QueryInterface(IVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B::IID, reinterpret_cast<void**>(&____value0_marshaled));\n\t\t\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t____value0_marshaled = il2cpp_codegen_com_get_or_create_ccw<IVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B>(___value0);\n\t\t}\n\t}\n\telse\n\t{\n\t\t____value0_marshaled = NULL;\n\t}\n\n\t// Native function invocation\n\tbool returnValue = 0;\n\thr = ____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464->IVector_1_IndexOf_m672898A842984D0C417D15E67F519A98DF24BF4E(____value0_marshaled, ___index1, &returnValue);\n\t____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Marshaling cleanup of parameter U27___value0U27 native representation\n\tif (____value0_marshaled != NULL)\n\t{\n\t\t(____value0_marshaled)->Release();\n\t\t____value0_marshaled = NULL;\n\t}\n\n\treturn returnValue;\n}", "docstring": "// Native function invocation", "function_name": "IVector_1_get_Size_m13AF259177E8200E07E482976E26D8E59C27BB64"}, "id": 146, "seed": "IL2CPP_METHOD_ATTR bool IVector_1_IndexOf_m672898A842984D0C417D15E67F519A98DF24BF4E (RuntimeObject* __this, RuntimeObject* ___value0, uint32_t* ___index1, const RuntimeMethod* method)\n{\n\tIVector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464* ____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464 = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464::IID, reinterpret_cast<void**>(&____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Marshaling of parameter U27___value0U27 to native representation\n\tIVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B* ____value0_marshaled = NULL;\n\tif (___value0 != NULL)\n\t{\n\t\tif (il2cpp_codegen_is_import_or_windows_runtime(___value0))\n\t\t{\n\t\t\til2cpp_hresult_t hr = ((Il2CppComObject *)___value0)->identity->QueryInterface(IVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B::IID, reinterpret_cast<void**>(&____value0_marshaled));\n\t\t\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t____value0_marshaled = il2cpp_codegen_com_get_or_create_ccw<IVector_1_t23729E0EC4680A8E87F007D46D312A7C15F7317B>(___value0);\n\t\t}\n\t}\n\telse\n\t{\n\t\t____value0_marshaled = NULL;\n\t}\n\n\t// Native function invocation\n\tbool returnValue = 0;\n\thr = ____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464->IVector_1_IndexOf_m672898A842984D0C417D15E67F519A98DF24BF4E(____value0_marshaled, ___index1, &returnValue);\n\t____ivector_1_t89733F40378DF9CE0D71A3AE18DE1A01B9A86464->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Marshaling cleanup of parameter U27___value0U27 native representation\n\tif (____value0_marshaled != NULL)\n\t{\n\t\t(____value0_marshaled)->Release();\n\t\t____value0_marshaled = NULL;\n\t}\n\n\treturn returnValue;\n}", "concepts": ["C++ method", "C++/CLI wrapper", "COM interop", "STL containers", "error handling"], "parsing_result": [{"instruction": "Create a Python program that converts a C++ program to Python code."}, {"instruction": "Write a Python program that uses the Tkinter GUI library to create a simple GUI."}, {"instruction": "Create a Python wrapper class for the C++ function `swap` from the previous task."}, {"instruction": "Implement a C++/CLI method `IsPrime` that checks if a given integer is prime."}, {"instruction": "Write a Python program to count the number of vowels in a string."}, {"instruction": "Rewrite the C++ method `removeDuplicates` from Example 7 as a C++/CLI method with COM interop."}, {"instruction": "Write a Python program to make a C++ class `MyString` that has a method `countVowels`."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python program that takes a C++ function and wraps it with a C++/CLI wrapper."}, {"instruction": "Create a C++/CLI program that loads a C++ DLL, and calls a C++ function defined in the DLL."}, {"instruction": "Write a Python script that prints the contents of an XML file."}, {"instruction": "Write a Python program that generates a random number between 1 and 100, and then prompts the user to guess the number. If the user guesses the correct number, the program congratulates them. If the user's guess is too high, the program prints \"Too high!\" and if the user's guess is too low, the program prints \"Too low!\". The program continues to prompt the user to guess the number until the user guesses the correct number, at which point the program prints \"You got it!\" and terminates."}, {"instruction": "Write a Python program that takes two vectors of integers, and returns their sum as another vector, where each element is the sum of the corresponding elements in the other vector."}, {"instruction": "Write a program in C++/CLI that counts the number of vowels in a string and displays them."}, {"instruction": "Write a Python program that:\n- imports a C++ program\n- defines a class that wraps a C++ class\n- tests the class using the C++ program\n- demonstrates error handling"}, {"instruction": "Create a C++/CLI interface to the C++ function `isPrime`, which returns whether a value is prime."}, {"instruction": "Create a Python program that prints the first 100 [Fibonacci numbers](https://en.wikipedia.org/wiki/Fibonacci_number)."}, {"instruction": "Write a C++/CLI program to search a string for a word and replace it with another, using C++/CLI methods."}, {"instruction": "Create a program that takes a string and returns its reverse, using a C++/CLI wrapper and error handling."}, {"instruction": "Create a .NET program that takes a string and returns its reverse."}, {"instruction": "Write a C# wrapper for the C++ `Vector` class.\n/c++/vector.cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Vector {\n    vector<int> v;\n    public:\n    Vector (vector<int> x) {\n        v = x;\n    }\n\n    void push_back (int x) {\n        v.push_back(x);\n    }\n\n    int size () {\n        return v.size();\n    }\n\n    int at (int index) {\n        return v.at(index);\n    }\n\n    void clear () {\n        v.clear();\n    }\n\n    bool empty () {\n        return v.empty();\n    }\n};\n/python/vector.py\nfrom typing import List\n\nclass Vector:\n    def __init__(self, xs: List[int]) -> None:\n        self.xs = xs\n\n    def push_back(self, x: int) -> None:\n        self.xs.append(x)\n\n    def size(self) -> int:\n        return len(self.xs)\n\n    def at(self, index: int) -> int:\n        return self.xs[index]\n\n    def clear(self) -> None:\n        self.xs = []\n\n    def empty(self) -> bool:\n        return len(self.xs) == 0\n/c++/CMakeLists.txt\ncmake_minimum_required(VERSION 3.20)\nproject(c__)\n\nset(CMAKE_CXX_STANDARD 20)\n\ninclude_directories(.)\n\nadd_executable(c__\n        vector.cpp)\n/python/vector.pyi\n\"\"\"\nThis is a type stub file for vector.pyi\n\"\"\"\nfrom typing import List\n\nclass Vector:\n    def __init__(self, xs: List[int]) -> None: ...\n    def push_back(self, x: int) -> None: ...\n    def size(self) -> int: ...\n    def at(self, index: int) -> int: ...\n    def clear(self) -> None: ...\n    def empty(self) -> bool: ...\n/c#/Vector.cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace c__\n{\n    public class Vector\n    {\n        private List<int> xs;\n\n        public Vector(List<int> xs)\n        {\n            this.xs = xs;\n        }\n\n        public void push_back(int x)\n        {\n            xs.Add(x);\n        }\n\n        public int size()\n        {\n            return xs.Count;\n        }\n\n        public int at(int index)\n        {\n            return xs[index];\n        }\n\n        public void clear()\n        {\n            xs.Clear();\n        }\n\n        public bool empty()\n        {\n            return xs.Count == 0;\n        }\n    }\n}\n/python/test.py\nfrom vector import Vector\n\nv = Vector([1])\nv.push_back(2)\nassert v.size() == 2\nassert v.at(1) == 2\nprint(\"Success!\")"}, {"instruction": "Create a C++ program that prints out all of the combinations of elements in a provided vector."}, {"instruction": "Write a Python program that reads the contents of an input text file, splits it into lines, counts the number of lines, words, and characters, and prints the total number of lines, words, and characters."}, {"instruction": "Write a Python function `print_vector` that takes a vector of (x,y) coordinates and prints a vector of the same coordinates in the following format:\n```\nVec3(0, 0, 0), Vec3(1, 2, 3), ...\n```"}, {"instruction": "Create a Python program that uses .NET Framework classes to perform the same functions as the C++ example in Example 7."}, {"instruction": "Write a C++/CLI function `ReverseString` that reverses the contents of a string."}, {"instruction": "Write a Python program that counts the number of vowels in a text file."}, {"instruction": "Write a Python program in C++/CLI that wraps a C++ function that takes a string and returns the number of vowels."}, {"instruction": "Write a C++/CLI wrapper for the C++ program above."}, {"instruction": "Create a Python program that uses C++/CLI to call a C++ function."}, {"instruction": "Write a Python program that computes the area of a triangle with user input for the lengths of the sides using the formula A = (p(p-a)(p-b)(p-c))^0.5"}, {"instruction": "Create a Python program that calculates the sum of two integers using C++/CLI."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: handling exceptions, exception handling, error handling\n\n### Task", "fingerprint": null, "content": {"code": "int main()\r\n{\r\n\r\n    //add code here\r\n    int ans;\r\n\r\n    Menu();\r\n\r\n    cin >> ans;\r\n\r\n    choiceMenu(ans);\r\n\r\n    tryAgain();\r\n    cout<<endl;\r\n\r\n    return 0; // Remove this\r\n}", "docstring": "// Remove\r", "function_name": "pauseScreen"}, "id": 148, "seed": "int main()\r\n{\r\n\r\n    //add code here\r\n    int ans;\r\n\r\n    Menu();\r\n\r\n    cin >> ans;\r\n\r\n    choiceMenu(ans);\r\n\r\n    tryAgain();\r\n    cout<<endl;\r\n\r\n    return 0; // Remove this\r\n}", "concepts": ["handling exceptions", "exception handling", "error handling"], "parsing_result": [{"instruction": "Write a Python function `countNegatives` that takes a list of numbers and returns the number of negative numbers."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in an integer."}, {"instruction": "Write a Python function `divide` that divides a non-negative integer by another non-negative integer, returning the quotient and remainder using exception handling."}, {"instruction": "Write a Python function `convert` that converts a string into an integer."}, {"instruction": "Write a Python function that takes an integer, and returns a string that is the decimal representation of that integer. If the number is less than zero, raise an exception."}, {"instruction": "Write a Python function `getint` that repeatedly prompts the user to enter an integer value, and returns the integer value when a valid user input is provided."}, {"instruction": "Write a function `divide` that raises a ZeroDivisionError exception if an attempt is made to divide by zero."}, {"instruction": "Write a Python function `inputInt` that reads and returns an integer from the user. If the user does not enter an integer, the function should raise a `TypeError` exception."}, {"instruction": "Write a function `get_length` that returns the length of a string."}, {"instruction": "Write a Python function `div_safe` that takes two numbers and attempts to divide them. If either number is non-positive, return `None`."}, {"instruction": "Write a Python function that takes a number and returns its square root using the Babylonian method."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in an integer."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in a given non-negative integer."}, {"instruction": "Write a Python function `div` that takes two integers and returns their quotient, and raises an exception if the second argument is zero."}, {"instruction": "Write a Python function `print_digits_in_range` that takes two arguments: a `start` and an `end` index, and then prints the digits in the range `[start, end]`. The `start` and `end` arguments are both integers."}, {"instruction": "Write a Python function `get_int` that takes no input and returns an integer that the user provides. If the user does not provide an integer, then an exception is raised."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in an integer."}, {"instruction": "Implement a Python function `to_binary` that converts an integer to a binary string."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string using an exception handler."}, {"instruction": "Write a Python function `multiply` that takes two integers and returns their product. If either argument is not an integer, the function should raise a `TypeError` exception."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in an integer."}, {"instruction": "Write a Python function that raises a ValueError if the input is not an integer."}, {"instruction": "Write a Python function `is_even` that returns `True` if a given integer is even, and `False` otherwise."}, {"instruction": "Write a Python function `divide` that takes two integers and returns their quotient and remainder. If the divisor is zero, raise an exception.\n/c/README.md\n# C"}, {"instruction": "Write a Python function `isPrime` to check if an integer is prime."}, {"instruction": "Implement a Python function `toBinary` that takes a non-negative integer argument and returns the binary string representation of the number."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in an integer."}, {"instruction": "Write a Python function `handleExceptions` that raises a variety of exceptions to showcase different types of exception handling."}, {"instruction": "Write a Python function `isPrime(n)` to determine whether an integer `n` is a prime number."}, {"instruction": "Write a Python function `divide` that returns the quotient of two integers with the remainder. If the quotient is not an integer, throw an exception."}, {"instruction": "Write a Python function `reverse_string` that reverses a string."}, {"instruction": "Write a Python function `readNumbers` that prompts the user for a sequence of numbers and returns a list containing the numbers. Handle exceptions if the user enters non-numeric input."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: SWIG, callbacks, native object handling\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Camera_height_get(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    cc::scene::Camera *arg1 = (cc::scene::Camera *) NULL ;\n    uint32_t result;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::Camera>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    result = cc_scene_Camera_height_get(arg1);\n    // %typemap(out) SWIGTYPE\n    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"Camera_height_get, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());\n    \n    \n    \n    return true;\n}", "docstring": "// %typemap(out) SWIGTYPE", "function_name": "js_cc_scene_Camera_width_get"}, "id": 154, "seed": "static bool js_cc_scene_Camera_height_get(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    cc::scene::Camera *arg1 = (cc::scene::Camera *) NULL ;\n    uint32_t result;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::Camera>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    result = cc_scene_Camera_height_get(arg1);\n    // %typemap(out) SWIGTYPE\n    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"Camera_height_get, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval());\n    \n    \n    \n    return true;\n}", "concepts": ["SWIG", "callbacks", "native object handling"], "parsing_result": [{"instruction": "Create a Python class `MyClass` that has a method `multiply` that takes two args."}, {"instruction": "Create a Python class `River` with a single property `name`. The class should also have two methods, `__init__` and `get_name`. The `__init__` method should take one argument, `name`, and assign it to the `name` property. The `get_name` method should return the value of the `name` property."}, {"instruction": "Create a Python class `Complex` that supports complex number arithmetic."}, {"instruction": "Implement a Python class `NativeDict` that behaves like a dictionary; i.e., it maps keys to values. Create a Cython wrapper for this class using SWIG."}, {"instruction": "Implement a Python function, `fib`, that returns the Fibonacci sequence as a list."}, {"instruction": "Create a Python class `CUBoulder` that provides functions for interacting with the CUBoulder API."}, {"instruction": "Write a Python class `Person` that contains a name and address."}, {"instruction": "Implement a C++ class `RingBuffer` that implements a fixed-size buffer that can be dynamically filled with values. It is implemented as a class with a SWIG interface and native object handling."}, {"instruction": "Implement a Python module `foo` that contains a class `Foo`."}, {"instruction": "Implement a Python class `LogAnalyzer` that accepts a file name as a constructor argument and has the following methods:\n\n- `setMaxLogLevel(level)`: accepts a string argument for the maximum severity level\n- `getWarnings()`: returns a list of warnings\n- `getError()`: returns a list of errors\n- `getMessages()`: returns a list of messages"}, {"instruction": "Create a Python class `Category` that represents a hierarchical classification of objects."}, {"instruction": "Implement a Python class `LList` that is a doubly-linked list."}, {"instruction": "Implement a Python class `Polynomial` that implements the following operations:\n\n- `Polynomial` constructor\n- add method\n- multiply method\n- evaluate method"}, {"instruction": "Create a Python class `Averager` that maintains an internal average of the values passed to its `add` method."}, {"instruction": "Write a Python class `MyClass` that contains a method `multiply` that takes in two numbers and returns the result of their multiplication.\n\nImplement a Python class `MyClass` that contains a method `multiply` that takes in two numbers and returns the result of their multiplication."}, {"instruction": "Create a Python class `Warmup` with a function `pow` that calculates base raised to an integer exponent."}, {"instruction": "Implement a Python class `Person` that responds to a `speak` method. `Person` should also have a `name` property."}, {"instruction": "Implement a Python class `Application` that implements the [Push API](https://github.com/google/push-data/blob/master/API.md)"}, {"instruction": "Create a Python class `MyStr` that implements a string that can be iterated over by index and string slicing."}, {"instruction": "Implement a Python class `Obj` that allows for native object creation."}, {"instruction": "Implement a SWIG wrapper for the C++ class `MyClass` defined in the textbook chapter on classes."}, {"instruction": "Write a Python class `MyLinkedList` that implements a singly-linked list using the `Node` class and its methods."}, {"instruction": "Create a Python class `Library` that has a method `findAuthor` that takes a title as an argument and returns the author who wrote that book.\n\n### Notes\nThe `findAuthor` method will be the central entry point for a client application. It will be designed so that the application can work with a variety of different clients and implementations. By this, we mean that the client application will be responsible for creating the `Library` object, choosing the appropriate implementation to pass to the `Library` constructor, and calling the `findAuthor` method on the `Library` object."}, {"instruction": "Write a Python class `Foo` that exposes the following methods:\n\n- `set_value`: accepts an integer, and stores its value in a private int variable\n- `get_value`: returns the value stored in the private int variable\n- `multiply`: accepts an integer, and sets the value of the private int variable to the product of itself and the argument\n- `divide`: accepts an integer, and sets the value of the private int variable to the quotient of itself and the argument"}, {"instruction": "In order to implement a function in Python, it can be registered as a callback function for a C++ function. In this task, SWIG is used to implement this function."}, {"instruction": "Create a Python class implementation `MyClass` that uses SWIG to generate a native Python object that exposes the class methods as Python functions."}, {"instruction": "Create a Python class `NativeList` that wraps a C++ `std::vector`."}, {"instruction": "Implement a Python wrapper around a class that implements a C++ function, and use this to calculate the Fibonacci numbers."}, {"instruction": "Implement a `Counter` class in Python that implements a native counter object. The object should support the following operations:\n- `Increment` increment the counter by 1\n- `Decrement` decrement the counter by 1\n- `Add` increment the counter by a given amount\n- `Subtract` decrement the counter by a given amount\n- `Set` reset the counter to a given value\n- `Get` retrieve the current value of the counter"}, {"instruction": "Implement a C++ class `Complex` and a corresponding Python class `ComplexPython` that wraps the C++ class with help from SWIG."}, {"instruction": "Write a Python class `MyClass` to demonstrate the use of SWIG to generate a Python wrapper."}, {"instruction": "Using SWIG, implement a Python class `MyArray` that stores an array of integers, using the following methods:\n- Constructor: `__init__`, which takes a list of integers, or an integer `n` and uses `n` randomly generated integers\n- Accessor: `__getitem__`, which takes an integer `i` and returns the `i`-th element of the array\n- Mutator: `__setitem__`, which takes an integer `i` and an integer `x` and sets the `i`-th element of the array to `x`\n- Size: `__len__`, which returns the length of the array"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: C programming, Scheme Scheme interpreter, Scheme syntax tree\n\n### Task", "fingerprint": null, "content": {"code": "JDK_SCHEME_NATIVE(trace)\n  {\n    jdk_scheme_sexp_dec_ref( interp, list ); /* throw away any input parameters */\n    jdk_scheme_sexp_inc_ref( interp, interp->empty_value );\n    return interp->empty_value;\n  }", "docstring": "/* throw away any input parameters */", "function_name": "JDK_SCHEME_NATIVE"}, "id": 156, "seed": "JDK_SCHEME_NATIVE(trace)\n  {\n    jdk_scheme_sexp_dec_ref( interp, list ); /* throw away any input parameters */\n    jdk_scheme_sexp_inc_ref( interp, interp->empty_value );\n    return interp->empty_value;\n  }", "concepts": ["C programming", "Scheme Scheme interpreter", "Scheme syntax tree"], "parsing_result": [{"instruction": "Implement a Scheme Scheme Scheme interpreter in Python."}, {"instruction": "Design a programming language that includes a subset of Scheme and supports C interoperability."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a Python function `calc` to evaluate a simple C-like expression consisting of the following operators: `+`, `-`, `*`, `/`, `%`, and `()`."}, {"instruction": "Create a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a Scheme function `eval` that evaluates an expression."}, {"instruction": "Write a function that takes a string input and produces the Scheme equivalent of that input."}, {"instruction": "Write a Python function `factorial` that calculates the factorial of an integer."}, {"instruction": "Create a Python function `factorial` that returns the factorial of a non-negative integer."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two integers, using the Euclidean algorithm."}, {"instruction": "Implement a Python function `maximum` that returns the maximum of two numbers."}, {"instruction": "Write a function `bool prime(int n)` in Python that checks if the integer `n` is prime."}, {"instruction": "Implement a C programming language compiler in Python."}, {"instruction": "Write a Python function `factorial` that returns the factorial of a non-negative integer."}, {"instruction": "Write a Scheme function `generate-fibonacci` that returns a list of Fibonacci numbers."}, {"instruction": "Write a Scheme Scheme function `prime?` that returns true if a number is prime."}, {"instruction": "Implement a C Python program that prints out a multiplication table using nested for loops."}, {"instruction": "Implement the Scheme interpreter in Python."}, {"instruction": "Create a Python function `fib` that prints a Fibonacci series to standard output."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `add` that adds two numbers in Scheme."}, {"instruction": "Implement a recursive descent parser for Scheme."}, {"instruction": "Write a Python function `convert` that converts a string in C programming language to Scheme."}, {"instruction": "Implement the Scheme language interpreter in Python."}, {"instruction": "Write a Python function `fizzBuzz` that outputs the first 100 numbers, replacing multiples of 3 with the word \"Fizz\", multiples of 5 with the word \"Buzz\", and multiples of both 3 and 5 with \"FizzBuzz\"."}, {"instruction": "Write a Python function that converts the [Scheme syntax tree](https://en.wikipedia.org/wiki/Syntax_tree) of an arithmetic expression into its value."}, {"instruction": "Write a Python function `fib` that returns the nth fibonacci number."}, {"instruction": "Create a Python function `sum` that returns the sum of the squares of two integers."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `prime_factors` that returns the prime factors of a number."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: static method, cc::scene::Light, cc::scene::RenderScene, object pointer conversion\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Light_attachToScene(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Light *arg1 = (cc::scene::Light *) NULL ;\n    cc::scene::RenderScene *arg2 = (cc::scene::RenderScene *) NULL ;\n    \n    if(argc != 1) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 1);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Light>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Light_attachToScene,2,SWIGTYPE_p_cc__scene__RenderScene\"); \n    (arg1)->attachToScene(arg2);\n    \n    \n    return true;\n}", "docstring": "// js_dtoroverride", "function_name": "js_delete_cc_scene_Light"}, "id": 157, "seed": "static bool js_cc_scene_Light_attachToScene(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Light *arg1 = (cc::scene::Light *) NULL ;\n    cc::scene::RenderScene *arg2 = (cc::scene::RenderScene *) NULL ;\n    \n    if(argc != 1) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 1);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Light>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Light_attachToScene,2,SWIGTYPE_p_cc__scene__RenderScene\"); \n    (arg1)->attachToScene(arg2);\n    \n    \n    return true;\n}", "concepts": ["static method", "cc::scene::Light", "cc::scene::RenderScene", "object pointer conversion"], "parsing_result": [{"instruction": "Create a Python function `lit` that determines whether a scene is lit."}, {"instruction": "Write a Python function `moveLight` that moves a light by a given distance along the light's vector."}, {"instruction": "Write a Python function `get_light_intensity` that returns the intensity of a light in a scene."}, {"instruction": "Implement a Python function `get_light_intensity` that returns the total light intensity (in candela) in a `cc::scene::RenderScene` scene."}, {"instruction": "Implement a Python function `renderScene` that takes in a cc::scene::Light and a cc::scene::RenderScene object and returns the rendered scene as a list of 3D vectors."}, {"instruction": "Write a Python function `renderScene` that simulates the rendering of a scene."}, {"instruction": "Write a Python function `pointInLight` that returns whether a point is in a light volume."}, {"instruction": "Create a Python function `getAverageLightIntensity` that returns the average light intensity of a scene. The function should take a `cc::scene::RenderScene` object and return the average light intensity."}, {"instruction": "Implement a Python function `sphereArea` that calculates the surface area of a sphere given its radius."}, {"instruction": "Implement a Python function `render` that renders an arbitrary `RenderScene` object with `Light` objects.\n\n// TODO: add your C++ solution here"}, {"instruction": "Create a function `findClosestLight` that finds the light in a given scene that is closest to a given point."}, {"instruction": "Write a Python function `isLightInView` that tests whether a light is in view of a scene."}, {"instruction": "Write a Python function `render` that takes a `cc::scene::Scene` object and a `cc::scene::Light` object, and returns an object that implements `cc::scene::RenderScene` that renders the scene using the light source."}, {"instruction": "Implement a Python function `get_shadow_receiver` that returns the name of a light if it is shadowing a mesh."}, {"instruction": "Write a Python function `findLight` that returns the first instance of a `cc::scene::Light` from the render scene."}, {"instruction": "Create a Python function `getAverageColor` that returns the average color of a render scene."}, {"instruction": "Implement a Python function `intersect` that takes two `cc::scene::Light` objects and returns the intersection region of their positional rays."}, {"instruction": "Write a Python function `isLightInRenderScene` that returns `true` if a given `cc::scene::Light` is within a given `cc::scene::RenderScene` with respect to positional and color tolerance."}, {"instruction": "Create a Python function `lightCast` that calculates the number of light sources that a scene will receive."}, {"instruction": "Write a Python function `renderScene` that renders a 3D scene, given a `cc.scene.RenderScene` object."}, {"instruction": "Implement a Python function `countLights` that returns the number of lights in a `scene` object."}, {"instruction": "Write a Python function `get_light_intensity` that returns the intensity of a light source based on the distance from another object."}, {"instruction": "Implement a Python function `renderScene` that renders a scene based on a light source and a scene object."}, {"instruction": "Write a Python function that takes a `cc::scene::Light` object as input and returns its position as a `cc::math::Vec3`."}, {"instruction": "Write a Python function `getSceneLightIntensity` that returns the total intensity of a `cc::scene::RenderScene` object's lights."}, {"instruction": "Implement a Python function that returns the Light object containing the furthest lighting at a given RenderScene."}, {"instruction": "Implement a Python function `get_scene` that returns the `cc.scene.RenderScene` that is attached to a pointer of type `cc.scene.Light`."}, {"instruction": "Write a Python function `renderScene` that renders a scene using the OpenGL scene renderer."}, {"instruction": "Implement a [C++](https://github.com/cocos-creator/core-2d/blob/master/packages/3d/src/nodes/light/Light.ts#L168) `BaseLight` class in [Python](https://github.com/cocos-creator/core-2d/blob/master/python/cocos/3d/scene/light.py#L116)"}, {"instruction": "Create a Python function `getLight` that returns a cc::scene::Light object from a cc::scene::RenderScene object."}, {"instruction": "Create a Python function `averageSceneLights` that takes in a RenderScene object and calculates the mean color intensity of all light objects in the scene."}, {"instruction": "Write a Python function `average` that calculates the average of a list of numbers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dynamic programming, backtracking, recursion\n\n### Task", "fingerprint": null, "content": {"code": "int memorize(int begin)\n{\n\tif (begin == N.size())return 0;//\uae30\uc800 \uc0ac\ub840\uc758 \ub05d\uc5d0 \ub3c4\ub2ec\ud588\uc744 \uacbd\uc6b0\n\tint& ret = cache[begin];\n\tif (ret != -1) return ret;//\uc774\ubbf8 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4\uba74 \uadf8 \uac12\uc744 \ub9ac\ud134\ud55c\ub2e4. \n\tret = INF;\n\tfor (int L = 3; L <= 5; ++L)//3~5\uc790\ub9ac\ub85c \ub098\ub208\ub2e4.\n\t\tif (begin + L <= N.size())\n\t\t{\n\t\t\tret = min(ret, memorize(begin + L) + classify(begin, begin + L - 1));//\ub098\ub208 \uac12\uc911\uc5d0\uc11c \uc81c\uc77c \uc791\uc740 \ucd5c\uc18c \ub09c\uc774\ub3c4\ub97c \ub9ac\ud134\ud55c\ub2e4. \n\t\t}\n\treturn ret;\n}", "docstring": "// \uadf8\uc678\uc5d0\ub294 \ub09c\uc774\ub3c4 10", "function_name": "classify"}, "id": 161, "seed": "int memorize(int begin)\n{\n\tif (begin == N.size())return 0;//\uae30\uc800 \uc0ac\ub840\uc758 \ub05d\uc5d0 \ub3c4\ub2ec\ud588\uc744 \uacbd\uc6b0\n\tint& ret = cache[begin];\n\tif (ret != -1) return ret;//\uc774\ubbf8 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4\uba74 \uadf8 \uac12\uc744 \ub9ac\ud134\ud55c\ub2e4. \n\tret = INF;\n\tfor (int L = 3; L <= 5; ++L)//3~5\uc790\ub9ac\ub85c \ub098\ub208\ub2e4.\n\t\tif (begin + L <= N.size())\n\t\t{\n\t\t\tret = min(ret, memorize(begin + L) + classify(begin, begin + L - 1));//\ub098\ub208 \uac12\uc911\uc5d0\uc11c \uc81c\uc77c \uc791\uc740 \ucd5c\uc18c \ub09c\uc774\ub3c4\ub97c \ub9ac\ud134\ud55c\ub2e4. \n\t\t}\n\treturn ret;\n}", "concepts": ["dynamic programming", "backtracking", "recursion"], "parsing_result": [{"instruction": "Write a Python function that returns a list of all the permutations of a given list."}, {"instruction": "Given a string of digits, create a function that returns all of the possible permutations of the digits."}, {"instruction": "Write a Python function `fib` that returns the nth Fibonacci number via dynamic programming."}, {"instruction": "Write a function that takes a number and returns the sum of its digits."}, {"instruction": "Write a function that accepts a string, and returns a list of all the possible permutations of the string."}, {"instruction": "Write Python functions `minJumps` and `maxJumps` that calculate the minimum and maximum number of jumps to reach the end of the array."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number."}, {"instruction": "Write a Python function `countPaths` that counts the number of paths that can be taken from the start to the end of an NxN grid."}, {"instruction": "Write a Python function `fibonacci` that computes the Fibonacci sequence up to the `n`th term."}, {"instruction": "Write a Python function `count_paths` that returns the number of paths to take from the top left corner of a 2D array to the bottom right corner. You are only allowed to move right or down."}, {"instruction": "Write a Python function `fibonacci` that calculates the nth Fibonacci number."}, {"instruction": "Solve the [Knight's Tour](https://en.wikipedia.org/wiki/Knight%27s_tour) problem using backtracking, a form of dynamic programming."}, {"instruction": "Write a Python function to solve the [0/1 knapsack problem](https://en.wikipedia.org/wiki/Knapsack_problem)."}, {"instruction": "Write a Python function `fibonacci` that returns a list of Fibonacci numbers."}, {"instruction": "Write a Python function `solve_sudoku` that solves a Sudoku puzzle."}, {"instruction": "Write a Python function `fibonacci` that calculates the Fibonacci series up to n."}, {"instruction": "Write a Python function `permute` that returns all permutations of a given string."}, {"instruction": "Write a Python function `isPalindrome` that checks if a string is a palindrome."}, {"instruction": "Given an array of integers and a target sum, return a subset of the array that sums to the target sum. The subset should not contain duplicate numbers. The output should be a list of lists of numbers."}, {"instruction": "Implement the `uniquePaths` function in the [Leetcode](https://leetcode.com/problems/unique-paths/) problem."}, {"instruction": "Write a Python function `coinChange` to return the number of ways to make change for a given amount using the given coin denominations."}, {"instruction": "Write a Python function `permutations` that returns all possible permutations of a given string."}, {"instruction": "Implement the [0-1 Knapsack Problem](https://en.wikipedia.org/wiki/Knapsack_problem) using recursion."}, {"instruction": "Write a Python function `countPaths` that counts possible paths from the top-left to the bottom-right of a rectangular grid, assuming that the robot can move only right or down."}, {"instruction": "Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level)."}, {"instruction": "Create a Python function `factorial` that calculates the factorial of a number."}, {"instruction": "Write a Python function `fib` to return the Nth number of the Fibonacci sequence."}, {"instruction": "Write a Python function `checkIfPalindrome` that checks if an input string is a palindrome."}, {"instruction": "Write a Python function `fibonacci` that returns the n-th Fibonacci number."}, {"instruction": "Write a Python function `fib` that returns the nth Fibonacci number."}, {"instruction": "Create a Python function `calculateNthFibonacci` that returns the nth Fibonacci number."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: calling conventions, C++, setters, special function names\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_SpotLight_shadowEnabled_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SpotLight *arg1 = (cc::scene::SpotLight *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::SpotLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"SpotLight_shadowEnabled_set,2,SWIGTYPE_bool\"); \n    cc_scene_SpotLight_shadowEnabled_set(arg1,arg2);\n    \n    \n    return true;\n}", "docstring": "// %typemap(out) SWIGTYPE&", "function_name": "js_cc_scene_SpotLight_frustum_get"}, "id": 165, "seed": "static bool js_cc_scene_SpotLight_shadowEnabled_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SpotLight *arg1 = (cc::scene::SpotLight *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::SpotLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"SpotLight_shadowEnabled_set,2,SWIGTYPE_bool\"); \n    cc_scene_SpotLight_shadowEnabled_set(arg1,arg2);\n    \n    \n    return true;\n}", "concepts": ["calling conventions", "C++", "setters", "special function names"], "parsing_result": [{"instruction": "Write a Python program named `craps` that simulates a game of craps."}, {"instruction": "Implement a `Point` object that has a `setx`, `sety`, `x`, and `y` attribute."}, {"instruction": "Implement a Python class `Vector` that contains a list of elements."}, {"instruction": "Implement the C++ setter special member function `operator=` in a class named `Person` to perform deep-copy assignment."}, {"instruction": "Implement a C++ class `Person` that represents people."}, {"instruction": "Implement a class `IntegerSet` that implements a set of integers. The class should allow for the insertion, deletion, and membership testing of integers."}, {"instruction": "Create a C++ program that implements a simple calculator, taking user input and returning the result. The program should use the `cin` and `cout` stream objects (as well as `getline`) to accept input and print output."}, {"instruction": "Write a Python program that performs a calculation function based on the user's choice. For example, when the user selects the multiplication operation, the program should prompt for two integers and return their product."}, {"instruction": "Implement a Python class `Complex` that supports complex number arithmetic."}, {"instruction": "Write a program that prompts the user to enter two integers and computes the sum."}, {"instruction": "Create a C++ class `Rectangle` that models a rectangular area. The class should have the following public member functions:\n\n- `setLength`\n- `setHeight`\n- `getLength`\n- `getHeight`\n- `getArea`\n- `getPerimeter`\n\nIn addition to supporting these member functions, the class should also support the following special functions:\n\n- `operator<<`\n- `operator>>`"}, {"instruction": "Write a Python function `iterativeFactorial` that calculates and returns the factorial of a non-negative integer."}, {"instruction": "Implement `Car` as a class with a constructor, accessors, and mutators."}, {"instruction": "Implement a Python function `Prime` that takes a positive integer as input and returns `True` if that number is prime. Otherwise, return `False`."}, {"instruction": "Implement a Python class `Matrix` that allows clients to perform basic arithmetic operations on matrices."}, {"instruction": "Implement the following Python class hierarchy in C++ with the following properties:\n- `Rectangle` as a subclass of `Shape`\n- `Circle` as a subclass of `Shape`\n- `Rectangle` should have two `float` `width` and `height` fields\n- `Circle` should have one `float` `radius` field\n- `Shape` should have two `float` `x` and `y` fields\n- `Shape` should have a `float` `getArea()` method\n- `Shape` should have a `float` `getPerimeter()` method\n- `Rectangle` should have a `float` `getArea()` method\n- `Rectangle` should have a `float` `getPerimeter()` method\n- `Circle` should have a `float` `getArea()` method\n- `Circle` should have a `float` `getPerimeter()` method\n- `Rectangle` should have a `float` `setWidth()` method\n- `Rectangle` should have a `float` `setHeight()` method\n- `Rectangle` should have a `float` `getWidth()` method\n- `Rectangle` should have a `float` `getHeight()` method\n- `Rectangle` should have a `float` `getArea()` method\n- `Rectangle` should have a `float` `getPerimeter()` method\n- `Circle` should have a `float` `setRadius()` method\n- `Circle` should have a `float` `getRadius()` method\n- `Circle` should have a `float` `getArea()` method\n- `Circle` should have a `float` `getPerimeter()` method"}, {"instruction": "Write a C++ class `Library` to hold a collection of books and author names. The program should prompt the user for a book title to search for, and then print a list of all books by that author."}, {"instruction": "Create a C++ class `Student` with attributes `name`, `id`, and `major`. Add a constructor for the class. Add `getMajor` and `setMajor` functions to allow users to access and mutate the `major` attribute."}, {"instruction": "Create a Python class `Rectangle` with the following properties:\n\n- `height`\n- `width`\n- `area`\n- `perimeter`\n- `set_height`\n- `set_width`\n\nThe class should have a constructor that accepts `height` and `width` as parameters, and the class should have a setter function called `set_height` that accepts a parameter called `new_value`."}, {"instruction": "Implement a Python class `Person` with the following properties:\n- `name` (`str`): the person's name\n- `age` (`int`): the person's age\n- `height` (`float`): the person's height in meters\n- `weight` (`float`): the person's weight in kilograms\n- `gender` (`{M, F}`): the person's gender\n- `address` (`str`): the person's address\n- `birthday` (`date`): the person's birthday\n\nWrite a Python function `personInfo` that takes a `Person` object as an argument and returns a string with the person's information."}, {"instruction": "Implement a Python program that computes the factorial of n using the following convention:\n\n```python\ndef factorial(n):\n    # TODO implement\n    pass\n```"}, {"instruction": "Write a C++ library function that takes a list of integers and returns a list of integers sorted in ascending order, using the built-in `sort` function."}, {"instruction": "Implement a queue using a singly linked list with a circularly linked list, in which the queue's head node is a sentinel node."}, {"instruction": "Implement a Python class `Queue` that can be used to construct a queue data structure."}, {"instruction": "Write a Python class `BankAccount` that implements a basic bank account."}, {"instruction": "Write a Python program that takes a set of integers as input and outputs the minimum, maximum, and average of the set."}, {"instruction": "Implement a Python program that computes the Fibonacci sequence using memoization."}, {"instruction": "Write a Python program to simulate a bank account."}, {"instruction": "Implement a Python class `Stack` that supports the following basic operations: `push`, `pop`, and `peek`."}, {"instruction": "Create a Python program that implements a `Card` class with `suit` and `rank` attributes. Implement `str` and `repr` methods that print the card in a human-readable format."}, {"instruction": "Implement a Python class `Fraction` that implements fractions as a fraction of two integers and can perform all common arithmetic operations."}, {"instruction": "Implement a Python program to determine whether a given card number is valid using the Luhn algorithm."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: static function, typemap, swig, precondition\n\n----\n\n## Question 2\n### Description\nYou're given a text snippet containing a programming language. Find and extract the programming language. List these languages in a comma-separated format.\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_DirectionalLight_csmLayerLambda_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::DirectionalLight *arg1 = (cc::scene::DirectionalLight *) NULL ;\n    float arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::DirectionalLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) int, short, long, signed char, float, double\n    ok &= sevalue_to_native(args[0], &arg2, nullptr);\n    SE_PRECONDITION2(ok, false, \"DirectionalLight_csmLayerLambda_set,2,SWIGTYPE_float\"); \n    cc_scene_DirectionalLight_csmLayerLambda_set(arg1,arg2);\n    \n    \n    return true;\n}", "docstring": "// out 5", "function_name": "js_cc_scene_DirectionalLight_csmNeedUpdate_get"}, "id": 167, "seed": "static bool js_cc_scene_DirectionalLight_csmLayerLambda_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::DirectionalLight *arg1 = (cc::scene::DirectionalLight *) NULL ;\n    float arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::DirectionalLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) int, short, long, signed char, float, double\n    ok &= sevalue_to_native(args[0], &arg2, nullptr);\n    SE_PRECONDITION2(ok, false, \"DirectionalLight_csmLayerLambda_set,2,SWIGTYPE_float\"); \n    cc_scene_DirectionalLight_csmLayerLambda_set(arg1,arg2);\n    \n    \n    return true;\n}", "concepts": ["static function", "typemap", "swig", "precondition\n\n----\n\n## Question 2\n### Description\nYou're given a text snippet containing a programming language. Find and extract the programming language. List these languages in a comma-separated format."], "parsing_result": [{"instruction": "Write a program that extracts the programming language from the given text snippet.\n\n### Languages\n- [Python](https://www.python.org/)\n- [C++](https://isocpp.org/)\n- [Java](https://www.oracle.com/technetwork/java/index.html)\n- [Ruby](https://www.ruby-lang.org/en/)\n- [JavaScript](https://www.javascript.com/)\n- [PHP](https://www.php.net/)\n- [C#](https://docs.microsoft.com/en-us/dotnet/csharp/)\n- [Go](https://golang.org/)\n- [Objective-C](https://www.apple.com/swift)\n- [C](https://isocpp.org/)\n- [Swift](https://developer.apple.com/swift/)\n- [Pascal](https://www.freepascal.org/)\n- [Basic](https://en.wikipedia.org/wiki/BASIC)\n- [Fortran](https://en.wikipedia.org/wiki/Fortran)\n- [MATLAB](https://www.mathworks.com/)\n- [R](https://www.r-project.org/)\n- [Perl](https://www.perl.org/)\n- [SQL](https://www.postgresql.org/)\n- [Scheme](https://www.schemers.org/)\n- [Scala](https://scala-lang.org/)\n- [Haskell](https://www.haskell.org/)\n- [Lisp](https://www.lisp.org/)\n- [Bash](https://www.gnu.org/software/bash/)\n- [CoffeeScript](https://coffeescript.org/)\n- [D](https://dlang.org/)\n- [Clojure](https://clojure.org/)\n- [Kotlin](https://kotlinlang.org/)\n- [Lua](https://www.lua.org/)\n- [PowerShell](https://docs.microsoft.com/en-us/powershell/)\n- [Vim](https://www.vim.org/)\n- [Emacs](https://www.gnu.org/software/emacs/)\n- [Groovy](https://groovy-lang.org/)\n- [Dart](https://www.dartlang.org/)\n- [Scratch (programming language)](https://scratch.mit.edu/)\n- [Erlang](https://www.erlang.org/)\n- [Lua](https://www.lua.org/)\n- [Racket](https://racket-lang.org/)\n- [Prolog](https://www.swi-prolog.org/)\n\n#"}, {"instruction": "Implement the `extractLanguage` function in the `extractLanguage.cpp` file.\n\n### Input\nThe function `extractLanguage` should take a single string argument, `snippet`, and return a string.\n\n### Tests\nThe `input_snippet` variable below contains a text snippet containing programming languages.\n\n```\nconst string input_snippet = \"This is a Python code. Here is a C++ code. Here is a JavaScript code.\";\n```\n\n### Hints\nThe `find` function takes a string argument and a regular expression argument.\n\n```\nfind(string, regex)\n```\n\nThe `regex_match` function takes a string argument and a regular expression argument.\n\n```\nregex_match(string, regex)\n```\n\nThe `regex_search` function takes a string argument and a regular expression argument.\n\n```\nregex_search(string, regex)\n```\n\nThe `regex` variable below contains the regular expression to match programming languages.\n\n```\nregex = r\"Python|C\\+\\+|JavaScript\"\n```\n\nThe `regex_search` function returns a vector of match objects.\n\n```\nregex_search(string, regex)\n```\n\nThe `match_results` object contains a vector of match objects, one per match.\n\n```\nmatch_results.size()\n```\n\nThe `cbegin` and `cend` functions return iterators to the beginning and end of a string.\n\n```\nstring.cbegin()\nstring.cend()\n```\n\nThe `operator[]` function returns a substring of a string.\n\n```\nstring[index]\n```\n\nThe `size` function returns the number of characters in a string.\n\n```\nstring.size()\n```\n\n#"}, {"instruction": "Create a program implementation that finds and extracts the programming language from a text snippet. List the languages extracted in a comma-separated format."}, {"instruction": "Input: text snippet containing a programming language.\nOutput: comma-separated languages."}, {"instruction": "Create a program to find and extract programming languages from a text file."}, {"instruction": "Write a C++ program that inputs a string containing a programming language (e.g., \"Python\", \"JavaScript\", \"C++\", \"C\", \"Java\", \"Go\") and outputs a list of all the programming languages contained in the input.\n\n### Input\nThe input is a string containing one or more programming languages.\n\n### Output\nThe output is a comma-separated list of the programming languages contained in the input.\n\n#"}, {"instruction": "Write a function `extractLanguage` that takes a text snippet and returns a list of languages found within it."}, {"instruction": "Write a function `extractLanguage` that extracts the programming language from a given string."}, {"instruction": "Write a function `findLanguages` that takes a text snippet as an argument and returns a comma-separated list of programming languages found in the text snippet."}, {"instruction": "Write a function `getLanguages` that takes a file containing code and returns a list of the programming languages found in the file."}, {"instruction": "Write a Python program that:\n\n1. Reads a text snippet from the user, and\n2. Print the programming languages found in the snippet in a comma-separated list format."}, {"instruction": "Write a C++ function `getProgrammingLanguages` that takes a string containing a programming language as input and returns a comma-separated list of languages containing the programming language.\n\n#"}, {"instruction": "Write a function `extract_languages` that takes a string and returns a `set` containing the programming languages found."}, {"instruction": "The text snippet is stored in `snippet.txt`.\n\n### Output\nThe result is written to `output.txt`."}, {"instruction": "Write a function that takes a text snippet as input and returns the list of programming languages found in the snippet as output.\n\n#"}, {"instruction": "Write a Python function `extractLanguages` that takes a text snippet (string) and returns a list of programming languages."}, {"instruction": "Write a function `identify` that takes a string as input and returns a list of strings, each representing a programming language.\n\n#"}, {"instruction": "Create a function `extractLanguages` that takes a string as an argument and returns a list containing the programming languages found within the string. If no programming languages are present, the function should return an empty list.\n\n### Input\nA string containing text with programming language names within it.\n\n### Output\nA list containing the programming languages found within the string.\n\n#"}, {"instruction": "Given a text snippet containing a programming language, extract and print the programming language.\n\n----\n\n## Question 3\n### Description\nYou are provided with a dictionary of words and their frequencies. Your task is to sort the dictionary by the word frequency in descending order. If two words have the same frequency, sort them in ascending order.\n\n### Task\nGiven a dictionary of words and their frequencies, sort the dictionary by the word frequency in descending order. If two words have the same frequency, sort them in ascending order.\n\n#"}, {"instruction": "Create a Python function `extractLanguage` which takes a plaintext string as input and extracts the programming language.\n\n#"}, {"instruction": "Write a Python function `languages(text)` that takes a string `text` containing a programming language as an argument and returns a comma-separated list of unique languages in text.\n\n#"}, {"instruction": "Write a Python function `findLanguage` that finds and extracts the programming languages in a given text snippet.\n\n#"}, {"instruction": "Write a function `languages` that takes a text snippet as input and returns a string containing the programming languages in the snippet, separated by a comma.\n\n#"}, {"instruction": "Write a function `findLanguage` that takes a string and returns the programming language (if any) present in the string.\n\n### Languages\n- Python\n- C++\n- Java\n- JavaScript\n- C\n\n### Input\nText snippet containing a programming language.\n\n### Output\nComma-separated format of the languages detected in the text snippet.\n\n### Constraints\n- The input will consist of a string.\n- The list of languages will be provided as a string.\n- The list of languages is represented as a comma-separated format.\n\n#"}, {"instruction": "The text snippet will be provided as a single string. Implement a function that extracts the programming language from the text and returns a list of all languages found."}, {"instruction": "Write a program that reads a text file, finds and extracts the programming language from it, and prints the list of languages in the following format:\n\n- `C, C++, C#, Swift, JavaScript`"}, {"instruction": "Write a regular expression that finds the programming language in a text snippet."}, {"instruction": "Write a program that reads a text snippet from stdin and prints a list of programming languages from it."}, {"instruction": "Write a Python script that finds the programming language given a text snippet.\n\n#"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: array of functions, array of structures\n\n### Task", "fingerprint": null, "content": {"code": "BOOL MY_KEY_DOWN_PRECEDENCE(int key,int cnt)\n{\n\t//\u5148\u884c\u5165\u529b\u53ef\u80fd\u306b\u306a\u3063\u305f\u3089\u30ab\u30a6\u30f3\u30c8\u3092\u59cb\u3081\u308b\n\tif (IsPrecedence[key] == TRUE)\n\t{\n\t\tprecdence[key].CntMax = cnt;\n\t\tprecdence[key].cnt = CNT_CHECK(precdence[key].cnt, precdence[key].CntMax);\n\t\tif (precdence[key].cnt != 0)\n\t\t{\n\t\t\treturn TRUE;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tIsPrecedence[key] = FALSE;//\u5148\u884c\u5165\u529b\u306e\u6642\u9593\u3092\u7d42\u3048\u308b\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\treturn FALSE;\n}", "docstring": "//\u62bc\u3057\u59cb\u3081\u3066\u3044\u306a\u3044", "function_name": "MY_KEY_DOWN_MOMENT"}, "id": 170, "seed": "BOOL MY_KEY_DOWN_PRECEDENCE(int key,int cnt)\n{\n\t//\u5148\u884c\u5165\u529b\u53ef\u80fd\u306b\u306a\u3063\u305f\u3089\u30ab\u30a6\u30f3\u30c8\u3092\u59cb\u3081\u308b\n\tif (IsPrecedence[key] == TRUE)\n\t{\n\t\tprecdence[key].CntMax = cnt;\n\t\tprecdence[key].cnt = CNT_CHECK(precdence[key].cnt, precdence[key].CntMax);\n\t\tif (precdence[key].cnt != 0)\n\t\t{\n\t\t\treturn TRUE;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tIsPrecedence[key] = FALSE;//\u5148\u884c\u5165\u529b\u306e\u6642\u9593\u3092\u7d42\u3048\u308b\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\treturn FALSE;\n}", "concepts": ["array of functions", "array of structures"], "parsing_result": [{"instruction": "Write a Python function `maxOfThree` that returns the largest of three integers."}, {"instruction": "Write a Python function `oddEvenSort` that sorts a list of nonnegative integers by alternately putting odd elements at the front of the list and even elements at the back of the list."}, {"instruction": "Write a Python function `search` that takes an array of strings and a string key, and returns the index of the string array of the first item that contains the substring key."}, {"instruction": "Write a Python function `countWordsInText` that counts the number of words in a text file."}, {"instruction": "Write a Python function that takes a list of functions and returns a new list of functions that increase the value of each element by 1."}, {"instruction": "Implement a Python function `sort` that sorts a list of numbers."}, {"instruction": "Write a Python function `multiplyArray` that takes an array of numbers and multiplies each element by the sum of its elements."}, {"instruction": "Write a Python function `mult` that returns the product of two numbers."}, {"instruction": "Define a C++ function `countLetters` that takes a string and returns the number of occurrences of each letter in the string, ignoring case."}, {"instruction": "Create a Python function `countNegatives` that takes a 2D array of integers and returns the number of negative numbers in the array."}, {"instruction": "Write a Python function `declare` that returns an array of functions that declare a given function's return type."}, {"instruction": "Write a Python function `sum_of_cubes` that computes the sum of the cubes of the first N integers."}, {"instruction": "Write a Python function `rollDice` that accepts a number of die and returns the sum of all rolls of those die."}, {"instruction": "Create a Python function `primeFactors` that returns a list of prime factors of a given integer."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `max` that returns the maximum value in an array of integers."}, {"instruction": "Write a Python function `sort` that sorts a list of integers using an array of functions."}, {"instruction": "Write a Python function `sortInts` that sorts an array of integers in descending order."}, {"instruction": "Write a Python function `sumOfSquares` that returns the sum of the squares of the first N positive integers."}, {"instruction": "Write a Python function `maxOfThree` that returns the largest of three numbers."}, {"instruction": "Write a Python function `reverseArray` that takes an array of integers and returns its reverse."}, {"instruction": "Write a Python function `countLetters` that takes a string and returns a dictionary mapping the letters of the alphabet to their corresponding number of occurrences in the string."}, {"instruction": "Write a Python function `maxOfThree` that takes three integers and returns the largest."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `average` that takes a list of numbers and returns the average."}, {"instruction": "Create a Python function `apply` that takes an array of functions and an array of values. Using the array of functions, call the corresponding functions on the array of values and return a new array of results."}, {"instruction": "Write a function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python function `sort_words` that takes a string and returns a new string with the words sorted alphabetically."}, {"instruction": "Write a Python function `compute_sum_of_squares` that takes a list of integers and returns the sum of the squares of the list elements."}, {"instruction": "Write a function that simulates a simplified version of the traffic manager in a bus line."}, {"instruction": "Write a Python function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: null pointer check, exception handling, exception propagation, function return, array operations, list operations\n\n### Task", "fingerprint": null, "content": {"code": "int32_t List_1_System_Collections_IList_Add_m858760638_gshared (List_1_t3093144868 * __this, RuntimeObject * ___item0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_System_Collections_IList_Add_m858760638_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\nIL_0000:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tRuntimeObject * L_0 = ___item0;\n\t\t\tNullCheck((List_1_t3093144868 *)__this);\n\t\t\t((  void (*) (List_1_t3093144868 *, UICharInfo_t3151594060 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3093144868 *)__this, (UICharInfo_t3151594060 )((*(UICharInfo_t3151594060 *)((UICharInfo_t3151594060 *)UnBox(L_0, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 8))))), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t\tint32_t L_1 = (int32_t)__this->get__size_2();\n\t\t\tV_0 = (int32_t)((int32_t)((int32_t)L_1-(int32_t)1));\n\t\t\tgoto IL_0036;\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\t; // IL_001a: leave IL_002b\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__exception_local = (Exception_t2748878030 *)e.ex;\n\t\tif(il2cpp_codegen_class_is_assignable_from (NullReferenceException_t2898655055_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_001f;\n\t\tif(il2cpp_codegen_class_is_assignable_from (InvalidCastException_t330901945_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_0025;\n\t\tthrow e;\n\t}\n\nCATCH_001f:\n\t{ // begin catch(System.NullReferenceException)\n\t\tgoto IL_002b;\n\t} // end catch (depth: 1)\n\nCATCH_0025:\n\t{ // begin catch(System.InvalidCastException)\n\t\tgoto IL_002b;\n\t} // end catch (depth: 1)\n\nIL_002b:\n\t{\n\t\tArgumentException_t3261393077 * L_2 = (ArgumentException_t3261393077 *)il2cpp_codegen_object_new(ArgumentException_t3261393077_il2cpp_TypeInfo_var);\n\t\tArgumentException__ctor_m4106072998(L_2, (String_t*)_stringLiteral927986437, /*hidden argument*/NULL);\n\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(L_2);\n\t}\n\nIL_0036:\n\t{\n\t\tint32_t L_3 = V_0;\n\t\treturn L_3;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "List_1_AddEnumerable_m250401200_gshared"}, "id": 172, "seed": "int32_t List_1_System_Collections_IList_Add_m858760638_gshared (List_1_t3093144868 * __this, RuntimeObject * ___item0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_System_Collections_IList_Add_m858760638_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\nIL_0000:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tRuntimeObject * L_0 = ___item0;\n\t\t\tNullCheck((List_1_t3093144868 *)__this);\n\t\t\t((  void (*) (List_1_t3093144868 *, UICharInfo_t3151594060 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3093144868 *)__this, (UICharInfo_t3151594060 )((*(UICharInfo_t3151594060 *)((UICharInfo_t3151594060 *)UnBox(L_0, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 8))))), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t\tint32_t L_1 = (int32_t)__this->get__size_2();\n\t\t\tV_0 = (int32_t)((int32_t)((int32_t)L_1-(int32_t)1));\n\t\t\tgoto IL_0036;\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\t; // IL_001a: leave IL_002b\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__exception_local = (Exception_t2748878030 *)e.ex;\n\t\tif(il2cpp_codegen_class_is_assignable_from (NullReferenceException_t2898655055_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_001f;\n\t\tif(il2cpp_codegen_class_is_assignable_from (InvalidCastException_t330901945_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_0025;\n\t\tthrow e;\n\t}\n\nCATCH_001f:\n\t{ // begin catch(System.NullReferenceException)\n\t\tgoto IL_002b;\n\t} // end catch (depth: 1)\n\nCATCH_0025:\n\t{ // begin catch(System.InvalidCastException)\n\t\tgoto IL_002b;\n\t} // end catch (depth: 1)\n\nIL_002b:\n\t{\n\t\tArgumentException_t3261393077 * L_2 = (ArgumentException_t3261393077 *)il2cpp_codegen_object_new(ArgumentException_t3261393077_il2cpp_TypeInfo_var);\n\t\tArgumentException__ctor_m4106072998(L_2, (String_t*)_stringLiteral927986437, /*hidden argument*/NULL);\n\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(L_2);\n\t}\n\nIL_0036:\n\t{\n\t\tint32_t L_3 = V_0;\n\t\treturn L_3;\n\t}\n}", "concepts": ["null pointer check", "exception handling", "exception propagation", "function return", "array operations", "list operations"], "parsing_result": [{"instruction": "Create a Python function `reverse` that takes a string and returns the reverse of that string."}, {"instruction": "Write a Python function `findPrimeFactors` that finds the prime factors of a non-negative integer."}, {"instruction": "Write a Python function `gcd` that calculates the greatest common divisor of two non-negative integers."}, {"instruction": "Write a Python function `sumOfArray` that returns the sum of elements in an array."}, {"instruction": "Write a Python function `error` that raises an exception if an argument is negative."}, {"instruction": "Implement a Python function `find_min` that returns the smallest element in a list."}, {"instruction": "Write a Python function `reverseString` that takes a string and returns its reverse./C++_Example_1/README.md\n# C++ Example 1: Returning a Maximum\n\n## Summary\nCreate a function that returns the largest of two integers.\n\n## Categories\n- Category: function implementation\n- Language: C++\n- Difficulty: easy\n- Concepts: [ternary operator](https://en.wikipedia.org/wiki/%3F:#C), [conditional logic](https://en.wikipedia.org/wiki/Conditional_(computer_programming)), [function return](https://en.wikipedia.org/wiki/C%2B%2B11#Function_return_statements)"}, {"instruction": "Implement a Python function `getAverage` that finds the average of a list of numbers."}, {"instruction": "Write a Python function `reverse` that reverses a list of integers."}, {"instruction": "Write a Python function `errCheck` that checks for errors in a list of numbers. The function returns a list of the numbers in the original list with all values greater than 10 replaced by -1."}, {"instruction": "Write a Python function `maxOfThree` that returns the largest of three integers."}, {"instruction": "Implement a Python function `removeDuplicates` that removes duplicate values from a list."}, {"instruction": "Write a function `fibonacci(n)` that takes an integer `n` and returns the `n`-th Fibonacci number."}, {"instruction": "Write a Python function `isPalindrome` that checks whether a string is a palindrome using lists and exceptions."}, {"instruction": "Write a Python function `third_largest` that returns the third largest element of an array of integers."}, {"instruction": "Write a Python function `isSorted` that checks whether a list is sorted."}, {"instruction": "Write a Python function `findMaxIndex` that returns the index of the largest element in an array."}, {"instruction": "Write a Python function `factorial` that returns the factorial of a non-negative integer."}, {"instruction": "Write a Python function `sumOfTwo` that takes two integer lists and returns the sum of all elements at the same index in both lists. If the lengths of the two lists are not equal, return `None`."}, {"instruction": "Write a Python function `factorial` that calculates the factorial of an integer. If the value is negative, return `None`. If the value is not an integer, return `None`."}, {"instruction": "Write a Python function `sum` that returns the sum of a list of integers."}, {"instruction": "Write a Python function `contains` that takes two parameters, an integer `n` and a list of integers, and returns `True` if `n` is present in the list, and `False` otherwise."}, {"instruction": "Write a Python function `null` that returns the value of a null pointer."}, {"instruction": "Write a Python function `factorial` that returns the factorial of a non-negative integer."}, {"instruction": "Write a Python function `get_sum` that returns the sum of the integers in a list."}, {"instruction": "Write a Python function `reverse` that takes a string and returns its reverse."}, {"instruction": "Write a Python function `has_duplicates` that tests whether a list contains any duplicates."}, {"instruction": "Create a Python function `get_sum` that inputs a list of integers and returns their sum."}, {"instruction": "Write a Python function `search` that searches for a target value in a list of integers."}, {"instruction": "Write a Python function `get_last_digit` that returns the last digit of a positive integer, using a null pointer check, exception handling, exception propagation, and function return."}, {"instruction": "Write a Python function `exception_handling` that takes a list and returns a list of all elements that are not null. If an exception is thrown, the function should return `None`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: hard\nconcepts: struct (data) member access, STL container, constructors, destructors\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_SceneGlobals_getSkyboxInfo(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::SceneGlobals *arg1 = (cc::SceneGlobals *) NULL ;\n    cc::scene::SkyboxInfo *result = 0 ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::SceneGlobals>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    result = (cc::scene::SkyboxInfo *)((cc::SceneGlobals const *)arg1)->getSkyboxInfo();\n    // %typemap(out) SWIGTYPE*\n    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"SceneGlobals_getSkyboxInfo, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); \n    \n    \n    return true;\n}", "docstring": "// %typemap(out) SWIGTYPE*", "function_name": "js_cc_SceneGlobals_getShadowsInfo"}, "id": 178, "seed": "static bool js_cc_SceneGlobals_getSkyboxInfo(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::SceneGlobals *arg1 = (cc::SceneGlobals *) NULL ;\n    cc::scene::SkyboxInfo *result = 0 ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::SceneGlobals>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    result = (cc::scene::SkyboxInfo *)((cc::SceneGlobals const *)arg1)->getSkyboxInfo();\n    // %typemap(out) SWIGTYPE*\n    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"SceneGlobals_getSkyboxInfo, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); \n    \n    \n    return true;\n}", "concepts": ["struct (data) member access", "STL container", "constructors", "destructors"], "parsing_result": [{"instruction": "Write a Python program that simulates a game of Dungeon Crawl Stone Soup."}, {"instruction": "Write a Python program that performs the following functions:\n- Implements a class called `Student` that holds the following data:\n    - `id`\n    - `name`\n    - `major`\n- Defines a class called `Course` that holds the following data:\n    - `id`\n    - `name`\n    - `credits`\n- Initializes the class `Student` by taking the following arguments:\n    - `id`\n    - `name`\n    - `major`\n- Initializes the class `Course` by taking the following arguments:\n    - `id`\n    - `name`\n    - `credits`\n- Allows the user to enter student and course information\n- Stores the information in a `Student` object and a `Course` object\n- Displays the information stored in the objects\n- Prints the class name (`Student` or `Course`) of the object that is currently being used"}, {"instruction": "Implement a Python program that can store and retrieve data about a company's employees using a struct or a class."}, {"instruction": "Create a Python class `Student` that represents a student in a university. The class should store the student's name, age, and department. The class should have methods to add a student to the university's roster and to print the roster."}, {"instruction": "Write a Python program that takes a list of integers as input, sorts them, and outputs them sorted in descending order."}, {"instruction": "Implement a Python class `Book` that encapsulates a book\u2019s title, author, and page count. The class should have a constructor that takes as input the title, author, and page count, and a destructor that prints a goodbye message. The class should also have accessor methods for each member variable."}, {"instruction": "Create a Python program that implements a list of rectangles, which are represented as four integers (x, y, width, height). Implement the following methods for the class Rectangle:\n\n- `contains`: returns true if the point (x, y) is inside the rectangle\n- `get_area`\n- `get_perimeter`\n- `get_points`\n\nThe program should use a list of Rectangle objects to test the functionality of the Rectangle class."}, {"instruction": "Create a Python class `Student` that represents a student."}, {"instruction": "Create a Python program that stores some data about people and their contact information in a list of `Person` objects."}, {"instruction": "Create a Python class `Point` with two `int` members x and y, and two `Point` member functions `getX` and `getY`."}, {"instruction": "Create a Python program that implements a deck of cards using a `list`."}, {"instruction": "Create a Python program that implements a class `Person` with the following properties:\n\n- age: age of the person\n- first\\_name: first name of the person\n- last\\_name: last name of the person\n- address: address of the person"}, {"instruction": "Implement a Python program that performs the following function:\n\n```python\ndef number_reverser(n):\n    \"\"\"\n    This function reverses a non-negative integer. The input and output are both strings.\n\n    Examples:\n    >>> number_reverser(2)\n    '2'\n    >>> number_reverser(123)\n    '321'\n    \"\"\"\n    return str(n)[::-1]\n```"}, {"instruction": "Create a Python class `SortedSet` that inherits from the `set` class and satisfies the following properties:\n\n- `SortedSet` objects are ordered in ascending order\n- the `add` method works as `set.add`\n- the `remove` method works as `set.discard`\n- the `union` method works as `set.union`\n- the `intersection` method works as `set.intersection`\n- the `difference` method works as `set.difference`"}, {"instruction": "Create a `Point` class in Python that implements the `__str__` magic method."}, {"instruction": "Create a Python class `Rectangle` that represents a rectangle with a given width and height. The class must have an appropriate constructor, a destructor, and a method `area` that calculates the area."}, {"instruction": "Write a Python class `Node` that represents a singly linked list node. The class should provide methods to access and modify the node's data and the previous and next nodes (if any)."}, {"instruction": "Create a Python class `Node` with attributes `data` and `next`, along with the following methods:\n- `__init__`\n- `append`\n- `prepend`\n- `insert`\n- `__str__`\n- `__iter__`\n- `__eq__`\n- `__ne__`\n\nThe class should be able to be used to create a singly-linked list."}, {"instruction": "Create a Python program that implements a stack using a Python list."}, {"instruction": "Write a Python program that implements a Linked List in the form of a class."}, {"instruction": "Write a Python program that implements a simple linked list. The program should have the following functionality:\n\n1. Add a new node to the end of the list\n2. Remove a node from the head of the list\n3. Create a new linked list given a linked list node"}, {"instruction": "Write a Python program that implements a linked list data structure.\n/c++/7/src/function.cpp\nint isPalindrome(std::string str) {\n    auto l = str.begin();\n    auto r = str.end() - 1;\n\n    while (l < r) {\n        if (*l == *r) {\n            l++;\n            r--;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    return 1;\n}\n/c++/7/src/function.cpp\n#include <string>\n\nint countDigits(int num) {\n    int digits = 0;\n\n    while (num > 0) {\n        num /= 10;\n        digits++;\n    }\n\n    return digits;\n}\n/c++/9/src/linked_list.cpp\n#include <iostream>\n#include <vector>\n\nstruct node {\n    int data;\n    node* next;\n};\n\nclass linked_list {\nprivate:\n    node* head;\n    node* tail;\n    int size;\n\npublic:\n    linked_list() {\n        head = nullptr;\n        tail = nullptr;\n        size = 0;\n    }\n\n    ~linked_list() {\n        while (!isEmpty()) {\n            pop_back();\n        }\n    }\n\n    void push_back(int x) {\n        node* temp = new node;\n        temp -> data = x;\n        temp -> next = nullptr;\n\n        if (isEmpty()) {\n            head = temp;\n            tail = temp;\n        }\n        else {\n            tail -> next = temp;\n            tail = temp;\n        }\n\n        size++;\n    }\n\n    void pop_back() {\n        if (!isEmpty()) {\n            node* temp = head;\n\n            if (head == tail) {\n                head = nullptr;\n                tail = nullptr;\n            }\n            else {\n                while (temp -> next != tail) {\n                    temp = temp -> next;\n                }\n\n                tail = temp;\n                tail -> next = nullptr;\n            }\n\n            delete temp;\n            size--;\n        }\n    }\n\n    void print() {\n        node* temp = head;\n\n        while (temp != nullptr) {\n            std::cout << temp -> data << \" \";\n            temp = temp -> next;\n        }\n\n        std::cout << std::endl;\n    }\n\n    bool isEmpty() {\n        return size == 0;\n    }\n\n    int size() {\n        return this -> size;\n    }\n};\n\nint main() {\n    linked_list list;\n\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n\n    for (int num : nums) {\n        list.push_back(num);\n    }\n\n    list.print();\n\n    list.pop_back();\n    list.pop_back();\n\n    list.print();\n    std::cout << list.isEmpty() << std::endl;\n\n    return 0;\n}\n/c++/7/src/function.cpp\n#include <cstdlib>\n\nint countDigits(int num) {\n    return log10(num) + 1;\n}\n/c++/8/src/function.cpp\n#include <string>\n\nstd::string toBinary(int num) {\n    std::string binary = \"\";\n\n    while (num != 0) {\n        binary += std::to_string(num % 2);\n        num /= 2;\n    }\n\n    return binary;\n}\n/c++/7/src/function.cpp\n#include <string>\n\nint countDigits(int num) {\n    int digits = 0;\n\n    while (num > 0) {\n        num /= 10;\n        digits++;\n    }\n\n    return digits;\n}\n\nint isPalindrome(std::string str) {\n    int result = 1;\n    int l = 0;\n    int r = str.length() - 1;\n\n    while (l < r) {\n        if (str[l] == str[r]) {\n            l++;\n            r--;\n        }\n        else {\n            result = 0;\n            break;\n        }\n    }\n\n    return result;\n}\n/c++/6/src/function.cpp\n#include <string>\n\nstd::string reverseString(std::string str) {\n    std::string reversed = \"\";\n\n    for (int i = str.length() - 1; i >= 0; i--) {\n        reversed += str[i];\n    }\n\n    return reversed;\n}"}, {"instruction": "Write a Python program that implements the following data structures:\n- a `Stack` class with a single `push` and `pop` method\n- a `Queue` class with a single `enqueue` and `dequeue` method\n- a `CircularQueue` class with a single `enqueue` and `dequeue` method\n- a `HashMap` class that maps strings to integers\n- a `HashSet` class that stores unique integers\n- a `Tree` class that stores integers as nodes in a binary tree\n- a `Graph` class that stores integers as nodes in a directed graph"}, {"instruction": "Write a Python program that prints all prime numbers less than 100."}, {"instruction": "Create a Python program that reads a file into a Python list of strings and prints the sum of the lengths of the strings."}, {"instruction": "Write a Python program that simulates a deck of cards with the following properties:\n- 52 cards of each suit (clubs, diamonds, hearts, spades)\n- full deck can be shuffled\n- can be dealt up to 5 cards at a time"}, {"instruction": "Develop a Python program that reads a CSV file containing student data (ID, name, and score) and outputs a tree-like report of the scores."}, {"instruction": "Create a Python class `MyQueue` that implements a queue data structure using Python lists."}, {"instruction": "Write a Python class `Node` to represent a linked list node. Create a class `Queue` which supports the following operations:\n- enqueue: add a new node to the tail of the queue\n- dequeue: remove and return the first node from the queue\n- peek: return the first node of the queue without removing it\n- length: return the number of nodes in the queue\n- is_empty: return True if the queue is empty, False otherwise"}, {"instruction": "Create a Python class `Complex` that represents a complex number and implement its arithmetic operations."}, {"instruction": "Write a Python class `Queue` that implements a queue data structure."}, {"instruction": "Create a Python struct named `Person` with three data members: a name, an age, and a height. Write a program that creates a list of `Person` objects."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: type conversion, soap instantiation\n\n### Task", "fingerprint": null, "content": {"code": "soap_instantiate__ns3__FECAESolicitarResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate__ns3__FECAESolicitarResponse(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\t_ns3__FECAESolicitarResponse *p;\n\tsize_t k = sizeof(_ns3__FECAESolicitarResponse);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip__ns3__FECAESolicitarResponse, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, _ns3__FECAESolicitarResponse);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, _ns3__FECAESolicitarResponse, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated _ns3__FECAESolicitarResponse location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_in__ns3__FECAESolicitarResponse"}, "id": 181, "seed": "soap_instantiate__ns3__FECAESolicitarResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate__ns3__FECAESolicitarResponse(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\t_ns3__FECAESolicitarResponse *p;\n\tsize_t k = sizeof(_ns3__FECAESolicitarResponse);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip__ns3__FECAESolicitarResponse, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, _ns3__FECAESolicitarResponse);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, _ns3__FECAESolicitarResponse, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated _ns3__FECAESolicitarResponse location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "concepts": ["type conversion", "soap instantiation"], "parsing_result": [{"instruction": "Create a Python class `soap` that represents a soap."}, {"instruction": "Create a Python class `Soap` that accepts a string name and integer size as parameters, and defines the following methods:\n\n- `__init__`: a constructor that sets the instance variable `name` to the string passed in as the first parameter, and `size` to the integer passed in as the second parameter. The constructor should also define the instance variables `color` and `price` to values of your choice.\n- `getColor()`: a method that returns `color`.\n- `getPrice()`: a method that returns `price`."}, {"instruction": "Create a Python class `Soap` that contains two attributes, `color` and `length`, and two methods, `getColor` and `setColor`."}, {"instruction": "Write a Python class that accepts a soap request and creates a soap response."}, {"instruction": "Write a Python class `Soap` that stores a soap's type, color, and consistency."}, {"instruction": "Write a Python class `Soap` that takes a soap name and a chemical composition and stores it in an instance variable."}, {"instruction": "Create a Python class `Soap` that models a soap and includes the following properties:\n- self.name: the name of the soap\n- self.color: the color of the soap (string)\n- self.scent: the scent of the soap (string)\n- self.scent_strength: the strength of the scent, expressed as an integer (0-100)\n- self.price: the price of the soap, expressed as a decimal (float)"}, {"instruction": "Create a Python class `Soap` with two attributes, `color` and `thickness`, and a method `change_color` that changes the `color` to a string argument."}, {"instruction": "Create a Python class `Soap` that contains member variables `soap_type, color, oils, volume`, and public methods `convert_to_soap(soap_type, color, oils, volume)`.\n/python_snippets/paraphrase/paraphrase.py\nimport numpy as np\r\nfrom nltk.tokenize import word_tokenize\r\nfrom nltk.corpus import stopwords\r\nfrom nltk.stem import WordNetLemmatizer\r\nfrom sklearn.feature_extraction.text import CountVectorizer\r\nfrom sklearn.metrics.pairwise import cosine_similarity\r\nimport pickle\r\n\r\ndef read_data(path):\r\n    with open(path, 'r') as file:\r\n        data = file.read()\r\n    return data\r\n\r\ndef lemmatize(sentence):\r\n    lemmatizer = WordNetLemmatizer()\r\n    return [lemmatizer.lemmatize(word) for word in sentence]\r\n\r\ndef create_bag_of_words(data):\r\n    stop_words = stopwords.words('english')\r\n\r\n    cleaned_data = []\r\n    for sentence in data:\r\n        sentence = sentence.lower()\r\n        sentence = word_tokenize(sentence)\r\n        sentence = [word for word in sentence if word not in stop_words]\r\n        sentence = lemmatize(sentence)\r\n        cleaned_data.append(' '.join(sentence))\r\n\r\n    count_vectorizer = CountVectorizer()\r\n    count_vectorizer.fit(cleaned_data)\r\n    return cleaned_data, count_vectorizer\r\n\r\ndef get_document_vectors(cleaned_data, count_vectorizer):\r\n    document_vectors = count_vectorizer.transform(cleaned_data)\r\n    document_vectors = document_vectors.toarray()\r\n    return document_vectors\r\n\r\ndef calculate_cosine_similarity(document_vectors):\r\n    cosine_similarity_matrix = cosine_similarity(document_vectors)\r\n    return cosine_similarity_matrix\r\n\r\ndef get_sentence_index(cosine_similarity_matrix, sentence):\r\n    return np.argmax(cosine_similarity_matrix[sentence])\r\n\r\ndef paraphrase(cleaned_data, cosine_similarity_matrix, count_vectorizer):\r\n    while True:\r\n        print('Paraphrase your sentence: ')\r\n        user_input = input()\r\n\r\n        cleaned_user_input = count_vectorizer.transform([user_input])\r\n        cleaned_user_input = cleaned_user_input.toarray()\r\n\r\n        new_cosine_similarity_matrix = np.vstack((cosine_similarity_matrix, cleaned_user_input))\r\n        new_cosine_similarity_matrix = np.delete(new_cosine_similarity_matrix, 0, axis=0)\r\n\r\n        new_cosine_similarity_matrix = calculate_cosine_similarity(new_cosine_similarity_matrix)\r\n\r\n        user_input_index = get_sentence_index(new_cosine_similarity_matrix, -1)\r\n        print(cleaned_data[user_input_index])\r\n\r\ndef main():\r\n    data = read_data('paraphrase.txt')\r\n    cleaned_data, count_vectorizer = create_bag_of_words(data)\r\n    document_vectors = get_document_vectors(cleaned_data, count_vectorizer)\r\n    cosine_similarity_matrix = calculate_cosine_similarity(document_vectors)\r\n    paraphrase(cleaned_data, cosine_similarity_matrix, count_vectorizer)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n/python_snippets/paraphrase/README.md\n# Paraphrase\n## Description\nCreate a Python program that takes input from a user and returns the paraphrased version of the sentence closest to it in a given corpus."}, {"instruction": "Implement a `Soap` class in Python."}, {"instruction": "Create an object-oriented C# class `Soap` that models a soap (shampoo) object. It should have the following properties:\n- `name`: the name of the soap (text)\n- `price`: the cost of the soap (numeric)\n- `discount`: the discount the soap can offer (numeric)\n\nIt should also have the following methods:\n- `applyDiscount`: a method that accepts no parameters and returns a discounted price (numeric). This method should deduct the given discount from the original price.\n- `applyReward`: a method that accepts a reward (numeric) and returns a discounted price (numeric). This method should deduct the given reward from the original price.\n- `applyRewardAndDiscount`: a method that accepts a reward (numeric) and a discount (numeric) and returns a discounted price (numeric). This method should deduct the given reward and discount from the original price.\n- `applyAll`: a method that accepts three parameters and returns a discounted price (numeric). This method should deduct the given reward, discount, and then original price."}, {"instruction": "Create a Python class `Soap` that implements a soap bar."}, {"instruction": "Create a Python class `Soap` that takes the name of a SOAP action and returns the related SOAP action."}, {"instruction": "Write a Python class `Soap` that represents a soap."}, {"instruction": "Create a Python class `Soap` that contains methods to convert a Celsius reading to Fahrenheit, to calculate the Soap Index, and to calculate the Fahrenheit reading to be used for Soap Index calculations."}, {"instruction": "Write a Python class `Soap` that is initialized with a soap name, a brand, and a price."}, {"instruction": "Write a Python class `Soap` that instantiates a soap object with a `brand`, `color`, `size`, and `price`."}, {"instruction": "Write a Python class `Soap` that contains the `name`, `color`, and `texture` of a soap."}, {"instruction": "Implement a Python SOAP client with the following:\n1. A class `SoapClient` that accepts a URL.\n2. A class `SoapRequest` that is initialized with a string and an integer, and that has an instance method `execute`."}, {"instruction": "Create a Python class `Soap` that stores the name, color, and amount of soap in a soap jar."}, {"instruction": "Write a Python class `Soap` that has methods `get_soap`, `set_soap`, `get_soap_type`, and `soap_factory`. `get_soap_type` returns the type of soap (e.g., bar soap, shampoo type); `get_soap` returns the type of soap and its smell (e.g., bar soap with an aromatic scent); `set_soap` sets the soap type and smell (e.g., bar soap with an aromatic scent); `soap_factory` randomly generates soap objects of type `Soap`."}, {"instruction": "Write a Python class `Soap` that has two attributes: type and color."}, {"instruction": "Create a Python class `Soap` with the following attributes: `name`, `brand`, `price`, and `size`."}, {"instruction": "Create a Python class `Soap` that represents a soap."}, {"instruction": "Create a Python class `soap` that represents a soap."}, {"instruction": "Create a Python class `Soap` with three properties: `name`, `producer`, and `price`. Create a class method which takes a set of soap objects and returns a `total_price` property for them."}, {"instruction": "Create a Python class `Soap` that represents a soap and has the following properties:\n\n- manufacturer: string\n- color: string\n- price: float, in USD\n- type: string\n- length: int (in millimeters)"}, {"instruction": "Create a Python class `Soap` that takes a name as input and stores it as a member variable."}, {"instruction": "Create a Python class `Soap` that uses the `Soap.py` template to store data about a soap."}, {"instruction": "Write a Python class `Soap` that models a soap with a name, a brand, and a concentration."}, {"instruction": "Create a Python class `Soap` that represents a soap with a name, brand, and price."}, {"instruction": "Create a Python class `Soap` that takes a name and an amount of soap (in ounces) and has methods to increase the amount of soap, decrease the amount of soap, and get the amount of soap."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: unit testing, kernel launch, kernel arguments, memory copying, STL vectors, STL algorithms\n\n### Task", "fingerprint": null, "content": {"code": "TYPED_TEST(RocprimBlockReduceInputArrayTests, Reduce)\n{\n    using T = typename TestFixture::type;\n    using binary_op_type = typename TestFixture::binary_op_type;\n    constexpr auto algorithm = TestFixture::algorithm;\n    constexpr size_t block_size = TestFixture::block_size;\n    constexpr size_t items_per_thread = TestFixture::items_per_thread;\n\n    // Given block size not supported\n    if(block_size > test_utils::get_max_block_size())\n    {\n        return;\n    }\n\n    const size_t items_per_block = block_size * items_per_thread;\n    const size_t size = items_per_block * 37;\n    const size_t grid_size = size / items_per_block;\n    // Generate data\n    std::vector<T> output = test_utils::get_random_data<T>(size, 2, 50);\n\n    // Output reduce results\n    std::vector<T> output_reductions(size / block_size, 0);\n\n    // Calculate expected results on host\n    std::vector<T> expected_reductions(output_reductions.size(), 0);\n    binary_op_type binary_op;\n    for(size_t i = 0; i < output.size() / items_per_block; i++)\n    {\n        T value = 0;\n        for(size_t j = 0; j < items_per_block; j++)\n        {\n            auto idx = i * items_per_block + j;\n            value = apply(binary_op, value, output[idx]);\n        }\n        expected_reductions[i] = value;\n    }\n\n    // Preparing device\n    T* device_output;\n    HIP_CHECK(hipMalloc(&device_output, output.size() * sizeof(T)));\n    T* device_output_reductions;\n    HIP_CHECK(hipMalloc(&device_output_reductions, output_reductions.size() * sizeof(T)));\n\n    HIP_CHECK(\n        hipMemcpy(\n            device_output, output.data(),\n            output.size() * sizeof(T),\n            hipMemcpyHostToDevice\n        )\n    );\n\n    HIP_CHECK(\n        hipMemcpy(\n            device_output_reductions, output_reductions.data(),\n            output_reductions.size() * sizeof(T),\n            hipMemcpyHostToDevice\n        )\n    );\n\n    // Running kernel\n    hipLaunchKernelGGL(\n        HIP_KERNEL_NAME(reduce_array_kernel<block_size, items_per_thread, algorithm, T, binary_op_type>),\n        dim3(grid_size), dim3(block_size), 0, 0,\n        device_output, device_output_reductions\n    );\n\n    // Reading results back\n    HIP_CHECK(\n        hipMemcpy(\n            output_reductions.data(), device_output_reductions,\n            output_reductions.size() * sizeof(T),\n            hipMemcpyDeviceToHost\n        )\n    );\n\n    // Verifying results\n    test_utils::assert_near(output_reductions, expected_reductions, 0.05);\n\n    HIP_CHECK(hipFree(device_output));\n    HIP_CHECK(hipFree(device_output_reductions));\n}", "docstring": "// load", "function_name": "reduce_array_kernel"}, "id": 186, "seed": "TYPED_TEST(RocprimBlockReduceInputArrayTests, Reduce)\n{\n    using T = typename TestFixture::type;\n    using binary_op_type = typename TestFixture::binary_op_type;\n    constexpr auto algorithm = TestFixture::algorithm;\n    constexpr size_t block_size = TestFixture::block_size;\n    constexpr size_t items_per_thread = TestFixture::items_per_thread;\n\n    // Given block size not supported\n    if(block_size > test_utils::get_max_block_size())\n    {\n        return;\n    }\n\n    const size_t items_per_block = block_size * items_per_thread;\n    const size_t size = items_per_block * 37;\n    const size_t grid_size = size / items_per_block;\n    // Generate data\n    std::vector<T> output = test_utils::get_random_data<T>(size, 2, 50);\n\n    // Output reduce results\n    std::vector<T> output_reductions(size / block_size, 0);\n\n    // Calculate expected results on host\n    std::vector<T> expected_reductions(output_reductions.size(), 0);\n    binary_op_type binary_op;\n    for(size_t i = 0; i < output.size() / items_per_block; i++)\n    {\n        T value = 0;\n        for(size_t j = 0; j < items_per_block; j++)\n        {\n            auto idx = i * items_per_block + j;\n            value = apply(binary_op, value, output[idx]);\n        }\n        expected_reductions[i] = value;\n    }\n\n    // Preparing device\n    T* device_output;\n    HIP_CHECK(hipMalloc(&device_output, output.size() * sizeof(T)));\n    T* device_output_reductions;\n    HIP_CHECK(hipMalloc(&device_output_reductions, output_reductions.size() * sizeof(T)));\n\n    HIP_CHECK(\n        hipMemcpy(\n            device_output, output.data(),\n            output.size() * sizeof(T),\n            hipMemcpyHostToDevice\n        )\n    );\n\n    HIP_CHECK(\n        hipMemcpy(\n            device_output_reductions, output_reductions.data(),\n            output_reductions.size() * sizeof(T),\n            hipMemcpyHostToDevice\n        )\n    );\n\n    // Running kernel\n    hipLaunchKernelGGL(\n        HIP_KERNEL_NAME(reduce_array_kernel<block_size, items_per_thread, algorithm, T, binary_op_type>),\n        dim3(grid_size), dim3(block_size), 0, 0,\n        device_output, device_output_reductions\n    );\n\n    // Reading results back\n    HIP_CHECK(\n        hipMemcpy(\n            output_reductions.data(), device_output_reductions,\n            output_reductions.size() * sizeof(T),\n            hipMemcpyDeviceToHost\n        )\n    );\n\n    // Verifying results\n    test_utils::assert_near(output_reductions, expected_reductions, 0.05);\n\n    HIP_CHECK(hipFree(device_output));\n    HIP_CHECK(hipFree(device_output_reductions));\n}", "concepts": ["unit testing", "kernel launch", "kernel arguments", "memory copying", "STL vectors", "STL algorithms"], "parsing_result": [{"instruction": "Write a Python program that computes the average temperatures of all temperatures in a day. Write the program in such a way that it can be called from the command line, accepting as input the name of a temperature file, and as output the average."}, {"instruction": "Implement the following GPU kernels in CUDA C++:\n- `vectorAdd` that adds two vectors of integers\n- `vectorMax` that finds the maximum value in a vector of integers\n- `vectorAverage` that finds the average value in a vector of integers"}, {"instruction": "Write a Python program that calculates the Fibonacci sequence up to the nth Fibonacci number."}, {"instruction": "Implement a C++ function `sine` that calculates the sine of a real number using a 15-degree polynomial approximation, while using a STL vector and algorithms for the polynomial coefficients."}, {"instruction": "Write a program in Python that implements the 2D kernel convolution of two images of the same size.\n/tasks/celsius_to_fahrenheit.cpp\n#include \"../lib/helpers.h\"\n\nint main(void) {\n    double celsius;\n    double fahrenheit;\n\n    std::cout << \"Enter temperature in Celsius: \";\n    std::cin >> celsius;\n\n    // 32\u00b0F is the freezing point of water.\n    // 212\u00b0F is the boiling point of water.\n    fahrenheit = celsius * 9 / 5 + 32;\n\n    std::cout << celsius << \"\u00b0C is \" << fahrenheit << \"\u00b0F.\" << std::endl;\n\n    return 0;\n}\n/tasks/is_anagram.cpp\n#include \"../lib/helpers.h\"\n\n// 1. Typecast each character to lowercase.\n// 2. Sort each string.\n// 3. Compare the two strings.\nbool isAnagram(const std::string &first, const std::string &second) {\n    std::string firstLowercase = first;\n    std::string secondLowercase = second;\n\n    for (char &ch : firstLowercase) {\n        ch = tolower(ch);\n    }\n\n    for (char &ch : secondLowercase) {\n        ch = tolower(ch);\n    }\n\n    std::sort(firstLowercase.begin(), firstLowercase.end());\n    std::sort(secondLowercase.begin(), secondLowercase.end());\n\n    return firstLowercase == secondLowercase;\n}\n\nint main(void) {\n    std::string first;\n    std::string second;\n    bool result;\n\n    std::cout << \"Enter first word: \";\n    std::cin >> first;\n\n    std::cout << \"Enter second word: \";\n    std::cin >> second;\n\n    result = isAnagram(first, second);\n\n    std::cout << (result ? \"The words you entered are anagrams of each other.\" : \"The words you entered are not anagrams of each other.\") << std::endl;\n\n    return 0;\n}\n/tasks/remove_duplicates.cpp\n#include \"../lib/helpers.h\"\n\n// 1. Create a set to store unique elements.\n// 2. Traverse the vector.\n// 3. Add each element to the set.\n// 4. Copy the set to a vector.\nstd::vector<int> removeDuplicates(std::vector<int> &values) {\n    std::vector<int> uniqueValues;\n    std::set<int> uniqueSet;\n\n    for (int value : values) {\n        uniqueSet.insert(value);\n    }\n\n    for (int value : uniqueSet) {\n        uniqueValues.push_back(value);\n    }\n\n    return uniqueValues;\n}\n\nint main(void) {\n    std::vector<int> values;\n    std::vector<int> uniqueValues;\n    std::string input;\n\n    std::cout << \"Enter a list of integers: \";\n    std::cin >> input;\n\n    values = toVec(input);\n\n    uniqueValues = removeDuplicates(values);\n\n    printVec(uniqueValues);\n\n    return 0;\n}\n/tasks/max_of_two.cpp\n#include \"../lib/helpers.h\"\n\nint maxOfTwo(int first, int second) {\n    return first > second ? first : second;\n}\n\nint main(void) {\n    int first;\n    int second;\n    int result;\n\n    std::cout << \"Enter first number: \";\n    std::cin >> first;\n\n    std::cout << \"Enter second number: \";\n    std::cin >> second;\n\n    result = maxOfTwo(first, second);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}\n/tasks/fibonacci.cpp\n#include \"../lib/helpers.h\"\n\n// 1. Initialize a set with the first two terms of the sequence.\n// 2. Create a vector to hold the terms of the sequence.\n// 3. Traverse the vector, adding each term to the set.\n// 4. Add the next term to the vector.\n// 5. Return the value of the next term.\nint fibonacci(int n) {\n    int term = 0;\n    std::set<int> terms = {0, 1};\n    std::vector<int> sequence;\n\n    sequence.push_back(0);\n    sequence.push_back(1);\n\n    for (int i = 2; i <= n; i++) {\n        terms.insert(sequence[i - 1] + sequence[i - 2]);\n        sequence.push_back(sequence[i - 1] + sequence[i - 2]);\n    }\n\n    if (terms.count(n) > 0) {\n        term = sequence[n];\n    }\n\n    return term;\n}\n\nint main(void) {\n    int n;\n    int result;\n\n    std::cout << \"Enter a term number: \";\n    std::cin >> n;\n\n    result = fibonacci(n);\n\n    std::cout << n << \"th Fibonacci number is \" << result << std::endl;\n\n    return 0;\n}\n/tasks/sum_vector.cpp\n#include \"../lib/helpers.h\"\n\n// 1. Create an accumulator variable to store the sum.\n// 2. Traverse the vector.\n// 3. Add each element to the accumulator.\nint sumVector(std::vector<int> &values) {\n    int sum = 0;\n\n    for (int value : values) {\n        sum += value;\n    }\n\n    return sum;\n}\n\nint main(void) {\n    std::vector<int> values;\n    std::string input;\n\n    std::cout << \"Enter a list of integers: \";\n    std::cin >> input;\n\n    values = toVec(input);\n\n    std::cout << sumVector(values) << std::endl;\n\n    return 0;\n}"}, {"instruction": "Implement a program in Python that computes the mean of a vector of integers using the two-kernel method."}, {"instruction": "Write a Python program that implements the following kernel for a single-precision Gaussian kernel, with dimensions 128x128 and sigma=0.25:\n\n![image](https://wikimedia.org/api/rest_v1/media/math/render/svg/7667c7602c48f3cd6eb360df6e041784e78b5715)\n\nThe kernel should be launched using the `kernel_launch` function. To launch the kernel, you must provide three arguments:\n\n- `grid_dim` is a 2-tuple of integers, representing the number of threads in the grid along the x- and y-dimensions.\n- `block_dim` is a 2-tuple of integers, representing the number of threads in the block along the x- and y-dimensions.\n- `image` is a 2-dimensional numpy array of shape `grid_dim * block_dim`.\n\nMoreover, the kernel should copy the `image` array to the GPU, and then launch the kernel. The kernel should copy the `image` array back to the host and return the result."}, {"instruction": "Create a Python program `launch_kernel` that launches a CUDA kernel on a GPU with 100000000 elements and a 500x500 matrix."}, {"instruction": "Write a Python program that, given a set of points, computes the distance between the two closest points."}, {"instruction": "Implement a Python program that computes the dot product of two vectors using the `numpy` package."}, {"instruction": "Write a Python program that accepts a 10x10 matrix of integers as input and prints the sum of the values in the upper-right and lower-left corners."}, {"instruction": "Write a Python program that implements a matrix multiplication kernel for two matrices of the same size."}, {"instruction": "Implement an OpenMP parallel program that performs kernel launch and memory copying."}, {"instruction": "Create a Python function `count_in_list`, which returns the number of elements in a list that are greater than 0."}, {"instruction": "Write a Python program that uses the CUDA library and CUDA C++ to call a CUDA kernel that calculates pi."}, {"instruction": "Implement a C++ function `sumVector` using vector data structures."}, {"instruction": "Implement a Python program that takes in a vector of integers, and a set of C++ kernels, and calls the kernels on the vector."}, {"instruction": "Create a Python function that returns the average of matrix entries."}, {"instruction": "Write a Python script to perform a mathematical computation on massive arrays."}, {"instruction": "Write a Python program that takes two strings as input, and returns the Hamming distance between the two strings.\n#include <assert.h>\n#include <iostream>\n#include <vector>\n#include <numeric>\nusing namespace std;\n\nint main() {\n    int sum = 0;\n    vector<int> nums{1, 2, 3, 4, 5};\n    for (auto x : nums) {\n        sum += x;\n    }\n    cout << \"Sum: \" << sum << endl;\n    assert(sum == 15);\n    return 0;\n}#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sumVector(const std::vector<int> &nums) {\n    return std::accumulate(nums.begin(), nums.end(), 0);\n}\n\nint main() {\n    std::vector<int> nums{1, 2, 3, 4, 5};\n    int sum = sumVector(nums);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}#include <iostream>\n#include <vector>\n\nint sumVector(const std::vector<int> &nums) {\n    int sum = 0;\n    for (auto x : nums) {\n        sum += x;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> nums{1, 2, 3, 4, 5};\n    int sum = sumVector(nums);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}#include <iostream>\n\nint factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    int result = factorial(n);\n    std::cout << \"Factorial of \" << n << \": \" << result << std::endl;\n    return 0;\n}#include <iostream>\n#include <vector>\n#include <numeric>\n#include <algorithm>\n\nstd::vector<int> removeDuplicates(const std::vector<int> &nums) {\n    std::vector<int> distinct;\n    for (auto x : nums) {\n        if (std::find(distinct.begin(), distinct.end(), x) == distinct.end()) {\n            distinct.push_back(x);\n        }\n    }\n    return distinct;\n}\n\nint main() {\n    std::vector<int> nums{1, 2, 3, 4, 5, 5, 5};\n    std::vector<int> distinct = removeDuplicates(nums);\n    for (auto x : distinct) {\n        std::cout << x << std::endl;\n    }\n    return 0;\n}#include <iostream>\n#include <vector>\n\nstd::vector<int> removeDuplicates(const std::vector<int> &nums) {\n    std::vector<int> distinct;\n    for (auto x : nums) {\n        if (std::find(distinct.begin(), distinct.end(), x) == distinct.end()) {\n            distinct.push_back(x);\n        }\n    }\n    return distinct;\n}\n\nint main() {\n    std::vector<int> nums{1, 2, 3, 4, 5, 5, 5};\n    std::vector<int> distinct = removeDuplicates(nums);\n    for (auto x : distinct) {\n        std::cout << x << std::endl;\n    }\n    return 0;\n}#include <iostream>\n\nint maxOfTwo(int a, int b) {\n    return a > b ? a : b;\n}\n\nint main() {\n    int a = 5, b = 10;\n    int result = maxOfTwo(a, b);\n    std::cout << \"Max of \" << a << \" and \" << b << \": \" << result << std::endl;\n    return 0;\n}#include <iostream>\n#include <vector>\n\nstd::vector<int> removeDuplicates(const std::vector<int> &nums) {\n    std::vector<int> distinct;\n    for (auto x : nums) {\n        if (std::find(distinct.begin(), distinct.end(), x) == distinct.end()) {\n            distinct.push_back(x);\n        }\n    }\n    return distinct;\n}\n\nint main() {\n    std::vector<int> nums{1, 2, 3, 4, 5, 5, 5};\n    std::vector<int> distinct = removeDuplicates(nums);\n    for (auto x : distinct) {\n        std::cout << x << std::endl;\n    }\n    return 0;\n}#include <iostream>\n\nint maxOfTwo(int a, int b) {\n    return a > b ? a : b;\n}\n\nint main() {\n    int a = 5, b = 10;\n    int result = maxOfTwo(a, b);\n    std::cout << \"Max of \" << a << \" and \" << b << \": \" << result << std::endl;\n    return 0;\n}#include <iostream>\n\nint maxOfTwo(int a, int b) {\n    return a > b ? a : b;\n}\n\nint main() {\n    int a = 5, b = 10;\n    int result = maxOfTwo(a, b);\n    std::cout << \"Max of \" << a << \" and \" << b << \": \" << result << std::endl;\n    return 0;\n}#include <iostream>\n\nint maxOfTwo(int a, int b) {\n    return a > b ? a : b;\n}\n\nint main() {\n    int a = 5, b = 10;\n    int result = maxOfTwo(a, b);\n    std::cout << \"Max of \" << a << \" and \" << b << \": \" << result << std::endl;\n    return 0;\n}"}, {"instruction": "Create a Python program that implements the [kernel launch](https://www.google.com/search?q=kernel+launch&rlz=1C5CHFA_enUS795US795&oq=kernel+launch&aqs=chrome..69i57j0i131i433l2j0i433l3.5378j0j7&sourceid=chrome&ie=UTF-8) and [kernel arguments](https://www.google.com/search?rlz=1C5CHFA_enUS795US795&sxsrf=ALeKk01Y_8zM_S8O-xY1m9v41-7Z_J83w%3A1586922380404&ei=o3CLXu6cN8m2_gTcw56YCQ&q=kernel+arguments&oq=kernel+arguments&gs_l=psy-ab.3..0i22i30j0l3j0i131i67j0i22i30.19623.22559..23906...0.0..0.118.374.1j1......0....1..gws-wiz.......0i71j35i39j0i131i67j0i5i131j35i39i19j0i67.DZ_jR2O59IU&ved=0ahUKEwihq43Q5t7kAhUT9WMKHfgtD-YQ4dUDCAs&uact=5) functions."}, {"instruction": "Create a Python function `computePi` that computes the value of Pi to 100 decimal digits using CUDA C++ and the Machin-like formula."}, {"instruction": "Create a Python program that reads in a file of integers, and then launches a CUDA kernel to calculate the sum of the integers."}, {"instruction": "Create a Python function that launches an NVIDIA CUDA kernel that copies data from device memory to host memory."}, {"instruction": "Use the Python programming language to implement a Cuda-enabled kernel that calculates the matrix product of two matrices of arbitrary dimensions."}, {"instruction": "Write a Python program that computes the dot product of two vectors."}, {"instruction": "Write a Python function `lavaLamp` that computes the surface area of a lava lamp (a truncated pyramid)."}, {"instruction": "Write a Python function `weightAllKernels` that reads a list of weight values from a text file and returns a list of averaged values. The text file is structured as follows:\n\n```\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n```"}, {"instruction": "Create a Python program that uses a CUDA device to calculate the average of integers in a vector."}, {"instruction": "Create a C++ program with a Python interface to compute the factorial of a non-negative integer."}, {"instruction": "Implement a Python program that performs a simple Gauss-Jordan elimination on a 3x3 matrix."}, {"instruction": "Implement a Python function `tensor_dot` that performs the tensor dot product of two N-dimensional arrays without using any built-in functions."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: k means clustering, clustering, clustering algorithm, tabular data manipulation, iterative algorithm, in-place mutation, fault tolerance, data manipulation\n\n### Task", "fingerprint": null, "content": {"code": "int main_loop_file_kmeans(string filepath,int kcluster = 5)\n{\n    //\u8bf7\u6c42\u722c\u53bbhtml\u7f51\u9875\n    getWebPageClass gwp;\n    string utf_8_content = gwp.get_web_page_by_read_XML_file(filepath);\n    //string utf_8_content = gwp.get_web_page_by_read_XML_file(\"/Users/pc/sohufile.html\");\n    string web_page_title = gwp.get_web_page_title();\n    \n    if(utf_8_content.size() <= 0)\n    {\n        cout<<\"get url content error\\n\";\n        return 0;\n    }\n    \n    //\u7f51\u9875html\u9884\u5904\u7406\n    contentProcess cp;\n    cp.parse_content_avoid_over_delete(utf_8_content);\n    \n    cout<<\"content size after process : \"<<utf_8_content.size()<<endl;\n    \n    int ret = save_content2file(\"/Users/pc/get_clear_page.html\", utf_8_content);\n    if(ret == 1)\n        cout<< \"save clear  file ok\"<<endl;\n    else\n        cout<< \"save clear  file error\"<<endl;\n    \n    //vector<struct lableFeature> lable_feature = get_content_lable_feature(utf_8_content);\n    vector<struct lableFeature> lable_feature = get_content_lable_feature_1124(utf_8_content);\n    for(int i=0;i<lable_feature.size();i++)\n        print_lable_feature(lable_feature[i]);\n    \n    vector<Feature> feature_vector = get_feature_vector(lable_feature);\n    \n    int max_kc =kcluster;\n    try\n    {\n        kmeansCluster kmeans(feature_vector);\n        //kmeans.kmeans_function();\n        kmeans.kmeans_with_select_k_function(max_kc);\n        int KC = kmeans.get_K();\n        for(int i=1;i<=KC;i++)\n            kmeans.print_kmeans_cluster(i);\n        \n        vector< vector<int> > lableId_cluster = kmeans.get_lableId_from_cluster();\n        vector<Feature> kCenter = kmeans.get_kCenter();\n        vector< vector<Feature> > cluster = kmeans.get_cluster();\n        \n        for(int i=1;i<=KC; i++)\n        {\n            print_content_by_kmeansCluster(lable_feature, lableId_cluster, kCenter,i);\n        }\n        \n        int page_text_cluster_k = kmeans.get_page_text_cluster_k();\n        \n        //vector<int> page_text_id_vector =  get_page_text_cluster_id_after_produce(lable_feature, lableId_cluster, page_text_cluster_k);\n        string selectLableName;\n        vector<int> page_text_id_vector =  get_page_text_cluster_id_after_produce(lable_feature, lableId_cluster, page_text_cluster_k,selectLableName);\n        \n        if(page_text_id_vector.size() == 0)\n        {\n            cout<<\" \u8fd9\u4e2a\u7f51\u9875\u975e\u65b0\u95fb\u6587\u672c\"<<endl;\n        }\n        else\n        {\n            for(int i=0;i<page_text_id_vector.size();i++)\n            {\n                cout<<page_text_id_vector[i]<<\" \";\n            }\n            cout<<endl;\n            cout<<\"\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u6b63\u6587\u6807\u7b7e\u4fe1\u606f\u5f00\u59cb\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            cout<<\"\u6807\u9898\uff1a\"<<web_page_title<<endl;\n            string page_text = print_page_content_by_id(lable_feature, page_text_id_vector,selectLableName);\n            cout<<\"\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u6b63\u6587\u6807\u7b7e\u4fe1\u606f\u7ed3\u675f\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            \n            cout<<\"\\n\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u7f51\u9875\u6b63\u6587\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            cout<<\"              \u65b0\u95fb\u6807\u9898\uff1a \"<<web_page_title<<endl;\n            cout<<\"\\n\" << page_text<<endl;\n            cout<<\"\\n\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u7f51\u9875\u6b63\u6587\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\\n\";\n            \n            string tmp(\"              \u65b0\u95fb\u6807\u9898\uff1a \");\n            page_text = tmp + web_page_title +\"\\n\\n\" + page_text;\n            ret = save_content2file(\"/Users/pc/get_page_text.html\", page_text);\n            if(ret == 1)\n                cout<< \"save page text  file ok\"<<endl;\n            else\n                cout<< \"save page text  file error\"<<endl;\n        }\n    }\n    catch(int e)\n    {\n        if(e == 1)\n            cout<<\"K must big than 0  or  featureVector  is empty\"<<endl;\n        else if(e==2)\n        {\n            cout<<\"No need to cluter,because K is small than featureCluster number \"<<endl;\n            \n        }\n        else if(e == 3)\n            cout << \"this page only has less two lables,maybe it's not a new page\\n\"<<endl;\n    }\n    return 1;\n}", "docstring": "//vector<struct lableFeature> lable_feature = get_content_lable_feature(utf_8_content);", "function_name": "main_loop_url_kmeans"}, "id": 189, "seed": "int main_loop_file_kmeans(string filepath,int kcluster = 5)\n{\n    //\u8bf7\u6c42\u722c\u53bbhtml\u7f51\u9875\n    getWebPageClass gwp;\n    string utf_8_content = gwp.get_web_page_by_read_XML_file(filepath);\n    //string utf_8_content = gwp.get_web_page_by_read_XML_file(\"/Users/pc/sohufile.html\");\n    string web_page_title = gwp.get_web_page_title();\n    \n    if(utf_8_content.size() <= 0)\n    {\n        cout<<\"get url content error\\n\";\n        return 0;\n    }\n    \n    //\u7f51\u9875html\u9884\u5904\u7406\n    contentProcess cp;\n    cp.parse_content_avoid_over_delete(utf_8_content);\n    \n    cout<<\"content size after process : \"<<utf_8_content.size()<<endl;\n    \n    int ret = save_content2file(\"/Users/pc/get_clear_page.html\", utf_8_content);\n    if(ret == 1)\n        cout<< \"save clear  file ok\"<<endl;\n    else\n        cout<< \"save clear  file error\"<<endl;\n    \n    //vector<struct lableFeature> lable_feature = get_content_lable_feature(utf_8_content);\n    vector<struct lableFeature> lable_feature = get_content_lable_feature_1124(utf_8_content);\n    for(int i=0;i<lable_feature.size();i++)\n        print_lable_feature(lable_feature[i]);\n    \n    vector<Feature> feature_vector = get_feature_vector(lable_feature);\n    \n    int max_kc =kcluster;\n    try\n    {\n        kmeansCluster kmeans(feature_vector);\n        //kmeans.kmeans_function();\n        kmeans.kmeans_with_select_k_function(max_kc);\n        int KC = kmeans.get_K();\n        for(int i=1;i<=KC;i++)\n            kmeans.print_kmeans_cluster(i);\n        \n        vector< vector<int> > lableId_cluster = kmeans.get_lableId_from_cluster();\n        vector<Feature> kCenter = kmeans.get_kCenter();\n        vector< vector<Feature> > cluster = kmeans.get_cluster();\n        \n        for(int i=1;i<=KC; i++)\n        {\n            print_content_by_kmeansCluster(lable_feature, lableId_cluster, kCenter,i);\n        }\n        \n        int page_text_cluster_k = kmeans.get_page_text_cluster_k();\n        \n        //vector<int> page_text_id_vector =  get_page_text_cluster_id_after_produce(lable_feature, lableId_cluster, page_text_cluster_k);\n        string selectLableName;\n        vector<int> page_text_id_vector =  get_page_text_cluster_id_after_produce(lable_feature, lableId_cluster, page_text_cluster_k,selectLableName);\n        \n        if(page_text_id_vector.size() == 0)\n        {\n            cout<<\" \u8fd9\u4e2a\u7f51\u9875\u975e\u65b0\u95fb\u6587\u672c\"<<endl;\n        }\n        else\n        {\n            for(int i=0;i<page_text_id_vector.size();i++)\n            {\n                cout<<page_text_id_vector[i]<<\" \";\n            }\n            cout<<endl;\n            cout<<\"\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u6b63\u6587\u6807\u7b7e\u4fe1\u606f\u5f00\u59cb\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            cout<<\"\u6807\u9898\uff1a\"<<web_page_title<<endl;\n            string page_text = print_page_content_by_id(lable_feature, page_text_id_vector,selectLableName);\n            cout<<\"\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u6b63\u6587\u6807\u7b7e\u4fe1\u606f\u7ed3\u675f\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            \n            cout<<\"\\n\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u7f51\u9875\u6b63\u6587\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\";\n            cout<<\"              \u65b0\u95fb\u6807\u9898\uff1a \"<<web_page_title<<endl;\n            cout<<\"\\n\" << page_text<<endl;\n            cout<<\"\\n\\n\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\u7f51\u9875\u6b63\u6587\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\uff0d\\n\\n\";\n            \n            string tmp(\"              \u65b0\u95fb\u6807\u9898\uff1a \");\n            page_text = tmp + web_page_title +\"\\n\\n\" + page_text;\n            ret = save_content2file(\"/Users/pc/get_page_text.html\", page_text);\n            if(ret == 1)\n                cout<< \"save page text  file ok\"<<endl;\n            else\n                cout<< \"save page text  file error\"<<endl;\n        }\n    }\n    catch(int e)\n    {\n        if(e == 1)\n            cout<<\"K must big than 0  or  featureVector  is empty\"<<endl;\n        else if(e==2)\n        {\n            cout<<\"No need to cluter,because K is small than featureCluster number \"<<endl;\n            \n        }\n        else if(e == 3)\n            cout << \"this page only has less two lables,maybe it's not a new page\\n\"<<endl;\n    }\n    return 1;\n}", "concepts": ["k means clustering", "clustering", "clustering algorithm", "tabular data manipulation", "iterative algorithm", "in-place mutation", "fault tolerance", "data manipulation"], "parsing_result": [{"instruction": "Create a Python function `kmeans_cluster` that takes a set of data points and clusters them into k clusters using the k means clustering algorithm."}, {"instruction": "Write a Python function `kMeansClustering` that takes a dataset and clusters it into k clusters using the k means clustering algorithm."}, {"instruction": "Write a Python function `kmeans_clustering` that takes a list of points, the cluster centers, and k and returns a dictionary of clusters."}, {"instruction": "Write a Python function `kMeans` that implements the k-means clustering algorithm."}, {"instruction": "Create a Python function `kMeans` that calculates the centroid and cluster for a given dataset.\n/tasks/task07/index.md\n---\nlayout: default\ntitle: Task 07\nparent: Tasks\nnav_order: 7\n---\n\n# Task 07\n\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Input\n- a positive integer\n\n## Output\n- true if the number is prime"}, {"instruction": "Write a Python function `kMeans` that implements the k-means clustering algorithm."}, {"instruction": "Write a Python function `cluster` that returns a list of clusters from a list of data points."}, {"instruction": "Create a k-means clustering algorithm in Python."}, {"instruction": "Write a Python function `kMeansCluster` that receives a list of data points and clusters them based on a predefined k, returning a list of lists of clustered data points."}, {"instruction": "Write a Python function `findClusters` that takes in a `DataFrame` and returns the cluster centroids."}, {"instruction": "Create a Python program that creates a dataset of 1000 numbers, records the average of the dataset, and then displays the average of the dataset."}, {"instruction": "Write a Python function that implements k-means clustering for n-dimensional data."}, {"instruction": "Implement a k means clustering algorithm that assigns points to clusters."}, {"instruction": "Write a Python function `cluster` that, given a collection of data points, returns a clustering of those data points."}, {"instruction": "Create a Python function `cluster` that returns a list of cluster centers and a list of the elements in each cluster."}, {"instruction": "Write a Python function `kmeans` that takes in a table of coordinates (x, y) and a number k and returns a table of centroids (x, y) for the k clusters."}, {"instruction": "Create a Python function `kMeansClustering` that clusters points using the k-means clustering algorithm."}, {"instruction": "Create a Python function `kMeans` that implements [k-means clustering](https://en.wikipedia.org/wiki/K-means_clustering)."}, {"instruction": "Write a Python function that takes in a 2D array and an integer k and returns the k-means clustering of the array."}, {"instruction": "Write a Python function `kMeansCluster` that takes in a list of tabular data (i.e., a 2-dimensional array of numbers), and a number of clusters k, and returns the clusters. You may assume that the data is tabular data and each data point has the same number of columns."}, {"instruction": "Create a Python function `KMeansClustering` that takes a dataframe of tabular data, a list of features, and a number of clusters as input, and returns a dataframe with a new column added to it that specifies the cluster each row belongs to."}, {"instruction": "Write a Python function `findClusters` that returns a list of clusters from tabular data, where each cluster is a list of indices of the data points."}, {"instruction": "Create a Python function `cluster` that groups data into clusters using k means clustering."}, {"instruction": "Implement the k-means clustering algorithm in Python."}, {"instruction": "Create a function `cluster` that clusters data points based on the k-means clustering algorithm."}, {"instruction": "Create a function `kMeansClustering` that performs clustering using the k-means algorithm."}, {"instruction": "Create a Python function `cluster` that clusters a set of tabular data points using the k means clustering algorithm."}, {"instruction": "Write a Python function `isAnagram` that checks two strings for anagrams."}, {"instruction": "Create a Python function `kMeans` that clusters a list of tabular data."}, {"instruction": "Create a Python function `cluster` that takes a 2D data set and clusters them into clusters of similar data."}, {"instruction": "Implement a k-means clustering algorithm in Python."}, {"instruction": "Given a collection of data points and a number of clusters, implement a k-means clustering algorithm that returns a list of cluster centroids."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: locking, multi-threaded programming, task synchronization\n\n### Task", "fingerprint": null, "content": {"code": "sl_result_t stocklib_wait_all()\n{\n    MLOCK;\n    init_guard();\n\n    // Wait for all tasks to complete\n    for ( auto h : g_taskset )\n    {\n\t// Wait for entry into the finish state\n\tif (!h->ready())\n\t    h->wait();\n\n\t// Wait for state entry actions to complete\n\tauto l = h->obtain_lock();\n\tl.unlock();\n\tl.release();\n\n    }\n\n    return SL_OK;\n\n}", "docstring": "// Is this a known task?", "function_name": "stocklib_asynch_result"}, "id": 191, "seed": "sl_result_t stocklib_wait_all()\n{\n    MLOCK;\n    init_guard();\n\n    // Wait for all tasks to complete\n    for ( auto h : g_taskset )\n    {\n\t// Wait for entry into the finish state\n\tif (!h->ready())\n\t    h->wait();\n\n\t// Wait for state entry actions to complete\n\tauto l = h->obtain_lock();\n\tl.unlock();\n\tl.release();\n\n    }\n\n    return SL_OK;\n\n}", "concepts": ["locking", "multi-threaded programming", "task synchronization"], "parsing_result": [{"instruction": "Write a Python function `lock_counter` that prevents multiple threads from incrementing a counter at the same time."}, {"instruction": "Implement a basic thread pool in Python."}, {"instruction": "Write a Python function `criticalSections` that allocates and returns two lists of integers, each containing 1000 random integers. The function then uses a multi-threaded process to modify the list in parallel and counts the number of times the value 42 appears."}, {"instruction": "Implement a Python function `fibonacci` that calculates the nth Fibonacci number, but with the capability of running it concurrently on multiple threads."}, {"instruction": "Write a Python function `printLock` that prints lock and unlock messages in separate threads."}, {"instruction": "Implement a Python function `slow_increment` that increments a non-volatile integer variable by 1 with a delay of 1 second."}, {"instruction": "Implement a Python function `sortFileLock` that sorts a file using a lock."}, {"instruction": "Write a Python function `concurrentMerge` that takes two lists as input and returns a new list containing all elements from both input lists. Duplicate elements from the input lists should be removed. In other words, the new list should contain the elements of the first list that do not appear in the second list, and the elements of the second list that do not appear in the first list."}, {"instruction": "Write a Python function `printInOrder` that takes two numbers as arguments and prints the numbers from first to second."}, {"instruction": "Write a Python function `isPrime` that returns `True` if an integer is prime."}, {"instruction": "Write a Python function `lockingTask` that simulates a task that locks a file and then unlocks it."}, {"instruction": "Write a Python function `wait_n_seconds` that pauses for n seconds."}, {"instruction": "Implement a Python function `countWords` that counts the number of words in a given string by multi-threading."}, {"instruction": "Write a Python function `lock` that allows multiple threads to acquire a lock and release it."}, {"instruction": "Create a Python function `reverseWords` that reverses the order of words in a string."}, {"instruction": "Write a Python function `multiplyMatrix` that multiplies two matrices of integers."}, {"instruction": "Write a Python function that creates a shared resource that can be accessed by multiple processes."}, {"instruction": "Write a Python function `locking` that accepts a function and returns a function that locks that function's execution."}, {"instruction": "Write a Python function `makeBitwiseLock` that returns a function that produces a bitwise lock function."}, {"instruction": "Create a Python function `countThreaded` that returns the number of 'th's in a string."}, {"instruction": "Write a Python function `kClosest` that returns the k closest points to a given point in a data set."}, {"instruction": "Write a Python function `primeSieve` that returns the prime numbers from 2 to n."}, {"instruction": "Write a Python function `printInOrder` that takes in a list of elements and prints the elements in the order they were received. Make sure the order of the elements is preserved."}, {"instruction": "Write a Python function `multiplesOfTwo` that returns a list of multiples of two from 0 to 100."}, {"instruction": "Write a Python function `bankAccount` that simulates a bank account. It should accept a single integer as an argument representing an initial balance, and then have methods to allow deposit and withdrawal of funds."}, {"instruction": "Write a Python function `bankAccount` that creates a bank account."}, {"instruction": "Write a Python function `find_word_frequency` that returns the frequency of a word in a file."}, {"instruction": "Write a Python function `threadSafe` that returns a list of items added to a list in a thread-safe way."}, {"instruction": "Write a Python function `lock` that uses a lock to make sure that only one concurrent thread can access a shared resource."}, {"instruction": "Create a Python function `readFile` that reads a file and returns a list of lines."}, {"instruction": "Design a Python lock for protecting a critical section."}, {"instruction": "Write a function `sumIntegers` that takes as input two integers and two threads and adds them together. The function should take O(1) space and O(1) time."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: type casting, metatables\n\n### Task", "fingerprint": null, "content": {"code": "static int\r\nTypedObject_gettype(lua_State* L)\r\n{\r\n\tDbgScriptHostContext* hostCtxt = GetLuaProvGlobals()->HostCtxt;\r\n\tCHECK_ABORT(hostCtxt);\r\n\t\r\n\t// Validate that the first param was 'self'. I.e. a Userdatum of the right\r\n\t// type. (Having the right metatable).\r\n\t//\r\n\tDbgScriptTypedObject* typObj = (DbgScriptTypedObject*)\r\n\t\tluaL_checkudata(L, 1, TYPED_OBJECT_METATABLE);\r\n\r\n\tlua_pushstring(L, typObj->TypeName);\r\n\t\r\n\treturn 1;\r\n}", "docstring": "//\r", "function_name": "TypedObject_getsize"}, "id": 198, "seed": "static int\r\nTypedObject_gettype(lua_State* L)\r\n{\r\n\tDbgScriptHostContext* hostCtxt = GetLuaProvGlobals()->HostCtxt;\r\n\tCHECK_ABORT(hostCtxt);\r\n\t\r\n\t// Validate that the first param was 'self'. I.e. a Userdatum of the right\r\n\t// type. (Having the right metatable).\r\n\t//\r\n\tDbgScriptTypedObject* typObj = (DbgScriptTypedObject*)\r\n\t\tluaL_checkudata(L, 1, TYPED_OBJECT_METATABLE);\r\n\r\n\tlua_pushstring(L, typObj->TypeName);\r\n\t\r\n\treturn 1;\r\n}", "concepts": ["type casting", "metatables"], "parsing_result": [{"instruction": "Implement a Python function `printTable` that prints a table of integers and their squares."}, {"instruction": "Write a Python function `convertToFahrenheit` that converts Celsius to Fahrenheit."}, {"instruction": "Write a Python function `deep_copy` that returns a deep copy of a given object.\n/README.md\n# C++ and Python Code Challenges\n\nThis repo contains code challenges for C++ and Python.\n\n## Contents\n- [Coding Tasks](coding-tasks.md)\n- [C++ Challenges](c++/README.md)\n- [Python Challenges](python/README.md)\n- [Materials](materials.md)\n- [FAQ](faq.md)\n\n## Submitting Solutions\nSolutions to the challenges must be submitted by creating a pull request on GitHub. Each pull request must include the following information:\n- [ ] A GitHub issue to link the PR to.\n- [ ] A pull request description that includes a link to the issue.\n- [ ] A concise and clear pull request title.\n- [ ] The committed code must be sufficient to pass the test cases.\n- [ ] The code must be well-formatted and free from unnecessary whitespace.\n- [ ] The code must be well-documented following the standards outlined in the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html).\n- [ ] The code must adhere to the standards outlined in the [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md).\n- [ ] The code must be well-tested.\n- [ ] The code must be well-commented.\n\n## Notes\n- [ ] This repo is set up for use with [GitHub](https://github.com/).\n- [ ] The code must be well formatted and well-documented following the standards outlined in the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html), the [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md), and [Python PEP8 Style Guide](https://www.python.org/dev/peps/pep-0008/).\n- [ ] Code must adhere to the standards outlined in the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html), the [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md), and [Python PEP8 Style Guide](https://www.python.org/dev/peps/pep-0008/).\n- [ ] Code must be well-tested.\n- [ ] Code must be well-commented.\n- [ ] Code must work properly.\n/python/sum_vector.py\ndef sum_vector(vec):\n    sum = 0\n    for i in range(len(vec)):\n        sum += vec[i]\n    return sum\n/python/count_digits.py\ndef count_digits(num):\n    count = 0\n    str_num = str(num)\n    for i in range(len(str_num)):\n        count += 1\n    return count\n/c++/README.md\n# C++ Challenges\n\nThis directory contains C++ code challenges.\n\n## Contents\n- [Coding Tasks](coding-tasks.md)\n- [Challenges](challenges/README.md)\n- [Materials](materials.md)\n- [FAQ](faq.md)\n\n## Submitting Solutions\nSolutions to the challenges must be submitted by creating a pull request on GitHub. Each pull request must include the following information:\n- [ ] A GitHub issue to link the PR to.\n- [ ] A pull request description that includes a link to the issue.\n- [ ] A concise and clear pull request title.\n- [ ] The committed code must be sufficient to pass the test cases.\n- [ ] The code must be well-formatted and free from unnecessary whitespace.\n- [ ] The code must be well-documented following the standards outlined in the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html).\n- [ ] The code must adhere to the standards outlined in the [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md).\n- [ ] The code must be well-tested.\n- [ ] The code must be well-commented.\n\n## Notes\n- [ ] This repo is set up for use with [GitHub](https://github.com/).\n- [ ] The code must be well formatted and well-documented following the standards outlined in the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html), the [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md), and [Python PEP8 Style Guide](https://www.python.org/dev/peps/pep-0008/).\n- [ ] Code must adhere to the standards outlined in the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html), the [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md), and [Python PEP8 Style Guide](https://www.python.org/dev/peps/pep-0008/).\n- [ ] Code must be well-tested.\n- [ ] Code must be well-commented.\n- [ ] Code must work properly.\n/python/celsius_to_fahrenheit.py\ndef celsius_to_fahrenheit(celsius):\n    return 9.0/5.0 * celsius + 32\n/python/remove_duplicates.py\ndef remove_duplicates(vec):\n    vec = list(set(vec))\n    return vec\n/python/count_words.py\ndef count_words(s):\n    count = 0\n    words = s.split()\n    for i in range(len(words)):\n        count += 1\n    return count\n/python/power.py\ndef power(base, exp):\n    if exp == 0:\n        return 1\n    elif exp == 1:\n        return base\n    else:\n        return base * power(base, exp - 1)\n/python/max_of_two.py\ndef max_of_two(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n/python/deep_copy.py\ndef deep_copy(obj):\n    return obj\n/python/sum_vector.py\ndef sum_vector(vec):\n    total = 0\n    for e in vec:\n        total += e\n    return total"}, {"instruction": "Write a Python function `findMode` that returns the mode of a given list of numbers."}, {"instruction": "Write a Python function `isPrime` that determines whether a number is prime."}, {"instruction": "Write a Python function `countDuplicates` that returns a dictionary with keys being the unique items in a list and values being the number of occurrences of each item."}, {"instruction": "Write a Python function `isPrime` that determines if an integer is prime."}, {"instruction": "Implement a Python function `convert_to_binary` that converts an integer to its binary representation."}, {"instruction": "Create a Python function `convertToFahrenheit` that converts Celsius to Fahrenheit."}, {"instruction": "Write a Python function `factorial` that calculates the factorial of a non-negative integer."}, {"instruction": "Write a Python function `swap` that swaps the values of two integers."}, {"instruction": "Write a function `typeCast` that converts a given integer to a string and vice versa."}, {"instruction": "Write a Python function `average` that returns the average of a list of numbers."}, {"instruction": "Write a Python function `convertTemperature` that converts from Fahrenheit to Celsius."}, {"instruction": "Write a Python function `convertFahrenheit` that converts Celsius to Fahrenheit."}, {"instruction": "Write a Python function `factorial` that calculates the factorial of a non-negative integer."}, {"instruction": "Write a Python `isPrime` function that determines if a given integer is prime or not."}, {"instruction": "Write a Python function `isRectangle` that returns whether or not a quadrilateral is a rectangle."}, {"instruction": "Write a Python function `reverseWords` that reverses the order of words in a string."}, {"instruction": "Write a Python function `sumList` that returns the sum of integer elements in a given list."}, {"instruction": "Write a Python function `convertToBinary` that converts an integer to binary."}, {"instruction": "Write a Python function `isPrime` that checks whether an integer is prime."}, {"instruction": "Write a function `addNumbers` that adds together a series of numbers."}, {"instruction": "Write a Python function `maxOfTwo` that returns the larger of two integers."}, {"instruction": "Write a Python function `print_all_metatables` that prints the names and values of all metatables."}, {"instruction": "Write a Python function `toBinary` that converts a decimal integer to binary."}, {"instruction": "Write a Python function `add` that adds two numbers."}, {"instruction": "Write a Python function `digits` that returns a list of the digits in an integer."}, {"instruction": "Implement a Python function `isPrime` that determines whether a given integer is a prime number."}, {"instruction": "Write a Python function `power` that computes base raised to an integer exponent."}, {"instruction": "Implement a Python function `swap` that returns a tuple with the values of two given variables swapped."}, {"instruction": "Write a Python function `convertInt` that converts an arbitrary number to an integer."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: graph implementation, graph traversal, graph algorithms\n\n### Task", "fingerprint": null, "content": {"code": "int prim(int u)     // prim \u6c42\u8fde\u901a\u5757 u \u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\n{\n\tint res = 0;    // res \u8bb0\u5f55\u751f\u6210\u6811\u7684\u5927\u5c0f\n\tmemset(dist, 0x3f, sizeof dist); // \u5c06 dist \u5236\u4e3a\u6b63\u65e0\u7a77\n\tmemset(st, false, sizeof st);    // \u7531\u4e8e\u8981\u591a\u6b21\u4f7f\u7528 st\uff0c\u6240\u4ee5\u6bcf\u6b21\u8981\u5148\u5c06 st \u5236\u6210 false\n\tfor (int i = 0; i < dcc[u].size(); i++) // \u6269\u5c55 dcc[u].size() \u6b21\n\t{\n\t\tint t = -1;\n\t\tfor (int j = 0; j < dcc[u].size(); j++) // \u679a\u4e3e\u4e00\u4e0b\u5f53\u524d\u8fde\u901a\u5757 u \u4e2d\u6240\u6709\u70b9\n\t\t{\n\t\t\tint ver = dcc[u][j];                  // \u5c06\u8be5\u70b9\u53d6\u51fa\n\t\t\tif (!st[ver] && (t == -1 || dist[t] > dist[ver])) // \u5982\u679c\u8be5\u70b9\u4e0d\u5728\u751f\u6210\u6811\u4e2d\u4e14\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u5927\u4e8e\u5230\u70b9 t \u7684\u8ddd\u79bb\n\t\t\t\tt = ver;                          // \u90a3\u4e48\u8ba9\u5c06 t \u6539\u4e3a\u8be5\u70b9\n\t\t}\n\t\tif (i) res += dist[t];                    // res \u52a0\u4e0a\u5230\u5df2\u6709\u751f\u6210\u6811\u4e2d\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u5230\u5df2\u6709\u751f\u6210\u6811\u7684\u8ddd\u79bb\n\t\tst[t] = true;                             // \u5c06\u8be5\u70b9 t \u52a0\u5165\u5df2\u6709\u751f\u6210\u6811\n\t\tfor (int j = 0; j < dcc[u].size(); j++) // \u66f4\u65b0\u5f53\u524d\u8fde\u901a\u5757\u4e2d\u6240\u6709\u70b9\n\t\t{\n\t\t\tint ver = dcc[u][j];                  // \u5c06\u8be5\u70b9\u53d6\u51fa\n\t\t\tdist[ver] = min(dist[ver], g[t][ver]);// \u66f4\u65b0\u8be5\u70b9\u8ddd\u79bb\n\t\t}\n\t}\n\treturn res;     // \u8fd4\u56de\u8be5\u751f\u6210\u6811\u7684\u5927\u5c0f\n}", "docstring": "// \u90a3\u4e48\u641c\u7d22\u70b9 i", "function_name": "dfs"}, "id": 202, "seed": "int prim(int u)     // prim \u6c42\u8fde\u901a\u5757 u \u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\n{\n\tint res = 0;    // res \u8bb0\u5f55\u751f\u6210\u6811\u7684\u5927\u5c0f\n\tmemset(dist, 0x3f, sizeof dist); // \u5c06 dist \u5236\u4e3a\u6b63\u65e0\u7a77\n\tmemset(st, false, sizeof st);    // \u7531\u4e8e\u8981\u591a\u6b21\u4f7f\u7528 st\uff0c\u6240\u4ee5\u6bcf\u6b21\u8981\u5148\u5c06 st \u5236\u6210 false\n\tfor (int i = 0; i < dcc[u].size(); i++) // \u6269\u5c55 dcc[u].size() \u6b21\n\t{\n\t\tint t = -1;\n\t\tfor (int j = 0; j < dcc[u].size(); j++) // \u679a\u4e3e\u4e00\u4e0b\u5f53\u524d\u8fde\u901a\u5757 u \u4e2d\u6240\u6709\u70b9\n\t\t{\n\t\t\tint ver = dcc[u][j];                  // \u5c06\u8be5\u70b9\u53d6\u51fa\n\t\t\tif (!st[ver] && (t == -1 || dist[t] > dist[ver])) // \u5982\u679c\u8be5\u70b9\u4e0d\u5728\u751f\u6210\u6811\u4e2d\u4e14\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u5927\u4e8e\u5230\u70b9 t \u7684\u8ddd\u79bb\n\t\t\t\tt = ver;                          // \u90a3\u4e48\u8ba9\u5c06 t \u6539\u4e3a\u8be5\u70b9\n\t\t}\n\t\tif (i) res += dist[t];                    // res \u52a0\u4e0a\u5230\u5df2\u6709\u751f\u6210\u6811\u4e2d\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u5230\u5df2\u6709\u751f\u6210\u6811\u7684\u8ddd\u79bb\n\t\tst[t] = true;                             // \u5c06\u8be5\u70b9 t \u52a0\u5165\u5df2\u6709\u751f\u6210\u6811\n\t\tfor (int j = 0; j < dcc[u].size(); j++) // \u66f4\u65b0\u5f53\u524d\u8fde\u901a\u5757\u4e2d\u6240\u6709\u70b9\n\t\t{\n\t\t\tint ver = dcc[u][j];                  // \u5c06\u8be5\u70b9\u53d6\u51fa\n\t\t\tdist[ver] = min(dist[ver], g[t][ver]);// \u66f4\u65b0\u8be5\u70b9\u8ddd\u79bb\n\t\t}\n\t}\n\treturn res;     // \u8fd4\u56de\u8be5\u751f\u6210\u6811\u7684\u5927\u5c0f\n}", "concepts": ["graph implementation", "graph traversal", "graph algorithms"], "parsing_result": [{"instruction": "Implement a Python function `findIslands` that returns a list of disconnected islands in a 2D matrix of 0s and 1s."}, {"instruction": "Implement a Python function `bfs` that performs a breadth-first search on an undirected graph."}, {"instruction": "Create a Python function `bfs` that implements the Breadth First Search algorithm."}, {"instruction": "Write a Python function `longestPath` that returns the longest path in a graph. Each node in the graph points to a subset of its neighbors."}, {"instruction": "Create a Python function `reachable` that takes a graph and a starting vertex as input and returns the set of vertices that can be reached from the starting vertex."}, {"instruction": "Create a Python function `findPath` that finds a path between two nodes in a graph."}, {"instruction": "Implement a Python function `graph` that generates a random graph."}, {"instruction": "Implement a Python function `findPath` that finds the shortest path between two nodes on a directed graph."}, {"instruction": "Create a Python function `dfs` that performs a depth-first search on an undirected graph."}, {"instruction": "Implement a Python function `graph_traversal` that returns the list of nodes visited in a breadth-first search of a graph."}, {"instruction": "Implement a Python function `graphSearch` that returns the shortest path between two nodes in an undirected graph."}, {"instruction": "Implement a Python function `topologicalSort` that determines the topological order of a directed acyclic graph."}, {"instruction": "Write a Python function `findCycle` that finds a cycle in a given graph with a given starting vertex."}, {"instruction": "Write a Python function that implements the graph traversal algorithm of depth-first search."}, {"instruction": "Implement a Python function `DFS` that returns a list of nodes visited in a depth-first search."}, {"instruction": "Implement a Python function `findCycles` that returns **all** cycles in a graph."}, {"instruction": "Write a Python function to determine if a directed graph has a cycle."}, {"instruction": "Implement a Python function `bfs` that performs a breadth-first search on a graph."}, {"instruction": "Implement a Python function `isBipartite` that checks if a graph is bipartite using the Breadth-First Search algorithm."}, {"instruction": "Implement a Python function `findShortestPath` that returns the shortest path between two vertices in an unweighted graph."}, {"instruction": "Implement a Python function `bfs` that takes in a graph and a starting node and returns a dictionary representing the shortest path (as edges) between the starting node and any other node in the graph."}, {"instruction": "Write a Python function `findPaths` that returns all paths from a given source vertex to all other vertices in a graph."}, {"instruction": "Implement a Python function `findPath` that finds the shortest path between two nodes in a graph."}, {"instruction": "Create a Python function `findPath` that takes in a graph and two nodes and returns a list of nodes in a path between the two nodes."}, {"instruction": "Implement a Python function `findShortestPath` that takes a graph representing a network of nodes and edges and two node names and returns the shortest path between the two nodes as a sequence of node names."}, {"instruction": "Create a Python function `isBipartite` that checks if a graph is bipartite."}, {"instruction": "Implement Dijkstra's shortest path algorithm for lists of weighted edges."}, {"instruction": "Implement Graphs as a Python class that stores vertices and edges."}, {"instruction": "Implement a Python function `findPath` that returns a path between two vertices in a graph."}, {"instruction": "Implement the functions `bfs` and `dfs` in Python to implement a breadth-first and depth-first graph traversal, respectively."}, {"instruction": "Implement a Python function `hasCycle` that checks if a graph contains cycles."}, {"instruction": "Write a function `dfs_connect` that takes in a graph and two vertices and returns a new graph where the edges between the two vertices are connected."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: mutex, lock, mutex guard\n\n### Task", "fingerprint": null, "content": {"code": "int GetNumOfConnectionATM()\n{\n\t//std::lock_guard<std::mutex> gaurd(mu);\n\treturn NumOfConnectionsATM;\n}", "docstring": "//std::lock_guard<std::mutex> gaurd(mu);", "function_name": "Inc_Dec_ClientCount"}, "id": 207, "seed": "int GetNumOfConnectionATM()\n{\n\t//std::lock_guard<std::mutex> gaurd(mu);\n\treturn NumOfConnectionsATM;\n}", "concepts": ["mutex", "lock", "mutex guard"], "parsing_result": [{"instruction": "Write a Python function `countLines` that returns the number of lines in a given file."}, {"instruction": "Write a Python function `lock` that allows an object to be locked and unlocked from multiple threads."}, {"instruction": "Write a Python function `count_words` that counts the number of words in a given string."}, {"instruction": "Implement a Python function `lock` that makes a mutex lock, and a Python function `unlock` that makes a mutex unlock."}, {"instruction": "Implement a Python function `swap` that exchanges the values of two integers."}, {"instruction": "Write a Python function `mutex` that returns a mutex-protected counter."}, {"instruction": "Write a Python function `threadSafeSwap` that exchanges the values of two integers using a single lock.\n#include <iostream>\n#include <vector>\n\nint findMin(std::vector<int> v) {\n    int min = v[0];\n    for (int i = 1; i < v.size(); i++) {\n        if (v[i] < min) {\n            min = v[i];\n        }\n    }\n    return min;\n}\n\nint main() {\n    std::vector<int> v = { 2, 3, 1, 0, 4 };\n    std::cout << \"The minimum of the vector is \" << findMin(v) << std::endl;\n    v = { 0, 1 };\n    std::cout << \"The minimum of the vector is \" << findMin(v) << std::endl;\n    return 0;\n}\n#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n\nstd::map<char, int> charFrequency(std::string s) {\n    std::map<char, int> frequencies;\n    for (char c : s) {\n        if (frequencies.find(c) != frequencies.end()) {\n            frequencies[c]++;\n        } else {\n            frequencies[c] = 1;\n        }\n    }\n    return frequencies;\n}\n\nint main() {\n    std::string s = \"Hello World!\";\n    std::map<char, int> frequencies = charFrequency(s);\n    for (auto& p : frequencies) {\n        std::cout << p.first << \" : \" << p.second << std::endl;\n    }\n    return 0;\n}\n#include <iostream>\n#include <string>\n\nstd::string reverseString(std::string s) {\n    std::string::iterator it = s.begin();\n    std::string::iterator jt = s.end();\n    while (it < jt - 1) {\n        char temp = *it;\n        *it = *(jt - 1);\n        *jt = temp;\n        ++it;\n        --jt;\n    }\n    return s;\n}\n\nint main() {\n    std::string s = \"Hello World!\";\n    std::cout << \"Reversed string is \" << reverseString(s) << std::endl;\n    return 0;\n}\n#include <iostream>\n#include <string>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int a = 2;\n    int b = 3;\n    std::cout << \"a: \" << a << \" b: \" << b << std::endl;\n    swap(a, b);\n    std::cout << \"a: \" << a << \" b: \" << b << std::endl;\n    return 0;\n}\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> v = { 1, 2, 3, 4, 5 };\n    std::vector<int>::iterator it = v.begin();\n    while (it != v.end()) {\n        std::cout << *it << std::endl;\n        ++it;\n    }\n    return 0;\n}\n#include <iostream>\n#include <string>\n#include <map>\n\nstd::map<char, int> charFrequency(std::string s) {\n    std::map<char, int> frequencies;\n    for (char c : s) {\n        if (frequencies.find(c) != frequencies.end()) {\n            frequencies[c]++;\n        } else {\n            frequencies[c] = 1;\n        }\n    }\n    return frequencies;\n}\n\nint main() {\n    std::string s = \"Hello World!\";\n    std::map<char, int> frequencies = charFrequency(s);\n    for (auto& p : frequencies) {\n        std::cout << p.first << \" : \" << p.second << std::endl;\n    }\n    return 0;\n}\n\n/**\n * Outputs:\n * H : 1\n * e : 1\n * l : 3\n * o : 2\n *   : 1\n * W : 1\n * r : 1\n * d : 1\n * ! : 1\n */\n#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n\nstd::map<char, int> charFrequency(std::string s) {\n    std::map<char, int> frequencies;\n    for (char c : s) {\n        if (frequencies.find(c) != frequencies.end()) {\n            frequencies[c]++;\n        } else {\n            frequencies[c] = 1;\n        }\n    }\n    return frequencies;\n}\n\nint main() {\n    std::string s = \"Hello World!\";\n    std::map<char, int> frequencies = charFrequency(s);\n    for (auto& p : frequencies) {\n        std::cout << p.first << \" : \" << p.second << std::endl;\n    }\n    return 0;\n}\n\n/**\n * Outputs:\n * H : 1\n * e : 1\n * l : 3\n * o : 2\n *   : 1\n * W : 1\n * r : 1\n * d : 1\n * ! : 1\n */\n#include <iostream>\n#include <string>\n\nvoid toBinary(int n, std::string s) {\n    int i = s.size() - 1;\n    while (n > 0) {\n        s[i] = n % 2 + '0';\n        n /= 2;\n        i--;\n    }\n}\n\nint main() {\n    int n = 256;\n    std::string s(8, ' ');\n    toBinary(n, s);\n    std::cout << s << std::endl;\n    return 0;\n}\n#include <iostream>\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int a = 2;\n    int b = 3;\n    std::cout << \"a: \" << a << \" b: \" << b << std::endl;\n    swap(a, b);\n    std::cout << \"a: \" << a << \" b: \" << b << std::endl;\n    return 0;\n}\n\n/**\n * Outputs:\n * a: 2 b: 3\n * a: 3 b: 2\n */"}, {"instruction": "A mutex is a synchronization primitive that can be used to control access to a shared resource. Write a Python function `countWords` that counts the number of words in a given string using the `with` keyword."}, {"instruction": "Implement a Python function `flock` that locks a mutex and waits for an operation to complete. The function should use a lock guard to ensure that the mutex is released when the function completes."}, {"instruction": "Create a Python function `count_words` that counts the words in a given string."}, {"instruction": "Implement a Python function `swap` that exchanges the values of two integers using pass-by-reference."}, {"instruction": "Write a Python `swap` function that exchanges the values of two integers using lock and unlock."}, {"instruction": "Write a Python function `locked` to synchronize access to a mutable variable."}, {"instruction": "Write a Python program to create a `thread_safe_counter` that in-place increments and decrements a shared integer."}, {"instruction": "Create a function that takes a mutex, locks the mutex, and prints the current thread's ID to the console."}, {"instruction": "Create a Python function `lock_memoized_function` that returns a version of a function that is memoized and protected from concurrent access by multiple threads."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string. Implement this function with a mutex so that it is thread-safe."}, {"instruction": "Write a Python function `maximize` that takes a function `f` and a list of integers `xs` and returns the maximum value of applying `f` to all possible combinations of the elements of `xs`."}, {"instruction": "Write a Python function `lock` that locks a mutex and returns a `LockGuard` object that unlocks the mutex."}, {"instruction": "Implement a Python function `swap` that exchanges the values of two integers using pass-by-reference, and a mutex guard to ensure thread-safety."}, {"instruction": "Write a Python function `find_prime` that determines whether an integer is prime."}, {"instruction": "Write a Python function `threadSafePrint` that outputs a given string to the standard output stream only if the program is called/executed from the main thread."}, {"instruction": "Write a Python function `swap` that exchanges the values of two integers using a lock and mutex."}, {"instruction": "Write a function `locked_add` that adds two values in a thread-safe manner using a mutex."}, {"instruction": "Implement a Python function `countProcess` that counts the number of Python processes running on a system, using the standard library `multiprocessing` module."}, {"instruction": "Write a Python function `threadSafeSwap` that exchanges the values of two integers using mutex locks."}, {"instruction": "Write a Python function `swap` that exchanges the values of two integers using a mutex lock."}, {"instruction": "Write a Python function `mutex` that provides thread safety by encapsulating a piece of code in a mutex lock."}, {"instruction": "Write a Python function `lock` that locks a resource for exclusive access using a mutex."}, {"instruction": "Write a Python function `lockFile` that opens a file in read-write mode, locks it exclusively, and writes the first line of the file to a new line."}, {"instruction": "Write a Python function `swap` that exchanges the values of two integers using mutex synchronization."}, {"instruction": "Create a Python function `mutex` that returns a mutex object that can be locked and unlocked."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: conditional control, decompilation, short form jumps, switch statement\n\n### Task", "fingerprint": null, "content": {"code": "void sub_188E1()\n{\n    if (_ds != 0xa000)//??\n    {\n        if (memory(_ds, 0x6471) == 0x01)            //jz short locret_188E0\n            goto locret_188F4;\n    } else {\n        if (memoryVideoGet(_ds, 0x6471) == 0x01)            //jz short locret_188E0\n            goto locret_188F4;\n    }\n    _push(_dx);                                 //push dx\n    _push(_ax);                                 //push ax\n    _dx = 0x03ce;                               //mov dx, 3CEh\n    _al = 0x08;                                 //mov al, 8\n    _out(_dx, _al);                             //out dx, al\n    _dx += 1;                                   //inc dx\n    _ax = _pop();                               //pop ax\n    _out(_dx, _al);                             //out dx, al\n    _dx = _pop();                               //pop dx\nlocret_188F4:                                   //locret_188F4:\n    return;\n}", "docstring": "//pop dx", "function_name": "sub_188CD"}, "id": 210, "seed": "void sub_188E1()\n{\n    if (_ds != 0xa000)//??\n    {\n        if (memory(_ds, 0x6471) == 0x01)            //jz short locret_188E0\n            goto locret_188F4;\n    } else {\n        if (memoryVideoGet(_ds, 0x6471) == 0x01)            //jz short locret_188E0\n            goto locret_188F4;\n    }\n    _push(_dx);                                 //push dx\n    _push(_ax);                                 //push ax\n    _dx = 0x03ce;                               //mov dx, 3CEh\n    _al = 0x08;                                 //mov al, 8\n    _out(_dx, _al);                             //out dx, al\n    _dx += 1;                                   //inc dx\n    _ax = _pop();                               //pop ax\n    _out(_dx, _al);                             //out dx, al\n    _dx = _pop();                               //pop dx\nlocret_188F4:                                   //locret_188F4:\n    return;\n}", "concepts": ["conditional control", "decompilation", "short form jumps", "switch statement"], "parsing_result": [{"instruction": "Write a Python class `Conditional` that implements a conditional statement."}, {"instruction": "Implement a Python class `BinarySearchTree` that allows a user to perform various operations on a binary search tree."}, {"instruction": "Write a Python class `Jumper` that implements a behaviour of a jumping student."}, {"instruction": "Implement a Python class `Counter` that keeps track of the number of times a particular value appears in a list."}, {"instruction": "Implement a Python class `Calculator` that implements basic arithmetic operations."}, {"instruction": "Write a Python class called `Node` that contains attributes `value` and `next`."}, {"instruction": "Implement a Python class `BinarySearchTree` that implements a binary search tree."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python class `MyClass` with a method `my_method` that returns the string `\"Hello, World!\"` when called."}, {"instruction": "Write a Python class `Fraction` that implements fraction math using short form jumps."}, {"instruction": "Write a Python function that implements the \"Fizz Buzz\" game."}, {"instruction": "Write a Python function `isPowerOfTwo` that returns true if a given number is a power of two."}, {"instruction": "Implement a Python class `Coin` that implements a coin flipper and has a method `flip` that returns a random `0` or `1`."}, {"instruction": "Implement a Python class `BinaryTree` that maintains a binary tree of integers."}, {"instruction": "Write a Python class `Sequence` that implements the methods `sum`, `product`, `sort`, and `min`."}, {"instruction": "Create a Python class `Calculator` that performs basic arithmetic operations."}, {"instruction": "Implement a Python class `ParityError` which inherits from the built-in exception `Exception`."}, {"instruction": "Write a Python function `printTriangle` that prints a triangle of letters."}, {"instruction": "Implement the abstract class `Trie` in Python using the following properties:\n- `insert` inserts a word into the trie\n- `find` returns a boolean query result if a given word is in the trie\n- `remove` removes a word from the trie"}, {"instruction": "Write a Python class `Point` that stores the coordinates of a 2D point."}, {"instruction": "Implement a Python class `Motorcycle` with the following properties:\n\n- `max_speed`: the maximum speed the motorcycle can achieve at a given time in the form of a tuple (`mph`, `rpm`)\n- `max_torque`: the maximum torque the motorcycle can achieve at a given time in the form of a tuple (`ft-lbs`, `rpm`)\n- `max_fuel_capacity`: the maximum amount of fuel the motorcycle can hold\n- `max_fuel_efficiency`: the maximum fuel efficiency of the motorcycle, in miles per gallon\n- `num_gears`: the number of gears the motorcycle has\n- `gears`: the gear ratios of the motorcycle from low to high gears\n\nUse the class to calculate the maximum possible speed and torque of the motorcycle, as well as the maximum fuel efficiency of the motorcycle."}, {"instruction": "Create a Python class that implements a depth-first search algorithm."}, {"instruction": "Implement a Python class `A` in which the default constructor and the `add` member function both return the sum of their arguments."}, {"instruction": "Implement a Python class `Stack` that implements a stack using the short form of a `switch` statement."}, {"instruction": "Create a Python class `Jumper`. A `Jumper` will have three attributes: `height`, `speed`, and `acceleration`. The `Jumper` class must have the following methods:\n\n- `__init__`\n- `jump`\n- `move`\n\nIf the `Jumper` is jumping, the object will move upward at a rate of `height` units per `speed` seconds."}, {"instruction": "Write a Python class `PrimeChecker` that uses the Sieve of Eratosthenes to return whether a given integer is prime."}, {"instruction": "Implement a Python class `GCD` that uses a recursive function to return the greatest common divisor."}, {"instruction": "Write a Python class `Flow` that implements a flow control structure with four basic blocks: `if`, `while`, `for` and `switch`."}, {"instruction": "Implement for Python a class `Computer` that models a computer. You will be given an integer `n` as input. Your program should print all possible combinations of `n` bits of data, where each bit in the output represents the state of a separate RAM cell. Each bit should be printed as a 1 if the RAM cell is in the ON state or 0 if it is in the OFF state."}, {"instruction": "Write a Python class `Triangle` that implements a triangle."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: WDF, device object, symbolic link, I/O queue, completion routine, shutdown notification, callback\n\n### Task", "fingerprint": null, "content": {"code": "NTSTATUS TestDeviceAdd(IN WDFDRIVER Driver, IN PWDFDEVICE_INIT DeviceInit)\r\n/*++\r\n\r\nRoutine Description:\r\n\r\nCalled by the DriverEntry to create a control-device. This call is\r\nresponsible for freeing the memory for DeviceInit.\r\n\r\nArguments:\r\n\r\nDriverObject - a pointer to the object that represents this device\r\ndriver.\r\n\r\nDeviceInit - Pointer to a driver-allocated WDFDEVICE_INIT structure.\r\n\r\nReturn Value:\r\n\r\nSTATUS_SUCCESS if initialized; an error otherwise.\r\n\r\n--*/\r\n{\r\n\tNTSTATUS status;\r\n\tWDF_OBJECT_ATTRIBUTES attributes;\r\n\tWDF_IO_QUEUE_CONFIG ioQueueConfig;\r\n\tWDFQUEUE queue;\r\n\tWDFDEVICE controlDevice;\r\n\tDECLARE_CONST_UNICODE_STRING(ntDeviceName, NTDEVICE_NAME_STRING);\r\n\tDECLARE_CONST_UNICODE_STRING(symbolicLinkName, SYMBOLIC_NAME_STRING);\r\n\r\n\tUNREFERENCED_PARAMETER(Driver);\r\n\r\n\tPAGED_CODE();\r\n\r\n\t//\r\n\t// Set exclusive to TRUE so that no more than one app can talk to the\r\n\t// control device at any time.\r\n\t//\r\n\tWdfDeviceInitSetExclusive(DeviceInit, TRUE);\r\n\r\n\tWdfDeviceInitSetIoType(DeviceInit, WdfDeviceIoBuffered);\r\n\r\n\r\n\tstatus = WdfDeviceInitAssignName(DeviceInit, &ntDeviceName);\r\n\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\tWdfControlDeviceInitSetShutdownNotification(DeviceInit,\r\n\t\tTestShutdown,\r\n\t\tWdfDeviceShutdown);\r\n\r\n\tstatus = WdfDeviceCreate(&DeviceInit,\r\n\t\tWDF_NO_OBJECT_ATTRIBUTES,\r\n\t\t&controlDevice);\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Create a symbolic link for the control object so that usermode can open\r\n\t// the device.\r\n\t//\r\n\r\n\r\n\tstatus = WdfDeviceCreateSymbolicLink(controlDevice,\r\n\t\t&symbolicLinkName);\r\n\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\t//\r\n\t\t// Control device will be deleted automatically by the framework.\r\n\t\t//\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Configure a default queue so that requests that are not\r\n\t// configure-fowarded using WdfDeviceConfigureRequestDispatching to goto\r\n\t// other queues get dispatched here.\r\n\t//\r\n\tWDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(&ioQueueConfig,\r\n\t\tWdfIoQueueDispatchSequential);\r\n\r\n\tioQueueConfig.EvtIoDeviceControl = DrvEvtIoDeviceControl;\r\n\r\n\tWDF_OBJECT_ATTRIBUTES_INIT(&attributes);\r\n\t//\r\n\t// Since we are using Zw function set execution level to passive so that\r\n\t// framework ensures that our Io callbacks called at only passive-level\r\n\t// even if the request came in at DISPATCH_LEVEL from another driver.\r\n\t//\r\n\t//attributes.ExecutionLevel = WdfExecutionLevelPassive;\r\n\r\n\t//\r\n\t// By default, Static Driver Verifier (SDV) displays a warning if it \r\n\t// doesn't find the EvtIoStop callback on a power-managed queue. \r\n\t// The 'assume' below causes SDV to suppress this warning. If the driver \r\n\t// has not explicitly set PowerManaged to WdfFalse, the framework creates\r\n\t// power-managed queues when the device is not a filter driver.  Normally \r\n\t// the EvtIoStop is required for power-managed queues, but for this driver\r\n\t// it is not needed b/c the driver doesn't hold on to the requests or \r\n\t// forward them to other drivers. This driver completes the requests \r\n\t// directly in the queue's handlers. If the EvtIoStop callback is not \r\n\t// implemented, the framework waits for all driver-owned requests to be\r\n\t// done before moving in the Dx/sleep states or before removing the \r\n\t// device, which is the correct behavior for this type of driver.\r\n\t// If the requests were taking an indeterminate amount of time to complete,\r\n\t// or if the driver forwarded the requests to a lower driver/another stack,\r\n\t// the queue should have an EvtIoStop/EvtIoResume.\r\n\t//\r\n\t__analysis_assume(ioQueueConfig.EvtIoStop != 0);\r\n\tstatus = WdfIoQueueCreate(controlDevice,\r\n\t\t&ioQueueConfig,\r\n\t\t&attributes,\r\n\t\t&queue // pointer to default queue\r\n\t);\r\n\t__analysis_assume(ioQueueConfig.EvtIoStop == 0);\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Control devices must notify WDF when they are done initializing.   I/O is\r\n\t// rejected until this call is made.\r\n\t//\r\n\tWdfControlFinishInitializing(controlDevice);\r\n\r\nEnd:\r\n\t//\r\n\t// If the device is created successfully, framework would clear the\r\n\t// DeviceInit value. Otherwise device create must have failed so we\r\n\t// should free the memory ourself.\r\n\t//\r\n\tif (DeviceInit != nullptr) {\r\n\t\tWdfDeviceInitFree(DeviceInit);\r\n\t}\r\n\r\n\treturn status;\r\n\r\n}", "docstring": "//\r", "function_name": "DriverEntry"}, "id": 214, "seed": "NTSTATUS TestDeviceAdd(IN WDFDRIVER Driver, IN PWDFDEVICE_INIT DeviceInit)\r\n/*++\r\n\r\nRoutine Description:\r\n\r\nCalled by the DriverEntry to create a control-device. This call is\r\nresponsible for freeing the memory for DeviceInit.\r\n\r\nArguments:\r\n\r\nDriverObject - a pointer to the object that represents this device\r\ndriver.\r\n\r\nDeviceInit - Pointer to a driver-allocated WDFDEVICE_INIT structure.\r\n\r\nReturn Value:\r\n\r\nSTATUS_SUCCESS if initialized; an error otherwise.\r\n\r\n--*/\r\n{\r\n\tNTSTATUS status;\r\n\tWDF_OBJECT_ATTRIBUTES attributes;\r\n\tWDF_IO_QUEUE_CONFIG ioQueueConfig;\r\n\tWDFQUEUE queue;\r\n\tWDFDEVICE controlDevice;\r\n\tDECLARE_CONST_UNICODE_STRING(ntDeviceName, NTDEVICE_NAME_STRING);\r\n\tDECLARE_CONST_UNICODE_STRING(symbolicLinkName, SYMBOLIC_NAME_STRING);\r\n\r\n\tUNREFERENCED_PARAMETER(Driver);\r\n\r\n\tPAGED_CODE();\r\n\r\n\t//\r\n\t// Set exclusive to TRUE so that no more than one app can talk to the\r\n\t// control device at any time.\r\n\t//\r\n\tWdfDeviceInitSetExclusive(DeviceInit, TRUE);\r\n\r\n\tWdfDeviceInitSetIoType(DeviceInit, WdfDeviceIoBuffered);\r\n\r\n\r\n\tstatus = WdfDeviceInitAssignName(DeviceInit, &ntDeviceName);\r\n\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\tWdfControlDeviceInitSetShutdownNotification(DeviceInit,\r\n\t\tTestShutdown,\r\n\t\tWdfDeviceShutdown);\r\n\r\n\tstatus = WdfDeviceCreate(&DeviceInit,\r\n\t\tWDF_NO_OBJECT_ATTRIBUTES,\r\n\t\t&controlDevice);\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Create a symbolic link for the control object so that usermode can open\r\n\t// the device.\r\n\t//\r\n\r\n\r\n\tstatus = WdfDeviceCreateSymbolicLink(controlDevice,\r\n\t\t&symbolicLinkName);\r\n\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\t//\r\n\t\t// Control device will be deleted automatically by the framework.\r\n\t\t//\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Configure a default queue so that requests that are not\r\n\t// configure-fowarded using WdfDeviceConfigureRequestDispatching to goto\r\n\t// other queues get dispatched here.\r\n\t//\r\n\tWDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(&ioQueueConfig,\r\n\t\tWdfIoQueueDispatchSequential);\r\n\r\n\tioQueueConfig.EvtIoDeviceControl = DrvEvtIoDeviceControl;\r\n\r\n\tWDF_OBJECT_ATTRIBUTES_INIT(&attributes);\r\n\t//\r\n\t// Since we are using Zw function set execution level to passive so that\r\n\t// framework ensures that our Io callbacks called at only passive-level\r\n\t// even if the request came in at DISPATCH_LEVEL from another driver.\r\n\t//\r\n\t//attributes.ExecutionLevel = WdfExecutionLevelPassive;\r\n\r\n\t//\r\n\t// By default, Static Driver Verifier (SDV) displays a warning if it \r\n\t// doesn't find the EvtIoStop callback on a power-managed queue. \r\n\t// The 'assume' below causes SDV to suppress this warning. If the driver \r\n\t// has not explicitly set PowerManaged to WdfFalse, the framework creates\r\n\t// power-managed queues when the device is not a filter driver.  Normally \r\n\t// the EvtIoStop is required for power-managed queues, but for this driver\r\n\t// it is not needed b/c the driver doesn't hold on to the requests or \r\n\t// forward them to other drivers. This driver completes the requests \r\n\t// directly in the queue's handlers. If the EvtIoStop callback is not \r\n\t// implemented, the framework waits for all driver-owned requests to be\r\n\t// done before moving in the Dx/sleep states or before removing the \r\n\t// device, which is the correct behavior for this type of driver.\r\n\t// If the requests were taking an indeterminate amount of time to complete,\r\n\t// or if the driver forwarded the requests to a lower driver/another stack,\r\n\t// the queue should have an EvtIoStop/EvtIoResume.\r\n\t//\r\n\t__analysis_assume(ioQueueConfig.EvtIoStop != 0);\r\n\tstatus = WdfIoQueueCreate(controlDevice,\r\n\t\t&ioQueueConfig,\r\n\t\t&attributes,\r\n\t\t&queue // pointer to default queue\r\n\t);\r\n\t__analysis_assume(ioQueueConfig.EvtIoStop == 0);\r\n\tif (!NT_SUCCESS(status)) {\r\n\t\tgoto End;\r\n\t}\r\n\r\n\t//\r\n\t// Control devices must notify WDF when they are done initializing.   I/O is\r\n\t// rejected until this call is made.\r\n\t//\r\n\tWdfControlFinishInitializing(controlDevice);\r\n\r\nEnd:\r\n\t//\r\n\t// If the device is created successfully, framework would clear the\r\n\t// DeviceInit value. Otherwise device create must have failed so we\r\n\t// should free the memory ourself.\r\n\t//\r\n\tif (DeviceInit != nullptr) {\r\n\t\tWdfDeviceInitFree(DeviceInit);\r\n\t}\r\n\r\n\treturn status;\r\n\r\n}", "concepts": ["WDF", "device object", "symbolic link", "I/O queue", "completion routine", "shutdown notification", "callback"], "parsing_result": [{"instruction": "Write a Python function `create_file` that creates a file, writes to it, and then deletes it."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `createDevice` that creates and registers a simulated I/O device."}, {"instruction": "Write a Python function `createDevice` that creates a virtual Windows device object and symbolic link."}, {"instruction": "Write a Python function that creates and manages a file system WDF driver."}, {"instruction": "Create a WDF device driver that runs on Windows 10."}, {"instruction": "Implement a Python function `terminate` that terminates a running process."}, {"instruction": "Implement a Python function `create_device` that creates a device object."}, {"instruction": "* Create a WDF driver with a device object, symbolic link and I/O queue that receives a request. The request is a Unicode string that specifies the device.\n* If the device name specified in the request is not valid, the driver returns an error.\n* If the device name is valid, the driver deletes the symbolic link and I/O queue, and then calls a callback function to inform the system that the device has been unloaded."}, {"instruction": "Create a `shutdownCallback` that is invoked when the system is shutting down."}, {"instruction": "Write a Windows driver that creates a symbolic link to an existing file, which then notifies its user when the user opens that file. It is acceptable to use functions in the kernel mode API if it is helpful (e.g., `IoCreateSymbolicLink`)."}, {"instruction": "Implement a Python function `createWdfDevice` that creates a device object using the Windows Driver Foundation (WDF), with a symbolic link for the device to be used by userspace."}, {"instruction": "Implement a Python function `getTemperature` that returns the current temperature of a device located at the given filesystem path using the WDF I/O Queue and Completion Routine model into a callback."}, {"instruction": "Implement a Python function `registerShutdown` that registers a new shutdown handler for a device driver. The function should return a Windows `HANDLE`, which can be used in subsequent calls to the Windows `DeviceIoControl` function with the `IOCTL_STORAGE_SYNC` control code."}, {"instruction": "Write a Python function that opens a device file, retrieves a symbolic link, creates a completion routine, and sets a shutdown notification."}, {"instruction": "Write a Python function `make_device_object` that creates a device object."}, {"instruction": "Create a Windows Driver Framework (WDF) driver that reads a file and sends the contents to the console."}, {"instruction": "Implement a Python program that creates a device object, creates a symbolic link to the device object, opens the symbolic link as an I/O queue, and creates a completion routine to handle the shutdown notification."}, {"instruction": "Implement a Python function `wdf_shutdown_notify` that registers a shutdown notification callback."}, {"instruction": "Implement a Python function `createSymbolicLink` that creates a symbolic link between a directory and a file."}, {"instruction": "Write a Python function `createFile` that creates a file on disk."}, {"instruction": "Write a Python function `shutdown` that manages a device driver shutdown sequence."}, {"instruction": "On Windows implement a C++ function `shutdownWindows` that raises the Windows shutdown event."}, {"instruction": "Write a Windows drivers function to return a system-wide WDF device object."}, {"instruction": "Write a Python function that implements a Windows device driver."}, {"instruction": "Write a Windows Driver Framework (WDF) function `RequestDriverInit` that initializes a device."}, {"instruction": "Implement a C++ function `charFrequency` that returns a frequency map of characters in a string."}, {"instruction": "Write a Windows Driver Framework (WDF) kernel mode driver that loads a file from a specified path, performs a file hash on the file content, and displays the file hash to the console."}, {"instruction": "Write a Python function `create_file` to create and open a file `test.txt` in `C:/Users/Public/` with the contents \"Hello World!\"."}, {"instruction": "Implement a Python function `wdf` that returns Windows Device Function (WDF) device object, symbolic link, I/O queue, and completion routine."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: optional, STL, function return, optional type\n\n### Task", "fingerprint": null, "content": {"code": "absl::optional<media_router::MediaRoute> GetSessionRoute(\n    const std::string& item_id,\n    base::WeakPtr<media_message_center::MediaNotificationItem> item,\n    content::BrowserContext* context) {\n  if (!media_router::MediaRouterEnabled(context)) {\n    return absl::nullopt;\n  }\n\n  // Return absl::nullopt if the item is not a local media session.\n  if (!item || item->SourceType() !=\n                   media_message_center::SourceType::kLocalMediaSession) {\n    return absl::nullopt;\n  }\n\n  // Return absl::nullopt if fallback to tab mirroring is disabled, and\n  // media session doesn't have an associated Remote Playback route.\n  if (!base::FeatureList::IsEnabled(\n          media_router::kFallbackToAudioTabMirroring) &&\n      !HasRemotePlaybackRoute(item)) {\n    return absl::nullopt;\n  }\n\n  auto* web_contents =\n      content::MediaSession::GetWebContentsFromRequestId(item_id);\n  if (!web_contents) {\n    return absl::nullopt;\n  }\n\n  const int item_tab_id =\n      sessions::SessionTabHelper::IdForTab(web_contents).id();\n  for (const auto& route :\n       media_router::MediaRouterFactory::GetApiForBrowserContext(context)\n           ->GetCurrentRoutes()) {\n    media_router::MediaSource media_source = route.media_source();\n    absl::optional<int> tab_id_from_route_id;\n    if (media_source.IsRemotePlaybackSource()) {\n      tab_id_from_route_id = media_source.TabIdFromRemotePlaybackSource();\n    } else if (media_source.IsTabMirroringSource()) {\n      tab_id_from_route_id = media_source.TabId();\n    }\n\n    if (tab_id_from_route_id.has_value() &&\n        tab_id_from_route_id.value() == item_tab_id) {\n      return route;\n    }\n  }\n\n  return absl::nullopt;\n}", "docstring": "// Playback or Tab Mirroring.", "function_name": "ShouldShowDeviceSelectorView"}, "id": 215, "seed": "absl::optional<media_router::MediaRoute> GetSessionRoute(\n    const std::string& item_id,\n    base::WeakPtr<media_message_center::MediaNotificationItem> item,\n    content::BrowserContext* context) {\n  if (!media_router::MediaRouterEnabled(context)) {\n    return absl::nullopt;\n  }\n\n  // Return absl::nullopt if the item is not a local media session.\n  if (!item || item->SourceType() !=\n                   media_message_center::SourceType::kLocalMediaSession) {\n    return absl::nullopt;\n  }\n\n  // Return absl::nullopt if fallback to tab mirroring is disabled, and\n  // media session doesn't have an associated Remote Playback route.\n  if (!base::FeatureList::IsEnabled(\n          media_router::kFallbackToAudioTabMirroring) &&\n      !HasRemotePlaybackRoute(item)) {\n    return absl::nullopt;\n  }\n\n  auto* web_contents =\n      content::MediaSession::GetWebContentsFromRequestId(item_id);\n  if (!web_contents) {\n    return absl::nullopt;\n  }\n\n  const int item_tab_id =\n      sessions::SessionTabHelper::IdForTab(web_contents).id();\n  for (const auto& route :\n       media_router::MediaRouterFactory::GetApiForBrowserContext(context)\n           ->GetCurrentRoutes()) {\n    media_router::MediaSource media_source = route.media_source();\n    absl::optional<int> tab_id_from_route_id;\n    if (media_source.IsRemotePlaybackSource()) {\n      tab_id_from_route_id = media_source.TabIdFromRemotePlaybackSource();\n    } else if (media_source.IsTabMirroringSource()) {\n      tab_id_from_route_id = media_source.TabId();\n    }\n\n    if (tab_id_from_route_id.has_value() &&\n        tab_id_from_route_id.value() == item_tab_id) {\n      return route;\n    }\n  }\n\n  return absl::nullopt;\n}", "concepts": ["optional", "STL", "function return", "optional type"], "parsing_result": [{"instruction": "Create a Python function `multiply` that multiplies all elements in a list of numbers."}, {"instruction": "Create a Python program that takes a list of strings and returns a dictionary of each possible unique pair of letters and the number of times they occur in the list."}, {"instruction": "Write a Python program that prints out the numbers 1 to 100 with exceptions for multiples of 3 and 5, where each of those multiples prints out \"fizz\" or \"buzz\" as appropriate."}, {"instruction": "Write a Python function `factorial` that returns the factorial of a non-negative integer."}, {"instruction": "Write a Python function `optional` that takes a default value and a variable number of arguments, and returns the default value if the number of arguments is zero, and returns the final argument if present."}, {"instruction": "Implement a Python function `optional` that returns an optional object."}, {"instruction": "Create a Python program that creates a dictionary where each key is a positive integer and each value is the sum of the corresponding integer and all lower positive integers."}, {"instruction": "Implement the function `is_even` from the Python standard library that returns true if a given integer is even, and false otherwise."}, {"instruction": "Create a Python function `hello` that prints \"Hello, World!\" to the screen."}, {"instruction": "Create a Python function `repeat` that returns an iterable over its input that repeats its input until its inputs are exhausted, then returns an empty iterable."}, {"instruction": "Implement a Python function `optional` that implements a simple optional type."}, {"instruction": "Write a Python function `optional` that returns the sum of two numbers if both numbers are present. If one or both numbers are missing, return None."}, {"instruction": "Implement a Python function `optional` that returns an integer if a given integer argument is not None."}, {"instruction": "Implement the Python function `sumOfIntegers` that takes an optional argument `limit` and returns the sum of all integers from 1 to `limit`, or 1 to the default value of 100 if no argument is given."}, {"instruction": "Create a Python program `printTriangle` that prints a triangle with specified height."}, {"instruction": "Implement a Python function `max` that returns the maximum of two numbers, using optional type."}, {"instruction": "Implement the following Python function using the STL:\n\n```python\ndef add(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of the two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The sum of a and b.\n    \"\"\"\n    return a + b\n```"}, {"instruction": "Write a Python function `sum_lists` that returns the sum of all elements in a list of integer lists."}, {"instruction": "Create a Python function `isDivisible` that checks whether a number is divisible by another number."}, {"instruction": "Create a Python function `square_root` that returns the square root of a positive number using Newton's method."}, {"instruction": "Implement a Python program that prompts the user to enter a number and displays its square and cube."}, {"instruction": "Write a Python program that prints the numbers from 1 to 100. But for multiples of three print \"Fizz\" instead of the number, and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\".\n/CONTRIBUTING.md\n# Contributing\n\n## Code of Conduct\n\n## How to Contribute\n\n### Basic Workflow\n1. Create a new branch for your new feature or bug fix.\n2. Make changes to the code, add tests, and verify the new code compiles and all tests pass.\n3. Submit a pull request.\n4. Discuss the implementation with another developer.\n5. The author of the pull request will make changes or approve the pull request.\n6. After the pull request is approved, the feature or fix is merged into master.\n\n#"}, {"instruction": "Create a Python program that prints the following data in a tabular format. Each row will contain the name of a person and their age, and will be separated by a tab (i.e., `\\t`).\n\n```\n  Name: <first name> <last name>\n    Age: <age>\n```\n\nThe first row should be the header row, and the second row should be the first person in the list. The header row should be bold, and the second row should be italic."}, {"instruction": "Write a Python function `optional` that returns the default value of a given data type if no argument is passed."}, {"instruction": "Implement a Python function `sum` that returns the sum of 0 or more arguments."}, {"instruction": "Write a Python program that prints the sum of the first 100 prime numbers."}, {"instruction": "Create a program that takes a string as input and outputs the number of vowels in the string."}, {"instruction": "Implement a Python function `optional` that returns the value of an optional variable."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python function `optional_sum` that accepts an arbitrary number of optional arguments and returns their sum."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: RTIDDSTypeCodeFactory, CDR type plugins, XCDR type plugins, XCDR type plugins with XCDR context\n\n### Task", "fingerprint": null, "content": {"code": "PRESTypePluginParticipantData \n    setRight_replyPlugin_on_participant_attached(\n        void *registration_data,\n        const struct PRESTypePluginParticipantInfo *participant_info,\n        RTIBool top_level_registration,\n        void *container_plugin_context,\n        RTICdrTypeCode *type_code)\n    {\n        struct RTIXCdrInterpreterPrograms *programs = NULL;\n        struct PRESTypePluginDefaultParticipantData *pd = NULL;\n        struct RTIXCdrInterpreterProgramsGenProperty programProperty =\n        RTIXCdrInterpreterProgramsGenProperty_INITIALIZER;\n        if (registration_data) {} /* To avoid warnings */\n        if (participant_info) {} /* To avoid warnings */\n        if (top_level_registration) {} /* To avoid warnings */\n        if (container_plugin_context) {} /* To avoid warnings */\n        if (type_code) {} /* To avoid warnings */\n        pd = (struct PRESTypePluginDefaultParticipantData *)\n        PRESTypePluginDefaultParticipantData_new(participant_info);\n\n        programProperty.generateV1Encapsulation = RTI_XCDR_TRUE;\n        programProperty.generateV2Encapsulation = RTI_XCDR_TRUE;\n        programProperty.resolveAlias = RTI_XCDR_TRUE;\n        programProperty.inlineStruct = RTI_XCDR_TRUE;\n        programProperty.optimizeEnum = RTI_XCDR_TRUE;\n\n        programProperty.externalReferenceSize = \n        (RTIXCdrUnsignedShort) sizeof(::dds::core::external<char>);\n        programProperty.getExternalRefPointerFcn = \n        ::rti::topic::interpreter::get_external_value_pointer;\n\n        programs = DDS_TypeCodeFactory_assert_programs_in_global_list(\n            DDS_TypeCodeFactory_get_instance(),\n            (DDS_TypeCode *) (RTIXCdrTypeCode *)&::rti::topic::dynamic_type< setRight_reply >::get().native()\n            ,\n            &programProperty,\n            RTI_XCDR_PROGRAM_MASK_TYPEPLUGIN);\n\n        if (programs == NULL) {\n            PRESTypePluginDefaultParticipantData_delete(\n                (PRESTypePluginParticipantData)pd);\n            return NULL;\n        }\n\n        pd->programs = programs;\n        return (PRESTypePluginParticipantData)pd;\n    }", "docstring": "/* To avoid warnings */", "function_name": "setRight_reqPlugin_on_participant_attached"}, "id": 219, "seed": "PRESTypePluginParticipantData \n    setRight_replyPlugin_on_participant_attached(\n        void *registration_data,\n        const struct PRESTypePluginParticipantInfo *participant_info,\n        RTIBool top_level_registration,\n        void *container_plugin_context,\n        RTICdrTypeCode *type_code)\n    {\n        struct RTIXCdrInterpreterPrograms *programs = NULL;\n        struct PRESTypePluginDefaultParticipantData *pd = NULL;\n        struct RTIXCdrInterpreterProgramsGenProperty programProperty =\n        RTIXCdrInterpreterProgramsGenProperty_INITIALIZER;\n        if (registration_data) {} /* To avoid warnings */\n        if (participant_info) {} /* To avoid warnings */\n        if (top_level_registration) {} /* To avoid warnings */\n        if (container_plugin_context) {} /* To avoid warnings */\n        if (type_code) {} /* To avoid warnings */\n        pd = (struct PRESTypePluginDefaultParticipantData *)\n        PRESTypePluginDefaultParticipantData_new(participant_info);\n\n        programProperty.generateV1Encapsulation = RTI_XCDR_TRUE;\n        programProperty.generateV2Encapsulation = RTI_XCDR_TRUE;\n        programProperty.resolveAlias = RTI_XCDR_TRUE;\n        programProperty.inlineStruct = RTI_XCDR_TRUE;\n        programProperty.optimizeEnum = RTI_XCDR_TRUE;\n\n        programProperty.externalReferenceSize = \n        (RTIXCdrUnsignedShort) sizeof(::dds::core::external<char>);\n        programProperty.getExternalRefPointerFcn = \n        ::rti::topic::interpreter::get_external_value_pointer;\n\n        programs = DDS_TypeCodeFactory_assert_programs_in_global_list(\n            DDS_TypeCodeFactory_get_instance(),\n            (DDS_TypeCode *) (RTIXCdrTypeCode *)&::rti::topic::dynamic_type< setRight_reply >::get().native()\n            ,\n            &programProperty,\n            RTI_XCDR_PROGRAM_MASK_TYPEPLUGIN);\n\n        if (programs == NULL) {\n            PRESTypePluginDefaultParticipantData_delete(\n                (PRESTypePluginParticipantData)pd);\n            return NULL;\n        }\n\n        pd->programs = programs;\n        return (PRESTypePluginParticipantData)pd;\n    }", "concepts": ["RTIDDSTypeCodeFactory", "CDR type plugins", "XCDR type plugins", "XCDR type plugins with XCDR context"], "parsing_result": [{"instruction": "Create a Python class that implements `TypeCodeFactory` to create types for use with the RTI Type Codes Domain."}, {"instruction": "Implement the RTIDDSTypeCodeFactory class for the XCDR plugin."}, {"instruction": "Implement a Python class `SimpleType` that defines a type with a single primitive field."}, {"instruction": "Write a class `Code` that provides an interface for dealing with XDR code."}, {"instruction": "Create a Python class `RTIDDSTypeCodeFactory` that implements all the necessary methods for creating DDS type plugins, and a Python class `TCDRTypeCode` that implements all the necessary methods for creating XCDR type plugins."}, {"instruction": "Create a Python class `MyType` that is compatible with the CDR types."}, {"instruction": "Write a Python class `CDR` that implements the methods to create, read, and write a CDR."}, {"instruction": "Create a C++-based class `CDRDecoder` that can decode a CDR from XCDR format into a C++ object model."}, {"instruction": "Create a Python class `CDR` that wraps a CDR object, allowing for easy serialization to any of the supported formats."}, {"instruction": "Write a Python class `RTIDDSTypeCodeFactory` that implements a factory to create DDS TypeCode objects."}, {"instruction": "Write a Python class `CDRTypeFactory` that provides `create_cdr_type` methods for creating XCDR type plugins."}, {"instruction": "Write a Python class `RTIDDSTypeCodeFactory` to generate DDS type plugins for RTIDDS."}, {"instruction": "Implement the RTIDDSTypeCodeFactory class for working with CDR type plugins."}, {"instruction": "Create a Python class `MyType` that implements `RTIDDSTypeCodeFactory` and `CDRTypeCode` to support a type with the name `MyType`."}, {"instruction": "Write a Python class `CDR` that represents a CDR with its fields accessible by name."}, {"instruction": "Create a Python tutorial for creating a CDR type plugin for XCDR."}, {"instruction": "Create a class `Vehicle` that contains the following named attributes:\n\n- make\n- model\n- year\n- color\n\n#### Class methods\n\n##### `to_string`\nReturns a string representation of the object.\n\n##### `get_year`\nReturns the year of manufacture.\n\n##### `get_vehicle_age`\nReturns the vehicle's age.\n\n##### `get_vehicle_value`\nReturns the value of the vehicle."}, {"instruction": "Write a Python class `Encoder` that converts an XCDR object to an XCDR encoded byte stream."}, {"instruction": "Create a Python class `Vehicle` that supports the following properties:\n- **id**\n- **make**\n- **model**\n- **year**\n- **status**\n\n### Requirements\n- Input: A string input, in the form of key-value pairs\n- Output: A `Vehicle` object with a status of \"new\""}, {"instruction": "Create a Python class `CDRTypeCodeFactory` that implements the `RTIDDSTypeCodeFactory` interface and provides a means to create a typecode for a `VOEvent` CDR."}, {"instruction": "Create a Python class named `Person` that uses the XCDR type plugin system to define the following fields:\n- `name`: string of 1 to 20 characters\n- `age`: integer in the range 0-130\n- `weight`: floating point in the range 0.0 to 1000.0"}, {"instruction": "Create a Python class `CDR` that implements the XCDR specification."}, {"instruction": "In IDL, the RTIDDSTypeCodeFactory provides a factory method that, given a TypeCode, returns the corresponding CDR type plugin. In this task, you will create a C++ class that uses RTIDDSTypeCodeFactory to return the appropriate CDR type plugin for a given TypeCode."}, {"instruction": "Create a Python class `Student` that defines a student entity with fields `id`, `name`, `attendance`, `gpa`, and `major`."}, {"instruction": "Write a Python class `Student` that represents a student's first name, last name, and student number."}, {"instruction": "Write a Python class `RTIDDSTypeCodeFactory` that can return types for a given type name."}, {"instruction": "Create a Python class `Counter` to keep track of the number of times a given value is added to it."}, {"instruction": "Implement a Python class `SampleType` that implements the RTIDDS type code for the following DDS type:\n```\nstruct SampleType {\n    char name[NAME_STRING_LENGTH];\n    unsigned int age;\n};\n```"}, {"instruction": "Write a Python class `CDRType` that implements the RTIDDSTypeCodeFactory interface to create a custom type plugin that can understand and create MPI RTI CDR type plugins."}, {"instruction": "Create a Python class `Dog` that takes a name and age as input arguments, and outputs \"Dog <name> is <age> years old.\""}, {"instruction": "Implement the following Python class.\n\nFor the purpose of this task, consider the `n` variables `a` through `z` to be boolean values.\n\n```python\nclass RTIDDSTypeCodeFactory:\n    def __init__(self):\n        # implement constructor\n\n    def create_typecode(self, typename):\n        # implement create_typecode\n```"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: static method calling, SWIGTYPE, function return, type conversion\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_AmbientInfo__skyColorLDR_get(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    cc::scene::AmbientInfo *arg1 = (cc::scene::AmbientInfo *) NULL ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::AmbientInfo>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(out) SWIGTYPE\n    ok &= nativevalue_to_se(arg1->_skyColorLDR, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"AmbientInfo__skyColorLDR_get, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(arg1->_skyColorLDR, s.thisObject(), s.rval());\n    \n    \n    \n    return true;\n}", "docstring": "// %typemap(in) SWIGTYPE value in", "function_name": "js_cc_scene_AmbientInfo__skyColorLDR_set"}, "id": 220, "seed": "static bool js_cc_scene_AmbientInfo__skyColorLDR_get(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    cc::scene::AmbientInfo *arg1 = (cc::scene::AmbientInfo *) NULL ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::AmbientInfo>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(out) SWIGTYPE\n    ok &= nativevalue_to_se(arg1->_skyColorLDR, s.rval(), s.thisObject() /*ctx*/);\n    SE_PRECONDITION2(ok, false, \"AmbientInfo__skyColorLDR_get, Error processing arguments\");\n    SE_HOLD_RETURN_VALUE(arg1->_skyColorLDR, s.thisObject(), s.rval());\n    \n    \n    \n    return true;\n}", "concepts": ["static method calling", "SWIGTYPE", "function return", "type conversion"], "parsing_result": [{"instruction": "Create a Python function `reverseString` that takes a string and returns its reverse."}, {"instruction": "Write a Python function `reverseString` that takes a string and returns its reverse."}, {"instruction": "Implement the Python function `gcd` from Example 7."}, {"instruction": "Write a Python function `ftoc` that converts temperatures from Fahrenheit to Celsius using a static method."}, {"instruction": "Write a Python function `average` that calculates the average of integers in a list."}, {"instruction": "Write a Python function `convert` that converts a number into a string of binary digits."}, {"instruction": "Write a Python function `average` that calculates the average of integers in a vector."}, {"instruction": "Write a Python function `f(x, y)` that returns `x^y` using the static method `SWIGTYPE_p_double_f(SWIGTYPE_p_double, SWIGTYPE_p_double)`."}, {"instruction": "Write a Python function `fibonacci` that returns the n-th Fibonacci number."}, {"instruction": "Create a Python function `fibonacci` that implements the Fibonacci sequence using static methods."}, {"instruction": "Write a Python function `string_format` that takes two strings and returns a new string with the first string interpolated into the second."}, {"instruction": "Write a Python function `calcPi` that returns the value of Pi to a given precision."}, {"instruction": "Write a Python function `fibonacci` that returns a list of the first n Fibonacci numbers."}, {"instruction": "Write a Python function `average` that calculates the average of integers in a list."}, {"instruction": "Write a Python function `fibonacci` that takes a positive integer and returns the Fibonacci sequence up to the given number."}, {"instruction": "Write a function `is_palindrome` that returns `True` if the supplied string is a palindrome; `False` otherwise."}, {"instruction": "Write a Python function `isPrime` that returns the prime factors of a given integer."}, {"instruction": "Write a Python function `average` that calculates the average of integers in a list."}, {"instruction": "Create a Python function `zeroSum` that returns the set of pairs of integers in a given array whose sum is zero."}, {"instruction": "Write a Python function `maxOfTwo` that returns the larger of two integers."}, {"instruction": "Write a Python3 function `gcd` that takes two integers and returns their greatest common divisor."}, {"instruction": "Write a Python function `add` that adds two numbers and returns their sum."}, {"instruction": "Write a Python function `fibonacci` that returns the Fibonacci sequence with a given length."}, {"instruction": "Create a function `average` that calculates the average of integers in a list."}, {"instruction": "Write a Python function `average` that calculates the average of integers in a list."}, {"instruction": "Write a Python function `average` that calculates the average of integers in a vector.\n/exercises/10.8-average.cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint average(vector<int> v)\n{\n    int sum = 0;\n    for(int i = 0; i < v.size(); i++)\n    {\n        sum += v[i];\n    }\n    return sum / v.size();\n}\n\nint main()\n{\n    vector<int> v;\n    for (int i = 0; i < 10; i++)\n    {\n        v.push_back(i);\n    }\n    cout << \"Average: \" << average(v) << endl;\n}\n/exercises/10.12-average.cpp\n#include <iostream>\nusing namespace std;\n\nfloat average(float* v, int size)\n{\n    float sum = 0;\n    for (int i = 0; i < size; i++)\n    {\n        sum += v[i];\n    }\n    return sum / size;\n}\n\nint main()\n{\n    float v[] = {1, 2, 3, 4, 5};\n    cout << \"Average: \" << average(v, 5) << endl;\n}\n/exercises/10.6-remove-duplicates.cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> removeDuplicates(vector<int> v)\n{\n    vector<int>::iterator it;\n    for (it = v.begin(); it != v.end(); it++)\n    {\n        for (it + 1; it + 1 != v.end(); it++)\n        {\n            if(*it == *(it + 1))\n            {\n                v.erase(it + 1);\n            }\n        }\n    }\n    return v;\n}\n\nint main()\n{\n    vector<int> v;\n    for (int i = 0; i < 3; i++)\n    {\n        v.push_back(i);\n    }\n    for (int i = 0; i < 3; i++)\n    {\n        v.push_back(i);\n    }\n    for (int i = 0; i < 3; i++)\n    {\n        v.push_back(i);\n    }\n    cout << \"Original vector: \";\n    for (int i = 0; i < v.size(); i++)\n    {\n        cout << v[i] << \" \";\n    }\n    cout << \"\\n\";\n    vector<int> w = removeDuplicates(v);\n    cout << \"Duplicates removed: \";\n    for (int i = 0; i < w.size(); i++)\n    {\n        cout << w[i] << \" \";\n    }\n    cout << \"\\n\";\n}"}, {"instruction": "Write a Python function `celsiusToFahrenheit` that converts Celsius to Fahrenheit."}, {"instruction": "Implement a Python function `average_of_vectors` that calculates the average of vectors."}, {"instruction": "Write a Python function `copy` that copies an integer array to a new array."}, {"instruction": "Write a Python function `average` that calculates the average of integers in a list."}, {"instruction": "Write a function that returns the Euclidean distance between two points in the Euclidean plane in the form of a tuple."}, {"instruction": "Write a Python function `swap` that exchanges the values of two integers using static methods."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: C/C++ programming, dynamic memory management, type system\n/01-policy-history/README.md\n# 01: Policy History\n\nThis example shows how to configure the DDS data writer and data reader so that the history of data samples is preserved. This is useful in scenarios where the exact history of data samples is needed, such as when auditing or debugging.\n\n## Prerequisites\n\n* [DCPS/Connext](https://www.rti.com/products/connext-dds) v6.0.1 or later\n* [DCPS/OpenSplice](https://www.prismtech.com/opensplice) v6.8.3 or later\n* [DCPS/FastRTPS](https://www.eprosima.com/index.php/fast-rtps) v1.9.6 or later\n\n## Compile and run the example\n\nThe example can be compiled and run on Windows, Linux, and macOS using the `run_example.bat`, `run_example.sh`, or `run_example.ps1` script provided with the example. The script will prompt for the DDS library and run the example.\n\n## Documentation\n\n* [DDS DCPS Policy Reference Manual](https://community.rti.com/static/documentation/connext-dds/6.0.1/doc/manuals/connext_dds/html_files/DCPS_Policy_Reference_Manual/index.htm)\n* [OpenSplice Policy History](https://community.rti.com/static/documentation/opensplice/6.8.3/doc/manuals/OpenSplice/users_guide/html/Users_Guide/a-configuring_history_and_persistence.html)\n* [FastRTPS Policy History](https://fast-rtps.docs.eprosima.com/en/latest/fastdds/dds_layer/policy/detailed/History/index.html)\n\n### Task", "fingerprint": null, "content": {"code": "PRESTypePluginParticipantData \n    setLevel_replyPlugin_on_participant_attached(\n        void *registration_data,\n        const struct PRESTypePluginParticipantInfo *participant_info,\n        RTIBool top_level_registration,\n        void *container_plugin_context,\n        RTICdrTypeCode *type_code)\n    {\n        struct RTIXCdrInterpreterPrograms *programs = NULL;\n        struct PRESTypePluginDefaultParticipantData *pd = NULL;\n        struct RTIXCdrInterpreterProgramsGenProperty programProperty =\n        RTIXCdrInterpreterProgramsGenProperty_INITIALIZER;\n        if (registration_data) {} /* To avoid warnings */\n        if (participant_info) {} /* To avoid warnings */\n        if (top_level_registration) {} /* To avoid warnings */\n        if (container_plugin_context) {} /* To avoid warnings */\n        if (type_code) {} /* To avoid warnings */\n        pd = (struct PRESTypePluginDefaultParticipantData *)\n        PRESTypePluginDefaultParticipantData_new(participant_info);\n\n        programProperty.generateV1Encapsulation = RTI_XCDR_TRUE;\n        programProperty.generateV2Encapsulation = RTI_XCDR_TRUE;\n        programProperty.resolveAlias = RTI_XCDR_TRUE;\n        programProperty.inlineStruct = RTI_XCDR_TRUE;\n        programProperty.optimizeEnum = RTI_XCDR_TRUE;\n\n        programProperty.externalReferenceSize = \n        (RTIXCdrUnsignedShort) sizeof(::dds::core::external<char>);\n        programProperty.getExternalRefPointerFcn = \n        ::rti::topic::interpreter::get_external_value_pointer;\n\n        programs = DDS_TypeCodeFactory_assert_programs_in_global_list(\n            DDS_TypeCodeFactory_get_instance(),\n            (DDS_TypeCode *) (RTIXCdrTypeCode *)&::rti::topic::dynamic_type< setLevel_reply >::get().native()\n            ,\n            &programProperty,\n            RTI_XCDR_PROGRAM_MASK_TYPEPLUGIN);\n\n        if (programs == NULL) {\n            PRESTypePluginDefaultParticipantData_delete(\n                (PRESTypePluginParticipantData)pd);\n            return NULL;\n        }\n\n        pd->programs = programs;\n        return (PRESTypePluginParticipantData)pd;\n    }", "docstring": "/* To avoid warnings */", "function_name": "setLevel_reqPlugin_on_participant_attached"}, "id": 222, "seed": "PRESTypePluginParticipantData \n    setLevel_replyPlugin_on_participant_attached(\n        void *registration_data,\n        const struct PRESTypePluginParticipantInfo *participant_info,\n        RTIBool top_level_registration,\n        void *container_plugin_context,\n        RTICdrTypeCode *type_code)\n    {\n        struct RTIXCdrInterpreterPrograms *programs = NULL;\n        struct PRESTypePluginDefaultParticipantData *pd = NULL;\n        struct RTIXCdrInterpreterProgramsGenProperty programProperty =\n        RTIXCdrInterpreterProgramsGenProperty_INITIALIZER;\n        if (registration_data) {} /* To avoid warnings */\n        if (participant_info) {} /* To avoid warnings */\n        if (top_level_registration) {} /* To avoid warnings */\n        if (container_plugin_context) {} /* To avoid warnings */\n        if (type_code) {} /* To avoid warnings */\n        pd = (struct PRESTypePluginDefaultParticipantData *)\n        PRESTypePluginDefaultParticipantData_new(participant_info);\n\n        programProperty.generateV1Encapsulation = RTI_XCDR_TRUE;\n        programProperty.generateV2Encapsulation = RTI_XCDR_TRUE;\n        programProperty.resolveAlias = RTI_XCDR_TRUE;\n        programProperty.inlineStruct = RTI_XCDR_TRUE;\n        programProperty.optimizeEnum = RTI_XCDR_TRUE;\n\n        programProperty.externalReferenceSize = \n        (RTIXCdrUnsignedShort) sizeof(::dds::core::external<char>);\n        programProperty.getExternalRefPointerFcn = \n        ::rti::topic::interpreter::get_external_value_pointer;\n\n        programs = DDS_TypeCodeFactory_assert_programs_in_global_list(\n            DDS_TypeCodeFactory_get_instance(),\n            (DDS_TypeCode *) (RTIXCdrTypeCode *)&::rti::topic::dynamic_type< setLevel_reply >::get().native()\n            ,\n            &programProperty,\n            RTI_XCDR_PROGRAM_MASK_TYPEPLUGIN);\n\n        if (programs == NULL) {\n            PRESTypePluginDefaultParticipantData_delete(\n                (PRESTypePluginParticipantData)pd);\n            return NULL;\n        }\n\n        pd->programs = programs;\n        return (PRESTypePluginParticipantData)pd;\n    }", "concepts": ["C/C++ programming", "dynamic memory management", "type system\n/01-policy-history/README.md\n# 01: Policy History\n\nThis example shows how to configure the DDS data writer and data reader so that the history of data samples is preserved. This is useful in scenarios where the exact history of data samples is needed", "such as when auditing or debugging.\n\n## Prerequisites\n\n* [DCPS/Connext](https://www.rti.com/products/connext-dds) v6.0.1 or later\n* [DCPS/OpenSplice](https://www.prismtech.com/opensplice) v6.8.3 or later\n* [DCPS/FastRTPS](https://www.eprosima.com/index.php/fast-rtps) v1.9.6 or later\n\n## Compile and run the example\n\nThe example can be compiled and run on Windows", "Linux", "and macOS using the `run_example.bat`", "`run_example.sh`", "or `run_example.ps1` script provided with the example. The script will prompt for the DDS library and run the example.\n\n## Documentation\n\n* [DDS DCPS Policy Reference Manual](https://community.rti.com/static/documentation/connext-dds/6.0.1/doc/manuals/connext_dds/html_files/DCPS_Policy_Reference_Manual/index.htm)\n* [OpenSplice Policy History](https://community.rti.com/static/documentation/opensplice/6.8.3/doc/manuals/OpenSplice/users_guide/html/Users_Guide/a-configuring_history_and_persistence.html)\n* [FastRTPS Policy History](https://fast-rtps.docs.eprosima.com/en/latest/fastdds/dds_layer/policy/detailed/History/index.html)"], "parsing_result": [{"instruction": "1: Enable the history policy\n\nThe first step is to enable the history policy: the writer will retain samples until the reader has seen them, and the reader will read all samples that it has not yet seen.\n\nThe task is to configure the writer and reader to enable history and to set the maximum number of samples to be retained."}, {"instruction": "1: Policy History\n\n* Add a DDS DataWriter Policy History and HistoryKind\n* Add a DDS DataReader Policy History and HistoryKind\n\n### Task 2: Policy Lifespan\n\n* Add a DDS DataWriter Policy Lifespan\n* Add a DDS DataReader Policy Lifespan\n\n### Task 3: Policy Durability\n\n* Add a DDS DataWriter Policy Durability and DurabilityService\n* Add a DDS DataReader Policy Durability and DurabilityService\n\n### Task 4: Policy Deadline\n\n* Add a DDS DataWriter Policy Deadline\n* Add a DDS DataReader Policy Deadline\n\n### Task 5: Policy Latency Budget\n\n* Add a DDS DataWriter Policy LatencyBudget\n* Add a DDS DataReader Policy LatencyBudget\n/02-shared-memory/run_example.sh\n#!/bin/bash\n\nif [[ ! -z $1 ]]; then\n    export DDS_DOMAINID=$1\nfi\n\n# Select the DDS library\necho \"Which DDS library would you like to use? [Connext, OpenSplice, FastRTPS]\"\nread dds_library\n\n# Set the environment variables for the DDS library\nif [[ $dds_library == \"Connext\" ]]; then\n    echo \"Setting Connext environment variables\"\n    . /opt/rti/rti_connext_dds-6.0.1/resource/scripts/rtisetenv.sh --no-conf\n\n    ORB_NS=multicast\n    export DDS_DOMAINID=0\nfi\n\nif [[ $dds_library == \"OpenSplice\" ]]; then\n    echo \"Setting OpenSplice environment variables\"\n    . /opt/rti/OpenSpliceDDS-6.8.3/resource/scripts/rtisetenv.sh\n\n    # Or use the ORB_NS environment variable\n    export ORB_NS=multicast\n    export DDS_DOMAINID=0\nfi\n\nif [[ $dds_library == \"FastRTPS\" ]]; then\n    echo \"Setting FastRTPS environment variables\"\n    . /opt/rti/RTIProd/rti/resource/scripts/rtisetenv.sh\n\n    # Or use the ORB_NS environment variable\n    export ORB_NS=multicast\n    export DDS_DOMAINID=0\nfi\n\n# Remove old build directories\nrm -rf build.connext\nrm -rf build.openslice\nrm -rf build.fastrtps\n\n# Compile the example code\nmkdir build.connext\ncd build.connext\ncmake -G \"Unix Makefiles\" -DDDS_LIBRARY=Connext -DDDS_ARCHITECTURE=x64Linux2 -DDDS_TARGET_ARCH=x64Linux2 -DDDS_OS=linux -DDDS_INSTALLATION=/opt/rti/rti_connext_dds-6.0.1/...\nmake -j8\n\nmkdir build.openslice\ncd build.openslice\ncmake -G \"Unix Makefiles\" -DDDS_LIBRARY=OpenSplice -DDDS_ARCHITECTURE=x64Linux2 -DDDS_TARGET_ARCH=x64Linux2 -DDDS_OS=linux -DDDS_INSTALLATION=/opt/rti/OpenSpliceDDS-6.8.3/...\nmake -j8\n\nmkdir build.fastrtps\ncd build.fastrtps\ncmake -G \"Unix Makefiles\" -DDDS_LIBRARY=FastRTPS -DDDS_ARCHITECTURE=x64Linux2 -DDDS_TARGET_ARCH=x64Linux2 -DDDS_OS=linux -DDDS_INSTALLATION=/opt/rti/RTIProd/rti/...\nmake -j8\n\n# Run the example code\ncd ../../\n./build.connext/example\n./build.openslice/example\n./build.fastrtps/example\n/06-multiple-machines/README.md\n/06-multiple-machines/README.md\n# 06: Multiple Machines\n\nThis example demonstrates how to run multiple machines in an environment where the DDS infrastructure is already present.\n\n## Prerequisites\n\n* DDS library and DDS middleware\n* Management tools"}, {"instruction": "1: Create a custom QoS\n\nThe example uses the `HistoryQosPolicy` policy to configure the DDS data writer and data reader. This policy is used to configure the number of historical data samples that the data writer and data reader will retain. The policy configuration is defined in the `CustomQosPolicy` class.\n\nThe example uses a custom QoS configuration for the data writer and reader to configure the history of data samples to be retained. Specifically, the example sets the `HistoryQosPolicy` to store 10 historical data samples.\n\n### Task 2: Set the history of data samples to be retained\n\nThe example uses the `HistoryQosPolicy` to configure the number of historical data samples that the data writer and data reader will retain. This policy is used to define the history of data samples that will be stored.\n\nThe example configures the `HistoryQosPolicy` to store 10 historical data samples. The example also defines the `KeepLastQosPolicy` to define the maximum number of historical data samples that can be stored.\n\n### Task 3: Create a type and modify its QoS\n\nThe example uses the `CustomQosPolicy` class to create a type and modify its QoS. This type is used to create a custom QoS configuration.\n\nThe example defines the `CustomQosPolicy` class to create a custom QoS and modify its QoS. Specifically, the example creates a custom QoS configuration for a type called `Person`. The example sets the `HistoryQosPolicy` to store 10 historical data samples. The example also sets the `KeepLastQosPolicy` to define the maximum number of historical data samples that can be stored.\n\n### Task 4: Create a custom type\n\nThe example uses the `CustomQosPolicy` class to create a custom type. This type is used to create a custom QoS configuration.\n\nThe example defines the `CustomQosPolicy` class to create a custom type called `Person`. The example creates a custom type called `Person`. The example defines the fields that are used in the `Person` type.\n\n### Task 5: Create a custom data writer\n\nThe example creates a custom data writer using the `CustomQosPolicy` class. This custom data writer is used to write data.\n\nThe example creates a custom data writer called `CustomDataWriter`. The example sets the `HistoryQosPolicy` to store 10 historical data samples. The example also sets the `KeepLastQosPolicy` to define the maximum number of historical data samples that can be stored.\n\n### Task 6: Create a custom data reader\n\nThe example creates a custom data reader using the `CustomQosPolicy` class. This custom data reader is used to read data.\n\nThe example creates a custom data reader called `CustomDataReader`. The example sets the `HistoryQosPolicy` to store 10 historical data samples. The example also sets the `KeepLastQosPolicy` to define the maximum number of historical data samples that can be stored.\n\n### Task 7: Initialize the example\n\nThe example initializes the example by:\n\n- creating a domain with ID 0\n- creating a topic with name `ExampleTopic` and type `Person`\n- creating a custom data writer and custom data reader\n\n### Task 8: Write sample data\n\nThe example writes sample data to the custom data writer. This data is sent to the custom data reader.\n\nThe example writes sample data to the custom data writer. The example also prints out the data that is received by the custom data reader.\n\n### Task 9: Close the data writers and data readers\n\nThe example closes the custom data writer and custom data reader.\n\nThe example closes the custom data writer and custom data reader.\n\n### Task 10: Remove the custom QoS\n\nThe example removes the custom QoS by calling `removeQos`.\n\nThe example removes the custom QoS by calling `removeQos`.\n\n### Task 11: Remove the custom type\n\nThe example removes the custom type by calling `removeType`.\n\nThe example removes the custom type by calling `removeType`.\n\n### Task 12: Remove the domain\n\nThe example removes the domain by calling `removeDomain`.\n\nThe example removes the domain by calling `removeDomain`."}, {"instruction": "1: Configure History\n\nThe example configures the DDS data writer and data reader to preserve the history of data samples. To do so, update the example's `main` method to configure the data writer and reader with the following properties:\n\n* `dds.history.kind` = `KEEP_ALL`\n* `dds.history.depth` = 200\n* `dds.history.max_instances` = 200\n* `dds.history.max_samples` = 100\n* `dds.history.max_samples_per_instance` = 100\n\n### Task 2: Implement a DDS Data Listener\n\nImplement a DDS data listener to listen for samples received by the data reader. To do so, update the example's `main` method to implement the following listener:\n\n```java\n    dds.DataReaderListener listener = new dds.DataReaderListener() {\n        @Override\n        public void on_data_available(dds.DataReader reader) {\n            System.out.println(\"Data sample received\");\n        }\n\n        @Override\n        public void on_Requested_deadline_missed(dds.DataReader reader, dds.RequestedDeadlineMissedStatus status) {\n            System.out.println(\"Deadline missed\");\n        }\n\n        @Override\n        public void on_Requested_incompatible_qos(dds.DataReader reader, dds.RequestedIncompatibleQosStatus status) {\n            System.out.println(\"Incompatible QoS\");\n        }\n\n        @Override\n        public void on_sample_lost(dds.DataReader reader) {\n            System.out.println(\"Sample lost\");\n        }\n\n        @Override\n        public void on_subscription_matched(dds.DataReader reader, dds.SubscriptionMatchedStatus status) {\n            System.out.println(\"Subscription matched\");\n        }\n\n        @Override\n        public void on_sample_rejected(dds.DataReader reader, dds.SampleRejectedStatus status) {\n            System.out.println(\"Sample rejected\");\n        }\n\n        @Override\n        public void on_liveliness_changed(dds.DataReader reader, dds.LivelinessChangedStatus status) {\n            System.out.println(\"Liveliness changed\");\n        }\n\n        @Override\n        public void on_offered_deadline_missed(dds.DataReader reader, dds.OfferedDeadlineMissedStatus status) {\n            System.out.println(\"Deadline missed\");\n        }\n\n        @Override\n        public void on_offered_incompatible_qos(dds.DataReader reader, dds.OfferedIncompatibleQosStatus status) {\n            System.out.println(\"Incompatible QoS\");\n        }\n\n        @Override\n        public void on_publication_matched(dds.DataReader reader, dds.PublicationMatchedStatus status) {\n            System.out.println(\"Publication matched\");\n        }\n    };\n\n    // Add the listener to the data reader\n    reader.setListener(listener);\n```\n\n### Task 3: Publish Data\n\nUpdate the example's `main` method to publish new data on the data writer every second. The example will publish data samples of type `PolicyHistorySample` that contain a `user_string` property.\n\n```java\n// Create a random string\nString randomString = RandomStringUtils.random(10, true, true);\n\n// Create a data sample\nPolicyHistorySample sample = new PolicyHistorySample(randomString);\n\n// Publish the data sample\nwhile (true) {\n    writer.write(sample);\n    Thread.sleep(1000);\n}\n```\n\n### Task 4: Subscribe to Data\n\nUpdate the example's `main` method to subscribe to data samples of type `PolicyHistorySample`.\n\n```java\n    // Create a policy history QoS\n    dds.topic.qos.TopicQos policyHistoryQos = new dds.topic.qos.TopicQos();\n    policyHistoryQos.withHistoryQos(new dds.topic.qos.HistoryQos(dds.topic.qos.HistoryQosKind.KEEP_ALL)\n        .withDepth(200)\n        .withMaxInstances(200)\n        .withMaxSamples(100)\n        .withMaxSamplesPerInstance(100));\n\n    // Create a data reader\n    dds.DataReader reader = dds.DataReader.narrow(\n        pub.Reader.lookup_instance(\"PolicyHistorySampleReader\").create_datareader(policyHistoryQos));\n\n    // Create a policy history listener\n    dds.DataReaderListener listener = new dds.DataReaderListener() {\n        @Override\n        public void on_data_available(dds.DataReader reader) {\n            System.out.println(\"Data sample received\");\n        }\n\n        @Override\n        public void on_Requested_deadline_missed(dds.DataReader reader, dds.RequestedDeadlineMissedStatus status) {\n            System.out.println(\"Deadline missed\");\n        }\n\n        @Override\n        public void on_Requested_incompatible_qos(dds.DataReader reader, dds.RequestedIncompatibleQosStatus status) {\n            System.out.println(\"Incompatible QoS\");\n        }\n\n        @Override\n        public void on_sample_lost(dds.DataReader reader) {\n            System.out.println(\"Sample lost\");\n        }\n\n        @Override\n        public void on_subscription_matched(dds.DataReader reader, dds.SubscriptionMatchedStatus status) {\n            System.out.println(\"Subscription matched\");\n        }\n\n        @Override\n        public void on_sample_rejected(dds.DataReader reader, dds.SampleRejectedStatus status) {\n            System.out.println(\"Sample rejected\");\n        }\n\n        @Override\n        public void on_liveliness_changed(dds.DataReader reader, dds.LivelinessChangedStatus status) {\n            System.out.println(\"Liveliness changed\");\n        }\n\n        @Override\n        public void on_offered_deadline_missed(dds.DataReader reader, dds.OfferedDeadlineMissedStatus status) {\n            System.out.println(\"Deadline missed\");\n        }\n\n        @Override\n        public void on_offered_incompatible_qos(dds.DataReader reader, dds.OfferedIncompatibleQosStatus status) {\n            System.out.println(\"Incompatible QoS\");\n        }\n\n        @Override\n        public void on_publication_matched(dds.DataReader reader, dds.PublicationMatchedStatus status) {\n            System.out.println(\"Publication matched\");\n        }\n    };\n\n    // Add the policy history listener to the data reader\n    reader.setListener(listener);\n```\n\n### Task 5: Run the example\n\nCompile and run the example using the `run_example.bat`, `run_example.sh`, or `run_example.ps1` script. The script will prompt for the DDS library and run the example.\n\n## Output\n\nWhen the example is running, it will continuously publish and subscribe to data samples of type `PolicyHistorySample`. You can use the output to verify that the example is working properly."}, {"instruction": "1: Compile the example\n\nCompile the example using the `compile_example.bat`, `compile_example.sh`, or `compile_example.ps1` script provided with the example.\n\n### Task 2: Configure the example\n\nBefore running the example, configure the example using the `configure_example.bat`, `configure_example.sh`, or `configure_example.ps1` script provided with the example. The script will prompt for the DDS library and configure the example.\n\n### Task 3: Run the example\n\nRun the example using the `run_example.bat`, `run_example.sh`, or `run_example.ps1` script provided with the example. The script will prompt for the DDS library and run the example."}, {"instruction": "Create a domain, a topic with a data type, and a data writer and data reader. Configure the data writer and data reader to preserve the history of data samples sent by the writer for 10 seconds.\n\n### Implementation\n\nFor C++ the examples use OpenSplice, for Python the examples use FastRTPS.\n\nThe implementation is similar in each case, but the code might differ slightly. These are the main differences:\n\n#### C++\nThe data writer and data reader are configured to preserve the history of data samples sent by the writer for 10 seconds. The following code shows how this is accomplished:\n\n```c++\n    // Create parameters for the data writer\n    dds::core::policy::History history(dds::core::policy::KEEP_LAST, 10);\n    dds::core::policy::Durability durability(dds::core::policy::PERSISTENT);\n    dds::domain::DomainParticipant::PublisherQos publisher_qos;\n    publisher_qos.history() = history;\n    publisher_qos.durability() = durability;\n    publisher_qos.presentation().access_scope() = dds::core::policy::INSTANCE;\n\n    // Create parameters for the data reader\n    dds::core::policy::ReaderDataLifecycle reader_data_lifecycle(dds::core::policy::LIVE);\n    dds::domain::DomainParticipant::SubscriberQos subscriber_qos;\n    subscriber_qos.data_reader_qos().reader_data_lifecycle().keep_all_data() = reader_data_lifecycle;\n    subscriber_qos.presentation().access_scope() = dds::core::policy::INSTANCE;\n```\n\n#### Python\nThe data writer and data reader are configured to preserve the history of data samples sent by the writer for 10 seconds. The following code shows how this is accomplished:\n\n```python\n    # Create parameters for the data writer\n    history = HistoryQos(HistoryQos.KEEP_LAST, 10)\n    durability = DurabilityQos(DurabilityQos.PERSISTENT)\n    publisher_qos = PublisherQos()\n    publisher_qos.history(history)\n    publisher_qos.durability(durability)\n    publisher_qos.presentation().access_scope(AccessScope.INSTANCE)\n\n    # Create parameters for the data reader\n    reader_data_lifecycle = ReaderDataLifecycleQos(ReaderDataLifecycleQos.LIVE)\n    subscriber_qos = SubscriberQos()\n    subscriber_qos.data_reader_qos().reader_data_lifecycle().keep_all_data(reader_data_lifecycle)\n    subscriber_qos.presentation().access_scope(AccessScope.INSTANCE)\n```\n\n## Code walkthrough\n\nThis example demonstrates how to configure the DDS data writer and data reader so that the history of data samples is preserved. This is useful in scenarios where the exact history of data samples is needed, such as when auditing or debugging.\n\n### Step 1: Create a domain\n\nA DDS domain is used to identify the participant, topic, and data writer within a distributed application.\n\n### Step 2: Create a topic\n\nA topic is a named structure that is responsible for declaring the structure of data samples and for specifying the type of communication that will be used.\n\n### Step 3: Create a data writer\n\nA data writer is a reliable channel for writing data samples to a Data Distribution Service (DDS) topic. Data writers send data samples to a DDS topic.\n\n### Step 4: Create a data reader\n\nA data reader is a reliable channel for reading data samples from a Data Distribution Service (DDS) topic. Data readers receive data samples from a DDS topic.\n\n### Step 5: Configure the data writer\n\nThe DDS data writer is configured with the history policy to preserve the history of data samples sent by the writer for 10 seconds. This is a core DDS feature that is commonly used in the development of applications.\n\n### Step 6: Configure the data reader\n\nThe DDS data reader is configured with the data lifecycle policy to preserve the history of data samples sent by the writer for 10 seconds. This is a core DDS feature that is commonly used in the development of applications.\n\n### Step 7: Write data samples\n\nData samples are written to a DDS topic. The data samples are sent to the DDS data writer for persistence.\n\n### Step 8: Read data samples\n\nData samples are read from a DDS topic. The data samples are retrieved from the DDS data reader.\n\n### Step 9: Iterate over the data samples\n\nThe data samples are iterated over and printed to the console.\n\n### Step 10: Delete the domain\n\nThe DDS domain is deleted after the data samples have been iterated over and printed to the console."}, {"instruction": "1: Configure the DDS DataWriter history depth\n\nThe DDS data writer history depth policy is used to control the size of the history that is kept in the DDS data writer for each data instance. The history depth policy defines the maximum number of samples that can be in the history.\n\nBy default, Connext and OpenSplice have a history depth of 1000 samples. When the history depth is set to 1000 samples, each data instance is guaranteed to have at most 1000 samples in the history. If a new sample is submitted to a data instance and the history depth is 1000 samples, the oldest sample is discarded.\n\nWhen the history depth is set to 1000 samples, the history depth must be set for each data instance. This means that the history depth policy must be set on both the data writer and data reader, and the history depth of each data instance must be the same.\n\nIf the history depth policy is set to 0, the history is disabled. This means that Connext and OpenSplice will not keep any history of data samples.\n\nIf the history depth policy is set to a value greater than 0, then the DDS data reader must also have a history depth. If the history depth policy is set to 1000 samples, the DDS data reader must also have a history depth of 1000 samples.\n\nSet the history depth for the data writer using the `HistoryDepth` DCPS policy. OpenSplice and FastRTPS support setting this policy on the data writer, and FastRTPS also supports setting it on the data reader.\n\n```c++\n// Set the HistoryDepth policy on the data writer.\ndataWriter.SetHistoryDepth(1000);\n```\n\nThe history depth policy also supports the following modifiers, which can be used to control the behavior of the history depth:\n\n* `AUTOMATIC_PRESERVATION` - When the history depth is set to a value greater than 0, this modifier will ensure that the history depth is preserved when data is written to multiple data instances. This modifier can be set on both the data writer and data reader.\n* `KEEP_LAST` - When the history depth is set to a value greater than 0, this modifier will ensure that only the last *n* samples are kept in the history. This modifier can be set on both the data writer and data reader.\n\n```c++\n// Set the HistoryDepth policy on the data writer using the AUTOMATIC_PRESERVATION modifier.\ndataWriter.SetHistoryDepth(1000, DDS_KEEP_LAST);\n```\n\n### Task 2: Configure the DDS DataReader history depth\n\nThe DDS data reader history depth policy is used to control the size of the history that is kept in the DDS data reader for each data instance. The history depth policy defines the maximum number of samples that can be in the history. If a new sample is submitted to a data instance and the history depth is 1000 samples, the oldest sample is discarded.\n\nBy default, Connext and OpenSplice have a history depth of 1000 samples. When the history depth is set to 1000 samples, each data instance is guaranteed to have at most 1000 samples in the history. If a new sample is submitted to a data instance and the history depth is 1000 samples, the oldest sample is discarded.\n\nWhen the history depth is set to 1000 samples, the history depth must be set for each data instance. This means that the history depth policy must be set on both the data writer and data reader, and the history depth of each data instance must be the same.\n\nIf the history depth policy is set to 0, the history is disabled. This means that Connext and OpenSplice will not keep any history of data samples.\n\nIf the history depth policy is set to a value greater than 0, then the DDS data writer must also have a history depth. If the history depth policy is set to 1000 samples, the DDS data writer must also have a history depth of 1000 samples.\n\nSet the history depth for the data reader using the `HistoryDepth` DCPS policy. OpenSplice and FastRTPS support setting this policy on the data reader, and FastRTPS also supports setting it on the data writer.\n\n```c++\n// Set the HistoryDepth policy on the data reader.\ndataReader.SetHistoryDepth(1000);\n```\n\nThe history depth policy also supports the following modifiers, which can be used to control the behavior of the history depth:\n\n* `AUTOMATIC_PRESERVATION` - When the history depth is set to a value greater than 0, this modifier will ensure that the history depth is preserved when data is written to multiple data instances. This modifier can be set on both the data writer and data reader.\n* `KEEP_LAST` - When the history depth is set to a value greater than 0, this modifier will ensure that only the last *n* samples are kept in the history. This modifier can be set on both the data writer and data reader.\n\n```c++\n// Set the HistoryDepth policy on the data reader using the AUTOMATIC_PRESERVATION modifier.\ndataReader.SetHistoryDepth(1000, DDS_KEEP_LAST);\n```"}, {"instruction": "Create a DDS data writer and data reader that preserve the history of data samples. Write a C++ function `addNewData` that generates random data and sends random data samples to the data writer. Write a C++ function `receiveData` that receives data samples from the data reader and prints the received data samples."}, {"instruction": "1: Configure the data writer and data reader to preserve the history of data samples\n\nTo preserve the history of data samples, the `dds_policy_id` should be set on the data writer and data reader, respectively. This allows the data writer to write data samples in batches and then send them to the data reader as a batch.\n\n### Task 2: Configure the data writer and data reader to use a specific QoS history depth\n\nThe QoS history depth determines the maximum number of data samples that can be stored for each data writer and data reader. This allows the history of data samples to be limited, which can be useful for scenarios where the exact history of data samples is needed, such as when auditing or debugging."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: dynamic programming, recursion, modular arithmetic\n\n### Task", "fingerprint": null, "content": {"code": "DAG ComputeDAG2(const Graph &graph, int src_v) {\n  DAG dag(graph.size());\n  multimap<Bignum, Edge> que;\n// stack<Edge> que;\n  que.insert(make_pair(1, Edge{src_v, 0}));\n\n  rep (iter, FLAGS_search_limit) {\n    if (que.empty()) break;\n    Edge crr = que.begin()->second;\n    que.erase(que.begin());\n\n    if (crr.second == 1) {\n      printf(\"%d -> %d\\n\", src_v, crr.first);\n      EnumeratePaths(dag, crr);\n    }\n// if (iter % 1000 == 0) cerr << src_v << \" \" << iter << \": \" << static_cast<double>(crr.second) << endl;\n\n    for (const auto &e : graph[crr.first]) {\n      Edge nxt(e.first, crr.second + e.second);\n      if (nxt.second > 1) continue;\n\n      auto &v = dag[nxt.first][nxt.second];\n      if (v.empty()) que.insert(make_pair(denominator(nxt.second), nxt));\n      v.emplace_back(crr);\n    }\n  }\n\n  return dag;\n}", "docstring": "// if (iter % 1000 == 0) cerr << src_v << \" \" << iter << \": \" << static_cast<double>(crr.second) << endl;", "function_name": "rep"}, "id": 224, "seed": "DAG ComputeDAG2(const Graph &graph, int src_v) {\n  DAG dag(graph.size());\n  multimap<Bignum, Edge> que;\n// stack<Edge> que;\n  que.insert(make_pair(1, Edge{src_v, 0}));\n\n  rep (iter, FLAGS_search_limit) {\n    if (que.empty()) break;\n    Edge crr = que.begin()->second;\n    que.erase(que.begin());\n\n    if (crr.second == 1) {\n      printf(\"%d -> %d\\n\", src_v, crr.first);\n      EnumeratePaths(dag, crr);\n    }\n// if (iter % 1000 == 0) cerr << src_v << \" \" << iter << \": \" << static_cast<double>(crr.second) << endl;\n\n    for (const auto &e : graph[crr.first]) {\n      Edge nxt(e.first, crr.second + e.second);\n      if (nxt.second > 1) continue;\n\n      auto &v = dag[nxt.first][nxt.second];\n      if (v.empty()) que.insert(make_pair(denominator(nxt.second), nxt));\n      v.emplace_back(crr);\n    }\n  }\n\n  return dag;\n}", "concepts": ["dynamic programming", "recursion", "modular arithmetic"], "parsing_result": [{"instruction": "Implement a Python class `Fraction` that represents fractions."}, {"instruction": "Implement a Python class `Cell` that stores a 2D array of integers representing the grid of a Cellular Automaton."}, {"instruction": "Implement a dynamic programming algorithm for the coin change problem."}, {"instruction": "Implement a Python class `Chocolate` with the following methods:\n- `get_price(self)` that returns the price of a chocolate bar (a chocolate bar is Rs. 12 for a dozen).\n- `get_num_bars(self, n)` that returns the number of bars that can be bought with Rs. n."}, {"instruction": "Implement a Python class `Fibonacci` that implements the Fibonacci numbers using dynamic programming and recursion."}, {"instruction": "Write a Python class `Fibonacci` that implements a Fibonacci number generator."}, {"instruction": "Write a Python class `Fibonacci` that calculates the Fibonacci sequence up to a given number."}, {"instruction": "Implement a Python class `Stack` that provides stack operations, including `push`, `pop`, and `is_empty`."}, {"instruction": "Write a Python implementation of the `fibonacci` function that returns the nth Fibonacci number using recursion."}, {"instruction": "Create a Python class `FibonacciClass` that defines a function `fib` that returns the nth Fibonacci number."}, {"instruction": "Write a Python class `Fraction` that represents a fractional number. The class defines constructor methods that take two optional parameters: `numerator` and `denominator`, both integers. The class also defines a static method `gcd` that computes the greatest common divisor of two numbers."}, {"instruction": "Create a Python class `Fibonacci` that implements the Fibonacci sequence."}, {"instruction": "Implement a Python class describing a simple queue."}, {"instruction": "Create a Python class `Fibonacci` to return the nth Fibonacci number."}, {"instruction": "Create a Python class `DynamicString` that implements dynamic string manipulation."}, {"instruction": "Create a Python class `Matrix` to represent a matrix and implement the following methods:\n- add\n- subtract\n- multiply\n- transpose"}, {"instruction": "Create a Python class `Triangle` that provides a method `areas` that calculates the area of three triangles given their side lengths, using dynamic programming."}, {"instruction": "Write a Python class `Fraction` to represent fractions using Python's `int` and `int` as numerator and denominator."}, {"instruction": "Write a Python class `Game` that simulates the game of rock, paper, scissors."}, {"instruction": "Create a Python class `Fraction` that represents fractions. The class must implement:\n- `__init__`: constructor\n- `__str__`: convert the fraction to a string\n- `__add__`: addition\n- `__sub__`: subtraction\n- `__mul__`: multiplication\n- `__truediv__`: division\n- `__eq__`: equality check"}, {"instruction": "Write a `Rectangle` class in Python that has four integer attributes: `width`, `height`, `x`, and `y`."}, {"instruction": "Create a Python class `Fibonacci` that contains a method `nthTerm` that returns the nth Fibonacci number in the Fibonacci sequence."}, {"instruction": "Write a Python class for the following recursive problem:\n\nGiven a positive integer n, count the number of possible walks of length n from the origin (0, 0) to (n-1, n-1) that can be formed using only the four cardinal directions."}, {"instruction": "Write a Python class `Stack` that implements a stack data structure."}, {"instruction": "Create a Python class `Catalan` that uses recursion to calculate the Catalan number for a given n."}, {"instruction": "Write a Python class `Fibonacci` that stores the Fibonacci numbers in an array using dynamic programming."}, {"instruction": "Given a number n, create a Python class called `Fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Implement a dynamic programming CyclicShift class that performs cyclic shift operations on arbitrary sequences of arbitrary digits."}, {"instruction": "Implement a Python class `Fibonacci` that calculates and caches the Fibonacci numbers."}, {"instruction": "Write a Python class `Matrix` that implements a matrix of arbitrary size using a 2-D array."}, {"instruction": "Write a python class `Fibonacci` that implements the Fibonacci sequence."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: depth-first search, tree traversal\n\n### Task", "fingerprint": null, "content": {"code": "inline int DFS(int x,int flw){//flw\uff1a\u5f53\u524d\u6d41\u91cf\uff08flow\uff09 \r\n\tif (x==n) return flw;\r\n\tfor (int i=cur[x];i!=-1;i=cur[x]=nxt[i]){\r\n\t\tif ((deep[son[i]]==deep[x]+1)&&w[i]){\r\n\t\t\tint nxtflw=DFS(son[i],min(flw,w[i]));\r\n\t\t\tif (nxtflw){//nxtflw>0\u8bf4\u660e\u589e\u5e7f\u6210\u529f \r\n\t\t\t\tw[i]-=nxtflw;\r\n\t\t\t\tw[i^1]+=nxtflw;//\u53cd\u5411\u8fb9\u52a0\u4e0a\u672c\u6b21\u589e\u5e7f\u6d41\u91cf\uff0c\u7531\u4e8e\u6b63\u53cd\u8fb9\u4e24\u4e24\u76f8\u90bb\u5b58\u50a8\uff0c\u6240\u4ee5i^1\u5373\u4e3ai\u7684\u53cd\u5411\u8fb9 \r\n\t\t\t\treturn nxtflw;//\u5411\u4e0a\u4f20\u9012 \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;//\u6ca1\u6709return\u8bf4\u660e\u6ca1\u6709\u589e\u5e7f\u8def \r\n}", "docstring": "//\u6784\u9020\u5206\u5c42\u56fe\uff0c\u8fd4\u56de\u662f\u5426\u5b58\u5728\u589e\u5e7f\u8def \r", "function_name": "BFS"}, "id": 228, "seed": "inline int DFS(int x,int flw){//flw\uff1a\u5f53\u524d\u6d41\u91cf\uff08flow\uff09 \r\n\tif (x==n) return flw;\r\n\tfor (int i=cur[x];i!=-1;i=cur[x]=nxt[i]){\r\n\t\tif ((deep[son[i]]==deep[x]+1)&&w[i]){\r\n\t\t\tint nxtflw=DFS(son[i],min(flw,w[i]));\r\n\t\t\tif (nxtflw){//nxtflw>0\u8bf4\u660e\u589e\u5e7f\u6210\u529f \r\n\t\t\t\tw[i]-=nxtflw;\r\n\t\t\t\tw[i^1]+=nxtflw;//\u53cd\u5411\u8fb9\u52a0\u4e0a\u672c\u6b21\u589e\u5e7f\u6d41\u91cf\uff0c\u7531\u4e8e\u6b63\u53cd\u8fb9\u4e24\u4e24\u76f8\u90bb\u5b58\u50a8\uff0c\u6240\u4ee5i^1\u5373\u4e3ai\u7684\u53cd\u5411\u8fb9 \r\n\t\t\t\treturn nxtflw;//\u5411\u4e0a\u4f20\u9012 \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;//\u6ca1\u6709return\u8bf4\u660e\u6ca1\u6709\u589e\u5e7f\u8def \r\n}", "concepts": ["depth-first search", "tree traversal"], "parsing_result": [{"instruction": "Create a Python class `Graph` that implements a simple graph data structure."}, {"instruction": "Write a Python class `TreeNode` that models a tree node containing two references: a left child and a right child."}, {"instruction": "Write a Python class `BinaryTree` that finds the minimum depth of a binary tree."}, {"instruction": "Write a Python class `DepthFirstTree` that implements a tree data structure using a stack, and performs a depth-first search (DFS) over the tree."}, {"instruction": "Write a Python class `Node` with the following properties:\n\n- `data`: a Python `int`\n- `left`: a `Node` object\n- `right`: a `Node` object\n\nWrite a Python function `depthFirstTraversal` that traverses a tree through depth-first search and prints out the data of each node in the order of the tree being traversed."}, {"instruction": "Write a Python function `findPaths` that takes a graph and a start and end node and finds all paths between the two nodes."}, {"instruction": "Implement a Python class `Node` that can be used to represent a binary search tree (BST)."}, {"instruction": "Write a Python class `Tree` that implements a BST."}, {"instruction": "Write a Python class `BinaryTree` that implements a binary tree."}, {"instruction": "Implement a Python class `Graph` that supports the following operations:\n\n- add_vertex(label): adds a new vertex with the given label to the graph if it does not already exist\n- add_edge(v1, v2): adds an edge from vertex v1 to vertex v2 to the graph\n- remove_vertex(label): removes the vertex with the given label from the graph if it exists\n- remove_edge(v1, v2): removes any edges from vertex v1 to vertex v2 from the graph if it exists\n- vertices(): returns a set of all vertices in the graph\n- edges(): returns a set of all edges in the graph"}, {"instruction": "Write a Python function `sumTree` that takes a binary tree and returns the sum of all the tree nodes' values."}, {"instruction": "Write a Python class `BinaryTree` representing a binary tree and implementing the following methods:\n- `insert`\n- `search`\n- `preorder`\n- `postorder`\n- `inorder`\n- `height`"}, {"instruction": "Create a Python class `BinaryTree` that implements a binary tree."}, {"instruction": "Create a Python class `BinaryNode` that stores an integer and two BinaryNodes that point to its left and right subtrees."}, {"instruction": "Implement a Python class `Node` with methods `insertLeft` and `insertRight` that insert and return a new `Node` instance, respectively."}, {"instruction": "Create a Python class `BinarySearchTree` that implements a binary search tree (BST)."}, {"instruction": "Create a Python class `Graph` that implements a graph."}, {"instruction": "Write a Python class called `Tree`, with the following properties:\n- `Tree` objects can be instantiated with an integer value as the root of the tree\n- `Tree` objects can be instantiated with a dictionary containing the root as the key and an empty list of children as the value\n- `Tree` objects can be instantiated with a `Tree` object and a list of child `Tree` objects\n- `Tree` objects have an attribute `value` that stores the value of their current node\n- `Tree` objects have an attribute `children` that stores a list of their child `Tree` objects\n- `Tree` objects have a method `addValue` that adds a new `Tree` object containing the value to the `Tree` object's list of children\n- `Tree` objects have a method `addNode` that adds a `Tree` object to the `Tree` object's list of children\n- `Tree` objects have a method `isBalanced` that returns true if every node on the tree has the same number of children\n- `Tree` objects have a method `depth` that returns the maximum depth of the tree\n- `Tree` objects have a method `breadth` that returns the maximum breadth of the tree"}, {"instruction": "Write a Python class `BinaryTree` that implements a binary tree with `insert` and `search` methods, respectively."}, {"instruction": "Write a Python class `Tree` that represents a binary search tree."}, {"instruction": "Write a Python class `Tree` that represents a binary tree with integer values. Implement a method `count_elements` that returns the number of elements present in the tree."}, {"instruction": "Write a Python class `BinaryTree` that implements a binary tree."}, {"instruction": "Implement a Python class `Graph` that represents a graph of nodes and edges."}, {"instruction": "Design a Python class `Graph` that implements a graph data structure."}, {"instruction": "Create a Python class `Node` that implements a basic binary tree node."}, {"instruction": "Write a Python class `BinarySearchTree` that implements a binary search tree and contains methods for inserting, deleting, and searching a given value and returning in-order traversal of the tree."}, {"instruction": "Implement a Python class `Tree` that represents a binary tree. It must support the following methods:\n\n- `insert`: inserts a new node into the tree, with the given value.\n- `depth`: returns the depth of the tree.\n- `is_balanced`: returns True if the tree is balanced, and False otherwise."}, {"instruction": "Write a Python class `Node` that represents a node in a binary tree."}, {"instruction": "Write a Python program that prints a binary tree's nodes in pre-order."}, {"instruction": "Write a Python class `Tree` that supports the following methods:\n- `insert`: insert a node with the specified value\n- `contains`: query whether the tree contains a node with the specified value\n- `preorder`: print the preorder traversal of the tree\n- `postorder`: print the postorder traversal of the tree\n- `dfs`: find a node with the specified value using depth-first search"}, {"instruction": "Write a Python class `BinaryTree` that contains a root node and methods to traverse the tree in preorder, inorder, and postorder."}, {"instruction": "Write a Python class `Node` that represents a node in a singly-linked list."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: XML parsing, DOM manipulation, file I/O\n\n### Task", "fingerprint": null, "content": {"code": "SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Obs(struct soap *soap, const char *tag, int id, const ns3__Obs *a, const char *type)\n{\n\t(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_afip_ns3__Obs), type))\n\t\treturn soap->error;\n\tif (soap_out_int(soap, \"ns3:Code\", -1, &a->ns3__Obs::Code, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerTostd__string(soap, \"ns3:Msg\", -1, &a->ns3__Obs::Msg, \"\"))\n\t\treturn soap->error;\n\treturn soap_element_end_out(soap, tag);\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_instantiate_ns3__ArrayOfEvt"}, "id": 236, "seed": "SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Obs(struct soap *soap, const char *tag, int id, const ns3__Obs *a, const char *type)\n{\n\t(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_afip_ns3__Obs), type))\n\t\treturn soap->error;\n\tif (soap_out_int(soap, \"ns3:Code\", -1, &a->ns3__Obs::Code, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerTostd__string(soap, \"ns3:Msg\", -1, &a->ns3__Obs::Msg, \"\"))\n\t\treturn soap->error;\n\treturn soap_element_end_out(soap, tag);\n}", "concepts": ["XML parsing", "DOM manipulation", "file I/O"], "parsing_result": [{"instruction": "Write a Python function `countWords` that counts the number of words in an XML file."}, {"instruction": "Write a Python function `countTags` that counts the number of occurrences of specific XML tags in a given XML file."}, {"instruction": "Create a Python function `parseXML` that takes a given file path and returns a Python dictionary representation of the XML document."}, {"instruction": "Write a Python function that, using a DOM parser for XML, parses the [numbers.xml](./numbers.xml) file and returns a dictionary whose keys are the numbers in the file and whose values are the corresponding frequencies."}, {"instruction": "Write a Python function `DOMParser` that reads an HTML file and prints all the `a` tags and their associated `href` attributes, the `img` tags and their associated `src` attributes, and the `script` tags and their associated `src` attributes."}, {"instruction": "Write a Python function `scrape_xml` that scrapes information from a given XML document."}, {"instruction": "Write a Python function that uses Python's built-in XML parser to look for tags that match a given string and return the text of the first `<body>` tag it finds. XML parsing is done using the `xml.etree.ElementTree` module."}, {"instruction": "Write a Python function `countCharacters` that counts the number of characters in a given XML document."}, {"instruction": "Write a Python function `parseXML` that returns a dictionary of all attributes and values for all nodes in an XML document."}, {"instruction": "Write a Python function `countXMLTags` that parses an XML file and returns a dictionary of tag names to their counts."}, {"instruction": "Write a Python function `xmlToJson` that converts an XML string to its JSON representation."}, {"instruction": "Create a Python function `countTags` that counts the number of tags in an XML file."}, {"instruction": "Write a Python function `countTags` that counts the number of elements of a given tag in an XML file."}, {"instruction": "Write a Python function `readBook` that reads a text file and returns the number of words in the file."}, {"instruction": "Write a Python function `readXML` that parses an XML document and returns a dictionary of elements and their attributes."}, {"instruction": "Write a Python function `readXML` that parses an XML document and returns a dictionary with keys as the elements and values as lists of all child elements."}, {"instruction": "Write a Python function `countWords` that counts the number of words in an XML document using DOM manipulation."}, {"instruction": "Write a function `get_time` that, given a date string in the format \"month, day, year\", returns the time in the format \"hour:minute:second\"."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given XML file."}, {"instruction": "Write a Python function `parse_xml` that takes as input a file containing XML code and prints all the XML tags that occur in the file."}, {"instruction": "Create a Python function `countWords` that counts the number of words in a given text file."}, {"instruction": "Write a Python function that parses a given XML file and returns a dictionary of all unique tag names in the document."}, {"instruction": "Write a Python function `parseXML` that takes a string representing an XML file and returns a Python dictionary of the XML file's contents. The dictionary should be nested, with the top-level elements of the XML file as the keys and the sub-elements of them as the values."}, {"instruction": "Write a Python function `countWords` that counts the number of words in an XML file."}, {"instruction": "Write a Python function `parseXML` that parses XML files and returns a Python dictionary of tag names and their attributes."}, {"instruction": "Write a Python function `parse_xml` that parses an XML document and returns a dictionary of the XML document's root tag name and a dictionary of its attributes."}, {"instruction": "Write a Python function `getXML` that returns the XML content as a string from a given URL."}, {"instruction": "Create a python function `remove_tags` that removes HTML tags from a given string."}, {"instruction": "Create a Python function `xmlParser` that parses an XML document and returns the value of the root node's `name` attribute."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: iterate over C arrays, C++ syntax, serial communication\n\n### Task", "fingerprint": null, "content": {"code": "int readVoltages(byte * ltc_addr){\n Serial.println(\"Reading voltages on 0x\"+String(ltc_addr[0],HEX));\n\n int err_count = 0;\n byte res[6];\n unsigned int total_vRead = 0;\n \n\n  int j = 0;\n  if (readBytes(ltc_addr,RDCVA,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }\n\n  j++;\n  if (readBytes(ltc_addr,RDCVB,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }\n\n  /*j++;\n  if (readBytes(ltc_addr,RDCVC,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }*/\n  Serial.println(\"Total: \"+String(total_vRead*VLSB)+\" [V]\");\n \n  return err_count;\n }", "docstring": "// so far this has always failed ; see page 16", "function_name": "doSelfTest"}, "id": 242, "seed": "int readVoltages(byte * ltc_addr){\n Serial.println(\"Reading voltages on 0x\"+String(ltc_addr[0],HEX));\n\n int err_count = 0;\n byte res[6];\n unsigned int total_vRead = 0;\n \n\n  int j = 0;\n  if (readBytes(ltc_addr,RDCVA,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }\n\n  j++;\n  if (readBytes(ltc_addr,RDCVB,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }\n\n  /*j++;\n  if (readBytes(ltc_addr,RDCVC,res,6)) {\n    for (int i = 0 ; i < 2 ; i++ ) {\n      double va = (((res[3*i+1]&0x0f)*0xff + res[3*i])-512)*VLSB;\n      Serial.println(\"Cell \"+String(i*2+4*j)+\": \"+String(va)+\" [V]\");\n      total_vRead += (((res[3*i+1]&0x0f)*0xff + res[3*i])-512);\n      double vb = (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512)*VLSB;\n      Serial.println(\"Cell \"+String(1+i*2+4*j)+\": \"+String(vb)+\" [V]\");\n      total_vRead += (((res[3*i+2]>>4)*0xff + ((res[3*i+2]&0x0f)<<4 | (res[3*i+1]&0xf0)>>4))-512);\n    }\n  } else { err_count += 1; }*/\n  Serial.println(\"Total: \"+String(total_vRead*VLSB)+\" [V]\");\n \n  return err_count;\n }", "concepts": ["iterate over C arrays", "C++ syntax", "serial communication"], "parsing_result": [{"instruction": "Write a Python class `Serial` that wraps the serial library."}, {"instruction": "Write a Python class `Fractal` that creates a fractal-like image."}, {"instruction": "Write a C++ class `DataAcquisition` that takes data from a serial port and stores it in a C array."}, {"instruction": "Write a Python program that takes an array of integers as input and returns the sum of all the even numbers from the input array."}, {"instruction": "Create a Python class `Serial` that emulates a serial port."}, {"instruction": "Write a Python class `SerialComm` that represents a serial communication object."}, {"instruction": "Create a C++ class `Device` that implements serial communication with a device."}, {"instruction": "Create a Python class `Message` that stores and manipulates a message to be sent, and its properties."}, {"instruction": "Write a Python class `Getter` that returns the next value from a C array."}, {"instruction": "Create a function that counts the number of occurrences of a specific character in a given string."}, {"instruction": "Create a Python class called `SerialC` that handles serial communication with a C library."}, {"instruction": "Create a Python class that implements the `Serial` class from the Arduino standard library."}, {"instruction": "Write a Python class `Serial` that provides methods to transmit and receive data over a serial port."}, {"instruction": "Write a Python class that implements the Fibonacci sequence."}, {"instruction": "Create a class `PressureMeter` that includes a C-style array of pressure readings. The class should have the methods `readPressure` and `getAverage`."}, {"instruction": "Write a Python function `readTemps` that returns a list of temperatures recorded by a sensor."}, {"instruction": "Write a Python class `Motor` that models a general-purpose motor."}, {"instruction": "Implement a Python class `Gps` that can be instantiated to manage location data for a satellite."}, {"instruction": "Create a Python class `Array` that represents a C-style array of integers."}, {"instruction": "Create a Python class `RGB` that implements the RGB color model."}, {"instruction": "Create a Python class `Temperature` that has a method `convert_from_fahrenheit` which converts temperature to Celsius and `convert_from_celsius` which converts temperature to Fahrenheit."}, {"instruction": "Write a Python class that allows you to iterate over C arrays and perform serial communication with a microcontroller.\n# C++ Template for Programming Task\n\n## Overview\nThis repository contains a template for programming tasks that can be used to create programming tasks for Hacktoberfest 2020. The template consists of the following:\n\n- `README.md`: This file contains metadata about the task and provides a brief introduction to the task.\n- `solution/`: This directory contains the solution for the task. The solution should be in the appropriate language and follow the file structure for the language (e.g., `solution/C++/function.cpp`, `solution/Python/function.py`, etc.). The solution should contain a description of the task and any other relevant information.\n- `tests/`: This directory contains test cases for the task. The test cases should follow the file structure for the language (e.g., `test/C++/function.cpp`, `test/Python/function.py`, etc.). The test cases should be written in a format that is compatible with the testing framework (e.g., `test/C++/function.cpp` should contain the following code:\n```c++\n#include \"function.h\"\n\nint main() {\n    // TODO: write test cases here\n    return 0;\n}\n```\n\n## Contributing\n\nTo contribute to this repository, follow these steps:\n\n1. **Fork** the repository.\n2. **Clone** your forked repository to your local machine.\n3. Create a new branch for your changes: `git checkout -b my-new-branch`\n4. Make the changes to the task.\n5. Commit your changes: `git commit -m \"Add my task\"`\n6. Push your changes to your forked repository: `git push origin my-new-branch`\n7. Open a **pull request** from your forked repo to the original repository.\n\n## License\nThis repository is licensed under the MIT License. See the [LICENSE](LICENSE) file for more information.\n// Example 1: Celsius to Fahrenheit conversion\n\n// Function to calculate Fahrenheit from Celsius\ndouble celsiusToFahrenheit(double celsius) {\n    return (celsius * 9 / 5) + 32;\n}\n\nint main() {\n    cout << \"Enter the temperature in Celsius: \";\n    double celsius;\n    cin >> celsius;\n\n    double fahrenheit = celsiusToFahrenheit(celsius);\n    cout << \"The temperature in Fahrenheit is: \" << fahrenheit << endl;\n\n    return 0;\n}"}, {"instruction": "Create a C++ class that represents a network node."}, {"instruction": "Create a Python class `Robot` that represents a robot with a name and an arm. The `Robot` should be able to move the arm."}, {"instruction": "Implement a class `CArray` that represents a C-style array of integers."}, {"instruction": "Create a `Serial` class to emulate the functionality of the Arduino Serial library."}, {"instruction": "Create a Python class with the following properties:\n\n- `self.motor` is a motor object\n- `self.sensor` is a sensor object\n- `self.distance` is a `float` that represents the distance measured by the sensor\n- `self.setSpeed` is a method that accepts an `int` as an argument and sets the motor speed to the given value\n- `self.moveForward` is a method that moves the robot forward by the distance in `self.distance`\n- `self.moveBackward` is a method that moves the robot backward by the distance in `self.distance`\n- `self.turnRight` is a method that turns the robot to the right by the angle in `self.motor.angle`\n- `self.turnLeft` is a method that turns the robot to the left by the angle in `self.motor.angle`\n- `self.stop` is a method that stops the robot"}, {"instruction": "Create an `Arduino` class that models an Arduino Uno."}, {"instruction": "Write a Python class `Incrementor` that increments a target integer every time the class is called."}, {"instruction": "Write a Python class `Serial` that saves the value of an integer to a file."}, {"instruction": "Create a python class `Arduino` that has the following methods:\n\n- `setup`: configures the serial connection to the Arduino device\n- `write`: writes a byte to the Arduino\n- `read`: reads a byte from the Arduino"}, {"instruction": "Create a Python class `CArrayIterator` that iterates over a one-dimensional C array."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: recursion, data structures, bitwise operations\n\n### Task", "fingerprint": null, "content": {"code": "int main(){\n\t// #ifndef ONLINE_JUDGE\n\t// freopen(\"/home/naman/CP/input.txt\", \"r\", stdin);\n\t// freopen(\"/home/naman/CP/output.txt\", \"w\", stdout);\n\t// #endif\n\tint n;\n    int S[] = { 1, 3, 1 };\n\tn = sizeof(S) / sizeof(S[0]);\n\n\t// sort the set\n\tsort(S, S + n);\n\n\t// create an empty vector to store elements of a subset\n\tvector<int> out;\n\tfindPowerSet(S, out, 0);\n\n\treturn 0;\n\n}", "docstring": "// exclude current element in the current subset and recur", "function_name": "findPowerSet"}, "id": 246, "seed": "int main(){\n\t// #ifndef ONLINE_JUDGE\n\t// freopen(\"/home/naman/CP/input.txt\", \"r\", stdin);\n\t// freopen(\"/home/naman/CP/output.txt\", \"w\", stdout);\n\t// #endif\n\tint n;\n    int S[] = { 1, 3, 1 };\n\tn = sizeof(S) / sizeof(S[0]);\n\n\t// sort the set\n\tsort(S, S + n);\n\n\t// create an empty vector to store elements of a subset\n\tvector<int> out;\n\tfindPowerSet(S, out, 0);\n\n\treturn 0;\n\n}", "concepts": ["recursion", "data structures", "bitwise operations"], "parsing_result": [{"instruction": "Write a Python class `BinaryTree` that implements a binary tree."}, {"instruction": "Create a Python class `BinarySearchTree` that represents a binary search tree."}, {"instruction": "Implement a Python class `Stack` that implements a fixed-sized stack."}, {"instruction": "Create a Python class `Decimal` that implements decimal numbers."}, {"instruction": "Create a Python class `Fraction` that implements rational numbers."}, {"instruction": "Create a Python class `Stack` that supports the common operations of a stack."}, {"instruction": "Implement a Python class `Stack`, which implements a stack data structure."}, {"instruction": "Write a Python class `Stack` that implements a stack."}, {"instruction": "Write a Python function `countSubstrings` that counts the number of substrings of a given string."}, {"instruction": "Create a Python class that models a `Node` object for use in a binary search tree."}, {"instruction": "Write a Python class `BinaryTree` that implements a binary tree."}, {"instruction": "Write a Python class `Fraction` that represents a fraction."}, {"instruction": "Write a Python class `Stack` that implements a last-in, first-out (LIFO) data structure. It supports the following operations:\n\n- `push`: add a new element to the top of the stack\n- `pop`: remove and return the element at the top of the stack\n- `peek`: return the element at the top of the stack without removing it\n- `isEmpty`: true if the stack is empty"}, {"instruction": "Create a Python class `DynArray` that implements a dynamic array that can grow and shrink dynamically."}, {"instruction": "Write a Python class `Fraction` that implements the basic arithmetic operations of fractions, including addition, subtraction, multiplication, and division."}, {"instruction": "Create a Python class `Stack` that implements a LIFO stack."}, {"instruction": "Write a Python class `Stack` that implements a stack as a list of elements."}, {"instruction": "Write a Python class called `Recursions` that implements several recursive functions:\n- `count_to(n)` that counts up from zero to `n`, including `n`\n- `fib(n)` that computes the `n`th Fibonacci number\n- `power(b, e)` that raises `b` to the power of `e`, i.e., `b^e`\n- `reverse(s)` that reverses the string `s`\n- `is_palindrome(s)` that returns `True` if `s` is a palindrome and `False` otherwise."}, {"instruction": "Implement a Python class called `BinaryTree` that represents a binary tree. The class must include the following methods:\n\n- `add(self, value)`: inserts a new value into the binary tree\n- `find(self, value)`: recursively searches the binary tree for a given value\n- `linearize(self)`: returns a list containing all the values in the binary tree, in order"}, {"instruction": "Create a Python class `BinaryHeap` that implements a binary heap."}, {"instruction": "Implement the `Queue` class from scratch using recursion."}, {"instruction": "Write a Python class `Node` that stores a `data` value and a `next` pointer to the next node."}, {"instruction": "Create a Python class `BinaryTree` that implements a binary search tree."}, {"instruction": "Design and implement a Python class called `Fraction` that represents a fraction."}, {"instruction": "Create a Python class `Stack` that implements a stack using a list datatype."}, {"instruction": "Implement a Python `BinaryTree` class that provides a binary search tree."}, {"instruction": "Implement a class `BinaryTree` that contains methods `insert` and `height` that compute the height of a binary search tree."}, {"instruction": "Write a Python class `RPN` that implements a stack-based reverse-polish notation calculator."}, {"instruction": "Design a Python class called `Integer` that represents integers in base 2. You must implement the following operations:\n\n- `Integer.__init__`: initialize an Integer object to a given non-negative integer in base 2\n- `Integer.__str__`: return the string representation of the Integer object\n- `Integer.__add__`: add two Integer objects\n- `Integer.__sub__`: subtract an Integer object from another\n- `Integer.__mul__`: multiply an Integer object by another\n- `Integer.__truediv__`: divide an Integer object by another\n- `Integer.__floordiv__`: floor-divide an Integer object by another"}, {"instruction": "Create a Python implementation of a stack using a linked list."}, {"instruction": "Create a Python class called `BinaryTree` that implements a binary tree using recursion."}, {"instruction": "Write a Python class `Stack` that implements a last-in, first-out (LIFO) stack."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: function pointer, conditional compilation, error handling, file I/O\n\n### Task", "fingerprint": null, "content": {"code": "static void ExtractOne(ZipArchiveHandle zah, ZipEntry& entry, const std::string& name) {\r\n  // Bad filename?\r\n  if (android::base::StartsWith(name, \"/\") || android::base::StartsWith(name, \"../\") ||\r\n      name.find(\"/../\") != std::string::npos) {\r\n  }\r\n\r\n  // Where are we actually extracting to (for human-readable output)?\r\n  std::string dst;\r\n  if (flag_d) {\r\n    dst = flag_d;\r\n    if (!android::base::EndsWith(dst, \"/\")) dst += '/';\r\n  }\r\n  dst += name;\r\n\r\n  // Ensure the directory hierarchy exists.\r\n  if (!MakeDirectoryHierarchy(android::base::Dirname(name))) {\r\n  }\r\n\r\n  // An entry in a zip file can just be a directory itself.\r\n  if (android::base::EndsWith(name, \"/\")) {\r\n\t  if (android::base::utf8::mkdir(name.c_str(), entry.unix_mode) == -1) {\r\n      // If the directory already exists, that's fine.\r\n      if (errno == EEXIST) {\r\n        struct stat sb;\r\n        if (stat(name.c_str(), &sb) != -1 && S_ISDIR(sb.st_mode)) return;\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Create the file.\r\n  int fd = open(name.c_str(), O_CREAT | O_WRONLY | O_CLOEXEC | O_EXCL, entry.unix_mode);\r\n  if (fd == -1 && errno == EEXIST) {\r\n    if (overwrite_mode == kNever) return;\r\n    if (overwrite_mode == kPrompt && !PromptOverwrite(dst)) return;\r\n    // Either overwrite_mode is kAlways or the user consented to this specific case.\r\n    fd = open(name.c_str(), O_WRONLY | O_CREAT | O_CLOEXEC | O_TRUNC, entry.unix_mode);\r\n  }\r\n  if (fd == -1) {\r\n  }\r\n\r\n  // Actually extract into the file.\r\n  if (!flag_q) printf(\"  inflating: %s\\n\", dst.c_str());\r\n  int err = ExtractEntryToFile(zah, &entry, fd);\r\n  if (err < 0) {\r\n  }\r\n  close(fd);\r\n}", "docstring": "// being able to seek and truncate, and you can't do that with stdout.\r", "function_name": "ExtractToPipe"}, "id": 251, "seed": "static void ExtractOne(ZipArchiveHandle zah, ZipEntry& entry, const std::string& name) {\r\n  // Bad filename?\r\n  if (android::base::StartsWith(name, \"/\") || android::base::StartsWith(name, \"../\") ||\r\n      name.find(\"/../\") != std::string::npos) {\r\n  }\r\n\r\n  // Where are we actually extracting to (for human-readable output)?\r\n  std::string dst;\r\n  if (flag_d) {\r\n    dst = flag_d;\r\n    if (!android::base::EndsWith(dst, \"/\")) dst += '/';\r\n  }\r\n  dst += name;\r\n\r\n  // Ensure the directory hierarchy exists.\r\n  if (!MakeDirectoryHierarchy(android::base::Dirname(name))) {\r\n  }\r\n\r\n  // An entry in a zip file can just be a directory itself.\r\n  if (android::base::EndsWith(name, \"/\")) {\r\n\t  if (android::base::utf8::mkdir(name.c_str(), entry.unix_mode) == -1) {\r\n      // If the directory already exists, that's fine.\r\n      if (errno == EEXIST) {\r\n        struct stat sb;\r\n        if (stat(name.c_str(), &sb) != -1 && S_ISDIR(sb.st_mode)) return;\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Create the file.\r\n  int fd = open(name.c_str(), O_CREAT | O_WRONLY | O_CLOEXEC | O_EXCL, entry.unix_mode);\r\n  if (fd == -1 && errno == EEXIST) {\r\n    if (overwrite_mode == kNever) return;\r\n    if (overwrite_mode == kPrompt && !PromptOverwrite(dst)) return;\r\n    // Either overwrite_mode is kAlways or the user consented to this specific case.\r\n    fd = open(name.c_str(), O_WRONLY | O_CREAT | O_CLOEXEC | O_TRUNC, entry.unix_mode);\r\n  }\r\n  if (fd == -1) {\r\n  }\r\n\r\n  // Actually extract into the file.\r\n  if (!flag_q) printf(\"  inflating: %s\\n\", dst.c_str());\r\n  int err = ExtractEntryToFile(zah, &entry, fd);\r\n  if (err < 0) {\r\n  }\r\n  close(fd);\r\n}", "concepts": ["function pointer", "conditional compilation", "error handling", "file I/O"], "parsing_result": [{"instruction": "Write a Python function `countWords` that counts the number of words in a given file."}, {"instruction": "Write a Python function `replaceChar` that takes in a string, a character, and another character, and replaces all occurrences of the first character with the second character."}, {"instruction": "Write a Python function `fibonacci` that prints the Fibonacci sequence up to a given integer."}, {"instruction": "Write a Python function `rand_num` that returns a random integer between 0 and 42 inclusive using conditional compilation and file I/O."}, {"instruction": "Write a Python function `extractWords` that takes a string and returns a list of words (without punctuation)."}, {"instruction": "Write a Python function `sumOfTwo` that takes two lists and returns the sum of their elements."}, {"instruction": "Create a Python function `sumOfFile` that returns the sum of the numbers in a given file."}, {"instruction": "Create a Python function `read_file` that returns the contents of a file as a string."}, {"instruction": "Create a Python function `reverseString` that reverses a string using a function pointer."}, {"instruction": "Implement a Python function `quickSort` that sorts an array of integers using the quick sort algorithm."}, {"instruction": "Write a Python function `printPrimeNumbers` that prints all prime numbers up to a given integer."}, {"instruction": "Write a Python function `printHelloWorld` that prints \"hello world!\" to the standard output."}, {"instruction": "Write a Python function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Write a Python function `search` that takes a string and a list of strings and returns the first occurrence."}, {"instruction": "Write a Python function `length` that takes a string as input and returns its length."}, {"instruction": "Create a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `isPrime` that returns true if a given number is prime."}, {"instruction": "Implement a function `main` that opens a file (using Python's built-in `open`) and prints the file's contents."}, {"instruction": "Create a Python function `countCharacter` that counts the number of occurrences of a single character in a file."}, {"instruction": "Write a Python function `read_file` that takes a file name as a parameter and prints the file's contents to the console."}, {"instruction": "Write a function `factorial` that takes a non-negative integer n and returns n! using a function pointer (`factorial`) and a conditional compilation (`#ifdef`) block."}, {"instruction": "Create a function in Python that checks for a palindrome."}, {"instruction": "Create a Python function `readFile` that reads a file and returns a list of lines from the file."}, {"instruction": "Create a function `str_to_int` that converts a string into an integer using a function pointer."}, {"instruction": "Create a Python function `reverseString` that takes a string and returns its reverse using a function pointer."}, {"instruction": "Write a Python function `create_fibonacci` that returns a function that will return the next Fibonacci number."}, {"instruction": "Create a Python function that takes a string and returns the number of vowels in the string, ignoring case."}, {"instruction": "Create a Python function `read_file` that reads a file, and returns a list of its lines."}, {"instruction": "Write a Python function `get_pi` that returns the value of pi as a floating-point number."}, {"instruction": "Implement a Python function `maxOfTwo` that returns the larger of two integers using the ternary operator."}, {"instruction": "Write a Python function `printFizzBuzz` that prints the numbers 1 through 100, with the following exceptions:\n- if a number is divisible by 3, print \"Fizz\" instead\n- if a number is divisible by 5, print \"Buzz\" instead\n- if a number is divisible by both 3 and 5, print \"FizzBuzz\" instead"}, {"instruction": "Write a Python function `readData` that reads in a file and returns the contents as a string. If the file does not exist, the function should print an error and return an empty string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: command-line arguments, stream-based input, validation, error handling, reading from the command line\n\n### Task", "fingerprint": null, "content": {"code": "int main (int argc, char * argv[]) {\n\n  //If the number of command-line arguments is incorrect, the program should print line\n  //Usage: executable-path <storage-duration-name> <count>\n  //and quit.\n  if (argc != 3) {\n    std::cout << \"Usage: executable-path <storage-duration-name> <count> \\n\";\n    return 1;\n  }\n\n // If the <count> is not a valid unsigned short integer, the program should print line \"Invalid count\" and quit.\n  try {\n    unsigned short count = std::stoi(argv[2]);\n    // If the <count> is greater than 100, the program should print line \"Too many requested\" and quit.\n    if (count > 100 || count < 0 ) {\n      std::cout << \"Too many requested \\n\";\n      return 1;\n    }\n  }\n  catch (...){\n    std::cout << \"Invalid count \\n\";\n    return 1;\n  }\n\n    unsigned short count = std::stoi(argv[2]);\n    createObjects (argv[1], count);\n    \n    return 0;\n}", "docstring": "// the program should print line Invalid storage duration and quit.", "function_name": "createObjects"}, "id": 256, "seed": "int main (int argc, char * argv[]) {\n\n  //If the number of command-line arguments is incorrect, the program should print line\n  //Usage: executable-path <storage-duration-name> <count>\n  //and quit.\n  if (argc != 3) {\n    std::cout << \"Usage: executable-path <storage-duration-name> <count> \\n\";\n    return 1;\n  }\n\n // If the <count> is not a valid unsigned short integer, the program should print line \"Invalid count\" and quit.\n  try {\n    unsigned short count = std::stoi(argv[2]);\n    // If the <count> is greater than 100, the program should print line \"Too many requested\" and quit.\n    if (count > 100 || count < 0 ) {\n      std::cout << \"Too many requested \\n\";\n      return 1;\n    }\n  }\n  catch (...){\n    std::cout << \"Invalid count \\n\";\n    return 1;\n  }\n\n    unsigned short count = std::stoi(argv[2]);\n    createObjects (argv[1], count);\n    \n    return 0;\n}", "concepts": ["command-line arguments", "stream-based input", "validation", "error handling", "reading from the command line"], "parsing_result": [{"instruction": "Write a Python program that reads a text file on the command line and prints the number of lines and words in the file."}, {"instruction": "Write a Python program that takes two command-line arguments: a number `n` and an integer `k`. The program should then print `k` random numbers from the set `{1, 2, ..., n}`."}, {"instruction": "Implement a Python program that reads a text file from the command line and prints the number of words and characters in that file, and the five most commonly used words.\n#include <iostream>\n#include <string>\n\n#include \"task/palindrome-check.h\"\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    if (isPalindrome(input)) {\n        std::cout << input << \" is a palindrome.\\n\";\n    } else {\n        std::cout << input << \" is not a palindrome.\\n\";\n    }\n\n    return 0;\n}\n#include <iostream>\n#include <string>\n\n#include \"task/palindrome-check.h\"\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    std::cout << \"The string is \" << (isPalindrome(input) ? \"\" : \"not \")\n              << \"a palindrome.\\n\";\n\n    return 0;\n}\n#include <iostream>\n#include <vector>\n\n#include \"task/sum-vector.h\"\n\nint main() {\n    std::vector<int> numbers{1, 1, 2, 3, 5, 8};\n    int sum = sumVector(numbers);\n    std::cout << \"The sum of the vector is \" << sum << \".\\n\";\n\n    return 0;\n}\n#include <iostream>\n#include <vector>\n\n#include \"task/sum-vector.h\"\n\nint main() {\n    std::vector<int> numbers{1, 1, 2, 3, 5, 8};\n    int sum = sumVector(numbers);\n    std::cout << \"The sum of the vector is \" << sum << \".\\n\";\n\n    return 0;\n}\n#include <iostream>\n#include <vector>\n\n#include \"task/count-words.h\"\n\nint main() {\n    std::vector<std::string> words{\"hello\", \"world\", \"hello\", \"world\", \"hello\"};\n    int numWords = countWords(words);\n    std::cout << \"The number of words in the vector is \" << numWords << \".\\n\";\n\n    return 0;\n}\n#include <iostream>\n\nint factorial(int x) {\n    if (x <= 1) {\n        return x;\n    }\n    return x * factorial(x - 1);\n}\n\nint main() {\n    int x;\n    std::cout << \"Enter a non-negative integer: \";\n    std::cin >> x;\n    int factorial = factorial(x);\n    std::cout << \"The factorial of \" << x << \" is \" << factorial << \".\\n\";\n\n    return 0;\n}\n#include <iostream>\n\nint power(int base, int exponent) {\n    if (exponent == 0) {\n        return 1;\n    }\n    return base * power(base, exponent - 1);\n}\n\nint main() {\n    int base, exponent;\n    std::cout << \"Enter the base: \";\n    std::cin >> base;\n    std::cout << \"Enter the exponent: \";\n    std::cin >> exponent;\n    int result = power(base, exponent);\n    std::cout << base << \" raised to the power of \" << exponent\n              << \" is \" << result << \".\\n\";\n\n    return 0;\n}\n#include <iostream>\n#include <string>\n\n#include \"task/count-words.h\"\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    int numWords = countWords(input);\n    std::cout << \"The number of words in the string is \" << numWords << \".\\n\";\n\n    return 0;\n}\n#include <iostream>\n#include <string>\n\nbool isPalindrome(std::string str) {\n    if (str.length() <= 1) {\n        return true;\n    }\n    if (str.at(0) != str.at(str.length() - 1)) {\n        return false;\n    }\n    return isPalindrome(str.substr(1, str.length() - 2));\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    if (isPalindrome(input)) {\n        std::cout << input << \" is a palindrome.\\n\";\n    } else {\n        std::cout << input << \" is not a palindrome.\\n\";\n    }\n\n    return 0;\n}\n#include <iostream>\n#include <string>\n\nint countWords(std::string str) {\n    if (str.length() == 0) {\n        return 0;\n    }\n    if (str.find(' ') == std::string::npos) {\n        return 1;\n    }\n    return 1 + countWords(str.substr(str.find(' ') + 1));\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    int numWords = countWords(input);\n    std::cout << \"The string contains \" << numWords << \" words.\\n\";\n\n    return 0;\n}\n#include <algorithm>\n#include <iostream>\n#include <vector>\n\n#include \"task/sum-vector.h\"\n\nint sumVector(std::vector<int> numbers) {\n    int sum = 0;\n    for (int num : numbers) {\n        sum += num;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> numbers{1, 1, 2, 3, 5, 8};\n    int sum = sumVector(numbers);\n    std::cout << \"The sum of the vector is \" << sum << \".\\n\";\n\n    return 0;\n}"}, {"instruction": "Write a Python program `fibonacci` that reads a positive integer from the command line, and prints the first N Fibonacci numbers, where N is the given integer."}, {"instruction": "Write a Python program that reads a command-line argument, a sentence, and prints the sentence in reverse."}, {"instruction": "Write a Python program that reads in an integer from the command line, and prints out the number of digits in the number."}, {"instruction": "Write a Python program that prompts the user for the name of a text file and then prints the number of characters, words, and lines of the text file."}, {"instruction": "Implement a command-line program `palindrome.py` that prompts the user to enter a string, and then prints `The string is a palindrome.` if the string is a palindrome, otherwise prints `The string is not a palindrome.`"}, {"instruction": "Write a Python program that can determine whether a given sentence is a pangram. A pangram is a sentence that uses all 26 letters of the alphabet at least once."}, {"instruction": "Write a Python program that prompts the user for a file name and attempts to open it. If the program can't find a file by that name, print an error message and quit. If the file is found, read it and print all the lines in the file in upper case."}, {"instruction": "Write a Python program that reads a five-word message from the command line, and then prints the message to the screen in reverse order. Your program should include both unit tests and documentation."}, {"instruction": "Write a Python program `addNums` that takes in two numbers from the command line and adds them together."}, {"instruction": "Write a Python program that prompts the user for a string and then checks whether it is a palindrome."}, {"instruction": "Write a Python program `ReadFromFile.py` that reads a file name from the command line and prints the contents of the file to standard output. If the second argument is present and is \"exception\", then display a detailed error message."}, {"instruction": "Write a Python program `printArgs` that prints command-line arguments to the screen."}, {"instruction": "Write a Python program that reads in a .txt file and returns the number of times a given word appears."}, {"instruction": "Write a Python program that reads a file and outputs its contents, line by line, one word per line."}, {"instruction": "Write a Python program that takes a positive integer from the command line using the `argparse` module and reports if the number is prime."}, {"instruction": "Implement a Python program that takes a string of words and integers from the command line, and prints out the mean, median, mode, and standard deviation of the integers."}, {"instruction": "Write a Python program that accepts one or more command-line arguments and prints them to the standard output. If no arguments are given, the program should print a helpful message."}, {"instruction": "Write a Python program that prints the sum of all integers input by the user, terminating when the user enters a negative integer."}, {"instruction": "Write a Python program that performs the following operations:\n- prompts the user to enter a number of seconds\n- prompts the user to enter a time interval in seconds\n- calculates the total number of minutes between the user-entered seconds and the user-entered time interval\n- prints the time in minutes and seconds"}, {"instruction": "Write a Python program that prompts a user to input a sentence and then outputs the number of words in that sentence."}, {"instruction": "Write a program that prompts the user to enter a positive integer, and then prints the prime factors of that number. If the user enters a negative integer or a noninteger value, your program should display an error message and exit."}, {"instruction": "Write a Python program that prompts for two integers from the command line and prints the sum."}, {"instruction": "Write a Python program that takes two integers as input from the command line and prints their sum. If invalid input is given, the program should print the error message \"Invalid input.\""}, {"instruction": "Write a Python program that takes in 3 integers as command-line arguments and prints the sum of the two largest integers."}, {"instruction": "Write a Python program that reads the name of a file from the command line and prints the number of words in the file."}, {"instruction": "Write a Python program that takes in three command-line arguments: a file path, a number of lines to skip, and a number of lines to print. The program should then open the given file, and print the given number of lines after the given number of lines are skipped. If the given file is not accessible, the program should print an error message indicating that the file could not be opened."}, {"instruction": "Implement a program that reads a sequence of integers from the command line, and determines whether each of these integers is a palindrome.\n\n**Note:** A palindrome is a string that reads the same from both directions."}, {"instruction": "Write a Python program that takes a file path as input and prints out the first line of the file in its entirety. If the file cannot be opened, print an error message and terminate."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: variable argument list, C++ API, static function\n\n### Task", "fingerprint": null, "content": {"code": "static int _cocos2d_PhysicsWorld_removeBody2(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsWorld *self = nullptr;\n    lua_Integer arg1 = 0;       /** tag */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsWorld\");\n    olua_check_int(L, 2, &arg1);\n\n    // void removeBody(int tag)\n    self->removeBody((int)arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "docstring": "// void removeBody(cocos2d::PhysicsBody *body)", "function_name": "_cocos2d_PhysicsWorld_removeBody1"}, "id": 258, "seed": "static int _cocos2d_PhysicsWorld_removeBody2(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsWorld *self = nullptr;\n    lua_Integer arg1 = 0;       /** tag */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsWorld\");\n    olua_check_int(L, 2, &arg1);\n\n    // void removeBody(int tag)\n    self->removeBody((int)arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "concepts": ["variable argument list", "C++ API", "static function"], "parsing_result": [{"instruction": "Write a Python function `isIn` that takes a value and a list of values and returns `True` if the value exists in the list and `False` otherwise."}, {"instruction": "Implement a Python class `List` that stores a list of integers. It should have the following methods:\n- `insert(value)`: adds a new value to the list\n- `remove(value)`: removes the first instance of `value` from the list, if it exists\n- `count(value)`: returns the number of times `value` appears in the list\n- `clear()`: removes all instances of `value` from the list\n- `sort()`: sorts the list using the built-in Python `sort` function\n- `length()`: returns the length of the list\n- `join(string)`: returns a string of all the list elements joined by `string`"}, {"instruction": "Write a C++ class `Point` that represents a two-dimensional point on the Cartesian plane. The class should contain methods that allow an instance of the class to be queried for its coordinates and also for its distance from the origin."}, {"instruction": "Write a Python class called `Fraction` that stores and manipulates fractions."}, {"instruction": "Create a Python class `Lotto` that represents a Lotto 649 lottery, generating and validating winning combinations."}, {"instruction": "Create a C++ class `Vector` that implements a vector class with the same interface as std::vector."}, {"instruction": "Create a Python class `Accumulator` that implements a cumulative sum. The class should support the following operations:\n- creating an instance of the class\n- adding a number to the cumulative sum\n- clearing the cumulative sum"}, {"instruction": "Write a Python class `Rational` that implements a rational number."}, {"instruction": "Create a Python class `Point` with two attributes, `x` and `y`, and a method `distance` that returns the distance from the origin."}, {"instruction": "Create a Python class `Polynomial` with an `__init__` method that takes a variable number of arguments that are individual coefficients in a polynomial."}, {"instruction": "Write a Python class `BoundedSet` that implements a set of integers bounded by two limits, as per the following example:\n```python\nbounded = BoundedSet(1, 10)\nbounded.add(1)\nbounded.add(10)\n# bounded.add(0) # raises ValueError\n# bounded.add(11) # raises ValueError\nprint(bounded.get_set())\n# {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n```/examples/python/example1/test_example1.py\nfrom example1 import findCommon\n\ndef test_findCommon():\n    assert(findCommon([2, 4, 5, 6], [3, 4, 6, 7]) == [4, 6])\n    assert(findCommon([2, 4, 5, 6, 7], [3, 4, 6, 7]) == [4, 6])\n\n/examples/python/example2/example2.py\ndef gcd(num1, num2):\n    \"\"\"\n    Returns the greatest common divisor of two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Return:\n        The greatest common divisor of num1 and num2.\n    \"\"\"\n    pass\n/examples/python/example3/example3.py\ndef countVowels(string):\n    \"\"\"\n    Returns the number of vowels in a string, ignoring case.\n\n    Args:\n        string (str): The string.\n\n    Return:\n        The number of vowels in string.\n    \"\"\"\n    pass\n/examples/cpp/example1/example1.cpp\n#include <vector>\n\nstd::vector<int> findCommon(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> common;\n\n    return common;\n}\n/examples/python/example9/test_example9.py\nfrom example9 import BoundedSet\n\ndef test_boundedset():\n    bounded = BoundedSet(1, 2)\n    bounded.add(1)\n    bounded.add(2)\n    assert(bounded.get_set() == {1, 2})\n    bounded.add(0)\n    assert(bounded.get_set() == {1, 2})\n    bounded.add(3)\n    assert(bounded.get_set() == {1, 2})\n\ndef test_boundedset_error():\n    bounded = BoundedSet(1, 2)\n    bounded.add(0)\n    try:\n        bounded.add(3)\n    except ValueError:\n        assert(True)\n/examples/python/example7/example7.py\ndef factorial(num):\n    \"\"\"\n    Returns the factorial of a positive integer.\n\n    Args:\n        num (int): The positive integer.\n\n    Return:\n        The factorial.\n    \"\"\"\n    pass\n/README.md\n# CD2021 Coding Challenges\n\nThe 2021 Coding Challenges are an opportunity for you to sharpen your coding skills in a fun and engaging environment. You are encouraged to create your own solutions and solutions to the provided examples.\n\n## Getting Started\n\nFirst, [fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) this repository. This will create a separate copy of the repository in your own GitHub account. Then, [set up a local development environment](https://code.visualstudio.com/docs/python/python-tutorial#_install-python) to develop your solutions. Finally, navigate to your fork and [create a pull request](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) against this repository to begin the coding challenges."}, {"instruction": "Write a Python class `Fraction` to represent fractions. The class must have the following features:\n\n- `Fraction` has an `__init__` method that takes in two integer arguments representing the numerator and denominator of a fraction.\n- `Fraction` has a method `get_numerator` that returns the numerator of the fraction.\n- `Fraction` has a method `get_denominator` that returns the denominator of the fraction.\n- `Fraction` has a method `add` that takes in a second `Fraction` object and returns a new `Fraction` object representing the sum of the two fractions.\n- `Fraction` has a method `multiply` that takes in a second `Fraction` object and returns a new `Fraction` object representing the product of the two fractions.\n- `Fraction` has a method `reduce` that reduces the fraction to its simplest form.\n- `Fraction` has a method `simplify` that reduces the fraction to its simplest form.\n\n#"}, {"instruction": "Create a Python class `Vector` that represents a 3-dimensional vector of floating point numbers and implements the following methods:\n\n1. `Vector(x, y, z)`: constructs a vector with three floats\n2. `add(Vector v)`: returns a new vector that is the sum of the current vector and `v`\n3. `subtract(Vector v)`: returns a new vector that is the difference between the current vector and `v`\n4. `mult(float s)`: returns a new vector that is the scalar multiplication of the current vector by `s`\n5. `dot(Vector v)`: returns the dot product of the current vector and `v`\n6. `cross(Vector v)`: returns the cross product of the current vector and `v`\n7. `norm()`: returns the Euclidean norm of the current vector\n8. `normal()`: returns a new vector that is the normal of the current vector\n9. `normalize()`: normalizes the current vector in place\n10. `angle(Vector v)`: returns the angle between the current vector and `v`"}, {"instruction": "Write a Python class `Cell` that represents a cellular automaton."}, {"instruction": "Write a Python class `Vector` that represents a vector in 2-dimensional space. The class should have the following attributes:\n- `x`, `y` (two-dimensional components)\n- `magnitude` (length of the vector)\n- `angle` (direction of the vector)\n\nThe class should have the following methods:\n- `distance` (returns the distance between two other vectors)\n- `addVector` (takes a vector and adds it to the current vector)\n- `subtractVector` (takes a vector and subtracts it from the current vector)\n- `scalarMultiplication` (takes a scalar and multiplies it with the current vector)\n- `isParallel` (returns whether or not two vectors are parallel)\n- `isOrthogonal` (returns whether or not two vectors are orthogonal)\n\nA vector is parallel if its direction is the same (within floating point tolerance), whereas a vector is orthogonal if its dot product with another vector is 0."}, {"instruction": "Create a Python class `Vector` that represents a n-dimensional vector."}, {"instruction": "Create a `Matrix` class that implements matrix addition and multiplication."}, {"instruction": "Create a Python class `CircularArray` whose instances support the same methods as a standard Python list, but with the following constraints:\n\n- the class can only hold a finite number of elements\n- mutating the class' methods changes the number of elements stored in the array\n- the class' methods cannot take a variable number of arguments"}, {"instruction": "Create a Python class `Shape` that has `area` and `perimeter` functions."}, {"instruction": "Write a Python class `Point` with the following properties:\n\n- `__init__` should take 2 integer arguments and instantiate `x` and `y` as attributes\n- `__repr__` should return a string representation of the object as \"(x, y)\"\n- `add` should add two `Point` objects together as `(x1 + x2, y1 + y2)`\n- `subtract` should subtract two `Point` objects as `(x1 - x2, y1 - y2)`\n- `scale` should scale a `Point` object by a number as `(x * number, y * number)`"}, {"instruction": "Write a Python class `Shape` that represents a 2D shape with functions to calculate surface area and perimeter. The class should not use a variable argument list, but instead use C++ APIs to perform the calculations. The class should also have a static function that calculates the volume of a cube given the length of its side."}, {"instruction": "Create a Python class `Item` that represents an OOP item with a name and a value."}, {"instruction": "Implement a C++ class `Vector` which represents an n-dimensional vector. Your `Vector` class should be able to:\n- Provide a constructor that takes in 0 or more arguments which are the components of the vector.\n- Allow the user to index into the vector as if it were an array.\n- Provide a method `norm` that returns the Euclidean norm of the vector.\n- Provide a method `dot` that returns the dot product of the two vectors.\n- Allow addition, subtraction, scalar multiplication, and division between `Vector` objects."}, {"instruction": "Write a class `Vector` that represents a vector of integers from a C++ API."}, {"instruction": "Write a Python class `Student` that maintains a list of student records, given by a JSON file."}, {"instruction": "Write a Python class `Vector` that implements a vector abstraction using the C++ API."}, {"instruction": "Write a Python class `Stack` that implements a stack using a Python list.\n\nNote: the Python API for stack operations is different from C++, so the implementation must use the list object as a member variable, and it must be a class member."}, {"instruction": "Create a Python class `Vector` that implements 2-dimensional vectors using the C++ API."}, {"instruction": "Create a Python class `Fraction` that implements the following operations:\n- `Fraction(a, b)` - construct a fraction with numerator `a` and denominator `b`\n- `Fraction(a)` - construct a fraction with numerator `a` and denominator 1\n- `Fraction.add(f)` - add two fractions\n- `Fraction.subtract(f)` - subtract two fractions\n- `Fraction.multiply(f)` - multiply two fractions\n- `Fraction.divide(f)` - divide two fractions"}, {"instruction": "Write a python class `Accumulator` that implements a variable argument list of integers."}, {"instruction": "Create a Python class `Stack` that supports two methods `push` and `pop`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: static function, string operations, C API\n\n### Task", "fingerprint": null, "content": {"code": "static int scifs_rmdir(const char *path)\n{\n  int res;\n  string rpath;\n // std::cout << \"\\n REMOVE INVOKED ::\" << path << std::endl;\n \n  for (int i=0; i<RPCALL->get_locations_size(); i++) \n  {\n    rpath = RPCALL->MakePath(path,i);\n   // std::cout << \" AFTER MAKEPATH \" <<std::endl;\n    res = rmdir(rpath.c_str());\n   // std::cout << \" AFTER RMDIR \" <<std::endl;\n    if (res == -1)\n      return -errno;\n  }\n  return 0;\n}", "docstring": "/* On Linux this could just be 'mknod(path, mode, rdev)' but this\n     is more portable */", "function_name": "scifs_mknod"}, "id": 259, "seed": "static int scifs_rmdir(const char *path)\n{\n  int res;\n  string rpath;\n // std::cout << \"\\n REMOVE INVOKED ::\" << path << std::endl;\n \n  for (int i=0; i<RPCALL->get_locations_size(); i++) \n  {\n    rpath = RPCALL->MakePath(path,i);\n   // std::cout << \" AFTER MAKEPATH \" <<std::endl;\n    res = rmdir(rpath.c_str());\n   // std::cout << \" AFTER RMDIR \" <<std::endl;\n    if (res == -1)\n      return -errno;\n  }\n  return 0;\n}", "concepts": ["static function", "string operations", "C API"], "parsing_result": [{"instruction": "Write a Python class `Calculator` that supports basic arithmetic operations (addition, subtraction, multiplication, and division)."}, {"instruction": "Create a Python class `File` that allows access to, and modifies, the contents of a file."}, {"instruction": "Write a Python class that implements a stack using a list."}, {"instruction": "Write a Python class `Crate` that represents a crate object. The crate will have a weight and a volume."}, {"instruction": "Create a Python class `Palindrome` that implements a palindrome check by converting the input string to lowercase and removing non-alphabetic characters."}, {"instruction": "Create a Python class `Person` that represents a human being."}, {"instruction": "Create a Python class `StringSet` that represents a set of strings."}, {"instruction": "Implement a Python class `FizzBuzz` that prints the numbers from 1 to 100. For multiples of three, it should print \"Fizz\" instead of the number. For the multiples of five, it should print \"Buzz\". For numbers that are multiples of both three and five, it should print \"FizzBuzz\"."}, {"instruction": "Implement the following function in `Python`, which uses the C API to calculate the greatest common divisor of two numbers:\n```python\ndef gcd(m, n):\n    \"\"\"Return the greatest common divisor of m and n\"\"\"\n    pass\n```"}, {"instruction": "Implement a Python class `Calculation` that implements two functions: `sum` and `sub`, which returns the sum and difference of two numbers respectively."}, {"instruction": "Implement a Python class `Message` that stores a string message, and has methods to encrypt and decrypt the message. It should be able to encrypt and decrypt using the Caesar Cipher."}, {"instruction": "Create a Python class `CSVReader` that can read a CSV file."}, {"instruction": "Implement a Python class `PigLatin` that converts English words to Pig Latin."}, {"instruction": "Write a Python class `DNA` that encapsulates a string of DNA as a single object. The DNA object should implement the following methods: `get_gc_content`, `get_complement`, `reverse_complement`, `get_length`, `get_reversed`, and `get_slice`.\n- `get_gc_content` should return the GC content of the DNA string, as a float between 0 and 1.\n- `get_complement` should return a string of the DNA string's corresponding complementary nucleotide sequence.\n- `reverse_complement` should return a string of the DNA string's reverse complement.\n- `get_length` should return the length of the DNA string.\n- `get_reversed` should return the reversed DNA string.\n- `get_slice` should return the slice of the DNA string defined by a given range of indices."}, {"instruction": "Extend the `string` class in Python by writing a static function `can_be_palindrome` that returns `True` if a string can be rearranged to be a palindrome, and `False` otherwise.\n/examples/cpp/prime.h\n#ifndef PRIME_H\n#define PRIME_H\n\nint isPrime(int n);\n\n#endif  // PRIME_H\n/examples/cpp/vector_sum.cpp\n#include \"vector_sum.h\"\n\nint sumVector(const std::vector<int>& vector)\n{\n    int sum = 0;\n\n    for (const int& element : vector) {\n        sum += element;\n    }\n\n    return sum;\n}\n/examples/cpp/vector_sum.h\n#ifndef VECTOR_SUM_H\n#define VECTOR_SUM_H\n\n#include <vector>\n\nint sumVector(const std::vector<int>& vector);\n\n#endif  // VECTOR_SUM_H\n/examples/cpp/prime.cpp\n#include \"prime.h\"\n\nint isPrime(int n)\n{\n    if (n < 2) {\n        return false;\n    }\n\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}"}, {"instruction": "Implement a Python class `Gcd` that can compute the greatest common divisor of two non-negative numbers using the Euclidean algorithm."}, {"instruction": "Implement a Python class `Histogram` which operates in a similar manner to a histogram. The class should also include a method `plot` which will plot the histogram."}, {"instruction": "Create a `Date` class that models a date and has the following properties:\n\n- `year` \u2013 a positive integer\n- `month` \u2013 a positive integer between 1 and 12\n- `day` \u2013 a positive integer between 1 and 31\n\nThe class must only accept valid dates and perform validation.\n\nImplement the following functions as class methods:\n\n- `isLeapYear(int year)` \u2013 returns True if year is a leap year and False otherwise.\n- `daysInMonth(int month)` \u2013 returns the number of days in the given month.\n- `daysInYear(int year)` \u2013 returns the number of days in the given year.\n- `daysSinceEpoch(int year, int month, int day)` \u2013 returns the number of days since the epoch.\n- `daysSinceDate(int year, int month, int day)` \u2013 returns the number of days since the given date.\n- `dateFromDaysSinceEpoch(int epoch)` \u2013 returns a date object for the given number of days since the epoch.\n- `dateFromDaysSinceDate(int date)` \u2013 returns a date object for the given number of days since the given date.\n- `toString(int year, int month, int day)` \u2013 returns a string in the format of `YYYY-MM-DD`."}, {"instruction": "Implement a Python class `Complex` that represents complex numbers."}, {"instruction": "Implement the C API for the C++ class `List` in Python."}, {"instruction": "Implement a Python class `Rectangle` that supports the following operations:\n- create a rectangle with given width and height\n- calculate the area\n- calculate the perimeter\n- calculate the diagonal\n- test if two rectangles are equal\n- test if two rectangles are similar\n- return a string representation of a rectangle"}, {"instruction": "Write a Python function `intToRoman` that converts an integer to its Roman numeral representation."}, {"instruction": "Write a Python class `Greeting` that stores a greeting message and returns the message when called."}, {"instruction": "Implement a Python class `SimplePyString` that supports the following operations:\n\n- `__init__()` - initializes the internal `value` variable with an empty string\n- `__str__()` - returns the string value of the internal `value` variable\n- `__repr__()` - returns the string representation of the internal `value` variable, using the `value` string\n- `append(char)` - adds the specified character to the end of the `value` string\n- `append(string)` - adds the specified string to the end of the `value` string\n- `append(substring)` - adds the specified substring to the end of the `value` string\n- `size()` - returns the size of the internal `value` string\n- `lower()` - returns a lowercase version of the internal `value` string"}, {"instruction": "Write a Python class `Rectangle` that represents a rectangle with integer width and height and contains two static methods:\n\n- `area()`: returns the area of the rectangle\n- `perimeter()`: returns the perimeter of the rectangle"}, {"instruction": "Create a Python class `StringWrapper` that implements a static method `char_freq` that returns a dictionary of character frequencies from a string."}, {"instruction": "Implement an instantiation of the `Stack` class in Python."}, {"instruction": "Write a Python class `BinaryTree` that defines a binary tree structure."}, {"instruction": "Create a Python class `StringList` that implements the following operations:\n- `__init__` constructor that initializes the string list to an empty list\n- `add` method that appends an item to the list\n- `remove` method that removes the first occurrence of an item from the list\n- `remove_all` method that removes all occurrences of an item from the list\n- `pop` method that removes the last item from the list\n- `is_empty` method that returns true if the list is empty, false otherwise\n- `size` method that returns the length of the list\n- `print` method that prints the list (use `{...}` to print a list)"}, {"instruction": "Write a class `BankAccount` in Python that stores a balance and an owner. The `BankAccount` will have methods `deposit`, `withdraw`, `getBalance`, and `getAccountOwner`."}, {"instruction": "Create a Python class `Counter` that implements a counter that tracks the number of times a given event occurs."}, {"instruction": "Complete the `get_sign` function in the `Sign` class to return the sign of a given integer."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: bits, bit manipulation, bitwise operations, bitfiddling, terminal control\n\n### Task", "fingerprint": null, "content": {"code": "int sdconf(sd_t *sd)\n{\n\tint err;\n\t\n\t//get the current options\n\terr = tcgetattr(sd->fd, &sd->saved);\n\tif(err) return err;\n\t\n\tmemcpy(&sd->saved, &sd->settings, sizeof(struct termios));\n\t\n\tsd->settings.c_cflag |= (CLOCAL | CREAD);\n\tsd->settings.c_cflag |= B115200;\n\tsd->settings.c_cflag |= CS8;\n\tsd->settings.c_cflag |= PARENB;\n\t\n\t//input flags\n\t//termios_p.c_iflag = IGNPAR | IGNBRK;\n\t\n\t//local options\n\tsd->settings.c_lflag     &= ~(ICANON | ECHO | ECHOE | ISIG);\t//sets up raw input, NON-canonical\n\t\n\t//output options\n\tsd->settings.c_oflag     &= ~OPOST;\t\t//disable post-processing, to use raw output\n\t\n\tsd->settings.c_cc[VMIN]  = 1;\n\tsd->settings.c_cc[VTIME] = 0;\n\t\n\t//set the options\n\terr = tcsetattr(sd->fd, TCSANOW, &sd->settings);\n\tif(err) return err;\n\t\n\t//flush the buffers\n\ttcflush(sd->fd, TCOFLUSH);\n\ttcflush(sd->fd, TCIFLUSH);\n\t\n\treturn 0;\n}", "docstring": "/*\n\tReading data from a port is a little trickier.\n\tWhen you operate the port in raw data mode, each read(2) system call will return\n\tthe number of characters that are actually available in the serial input buffers.\n\tIf no characters are available, the call will block (wait) until characters come in,\n\tan interval timer expires, or an error occurs.\n\tThe read function can be made to return immediately by doing the following:\n\n\tfcntl(fd, F_SETFL, FNDELAY);\n\n\tThe FNDELAY option causes the read function to return 0 if no characters are available on the port.\n\tTo restore normal (blocking) behavior, call fcntl() without the FNDELAY option:\n\n    fcntl(fd, F_SETFL, 0);\n\n\tThis is also used after opening a serial port with the O_NDELAY option.\n*/", "function_name": "sdopen"}, "id": 260, "seed": "int sdconf(sd_t *sd)\n{\n\tint err;\n\t\n\t//get the current options\n\terr = tcgetattr(sd->fd, &sd->saved);\n\tif(err) return err;\n\t\n\tmemcpy(&sd->saved, &sd->settings, sizeof(struct termios));\n\t\n\tsd->settings.c_cflag |= (CLOCAL | CREAD);\n\tsd->settings.c_cflag |= B115200;\n\tsd->settings.c_cflag |= CS8;\n\tsd->settings.c_cflag |= PARENB;\n\t\n\t//input flags\n\t//termios_p.c_iflag = IGNPAR | IGNBRK;\n\t\n\t//local options\n\tsd->settings.c_lflag     &= ~(ICANON | ECHO | ECHOE | ISIG);\t//sets up raw input, NON-canonical\n\t\n\t//output options\n\tsd->settings.c_oflag     &= ~OPOST;\t\t//disable post-processing, to use raw output\n\t\n\tsd->settings.c_cc[VMIN]  = 1;\n\tsd->settings.c_cc[VTIME] = 0;\n\t\n\t//set the options\n\terr = tcsetattr(sd->fd, TCSANOW, &sd->settings);\n\tif(err) return err;\n\t\n\t//flush the buffers\n\ttcflush(sd->fd, TCOFLUSH);\n\ttcflush(sd->fd, TCIFLUSH);\n\t\n\treturn 0;\n}", "concepts": ["bits", "bit manipulation", "bitwise operations", "bitfiddling", "terminal control"], "parsing_result": [{"instruction": "Implement an interactive Python function `bitflip` that flips a specified number of bits in a series of bits."}, {"instruction": "Write a Python function `displayBinary` that prints a given number in binary format."}, {"instruction": "Write a Python function `print_binary` that prints a given integer in binary format."}, {"instruction": "Write a Python function that checks if a sequence of bits is a palindrome."}, {"instruction": "Create a Python function `dec2bin` that takes as input a decimal number and returns a binary string."}, {"instruction": "Create a Python function `getBit` that returns the value of a bit at a particular position."}, {"instruction": "Create a Python script that accepts a string of bits and returns a string of bits with all of the 0's replaced with 1's and all of the 1's replaced with 0's."}, {"instruction": "Write a Python function `countBits` that counts the number of bits in an integer."}, {"instruction": "Write a Python function `getBit` that returns the `n`th bit of a given integer."}, {"instruction": "Write a Python function `generate_passphrase` that generates a 12-word passphrase that meets the following quality criteria:\n\n- eight words in the passphrase must have at least four letters\n- five words in the passphrase must have a letter and a number\n- six words in the passphrase must have at least three letters and at least three digits"}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `printBits` that prints a number in binary."}, {"instruction": "Write a Python function `setPixel` that takes a pair of coordinates and a color and sets the pixel at that coordinate to the given color."}, {"instruction": "Write a function for the [COM1 protocol](https://en.wikipedia.org/wiki/Serial_communication#COM_1) in Python. The function should take a string as its sole argument. The string is a series of all 1s or all 0s. If the string has a `1` in the first character position, then the bits are sent to the computer in big-endian order. If the string has a `0` in the first character position, then the bits are sent to the computer in little-endian order."}, {"instruction": "Create a Python function `printBits` that prints the bits of an integer."}, {"instruction": "Write a Python function `countSetBits` that counts the number of set bits in an integer (hint: use bitwise operators)."}, {"instruction": "Create a Python function `printBit` that prints a given number in bits."}, {"instruction": "Write a Python function that accepts a string as input and returns a string with spaces between words."}, {"instruction": "Write a Python function `get_bits` that returns a list of the bits of a number in binary."}, {"instruction": "Write a Python function `countBits` that returns the number of set bits in a given 32-bit integer."}, {"instruction": "Write a Python function `bitFlip` that detects bit flips in an array."}, {"instruction": "Write a Python function `clear` that clears the terminal."}, {"instruction": "Write a Python function `binaryToDecimal` that converts a binary string to its integer representation."}, {"instruction": "Implement a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Implement a Python function `bitwise_negate` that returns the bitwise negation of an integer."}, {"instruction": "Write a Python function that says whether a password is strong or not. The password must meet at least 5 of the following requirements:\n\n- 8 characters or longer\n- contains at least one uppercase letter\n- contains at least one lowercase letter\n- contains at least one digit\n- contains at least one special character from `!@#$%^&*()-+=`"}, {"instruction": "Write a Python function that returns the number of times the digits 1-9 appear on a standard US keyboard."}, {"instruction": "Write a Python program that creates a 4x4 grid of squares on the terminal with the following properties:\n- every square is represented by a hash character\n- the left and right edges of the squares are aligned horizontally, and the top and bottom edges are aligned vertically\n- the top left corner of the first square is at the upper left corner of the terminal window\n- the top right corner of the first square is at the upper right corner of the terminal window\n- the left edge of the second square is to the right of the right edge of the first square\n- the right edge of the second square is to the right of the left edge of the first square\n- the top edge of the second square is to the above the bottom edge of the first square\n- the bottom edge of the second square is to the below the top edge of the first square"}, {"instruction": "Write a Python function `bitFlip` that takes an integer as input and flips all of its bits except the first 20 bits."}, {"instruction": "Create a function that takes four integers `r`, `c`, `x`, and `y` representing a rectangular coordinate system. The function should return the number of integer points within the rectangle, taking into account the boundary of the rectangle. The function also needs to take into account the 3-point rule for the area outside of rectangles, and the 4-point rule for the area outside of squares."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: conditional, loop, conditional loop, object existence check\n\n### Task", "fingerprint": null, "content": {"code": "void gridedit_updatezoomviewvalues ( void )\n{\n\t//  accepts gridentityinzoomview\n\tif (  t.gridentityinzoomview>0 ) \n\t{\n\t\tt.zoomviewcameraangle_f=0.0;\n\t\tt.zoomviewcameraheight_f=50.0;\n\t\tt.zoomviewcamerarange_f=75.0;\n\t\tif (  t.entityelement[t.gridentityinzoomview].obj>0 ) \n\t\t{\n\t\t\tif (  ObjectExist(t.entityelement[t.gridentityinzoomview].obj) == 1 ) \n\t\t\t{\n\t\t\t\tt.zoomviewcamerarange_f=ObjectSize(t.entityelement[t.gridentityinzoomview].obj,1)*2.0;\n\t\t\t\tt.zoomviewcameraheight_f=(ObjectSize(t.entityelement[t.gridentityinzoomview].obj,1)/2.0)-100.0;\n\t\t\t\tif (  t.zoomviewcameraheight_f<5  )  t.zoomviewcameraheight_f = 5;\n\t\t\t}\n\t\t}\n\t}\nreturn;\n\n}", "docstring": "//  Only if within map", "function_name": "gridedit_mapediting"}, "id": 269, "seed": "void gridedit_updatezoomviewvalues ( void )\n{\n\t//  accepts gridentityinzoomview\n\tif (  t.gridentityinzoomview>0 ) \n\t{\n\t\tt.zoomviewcameraangle_f=0.0;\n\t\tt.zoomviewcameraheight_f=50.0;\n\t\tt.zoomviewcamerarange_f=75.0;\n\t\tif (  t.entityelement[t.gridentityinzoomview].obj>0 ) \n\t\t{\n\t\t\tif (  ObjectExist(t.entityelement[t.gridentityinzoomview].obj) == 1 ) \n\t\t\t{\n\t\t\t\tt.zoomviewcamerarange_f=ObjectSize(t.entityelement[t.gridentityinzoomview].obj,1)*2.0;\n\t\t\t\tt.zoomviewcameraheight_f=(ObjectSize(t.entityelement[t.gridentityinzoomview].obj,1)/2.0)-100.0;\n\t\t\t\tif (  t.zoomviewcameraheight_f<5  )  t.zoomviewcameraheight_f = 5;\n\t\t\t}\n\t\t}\n\t}\nreturn;\n\n}", "concepts": ["conditional", "loop", "conditional loop", "object existence check"], "parsing_result": [{"instruction": "Write a Python function `compute` that takes two numbers and an operator and returns the result."}, {"instruction": "Write a Python program that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Write a Python program that prompts a user for a number that is between 1 and 100. If the number is 42, tell the user that they win a prize of $10,000. Otherwise, keep asking the user to enter a number between 1 and 100 until the user enters the correct number."}, {"instruction": "Write a Python function `isPrime` that determines if an integer is prime."}, {"instruction": "Write a Python program that prints `Hello World!` 20 times."}, {"instruction": "Write a Python function `isPrime` that returns true if a given integer is prime."}, {"instruction": "Write a Python function `isEven` that determines whether a given integer is even by using conditional statements and a loop."}, {"instruction": "Write a Python program that prints the numbers from 1 to 100. For multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\"."}, {"instruction": "Implement a Python program that asks the user for a list of numbers. If the length of the list is less than 20, then the program prints a message saying that the list is too short. If the length of the list is greater than 20, the program prints a message saying that the list is too long. If the length of the list is exactly 20, the program prints the following message: \"Congratulations! You have a perfect list!\"."}, {"instruction": "Write a Python function `sum_n` that returns the sum of the numbers in a list of positive integers."}, {"instruction": "Write a Python program that outputs all integers between 1 and 100 that are multiples of 3 or 5, but not both."}, {"instruction": "Write a Python function `isPrime` that returns true if a given integer is prime."}, {"instruction": "Write a Python program that prints the integers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d."}, {"instruction": "Write a Python function `isPrime` that takes an integer and returns true if it is prime."}, {"instruction": "Write a Python function `is_palindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python program that takes one or two arguments and returns the larger of the two arguments, unless the larger argument is a string long enough to be an object of type `bool` with the value `True`. In that case, return the string `Both arguments are boolean`."}, {"instruction": "Write a Python function `fibonacci` to return the nth Fibonacci number."}, {"instruction": "Implement a Python program that asks the user to input a file path. If the file exists, it should print the first 10 lines of the file. Otherwise, print the prompt \"File not found.\""}, {"instruction": "Write a Python program that prints the sum of all integers from 1 to 100."}, {"instruction": "Write a Python program that, given an integer that represents the number of minutes elapsed, prints the current time in the format HH:MM:SS. HH is the hours, MM is the minutes, and SS is the seconds. Use only conditional statements, loops and the `time` module."}, {"instruction": "Write a Python program that prints the first **n** prime numbers."}, {"instruction": "Write a Python function `isPrime` that takes a positive integer as its input and returns True if the number is prime, and False otherwise."}, {"instruction": "Write a Python program that reads a list of integers from the user and prints them, one per line, in reverse order."}, {"instruction": "Write a Python function `isOdd` that returns true if an integer `n` is odd, and false if it is even."}, {"instruction": "Write a Python program that takes a number N from the user and prints all the prime numbers from 2 to N."}, {"instruction": "Write a program that prints all numbers from 1 to 100. For multiples of 3, instead of the number, print \"Fizz\", for multiples of 5 print \"Buzz\". For numbers which are multiples of both 3 and 5, print \"FizzBuzz\"."}, {"instruction": "Write a Python function `isPrime` that returns true if a given positive integer is prime and false otherwise."}, {"instruction": "Write a Python function `sum_of_squares` that sums the squares of all integers from 1 to 100."}, {"instruction": "Write a Python program that prints the first 100 Fibonacci numbers."}, {"instruction": "Write a Python function `isPrime(x)` that returns true if and only if the given integer `x` is prime."}, {"instruction": "Write a Python program that takes a positive integer and returns the \"next\" prime number."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: PCL library, point cloud, feature estimation, nearest-neighbor search\n\n### Task", "fingerprint": null, "content": {"code": "fpfhFeature::Ptr compute_fpfh_feature(PointCloud<PointXYZRGB>::Ptr incloud, int ksearchnum, int openmpcores)\n{\n\t//\u5efa\u7acbkdtree\n\tpcl::search::KdTree<pcl::PointXYZRGB>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGB>);\n\t//\u6cd5\u5411\u91cf\n\tpointnormal::Ptr point_normal(new pointnormal);\n\tpcl::NormalEstimation<pcl::PointXYZRGB, pcl::Normal> est_normal;\n\test_normal.setInputCloud(incloud);\n\test_normal.setSearchMethod(tree);\n\test_normal.setKSearch(ksearchnum);\n\test_normal.compute(*point_normal);\n\t//fpfh \u4f30\u8ba1\n\tfpfhFeature::Ptr fpfh(new fpfhFeature);\n\t//pcl::FPFHEstimation<pcl::PointXYZ,pcl::Normal,pcl::FPFHSignature33> est_target_fpfh;\n\tpcl::FPFHEstimationOMP<pcl::PointXYZRGB, pcl::Normal, pcl::FPFHSignature33> est_fpfh;\n\test_fpfh.setNumberOfThreads(openmpcores); //\u6307\u5b9a4\u6838\u8ba1\u7b97\n\t// pcl::search::KdTree<pcl::PointXYZ>::Ptr tree4 (new pcl::search::KdTree<pcl::PointXYZ> ());\n\test_fpfh.setInputCloud(incloud);\n\test_fpfh.setInputNormals(point_normal);\n\test_fpfh.setSearchMethod(tree);\n\test_fpfh.setKSearch(ksearchnum);\n\test_fpfh.compute(*fpfh);\n\treturn fpfh;\n}", "docstring": "//open3d::FastGlobalRegistrationOption(fastpara));", "function_name": "FPFHRegister_open3d"}, "id": 271, "seed": "fpfhFeature::Ptr compute_fpfh_feature(PointCloud<PointXYZRGB>::Ptr incloud, int ksearchnum, int openmpcores)\n{\n\t//\u5efa\u7acbkdtree\n\tpcl::search::KdTree<pcl::PointXYZRGB>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGB>);\n\t//\u6cd5\u5411\u91cf\n\tpointnormal::Ptr point_normal(new pointnormal);\n\tpcl::NormalEstimation<pcl::PointXYZRGB, pcl::Normal> est_normal;\n\test_normal.setInputCloud(incloud);\n\test_normal.setSearchMethod(tree);\n\test_normal.setKSearch(ksearchnum);\n\test_normal.compute(*point_normal);\n\t//fpfh \u4f30\u8ba1\n\tfpfhFeature::Ptr fpfh(new fpfhFeature);\n\t//pcl::FPFHEstimation<pcl::PointXYZ,pcl::Normal,pcl::FPFHSignature33> est_target_fpfh;\n\tpcl::FPFHEstimationOMP<pcl::PointXYZRGB, pcl::Normal, pcl::FPFHSignature33> est_fpfh;\n\test_fpfh.setNumberOfThreads(openmpcores); //\u6307\u5b9a4\u6838\u8ba1\u7b97\n\t// pcl::search::KdTree<pcl::PointXYZ>::Ptr tree4 (new pcl::search::KdTree<pcl::PointXYZ> ());\n\test_fpfh.setInputCloud(incloud);\n\test_fpfh.setInputNormals(point_normal);\n\test_fpfh.setSearchMethod(tree);\n\test_fpfh.setKSearch(ksearchnum);\n\test_fpfh.compute(*fpfh);\n\treturn fpfh;\n}", "concepts": ["PCL library", "point cloud", "feature estimation", "nearest-neighbor search"], "parsing_result": [{"instruction": "Create a Python class `PointCloud` that defines and extracts features from a point cloud using the PCL library."}, {"instruction": "Write a Python class `PointCloud` that takes a point cloud as input and implements a method `nearestNeighbor` that returns the Euclidean distance to the nearest neighbor of a given point cloud point."}, {"instruction": "Write a program to estimate the curvature of a point cloud using the PCL library."}, {"instruction": "Write a Python class that represents a point cloud and provides the following functionality:\n- input a point cloud file\n- output a point cloud file with points colored by nearest neighbor search to the original point cloud\n- output a point cloud file (with points colored by nearest neighbor search) with a sphere representing the nearest point cloud point to the original point cloud point"}, {"instruction": "Write a Python class `FeatureCloud` that estimates feature vectors for a point cloud."}, {"instruction": "Create a Python class `PCL` that implements a point cloud library."}, {"instruction": "Create a Python class `PointCloud` that contains a 3D point cloud as an array of 3D points and performs nearest neighbor searches."}, {"instruction": "The goal of this task is to implement a class called `FeatureExtractor` that uses the PCL library to extract features from point clouds."}, {"instruction": "Read in a point cloud from a binary file using the PCL Python library. Create a custom class named `Feature` that contains a feature descriptor (i.e., its raw data) and a point index, which refers to the point in the point cloud. Find the 10 closest neighbors (i.e., the points in the point cloud) of the nearest neighbor (i.e., the point with the minimum distance to the other points in the point cloud) in a point cloud."}, {"instruction": "In this challenge you will implement a class RandomPointCloudGenerator that generates a point cloud of random points. The class should have two class methods: `generatePoint` and `generatePointCloud`.\n\nThe first method should take a single argument, a list or tuple of three integers and return a random point with coordinates between -1 and 1.\n\nThe second method should take as many arguments as needed to generate a point cloud. The arguments can be in any order, but the number of arguments must match the number of dimensions. The first argument should be the number of points to generate. The remaining arguments should be the dimensions of the points to generate. The default values should be 3 and 100."}, {"instruction": "Write a Python class `PointCloud` to implement a point cloud."}, {"instruction": "Create a Python class `PointCloud` that represents a point cloud."}, {"instruction": "Create a Python class `PCL` that can estimate 6D pose from a pair of point clouds of a rigidly-moving object in the real world."}, {"instruction": "Write a Python class that implements the VoxelGrid class from [PCL](http://pointclouds.org/) and provides a wrapper for the nearest-neighbor search function.#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        int min = nums[0];\n        for (auto n : nums) {\n            if (n < min) min = n;\n        }\n        return min;\n    }\n};\n\nint main() {\n    int n, min;\n    cin >> n;\n    vector<int> nums;\n    for (int i = 0; i < n; i++) {\n        int temp;\n        cin >> temp;\n        nums.push_back(temp);\n    }\n    Solution s;\n    min = s.findMin(nums);\n    cout << min;\n    return 0;\n}\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string reverseString(string s) {\n        string result;\n        for (auto c : s) {\n            result = c + result;\n        }\n        return result;\n    }\n};\n\nint main() {\n    string s;\n    getline(cin, s);\n    Solution solution;\n    cout << solution.reverseString(s);\n    return 0;\n}"}, {"instruction": "Create a Python class `PointCloud` that represents a point cloud using the PCL library."}, {"instruction": "Write a Python class `PointCloud` to represent a point cloud with 3D coordinates using the PCL library."}, {"instruction": "Create a Python class `PointCloud` that stores 3D points in a list and can perform nearest-neighbor search."}, {"instruction": "Write a Python class `PointCloud` that takes in a point cloud (a point cloud is an object that represents a cloud of points) and then provides the following methods:\n\n- `addPoint`: takes in a point and adds it to the cloud\n- `average`: returns the average of all the points in the cloud\n- `getBoundingBox`: returns the axis-aligned bounding box of the cloud\n- `getClosestPoint`: returns the closest point to a given point"}, {"instruction": "Write a Python class named `PointCloud` that represents a point cloud of 3D points."}, {"instruction": "Implement a Python class `PointCloud` that represents a 3D point cloud consisting of a list of points."}, {"instruction": "Create a Python class `PointCloud` that stores an arbitrary number of 3D points in a numpy array. The class should provide the following methods:\n\n- `mean(self)`: returns a numpy array of the mean of the input points\n- `median(self)`: returns a numpy array of the median of the input points\n- `kNN(self, k)`: returns an array of the k nearest neighbors of the input points"}, {"instruction": "Write a Python class `PointCloud` that implements the PCL library's `PointCloud` class."}, {"instruction": "Create a Python class `PointCloud` that implements a class for storing 3D points in a point cloud."}, {"instruction": "Given 1024 point clouds of 100000 points per cloud, each of which is a single 3D point with coordinates (x, y, z), use PCL to find the nearest neighbor to each point in each of the 1024 point clouds."}, {"instruction": "Write a Python class `PointCloud` that stores a 3D point cloud. It should be able to calculate the nearest neighbors of each point in a cloud."}, {"instruction": "Write a Python function `kNN_search` that takes a point cloud and a query point and returns the k nearest neighbor of the query point."}, {"instruction": "Create a Python class `PCLFilter` that implements a filter for outlier rejection in point clouds. The filter should use the Point-to-Point ICP algorithm to estimate the transformation between two point clouds in space."}, {"instruction": "Create a Python class `Cloud` that stores a point cloud in the form of a NumPy array."}, {"instruction": "Implement a Python class `Cloud` that stores a point cloud, which is a set of 3-D points."}, {"instruction": "Write a class `FeatureFinder` that returns the nearest neighbor for each point in a point cloud."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: C++, memory management, preprocessor directives, object lifetime\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Camera_initGeometryRenderer(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Camera *arg1 = (cc::scene::Camera *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Camera>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->initGeometryRenderer();\n    \n    \n    return true;\n}", "docstring": "// %typemap(in) SWIGTYPE&", "function_name": "js_cc_scene_Camera_setViewportInOrientedSpace"}, "id": 273, "seed": "static bool js_cc_scene_Camera_initGeometryRenderer(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Camera *arg1 = (cc::scene::Camera *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Camera>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->initGeometryRenderer();\n    \n    \n    return true;\n}", "concepts": ["C++", "memory management", "preprocessor directives", "object lifetime"], "parsing_result": [{"instruction": "Design a Python class `BinaryTree` that stores a binary tree of integers. Implement the following methods:\n\n- `addNode`: add a new node to the tree\n- `removeNode`: remove a node from the tree\n- `searchNode`: search for a node in the tree"}, {"instruction": "Create a Python class `Node` that stores a node in a linked list."}, {"instruction": "Create a simplified C++ implementation of the `std::string` class."}, {"instruction": "Create a Python class `Complex` with two data members: `real` and `imag`, representing the real and imaginary parts of a complex number."}, {"instruction": "Write a Python class `List` that implements the functionality of a Python list."}, {"instruction": "Create a Python class `Temperature` that allows the user to store and manipulate temperature values."}, {"instruction": "Create a Python class `Stack` that implements a simple stack data structure."}, {"instruction": "Write a Python class `CircularBuffer` that implements a circular buffer."}, {"instruction": "Create a Python class `Temperature` that provides methods for converting temperatures between Celsius, Fahrenheit, and Kelvin."}, {"instruction": "Create a Python class that implements a fixed-size array."}, {"instruction": "Create a Python class `Temperature` that contains a temperature in degrees Celsius and provides methods to convert the temperature to degrees Fahrenheit and vice versa"}, {"instruction": "Write a Python class `Vector` that implements vector arithmetic."}, {"instruction": "Write a Python class that emulates a bank account:\n- The constructor accepts an initial balance.\n- The class uses a simple interface that allows the user to withdraw, deposit, and check the balance.\n- The class should check for any parameter errors in the provided operations."}, {"instruction": "Implement the class `Date` in Python, which has the following data members:\n- `year` is an int.\n- `month` is an int.\n- `day` is an int.\n\nThe data members must be in a private section of the class; the class must have a public constructor, and a public function `isValid` that returns true if the date is valid, false otherwise.\n\nThe class must also have a public member function `setYear` that takes the year as an argument and sets the value of the member variable `year` to the argument. If the argument is out of range, the function must throw a `ValueError` exception. If the argument is valid, the function must update the member variable `year`.\n\nThe class must have a public member function `setMonth` that takes the month as an argument and sets the value of the member variable `month` to the argument. If the argument is out of range, the function must throw a `ValueError` exception. If the argument is valid, the function must update the member variable `month`.\n\nThe class must have a public member function `setDay` that takes the day as an argument and sets the value of the member variable `day` to the argument. If the day does not exist in the current month, the function must throw a `ValueError` exception. If the argument is valid, the function must update the member variable `day`.\n\nThe class must have a public member function `nextDay` that increments the day by one. If the day is 31, the function must update the day to 1, increment the month by one, and update the year if necessary. The function must only update the member variables of the class and not change the value of the member variable `day` of any other objects of the class.\n\nThe class must have a public member function `prevDay` that decrements the day by one. If the day is 1, the function must update the day to 31, decrement the month by one, and update the year if necessary. The function must only update the member variables of the class and not change the value of the member variable `day` of any other objects of the class."}, {"instruction": "Implement a class `Student` that keeps track of student's name, ID, and GPA."}, {"instruction": "Create a Python class `Animal` that has the following attributes:\n\n- `name`: a string that stores the name of the animal\n- `gender`: a string that stores the gender of the animal\n- `age`: an integer that stores the age of the animal\n\nCreate a Python class `Dog` that has the following attributes:\n\n- `name`: stores the name of the dog\n- `gender`: stores the gender of the dog\n- `age`: stores the age of the dog\n- `color`: stores the color of the dog\n\nWrite a Python program that instantiates two dogs, one male dog and one female dog, and prints their names, genders, and ages."}, {"instruction": "Implement a Python class `Stock` that can store stock information, including:\n\n- company name\n- ticker symbol\n- current price\n- current volume\n- current number of shares"}, {"instruction": "Create a Python class `Stack` that implements a stack data structure."}, {"instruction": "Implement a Python class `Stack` that maintains a LIFO (last-in, first-out) stack of elements."}, {"instruction": "Create a Python class `Employee` with the following properties:\n\n- id: an integer, unique identifier\n- name: a string\n- position: a string\n- salary: an integer\n\nCreate a Python class `Payroll` with the following properties:\n\n- id: an integer, unique identifier\n- employees: an array of employee objects\n- benefits: an array of integer values, representing the amount of benefits each employee has received\n\nWrite a Python function `calculate_payroll` that calculates an employee's payroll based on a set of benefits."}, {"instruction": "Implement a Python class `MyString` that behaves like a C++ `std::string`."}, {"instruction": "Create a Python class `Matrix` that implements a two-dimensional matrix."}, {"instruction": "Create a class `Student` that represents a student who can be enrolled in multiple classes."}, {"instruction": "Create a pure Python class `MyClass`."}, {"instruction": "Implement a Python class `Complex` that represents a complex number."}, {"instruction": "Create a Python class `CharacterArray` that implements a character array."}, {"instruction": "Implement a Python class `Sequence` that represents a sequence of integers. The class should support the following operations:\n- initialization with a single integer argument (the sequence length)\n- setting a value by a given index\n- returning a value by a given index\n- returning the length of the sequence\n- returning the index of the first element that is equal to a given value\n- returning the index of the last element that is equal to a given value\n- returning the maximum value in the sequence\n- returning the minimum value in the sequence"}, {"instruction": "Create a Python class `Student` with fields `name` and `id` (both strings) and a constructor that takes two parameters, and an instance method `print` that prints the student information."}, {"instruction": "Create a Python class `Integer` that represents a signed integer."}, {"instruction": "Create a Python class `Student` with the following attributes (instance variables):\n- `id`: a unique student ID\n- `name`: a name string\n- `gender`: a gender string\n- `age`: an integer representing the age of the student\n- `CGPA`: a floating-point representation of the CGPA of the student\n\nThe class must also have the following methods (methods):\n- `__init__()`: takes in all of the instance variables and stores them in the corresponding instance variables\n- `display_student()`: prints out the information of the student in the following format: `\"id, name, gender, age, CGPA\"`"}, {"instruction": "Create a Python class `Area` that has one data member named `rectangle_area` and two methods `set_width` and `set_height`, which respectively set and get the width and height of a rectangle."}, {"instruction": "Create a Python class `Employee` with the following properties:\n- name: the employee's full name (first and last name)\n- age: the employee's age\n- salary: the employee's hourly salary\n\nCreate a Python class `Company` with the following properties:\n- name: The company's name\n- employees: a list of employees\n\nThe class `Employee` should have the following methods:\n- `getAge`: a method that returns the employee's age\n- `getName`: a method that returns the employee's name\n- `getSalary`: a method that returns the employee's salary\n\nThe class `Company` should have the following methods:\n- `averageSalary`: a method that returns the average salary of all the employees\n- `totalSalary`: a method that returns the total salary of all the employees\n\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid printVector(vector<int> v)\n{\n    for (int i = 0; i < v.size(); ++i)\n        cout << v[i] << \" \";\n    cout << endl;\n}\n\nint main()\n{\n    vector<int> v = {1, 2, 3, 4, 5};\n    // print the vector\n    printVector(v);\n\n    // insert a new element at the end of the vector\n    v.push_back(6);\n    // print the vector\n    printVector(v);\n\n    // insert a new element at the beginning of the vector\n    v.insert(v.begin(), 0);\n    // print the vector\n    printVector(v);\n\n    // insert a new element at the end of the vector\n    v.push_back(7);\n    // print the vector\n    printVector(v);\n\n    // insert a new element at the beginning of the vector\n    v.insert(v.begin(), 8);\n    // print the vector\n    printVector(v);\n\n    // insert a new element with index 3\n    v.insert(v.begin() + 3, 9);\n    // print the vector\n    printVector(v);\n\n    // assign 10 to element at index 0\n    v[0] = 10;\n    // print the vector\n    printVector(v);\n\n    // remove the last element of the vector\n    v.pop_back();\n    // print the vector\n    printVector(v);\n\n    // remove the element at index 3\n    v.erase(v.begin() + 3);\n    // print the vector\n    printVector(v);\n\n    // remove the first element of the vector\n    v.erase(v.begin());\n    // print the vector\n    printVector(v);\n\n    // remove elements with index 1, 2, and 4\n    v.erase(v.begin() + 1, v.begin() + 4);\n    // print the vector\n    printVector(v);\n\n    // remove all elements from the vector\n    v.erase(v.begin(), v.end());\n    // print the vector\n    printVector(v);\n\n    return 0;\n}\n/cpp/vectors/main.cpp\n/**\n * Title: Main\n * Author: \n * Date: 10/16/2015\n * Description: A program to demonstrate various aspects of C++ vectors\n */\n/README.md\n# programming-challenges\nA program to manage programming coding challenges\n\n## Description\nThis is a program to help manage programming coding challenges.\n\nThe challenge files are stored as JSON files. Each file contains a list of problems. Each problem has the following properties:\n\n- **category** (string): the type of challenge (e.g. function implementation, class implementation, or program implementation)\n- **language** (string): the programming language to be used\n- **difficulty** (string): the complexity level of the challenge (e.g. easy, medium, or hard)\n- **concepts** (array of strings): fundamental principles and techniques the challenge is designed to incorporate, which developers must understand to effectively solve the challenge"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: looping, recursion, factorials\n\n### Task", "fingerprint": null, "content": {"code": "int main()\n{IN;//OUT;\n    ios::sync_with_stdio(0);\n    cin.tie(NULL);\n    int n,c;\n    cin>>n>>c;\n    ll res=0;\n    FOR (i,0,1){\n    \tFOR (j,0,1){\n    \t\tres=(res+calc(n,i,j,c))%K;\n    \t}\n    }\n    cout<<res<<endl;\n    \n\t\n         return 0;\n}", "docstring": "//cout<<n<<\" \"<<a1<<\" \"<<a2<<\" \"<<c<<\" \"<<d[n][a1][a2][c]<<endl;", "function_name": "calc"}, "id": 282, "seed": "int main()\n{IN;//OUT;\n    ios::sync_with_stdio(0);\n    cin.tie(NULL);\n    int n,c;\n    cin>>n>>c;\n    ll res=0;\n    FOR (i,0,1){\n    \tFOR (j,0,1){\n    \t\tres=(res+calc(n,i,j,c))%K;\n    \t}\n    }\n    cout<<res<<endl;\n    \n\t\n         return 0;\n}", "concepts": ["looping", "recursion", "factorials"], "parsing_result": [{"instruction": "Write a Python function `factorial` that accepts an argument `n` and returns `n!`."}, {"instruction": "Write a Python function `factorial` that computes the factorial of a non-negative integer."}, {"instruction": "Write a Python function `factorial` that returns the factorial of a number."}, {"instruction": "Write a Python program that computes factorials."}, {"instruction": "Create a Python program that prints the first N Fibonacci numbers."}, {"instruction": "Create a Python program that calculates the factorial of an integer using recursion."}, {"instruction": "Write a Python program that returns the number of ways to climb n stairs using step size 1 or 2."}, {"instruction": "Create a Python program that computes factorials of up to 12."}, {"instruction": "Write a Python program to print out the first `n` factorial numbers."}, {"instruction": "Write a Python program that calculates the factorials of all positive integers less than 10."}, {"instruction": "Implement the following function in Python:\n```\ndef factorial(n):\n    \"\"\"\n    Return the factorial of a non-negative integer n using recursion.\n    \"\"\"\n```"}, {"instruction": "Write a program in Python that prints the first 100 factorials."}, {"instruction": "Write a Python program that outputs the first 100 Fibonacci numbers."}, {"instruction": "Write a Python program that computes the factorial of a non-negative integer."}, {"instruction": "Write a Python program to generate the first 50 Fibonacci numbers."}, {"instruction": "Create a Python program that calculates factorials recursively."}, {"instruction": "Implement a program that lists all [factorials](https://en.wikipedia.org/wiki/Factorial) from 1 to 100."}, {"instruction": "Write a Python program that outputs the nth factorial of a positive integer."}, {"instruction": "Write a program that takes an integer input from the user and prints the factorial of that number."}, {"instruction": "Create a Python program that determines the number of factors of a number."}, {"instruction": "Write a Python program `factorial.py` that computes the factorial of a non-negative integer."}, {"instruction": "Write a Python program to compute the value of `exp(x)` using the Taylor series."}, {"instruction": "Create a Python program that outputs the first 100 factorials (100!)."}, {"instruction": "Write a Python program that prints the factorials of the first n positive integers (or until it hits the maximum integer size).\nNote: this can be done without recursion."}, {"instruction": "Write a Python function `factorial` that calculates the factorial of a non-negative integer."}, {"instruction": "Write a Python program to print the first 10 Fibonacci numbers."}, {"instruction": "Write a Python program that calculates and prints the factorial of a number."}, {"instruction": "Create a Python program to find the factorial of a number using loops and recursion."}, {"instruction": "Create a Python program that prints the first n factorials."}, {"instruction": "Create a Python program that prints the factorial of a given non-negative integer."}, {"instruction": "Write a Python program to calculate the factorial of a number."}, {"instruction": "Write a Python program that prints the first 10 factorials."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: hard\nconcepts: image convolution, image operation, C++ programming\n\n### Task", "fingerprint": null, "content": {"code": "IplImage CreationImageFTMP_3(IplImage *src,IplImage *templ_3)//src=image camera ,templ=image de reference (une des fleches)\n{\n//d\u00e9finition de la taille(largeur, hauteur) de l'image ftmp\n    int iwidth = src->width - templ_3->width + 1;\n    int iheight = src->height - templ_3->height + 1;\n\n\t//Creer un pointeur d'image ftmp de type IplImage et de taille iwidth et iheight\n    IplImage *ftmp_3 = cvCreateImage(cvSize(iwidth,iheight),IPL_DEPTH_32F,1);\n\treturn *ftmp_3;\n}", "docstring": "//Creer un pointeur d'image ftmp de type IplImage et de taille iwidth et iheight", "function_name": "CreationImageFTMP_2"}, "id": 285, "seed": "IplImage CreationImageFTMP_3(IplImage *src,IplImage *templ_3)//src=image camera ,templ=image de reference (une des fleches)\n{\n//d\u00e9finition de la taille(largeur, hauteur) de l'image ftmp\n    int iwidth = src->width - templ_3->width + 1;\n    int iheight = src->height - templ_3->height + 1;\n\n\t//Creer un pointeur d'image ftmp de type IplImage et de taille iwidth et iheight\n    IplImage *ftmp_3 = cvCreateImage(cvSize(iwidth,iheight),IPL_DEPTH_32F,1);\n\treturn *ftmp_3;\n}", "concepts": ["image convolution", "image operation", "C++ programming"], "parsing_result": [{"instruction": "Implement a Python function that performs a convolution operation on an image."}, {"instruction": "Write a Python function `filter_image` that takes an input image and returns a 1-D vector of pixel values corresponding to the 1-D convolution of the image with a kernel."}, {"instruction": "Implement a program that loads the image `salt_pepper_noise.png` from the data folder. The code must:\n\n- filter the salt and pepper noise from the image\n- convert the image to grayscale\n- display the filtered image in a window"}, {"instruction": "Write a Python program that uses convolution to blur an image."}, {"instruction": "Write a Python program that reads an image and applies a 3x3 box filter to each pixel, then writes the resulting image to a new file."}, {"instruction": "Write a Python program that performs a convolution operation on two images."}, {"instruction": "Implement an image convolution program using Python and C++."}, {"instruction": "Implement a Python program that performs an edge-detection filter (e.g., the Sobel filter) on a given 2D array."}, {"instruction": "Write a Python program that takes an image file and performs a 3x3 convolution on the image to blur it."}, {"instruction": "Create a Python program that convolves an 8x8 image with a 3x3 kernel in C++."}, {"instruction": "Implement a Python program for performing a convolution on an image."}, {"instruction": "Implement an image convolution function. The input should be a 2D array of integers (representing an image) and the convolution kernel should be a 2D array of integers (representing a filter). The output should be a 2D array of integers, the same dimensions as the input, representing a convolved image."}, {"instruction": "Create a Python program that converts a grayscale image to a binary image."}, {"instruction": "Create a Python program that uses the PIL (Python Imaging Library) to load an image and apply a 3x3 median filter to the image."}, {"instruction": "Write a Python program that performs image convolution using the [Sobel Operator](https://en.wikipedia.org/wiki/Sobel_operator)."}, {"instruction": "Implement the convolution of an image with a square matrix of the same dimensions."}, {"instruction": "Given an image, the following operations are possible:\n\n1. Flip the image horizontally\n2. Flip the image vertically\n3. Rotate the image counterclockwise by 90 degrees\n4. Rotate the image clockwise by 90 degrees"}, {"instruction": "Write a Python program that implements the convolutional layer of a convolutional neural network."}, {"instruction": "Write a program that performs a convolution on a given image using the Sobel operator."}, {"instruction": "Write a Python program that applies a convolution to an image."}, {"instruction": "Implement a Python program that performs the following operations:\n\n- load an image\n- convert the image to grayscale\n- apply a Gaussian filter of size 3x3 to the grayscale image\n- apply a Sobel edge detection operator to the grayscale image\n- convert the Sobel edge detection image to a boolean image, marking edge pixels with a value of 255 and non-edge pixels with a value of 0\n- store the boolean image in \"sobel.png\""}, {"instruction": "Write a Python program that takes an image and a kernel matrix as input, and returns the convolved image as output, where `kernel` is a 2D matrix of size 3\u00d73."}, {"instruction": "Write a Python program to detect and classify objects in a video."}, {"instruction": "Write a Python program to implement a program that runs a convolution kernel over an image."}, {"instruction": "Write a Python function `convolution` that computes the 1D convolution of an image with a given kernel."}, {"instruction": "Write a Python function `sharpen` that takes as input an image represented by a 3-dimensional NumPy array of ints. The function should return a new image with the average of each of the three pixel values in the original image as the value of all three channels in the new image."}, {"instruction": "Create a Python program that reads an image and performs a convolution operation on it."}, {"instruction": "Implement an image convolution program that convolves a 2D matrix of integers with a 3x3 kernel."}, {"instruction": "Implement a Python program that generates a 100 x 100 pixel image of a 10 x 10 pixel checkerboard pattern, where each pixel is either black or white."}, {"instruction": "Implement a Python program that uses C++ to perform image convolution."}, {"instruction": "Write a program that performs a grayscale image convolution."}, {"instruction": "Create a C++ program that takes an image as input, convolves it with a kernel, and outputs the convolved image."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: IVectorView, COM interop, public function call\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR uint32_t IVectorView_1_GetAt_m401DCF98BCB09DE624254EC85C6D723CE6492CAC (RuntimeObject* __this, uint32_t ___index0, const RuntimeMethod* method)\n{\n\tIVectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5* ____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5 = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5::IID, reinterpret_cast<void**>(&____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Native function invocation\n\tuint32_t returnValue = 0;\n\thr = ____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5->IVectorView_1_GetAt_m401DCF98BCB09DE624254EC85C6D723CE6492CAC(___index0, &returnValue);\n\t____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\treturn returnValue;\n}", "docstring": "// Marshaling cleanup of parameter U27___items1U27 native representation", "function_name": "IVectorView_1_GetMany_mEBDD2A781BF98D9450B52E34F2265FA193840186"}, "id": 294, "seed": "IL2CPP_METHOD_ATTR uint32_t IVectorView_1_GetAt_m401DCF98BCB09DE624254EC85C6D723CE6492CAC (RuntimeObject* __this, uint32_t ___index0, const RuntimeMethod* method)\n{\n\tIVectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5* ____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5 = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5::IID, reinterpret_cast<void**>(&____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Native function invocation\n\tuint32_t returnValue = 0;\n\thr = ____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5->IVectorView_1_GetAt_m401DCF98BCB09DE624254EC85C6D723CE6492CAC(___index0, &returnValue);\n\t____ivectorView_1_tCF0B931F5248DBD90A72F83BA70262CF7422BCB5->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\treturn returnValue;\n}", "concepts": ["IVectorView", "COM interop", "public function call"], "parsing_result": [{"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a C++/WinRT function that returns the sum of an integer sequence."}, {"instruction": "Write a public C++/WinRT function `getFactorial` that returns the factorial of a non-negative integer."}, {"instruction": "Implement the `IVectorView` interface in Python, which allows for reading values from a C++ vector."}, {"instruction": "Write a Python function `is_palindrome` that takes a string and returns True if it is a palindrome, False otherwise."}, {"instruction": "Write a Python function `palindrome` that checks if a given string is a palindrome."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `printSum` that returns the sum of all elements in a vector of integers."}, {"instruction": "Implement a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a function `get_names` that prints the names of the four players in the game of Baccarat (Chinese roulette)."}, {"instruction": "Write a Python function `is_palindrome` that returns true if a given string is a palindrome."}, {"instruction": "Implement a Python function `getCell` that returns the value of a specified cell in a Microsoft Excel spreadsheet."}, {"instruction": "Create a Python function `isPalindrome` that accepts a string and returns true if the string is a palindrome, otherwise returns false."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Create a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `add` that takes two integers and returns their sum."}, {"instruction": "Write a Python function `palindrome` that returns `True` if a given `str` is a palindrome."}, {"instruction": "Write a Python function `is_palindrome` that returns True if a given string is a palindrome."}, {"instruction": "Implement a function `Gradient` in C# with the following properties:\n\n- return type: `void`\n- function name: `Gradient`\n- input parameters: `IVectorView<int> intList`\n- returns: `void`\n\n`Gradient` should output the value of the derivative of the function `f(x) = x` on a sequence of the given integers.\n\nThe derivative of `f(x) = x` on `x1, x2, x3, ..., xn` is given by the difference quotient:\n\n$$\nf'(x_1) = \\frac{f(x_2) - f(x_1)}{x_2 - x_1}\n$$\n\n$$\nf'(x_2) = \\frac{f(x_3) - f(x_2)}{x_3 - x_2}\n$$\n\n$$\n...\n$$\n\n$$\nf'(x_n) = \\frac{f(x_1) - f(x_n)}{x_1 - x_n}\n$$"}, {"instruction": "Implement the C++ class `IVectorView` in Python using COM interop."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Create a C++/WinRT function `GetVectorSize` that returns the number of elements in a COM IVectorView."}, {"instruction": "Write a Windows Runtime function `IVectorView.First` that returns the first element of the given vector."}, {"instruction": "Create a Python class `Matrix` that represents a mathematical matrix."}, {"instruction": "Write a Python function `sumVector` that returns the sum of all elements in a vector of integers."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Create a Python function `printVector` that prints the elements in a vector of integers."}, {"instruction": "Write a function that returns a Python `IVectorView` that contains the squares of all non-negative integers less than or equal to `n`."}, {"instruction": "Implement a Python function `isPrime` that checks if an integer is prime."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: digital read, debounce, interrupts, conditionals\n\n### Task", "fingerprint": null, "content": {"code": "int getButtton(int pinNumber){\n  int lastState;\n  int reading;\n  lastState = digitalRead(pinNumber);\n  do  {\n    reading = digitalRead(pinNumber);\n    if (reading != lastState) {\n      lastDebounceTime = millis();\n      lastState = reading;\n    } \n  } \n  while ((millis() - lastDebounceTime) < debounceDelay);\n  //  lastDebounceTime = millis();\n  return reading;\n}", "docstring": "// only send if a button is pushed!", "function_name": "loop"}, "id": 299, "seed": "int getButtton(int pinNumber){\n  int lastState;\n  int reading;\n  lastState = digitalRead(pinNumber);\n  do  {\n    reading = digitalRead(pinNumber);\n    if (reading != lastState) {\n      lastDebounceTime = millis();\n      lastState = reading;\n    } \n  } \n  while ((millis() - lastDebounceTime) < debounceDelay);\n  //  lastDebounceTime = millis();\n  return reading;\n}", "concepts": ["digital read", "debounce", "interrupts", "conditionals"], "parsing_result": [{"instruction": "Create a Python function `readButton` that returns True if a button is pressed and False otherwise. Simulate a button press by pressing a digital input pin during a brief moment."}, {"instruction": "Write a Python function `digitalRead` that reads a digital input pin."}, {"instruction": "Create a Python function `debounce` that takes a digital input pin number as an argument and returns a boolean value indicating whether that pin is currently connected to a voltage greater than 5V."}, {"instruction": "Write a Python function `debounce` that returns True if and only if a digital input has been unchanged for a given number of milliseconds."}, {"instruction": "Create a Python function that returns whether a digital read from a pin is high or low. This function should be able to handle a bouncing input."}, {"instruction": "Write a Python function `sensorBlink` that blinks an LED connected to a digital read using interrupts."}, {"instruction": "Write a Python function `monitorTemp` that monitors the temperature of a heating element."}, {"instruction": "Implement a Python function `blink` that blinks an LED using a digital input pin."}, {"instruction": "Create a Python function `pressButton` that returns True if a button is pressed."}, {"instruction": "Write a Python function `led` that outputs a signal to a connected LED."}, {"instruction": "Write a Python function `isOn` that checks if a digital input is on using the digital read and debounce methods."}, {"instruction": "Write a Python function `pin` that reads a digital pin (input) and returns True if the pin is high, False if the pin is low."}, {"instruction": "Write a Python function `read_digital_pin` that reads the value of a digital pin on a Raspberry Pi."}, {"instruction": "Write a Python function `findDrivingStatus` that utilizes the digital read and debounce functions to determine whether the car is moving or stationary."}, {"instruction": "Create a Python function `read_gpio_input` that reads the value of a digital pin and returns the state of the input.\n#include <iostream>\n#include <vector>\n\nint maxOfTwo(int a, int b){\n    return a > b ? a : b;\n}\n\nint main(){\n    std::cout << maxOfTwo(5, 6) << std::endl;\n}#include <iostream>\n#include <vector>\n\nint sumVector(std::vector<int> v){\n    int sum = 0;\n    for (int e : v){\n        sum += e;\n    }\n    return sum;\n}\n\nint main(){\n    std::vector<int> v{1, 2, 3, 4, 5};\n    std::cout << sumVector(v) << std::endl;\n}ndl;\n}#include <iostream>\n\nvoid swap(int& a, int& b){\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main(){\n    int a = 5, b = 6;\n    std::cout << \"a: \" << a << \"\\nb: \" << b << std::endl;\n    swap(a, b);\n    std::cout << \"a: \" << a << \"\\nb: \" << b << std::e"}, {"instruction": "Create a Python function `debounce` that filters a digital input based on a sampling rate and a threshold. Input and output should be representations of a digital input and output, respectively."}, {"instruction": "Write a digital read function that returns a value and debounces it to avoid spurious outputs."}, {"instruction": "Write a Python function `countCardSwipes` that collects data from a swiping card reader and counts the number of individual card swipes.\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n    vector<int> v = {1,2,3};\n    int sum = 0;\n    for (int i = 0; i < v.size(); ++i)\n    {\n        sum += v[i];\n    }\n    cout << sum << endl;\n    return 0;\n}#include <iostream>\n\nusing namespace std;\n\nbool isPrime(int n)\n{\n    if (n <= 1)\n        return false;\n    if (n == 2)\n        return true;\n    for (int i = 2; i < n; ++i)\n    {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint main()\n{\n    cout << isPrime(2) << endl;\n    return 0;\n}#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> findCommon(vector<int> a, vector<int> b)\n{\n    vector<int> intersection;\n    for (int i = 0; i < b.size(); ++i)\n    {\n        for (int j = 0; j < a.size(); ++j)\n        {\n            if (a[j] == b[i])\n                intersection.push_back(a[j]);\n        }\n    }\n    return intersection;\n}\n\nint main()\n{\n    vector<int> a = {1, 2, 3, 4, 5};\n    vector<int> b = {4, 5, 6};\n    vector<int> c = findCommon(a, b);\n    for (int i = 0; i < c.size(); ++i)\n        cout << c[i] << endl;\n    return 0;\n}#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> charFrequency(string s)\n{\n    vector<int> counts(26, 0);\n    for (int i = 0; i < s.size(); ++i)\n    {\n        char c = s[i];\n        if (isalpha(c))\n        {\n            int index = tolower(c) - 'a';\n            counts[index]++;\n        }\n    }\n    return counts;\n}\n\nint main()\n{\n    vector<int> counts = charFrequency(\"Hello world\");\n    for (int i = 0; i < counts.size(); ++i)\n    {\n        char c = i + 'a';\n        cout << c << \": \" << counts[i] << endl;\n    }\n    return 0;\n}#include <iostream>\n\nusing namespace std;\n\nint maxOfTwo(int a, int b)\n{\n    return (a > b) ? a : b;\n}\n\nint main()\n{\n    cout << maxOfTwo(2, 3) << endl;\n    return 0;\n}#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n    vector<int> v = {1,2,3,4,5};\n    int sum = 0;\n    for (auto i = v.begin(); i != v.end(); ++i)\n    {\n        sum += *i;\n    }\n    cout << sum << endl;\n    return 0;\n}#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nbool isPrime(int n)\n{\n    for (int i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint main()\n{\n    cout << isPrime(2) << endl;\n    return 0;\n}#include <iostream>\n\nusing namespace std;\n\nvoid swap(int &a, int &b)\n{\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main()\n{\n    int a = 1;\n    int b = 2;\n    swap(a, b);\n    cout << a << \" \" << b << endl;\n    return 0;\n}#include <iostream>\n\nusing namespace std;\n\nint fibonacci(int n)\n{\n    if (n == 0)\n        return 0;\n    else if (n == 1)\n        return 1;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main()\n{\n    cout << fibonacci(5) << endl;\n    return 0;\n}#include <iostream>\n\nusing namespace std;\n\nint countCardSwipes(int a)\n{\n    int count = 0;\n    while (a != 0)\n    {\n        a = a & (a - 1);\n        count++;\n    }\n    return count;\n}\n\nint main()\n{\n    cout << countCardSwipes(6) << endl;\n    return 0;\n}"}, {"instruction": "Write a Python function to run a digital read on a pin and return a boolean."}, {"instruction": "Write a function `read` that returns the number of times a digital input is pressed."}, {"instruction": "Create a Python function `readTemp` that returns the system temperature in degrees Celsius."}, {"instruction": "Write a Python function that checks if a digital pin on an Arduino is being read by another Arduino over I2C."}, {"instruction": "Write a Python function `read_sensor` that detects a change in a digital sensor."}, {"instruction": "Write a Python function `countInterrupts` that returns the number of interrupts that a given digital input pin experiences."}, {"instruction": "Create a Python function that returns the number of times the switch is pressed in a 10 second period."}, {"instruction": "Write a Python function `readTemp` that reads and returns the temperature from an analog temperature sensor (e.g., TMP36)."}, {"instruction": "Write a Python function `readDigital` that reads a digital input and returns true if it is high, false otherwise."}, {"instruction": "Create a Python function `readButton` that returns `True` if the button is pressed and `False` otherwise."}, {"instruction": "Implement a program that allows a user to control the speed of a DC motor using a button on an Arduino board."}, {"instruction": "Using a Raspberry Pi and a breadboard, create a Python script `blink` that uses an LED connected to a GPIO pin to blink the LED on and off."}, {"instruction": "Write a Python function `digitalRead` that reads a digital input from a digital pin."}, {"instruction": "Create a Python function `readPotentiometer` that returns a voltage between 0 and 5 V from a digital potentiometer."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: command-line parsing, single-file header/implementation, global function\n\n### Task", "fingerprint": null, "content": {"code": "int main(int argc, char* argv[]) {\n\tif (argc <= 1) {\n\t\treturn 0;\n\t}\n\n\tcxxopts::Options options(\"Model Converter\", \"Converts model format with Assimp\");\n\toptions.add_options()\n\t\t//General\n\t\t(\"i,inputFilepath\", \"Input filepath\", cxxopts::value<std::string>())\n\t\t(\"o,outputFilepath\", \"Output filepath (must contain extension)\", cxxopts::value<std::string>())\n\t\t(\"h,help\", \"Displays help\")\n\t\t(\"v,version\", \"Displays version\")\n\t\t//Assimp options\n\t\t(\"aiProcess_CalcTangentSpace\", \"Calculates the tangents and bitangents for the imported meshes\")\n\t\t(\"aiProcess_JoinIdenticalVertices\", \"Identifies and joins identical vertex data sets within all imported meshes\")\n\t\t(\"aiProcess_MakeLeftHanded\", \"Converts all the imported data to a left-handed coordinate space\")\n\t\t(\"aiProcess_Triangulate\", \"Triangulates all faces of all meshes\")\n\t\t(\"aiProcess_RemoveComponent\", \"Removes some parts of the data structure (animations, materials, light sources, cameras, textures, vertex components)\")\n\t\t(\"aiProcess_GenNormals\", \"Generates normals for all faces of all meshes\")\n\t\t(\"aiProcess_GenSmoothNormals\", \"Generates smooth normals for all vertices in the mesh\")\n\t\t(\"aiProcess_SplitLargeMeshes\", \"Splits large meshes into smaller sub-meshes\")\n\t\t(\"aiProcess_PreTransformVertices\", \"Removes the node graph and pre-transforms all vertices with the local transformation matrices of their nodes\")\n\t\t(\"aiProcess_LimitBoneWeights\", \"Limits the number of bones simultaneously affecting a single vertex to a maximum value\")\n\t\t(\"aiProcess_ValidateDataStructure\", \"Validates the imported scene data structure\")\n\t\t(\"aiProcess_ImproveCacheLocality\", \"Reorders triangles for better vertex cache locality\")\n\t\t(\"aiProcess_RemoveRedundantMaterials\", \"Searches for redundant/unreferenced materials and removes them\")\n\t\t(\"aiProcess_FixInfacingNormals\", \"This step tries to determine which meshes have normal vectors that are facing inwards and inverts them\")\n\t\t(\"aiProcess_SortByPType\", \"This step splits meshes with more than one primitive type in homogeneous sub-meshes\")\n\t\t(\"aiProcess_FindDegenerates\", \"This step searches all meshes for degenerate primitives and converts them to proper lines or points\")\n\t\t(\"aiProcess_FindInvalidData\", \"This step searches all meshes for invalid data, such as zeroed normal vectors or invalid UV coords and removes/fixes them\")\n\t\t(\"aiProcess_GenUVCoords\", \"This step converts non-UV mappings (such as spherical or cylindrical mapping) to proper texture coordinate channels\")\n\t\t(\"aiProcess_TransformUVCoords\", \"This step applies per-texture UV transformations and bakes them into stand-alone vtexture coordinate channels\")\n\t\t(\"aiProcess_FindInstances\", \"This step searches for duplicate meshes and replaces them with references to the first mesh\")\n\t\t(\"aiProcess_OptimizeMeshes\", \"A postprocessing step to reduce the number of meshes\")\n\t\t(\"aiProcess_OptimizeGraph\", \"A postprocessing step to optimize the scene hierarchy\")\n\t\t(\"aiProcess_FlipUVs\", \"This step flips all UV coordinates along the y-axis and adjusts material settings and bitangents accordingly\")\n\t\t(\"aiProcess_FlipWindingOrder\", \"This step adjusts the output face winding order to be CW\")\n\t\t(\"aiProcess_SplitByBoneCount\", \"This step splits meshes with many bones into sub-meshes so that each su-bmesh has fewer or as many bones as a given limit\")\n\t\t(\"aiProcess_Debone\", \"This step removes bones losslessly or according to some threshold\")\n\t\t//Assimp macros\n\t\t(\"aiProcessPreset_TargetRealtime_Fast\", \"\")\n\t\t(\"aiProcessPreset_TargetRealtime_MaxQuality\", \"\")\n\t\t(\"aiProcessPreset_TargetRealtime_Quality\", \"\")\n\t\t;\n\tauto result = options.parse(argc, argv);\n\n\tif (result.count(\"help\") != 0) {\n\t\tstd::cout << options.help() << std::endl;\n\t\treturn 0;\n\t}\n\tif (result.count(\"version\") != 0) {\n\t\t//Version of Model Converter\n\t\tstd::cout << VERSION_STR << std::endl;\n\t\tstd::cout << std::endl;\n\t\t//Version of Assimp\n\t\tstd::cout << \"Assimp v\" << aiGetVersionMajor() << \".\" << aiGetVersionMinor() << \".\" << aiGetVersionRevision() << std::endl;\n\t\tstd::cout << std::endl;\n\t\t//Legal string of Assimp\n\t\tstd::cout << aiGetLegalString() << std::endl;\n\n\t\treturn 0;\n\t}\n\n\tif (result.count(\"inputFilepath\") == 0) {\n\t\tstd::cerr << \"Error: You must specify input filepath\" << std::endl;\n\t\treturn -1;\n\t}\n\tif (result.count(\"outputFilepath\") == 0) {\n\t\tstd::cerr << \"Error: You must specify output filepath\" << std::endl;\n\t\treturn -1;\n\t}\n\n\tauto inputFilepath = result[\"inputFilepath\"].as<std::string>();\n\tauto outputFilepath = result[\"outputFilepath\"].as<std::string>();\n\n\tunsigned int readFileOptions = 0;\n\t//Assimp options\n\tif (result.count(\"aiProcess_CalcTangentSpace\") != 0) {\n\t\treadFileOptions |= aiProcess_CalcTangentSpace;\n\t}\n\tif (result.count(\"aiProcess_JoinIdenticalVertices\") != 0) {\n\t\treadFileOptions |= aiProcess_JoinIdenticalVertices;\n\t}\n\tif (result.count(\"aiProcess_MakeLeftHanded\") != 0) {\n\t\treadFileOptions |= aiProcess_MakeLeftHanded;\n\t}\n\tif (result.count(\"aiProcess_Triangulate\") != 0) {\n\t\treadFileOptions |= aiProcess_Triangulate;\n\t}\n\tif (result.count(\"aiProcess_RemoveComponent\") != 0) {\n\t\treadFileOptions |= aiProcess_RemoveComponent;\n\t}\n\tif (result.count(\"aiProcess_GenNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_GenNormals;\n\t}\n\tif (result.count(\"aiProcess_GenSmoothNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_GenSmoothNormals;\n\t}\n\tif (result.count(\"aiProcess_SplitLargeMeshes\") != 0) {\n\t\treadFileOptions |= aiProcess_SplitLargeMeshes;\n\t}\n\tif (result.count(\"aiProcess_PreTransformVertices\") != 0) {\n\t\treadFileOptions |= aiProcess_PreTransformVertices;\n\t}\n\tif (result.count(\"aiProcess_LimitBoneWeights\") != 0) {\n\t\treadFileOptions |= aiProcess_LimitBoneWeights;\n\t}\n\tif (result.count(\"aiProcess_ValidateDataStructure\") != 0) {\n\t\treadFileOptions |= aiProcess_ValidateDataStructure;\n\t}\n\tif (result.count(\"aiProcess_ImproveCacheLocality\") != 0) {\n\t\treadFileOptions |= aiProcess_ImproveCacheLocality;\n\t}\n\tif (result.count(\"aiProcess_RemoveRedundantMaterials\") != 0) {\n\t\treadFileOptions |= aiProcess_RemoveRedundantMaterials;\n\t}\n\tif (result.count(\"aiProcess_FixInfacingNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_FixInfacingNormals;\n\t}\n\tif (result.count(\"aiProcess_SortByPType\") != 0) {\n\t\treadFileOptions |= aiProcess_SortByPType;\n\t}\n\tif (result.count(\"aiProcess_FindDegenerates\") != 0) {\n\t\treadFileOptions |= aiProcess_FindDegenerates;\n\t}\n\tif (result.count(\"aiProcess_FindInvalidData\") != 0) {\n\t\treadFileOptions |= aiProcess_FindInvalidData;\n\t}\n\tif (result.count(\"aiProcess_GenUVCoords\") != 0) {\n\t\treadFileOptions |= aiProcess_GenUVCoords;\n\t}\n\tif (result.count(\"aiProcess_TransformUVCoords\") != 0) {\n\t\treadFileOptions |= aiProcess_TransformUVCoords;\n\t}\n\tif (result.count(\"aiProcess_FindInstances\") != 0) {\n\t\treadFileOptions |= aiProcess_FindInstances;\n\t}\n\tif (result.count(\"aiProcess_OptimizeMeshes\") != 0) {\n\t\treadFileOptions |= aiProcess_OptimizeMeshes;\n\t}\n\tif (result.count(\"aiProcess_OptimizeGraph\") != 0) {\n\t\treadFileOptions |= aiProcess_OptimizeGraph;\n\t}\n\tif (result.count(\"aiProcess_FlipUVs\") != 0) {\n\t\treadFileOptions |= aiProcess_FlipUVs;\n\t}\n\tif (result.count(\"aiProcess_FlipWindingOrder\") != 0) {\n\t\treadFileOptions |= aiProcess_FlipWindingOrder;\n\t}\n\tif (result.count(\"aiProcess_SplitByBoneCount\") != 0) {\n\t\treadFileOptions |= aiProcess_SplitByBoneCount;\n\t}\n\tif (result.count(\"aiProcess_Debone\") != 0) {\n\t\treadFileOptions |= aiProcess_Debone;\n\t}\n\t//Assimp macros\n\tif (result.count(\"aiProcessPreset_TargetRealtime_Fast\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_Fast;\n\t}\n\tif (result.count(\"aiProcessPreset_TargetRealtime_MaxQuality\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_MaxQuality;\n\t}\n\tif (result.count(\"aiProcessPreset_TargetRealtime_Quality\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_Quality;\n\t}\n\n\t//Set aiProcessPreset_TargetRealtime_Quality as a default option if no options are set\n\tif (readFileOptions == 0) {\n\t\treadFileOptions = aiProcessPreset_TargetRealtime_Quality;\n\t}\n\n\tConvertModelFormat(inputFilepath, outputFilepath, readFileOptions);\n\n\treturn 0;\n}", "docstring": "//Get the file extension and determine the output format", "function_name": "ConvertModelFormat"}, "id": 301, "seed": "int main(int argc, char* argv[]) {\n\tif (argc <= 1) {\n\t\treturn 0;\n\t}\n\n\tcxxopts::Options options(\"Model Converter\", \"Converts model format with Assimp\");\n\toptions.add_options()\n\t\t//General\n\t\t(\"i,inputFilepath\", \"Input filepath\", cxxopts::value<std::string>())\n\t\t(\"o,outputFilepath\", \"Output filepath (must contain extension)\", cxxopts::value<std::string>())\n\t\t(\"h,help\", \"Displays help\")\n\t\t(\"v,version\", \"Displays version\")\n\t\t//Assimp options\n\t\t(\"aiProcess_CalcTangentSpace\", \"Calculates the tangents and bitangents for the imported meshes\")\n\t\t(\"aiProcess_JoinIdenticalVertices\", \"Identifies and joins identical vertex data sets within all imported meshes\")\n\t\t(\"aiProcess_MakeLeftHanded\", \"Converts all the imported data to a left-handed coordinate space\")\n\t\t(\"aiProcess_Triangulate\", \"Triangulates all faces of all meshes\")\n\t\t(\"aiProcess_RemoveComponent\", \"Removes some parts of the data structure (animations, materials, light sources, cameras, textures, vertex components)\")\n\t\t(\"aiProcess_GenNormals\", \"Generates normals for all faces of all meshes\")\n\t\t(\"aiProcess_GenSmoothNormals\", \"Generates smooth normals for all vertices in the mesh\")\n\t\t(\"aiProcess_SplitLargeMeshes\", \"Splits large meshes into smaller sub-meshes\")\n\t\t(\"aiProcess_PreTransformVertices\", \"Removes the node graph and pre-transforms all vertices with the local transformation matrices of their nodes\")\n\t\t(\"aiProcess_LimitBoneWeights\", \"Limits the number of bones simultaneously affecting a single vertex to a maximum value\")\n\t\t(\"aiProcess_ValidateDataStructure\", \"Validates the imported scene data structure\")\n\t\t(\"aiProcess_ImproveCacheLocality\", \"Reorders triangles for better vertex cache locality\")\n\t\t(\"aiProcess_RemoveRedundantMaterials\", \"Searches for redundant/unreferenced materials and removes them\")\n\t\t(\"aiProcess_FixInfacingNormals\", \"This step tries to determine which meshes have normal vectors that are facing inwards and inverts them\")\n\t\t(\"aiProcess_SortByPType\", \"This step splits meshes with more than one primitive type in homogeneous sub-meshes\")\n\t\t(\"aiProcess_FindDegenerates\", \"This step searches all meshes for degenerate primitives and converts them to proper lines or points\")\n\t\t(\"aiProcess_FindInvalidData\", \"This step searches all meshes for invalid data, such as zeroed normal vectors or invalid UV coords and removes/fixes them\")\n\t\t(\"aiProcess_GenUVCoords\", \"This step converts non-UV mappings (such as spherical or cylindrical mapping) to proper texture coordinate channels\")\n\t\t(\"aiProcess_TransformUVCoords\", \"This step applies per-texture UV transformations and bakes them into stand-alone vtexture coordinate channels\")\n\t\t(\"aiProcess_FindInstances\", \"This step searches for duplicate meshes and replaces them with references to the first mesh\")\n\t\t(\"aiProcess_OptimizeMeshes\", \"A postprocessing step to reduce the number of meshes\")\n\t\t(\"aiProcess_OptimizeGraph\", \"A postprocessing step to optimize the scene hierarchy\")\n\t\t(\"aiProcess_FlipUVs\", \"This step flips all UV coordinates along the y-axis and adjusts material settings and bitangents accordingly\")\n\t\t(\"aiProcess_FlipWindingOrder\", \"This step adjusts the output face winding order to be CW\")\n\t\t(\"aiProcess_SplitByBoneCount\", \"This step splits meshes with many bones into sub-meshes so that each su-bmesh has fewer or as many bones as a given limit\")\n\t\t(\"aiProcess_Debone\", \"This step removes bones losslessly or according to some threshold\")\n\t\t//Assimp macros\n\t\t(\"aiProcessPreset_TargetRealtime_Fast\", \"\")\n\t\t(\"aiProcessPreset_TargetRealtime_MaxQuality\", \"\")\n\t\t(\"aiProcessPreset_TargetRealtime_Quality\", \"\")\n\t\t;\n\tauto result = options.parse(argc, argv);\n\n\tif (result.count(\"help\") != 0) {\n\t\tstd::cout << options.help() << std::endl;\n\t\treturn 0;\n\t}\n\tif (result.count(\"version\") != 0) {\n\t\t//Version of Model Converter\n\t\tstd::cout << VERSION_STR << std::endl;\n\t\tstd::cout << std::endl;\n\t\t//Version of Assimp\n\t\tstd::cout << \"Assimp v\" << aiGetVersionMajor() << \".\" << aiGetVersionMinor() << \".\" << aiGetVersionRevision() << std::endl;\n\t\tstd::cout << std::endl;\n\t\t//Legal string of Assimp\n\t\tstd::cout << aiGetLegalString() << std::endl;\n\n\t\treturn 0;\n\t}\n\n\tif (result.count(\"inputFilepath\") == 0) {\n\t\tstd::cerr << \"Error: You must specify input filepath\" << std::endl;\n\t\treturn -1;\n\t}\n\tif (result.count(\"outputFilepath\") == 0) {\n\t\tstd::cerr << \"Error: You must specify output filepath\" << std::endl;\n\t\treturn -1;\n\t}\n\n\tauto inputFilepath = result[\"inputFilepath\"].as<std::string>();\n\tauto outputFilepath = result[\"outputFilepath\"].as<std::string>();\n\n\tunsigned int readFileOptions = 0;\n\t//Assimp options\n\tif (result.count(\"aiProcess_CalcTangentSpace\") != 0) {\n\t\treadFileOptions |= aiProcess_CalcTangentSpace;\n\t}\n\tif (result.count(\"aiProcess_JoinIdenticalVertices\") != 0) {\n\t\treadFileOptions |= aiProcess_JoinIdenticalVertices;\n\t}\n\tif (result.count(\"aiProcess_MakeLeftHanded\") != 0) {\n\t\treadFileOptions |= aiProcess_MakeLeftHanded;\n\t}\n\tif (result.count(\"aiProcess_Triangulate\") != 0) {\n\t\treadFileOptions |= aiProcess_Triangulate;\n\t}\n\tif (result.count(\"aiProcess_RemoveComponent\") != 0) {\n\t\treadFileOptions |= aiProcess_RemoveComponent;\n\t}\n\tif (result.count(\"aiProcess_GenNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_GenNormals;\n\t}\n\tif (result.count(\"aiProcess_GenSmoothNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_GenSmoothNormals;\n\t}\n\tif (result.count(\"aiProcess_SplitLargeMeshes\") != 0) {\n\t\treadFileOptions |= aiProcess_SplitLargeMeshes;\n\t}\n\tif (result.count(\"aiProcess_PreTransformVertices\") != 0) {\n\t\treadFileOptions |= aiProcess_PreTransformVertices;\n\t}\n\tif (result.count(\"aiProcess_LimitBoneWeights\") != 0) {\n\t\treadFileOptions |= aiProcess_LimitBoneWeights;\n\t}\n\tif (result.count(\"aiProcess_ValidateDataStructure\") != 0) {\n\t\treadFileOptions |= aiProcess_ValidateDataStructure;\n\t}\n\tif (result.count(\"aiProcess_ImproveCacheLocality\") != 0) {\n\t\treadFileOptions |= aiProcess_ImproveCacheLocality;\n\t}\n\tif (result.count(\"aiProcess_RemoveRedundantMaterials\") != 0) {\n\t\treadFileOptions |= aiProcess_RemoveRedundantMaterials;\n\t}\n\tif (result.count(\"aiProcess_FixInfacingNormals\") != 0) {\n\t\treadFileOptions |= aiProcess_FixInfacingNormals;\n\t}\n\tif (result.count(\"aiProcess_SortByPType\") != 0) {\n\t\treadFileOptions |= aiProcess_SortByPType;\n\t}\n\tif (result.count(\"aiProcess_FindDegenerates\") != 0) {\n\t\treadFileOptions |= aiProcess_FindDegenerates;\n\t}\n\tif (result.count(\"aiProcess_FindInvalidData\") != 0) {\n\t\treadFileOptions |= aiProcess_FindInvalidData;\n\t}\n\tif (result.count(\"aiProcess_GenUVCoords\") != 0) {\n\t\treadFileOptions |= aiProcess_GenUVCoords;\n\t}\n\tif (result.count(\"aiProcess_TransformUVCoords\") != 0) {\n\t\treadFileOptions |= aiProcess_TransformUVCoords;\n\t}\n\tif (result.count(\"aiProcess_FindInstances\") != 0) {\n\t\treadFileOptions |= aiProcess_FindInstances;\n\t}\n\tif (result.count(\"aiProcess_OptimizeMeshes\") != 0) {\n\t\treadFileOptions |= aiProcess_OptimizeMeshes;\n\t}\n\tif (result.count(\"aiProcess_OptimizeGraph\") != 0) {\n\t\treadFileOptions |= aiProcess_OptimizeGraph;\n\t}\n\tif (result.count(\"aiProcess_FlipUVs\") != 0) {\n\t\treadFileOptions |= aiProcess_FlipUVs;\n\t}\n\tif (result.count(\"aiProcess_FlipWindingOrder\") != 0) {\n\t\treadFileOptions |= aiProcess_FlipWindingOrder;\n\t}\n\tif (result.count(\"aiProcess_SplitByBoneCount\") != 0) {\n\t\treadFileOptions |= aiProcess_SplitByBoneCount;\n\t}\n\tif (result.count(\"aiProcess_Debone\") != 0) {\n\t\treadFileOptions |= aiProcess_Debone;\n\t}\n\t//Assimp macros\n\tif (result.count(\"aiProcessPreset_TargetRealtime_Fast\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_Fast;\n\t}\n\tif (result.count(\"aiProcessPreset_TargetRealtime_MaxQuality\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_MaxQuality;\n\t}\n\tif (result.count(\"aiProcessPreset_TargetRealtime_Quality\") != 0) {\n\t\treadFileOptions |= aiProcessPreset_TargetRealtime_Quality;\n\t}\n\n\t//Set aiProcessPreset_TargetRealtime_Quality as a default option if no options are set\n\tif (readFileOptions == 0) {\n\t\treadFileOptions = aiProcessPreset_TargetRealtime_Quality;\n\t}\n\n\tConvertModelFormat(inputFilepath, outputFilepath, readFileOptions);\n\n\treturn 0;\n}", "concepts": ["command-line parsing", "single-file header/implementation", "global function"], "parsing_result": [{"instruction": "Write a Python class `BlogPost` that is initialized with a title, author, and date published, and has a method `publish` that prints the title, author, and date published."}, {"instruction": "Write a Python class to compute the longest common subsequence between two sequences of characters."}, {"instruction": "Implement a Python class that parses command-line arguments and prints the value of `args.name` to the screen."}, {"instruction": "Create a Python class `PasswordManager` that stores passwords from a `dict` with usernames as keys and passwords as values. The class should have the following functions:\n\n- `save_password(username, password)` - adds a password to the dict\n- `get_password(username)` - returns the password from the dict\n- `delete_password(username)` - deletes the password from the dict"}, {"instruction": "Write a Python class that implements a command-line application that takes two positive integers as command-line arguments and prints the sum of the numbers."}, {"instruction": "Write a Python class `Primes` that implements a function `isPrime`, which checks if a given number is prime."}, {"instruction": "Write a Python class `Person` which takes a name and an age as input, and has two methods:\n- `getName` returns the name\n- `getAge` returns the age"}, {"instruction": "Write a Python class `TaxCalculator` that takes a dictionary of tax rates as input, and returns a function `calculate` that calculates the total tax owed given an input dictionary of items and prices."}, {"instruction": "Write a Python class for a simple calculator program."}, {"instruction": "Write a Python class `FileIO` that reads from a file and writes to a file. The class must provide the following functions:\n\n- `read_file`: takes a file name as an input and returns the contents of the file as a single string\n- `write_file`: takes a filename and a string as inputs and writes the given string to the given file"}, {"instruction": "Write a Python class that implements a stack with push, pop, and peek functions (the functions do not return a value)."}, {"instruction": "Create a Python class `Calculator` with a `calculate` method that takes a string argument, and returns the result of evaluating the string as an arithmetic expression."}, {"instruction": "Write a Python implementation of the `Calculator` class from the \"Calculator\" example in the \"Designing Classes\" section."}, {"instruction": "Create a Python class `Person` with a constructor that takes a name and age as parameters."}, {"instruction": "Write a Python class `Line` that represents a line in a 2D plane. It should support basic mathematical operations, such as addition and subtraction."}, {"instruction": "Create a Python class `Parser` that can be used to parse a command-line argument using a simple syntax. In particular:\n- the syntax is of the form `-flag value` or `--flag value`\n- the value is required and must not start with `-` or `--`\n- the value must be separated by a space from the flag"}, {"instruction": "Write a Python class called `Counter` that can count the number of vowels in a given string."}, {"instruction": "Write a Python class that takes in a file path and a word, and returns the number of occurrences of that word in the file."}, {"instruction": "Write a Python class `PrimeFinder` that takes a range and returns a list of prime numbers."}, {"instruction": "Create a Python class `ArgumentParser` that takes in command-line arguments and returns well-structured data objects."}, {"instruction": "Create a Python class `Song` that implements the following functionality:\n- A constructor that accepts 2 parameters: `title` and `artist`\n- A function `info` that returns the string `title by artist`\n- A function `sing` that prints the string `La La La`."}, {"instruction": "Write a Python class `Maximum` that implements a maximum stack. The class should have the following methods:\n\n- `push`: pushes an integer to the stack\n- `pop`: pops the maximum from the stack\n- `top`: returns the top element of the stack\n- `empty`: returns whether the stack is empty"}, {"instruction": "Write a Python program that reads in a tab-delimited file, prints out the number of lines, and outputs a new file with the first column renamed to 'seq'."}, {"instruction": "Write a Python class `CommandLine` that parses a command-line string and returns a dictionary of options and arguments."}, {"instruction": "Implement a class `CommandLine` that parses a command line argument string and stores the contents in an object."}, {"instruction": "Implement a Python class `File` which has the following member functions:\n- `open(filename)` opens the named file in read-only mode\n- `read(n)` reads up to `n` characters from the file into a string\n- `close()` closes the file, freeing any resources allocated for the file\n\nThe `open` and `close` functions should be called at most once for the lifetime of the object."}, {"instruction": "Write a Python class `Person` that represents a person and has the following methods:\n\n```python\ngetName()\n```\n\nand\n\n```python\ngreet(self, other_name)\n```"}, {"instruction": "Write a Python class `Fibonacci` that implements an iterator for iterating through the Fibonacci series."}, {"instruction": "Write a Python class `Operation` that takes two integer arguments and can perform addition, subtraction, multiplication, division, or remainder operations."}, {"instruction": "Write a Python class `FileProcessor` that contains a method `countWords` that takes a text file name as input and returns the number of words in the file."}, {"instruction": "Write a Python class `Config` that takes in command-line arguments to create a configuration object that exposes three methods: `read_file`, `write_file`, and `read_args`."}, {"instruction": "Write a Python class `WordCounter` that accepts a string and returns the number of words in that string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: structure, function pointer, pointer arithmetic, loop in function declaration\n\n### Task", "fingerprint": null, "content": {"code": "int main()\n{\n    struct Sparse s1,s2,*s3;\n    cout <<\"Creating the Matrix1\\n\";\n    Create(&s1);\n    cout <<\"Creating the Matrix2\\n\";\n    Create(&s2);\n    s3 = add(&s1, &s2);\n    cout <<\"Displaying the First Matrix\\n\";\n    Display(s1);\n    cout <<\"\\nDisplaying the Second Matrix\\n\";\n    Display(s2);\n    cout <<\"\\nDisplaying the Sum of the Matrix1 and Matrix2\\n\";\n    Display(*s3);// As this was a pointer so derefrencing it.\n    return 0;\n}", "docstring": "// Array of type element and size num.", "function_name": "Create"}, "id": 305, "seed": "int main()\n{\n    struct Sparse s1,s2,*s3;\n    cout <<\"Creating the Matrix1\\n\";\n    Create(&s1);\n    cout <<\"Creating the Matrix2\\n\";\n    Create(&s2);\n    s3 = add(&s1, &s2);\n    cout <<\"Displaying the First Matrix\\n\";\n    Display(s1);\n    cout <<\"\\nDisplaying the Second Matrix\\n\";\n    Display(s2);\n    cout <<\"\\nDisplaying the Sum of the Matrix1 and Matrix2\\n\";\n    Display(*s3);// As this was a pointer so derefrencing it.\n    return 0;\n}", "concepts": ["structure", "function pointer", "pointer arithmetic", "loop in function declaration"], "parsing_result": [{"instruction": "Write a Python function `sumOfCubes` that computes the sum of the cubes of a list of integers."}, {"instruction": "Write a function that converts a string to a list of integers."}, {"instruction": "Write a Python function `printMatrix` that prints the contents of a 2D matrix."}, {"instruction": "Write a Python function `sum_of_series` that computes the sum of the following series:\n\n![Series](series.png)"}, {"instruction": "Write a function `generate_table` that takes two lists as arguments. The first list contains an ordered list of strings; the second list is a list of integers. The function should return a dictionary where the keys are strings from the first list and the values are the corresponding integers in the second list."}, {"instruction": "Write a Python function `line` that will compute the x, y, and z coordinates of a line in 3D space."}, {"instruction": "Write a Python function `add` that can be passed a function pointer to a function that adds two integers, and returns the sum."}, {"instruction": "Write a Python function `factorial` that returns the factorial of a non-negative integer."}, {"instruction": "Write a function that prints all permutations of a string."}, {"instruction": "Write a Python function `countOccurrences` that returns the total number of occurrences of a given character in a string."}, {"instruction": "Write a Python function `sumOfSquares` that takes a list of integers and returns the sum of the squares of all the integers."}, {"instruction": "Write a Python function `my_max` that returns the largest element in a list."}, {"instruction": "Write a Python function `countWords`, which takes in a file name and a word, and returns the number of times the word appears in the file."}, {"instruction": "Write a Python function `isLeapYear` that returns True for a given year if it is a leap year."}, {"instruction": "Create a function that finds the maximum value of a given function in a given range."}, {"instruction": "Write a Python function `get_next_prime` that returns the smallest prime number greater than the specified integer."}, {"instruction": "Implement a Python function `is_sorted` that returns `True` if a list of numbers is sorted in ascending order, and `False` otherwise."}, {"instruction": "Write a Python function `combine` that combines two arrays of strings into a new array."}, {"instruction": "Write a Python function `array_diff` that takes two arrays and returns an array containing the elements from the first array that are not present in the second array."}, {"instruction": "Write a function that computes the Fibonacci sequence up to the nth term."}, {"instruction": "Write a Python function `merge` that merges two sorted lists into a new sorted list."}, {"instruction": "Write a Python function `shiftLeft` that returns a copy of a list that has been shifted one position to the left."}, {"instruction": "Write a Python function `fibonacci(n)` that returns a list of the first `n` Fibonacci numbers."}, {"instruction": "Write a Python function `reverseList` that reverses a singly linked list in place."}, {"instruction": "Write a Python function `my_range` that returns an iterator over an integer sequence."}, {"instruction": "Write a Python function `removeDupes` that returns a list of integers with duplicates removed."}, {"instruction": "Write a Python function that implements an insertion sort."}, {"instruction": "Write a Python function `sumOf` that computes the sum of the numbers in a list."}, {"instruction": "Write a Python function `swap` that swaps two integers."}, {"instruction": "Write a Python function `swap` that swaps the values of two integer variables."}, {"instruction": "Write a Python function `map` that implements a map function with a custom function as a parameter."}, {"instruction": "Write a Python function `find_longest_palindrome`, which finds the longest palindromic substring in the given string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: SOAP instantiation, type definition, pointer declaration\n\n### Task", "fingerprint": null, "content": {"code": "soap_instantiate_ns3__FECAEARequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FECAEARequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tns3__FECAEARequest *p;\n\tsize_t k = sizeof(ns3__FECAEARequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FECAEARequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FECAEARequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FECAEARequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FECAEARequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_in_ns3__FECAEARequest"}, "id": 321, "seed": "soap_instantiate_ns3__FECAEARequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FECAEARequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tns3__FECAEARequest *p;\n\tsize_t k = sizeof(ns3__FECAEARequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FECAEARequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FECAEARequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FECAEARequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FECAEARequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "concepts": ["SOAP instantiation", "type definition", "pointer declaration"], "parsing_result": [{"instruction": "Write a Python function `is_prime` that takes an integer and returns true if it is prime."}, {"instruction": "Create a Python function `soapify` that takes in a string and returns a SOAP string."}, {"instruction": "Write a Python function `soapify` that takes a SOAP service definition and returns an equivalent WSDL document."}, {"instruction": "Create a Python function `soap` that returns an object with a SOAP API."}, {"instruction": "Write a Python function `fibonacci` that calculates the first *n* terms of the Fibonacci sequence, and returns them as a list."}, {"instruction": "Write a Python function `soapify` that takes a SOAP1.1 WSDL file and returns a Python class definition that implements the SOAP services defined in the WSDL."}, {"instruction": "Create a Python function `soapify` that takes a SOAP web service and converts it to a RESTful web service.\ntructed by another (e.g., a contractor) and has been partially or completely negotiated with a client, then the project should have a `proposal` directory, which will contain the detailed scope and proposed solutions of the project.\n\nThis is the position of the proposed solutions; it should not contain actual, working code."}, {"instruction": "Create a Python function `SOAP` that returns a SOAP request object as a string."}, {"instruction": "Write a Python SOAP client that generates a SOAP request for the \"Arctic Fox\" game and receives the response."}, {"instruction": "Create a SOAP function that takes a list of integers and returns the largest number in the list."}, {"instruction": "Write a function that accepts a SOAP web service as an input and returns the name of the web service."}, {"instruction": "Write a Python function `soap` that returns a SOAP object, given a list of ingredients.\n/cpp/medium/average.cpp\n#include <vector>\n#include <iostream>\n\nusing namespace std;\n\ndouble average(vector<int> numbers)\n{\n    double sum = 0;\n    int total = 0;\n    for (vector<int>::iterator i = numbers.begin(); i != numbers.end(); i++) {\n        sum += *i;\n        total++;\n    }\n    return sum / total;\n}\n\nint main()\n{\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    cout << average(numbers) << endl;\n    return 0;\n}\n/cpp/easy/vowels.cpp\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint countVowels(string str)\n{\n    int vowels = 0;\n    for (string::iterator i = str.begin(); i != str.end(); i++) {\n        if (*i == 'a' || *i == 'e' || *i == 'i' || *i == 'o' || *i == 'u') {\n            vowels++;\n        }\n    }\n    return vowels;\n}\n\nint main()\n{\n    cout << countVowels(\"hello world\") << endl;\n    return 0;\n}\n/cpp/easy/palindrome.cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool isPalindrome(string str)\n{\n    bool isPalindrome = true;\n    if (str != string(str.rbegin(), str.rend())) {\n        isPalindrome = false;\n    }\n    return isPalindrome;\n}\n\nint main()\n{\n    cout << isPalindrome(\"radar\") << endl;\n    return 0;\n}\n/python/easy/factorial.py\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(4))\n/python/easy/vowels.py\ndef countVowels(s):\n    vowels = 0\n    for c in s:\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n            vowels += 1\n    return vowels\n\nprint(countVowels(\"hello world\"))\n/cpp/medium/reverseString.cpp\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nstring reverseString(string str)\n{\n    string rev = \"\";\n    for (string::iterator i = str.end() - 1; i != str.begin() - 1; i--) {\n        rev += *i;\n    }\n    rev += str[0];\n    return rev;\n}\n\nint main()\n{\n    cout << reverseString(\"abcdef\") << endl;\n    return 0;\n}\n/cpp/easy/removeDuplicates.cpp\n#include <iostream>\n#include <set>\n#include <iterator>\n\nusing namespace std;\n\nset<int> removeDuplicates(vector<int> numbers)\n{\n    set<int> uniqueNumbers;\n    for (vector<int>::iterator i = numbers.begin(); i != numbers.end(); i++) {\n        uniqueNumbers.insert(*i);\n    }\n    return uniqueNumbers;\n}\n\nint main()\n{\n    vector<int> numbers = {1, 2, 3, 4, 5, 1, 2, 3, 4, 5};\n    set<int> uniqueNumbers = removeDuplicates(numbers);\n    for (set<int>::iterator i = uniqueNumbers.begin(); i != uniqueNumbers.end(); i++) {\n        cout << *i << endl;\n    }\n    return 0;\n}\n/cpp/easy/average.cpp\n#include <vector>\n#include <iostream>\n\nusing namespace std;\n\ndouble average(vector<double> numbers)\n{\n    double sum = 0;\n    double total = 0;\n    for (vector<double>::iterator i = numbers.begin(); i != numbers.end(); i++) {\n        sum += *i;\n        total++;\n    }\n    return sum / total;\n}\n\nint main()\n{\n    vector<double> numbers = {1, 2, 3, 4, 5};\n    cout << average(numbers) << endl;\n    return 0;\n}\n/cpp/easy/factorial.cpp\n#include <iostream>\n\nusing namespace std;\n\nint factorial(int n)\n{\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main()\n{\n    cout << factorial(4) << endl;\n    return 0;\n}\n/cpp/easy/average.cpp\n#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nint average(vector<int> numbers)\n{\n    int sum = 0;\n    int total = 0;\n    for (vector<int>::iterator i = numbers.begin(); i != numbers.end(); i++) {\n        sum += *i;\n        total++;\n    }\n    return sum / total;\n}\n\nint main()\n{\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    cout << average(numbers) << endl;\n    return 0;\n}\n/python/easy/factorial.py\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(4))\n/cpp/easy/swap.cpp\n#include <iostream>\n\nusing namespace std;\n\nvoid swap(int *a, int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main()\n{\n    int a = 1;\n    int b = 2;\n    swap(&a, &b);\n    cout << a << ' ' << b << endl;\n    return 0;\n}\n/python/easy/palindrome.py\ndef isPalindrome(s):\n    if s == s[::-1]:\n        return True\n    return False\n\nprint(isPalindrome(\"radar\"))"}, {"instruction": "Create a Python function `reverseString` that takes a string and returns its reverse."}, {"instruction": "Create a function `soap_instantiate` that instantiates a SOAP message."}, {"instruction": "Create a Python function `soapServer` that returns a SOAP server that can be used to send requests."}, {"instruction": "Create a SOAP client in Python using `zsi.soap` that takes an SOAP message as a string and returns the name of the employee with the highest pay. The SOAP message and the employee model are defined below.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://www.w3.org/2005/08/addressing\">\n  <soap:Body>\n    <GetEmployee xmlns=\"http://www.w3schools.com/xml/\">\n      <Employee>\n        <Name>Roxana</Name>\n        <Sex>Female</Sex>\n        <Age>35</Age>\n        <Salary>9500</Salary>\n      </Employee>\n      <Employee>\n        <Name>Vasile</Name>\n        <Sex>Male</Sex>\n        <Age>38</Age>\n        <Salary>8000</Salary>\n      </Employee>\n      <Employee>\n        <Name>Alexandra</Name>\n        <Sex>Female</Sex>\n        <Age>37</Age>\n        <Salary>7000</Salary>\n      </Employee>\n      <Employee>\n        <Name>Alexandru</Name>\n        <Sex>Male</Sex>\n        <Age>24</Age>\n        <Salary>6500</Salary>\n      </Employee>\n    </GetEmployee>\n  </soap:Body>\n</soap:Envelope>\n```\n\n```python\nclass Employee:\n    def __init__(self, name, age, sex, salary):\n        self.name = name\n        self.age = age\n        self.sex = sex\n        self.salary = salary\n```"}, {"instruction": "Write a Python function `square` that takes a number and returns its square using SOAP."}, {"instruction": "Write a Python function `SOAPRequest` that takes an arbitrary name, a URL, and a set of arguments as input and returns an XML payload in SOAP format, using the `suds` package."}, {"instruction": "Create a SOAP service that reports the number of vowels (a, e, i, o, u) in a given string."}, {"instruction": "Create a Python function `SOAPify` that takes a function and returns a SOAP-wrapped version of it."}, {"instruction": "Create a Python function `soap` that returns an instance of the SOAP class."}, {"instruction": "Write a function `get_soap_instance()` that returns a SOAP instance of a given WSDL."}, {"instruction": "Write a Python function `SOAP` that instantiates an object of class SOAP."}, {"instruction": "Create a Python function `createSOAP` that takes a SOAP request (a dictionary of strings) and returns a SOAP response."}, {"instruction": "Create a Python function `soapify` that takes a string and returns a soapified version of it."}, {"instruction": "Create a Python function that takes a SOAP instance and returns the type of the instance."}, {"instruction": "Create a Python function `soap` that receives a given SOAP request and returns a SOAP response."}, {"instruction": "Create a SOAP instance using Python, with the type definition `ns1:Request` and the following body:\n\n```python\n<Request>\n  <ns1:name>value</ns1:name>\n  <ns1:id>value</ns1:id>\n  <ns1:status>value</ns1:status>\n</Request>\n```"}, {"instruction": "Create a Python function `reverseString` that takes a string and returns its reverse using a SOAP object."}, {"instruction": "Create a SOAP class `UppercaseString` in Python that converts all alphanumeric characters in a string to uppercase."}, {"instruction": "Create a Python class `SOAPClient` that simulates a SOAP client."}, {"instruction": "Create a Python function `greet` that takes a string representing a name and returns a greeting string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: interfaces, COM, COM interop, COM object, COM return, COM string, COM type, COM visibility, IVector, IVector<T>, methods, native type, native visibility, object, reference, size, singleton, size_t, unsigned integer, unsigned long, unsigned long long, unsigned short, unsigned integer\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR uint32_t IVector_1_get_Size_mE153CC42F19B88AD5568B2251C4AFC600A431C50 (RuntimeObject* __this, const RuntimeMethod* method)\n{\n\tIVector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D* ____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D::IID, reinterpret_cast<void**>(&____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Native function invocation\n\tuint32_t returnValue = 0;\n\thr = ____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D->IVector_1_get_Size_mE153CC42F19B88AD5568B2251C4AFC600A431C50(&returnValue);\n\t____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\treturn returnValue;\n}", "docstring": "// Marshaling cleanup of parameter U27___items0U27 native representation", "function_name": "IVector_1_ReplaceAll_m2AEA0484E455AA62B3AD0802FBC213043247FDDA"}, "id": 327, "seed": "IL2CPP_METHOD_ATTR uint32_t IVector_1_get_Size_mE153CC42F19B88AD5568B2251C4AFC600A431C50 (RuntimeObject* __this, const RuntimeMethod* method)\n{\n\tIVector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D* ____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D = NULL;\n\til2cpp_hresult_t hr = static_cast<Il2CppComObject *>(__this)->identity->QueryInterface(IVector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D::IID, reinterpret_cast<void**>(&____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D));\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\t// Native function invocation\n\tuint32_t returnValue = 0;\n\thr = ____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D->IVector_1_get_Size_mE153CC42F19B88AD5568B2251C4AFC600A431C50(&returnValue);\n\t____ivector_1_t309AEF845C8CD32F6804A23AF18B95404DAE449D->Release();\n\n\til2cpp_codegen_com_raise_exception_if_failed(hr, false);\n\n\treturn returnValue;\n}", "concepts": ["interfaces", "COM", "COM interop", "COM object", "COM return", "COM string", "COM type", "COM visibility", "IVector", "IVector<T>", "methods", "native type", "native visibility", "object", "reference", "size", "singleton", "size_t", "unsigned integer", "unsigned long", "unsigned long long", "unsigned short", "unsigned integer"], "parsing_result": [{"instruction": "Write a function that takes an integer and returns a vector of all positive numbers less than or equal to it, using COM interop to call .NET code."}, {"instruction": "Create a Python function `com.microsoft.windows.namespace.sample` that returns an empty string (``) and takes a string argument."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python function `isPrime` that returns true if a number is prime."}, {"instruction": "Create a Python function `add_vectors` that takes two vectors of integers and returns the result of adding them together."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python function `com_cominterop_interfacetype_comreturn_comstring_comtype_comvisibility_object_reference_size_singleton_size_t_uint32_uint64_uint16_uint32` that returns the `COM` string \"My name is a COM string.\""}, {"instruction": "Write a Python function `copyVector` that copies a vector of `int`s."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a string is a palindrome; otherwise false."}, {"instruction": "Implement an array-based vector type in Python using COM interoperability."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `average` that returns the average of elements in a vector."}, {"instruction": "Create a Python function `add_vectors` that takes two vectors of numbers and returns their sum. The vectors may contain any numbers, including `None`s, but do not contain any `NaN`s."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `is_prime` that returns `True` if the input integer is prime and `False` otherwise."}, {"instruction": "Write a Python function `copy_vector` that copies a list of integers to an IVector instance."}, {"instruction": "Create a C++ function that implements a COM interface which allows safe and efficient access to a C++ container (e.g., vector) from COM clients."}, {"instruction": "Implement a COM object that exposes a vector class."}, {"instruction": "Write a Python function `reverse` that reverses the case of a string."}, {"instruction": "Create a Python function `isPalindrome` that checks if a string is a palindrome."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `isNative` that returns true if a Python object is a native type."}, {"instruction": "Implement an interface containing a vector of integers."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: registering HID elements, dictionary traversal, operating system programming\n\n### Task", "fingerprint": null, "content": {"code": "bool  registerElements( IOKitController& controller )\n{\n   DBG_BLOCK( os_hid, \"registerElements\" );\n\n   // Retrieve properties dictionary.\n   CFMutableDictionaryRef  properties;\n   kern_return_t kr = IORegistryEntryCreateCFProperties(\n      controller.hidDevice,\n      &properties,\n      kCFAllocatorDefault,\n      kNilOptions\n   );\n   if( kr != KERN_SUCCESS )\n   {\n      DBG_MSG( os_hid, \"ERROR - IORegistryEntryCreateCFProperties failed.\" );\n      return false;\n   }\n   CHECK( properties != NULL );\n\n   bool ok = registerElementsFromDict( (CFDictionaryRef)properties, controller );\n\n   return ok;\n}", "docstring": "// switch( usagePage )", "function_name": "registerElementsFromDict"}, "id": 329, "seed": "bool  registerElements( IOKitController& controller )\n{\n   DBG_BLOCK( os_hid, \"registerElements\" );\n\n   // Retrieve properties dictionary.\n   CFMutableDictionaryRef  properties;\n   kern_return_t kr = IORegistryEntryCreateCFProperties(\n      controller.hidDevice,\n      &properties,\n      kCFAllocatorDefault,\n      kNilOptions\n   );\n   if( kr != KERN_SUCCESS )\n   {\n      DBG_MSG( os_hid, \"ERROR - IORegistryEntryCreateCFProperties failed.\" );\n      return false;\n   }\n   CHECK( properties != NULL );\n\n   bool ok = registerElementsFromDict( (CFDictionaryRef)properties, controller );\n\n   return ok;\n}", "concepts": ["registering HID elements", "dictionary traversal", "operating system programming"], "parsing_result": [{"instruction": "Write a Python function `getMAC` that returns a string representing the hardware address of the computer."}, {"instruction": "Implement a Python function `registerHIDElements` that registers HID elements on a HID device."}, {"instruction": "Write a Python function `checkHID` that returns true if a given string is a valid HID."}, {"instruction": "C++ developers spend a lot of time writing programs to interact with their operating systems. However, the applications they write are only available on a specific operating system, so the programs must check which operating system is running before they perform their intended actions.\n\nCreate a Python function `isWindows` that returns true if the program is running on a Windows operating system.\n#include <string>\n#include <iostream>\nusing namespace std;\n\nstring toBinary(int n)\n{\n  string result;\n  while (n > 0) {\n    result += (n % 2 + '0');\n    n /= 2;\n  }\n  return result;\n}\n\nint main()\n{\n  cout << toBinary(5) << endl;\n}\n#include <iostream>\nusing namespace std;\n\nint maxOfTwo(int a, int b)\n{\n  return a > b ? a : b;\n}\n\nint main()\n{\n  cout << maxOfTwo(2, 1) << endl;\n}\n#include <string>\n#include <iostream>\nusing namespace std;\n\nbool isAnagram(string s, string t)\n{\n  if (s.length() != t.length()) {\n    return false;\n  }\n  for (int i = 0; i < s.length(); ++i) {\n    if (s[i] != t[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main()\n{\n  cout << boolalpha << isAnagram(\"abc\", \"cba\") << endl;\n}\n#include <vector>\n#include <iostream>\nusing namespace std;\n\nvector<int> removeDuplicates(vector<int> v)\n{\n  for (int i = 0; i < v.size(); ++i) {\n    for (int j = i + 1; j < v.size(); ++j) {\n      if (v[i] == v[j]) {\n        v.erase(v.begin() + j);\n        --j;\n      }\n    }\n  }\n  return v;\n}\n\nint main()\n{\n  vector<int> v1 = {1, 2, 3, 2, 1};\n  vector<int> v2 = removeDuplicates(v1);\n  for (int i = 0; i < v2.size(); ++i) {\n    cout << v2[i] << \" \";\n  }\n  cout << endl;\n}"}, {"instruction": "Write a Python function `sendMessage` that sends a message to a recipient of a given username."}, {"instruction": "Write a Python function `get_system_info` that returns the system information of a user. Information could include: system type, release version, processor architecture, etc."}, {"instruction": "Write a Python program that registers a HID device, including:\n- a HID report descriptor\n- a Windows-friendly name\n- a Windows-friendly description"}, {"instruction": "Create a Python function that simulates a flashlight."}, {"instruction": "Implement a Python function `register` that registers a HID element by storing the data in a dictionary, with the element name as the key."}, {"instruction": "Write a Python function `getHID` that returns a list of all files and folders in a Windows directory."}, {"instruction": "Write a Python function `checkHID` that checks whether a given string is a valid HID (Human Interface Device)."}, {"instruction": "Write a Python function to register a new HID element."}, {"instruction": "Write a Python function `getKeys` that returns a set of the keys of a dictionary."}, {"instruction": "Implement a Python function `registerHIDElements` that accepts a dictionary of integers, and returns a list of integers representing the unique values in the dictionary."}, {"instruction": "Write a Python function `registerHID` that allows a user to register a new HID (human interface device)."}, {"instruction": "Write a Python function `getids` that returns a list of HID elements."}, {"instruction": "Write a Python function `readKeyboard` that fetches a user's input of up to 10 characters from their keyboard."}, {"instruction": "Write a Python function `registerElement` that registers an HID element to the operating system."}, {"instruction": "Implement a Python function `checkHID` to check for valid HID entries."}, {"instruction": "Write a Python function that registers the HID elements used by a program."}, {"instruction": "Write a Python function `findHID` that returns the path of a file that contains the HID associated with a given filename."}, {"instruction": "Implement a Python function `example_9` that registers the HID elements of your Windows machine."}, {"instruction": "Write a Python function `addNumber` that adds an element to the current system's HID table."}, {"instruction": "Create a Python function `registerHID` that registers HID elements for use in the operating system."}, {"instruction": "Create a Python function `get_device_name` that returns the name of a HID device from its vendor ID, product ID, and version."}, {"instruction": "Implement the function `is_valid_ip` to check whether an IP address is valid."}, {"instruction": "Write a Python function `registerHID` that registers a HID element."}, {"instruction": "Write a Python function `register_hid_elements` that registers HID elements as defined in a given XML file."}, {"instruction": "Write a Python program that creates a custom HID device with the following features:\n\n- 6-axis accelerometer\n- 3-axis gyroscope\n- 2-axis magnetometer\n- temperature sensor\n- tilt sensor"}, {"instruction": "Write a Python function `registerHid` that registers a HID element given its ID, name, type, and operating system."}, {"instruction": "Write a Python function that takes a HID report and returns the corresponding operation code."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: static method, method call, variable assignment, method argument, standard library\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_DirectionalLight_illuminanceHDR_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::DirectionalLight *arg1 = (cc::scene::DirectionalLight *) NULL ;\n    float arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::DirectionalLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) int, short, long, signed char, float, double\n    ok &= sevalue_to_native(args[0], &arg2, nullptr);\n    SE_PRECONDITION2(ok, false, \"DirectionalLight_illuminanceHDR_set,2,SWIGTYPE_float\"); \n    cc_scene_DirectionalLight_illuminanceHDR_set(arg1,arg2);\n    \n    \n    return true;\n}", "docstring": "// out 1", "function_name": "js_cc_scene_DirectionalLight_illuminance_get"}, "id": 333, "seed": "static bool js_cc_scene_DirectionalLight_illuminanceHDR_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::DirectionalLight *arg1 = (cc::scene::DirectionalLight *) NULL ;\n    float arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::scene::DirectionalLight>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) int, short, long, signed char, float, double\n    ok &= sevalue_to_native(args[0], &arg2, nullptr);\n    SE_PRECONDITION2(ok, false, \"DirectionalLight_illuminanceHDR_set,2,SWIGTYPE_float\"); \n    cc_scene_DirectionalLight_illuminanceHDR_set(arg1,arg2);\n    \n    \n    return true;\n}", "concepts": ["static method", "method call", "variable assignment", "method argument", "standard library"], "parsing_result": [{"instruction": "Write a Python function `is_prime` which returns `True` if a given non-negative integer is prime."}, {"instruction": "Write a Python function `palindrome` that returns True if a given string is a palindrome."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two numbers."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number."}, {"instruction": "Write a Python function `isPalindrome` that returns True if a string is a palindrome."}, {"instruction": "Write a Python function `is_palindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `volume` that takes a sphere's diameter and returns its volume."}, {"instruction": "Write a Python method `is_prime` that accepts an integer parameter and returns True if the number is prime, False otherwise."}, {"instruction": "Write a Python function `factorial` that calculates the factorial of a non-negative integer."}, {"instruction": "Write a Python function `gcd` that takes two integers and returns their greatest common divisor."}, {"instruction": "Write a Python function `calculate_slope` that takes two arguments (`x1, y1`) and (`x2, y2`) and returns the slope of the line through those points."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Write a Python function `sumDigits` that takes a non-negative integer, and returns the sum of the digits in the number."}, {"instruction": "Write a Python function `evenDigits` that returns a list of all integers that have an even number of digits."}, {"instruction": "Write a Python function `primes` that returns a list of all prime numbers up to `n`."}, {"instruction": "Create a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Suppose you have a random collection of numbers, and you want to write a class that allows you to sum the numbers. Implement a class called `Sum` that stores a number of integers, and a method `sum` that sums all of the integers it contains."}, {"instruction": "Write a Python function `is_isogram` that returns True if a given string is an isogram."}, {"instruction": "Implement a Python function `factorial` that takes a non-negative integer and returns its factorial."}, {"instruction": "Write a Python function `findMin` to return the smallest element in a list of integers."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Write a Python function `get_average` that returns the average of a list of numbers."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Write a Python function `findMin` that returns the smallest element in a list of integers."}, {"instruction": "Write a Python function `isPrime` that returns whether an integer is prime."}, {"instruction": "Write a Python function `is_prime` that determines if a given number is prime."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome.    assert(average(v3) == 5);\n}\n\nvoid test_average_null_case() {\n    // Test null case\n    vector<int> v4;\n    assert(average(v4) == 0);\n}/code/cpp/example5/test.cpp\n#include <cassert>\n#include <vector>\n#include \"example5.h\"\n\nvoid test_average_simple_case() {\n    // Test simple case\n    vector<int> v1 = {1, 3, 5};\n    assert(average(v1) == 3);\n}\n\nvoid test_average_zero_case() {\n    // Test zero case\n    vector<int> v2 = {};\n    assert(average(v2) == 0);\n}\n\nvoid test_average_even_case() {\n    // Test even case\n    vector<int> v3 = {1, 3, 5, 7};\nrns true if a given string is a palindrome.\n\n### Test\n- pass\n- fail\n/code/cpp/example3/README.md\n# Example 3 - Palindrome Check\n\n## Code\n```C++\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring toLowerCase(string s) {\n    string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += tolower(s[i]);\n    }\n    return result;\n}\n\nbool isPalindrome(string s) {\n    int i = 0, j = s.size() - 1;\n    while (i < j) {\n        while (i < j &&!isalnum(s[i])) {\n            i++;\n        }\n        while (i < j &&!isalnum(s[j])) {\n            j--;\n        }\n        if (tolower(s[i++])!= tolower(s[j--])) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n## Tests\n#"}, {"instruction": "Write a Python function `sumDigits` that returns the sum of the digits in an integer."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: OpenCV, image drawing, optical flow, lines\n\n### Task", "fingerprint": null, "content": {"code": "cv::Mat getDenseOpticFlowRobustLeft(cv::Mat frame1_1C,cv::Mat frame2_1C,cv::Mat imageToDrawOn){\n    Mat flow, frame;\n    // some faster than mat image container\n    UMat  flowUmat, prevgray;\n    vector<Vec4f> interestingPoints;\n    vector<Vec4f> nonInterestingPoints;\n    vector<Vec4f> allPoints;\n    vector<float> angles;\n    vector<float> absoluteSize;\n    \n    // For all optical flow you need a sequence of images.. Or at least 2 of them. Previous and current frame\n    \n    // calculate optical flow\n    calcOpticalFlowFarneback(frame1_1C, frame2_1C, flowUmat, 0.5, 2, 50, 3, 5, 1.1, 0);\n    // copy Umat container to standard Mat\n    flowUmat.copyTo(flow);\n    \n    // By y += 5, x += 5 you can specify the grid\n    for (int y = 0; y < imageToDrawOn.rows; y += 20){\n        for (int x = 0; x < imageToDrawOn.cols; x += 20)\n        {\n            // get the flow from y, x position * 10 for better visibility\n            const Point2f flowatxy = flow.at<Point2f>(y, x) * 10;\n            line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(0,0,255));\n            allPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n            \n            // draw line at flow direction\n            int minimumDistance = 10;\n            //Minimum Parameters for angle and resultant distance\n            double resultantDistance = sqrt((flowatxy.x*flowatxy.x)+(flowatxy.y*flowatxy.y));\n            float angletemp = atanf((abs(flowatxy.y))/(abs(flowatxy.x)));\n            //                            cout<< \"angletemp= \"<<angletemp*180/M_PI<<endl;\n            float calculatedAngle;\n            if(flowatxy.x<0 && flowatxy.y<0 ){\n                calculatedAngle = M_PI-angletemp;\n            }else if (flowatxy.x<0 && flowatxy.y>0){\n                calculatedAngle =M_PI + angletemp;\n            }else if(flowatxy.x>0&&flowatxy.y>0 ){\n                calculatedAngle = 2*M_PI - angletemp;\n            }else{\n                calculatedAngle = angletemp;\n            }\n            //Filter Lines\n            if (resultantDistance>minimumDistance){\n                if(calculatedAngle <20*M_PI/180 || calculatedAngle>270*M_PI/180){\n                    angles.push_back(calculatedAngle);\n                    absoluteSize.push_back(resultantDistance);\n                    interestingPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n                    line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(255,255,0));\n                    //                    line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(255,255,0));\n                    //                                    cout<<\"calculatedAngle= \"<<calculatedAngle*180/M_PI<<endl;\n                    //                                    imshow(\"imageDebug\", imageToDrawOn);\n                    //\n                    //                                    waitKey();\n                }else{\n                    nonInterestingPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n                }\n            }\n            circle(imageToDrawOn, Point(x, y), 1, Scalar(0, 0, 0), -1);\n        }\n    }\n    \n    bool isCarCuttingIn;\n    int sizeOfInterestingPoints = interestingPoints.size();\n    int sizeOfNonInterestingPoints = nonInterestingPoints.size();\n    \n    float sumAngles;\n    float sumDistances;\n    \n    //    cout<<\"Interesting Points\"<<interestingPoints.size()<<endl;\n    //    cout<<\"Non-Interesting Points\"<<nonInterestingPoints.size()<<endl;\n    \n    if(interestingPoints.size()>nonInterestingPoints.size()){\n        //average the angles and the magnitude\n        for (int k=0; k<angles.size(); k++) {\n            sumAngles += angles[k];\n            sumDistances += absoluteSize[k];\n        }\n        float averageAngle =sumAngles/angles.size();\n        float averageDistances = sumDistances/absoluteSize.size();\n        \n        float width  = imageToDrawOn.cols;\n        float height = imageToDrawOn.rows;\n        \n        float averageY;\n        float averageX;\n        \n        if(averageAngle>90*M_PI/180 && averageAngle<180*M_PI/180){\n            // x -ve y +ve\n            averageAngle = averageAngle-(90*M_PI/180);\n            \n            averageY = averageDistances * -sin(averageAngle);\n            averageX = averageDistances * -(cos(averageAngle));\n        }else if(averageAngle>180*M_PI/180 && averageAngle<270*M_PI/180){\n            // x -ve y -ve\n            averageAngle = averageAngle-(180*M_PI/180);\n            \n            averageY = averageDistances * (sin(averageAngle));\n            averageX = averageDistances * -(cos(averageAngle));\n        }else if(averageAngle>270*M_PI/180 && averageAngle<360*M_PI/180){\n            // x +ve y -ve\n            averageAngle = averageAngle-(270*M_PI/180);\n            \n            averageY = averageDistances * (sin(averageAngle));\n            averageX = averageDistances * (cos(averageAngle));\n        }else{\n            averageX = averageDistances*cos(averageAngle);\n            averageY = averageDistances*sin(averageAngle);\n        }\n        \n        \n        //        float y = averageDistances*sin(averageAngle);\n        //        float x = averageDistances*cos(averageAngle);\n        \n        //Draw Large arrows\n        arrowedLine(imageToDrawOn, Point(width/2,height/2), Point(averageX+width/2,averageY+height/2), Scalar(255,0,0));\n        // turn bool on cutting lane\n        isCarCuttingIn = true;\n        //        cout<<\"Car cutting in\"<<endl;\n    }else{\n        //turn Bool on cutting lane\n        //        cout<<\"Car NOT cutting in\"<<endl;\n        isCarCuttingIn = false;\n    }\n    \n    if (isCarCuttingIn) {\n        circle(imageToDrawOn, Point(100,50), 10, Scalar(0,0,255),-1, 8, 0);\n//        objectCuttingIn=true;\n    }else{\n        circle(imageToDrawOn, Point(100,50), 10, Scalar(255,255,255),-1, 8, 0);\n//        objectCuttingIn=false;\n    }\n    \n    return imageToDrawOn;\n}", "docstring": "//    cout<<\"Non-Interesting Points\"<<nonInterestingPoints.size()<<endl;", "function_name": "getDenseOpticFlowRobustRight"}, "id": 334, "seed": "cv::Mat getDenseOpticFlowRobustLeft(cv::Mat frame1_1C,cv::Mat frame2_1C,cv::Mat imageToDrawOn){\n    Mat flow, frame;\n    // some faster than mat image container\n    UMat  flowUmat, prevgray;\n    vector<Vec4f> interestingPoints;\n    vector<Vec4f> nonInterestingPoints;\n    vector<Vec4f> allPoints;\n    vector<float> angles;\n    vector<float> absoluteSize;\n    \n    // For all optical flow you need a sequence of images.. Or at least 2 of them. Previous and current frame\n    \n    // calculate optical flow\n    calcOpticalFlowFarneback(frame1_1C, frame2_1C, flowUmat, 0.5, 2, 50, 3, 5, 1.1, 0);\n    // copy Umat container to standard Mat\n    flowUmat.copyTo(flow);\n    \n    // By y += 5, x += 5 you can specify the grid\n    for (int y = 0; y < imageToDrawOn.rows; y += 20){\n        for (int x = 0; x < imageToDrawOn.cols; x += 20)\n        {\n            // get the flow from y, x position * 10 for better visibility\n            const Point2f flowatxy = flow.at<Point2f>(y, x) * 10;\n            line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(0,0,255));\n            allPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n            \n            // draw line at flow direction\n            int minimumDistance = 10;\n            //Minimum Parameters for angle and resultant distance\n            double resultantDistance = sqrt((flowatxy.x*flowatxy.x)+(flowatxy.y*flowatxy.y));\n            float angletemp = atanf((abs(flowatxy.y))/(abs(flowatxy.x)));\n            //                            cout<< \"angletemp= \"<<angletemp*180/M_PI<<endl;\n            float calculatedAngle;\n            if(flowatxy.x<0 && flowatxy.y<0 ){\n                calculatedAngle = M_PI-angletemp;\n            }else if (flowatxy.x<0 && flowatxy.y>0){\n                calculatedAngle =M_PI + angletemp;\n            }else if(flowatxy.x>0&&flowatxy.y>0 ){\n                calculatedAngle = 2*M_PI - angletemp;\n            }else{\n                calculatedAngle = angletemp;\n            }\n            //Filter Lines\n            if (resultantDistance>minimumDistance){\n                if(calculatedAngle <20*M_PI/180 || calculatedAngle>270*M_PI/180){\n                    angles.push_back(calculatedAngle);\n                    absoluteSize.push_back(resultantDistance);\n                    interestingPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n                    line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(255,255,0));\n                    //                    line(imageToDrawOn, Point(x, y), Point(cvRound(x + flowatxy.x), cvRound(y + flowatxy.y)), Scalar(255,255,0));\n                    //                                    cout<<\"calculatedAngle= \"<<calculatedAngle*180/M_PI<<endl;\n                    //                                    imshow(\"imageDebug\", imageToDrawOn);\n                    //\n                    //                                    waitKey();\n                }else{\n                    nonInterestingPoints.push_back(Vec4f(x,y,x + flowatxy.x,y + flowatxy.y));\n                }\n            }\n            circle(imageToDrawOn, Point(x, y), 1, Scalar(0, 0, 0), -1);\n        }\n    }\n    \n    bool isCarCuttingIn;\n    int sizeOfInterestingPoints = interestingPoints.size();\n    int sizeOfNonInterestingPoints = nonInterestingPoints.size();\n    \n    float sumAngles;\n    float sumDistances;\n    \n    //    cout<<\"Interesting Points\"<<interestingPoints.size()<<endl;\n    //    cout<<\"Non-Interesting Points\"<<nonInterestingPoints.size()<<endl;\n    \n    if(interestingPoints.size()>nonInterestingPoints.size()){\n        //average the angles and the magnitude\n        for (int k=0; k<angles.size(); k++) {\n            sumAngles += angles[k];\n            sumDistances += absoluteSize[k];\n        }\n        float averageAngle =sumAngles/angles.size();\n        float averageDistances = sumDistances/absoluteSize.size();\n        \n        float width  = imageToDrawOn.cols;\n        float height = imageToDrawOn.rows;\n        \n        float averageY;\n        float averageX;\n        \n        if(averageAngle>90*M_PI/180 && averageAngle<180*M_PI/180){\n            // x -ve y +ve\n            averageAngle = averageAngle-(90*M_PI/180);\n            \n            averageY = averageDistances * -sin(averageAngle);\n            averageX = averageDistances * -(cos(averageAngle));\n        }else if(averageAngle>180*M_PI/180 && averageAngle<270*M_PI/180){\n            // x -ve y -ve\n            averageAngle = averageAngle-(180*M_PI/180);\n            \n            averageY = averageDistances * (sin(averageAngle));\n            averageX = averageDistances * -(cos(averageAngle));\n        }else if(averageAngle>270*M_PI/180 && averageAngle<360*M_PI/180){\n            // x +ve y -ve\n            averageAngle = averageAngle-(270*M_PI/180);\n            \n            averageY = averageDistances * (sin(averageAngle));\n            averageX = averageDistances * (cos(averageAngle));\n        }else{\n            averageX = averageDistances*cos(averageAngle);\n            averageY = averageDistances*sin(averageAngle);\n        }\n        \n        \n        //        float y = averageDistances*sin(averageAngle);\n        //        float x = averageDistances*cos(averageAngle);\n        \n        //Draw Large arrows\n        arrowedLine(imageToDrawOn, Point(width/2,height/2), Point(averageX+width/2,averageY+height/2), Scalar(255,0,0));\n        // turn bool on cutting lane\n        isCarCuttingIn = true;\n        //        cout<<\"Car cutting in\"<<endl;\n    }else{\n        //turn Bool on cutting lane\n        //        cout<<\"Car NOT cutting in\"<<endl;\n        isCarCuttingIn = false;\n    }\n    \n    if (isCarCuttingIn) {\n        circle(imageToDrawOn, Point(100,50), 10, Scalar(0,0,255),-1, 8, 0);\n//        objectCuttingIn=true;\n    }else{\n        circle(imageToDrawOn, Point(100,50), 10, Scalar(255,255,255),-1, 8, 0);\n//        objectCuttingIn=false;\n    }\n    \n    return imageToDrawOn;\n}", "concepts": ["OpenCV", "image drawing", "optical flow", "lines"], "parsing_result": [{"instruction": "Create a Python function that computes the optical flow using the Lucas-Kanade method"}, {"instruction": "Write a Python function that detects the edges of an image and draws a green line around the edges. The function should take a single argument `img`, the Python object representing the image."}, {"instruction": "Write a Python function `draw_flow` that draws optical flow vectors on an image."}, {"instruction": "Write a Python function `trackFeature` that uses optical flow to identify a single feature in a video."}, {"instruction": "Write a Python function `points` that generates a set of points on an image."}, {"instruction": "Write a Python function that uses OpenCV to plot lines on an image."}, {"instruction": "Write a Python function that implements the optical flow algorithm."}, {"instruction": "Write a Python function `drawLines` that draws lines on an image using OpenCV."}, {"instruction": "Write a Python function that calculates and displays the optical flow of a video."}, {"instruction": "Implement a Python function `findLines` that takes a grayscale image as input and returns lines of text in the image, in the format of text line, top-left pixel, bottom-right pixel."}, {"instruction": "Write a Python function `drawFlow` that displays the optical flow of an image."}, {"instruction": "Write a Python function `opticalFlow()` that uses OpenCV to calculate the optical flow between two images."}, {"instruction": "Write a Python function `draw_flow` that draws an optical flow overlay on an image."}, {"instruction": "Write a python function that calculates the optical flow by comparing two images."}, {"instruction": "Write a Python function `multicolor` that takes as input an image in BGR color format and returns an image with all of the red pixels replaced by blue."}, {"instruction": "Implement an image stitching algorithm."}, {"instruction": "Create a Python function `line_detect` that returns a vector of lines detected in an image."}, {"instruction": "Write a function in Python that draws a line from two points on an image."}, {"instruction": "Create a python function that draws the optical flow of a video clip."}, {"instruction": "Write a Python function `draw_tracks` that takes an image and a vector of optical flow tracks and draws the tracks on the image."}, {"instruction": "Write a Python function `drawLines` to draw lines on images."}, {"instruction": "An image is given, where the user can click and drag to draw a rectangle. After the user has finished drawing, an optical flow algorithm is used to calculate the path of the drawn rectangle."}, {"instruction": "Write a script that draws a line between two points on an image."}, {"instruction": "Create an implementation for the [Hough Transform](https://en.wikipedia.org/wiki/Hough_transform) algorithm to detect lines from a set of points."}, {"instruction": "Write a Python function `drawLines` that draws the optical flow lines on an image."}, {"instruction": "Write a Python function `detect_lines` that detects lines in an image."}, {"instruction": "Write a Python function that draws a line between two points on an image."}, {"instruction": "Write a Python function `findChessBoard` that finds a chess board in a picture."}, {"instruction": "Write a Python function `drawLines` that draws lines on an image in OpenCV."}, {"instruction": "Write a Python function that detects the corners of a chessboard."}, {"instruction": "Write a C++ function `findKeyPoints` to return key points in a video sequence."}, {"instruction": "Write a Python function `drawLine` to detect a straight line in an image and draw it."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operations, unsigned integer, floating-point conversion, data representation\n\n### Task", "fingerprint": null, "content": {"code": "float16 uint32_to_float16(uint32_t x) {\n    // float16 is formatted as follows: sign(1 bit) exponent(5 bits) mantissa(10 bits). The value is interpreted\n    // The value is interpreted using following formula:\n    // (-1)^sign * 1, mantissa * 2 ^ (exponent - 15)\n    // Here we set the following values:\n    // sign = 0\n    // exponent = 15, for obtaining a zero exponent.\n    // mantissa = 10 right bits from generated uint32 random value.\n\n    uint16_t x_uint16 = static_cast<uint16_t>(x);\n    convert_types out_val = {(static_cast<uint16_t>(15) << 10) | (x_uint16 & 0x3ffu)};\n    return out_val.f16 - static_cast<float16>(1);\n}", "docstring": "// mantissa = 23 right bits from generated uint32 random value.", "function_name": "uint32_to_float"}, "id": 341, "seed": "float16 uint32_to_float16(uint32_t x) {\n    // float16 is formatted as follows: sign(1 bit) exponent(5 bits) mantissa(10 bits). The value is interpreted\n    // The value is interpreted using following formula:\n    // (-1)^sign * 1, mantissa * 2 ^ (exponent - 15)\n    // Here we set the following values:\n    // sign = 0\n    // exponent = 15, for obtaining a zero exponent.\n    // mantissa = 10 right bits from generated uint32 random value.\n\n    uint16_t x_uint16 = static_cast<uint16_t>(x);\n    convert_types out_val = {(static_cast<uint16_t>(15) << 10) | (x_uint16 & 0x3ffu)};\n    return out_val.f16 - static_cast<float16>(1);\n}", "concepts": ["bitwise operations", "unsigned integer", "floating-point conversion", "data representation"], "parsing_result": [{"instruction": "Write a Python program that converts a floating-point number to a binary string."}, {"instruction": "Create a Python program that calculates the surface area and volume of a cylinder given the radius and height of the cylinder."}, {"instruction": "Write a Python program that takes in a number in binary format and converts it to a decimal format."}, {"instruction": "Create a Python program that computes the following:\n\n1. the sum of all integers between 1 and 100\n2. the product of all integers between 1 and 20\n3. the sum of all even numbers between 1 and 100\n4. the sum of all odd numbers between 1 and 100\n5. the sum of all numbers between 1 and 100 that are multiples of 3 or 5\n6. the sum of all prime numbers between 1 and 100"}, {"instruction": "Create a Python function `bitwiseOr` that computes the bitwise OR of two non-negative integers."}, {"instruction": "Implement a Python function `int2bin` that converts a non-negative integer to a binary string."}, {"instruction": "Write a Python program that converts a floating-point number to a non-negative integer."}, {"instruction": "Write a Python function `compute` that computes the value of a given expression."}, {"instruction": "Write a Python function `binaryToDecimal` that converts a binary string to a non-negative integer."}, {"instruction": "Create a Python script to convert a floating-point number into a list of it's binary digits."}, {"instruction": "Write a Python program that converts a non-negative integer to a binary string."}, {"instruction": "Write a Python program that calculates the factorial of a non-negative integer."}, {"instruction": "Implement a Python function `isPowerOfTwo` that returns true if a non-negative integer is a power of two."}, {"instruction": "Write a Python program to convert a floating point number to an integer."}, {"instruction": "Write a Python function `isPrime` that returns true if a non-negative integer is prime."}, {"instruction": "Write a Python program `bitwise_ops.py` that prints all possible bitwise operations (and, or, xor, xnor) for a given unsigned integer."}, {"instruction": "Write a Python function `divide` that returns the quotient and remainder when dividing two integers."}, {"instruction": "Implement a Python program that computes the Boolean expression `A XOR B` using the bitwise operators."}, {"instruction": "Write a Python program that prompts the user to enter a floating-point number and prints the number of bits used to represent the floating-point number."}, {"instruction": "Create a Python program that converts a non-negative integer to a binary string."}, {"instruction": "Implement a Python function `sign` that returns the sign of a non-negative integer."}, {"instruction": "Write a Python program to check whether an integer belongs to the set of 2's complement integers."}, {"instruction": "Write a Python program to convert a positive integer from decimal to binary."}, {"instruction": "Write a Python program that prompts the user for an unsigned integer, then prints the bitwise negation of that integer."}, {"instruction": "Create a Python function `check_palindrome` that checks if a string is a palindrome."}, {"instruction": "Write a Python program that converts an integer to its binary representation."}, {"instruction": "Implement a program in Python that converts a floating-point number to its binary representation."}, {"instruction": "Write a Python program that converts a floating-point number to a 32-bit integer in two's complement."}, {"instruction": "Implement a Python function `isDivisible` that returns `True` if a given integer is evenly divisible by another integer, and `False` otherwise."}, {"instruction": "Write a Python program that converts a floating-point value to its binary representation in IEEE-754 format."}, {"instruction": "Implement a Python function `toBinary` that converts a non-negative integer to a binary string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: C++ destructor, C++ virtual destructor, C++ override\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_delete_cc_scene_PassDynamicsValue(se::State& s)\n{\n    // js_dtoroverride\n    return true;\n}", "docstring": "// out 1", "function_name": "js_cc_scene_PassDynamicsValue_value_get"}, "id": 342, "seed": "static bool js_delete_cc_scene_PassDynamicsValue(se::State& s)\n{\n    // js_dtoroverride\n    return true;\n}", "concepts": ["C++ destructor", "C++ virtual destructor", "C++ override"], "parsing_result": [{"instruction": "Write a Python function `PyCalculator` that implements a simple command-line calculator that supports addition, subtraction, multiplication, and division commands."}, {"instruction": "Implement a Python class `Car` that inherits from Python's built-in `object` class."}, {"instruction": "Create a Python class named `Person` with an instance variable for storing a person's name."}, {"instruction": "The Python class `Student` represents a student at an undergraduate institution.\n\n- It has the following fields:\n    - `id`: an integer representing the student's identification number (unique to each student)\n    - `gpa`: a float representing the student's GPA (the average of the student's academic performances)\n    - `major`: a string representing the student's major\n    - `graduated`: a boolean representing whether or not the student has graduated\n- It has the following methods:\n    - `__init__()`: initializes the student's identification number, GPA, major, and graduation status\n    - `major`: returns the student's major\n    - `graduated`: returns the student's graduation status\n    - `gpa`: returns the student's GPA\n    - `__repr__()`: returns the student's identification number, GPA, major, and graduation status\n\nImplement the `Student` class in Python as a C++ class."}, {"instruction": "Implement a Python program that reads a text file and outputs the number of vowels in the file."}, {"instruction": "Create a Python program that creates a class `Dog` with the following properties:\n\n- `__init__` method with required parameters (name, owner)\n- `makeNoise` instance method that prints out `\"bark\"`\n- `owner` property that returns the owner's name\n- `name` property that returns the dog's name\n\nCreate a Python program that creates a class `Puppy` that inherits from `Dog` with the following properties:\n\n- `__init__` method that includes the `Dog`'s `__init__` method; adds a new parameter `age` (default 0)\n- `makeNoise` instance method that prints out `\"bark\"`\n- `age` property that returns the age of the dog"}, {"instruction": "Write a Python program `bank.py` that implements a banking system with accounts and transactions."}, {"instruction": "Create a Python program that finds the average of a list of numbers using a C++ built-in class."}, {"instruction": "Create a Python program that uses a C++ class to print out the first 20 Fibonacci numbers."}, {"instruction": "Reimplement the `vector` class in Python using C++."}, {"instruction": "Write a Python class `Vector` that implements a vector."}, {"instruction": "Implement a Python class `Stack` that implements a stack."}, {"instruction": "Implement a Python class `Student` to model a student with three fields for name, address, and average grade."}, {"instruction": "Create a Python program to reverse a C++ class using a destructor and a virtual destructor using the `override` keyword."}, {"instruction": "Create a Python program that demonstrates the use of destructors."}, {"instruction": "Extend the C++ program 1 from Example 3 so that it adheres to the following additional rules:\n\n- The C++ program must be implemented as a class called `Program` in a separate file called `Program.cpp`.\n- The C++ program must have a destructor function called `Program` that implements a destructor for the `Program` class.\n- The C++ program must have a virtual destructor function called `Program` that implements a virtual destructor for the `Program` class.\n- The C++ program must have a function called `main` that contains the main program loop.\n- The C++ program must have an `override` keyword to instruct the C++ compiler to implement the `Program` class function `run` as a virtual function that overrides the `run` function in the `Program` class."}, {"instruction": "Create a Python program to test with the C++ destructor and with the C++ virtual destructor and the C++ override."}, {"instruction": "Implement the C++ destructor and override the C++ virtual destructor for the `Shape` class."}, {"instruction": "Implement a Python function `reverseString` that returns its parameter reversed using the built-in Python `list` methods."}, {"instruction": "Create a program in Python that creates a class `Dog` with a class attribute `sound` and a class method `speak`. The class `Dog` should take a single string argument that corresponds to the type of sound the dog makes. The class method `speak` should print out the sound the dog makes."}, {"instruction": "Create a Python program that prints all the squares of numbers from 1 to 20."}, {"instruction": "Implement a Python class `Node` that is a linked list node."}, {"instruction": "Create a C++ class `MyString` with an overloaded `operator=` to replace the contents of a `MyString` object with a string. The `MyString` class should also have a virtual destructor and an overloaded `operator=` method."}, {"instruction": "Implement a Python class `Student` with the following properties:\n\n- `name`: a string\n- `hours_studied`: a non-negative integer\n- `gpa`: a floating point number\n\nImplement the following methods:\n\n- `greet`: returns a string saying \"Hello, my name is `name`.\"\n- `setHoursStudied`: sets the number of hours studied\n- `setGPA`: sets the student's GPA\n- `getGPA`: returns the student's GPA\n- `getHoursStudied`: returns the number of hours studied"}, {"instruction": "Implement a Python program `House` with a C++ class `House` that inherits from `House` and overrides the `get_area` function."}, {"instruction": "Create a Python class `Student` that implements a student's name, ID, and scores using Python classes."}, {"instruction": "Implement the destructors and virtual destructors to create a class hierarchy with parents/children and a grandchild.\n#include <iostream>\nusing namespace std;\n\nstruct A {\n    A() { cout << \"Base constructor\\n\"; };\n    ~A() { cout << \"Base destructor\\n\"; }\n    void print() { cout << \"Base print\\n\"; }\n};\n\nstruct B : public A {\n    B() { cout << \"Derived constructor\\n\"; };\n    ~B() { cout << \"Derived destructor\\n\"; }\n    void print() { cout << \"Derived print\\n\"; }\n};\n\nstruct C : public B {\n    C() { cout << \"Grandchild constructor\\n\"; };\n    ~C() { cout << \"Grandchild destructor\\n\"; }\n    void print() { cout << \"Grandchild print\\n\"; }\n};\n\nint main() {\n    C c;\n    c.print();\n}\n// C++ function to remove duplicates from a vector\n\n#include <iostream>\n#include <iterator>\n#include <set>\n#include <vector>\nusing namespace std;\n\nvoid removeDuplicates(vector<int>& vec) {\n    set<int> seen;\n    vector<int> newVec;\n\n    for (auto it = begin(vec); it != end(vec); ++it) {\n        if (seen.find(*it) == seen.end()) {\n            seen.insert(*it);\n            newVec.push_back(*it);\n        }\n    }\n\n    vec = newVec;\n}\n\nint main() {\n    vector<int> vec {1, 1, 2, 3, 4, 4, 5};\n    removeDuplicates(vec);\n\n    for (auto x : vec) {\n        cout << x << \" \";\n    }\n    cout << endl;\n}\n// C++ function to reverse a string using STL iterators\n\n#include <iostream>\nusing namespace std;\n\nvoid reverseString(string &str) {\n    reverse(begin(str), end(str));\n}\n\nint main() {\n    string str = \"This is a test\";\n    reverseString(str);\n    cout << str << endl;\n}\n// C++ function to find the minimum element in a vector\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMin(vector<int>& vec) {\n    int min = vec[0];\n\n    for (auto it = begin(vec); it != end(vec); ++it) {\n        if (*it < min) {\n            min = *it;\n        }\n    }\n\n    return min;\n}\n\nint main() {\n    vector<int> vec {1, 2, 3, 4, 5, 6, 7, 8};\n    int min = findMin(vec);\n\n    cout << min << endl;\n}\n// C++ function to convert a non-negative integer to a binary string\n\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring toBinary(int value) {\n    vector<int> vec;\n\n    while (value > 0) {\n        vec.push_back(value % 2);\n        value /= 2;\n    }\n\n    string result = to_string(vec[vec.size() - 1]);\n\n    for (int i = vec.size() - 2; i >= 0; --i) {\n        result += to_string(vec[i]);\n    }\n\n    return result;\n}\n\nint main() {\n    int value = 25;\n    string binary = toBinary(value);\n\n    cout << \"The binary representation of \" << value << \" is \" << binary << endl;\n}\n// C++ function to implement a destructor and virtual destructor\n\n#include <iostream>\nusing namespace std;\n\nstruct Base {\n    Base() { cout << \"Base constructor\\n\"; };\n    ~Base() { cout << \"Base destructor\\n\"; };\n    virtual void print() { cout << \"Base print\\n\"; }\n};\n\nstruct Derived : public Base {\n    Derived() { cout << \"Derived constructor\\n\"; };\n    ~Derived() { cout << \"Derived destructor\\n\"; }\n    void print() { cout << \"Derived print\\n\"; }\n};\n\nstruct Grandchild : public Derived {\n    Grandchild() { cout << \"Grandchild constructor\\n\"; };\n    ~Grandchild() { cout << \"Grandchild destructor\\n\"; }\n    void print() { cout << \"Grandchild print\\n\"; }\n};\n\nint main() {\n    Grandchild c;\n    c.print();\n}"}, {"instruction": "Create a Python program that implements a C++ class `List` that supports the following operations:\n\n- `add_to_front`\n- `add_to_back`\n- `remove`\n- `remove_all`\n- `find`\n- `find_all`\n- `size`\n- `clear`\n- `print`\n- `copy`\n- `deepcopy`\n- `iter`"}, {"instruction": "Implement the C++ language destructor and C++ virtual destructor in Python."}, {"instruction": "Use the C++ destructor to implement the Python destructor in Python."}, {"instruction": "Write a Python program that implements the `Car` class and instantiates it with a `Car` object, prints the object's `Car` class name, and then overrides the `Car` class's destructor by printing a message."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: Lua binding, C++ wrapper\n\n### Task", "fingerprint": null, "content": {"code": "static int _cocos2d_PhysicsJointRotarySpring_createConstraints(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsJointRotarySpring *self = nullptr;\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsJointRotarySpring\");\n\n    // bool createConstraints()\n    bool ret = self->createConstraints();\n    int num_ret = olua_push_bool(L, ret);\n\n    olua_endinvoke(L);\n\n    return num_ret;\n}", "docstring": "// static cocos2d::PhysicsJointRotarySpring *construct(cocos2d::PhysicsBody *a, cocos2d::PhysicsBody *b, float stiffness, float damping)", "function_name": "_cocos2d_PhysicsJointRotarySpring_construct"}, "id": 343, "seed": "static int _cocos2d_PhysicsJointRotarySpring_createConstraints(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsJointRotarySpring *self = nullptr;\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsJointRotarySpring\");\n\n    // bool createConstraints()\n    bool ret = self->createConstraints();\n    int num_ret = olua_push_bool(L, ret);\n\n    olua_endinvoke(L);\n\n    return num_ret;\n}", "concepts": ["Lua binding", "C++ wrapper"], "parsing_result": [{"instruction": "Write a Python function `fibonacci` that returns the first n fibonacci numbers."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function to compute the distance of a vector between two points."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python function `reverseString` that takes a string and returns its reverse.\n/tasks/1.cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// For example:\n// int x = 10;\n// cout << \"x = \" << x << endl;\n\nint main() {\n    // Enter code here\n    return 0;\n}/tasks/3.cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n// For example:\n// int x = 10;\n// cout << \"x = \" << x << endl;\n\nint main() {\n    // Enter code here\n    return 0;\n}/tasks/2.cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n// For example:\n// int x = 10;\n// cout << \"x = \" << x << endl;\n\nint main() {\n    // Enter code here\n    return 0;\n}/tasks/5.cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string reverseString(string s) {\n        // Enter solution here\n        return s;\n    }\n};\n\nint main() {\n    Solution s;\n    string t;\n    cin >> t;\n    cout << s.reverseString(t) << endl;\n    return 0;\n}"}, {"instruction": "Write a Python function `fibonacci` that computes the fibonacci sequence up to the nth term."}, {"instruction": "Write a Python function that calculates the average of integers in a vector."}, {"instruction": "Write Python code that returns the average value of the elements in a vector.\n/include/gs/gs_game.h\n/*\n * GS_GAME.H\n *\n * Header file for the GameSession class.\n *\n * Author:  ()\n */\n\n#ifndef GS_GAME_H\n#define GS_GAME_H\n\n#include <string>\n#include <vector>\n\n#include \"gs_player.h\"\n#include \"gs_util.h\"\n\nnamespace gamesession {\n\nusing std::string;\nusing std::vector;\n\nclass GameSession {\npublic:\n    GameSession();\n    GameSession(const vector<Player>& players);\n\n    int getRoundDuration();\n    void setRoundDuration(int duration);\n\n    int getRoundNumber();\n    void setRoundNumber(int round);\n\n    const vector<Player>& getPlayers();\n    void setPlayers(const vector<Player>& players);\n\n    bool isPlayerTurn(int playerIndex);\n    bool isPlayerTurn(const string& player);\n\n    const GameSession& operator=(const GameSession& other);\n\nprivate:\n    int roundNumber;\n    int roundDuration;\n    vector<Player> players;\n};\n\n} // namespace gamesession\n\n#endif // GS_GAME_H\n/include/gs/gs_player.h\n/*\n * GS_PLAYER.H\n *\n * Header file for the Player class.\n *\n * Author:  ()\n */\n\n#ifndef GS_PLAYER_H\n#define GS_PLAYER_H\n\n#include <iostream>\n#include <string>\n\nnamespace gamesession {\n\nusing std::string;\n\nclass Player {\npublic:\n    Player();\n    Player(const string& name);\n    Player(const string& name, int wins);\n\n    void setName(const string& name);\n    void setWins(int wins);\n\n    string getName();\n    int getWins();\n\n    const Player& operator=(const Player& other);\n    bool operator==(const Player& other) const;\n    bool operator!=(const Player& other) const;\n\n    friend std::ostream& operator<<(std::ostream& out, const Player& player);\n\nprivate:\n    string name;\n    int wins;\n};\n\n} // namespace gamesession\n\n#endif // GS_PLAYER_H\n/include/gs/gs_util.h\n/*\n * GS_UTIL.H\n *\n * Header file for miscellaneous utility classes.\n *\n * Author:  ()\n */\n\n#ifndef GS_UTIL_H\n#define GS_UTIL_H\n\n#include <string>\n#include <vector>\n\nnamespace gamesession {\n\nusing std::string;\nusing std::vector;\n\nunsigned int argmax(const vector<unsigned int>& values);\nunsigned int argmin(const vector<unsigned int>& values);\nunsigned int argmin(const vector<unsigned int>& values, unsigned int n);\n\nvector<unsigned int> argmax(const vector<int>& scores, unsigned int n);\nvector<unsigned int> argmin(const vector<int>& scores, unsigned int n);\nvector<unsigned int> argmin(const vector<double>& scores, unsigned int n);\n\n} // namespace gamesession\n\n#endif // GS_UTIL_H\n/docs/index.md\n# gamesession\n\nThe gamesession library provides an object-oriented interface for representing and\nmanaging classes and objects in games. It is meant to facilitate the creation and\nmanagement of game sessions in games that use player based gameplay, and where\neach player has their own game entity."}, {"instruction": "Write a C++ function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python function `isPrime` that checks if an integer is prime."}, {"instruction": "Write a Python function called `average` that returns the average of integers in a vector."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function `is_prime` that checks if a number is prime."}, {"instruction": "Create a Python wrapper for C++ functions."}, {"instruction": "Create a Python interface to a C++ API using the [pybind11](https://github.com/pybind/pybind11) library."}, {"instruction": "Create a Python function `wrapper` that is a C++ wrapper for the Lua function `G` (which takes two numbers as arguments and returns their sum)."}, {"instruction": "Write a function `average` that calculates the average of integers in a vector."}, {"instruction": "Extend the C++ example to Python using the Pybind11 library."}, {"instruction": "Write a Python function `isAnagram` that returns true if two strings are anagrams of each other."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Create a Python function `factorial` that calculates factorials using the C++ wrapper."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a function `isPrime` that checks if a number is prime using Python's ctypes module."}, {"instruction": "Write a Python function `average` that calculates the average of integers in a vector using NumPy."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function that returns the length of a string, or 0 if the string is empty."}, {"instruction": "Write a Lua binding to C++ to allow the use of C++ functions from Lua."}, {"instruction": "Write a function `fibonacci` that returns the next number of the Fibonacci sequence."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime using Python's ctypes module."}, {"instruction": "Create a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a Python function that takes a list of strings and returns the longest common prefix."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: hard\nconcepts: array processing, iteration, sorting, restructuring, multi-dimensional arrays\n\n### Task", "fingerprint": null, "content": {"code": "int main() {\n    /**1st part of the task*/\n    start_first_task();\n\n    /**\n     * 2st part of the task\n     * \u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 N \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430,\n        \u043a\u0440\u0430\u0442\u043d\u043e\u0433\u043e 5. \u0423\u0434\u0432\u043e\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0440\u0430\u0432\u043d\u044b\u0435 k. \u0415\u0441\u043b\u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 4, \u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0435 5\n        \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043a\u043e\u043d\u0435\u0446 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043d\u0435 \u043c\u0435\u043d\u044f\u044f \u043f\u043e\u0440\u044f\u0434\u043e\u043a\n        \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0447\u0430\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e\n        \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n     *\n     * */\n\n    start_second_task();\n\n    return 0;\n}", "docstring": "// push to zeros array indices of elements equal to zero", "function_name": "second_part_fourth_task"}, "id": 344, "seed": "int main() {\n    /**1st part of the task*/\n    start_first_task();\n\n    /**\n     * 2st part of the task\n     * \u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 N \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430,\n        \u043a\u0440\u0430\u0442\u043d\u043e\u0433\u043e 5. \u0423\u0434\u0432\u043e\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0440\u0430\u0432\u043d\u044b\u0435 k. \u0415\u0441\u043b\u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 4, \u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0435 5\n        \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043a\u043e\u043d\u0435\u0446 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043d\u0435 \u043c\u0435\u043d\u044f\u044f \u043f\u043e\u0440\u044f\u0434\u043e\u043a\n        \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0447\u0430\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e\n        \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n     *\n     * */\n\n    start_second_task();\n\n    return 0;\n}", "concepts": ["array processing", "iteration", "sorting", "restructuring", "multi-dimensional arrays"], "parsing_result": [{"instruction": "This is a 2x2 matrix game: there are 8 tiles (2x2 matrix) that can be arranged in any way. The tiles must be arranged in a way that no two rows are identical or two columns are identical. Write a Python program to check if this arrangement is valid."}, {"instruction": "Write a Python program that simulates a simple 2-player Rock-Paper-Scissors game."}, {"instruction": "Write a Python function `fibonacci` that returns a list of the first `20` terms of the Fibonacci sequence."}, {"instruction": "Write a Python program that reads the contents of a file and prints a summary."}, {"instruction": "Write a Python program that performs the following functions:\n- reads in an M x N array of integers\n- prints out the array as an M x N matrix\n- prints out the array transposed\n- prints out the array with the first row reversed\n- prints out the array with the first column reversed\n- prints out the array with the first diagonal reversed\n- prints out the array with the elements of the first diagonal reversed\n- prints out the array with the elements from the first row to the last column reversed"}, {"instruction": "Create a Python program that implements the Sieve of Eratosthenes to find all prime numbers up to a given integer."}, {"instruction": "Write a Python program that decrypts a hidden message in an image."}, {"instruction": "Write a Python program that reorders the rows in a 2D array by summing the elements of each row."}, {"instruction": "Write a program that finds the least common multiple (LCM) of two positive integers using the Euclid's algorithm."}, {"instruction": "Create a Python program that computes the inverse of a 2D array."}, {"instruction": "Write a Python program that accepts a string of text and builds a character count dictionary."}, {"instruction": "Write a Python program that creates a 2D array of the first 5,000 prime numbers."}, {"instruction": "Write a Python program that recreates the game of life. The rules are as follows:\n\n- Any live cell with fewer than two live neighbors dies, as if caused by under-population.\n- Any live cell with two or three live neighbors lives on to the next generation.\n- Any live cell with more than three live neighbors dies, as if by overcrowding.\n- Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction."}, {"instruction": "Write a Python program that prompts the user to enter a sequence of integers. The program then outputs the number of positive, negative, and zero integers in the sequence."}, {"instruction": "Write a Python program that takes a rectangular grid of values and transforms it into a grid of sums."}, {"instruction": "Write a Python program that computes the largest element in a given array."}, {"instruction": "Write a Python program that takes in a number `n` and prints the nth row of Pascal's Triangle."}, {"instruction": "Write a Python program that prints the prime numbers between 1 and 100."}, {"instruction": "Write a Python program that reads a 2D array of integers from a file, rearranges the rows so that the first row contains the largest values, the second row contains the second-largest values, and so on, and writes the rearranged array to a new file."}, {"instruction": "Write a Python program that computes the Fibonacci sequence."}, {"instruction": "Implement the game of Tic-Tac-Toe in python."}, {"instruction": "Write a Python script that implements a simple calculator."}, {"instruction": "Write a Python function `readMatrix` that reads a text file containing a 2D matrix into a 2D array."}, {"instruction": "Write a Python program that prints the numbers from 1 to 100. But for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\"."}, {"instruction": "Write a Python program that will display a multiplication table (12 x 12) for the numbers between 1 and 12."}, {"instruction": "Write a Python program that implements a 3-player game where the player can choose to either roll the dice or pass."}, {"instruction": "Write a Python program that simulates the Pascal's triangle."}, {"instruction": "Write a Python program that finds the longest common subsequence in a given string."}, {"instruction": "Write a Python program that calculates the number of perfect squares that fall between two integers."}, {"instruction": "Write a Python program that computes the average of the first 10,000 integers."}, {"instruction": "Write a Python program that prints the numbers from 1 to 100 (inclusive) and for multiples of 3, prints \"Fizz\" instead of the number, and for multiples of 5, prints \"Buzz\" instead of the number."}, {"instruction": "Create a Python program that prints the prime numbers less than a given integer."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: OpenGl textures, cube map, SOIL library\n\n### Task", "fingerprint": null, "content": {"code": "GLuint BindCubeTexture(const string path)\n{\n    int width, height;\n    unsigned char* image = NULL;\n    vector<string> faces;\n\n    /* \u83b7\u53d6\u7acb\u65b9\u4f53\u5404\u9762\u8def\u5f84 */\n    faces.push_back(path + \"right.jpg\");\n    faces.push_back(path + \"left.jpg\");\n    faces.push_back(path + \"top.jpg\");\n    faces.push_back(path + \"bottom.jpg\");\n    faces.push_back(path + \"back.jpg\");\n    faces.push_back(path + \"front.jpg\");\n\n    GLuint textureID;\n    glGenTextures(1, &textureID);\n    glBindTexture(GL_TEXTURE_CUBE_MAP, textureID);\n    for(GLuint i = 0;i < faces.size(); ++i)\n    {\n        image = SOIL_load_image(faces[i].c_str(), &width, &height, 0, SOIL_LOAD_RGB);\n        if(image == NULL)\n            cout << \"ERROR:: path:\" << faces[i] << \"\\n\" << endl;\n        // \u4e3a\u5404\u4e2a\u9762\u5199\u5165\u7eb9\u7406\n        glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_RGB, width, height,\n                     0, GL_RGB, GL_UNSIGNED_BYTE, image);\n        SOIL_free_image_data(image);\n    }\n    //glGenerateMipmap(GL_TEXTURE_CUBE_MAP);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);\n    glBindTexture(GL_TEXTURE_CUBE_MAP, 0);\n\n    return textureID;\n}", "docstring": "// \u8bbe\u7f6e\u7eb9\u7406\u5c5e\u6027", "function_name": "BindTexture"}, "id": 346, "seed": "GLuint BindCubeTexture(const string path)\n{\n    int width, height;\n    unsigned char* image = NULL;\n    vector<string> faces;\n\n    /* \u83b7\u53d6\u7acb\u65b9\u4f53\u5404\u9762\u8def\u5f84 */\n    faces.push_back(path + \"right.jpg\");\n    faces.push_back(path + \"left.jpg\");\n    faces.push_back(path + \"top.jpg\");\n    faces.push_back(path + \"bottom.jpg\");\n    faces.push_back(path + \"back.jpg\");\n    faces.push_back(path + \"front.jpg\");\n\n    GLuint textureID;\n    glGenTextures(1, &textureID);\n    glBindTexture(GL_TEXTURE_CUBE_MAP, textureID);\n    for(GLuint i = 0;i < faces.size(); ++i)\n    {\n        image = SOIL_load_image(faces[i].c_str(), &width, &height, 0, SOIL_LOAD_RGB);\n        if(image == NULL)\n            cout << \"ERROR:: path:\" << faces[i] << \"\\n\" << endl;\n        // \u4e3a\u5404\u4e2a\u9762\u5199\u5165\u7eb9\u7406\n        glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_RGB, width, height,\n                     0, GL_RGB, GL_UNSIGNED_BYTE, image);\n        SOIL_free_image_data(image);\n    }\n    //glGenerateMipmap(GL_TEXTURE_CUBE_MAP);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);\n    glBindTexture(GL_TEXTURE_CUBE_MAP, 0);\n\n    return textureID;\n}", "concepts": ["OpenGl textures", "cube map", "SOIL library"], "parsing_result": [{"instruction": "OpenGl textures, cube map, SOIL library"}, {"instruction": "Using Python and OpenGl, display a 3D cube with a texture image."}, {"instruction": "Write a Python program that generates an environment map with a sphere and displays it in an OpenGL window. The resulting window should appear similar to this:\n\n![example](https://i.imgur.com/y89l3fH.png)"}, {"instruction": "Write a program that displays a cube map."}, {"instruction": "Write a Python program that, given an image file, loads the image and renders a cube map that displays the image."}, {"instruction": "Write a program that displays a 3D cube mapped to a texture."}, {"instruction": "OpenGl program with texture using a cube map."}, {"instruction": "Create a program in Python that renders a cube map with 26 cube faces."}, {"instruction": "Create a program that displays a cube map."}, {"instruction": "Given a cube map and a skybox texture, write a Python program to display the cube map using a skybox."}, {"instruction": "Write a Python program that uses the SOIL library to load a cube map and display it with a texture image of a cube face."}, {"instruction": "Draw a cube using OpenGL and the cube map texture."}, {"instruction": "Write a Python program to render a textured cube map with four image files."}, {"instruction": "Write a program that renders a 3D object using the OpenGL library."}, {"instruction": "Implement a C++ program that displays a cube map with a texture."}, {"instruction": "Write a Python program to create a cube map image."}, {"instruction": "Write a Python program that draws a simple 3d cube."}, {"instruction": "Write a program that displays a rotating cube using OpenGL and the SOIL library."}, {"instruction": "Create a program that loads a texture from a file (e.g., PNG) and displays it on a cube."}, {"instruction": "Create a Python program that displays a cube using OpenGL and the SOIL library to load textures from a PNG file."}, {"instruction": "Read in a 64x64 pixel grayscale image, create a cube map, and display the image using OpenGL."}, {"instruction": "Write a Python program that displays a 3D cube with the texture of a cube map."}, {"instruction": "Write a Python program that renders a 3D cube map using PyOpenGL."}, {"instruction": "Write a Python program `pyramid` that draws a 3D pyramid using OpenGL."}, {"instruction": "Write a Python program to implement the photorealistic rendering of a cube with a cube map textured into it."}, {"instruction": "Write a Python program that renders a textured cube."}, {"instruction": "Write a Python program that displays a 3D cube using OpenGL, cube map, texture, and SOIL library."}, {"instruction": "Write a Python program that displays a 3D cube using OpenGl."}, {"instruction": "Create a Python application that renders a cube which displays a texture from the CubeMap."}, {"instruction": "Write a web-based 3D engine that renders a spinning cube in a scene with the ability to switch between a four-cube and a six-cube environment."}, {"instruction": "Create a program that displays a 3D cube with textured surfaces, using OpenGL and the SOIL library."}, {"instruction": "Write a Python program that uses OpenGL to display a rotating cube with a dynamic texture."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: static function, member function, syntax, condition\n\n### Task", "fingerprint": null, "content": {"code": "static int _cocos2d_PhysicsJointRatchet_setRatchet(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsJointRatchet *self = nullptr;\n    lua_Number arg1 = 0;       /** ratchet */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsJointRatchet\");\n    olua_check_number(L, 2, &arg1);\n\n    // void setRatchet(float ratchet)\n    self->setRatchet((float)arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "docstring": "// void setPhase(float phase)", "function_name": "_cocos2d_PhysicsJointRatchet_setPhase"}, "id": 355, "seed": "static int _cocos2d_PhysicsJointRatchet_setRatchet(lua_State *L)\n{\n    olua_startinvoke(L);\n\n    cocos2d::PhysicsJointRatchet *self = nullptr;\n    lua_Number arg1 = 0;       /** ratchet */\n\n    olua_to_cppobj(L, 1, (void **)&self, \"cc.PhysicsJointRatchet\");\n    olua_check_number(L, 2, &arg1);\n\n    // void setRatchet(float ratchet)\n    self->setRatchet((float)arg1);\n\n    olua_endinvoke(L);\n\n    return 0;\n}", "concepts": ["static function", "member function", "syntax", "condition"], "parsing_result": [{"instruction": "Create a Python function `gcf` that returns the greatest common factor of two integers, using a static function."}, {"instruction": "Write a Python function `is_prime` that takes an integer and returns true if the integer is prime, false otherwise."}, {"instruction": "Write a Python function `evenNumbers` that takes in a list of numbers and returns a new list containing only the even numbers."}, {"instruction": "Write a Python function `isPrime` that returns true if a given integer is prime."}, {"instruction": "Create a Python function `check_vowels` that takes a string and outputs the number of vowels in the string."}, {"instruction": "Write a Python function `isPrime` that returns true if a given integer is prime."}, {"instruction": "Write a Python function `average` that returns the average of a list of integers."}, {"instruction": "Create a Python function `isPrime` that takes an integer and returns true if it is a prime number, false if not."}, {"instruction": "Write a Python function `isPrime` that returns true if a given number is prime and false otherwise."}, {"instruction": "Create a Python function `isEven` that takes an integer and returns True if the number is even."}, {"instruction": "Write a Python function `is_prime` that takes a non-negative integer `n` and returns `True` if `n` is prime, `False` otherwise."}, {"instruction": "Write a Python function `is_palindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `isPrime` that returns true if a given integer is prime."}, {"instruction": "Implement a Python function `max` that returns the maximum of two numbers."}, {"instruction": "Write a class `Rectangle` that contains two functions, `area` and `perimeter`, that calculate the area and perimeter of a rectangle."}, {"instruction": "Create a Python function `isPrime` that returns True if a given integer is prime, otherwise it returns False."}, {"instruction": "Create a Python function `calc` that takes three parameters, `a`, `b`, and `op`, where `op` is an operator (`+`, `-`, `/`, or `*`). If the operator is not valid, return `None`. Otherwise, calculate and return the result."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `is_palindrome` that returns True if a string is a palindrome and False otherwise."}, {"instruction": "Create a Python function `getMax` that returns the maximum element in a list of integers."}, {"instruction": "Write a Python function `isPrime` that takes a non-negative integer and returns true if it is a prime number, false otherwise."}, {"instruction": "Write a Python program to determine if a given integer is a prime number."}, {"instruction": "Create a Python function `factorial` that takes a non-negative integer as input and returns its factorial as output."}, {"instruction": "Create a Python function `isPalindrome` that takes a string and returns true if the string is a palindrome."}, {"instruction": "Create a Python function `isOdd` that takes an integer and returns `True` if the integer is odd, `False` otherwise."}, {"instruction": "Write a Python function `sum_nonzero` that takes a list of numbers and returns the sum of all numbers that are not zero."}, {"instruction": "Write a Python function named `factorial` that calculates the factorial of a non-negative integer."}, {"instruction": "Write a Python function `has_duplicates` that takes a list as a parameter and returns True if there is any element that appears more than once."}, {"instruction": "Write a Python function `isPrime` to determine whether an integer is prime."}, {"instruction": "Create a Python function `mult` that takes two numbers as arguments and returns their product."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: hard\nconcepts: data types, SOAP-based web services, XML parsing\n\n### Task", "fingerprint": null, "content": {"code": "SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)\n{\n\tconst char *soap_tmp_faultcode;\n\tsoap_tmp_faultcode = soap_QName2s(soap, a->faultcode);\n\t(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_afip_SOAP_ENV__Fault), type))\n\t\treturn soap->error;\n\tif (soap_out__QName(soap, \"faultcode\", -1, (char*const*)(void*)&soap_tmp_faultcode, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"faultstring\", -1, (char*const*)&a->faultstring, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"faultactor\", -1, (char*const*)&a->faultactor, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Detail(soap, \"detail\", -1, &a->detail, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Code(soap, \"SOAP-ENV:Code\", -1, &a->SOAP_ENV__Code, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Reason(soap, \"SOAP-ENV:Reason\", -1, &a->SOAP_ENV__Reason, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"SOAP-ENV:Node\", -1, (char*const*)&a->SOAP_ENV__Node, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"SOAP-ENV:Role\", -1, (char*const*)&a->SOAP_ENV__Role, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Detail(soap, \"SOAP-ENV:Detail\", -1, &a->SOAP_ENV__Detail, \"\"))\n\t\treturn soap->error;\n\treturn soap_element_end_out(soap, tag);\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_serialize_SOAP_ENV__Fault"}, "id": 358, "seed": "SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)\n{\n\tconst char *soap_tmp_faultcode;\n\tsoap_tmp_faultcode = soap_QName2s(soap, a->faultcode);\n\t(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */\n\tif (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_afip_SOAP_ENV__Fault), type))\n\t\treturn soap->error;\n\tif (soap_out__QName(soap, \"faultcode\", -1, (char*const*)(void*)&soap_tmp_faultcode, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"faultstring\", -1, (char*const*)&a->faultstring, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"faultactor\", -1, (char*const*)&a->faultactor, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Detail(soap, \"detail\", -1, &a->detail, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Code(soap, \"SOAP-ENV:Code\", -1, &a->SOAP_ENV__Code, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Reason(soap, \"SOAP-ENV:Reason\", -1, &a->SOAP_ENV__Reason, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"SOAP-ENV:Node\", -1, (char*const*)&a->SOAP_ENV__Node, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_string(soap, \"SOAP-ENV:Role\", -1, (char*const*)&a->SOAP_ENV__Role, \"\"))\n\t\treturn soap->error;\n\tif (soap_out_PointerToSOAP_ENV__Detail(soap, \"SOAP-ENV:Detail\", -1, &a->SOAP_ENV__Detail, \"\"))\n\t\treturn soap->error;\n\treturn soap_element_end_out(soap, tag);\n}", "concepts": ["data types", "SOAP-based web services", "XML parsing"], "parsing_result": [{"instruction": "Write a Python program that downloads and parses an XML file from a website, and determines the number of times each word in the XML file occurs."}, {"instruction": "Write a Python script that allows a user to perform a variety of calculations on a line of XML data, using a SOAP-based web service for data retrieval."}, {"instruction": "Write a Python program that calls the Web service `http://wsf.cdyne.com/WeatherWS/Weather.asmx?op=GetCityWeatherByZIP` and returns the current weather conditions of a given ZIP code."}, {"instruction": "Create a Python program that downloads the current month's weather forecast from the National Weather Service website and displays the relevant weather details."}, {"instruction": "Create a Python program that reads a SOAP-based web service, parses a given XML file, and outputs the data to a JSON file."}, {"instruction": "Create a Python program that counts the number of vowels in an XML document."}, {"instruction": "Write a Python application that queries a SOAP-based web service that returns the price of a given stock symbol."}, {"instruction": "Write a Python script that retrieves the titles and link URLs of the most recent 100 [Hacker News](https://news.ycombinator.com/) stories."}, {"instruction": "Create a Python program that returns a list of items in the First World War's photo albums.\n/tasks.md\n# Coding Tasks"}, {"instruction": "Create a Python program that utilizes SOAP-based web services and XML parsing to return information about a given stock ticker, including the price, change, and change % of that given stock."}, {"instruction": "Write a program in Python that accesses the [USDA Food Composition Database API][usda-fdc] and provides basic information on a given food type.\n\n[usda-fdc]: https://fdc.nal.usda.gov/api-guide.html"}, {"instruction": "Write a Python program that reads a file and outputs a list of the names of all the countries mentioned in the file, as well as the number of occurrences of each country."}, {"instruction": "Create a Python program that, given a web service URL, downloads and parses the XML data returned by that service. Your program should create a Python module that exposes a function, `get_data`, that takes a web service URL as its first argument and returns parsed XML data as a Python list."}, {"instruction": "Create a Python program that retrieves a list of companies from a SOAP-based web service and saves them to an XML file."}, {"instruction": "Create a Python program that scrapes the product descriptions and prices of all products on Page 1 of the [BestBuy search engine](https://www.bestbuy.com/site/dji-mavic-pro-drone-kit/-/1481980)."}, {"instruction": "Create a Python program that connects to a web service, parses the XML response, and prints the data."}, {"instruction": "Create a Python program that uses SOAP-based web services (e.g., Wikipedia API, WolframAlpha API, Google Search API) to retrieve and display the top 10 wiki pages matching a given query."}, {"instruction": "Write a Python program that uses the module `lxml` to parse the XML contained at the URL [http://www.webservicex.net/uszip.asmx](http://www.webservicex.net/uszip.asmx)."}, {"instruction": "Write a Python program that scrapes data from an online repository of football matches and teams."}, {"instruction": "Write a Python program that:\n\n- connects to a SOAP-based web service at the [University of Washington's school of computer science](https://www.watson.uwaterloo.ca/faculty-and-research/computational-biology/pbmc/)\n- downloads a file from the web service\n- parses the XML file and prints the number of words in the XML file"}, {"instruction": "Write a Python program that retrieves the title of a given book from the Booker API using its ISBN, and outputs the retrieved title to the console."}, {"instruction": "Write a program that connects to an online service and downloads the current weather forecast for a given city."}, {"instruction": "Write a program that fetches data from an XML web service in response to user input."}, {"instruction": "Create a Python program that can scrape data from a web page."}, {"instruction": "Create a Python program that uses an [RSS feed](https://en.wikipedia.org/wiki/RSS) to fetch news articles."}, {"instruction": "Create a Python program that parses an XML file and outputs its contents./exercises/rosalind/src/rosalind_dna.py\nfrom rosalind.src.rosalind import gen_file_dict\n\ndef dna_count(dna_str, nucleotide):\n    \"\"\"\n    Generate a dictionary of nucleotide counts.\n    \"\"\"\n    count_dict = {}\n    for nuc in n dna_count(dna_str, 'G') + dna_count(dna_str, 'C')\n\ndna_str = gen_file_dict('dna.txt').values()[0]\nprint dna_count(dna_str, 'A'), dna_count(dna_str, 'C'), dna_count(dna_str, 'G'), dna_count(dna_str, 'T')\nnucleotide:\n        count_dict[nuc] = dna_str.count(nuc)\n    return count_dict\n\ndef gc_ratio(dna_str):\n    retur/exercises/rosalind/src/rosalind_rna.py\nfrom rosalind.src.rosalind import gen_file_dict\n\ndef rna_str(dna_str):\n    return dna_str.replace('T', 'U')\n\ndna_str = gen_file_dict('rna.txt').values()[0]\nprint rna_str\nprint rna_str.replace('T', 'U')\n/exercises/rosalind/src/rosalind.py\nimport os\n\ndef gen_file_dict(file_name):\n    \"\"\"\n    Generate a dictionary of strings from a file.\n    \"\"\"\n    file_path = os.path.join(os.path.dirname(__file__), '../data/', file_name)\n    return {k:v.strip() for k,v in enumerate(open(file_path).readlines())}"}, {"instruction": "Create a Python program that uses the [eBay Trading API](https://developer.ebay.com/devzone/shopping/docs/CallRef/index.html) to retrieve the price of an item from the given item ID."}, {"instruction": "Create a program that uses SOAP to make a live weather forecast web service request for any given city in the United States."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: cache, dataflow, FIFO, pipelined computation\n\n### Task", "fingerprint": null, "content": {"code": "inline hw_uint<16> mpr16b_32_8_rd15_select(in_cache& in, int d0, int d1, int d2, int dynamic_address) {\n#ifdef __VIVADO_SYNTH__\n#endif //__VIVADO_SYNTH__\n  // mpr16b_32_8_rd15 read pattern: { mpr16b_32_8_update_0[d0, d1, d2] -> in[7 + 8d0, 1 + 2d1, d2] : 0 <= d0 <= 15 and 0 <= d1 <= 63 and 0 <= d2 <= 63 }\n  // Read schedule : { mpr16b_32_8_update_0[d0, d1, d2] -> [d2, 1 + 2d1, d0, 2] : 0 <= d0 <= 15 and 0 <= d1 <= 63 and 0 <= d2 <= 63 }\n  // Write schedule: { in_update_0[d0, d1, d2] -> [d2, d1, d0, 1] : 0 <= d0 <= 15 and 0 <= d1 <= 127 and 0 <= d2 <= 63 }\n  auto value_in_in_update_0_write7 = in.in_in_update_0_write7_merged_banks_2.peek_0();\n  return value_in_in_update_0_write7;\n  return 0;\n}", "docstring": "// Write schedule: { in_update_0[d0, d1, d2] -> [d2, d1, d0, 1] : 0 <= d0 <= 15 and 0 <= d1 <= 127 and 0 <= d2 <= 63 }", "function_name": "mpr16b_32_8_rd14_select"}, "id": 359, "seed": "inline hw_uint<16> mpr16b_32_8_rd15_select(in_cache& in, int d0, int d1, int d2, int dynamic_address) {\n#ifdef __VIVADO_SYNTH__\n#endif //__VIVADO_SYNTH__\n  // mpr16b_32_8_rd15 read pattern: { mpr16b_32_8_update_0[d0, d1, d2] -> in[7 + 8d0, 1 + 2d1, d2] : 0 <= d0 <= 15 and 0 <= d1 <= 63 and 0 <= d2 <= 63 }\n  // Read schedule : { mpr16b_32_8_update_0[d0, d1, d2] -> [d2, 1 + 2d1, d0, 2] : 0 <= d0 <= 15 and 0 <= d1 <= 63 and 0 <= d2 <= 63 }\n  // Write schedule: { in_update_0[d0, d1, d2] -> [d2, d1, d0, 1] : 0 <= d0 <= 15 and 0 <= d1 <= 127 and 0 <= d2 <= 63 }\n  auto value_in_in_update_0_write7 = in.in_in_update_0_write7_merged_banks_2.peek_0();\n  return value_in_in_update_0_write7;\n  return 0;\n}", "concepts": ["cache", "dataflow", "FIFO", "pipelined computation"], "parsing_result": [{"instruction": "Write a Python function `cache` that returns a new function that stores up to a fixed number of the most recent function calls."}, {"instruction": "Create a Python function `pipeline` that takes two functions and executes them with the output of the first function's return value as the input of the second."}, {"instruction": "Create a Python function `cache` that caches the return value of a function."}, {"instruction": "Create a Python function `fibonacci` that returns the nth Fibonacci number using pipelined computation."}, {"instruction": "Implement a caching system in Python with a single global cache that can be emptied and the cache limit set. The system must satisfy the following requirements:\n1. The cache can hold up to `n` items.\n2. Each item has a key and a value.\n3. Items are stored in FIFO order.\n4. Items can be cached, and when cached, their value is not updated.\n5. Items can be removed from the cache (either old items or specific items).\n6. The cache can be emptied, and can be cleared of specific items."}, {"instruction": "Create a cache in Python that implements a FIFO policy for access and replacement of elements."}, {"instruction": "Create a Python function `cache` that memoizes function calls."}, {"instruction": "Create a Python function `recursiveFibonacciCache` that calculates the nth Fibonacci number using recursion and a cache."}, {"instruction": "Design an algorithm to compute the nth Fibonacci number."}, {"instruction": "Create a Python function `sumOfDigits` that calculates the sum of the digits of a non-negative integer."}, {"instruction": "Create a Python function `pipeline` that computes a series of functions in a pipelined order."}, {"instruction": "Create a Python function `cache` that takes a function and returns a cached version of the function."}, {"instruction": "Write a Python function `lru_cache` that returns a cache decorator that takes an integer argument `maxsize` and returns a cached function that automatically evicts the least recently used (LRU) items when the cache has run out of space."}, {"instruction": "Write a Python function `cache` that implements a simple cache."}, {"instruction": "Write a Python function `computeMatrixProduct` that computes the matrix product of two square matrices."}, {"instruction": "Implement a cache that can hold fixed number of elements and efficiently retrieve or store elements in O(1) time."}, {"instruction": "Write a Python function `run_simulation` that simulates a cache memory system with a single processor."}, {"instruction": "Create a Python function `cache` that takes a function and returns a new function that caches the output of the given function."}, {"instruction": "Write a Python function `bloomFilter` that implements Bloom filters."}, {"instruction": "Given a series of inputs, the output of which depends on the state of the cache, create a cache data structure that stores a finite number of keys and values."}, {"instruction": "Create a Python function `fibonacci` that returns the nth Fibonacci number using a cache and the dataflow pattern."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci number using a cache."}, {"instruction": "Create a Python function `cache` that returns a cache function with a maximum capacity."}, {"instruction": "Write a function `cache` that takes a function `f` and a cache `c` as parameters and returns a function that is equivalent to `f` but which uses `c` to store intermediate results."}, {"instruction": "Create a Python function `fizzbuzz` that prints the numbers from 1 to 100. However:\n- For multiples of three print \"Fizz\" instead of the number\n- For the multiples of five print \"Buzz\".\n- For numbers which are multiples of both three and five print \"FizzBuzz\"."}, {"instruction": "Implement a cache that caches the last 1000 values of a function f(x), with the oldest value at the front of the cache."}, {"instruction": "Create a Python function `fibonacci` that returns the nth Fibonacci number using a cache."}, {"instruction": "Create a Python function `fibonacci` that returns the nth Fibonacci number using a cache to reduce the number of recursive calls."}, {"instruction": "Implement a cache in Python using the `collections.defaultdict` class."}, {"instruction": "Create a Python function `fizzBuzz` that prints the numbers from 1 to 100. However, for multiples of three, it should print \"Fizz\" instead of the number. For the multiples of five, it should print \"Buzz\". For numbers which are multiples of both three and five, it should print \"FizzBuzz\"."}, {"instruction": "Write a Python function `lru_cache` that implements a least recently used cache."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: cv::RotatedRect functions, cv::Mat operations, cv::Mat iteration, vector operations, std::vector iteration, cv::Point2f operations, cv::ellipse function, cv::drawContours function\n\n### Task", "fingerprint": null, "content": {"code": "cv::RotatedRect rmvTheDot( cv::Mat& labeledObjs){\n\n    /// Find contours\n    cv::Mat hierarchy;\n    std::vector< std::vector<cv::Point> > contours;\n    cv::Mat threshold_output = labeledObjs.clone(); //only reference, I guess\n    findContours( threshold_output, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0) );\n\n    /// Find the rotated rectangles and ellipses for each contour\n    std::vector<cv::RotatedRect> minRect( contours.size() );\n    std::vector<cv::RotatedRect> minEllipse( contours.size() );\n    std::vector<double> dotRat( contours.size(), 0.0 );\n    std::vector<int> dotDet( contours.size(), 0 );\n\n    int cntDet=0;\n    for( int i = 0; i < contours.size(); i++ ){\n        minRect[i] = minAreaRect( cv::Mat(contours[i]) );\n        if( contours[i].size() > 5 ){\n            minEllipse[i] = fitEllipse( cv::Mat(contours[i]) );\n\n            cv::Size s(minEllipse[i].size);\n            float sratio = (s.width/(float)s.height);\n            dotRat[i] = sratio;\n            int mxs = (s.width>s.height) ? s.width : s.height;\n\n            dotDet[i] = ( (sratio>=DOT_SIZE_RATIO) && (sratio<=1/DOT_SIZE_RATIO ) &&\\\n                          ((mxs)>DOT_SIZE_MINOMAX) && ((mxs)<DOT_SIZE_MAXPMAX)  );\n            cntDet += dotDet[i];\n            std::cerr << \"s[\"<<i<<\"]: \" << s << \" | ratio: \" << sratio << \" | det: \" << (int)dotDet[i] << \"\\n\";\n        }\n     }\n\n\n    ////In case not found\n    if(cntDet==0){\n        cv::RotatedRect empt;\n        //(cv::Point(0,0), cv:Size(0,0), 0);\n\n        return empt;\n    }\n\n    ////Selecting the dot\n    int idet=-1;\n    double mn=99999;\n    if(cntDet>1){ //multiple\n\n        std::cerr << \"dotRat.size=\" << dotRat.size() <<\"\\n\";\n\n        for(int i=0; i<dotRat.size(); i++ ){\n            if(dotDet[i]){\n                dotRat[i] = fabs(1.0-dotRat[i]);\n                std::cerr << \"new[\" << i<<\"]=\" << dotRat[i] << \" \";\n                if( mn > dotRat[i] ){\n                    mn = dotRat[i];\n                    idet = i;\n                    std::cerr << \"new idet\";\n                }\n                std::cerr << \"\\n\";\n            }\n        }\n    }else{\n        for(int i=0; i<dotDet.size(); i++ ){\n            if(dotDet[i]){\n                idet = i;\n                break;\n            }\n        }\n\n    }\n\n    ///Removing the dot from objects mask\n    labeledObjs(minRect[idet].boundingRect()) = 0;\n\n    return minRect[idet];\n\n    /*\n            /// Draw contours + rotated rects + ellipses\n            RNG rng;\n            cv::Mat drawing = cv::Mat::zeros( threshold_output.size(), CV_8UC3 );\n            for( int i = 0; i< contours.size(); i++ )\n               {\n                 //Scalar color = Scalar( 100, 000, 220 );\n                 Scalar color = Scalar( rng.uniform(0,255), rng.uniform(0,255), rng.uniform(0,255) );\n\n                 // contour\n                 drawContours( drawing, contours, i, color, 1, 8, std::vector<Vec4i>(), 0, Point() );\n                 // ellipse\n                 ellipse( drawing, minEllipse[i], color, 2, 8 );\n                 // rotated rectangle\n                 Point2f rect_points[4]; minRect[i].points( rect_points );\n                 for( int j = 0; j < 4; j++ )\n                    line( drawing, rect_points[j], rect_points[(j+1)%4], color, 1, 8 );\n               }\n\n            imshow(\"drawcircs\", drawing);\n            moveWindow(\"drawcircs\", 800, 1500 );\n            cv::waitKey(0);\n    */\n}", "docstring": "//(int)hasObj[0];", "function_name": "filterObjs4Dial"}, "id": 363, "seed": "cv::RotatedRect rmvTheDot( cv::Mat& labeledObjs){\n\n    /// Find contours\n    cv::Mat hierarchy;\n    std::vector< std::vector<cv::Point> > contours;\n    cv::Mat threshold_output = labeledObjs.clone(); //only reference, I guess\n    findContours( threshold_output, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0) );\n\n    /// Find the rotated rectangles and ellipses for each contour\n    std::vector<cv::RotatedRect> minRect( contours.size() );\n    std::vector<cv::RotatedRect> minEllipse( contours.size() );\n    std::vector<double> dotRat( contours.size(), 0.0 );\n    std::vector<int> dotDet( contours.size(), 0 );\n\n    int cntDet=0;\n    for( int i = 0; i < contours.size(); i++ ){\n        minRect[i] = minAreaRect( cv::Mat(contours[i]) );\n        if( contours[i].size() > 5 ){\n            minEllipse[i] = fitEllipse( cv::Mat(contours[i]) );\n\n            cv::Size s(minEllipse[i].size);\n            float sratio = (s.width/(float)s.height);\n            dotRat[i] = sratio;\n            int mxs = (s.width>s.height) ? s.width : s.height;\n\n            dotDet[i] = ( (sratio>=DOT_SIZE_RATIO) && (sratio<=1/DOT_SIZE_RATIO ) &&\\\n                          ((mxs)>DOT_SIZE_MINOMAX) && ((mxs)<DOT_SIZE_MAXPMAX)  );\n            cntDet += dotDet[i];\n            std::cerr << \"s[\"<<i<<\"]: \" << s << \" | ratio: \" << sratio << \" | det: \" << (int)dotDet[i] << \"\\n\";\n        }\n     }\n\n\n    ////In case not found\n    if(cntDet==0){\n        cv::RotatedRect empt;\n        //(cv::Point(0,0), cv:Size(0,0), 0);\n\n        return empt;\n    }\n\n    ////Selecting the dot\n    int idet=-1;\n    double mn=99999;\n    if(cntDet>1){ //multiple\n\n        std::cerr << \"dotRat.size=\" << dotRat.size() <<\"\\n\";\n\n        for(int i=0; i<dotRat.size(); i++ ){\n            if(dotDet[i]){\n                dotRat[i] = fabs(1.0-dotRat[i]);\n                std::cerr << \"new[\" << i<<\"]=\" << dotRat[i] << \" \";\n                if( mn > dotRat[i] ){\n                    mn = dotRat[i];\n                    idet = i;\n                    std::cerr << \"new idet\";\n                }\n                std::cerr << \"\\n\";\n            }\n        }\n    }else{\n        for(int i=0; i<dotDet.size(); i++ ){\n            if(dotDet[i]){\n                idet = i;\n                break;\n            }\n        }\n\n    }\n\n    ///Removing the dot from objects mask\n    labeledObjs(minRect[idet].boundingRect()) = 0;\n\n    return minRect[idet];\n\n    /*\n            /// Draw contours + rotated rects + ellipses\n            RNG rng;\n            cv::Mat drawing = cv::Mat::zeros( threshold_output.size(), CV_8UC3 );\n            for( int i = 0; i< contours.size(); i++ )\n               {\n                 //Scalar color = Scalar( 100, 000, 220 );\n                 Scalar color = Scalar( rng.uniform(0,255), rng.uniform(0,255), rng.uniform(0,255) );\n\n                 // contour\n                 drawContours( drawing, contours, i, color, 1, 8, std::vector<Vec4i>(), 0, Point() );\n                 // ellipse\n                 ellipse( drawing, minEllipse[i], color, 2, 8 );\n                 // rotated rectangle\n                 Point2f rect_points[4]; minRect[i].points( rect_points );\n                 for( int j = 0; j < 4; j++ )\n                    line( drawing, rect_points[j], rect_points[(j+1)%4], color, 1, 8 );\n               }\n\n            imshow(\"drawcircs\", drawing);\n            moveWindow(\"drawcircs\", 800, 1500 );\n            cv::waitKey(0);\n    */\n}", "concepts": ["cv::RotatedRect functions", "cv::Mat operations", "cv::Mat iteration", "vector operations", "std::vector iteration", "cv::Point2f operations", "cv::ellipse function", "cv::drawContours function"], "parsing_result": [{"instruction": "Create a Python class `Polygon` that provides a method `area` that returns the area of the polygon using `cv::RotatedRect::area`."}, {"instruction": "Write a Python class `Ellipse` that constructs an ellipse from a given input set of points."}, {"instruction": "Create a Python class called `Rectangle` that takes an ordered pair of integers as arguments and is able to calculate its area and perimeter."}, {"instruction": "Implement a RotatedContour class that has the following attributes and methods:\n- `RotatedContour(cv::RotatedRect rr)`: given a RotatedRect, picks out the contour points and stores them in a std::vector.\n- `double getArea()`: returns the area of the contour.\n- `double getPerimeter()`: returns the perimeter of the contour.\n- `cv::RotatedRect getRotatedRect()`: returns the RotatedRect that can be used to draw the contour.\n- `std::vector<cv::Point2f> getContourPoints()`: returns the contour points as a vector.\n- `void drawContour(cv::Mat img, int color)`: draws the contour on the image using the provided color."}, {"instruction": "Create a Python class `Quadrilateral` that represents a quadrilateral."}, {"instruction": "Write a Python class `RotatedRectangle` that stores a rotated rectangle in an image. The class should support the following operations:\n- `__init__`: initializes the rectangle from the image and the coordinates of the rectangle's top-left corner\n- `area`: returns the area of the rectangle\n- `perimeter`: returns the perimeter of the rectangle\n- `contains`: returns true if the point is inside the rectangle, false otherwise\n- `draw`: draws a green ellipse with the given radius around the rectangle\n- `drawContour`: draws a green contour around the rectangle\n- `drawAll`: draws both the green ellipse and the green contour"}, {"instruction": "Implement the `ellipses` class in Python that draws ellipses based on a series of `RotatedRect` objects."}, {"instruction": "Write a Python function `alignBoundingBoxes` that aligns the bounding boxes of two sets of keypoints that are extracted from the same image."}, {"instruction": "Create a Python class `RotatedRectangle` that encapsulates two `cv::RotatedRect` objects together."}, {"instruction": "Create a Python class `Rectangle` that stores a rectangle's top-left corner and bottom-right corner coordinates."}, {"instruction": "Create a Python class `RotatedRect` that represents a rotated rectangle."}, {"instruction": "Create a Python class `DisplayROI` that takes an image and a vector of RotatedRect objects as arguments. The class should use cv::drawContours to draw the image on the screen with the bounding boxes outlined in each RotatedRect (as if you are using a rectangle sensor). The class should have methods `update` and `display` that allow you to update the image with the bounding boxes and display the image."}, {"instruction": "Create a Python class that represents a RotatedRect."}, {"instruction": "Implement the following functions in Python.\n\n```\ndef rotateImage(img, angle):\n    # preprocess the image and convert it to grayscale\n    img = cv.GaussianBlur(img, (5, 5), 0)\n    img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)\n\n    # apply edge detection to the image\n    edges = cv.Canny(img, 50, 150, apertureSize=3)\n\n    # find the contours in the image\n    cnts = cv.findContours(edges, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)\n    cnts = cnts[0] if len(cnts) == 2 else cnts[1]\n\n    # find the largest contour in the image and initialize the rotated rectangle\n    max_area = 0\n    for c in cnts:\n        area = cv.contourArea(c)\n        if area > max_area:\n            max_area = area\n            max_cnt = c\n\n    box = cv.minAreaRect(max_cnt)\n    box = cv.cv.BoxPoints(box)\n    box = np.int0(box)\n\n    # rotate the image and return it\n    return cv.getRectSubPix(img, box, (img.shape[1], img.shape[0]))\n```"}, {"instruction": "Create a Python class `RotatedRect` that implements a rotated rectangle."}, {"instruction": "Write a Python class called `ImageAnalyzer` that contains methods to analyze a 2D image:\n\n- `rotateImage` rotates an image by 90 degrees clockwise\n- `applyMorphologicalTransformation` applies one of the following morphological transformations: erosion, dilation, opening, closing, gradient, to one image\n- `findContours` finds all contours in the image and returns them as a list\n- `findBoundingRectangles` finds the bounding rectangles around all contours in the image and returns them as a list\n- `findCircles` finds all circles in the image and returns them as a list\n- `drawContours` draws each contour as a different color\n- `drawBoundingRectangles` draws each bounding rectangle as a different color\n- `drawCircles` draws each circle as a different color"}, {"instruction": "Write a Python class `RotatedRect` that implements the `cv::RotatedRect` class, including all its methods, except those that require parameters."}, {"instruction": "Given a binary image, find any rotated rectangle that encloses the largest area of 1 pixels."}, {"instruction": "Write a Python class `RotatedRect` that represents a rotated rectangle in the image plane."}, {"instruction": "Write a Python class `ContourFinder` that finds contours in a binary image."}, {"instruction": "Write a Python class `Quadrilateral` that implements a quadrilateral geometric object."}, {"instruction": "Create a Python class `RotatedRect` that implements the [cv::RotatedRect](https://docs.opencv.org/4.3.0/d3/dc0/classcv_1_1RotatedRect.html) class."}, {"instruction": "Create a `Polygon` class that implements a polygon."}, {"instruction": "Create a Python class `EllipseDetector` that finds ellipses in an image."}, {"instruction": "Write a Python program to display the rotated ellipse and the contours of a given image."}, {"instruction": "Given a vector of points, implement a class `SkewedRectangles` that determines if the vector of points is a set of rectangles arranged in a skewed shape with the center of the rectangle at (0, 0)."}, {"instruction": "Write a Python class `RotatedRect` that implements the `cv::RotatedRect` class."}, {"instruction": "Implement a class `RotatedRect` that implements a rotated rectangle and supports calculating the area, perimeter, bounding rectangle, and centroid."}, {"instruction": "Create a Python class `BallTracker` that tracks the center of an object."}, {"instruction": "Create a Python class `RotatedRect` that implements the functions `area`, `perimeter`, `isConvex`, `boundingRect`, and `minAreaRect`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: string parsing, string traversal, bitwise operators\n\n### Task", "fingerprint": null, "content": {"code": "fastfloat_really_inline uint32_t  parse_eight_digits_unrolled(uint64_t val) {\n  const uint64_t mask = 0x000000FF000000FF;\n  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)\n  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)\n  val -= 0x3030303030303030;\n  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;\n  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;\n  return uint32_t(val);\n}", "docstring": "// handle overflow", "function_name": "large_add_from"}, "id": 365, "seed": "fastfloat_really_inline uint32_t  parse_eight_digits_unrolled(uint64_t val) {\n  const uint64_t mask = 0x000000FF000000FF;\n  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)\n  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)\n  val -= 0x3030303030303030;\n  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;\n  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;\n  return uint32_t(val);\n}", "concepts": ["string parsing", "string traversal", "bitwise operators"], "parsing_result": [{"instruction": "Write a Python program that prints the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d."}, {"instruction": "Write a Python program that takes a string containing a mixture of digits and letters and returns the number of digits and the number of letters."}, {"instruction": "Write a Python program that reads a string and parses it into a dictionary."}, {"instruction": "Create a Python program that inputs a line of text and outputs whether or not the text contains a capital letter."}, {"instruction": "Create a Python program that sums the integers in a string of integers."}, {"instruction": "Create a function `sum_digits` that adds the digits of a positive integer."}, {"instruction": "Write a Python program that takes an input string of integers and a number `k`. The program should return the number of substrings of length `k` that are equal to `k`."}, {"instruction": "Write a Python program that reads a text file and writes it to a new file with all capital letters."}, {"instruction": "Write a Python program that prompts the user for a string, and then prints the first and last characters of that string."}, {"instruction": "Write a Python program that reverses a string."}, {"instruction": "Write a Python program that calculates the complementary DNA sequence of a given DNA sequence."}, {"instruction": "Write a Python program that takes a string of lowercase letters and shifts each letter by a given offset. The offset is a non-negative integer less than 26. Assume the string only contains lowercase letters and spaces."}, {"instruction": "Write a program in Python that converts a hexadecimal string to a decimal integer."}, {"instruction": "Write a Python function that displays the number of occurrences of each word in a sentence."}, {"instruction": "Write a Python program that accepts a string and returns an integer representing the number of capital letters in the string."}, {"instruction": "Implement a function `isBalanced` that returns `True` if a string of parenthesis is balanced, and `False` otherwise."}, {"instruction": "Write a Python program that prints the first 10,000 prime numbers."}, {"instruction": "Write a Python program that prints the numbers from 1 to 100. But for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\"."}, {"instruction": "Write a Python function `longest_palindrome` that returns the longest palindrome substring in a given string."}, {"instruction": "Write a Python program that reads a file, counts the number of words in the file, and prints the average word length."}, {"instruction": "Write a Python program that prints the Fibonacci sequence up to a specified limit."}, {"instruction": "Write a Python function `parse_url` that returns the hostname, domain, subdomain, and path for a given URL."}, {"instruction": "Create a Python function that accepts two integers, `n` and `m`, and returns the sum of the numbers between `n` and `m`."}, {"instruction": "Write a Python program that converts from Celsius to Fahrenheit."}, {"instruction": "Implement a Python function `X` that prints the sum of numbers in a text file."}, {"instruction": "Create a Python program that converts a binary string into an integer."}, {"instruction": "Create a Python program that prints the first 100 primes."}, {"instruction": "Write a Python program that prints all combinations of digits 1-9 that do not add up to 12."}, {"instruction": "Write a Python program that reads a text file and generates a histogram from its words."}, {"instruction": "Write a Python function `countDigits` that counts the number of digits in a string."}, {"instruction": "Write a Python program that reads a string representing a number, and returns an integer."}, {"instruction": "Write a Python program that prints the first occurrence of a substring in a given string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: List of X509ChainStatus, List in C#, C++\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_IList_Insert_mA598B2B5AAC3779A06B3CF9243AD90C7451D6667_gshared (List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 * __this, int32_t ___index0, RuntimeObject * ___item1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeObject * L_0 = ___item1;\n\t\t((  void (*) (RuntimeObject *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 9)->methodPointer)((RuntimeObject *)L_0, (int32_t)((int32_t)20), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 9));\n\t}\n\nIL_0008:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tint32_t L_1 = ___index0;\n\t\tRuntimeObject * L_2 = ___item1;\n\t\tNullCheck((List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *)__this);\n\t\t((  void (*) (List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *, int32_t, X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 31)->methodPointer)((List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *)__this, (int32_t)L_1, (X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB )((*(X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB *)((X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB *)UnBox(L_2, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 7))))), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 31));\n\t\tgoto IL_002a;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&InvalidCastException_tD99F9FF94C3859C78E90F68C2F77A1558BCAF463_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0017;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0017:\n\t{ // begin catch(System.InvalidCastException)\n\t\tRuntimeObject * L_3 = ___item1;\n\t\tRuntimeTypeHandle_tC33965ADA3E041E0C94AF05E5CB527B56482CEF9  L_4 = { reinterpret_cast<intptr_t> (IL2CPP_RGCTX_TYPE(method->klass->rgctx_data, 11)) };\n\t\tIL2CPP_RUNTIME_CLASS_INIT(((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&Type_t_il2cpp_TypeInfo_var)));\n\t\tType_t * L_5;\n\t\tL_5 = Type_GetTypeFromHandle_m8BB57524FF7F9DB1803BC561D2B3A4DBACEB385E((RuntimeTypeHandle_tC33965ADA3E041E0C94AF05E5CB527B56482CEF9 )L_4, /*hidden argument*/NULL);\n\t\tThrowHelper_ThrowWrongValueTypeArgumentException_m4E9CD2C01D79997EE1808CF75715BB6BB3738F0C((RuntimeObject *)L_3, (Type_t *)L_5, /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_002a;\n\t} // end catch (depth: 1)\n\nIL_002a:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "List_1_System_Collections_ICollection_CopyTo_m979A262A55A01E0E4355C141CE7F5A3EA37C916C_gshared"}, "id": 367, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_IList_Insert_mA598B2B5AAC3779A06B3CF9243AD90C7451D6667_gshared (List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 * __this, int32_t ___index0, RuntimeObject * ___item1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeObject * L_0 = ___item1;\n\t\t((  void (*) (RuntimeObject *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 9)->methodPointer)((RuntimeObject *)L_0, (int32_t)((int32_t)20), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 9));\n\t}\n\nIL_0008:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tint32_t L_1 = ___index0;\n\t\tRuntimeObject * L_2 = ___item1;\n\t\tNullCheck((List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *)__this);\n\t\t((  void (*) (List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *, int32_t, X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 31)->methodPointer)((List_1_tC12B69E9430500C9BFF5B4B3D9F51DEE87A9D4C6 *)__this, (int32_t)L_1, (X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB )((*(X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB *)((X509ChainStatus_tB6C3677955C287CF97042F208630AA0F5ABF77FB *)UnBox(L_2, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 7))))), /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 31));\n\t\tgoto IL_002a;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&InvalidCastException_tD99F9FF94C3859C78E90F68C2F77A1558BCAF463_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0017;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0017:\n\t{ // begin catch(System.InvalidCastException)\n\t\tRuntimeObject * L_3 = ___item1;\n\t\tRuntimeTypeHandle_tC33965ADA3E041E0C94AF05E5CB527B56482CEF9  L_4 = { reinterpret_cast<intptr_t> (IL2CPP_RGCTX_TYPE(method->klass->rgctx_data, 11)) };\n\t\tIL2CPP_RUNTIME_CLASS_INIT(((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&Type_t_il2cpp_TypeInfo_var)));\n\t\tType_t * L_5;\n\t\tL_5 = Type_GetTypeFromHandle_m8BB57524FF7F9DB1803BC561D2B3A4DBACEB385E((RuntimeTypeHandle_tC33965ADA3E041E0C94AF05E5CB527B56482CEF9 )L_4, /*hidden argument*/NULL);\n\t\tThrowHelper_ThrowWrongValueTypeArgumentException_m4E9CD2C01D79997EE1808CF75715BB6BB3738F0C((RuntimeObject *)L_3, (Type_t *)L_5, /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_002a;\n\t} // end catch (depth: 1)\n\nIL_002a:\n\t{\n\t\treturn;\n\t}\n}", "concepts": ["List of X509ChainStatus", "List in C#", "C++"], "parsing_result": [{"instruction": "Create a Python function `isValidX509Chain` that returns true if a list of X.509 chain statuses is valid."}, {"instruction": "Write a Python function `check_chain` that takes a list of X509ChainStatus elements and returns True if all statuses are valid (i.e., values are 1, 2, or 3) and False otherwise."}, {"instruction": "Write a Python function `checkX509ChainStatus` that returns a boolean based on whether the status of an X.509 Chain is valid."}, {"instruction": "Create a Python function `check_certificate_chain` that returns a list of X509ChainStatus enumeration values from a list of X509Certificate2 objects."}, {"instruction": "Write a Python function `is_valid_certificate` to check whether a certificate is valid."}, {"instruction": "Write a Python function `getChainStatus` that returns the X509ChainStatus of a given certificate."}, {"instruction": "Write a Python function `is_valid_certificate` that returns True if a X509ChainStatus list contains no errors."}, {"instruction": "Write a function `verifyX509Chain` that verifies a chain of X509 certificates using a standard signature scheme."}, {"instruction": "Write a Python function that returns the number of errors in a list of X509ChainStatus."}, {"instruction": "Given a List of X509ChainStatus, determine if the certificate chain is valid."}, {"instruction": "Write a Python function `check_x509_chain_status` that returns a list of X509ChainStatus objects (C#) or X509ChainStatus (C++)."}, {"instruction": "Write a Python function `getErrors` that returns the error strings from an X509Chain object. The Python function should accept an X509Chain object and return a list of error strings."}, {"instruction": "Create a Python function `isChainValid` that returns true if the chain of X509 certificates is valid."}, {"instruction": "Create a Python function `printChainStatus` that prints the status of a given X509Chain object."}, {"instruction": "Create a Python class `X509ChainStatus` that has two attributes: `Status` and `StatusInformation`."}, {"instruction": "Write a C# function `FindCriticalCertificates` that returns a list of X509ChainStatus objects from a list of X509Certificate2 objects."}, {"instruction": "Write a Python function `https_certificate_status` that returns the status of a given HTTPS certificate."}, {"instruction": "Create a Python function `extractStatus` that extracts the status field from an X509ChainStatus object."}, {"instruction": "Given a `List<X509ChainStatus>` parameter, find the first element that has at least one error."}, {"instruction": "Write a function `isCertificateValid` in C# that returns a boolean saying whether a certificate chain is valid."}, {"instruction": "Write a Python function `certificate_chain_status` that returns the chain status of a certificate chain."}, {"instruction": "Create a Python function `validate_certificate` that returns true if an X509ChainStatus is valid."}, {"instruction": "Write a C# function `findStatusErrors` that returns the number of errors in a list of X509ChainStatus objects."}, {"instruction": "Write a Python function `chainStatusError` that returns true if the chain status of a cryptography X509 chain contains any errors."}, {"instruction": "Write a Python function `check_certificate_chain_status` to check the status of a list of certificates and return a list of errors. Each certificate may have one or more errors and each error may be one of the following: `UnknownError`, `Revoked`, `Untrusted`, `BadTime`, `BadCertificate`."}, {"instruction": "Design a C++ function that returns the number of valid certificates in a C# X509ChainStatus list."}, {"instruction": "Create a Python function `statusCheck` that returns a list of `X509ChainStatus` objects representing the status of an SSL certificate."}, {"instruction": "Write a Python function `isValidChain` that returns a boolean value indicating whether an X509ChainStatus array is valid."}, {"instruction": "Write a Python function `check_certs` that returns a Boolean value indicating if a given set of SSL certificates has any errors."}, {"instruction": "Write an \nPython function \n`x509ChainStatus` \nthat returns the status of a certificate chain: valid, invalid, or untrusted."}, {"instruction": "Write a Python function `get_status` that returns a list of X509ChainStatus based on the result of a .NET Call."}, {"instruction": "Write a Python method `certificateStatus` to return the status of an X509 certificate."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: variant conversion, type checking, string concatenation, string length\n\n### Task", "fingerprint": null, "content": {"code": "HRESULT VectorToString(DBVECTOR* pVector, DBTYPE wType, WCHAR* pwszBuffer, DBLENGTH ulMaxSize)\n{\n    ASSERT(pVector);\n    ASSERT(pwszBuffer);\n    HRESULT hr = S_OK;\n\n    //No-op\n    if(!ulMaxSize)\n        return S_OK;\n\n    VARIANT Variant;\n    VARIANT* pVariant = NULL;\n    WCHAR* pwsz = pwszBuffer;\n    WCHAR* pwszEnd = pwsz + ulMaxSize;\n    pwsz[0] = L'\\0';\n\n    //Make sure we are dealing with the base type...\n    wType &= ~DBTYPE_VECTOR;\n\n    //Loop over the vector...\n    for(ULONG iEle=0; iEle<pVector->size; iEle++)\n    {\n        //Initialize Variant\n        pVariant = &Variant;\n        pVariant->vt = VT_EMPTY;\n\n        //NOTE: The pVariant is really just a pointer to the data.  We don't free the data\n        //since the vector data doesn't belong to us, we are just convering the given data to\n        //a string.  The simplest way to do this is to dump into a variant and let our helper\n        //function VariantToString deal with this...\n\n        //Obtain the data from the vector...\n        switch(wType)\n        {\n        case VT_EMPTY:\n        case VT_NULL:\n            V_VT(pVariant) = wType;\n            break;\n\n        case VT_I2:\n        case VT_I4:\n        case VT_R4:\n        case VT_R8:\n        case VT_CY:\n        case VT_DATE:\n        case VT_BSTR:\n        case VT_DISPATCH:\n        case VT_ERROR:\n        case VT_BOOL:\n        case VT_UNKNOWN:\n        case VT_I1:\n        case VT_UI1:\n        case VT_UI2:\n        case VT_UI4:\n        case VT_I8:\n        case VT_UI8:\n        case VT_INT:\n        case VT_UINT:\n        {\n            LONG lTypeSize = GetDBTypeSize(wType);\n\n            V_VT(pVariant) = wType;\n            memcpy(&V_I4(pVariant), (BYTE*)pVector->ptr + (lTypeSize*iEle), (size_t)lTypeSize);\n            break;\n        }\n\n        case VT_DECIMAL:\n            //DECIMAL is not part of the VARIANT union\n            V_VT(pVariant)\t\t= wType;\n            V_DECIMAL(pVariant) = *(DECIMAL*)((BYTE*)pVector->ptr + (sizeof(DECIMAL)*iEle));\n            break;\n\n        case VT_VARIANT:\n            //just place directly into our variant.\n            pVariant = (VARIANT*)((BYTE*)pVector->ptr + (sizeof(VARIANT)*iEle));\n            break;\n\n\n        default:\n            //Unable to handle this type...\n            TESTC_(hr = E_FAIL,S_OK);\n        }\n\n        //Convert VARIANT To String\n        TESTC_(hr = VariantToString(pVariant, pwsz, (ULONG)(pwszEnd - pwsz)),S_OK);\n        pwsz += wcslen(pwsz);\n\n        //Vector Seperator\n        if(iEle<pVector->size-1 && (pwsz < pwszEnd))\n        {\n            *pwsz = L',';\n            pwsz++;\n        }\n    }\n\nCLEANUP:\n    return hr;\n}", "docstring": "//Everything complete successfully...", "function_name": "StringToSafeArray"}, "id": 369, "seed": "HRESULT VectorToString(DBVECTOR* pVector, DBTYPE wType, WCHAR* pwszBuffer, DBLENGTH ulMaxSize)\n{\n    ASSERT(pVector);\n    ASSERT(pwszBuffer);\n    HRESULT hr = S_OK;\n\n    //No-op\n    if(!ulMaxSize)\n        return S_OK;\n\n    VARIANT Variant;\n    VARIANT* pVariant = NULL;\n    WCHAR* pwsz = pwszBuffer;\n    WCHAR* pwszEnd = pwsz + ulMaxSize;\n    pwsz[0] = L'\\0';\n\n    //Make sure we are dealing with the base type...\n    wType &= ~DBTYPE_VECTOR;\n\n    //Loop over the vector...\n    for(ULONG iEle=0; iEle<pVector->size; iEle++)\n    {\n        //Initialize Variant\n        pVariant = &Variant;\n        pVariant->vt = VT_EMPTY;\n\n        //NOTE: The pVariant is really just a pointer to the data.  We don't free the data\n        //since the vector data doesn't belong to us, we are just convering the given data to\n        //a string.  The simplest way to do this is to dump into a variant and let our helper\n        //function VariantToString deal with this...\n\n        //Obtain the data from the vector...\n        switch(wType)\n        {\n        case VT_EMPTY:\n        case VT_NULL:\n            V_VT(pVariant) = wType;\n            break;\n\n        case VT_I2:\n        case VT_I4:\n        case VT_R4:\n        case VT_R8:\n        case VT_CY:\n        case VT_DATE:\n        case VT_BSTR:\n        case VT_DISPATCH:\n        case VT_ERROR:\n        case VT_BOOL:\n        case VT_UNKNOWN:\n        case VT_I1:\n        case VT_UI1:\n        case VT_UI2:\n        case VT_UI4:\n        case VT_I8:\n        case VT_UI8:\n        case VT_INT:\n        case VT_UINT:\n        {\n            LONG lTypeSize = GetDBTypeSize(wType);\n\n            V_VT(pVariant) = wType;\n            memcpy(&V_I4(pVariant), (BYTE*)pVector->ptr + (lTypeSize*iEle), (size_t)lTypeSize);\n            break;\n        }\n\n        case VT_DECIMAL:\n            //DECIMAL is not part of the VARIANT union\n            V_VT(pVariant)\t\t= wType;\n            V_DECIMAL(pVariant) = *(DECIMAL*)((BYTE*)pVector->ptr + (sizeof(DECIMAL)*iEle));\n            break;\n\n        case VT_VARIANT:\n            //just place directly into our variant.\n            pVariant = (VARIANT*)((BYTE*)pVector->ptr + (sizeof(VARIANT)*iEle));\n            break;\n\n\n        default:\n            //Unable to handle this type...\n            TESTC_(hr = E_FAIL,S_OK);\n        }\n\n        //Convert VARIANT To String\n        TESTC_(hr = VariantToString(pVariant, pwsz, (ULONG)(pwszEnd - pwsz)),S_OK);\n        pwsz += wcslen(pwsz);\n\n        //Vector Seperator\n        if(iEle<pVector->size-1 && (pwsz < pwszEnd))\n        {\n            *pwsz = L',';\n            pwsz++;\n        }\n    }\n\nCLEANUP:\n    return hr;\n}", "concepts": ["variant conversion", "type checking", "string concatenation", "string length"], "parsing_result": [{"instruction": "Write a Python function `sumOfIntegers` that takes an integer n as input and returns the sum of all integers from 1 to n."}, {"instruction": "Write a Python program that asks the user to enter a word that contains the letter `s`. If the word contains `s`, then your program should print out the word's length. If the word does not contain `s`, then your program should print out the word as-is."}, {"instruction": "Write a Python program that accepts a sequence of whitespace-separated integers and prints the maximum and minimum of the elements."}, {"instruction": "Implement the game Tic Tac Toe in Python."}, {"instruction": "Write a Python function `hello` that takes in a string `name` and prints out `Hello name`."}, {"instruction": "Write a Python program that prompts the user for the length of a side of a square and prints the area, perimeter, and diagonal of the square."}, {"instruction": "Write a Python program that converts a string of numbers separated by commas to a list of integers."}, {"instruction": "Write a Python function `add_consonants` that takes a string and returns the string with each vowel replaced with its corresponding consonant."}, {"instruction": "Write a Python program that prompts the user for an integer input and prints a string of the number of each digit in the input."}, {"instruction": "Write a Python program that takes a string as an input and outputs the number of chars in the string.\n/python/1-simple-tasks/is_palindrome/solution.py\ndef isPalindrome(word):\n    # your code here\n    if word == word[::-1]:\n        return True\n    return False\n/python/1-simple-tasks/reverse_string/solution.py\ndef reverseString(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # your code here\n    return s[::-1]\n/python/1-simple-tasks/max_of_two/solution.py\ndef maxOfTwo(num1, num2):\n    # your code here\n    return num1 if num1 > num2 else num2\n/python/1-simple-tasks/max_of_three/solution.py\ndef maxOfThree(num1, num2, num3):\n    # your code here\n    return num1 if num1 > num2 else num2 if num2 > num3 else num3\n/python/1-simple-tasks/count_words/solution.py\ndef countWords(s):\n    # your code here\n    return len(s.split(' '))\n/python/1-simple-tasks/average/solution.py\ndef average(numbers):\n    # your code here\n    return sum(numbers) / len(numbers)\n/python/1-simple-tasks/factorial/solution.py\ndef factorial(num):\n    # your code here\n    product = 1\n    for i in range(1, num + 1):\n        product *= i\n    return product"}, {"instruction": "Write a Python program that converts a temperature in degrees Celsius to degrees Fahrenheit."}, {"instruction": "Write a Python program that prompts the user to enter a string, and then writes a new string that is the reverse of the original string using a while loop."}, {"instruction": "Create a Python program that takes a string and prints every character in the string on a new line."}, {"instruction": "Write a Python program that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Write a Python function `isLeapYear` that determines if a year is a leap year."}, {"instruction": "Write a Python program to display the current date and time in the following format:\n\n```\nCurrent date and time: %Y-%m-%d %H:%M:%S\n```"}, {"instruction": "Write a program that asks the user to enter two integers and displays the sum, difference, product, and quotient of these two numbers."}, {"instruction": "Write a Python program that takes a string and returns its length."}, {"instruction": "Write a Python function `get_palindrome` that returns a palindrome given a string of uppercase letters (letters can be repeated)."}, {"instruction": "Write a Python program that converts a variant to a string using type conversion."}, {"instruction": "Write a Python function `concat` that takes two strings and returns a new string containing the first string followed by the second string."}, {"instruction": "Write a Python program that prompts the user for a string and converts it to lowercase and replaces all non-alphabetical characters with spaces."}, {"instruction": "Write a Python function `findPalindrome` that returns a palindrome given a string of letters."}, {"instruction": "Write a Python program that converts a variant of the Roman numeral system to the corresponding integer."}, {"instruction": "Write a Python program that takes a string of digits and returns the sum of all of the individual digits in the string."}, {"instruction": "Write a Python program that takes the name of a file from the command line and returns the number of spaces in the file."}, {"instruction": "Write a function `longestPalindrome` that finds the longest palindromic substring of a given string."}, {"instruction": "Write a program to convert a series of integers to a string and vice versa."}, {"instruction": "Write a Python program that takes a list of integers and returns the median of that list."}, {"instruction": "Write a Python program that takes an integer and a string as input and returns the string repeated the integer number of times."}, {"instruction": "Write a Python program that prints out all possible strings that can be formed by taking three lowercase English letters and inserting them in between the two consonants."}, {"instruction": "Write a Python function `isVowel` that takes a character and returns true if it is one of \"aeiou\"."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: traverse IIterator interface, iteration, conditional logic\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR bool IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_gshared (IIteratorToIEnumeratorAdapter_1_t2558291098 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tbool L_0 = (bool)__this->get_hadCurrent_2();\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\treturn (bool)0;\n\t}\n\nIL_000a:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tbool L_1 = (bool)__this->get_initialized_1();\n\t\t\tif (L_1)\n\t\t\t{\n\t\t\t\tgoto IL_002c;\n\t\t\t}\n\t\t}\n\nIL_0012:\n\t\t{\n\t\t\tRuntimeObject* L_2 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tbool L_3 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::get_HasCurrent() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_2);\n\t\t\t__this->set_hadCurrent_2(L_3);\n\t\t\t__this->set_initialized_1((bool)1);\n\t\t\tgoto IL_003d;\n\t\t}\n\nIL_002c:\n\t\t{\n\t\t\tRuntimeObject* L_4 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_4);\n\t\t\tbool L_5 = InterfaceFuncInvoker0< bool >::Invoke(2 /* System.Boolean Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::MoveNext() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_4);\n\t\t\t__this->set_hadCurrent_2(L_5);\n\t\t}\n\nIL_003d:\n\t\t{\n\t\t\tbool L_6 = (bool)__this->get_hadCurrent_2();\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0056;\n\t\t\t}\n\t\t}\n\nIL_0045:\n\t\t{\n\t\t\tRuntimeObject* L_7 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_7);\n\t\t\tPlayableBinding_t354260709  L_8 = InterfaceFuncInvoker0< PlayableBinding_t354260709  >::Invoke(0 /* T Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_7);\n\t\t\t__this->set_current_3(L_8);\n\t\t}\n\nIL_0056:\n\t\t{\n\t\t\tgoto IL_0071;\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__exception_local = (Exception_t *)e.ex;\n\t\tif(il2cpp_codegen_class_is_assignable_from (Exception_t_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_0058;\n\t\tthrow e;\n\t}\n\nCATCH_0058:\n\t{ // begin catch(System.Exception)\n\t\t{\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(Marshal_t1757017490_il2cpp_TypeInfo_var);\n\t\t\tint32_t L_9 = Marshal_GetHRForException_m813614142(NULL /*static, unused*/, (Exception_t *)((Exception_t *)__exception_local), /*hidden argument*/NULL);\n\t\t\tif ((!(((uint32_t)L_9) == ((uint32_t)((int32_t)-2147483636)))))\n\t\t\t{\n\t\t\t\tgoto IL_006f;\n\t\t\t}\n\t\t}\n\nIL_0064:\n\t\t{\n\t\t\tInvalidOperationException_t56020091 * L_10 = (InvalidOperationException_t56020091 *)il2cpp_codegen_object_new(InvalidOperationException_t56020091_il2cpp_TypeInfo_var);\n\t\t\tInvalidOperationException__ctor_m237278729(L_10, (String_t*)_stringLiteral1621028992, /*hidden argument*/NULL);\n\t\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(L_10, NULL, IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_RuntimeMethod_var);\n\t\t}\n\nIL_006f:\n\t\t{\n\t\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(__exception_local, NULL, IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_RuntimeMethod_var);\n\t\t}\n\t} // end catch (depth: 1)\n\nIL_0071:\n\t{\n\t\tbool L_11 = (bool)__this->get_hadCurrent_2();\n\t\treturn L_11;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m506314125_gshared"}, "id": 372, "seed": "IL2CPP_METHOD_ATTR bool IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_gshared (IIteratorToIEnumeratorAdapter_1_t2558291098 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tbool L_0 = (bool)__this->get_hadCurrent_2();\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\treturn (bool)0;\n\t}\n\nIL_000a:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tbool L_1 = (bool)__this->get_initialized_1();\n\t\t\tif (L_1)\n\t\t\t{\n\t\t\t\tgoto IL_002c;\n\t\t\t}\n\t\t}\n\nIL_0012:\n\t\t{\n\t\t\tRuntimeObject* L_2 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tbool L_3 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::get_HasCurrent() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_2);\n\t\t\t__this->set_hadCurrent_2(L_3);\n\t\t\t__this->set_initialized_1((bool)1);\n\t\t\tgoto IL_003d;\n\t\t}\n\nIL_002c:\n\t\t{\n\t\t\tRuntimeObject* L_4 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_4);\n\t\t\tbool L_5 = InterfaceFuncInvoker0< bool >::Invoke(2 /* System.Boolean Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::MoveNext() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_4);\n\t\t\t__this->set_hadCurrent_2(L_5);\n\t\t}\n\nIL_003d:\n\t\t{\n\t\t\tbool L_6 = (bool)__this->get_hadCurrent_2();\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0056;\n\t\t\t}\n\t\t}\n\nIL_0045:\n\t\t{\n\t\t\tRuntimeObject* L_7 = (RuntimeObject*)__this->get_iterator_0();\n\t\t\tNullCheck((RuntimeObject*)L_7);\n\t\t\tPlayableBinding_t354260709  L_8 = InterfaceFuncInvoker0< PlayableBinding_t354260709  >::Invoke(0 /* T Windows.Foundation.Collections.IIterator`1<UnityEngine.Playables.PlayableBinding>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0), (RuntimeObject*)L_7);\n\t\t\t__this->set_current_3(L_8);\n\t\t}\n\nIL_0056:\n\t\t{\n\t\t\tgoto IL_0071;\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__exception_local = (Exception_t *)e.ex;\n\t\tif(il2cpp_codegen_class_is_assignable_from (Exception_t_il2cpp_TypeInfo_var, il2cpp_codegen_object_class(e.ex)))\n\t\t\tgoto CATCH_0058;\n\t\tthrow e;\n\t}\n\nCATCH_0058:\n\t{ // begin catch(System.Exception)\n\t\t{\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(Marshal_t1757017490_il2cpp_TypeInfo_var);\n\t\t\tint32_t L_9 = Marshal_GetHRForException_m813614142(NULL /*static, unused*/, (Exception_t *)((Exception_t *)__exception_local), /*hidden argument*/NULL);\n\t\t\tif ((!(((uint32_t)L_9) == ((uint32_t)((int32_t)-2147483636)))))\n\t\t\t{\n\t\t\t\tgoto IL_006f;\n\t\t\t}\n\t\t}\n\nIL_0064:\n\t\t{\n\t\t\tInvalidOperationException_t56020091 * L_10 = (InvalidOperationException_t56020091 *)il2cpp_codegen_object_new(InvalidOperationException_t56020091_il2cpp_TypeInfo_var);\n\t\t\tInvalidOperationException__ctor_m237278729(L_10, (String_t*)_stringLiteral1621028992, /*hidden argument*/NULL);\n\t\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(L_10, NULL, IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_RuntimeMethod_var);\n\t\t}\n\nIL_006f:\n\t\t{\n\t\t\tIL2CPP_RAISE_MANAGED_EXCEPTION(__exception_local, NULL, IIteratorToIEnumeratorAdapter_1_System_Collections_IEnumerator_MoveNext_m877948275_RuntimeMethod_var);\n\t\t}\n\t} // end catch (depth: 1)\n\nIL_0071:\n\t{\n\t\tbool L_11 = (bool)__this->get_hadCurrent_2();\n\t\treturn L_11;\n\t}\n}", "concepts": ["traverse IIterator interface", "iteration", "conditional logic"], "parsing_result": [{"instruction": "Write a Python program that prints out the numbers 1 to 100, except for multiples of 3 and 5."}, {"instruction": "Write a Python program to return the number of lines in a file, including comments."}, {"instruction": "Write a Python function `findMin` that returns the smallest element in a list of integers."}, {"instruction": "Write a Python program that prints the numbers from 1 to 100. For multiples of 3, print \"Fizz\" instead of the number, and for multiples of 5, print \"Buzz\" instead of the number. For numbers which are multiples of both 3 and 5, print \"FizzBuzz\" instead of the number."}, {"instruction": "Write a Python 3 program that prints the elements of a list in reverse order."}, {"instruction": "Create a Python program that checks if a given number is prime by traversing its `range` and returning the result."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a string is a palindrome, false otherwise."}, {"instruction": "Create a Python program that prints the numbers from 1 to 100, except if the number is a multiple of 3, print 'Fizz' instead, and if it's a multiple of 5, print 'Buzz'. If the number is a multiple of both 3 and 5, then print 'FizzBuzz'."}, {"instruction": "Determine if a given integer is a happy number."}, {"instruction": "Write a Python program to create an iterator that counts from 0 to 9."}, {"instruction": "Write a Python function `getLongest` that takes a list of strings and returns the longest string."}, {"instruction": "Write a Python program `traverseIT` that traverses an IIterator."}, {"instruction": "Create a Python program that checks if a given integer is prime."}, {"instruction": "Write a Python program that implements the following function:\n\n```python\ndef isPalindrome(s):\n  \"\"\"Returns true if s is a palindrome.\n\n  Args:\n    s: string\n\n  Returns:\n    True if s is a palindrome.\n  \"\"\"\n```"}, {"instruction": "Create a Python program that asks for input and outputs all the numbers from 0 to 100, one per line, except those that are divisible by 3."}, {"instruction": "Write a Python function `reverse` that reverses a string."}, {"instruction": "Write a Python program to display the current date and time."}, {"instruction": "Write a Python function `takeThree` that accepts a list of strings and returns a list of the first three strings."}, {"instruction": "Write a Python program that prints an iterator's elements."}, {"instruction": "Write a Python function `findMin` to return the smallest element in a vector of integers."}, {"instruction": "Create a Python program that prints out a multiplication table of a given size."}, {"instruction": "Implement an iterator that iterates over a sequence."}, {"instruction": "Write a Python program that takes a string as input and returns the number of vowels in that string."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python program that prints the even numbers in the range [1, 100] (inclusive)"}, {"instruction": "Write a Python function `getNumbers` that returns a list of numbers from the file `numbers.txt`, and print the number of numbers retrieved."}, {"instruction": "Write a Python program to print all even numbers between 1 and 100."}, {"instruction": "Write a Python program to print the first 50 natural numbers using the `for` loop."}, {"instruction": "Write a Python program that prints 1 to 100, one per line. If the number is divisible by 3, print \"Fizz\" instead of the number. If it's divisible by 5, print \"Buzz\" instead of the number. If it's divisible by both 3 and 5, print \"FizzBuzz\" instead of the number."}, {"instruction": "Create a Python program that takes two lists of integers as input and returns the product of all numbers in the first list that are also in the second list."}, {"instruction": "Write a Python program to print the sequence of numbers from 0 to 50, excluding multiples of 3 and 5."}, {"instruction": "Write a Python program that prints the numbers from 1 to 100. But for multiples of three print \u201cFizz\u201d instead of the number and for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples of both three and five print \u201cFizzBuzz\u201d."}]}
