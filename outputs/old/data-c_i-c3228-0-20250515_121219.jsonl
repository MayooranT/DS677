{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: generic programming, C# List<T> class\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1__ctor_m2716C5BEDCDB58D5B0C144DA4837DAF99E86D871_gshared (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 * __this, RuntimeObject* ___collection0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var);\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tRuntimeObject* V_0 = NULL;\n\tint32_t V_1 = 0;\n\tRuntimeObject* V_2 = NULL;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tNullCheck((RuntimeObject *)__this);\n\t\tObject__ctor_m88880E0413421D13FD95325EDCE231707CE1F405((RuntimeObject *)__this, /*hidden argument*/NULL);\n\t\tRuntimeObject* L_0 = ___collection0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000f;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentNullException_m539081110B94B71D92C9761B273E617B23B4BBA5((int32_t)6, /*hidden argument*/NULL);\n\t}\n\nIL_000f:\n\t{\n\t\tRuntimeObject* L_1 = ___collection0;\n\t\tV_0 = (RuntimeObject*)((RuntimeObject*)IsInst((RuntimeObject*)L_1, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2)));\n\t\tRuntimeObject* L_2 = V_0;\n\t\tif (!L_2)\n\t\t{\n\t\t\tgoto IL_0050;\n\t\t}\n\t}\n\t{\n\t\tRuntimeObject* L_3 = V_0;\n\t\tNullCheck((RuntimeObject*)L_3);\n\t\tint32_t L_4;\n\t\tL_4 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* System.Int32 System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::get_Count() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_3);\n\t\tV_1 = (int32_t)L_4;\n\t\tint32_t L_5 = V_1;\n\t\tif (L_5)\n\t\t{\n\t\t\tgoto IL_002f;\n\t\t}\n\t}\n\t{\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_6 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_6);\n\t\treturn;\n\t}\n\nIL_002f:\n\t{\n\t\tint32_t L_7 = V_1;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_8 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)(AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)SZArrayNew(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 1), (uint32_t)L_7);\n\t\t__this->set__items_1(L_8);\n\t\tRuntimeObject* L_9 = V_0;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_10 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)__this->get__items_1();\n\t\tNullCheck((RuntimeObject*)L_9);\n\t\tInterfaceActionInvoker2< AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*, int32_t >::Invoke(5 /* System.Void System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::CopyTo(T[],System.Int32) */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_9, (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)L_10, (int32_t)0);\n\t\tint32_t L_11 = V_1;\n\t\t__this->set__size_2(L_11);\n\t\treturn;\n\t}\n\nIL_0050:\n\t{\n\t\t__this->set__size_2(0);\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_12 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_12);\n\t\tRuntimeObject* L_13 = ___collection0;\n\t\tNullCheck((RuntimeObject*)L_13);\n\t\tRuntimeObject* L_14;\n\t\tL_14 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<kcp2k.Kcp/AckItem>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 3), (RuntimeObject*)L_13);\n\t\tV_2 = (RuntimeObject*)L_14;\n\t}\n\nIL_0069:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_0077;\n\t\t}\n\nIL_006b:\n\t\t{\n\t\t\tRuntimeObject* L_15 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_15);\n\t\t\tAckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  L_16;\n\t\t\tL_16 = InterfaceFuncInvoker0< AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<kcp2k.Kcp/AckItem>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 4), (RuntimeObject*)L_15);\n\t\t\tNullCheck((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this);\n\t\t\t((  void (*) (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *, AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5)->methodPointer)((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this, (AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 )L_16, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5));\n\t\t}\n\nIL_0077:\n\t\t{\n\t\t\tRuntimeObject* L_17 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_17);\n\t\t\tbool L_18;\n\t\t\tL_18 = InterfaceFuncInvoker0< bool >::Invoke(0 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var, (RuntimeObject*)L_17);\n\t\t\tif (L_18)\n\t\t\t{\n\t\t\t\tgoto IL_006b;\n\t\t\t}\n\t\t}\n\nIL_007f:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x8B, FINALLY_0081);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_0081;\n\t}\n\nFINALLY_0081:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_19 = V_2;\n\t\t\tif (!L_19)\n\t\t\t{\n\t\t\t\tgoto IL_008a;\n\t\t\t}\n\t\t}\n\nIL_0084:\n\t\t{\n\t\t\tRuntimeObject* L_20 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_20);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var, (RuntimeObject*)L_20);\n\t\t}\n\nIL_008a:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(129)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(129)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x8B, IL_008b)\n\t}\n\nIL_008b:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "List_1_InsertRange_mDEF514565A34924F191DBC38F0E98BE48AD1AB6A_gshared"}, "id": 1, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1__ctor_m2716C5BEDCDB58D5B0C144DA4837DAF99E86D871_gshared (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 * __this, RuntimeObject* ___collection0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var);\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tRuntimeObject* V_0 = NULL;\n\tint32_t V_1 = 0;\n\tRuntimeObject* V_2 = NULL;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tNullCheck((RuntimeObject *)__this);\n\t\tObject__ctor_m88880E0413421D13FD95325EDCE231707CE1F405((RuntimeObject *)__this, /*hidden argument*/NULL);\n\t\tRuntimeObject* L_0 = ___collection0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000f;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentNullException_m539081110B94B71D92C9761B273E617B23B4BBA5((int32_t)6, /*hidden argument*/NULL);\n\t}\n\nIL_000f:\n\t{\n\t\tRuntimeObject* L_1 = ___collection0;\n\t\tV_0 = (RuntimeObject*)((RuntimeObject*)IsInst((RuntimeObject*)L_1, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2)));\n\t\tRuntimeObject* L_2 = V_0;\n\t\tif (!L_2)\n\t\t{\n\t\t\tgoto IL_0050;\n\t\t}\n\t}\n\t{\n\t\tRuntimeObject* L_3 = V_0;\n\t\tNullCheck((RuntimeObject*)L_3);\n\t\tint32_t L_4;\n\t\tL_4 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* System.Int32 System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::get_Count() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_3);\n\t\tV_1 = (int32_t)L_4;\n\t\tint32_t L_5 = V_1;\n\t\tif (L_5)\n\t\t{\n\t\t\tgoto IL_002f;\n\t\t}\n\t}\n\t{\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_6 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_6);\n\t\treturn;\n\t}\n\nIL_002f:\n\t{\n\t\tint32_t L_7 = V_1;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_8 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)(AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)SZArrayNew(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 1), (uint32_t)L_7);\n\t\t__this->set__items_1(L_8);\n\t\tRuntimeObject* L_9 = V_0;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_10 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)__this->get__items_1();\n\t\tNullCheck((RuntimeObject*)L_9);\n\t\tInterfaceActionInvoker2< AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*, int32_t >::Invoke(5 /* System.Void System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::CopyTo(T[],System.Int32) */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_9, (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)L_10, (int32_t)0);\n\t\tint32_t L_11 = V_1;\n\t\t__this->set__size_2(L_11);\n\t\treturn;\n\t}\n\nIL_0050:\n\t{\n\t\t__this->set__size_2(0);\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_12 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_12);\n\t\tRuntimeObject* L_13 = ___collection0;\n\t\tNullCheck((RuntimeObject*)L_13);\n\t\tRuntimeObject* L_14;\n\t\tL_14 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<kcp2k.Kcp/AckItem>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 3), (RuntimeObject*)L_13);\n\t\tV_2 = (RuntimeObject*)L_14;\n\t}\n\nIL_0069:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_0077;\n\t\t}\n\nIL_006b:\n\t\t{\n\t\t\tRuntimeObject* L_15 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_15);\n\t\t\tAckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  L_16;\n\t\t\tL_16 = InterfaceFuncInvoker0< AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<kcp2k.Kcp/AckItem>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 4), (RuntimeObject*)L_15);\n\t\t\tNullCheck((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this);\n\t\t\t((  void (*) (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *, AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5)->methodPointer)((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this, (AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 )L_16, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5));\n\t\t}\n\nIL_0077:\n\t\t{\n\t\t\tRuntimeObject* L_17 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_17);\n\t\t\tbool L_18;\n\t\t\tL_18 = InterfaceFuncInvoker0< bool >::Invoke(0 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var, (RuntimeObject*)L_17);\n\t\t\tif (L_18)\n\t\t\t{\n\t\t\t\tgoto IL_006b;\n\t\t\t}\n\t\t}\n\nIL_007f:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x8B, FINALLY_0081);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_0081;\n\t}\n\nFINALLY_0081:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_19 = V_2;\n\t\t\tif (!L_19)\n\t\t\t{\n\t\t\t\tgoto IL_008a;\n\t\t\t}\n\t\t}\n\nIL_0084:\n\t\t{\n\t\t\tRuntimeObject* L_20 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_20);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var, (RuntimeObject*)L_20);\n\t\t}\n\nIL_008a:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(129)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(129)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x8B, IL_008b)\n\t}\n\nIL_008b:\n\t{\n\t\treturn;\n\t}\n}", "concepts": ["generic programming", "C# List<T> class"], "parsing_result": [{"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a function `applyFilter` that filters out the elements in a list that don't match a given function."}, {"instruction": "Write a Python function that removes duplicates from a list.\n(Provided is a sample implementation of a Python `List` class that emulates the Python `list` class.)"}, {"instruction": "Write a Python function `reverse` that reverses a string."}, {"instruction": "Write a function `removeDuplicates` that returns a list without duplicates."}, {"instruction": "Create a Python function `remove_duplicates` which returns a list with duplicates removed."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `sumVector` that returns the sum of all elements in a vector of integers."}, {"instruction": "Create a Python function `sumGenerator` that returns a generator object that sums numbers indefinitely, until the sum exceeds a given target value."}, {"instruction": "Write a Python function `sumList` that returns the sum of all elements in a list."}, {"instruction": "Write a Python function `allUnique` that returns the number of unique elements in a given list."}, {"instruction": "Write a Python function that returns the smallest element in a list."}, {"instruction": "Create a Python function `remove_multiples` that removes all multiples of a specified integer from a vector of integers."}, {"instruction": "Write a Python function `remove_duplicates(list)` that returns a new list with all duplicates removed."}, {"instruction": "Write a Python function `sumVector` that returns the sum of all elements in a vector of integers."}, {"instruction": "Create a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a function `removeDuplicates` that removes duplicates from a Python list."}, {"instruction": "Write a function `removeDuplicates` that removes duplicate elements from a Python list."}, {"instruction": "Create a Python function `merge` that returns the sorted result of merging two lists."}, {"instruction": "Write a Python function `maxDifference` that returns the non-trivial max difference between two elements in a list."}, {"instruction": "Implement a Python function `remove_duplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `fibonacci` that returns the nth Fibonacci using generators."}, {"instruction": "Write a Python implementation of `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `sumList` that takes in a list of integers and returns their sum."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `count` that counts the number of times a given integer occurs in a sequence of integers."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a Python function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Implement a Python function `removeDuplicates` that returns a list with duplicates removed.\n project.\n/README.md\n# CS304-RecursionExercises\nA collection of exercises to use recursion in Python and C++.\n\n## Contents\n- [Project Requirements](https://github.com/jbarton3/CS304-RecursionExercises/blob/main/ProjectRequirements.md)\n- [Example Code](https://github.com/jbarton3/CS304-RecursionExercises/tree/main/src)\n- [Examples](https://github.com/jbarton3/CS304-RecursionExercises/blob/main/Examples.md)\n\n## Usage\nClone this repository and refer to the README in each/ProjectRequirements.md\n# CS304 - Project Requirements\n## Project Description\nFor this project, you'll create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Project Requirements\n1. Design and implement a series of coding tasks that are original, distinct, diverse, and high-quality.\n2. Use recursion in at least one of your tasks.\n3. Each task should be written in a programming language of your choice.\n4. Each task must adhere to specified properties:\n\t- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n\t- language: the programming language to be used\n\t- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n\t- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n5. Design the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n6. Write a README file that describes your project, and describes the tasks you implemented."}, {"instruction": "Write a Python function `is_palindrome` that checks if a given string is a palindrome."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: bitwise operations, integer representation\n\n### Task", "fingerprint": null, "content": {"code": "bool testUnpacker(){\r\n\tuint32 inst = 0xdeadface;\r\n\tsize_t unpackerSize = sizeof(Instruction::UNPACKER);\r\n\t//std::cout << \"sizeof(Instruction::UNPACKER) = \" << unpackerSize << endl;\r\n\tif(unpackerSize != sizeof(uint32)){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tInstruction::UNPACKER &inst2= reinterpret_cast<Instruction::UNPACKER &>(inst);\r\n\r\n\tif(inst2.i.op != inst2.j.op){\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}", "docstring": "//char *buffer = new char[length];\r", "function_name": "readFile"}, "id": 3, "seed": "bool testUnpacker(){\r\n\tuint32 inst = 0xdeadface;\r\n\tsize_t unpackerSize = sizeof(Instruction::UNPACKER);\r\n\t//std::cout << \"sizeof(Instruction::UNPACKER) = \" << unpackerSize << endl;\r\n\tif(unpackerSize != sizeof(uint32)){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tInstruction::UNPACKER &inst2= reinterpret_cast<Instruction::UNPACKER &>(inst);\r\n\r\n\tif(inst2.i.op != inst2.j.op){\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}", "concepts": ["bitwise operations", "integer representation"], "parsing_result": [{"instruction": "Write a Python function `factorial` that returns the factorial of a non-negative integer."}, {"instruction": "Write a Python function `countBits` that counts the number of bits in a non-negative integer."}, {"instruction": "Write a Python function `countBits` that counts the number of 1 bits in an integer."}, {"instruction": "Write a Python function `isPowerOfTwo` that returns true if a given integer is a power of two."}, {"instruction": "Write a Python function `check_balanced` that returns `True` if a given string has balanced parentheses, or `False` otherwise.\n/challenges/07_two_sum/README.md\n# Two Sum\n## Problem\nGiven an array of integers and a target integer, find the indices of two numbers such that they add up to the target.\n\nIf no such pair exists, return `-1`."}, {"instruction": "Write a Python function `isPrime` that returns true if an integer is prime."}, {"instruction": "Write a Python function `power` that computes base raised to an integer exponent."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Write a Python function `gcd` that takes two integers `a` and `b` as arguments and returns their greatest common divisor using the Euclidean algorithm."}, {"instruction": "Write a Python function `isPowerOf2` that returns true if a given integer is a power of two."}, {"instruction": "Write a Python function `isPowerOfThree` that returns `True` if an integer is a power of 3."}, {"instruction": "Write a Python function `convertToBinary` that converts an integer to its binary representation."}, {"instruction": "Write a Python function `even` that returns a boolean indicating whether an integer is even."}, {"instruction": "Write a Python function `bitwise_reverse` that reverses the bits of an integer."}, {"instruction": "Create a Python function `toBin` that converts a number to its binary representation."}, {"instruction": "Write a Python function `binary` that converts an integer to its binary representation."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `countBits` that counts the number of bits in an integer."}, {"instruction": "Write a Python function `power` that computes base raised to an integer exponent."}, {"instruction": "Write a Python function `fibonacci` that returns a list of the first `n` Fibonacci numbers."}, {"instruction": "Write a Python function `isEven` that returns true if an integer is even, false otherwise."}, {"instruction": "Write a function `isPowerOf2` that returns `True` if an integer is a power of two."}, {"instruction": "Create a Python function `isPowerOfTwo` that returns true if an integer is a power of two."}, {"instruction": "Write a Python function `isPrime` that returns true if a given integer is prime."}, {"instruction": "Create a Python function `getBits` that returns the binary representation of an integer."}, {"instruction": "Write a Python function `countBits` that computes the number of `1` bits in a 32-bit integer."}, {"instruction": "Write a Python function `countBits` that counts the number of binary digits in an integer."}, {"instruction": "Write a Python function `parity` that returns the parity of a non-negative integer."}, {"instruction": "Write a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Write a Python function `isPrime` that determines whether an integer is prime."}, {"instruction": "Write a Python function `hammingDistance` that returns the Hamming distance between two non-negative integers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: generic programming, list traversal, map, return value, STL map\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_ICollection_CopyTo_mE384ED5CFB72BD40E4ED9118312BBCCA784A85A8_gshared (List_1_t4172DDD081E8C31E82629AD17BC2912ECE329CCD * __this, RuntimeArray * ___array0, int32_t ___arrayIndex1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeArray * L_0 = ___array0;\n\t\tif (!L_0)\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tRuntimeArray * L_1 = ___array0;\n\t\tNullCheck((RuntimeArray *)L_1);\n\t\tint32_t L_2;\n\t\tL_2 = Array_get_Rank_mE9E4804EA433AA2265F9D9CA3B1B5082ECD757D0((RuntimeArray *)L_1, /*hidden argument*/NULL);\n\t\tif ((((int32_t)L_2) == ((int32_t)1)))\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)7, /*hidden argument*/NULL);\n\t}\n\nIL_0012:\n\t{\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tCachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E* L_3 = (CachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E*)__this->get__items_1();\n\t\tRuntimeArray * L_4 = ___array0;\n\t\tint32_t L_5 = ___arrayIndex1;\n\t\tint32_t L_6 = (int32_t)__this->get__size_2();\n\t\tArray_Copy_m3F127FFB5149532135043FFE285F9177C80CB877((RuntimeArray *)(RuntimeArray *)L_3, (int32_t)0, (RuntimeArray *)L_4, (int32_t)L_5, (int32_t)L_6, /*hidden argument*/NULL);\n\t\tgoto IL_0033;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&ArrayTypeMismatchException_tFD610FDA00012564CB75AFCA3A489F29CF628784_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0029;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0029:\n\t{ // begin catch(System.ArrayTypeMismatchException)\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)((int32_t)18), /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_0033;\n\t} // end catch (depth: 1)\n\nIL_0033:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "List_1_System_Collections_IList_Add_mB11B0BE086058B75AABAFE706CC3AAA0012259E8_gshared"}, "id": 4, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_ICollection_CopyTo_mE384ED5CFB72BD40E4ED9118312BBCCA784A85A8_gshared (List_1_t4172DDD081E8C31E82629AD17BC2912ECE329CCD * __this, RuntimeArray * ___array0, int32_t ___arrayIndex1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeArray * L_0 = ___array0;\n\t\tif (!L_0)\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tRuntimeArray * L_1 = ___array0;\n\t\tNullCheck((RuntimeArray *)L_1);\n\t\tint32_t L_2;\n\t\tL_2 = Array_get_Rank_mE9E4804EA433AA2265F9D9CA3B1B5082ECD757D0((RuntimeArray *)L_1, /*hidden argument*/NULL);\n\t\tif ((((int32_t)L_2) == ((int32_t)1)))\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)7, /*hidden argument*/NULL);\n\t}\n\nIL_0012:\n\t{\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tCachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E* L_3 = (CachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E*)__this->get__items_1();\n\t\tRuntimeArray * L_4 = ___array0;\n\t\tint32_t L_5 = ___arrayIndex1;\n\t\tint32_t L_6 = (int32_t)__this->get__size_2();\n\t\tArray_Copy_m3F127FFB5149532135043FFE285F9177C80CB877((RuntimeArray *)(RuntimeArray *)L_3, (int32_t)0, (RuntimeArray *)L_4, (int32_t)L_5, (int32_t)L_6, /*hidden argument*/NULL);\n\t\tgoto IL_0033;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&ArrayTypeMismatchException_tFD610FDA00012564CB75AFCA3A489F29CF628784_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0029;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0029:\n\t{ // begin catch(System.ArrayTypeMismatchException)\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)((int32_t)18), /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_0033;\n\t} // end catch (depth: 1)\n\nIL_0033:\n\t{\n\t\treturn;\n\t}\n}", "concepts": ["generic programming", "list traversal", "map", "return value", "STL map"], "parsing_result": [{"instruction": "Write a Python function `product` that takes a list of integers and returns the product of them."}, {"instruction": "Write a Python function `count_vowels` that returns the number of vowels (a, e, i, o, u) in a string, ignoring case."}, {"instruction": "Write a Python function `findCommon` that returns a list of common elements from two lists."}, {"instruction": "Create a Python function `maxSubarray` that returns the maximum subarray sum."}, {"instruction": "Write a Python function `anagramCheck` that checks if two strings are anagrams (the two strings have the same characters in a different order)."}, {"instruction": "Write a Python function `findMedian` that returns the median of a list of numbers."}, {"instruction": "Given a vector of integers, return a vector containing all the elements in the first vector that appear in the second vector."}, {"instruction": "Create a Python function `reverse` that takes a string and returns a reversed version of the string."}, {"instruction": "Write a Python function that takes a list of integers and returns a new list that contains only the even elements."}, {"instruction": "Write a Python function `sum_lists` that takes two lists of integers and returns their sum as a list, ignoring overflow."}, {"instruction": "Write a Python function `toMap` that returns a dictionary of integers as keys and their frequencies as values."}, {"instruction": "Write a Python function `isAnagram` that returns True if the two strings are anagrams of each other, and False otherwise."}, {"instruction": "Write a Python function `myMap` that applies a function to all elements in a list, returning a new list of results."}, {"instruction": "Create a Python function `swap` to exchanges the values of two integers."}, {"instruction": "Write a Python function `ordered_map` that creates a map that stores values by their key in ascending order."}, {"instruction": "Write a Python function `sort` that takes a list of key-value pairs and sorts them by key."}, {"instruction": "Create a Python function `mergeSort` that sorts a list using the merge sort algorithm."}, {"instruction": "Write a Python function `selectionSort` to sort a list of integers."}, {"instruction": "Create a Python function `mergeSort` that sorts a list of integers using the MergeSort algorithm."}, {"instruction": "Write a Python function `sort` that sorts a list of integers using the bubble sort algorithm.\nt."}, {"instruction": "Write a Python function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Write a Python function `findFactors` that returns a map of the factors and multiplicities of a number."}, {"instruction": "Write a Python function `findPairs` that finds all pairs of integers in a list whose sum is 0."}, {"instruction": "Create a Python function `findMin` to return the minimum value in a list of integers."}, {"instruction": "Write a Python function `mergeSort` that sorts a list using the merge sort algorithm."}, {"instruction": "Create a Python function `to_dict` that takes a list of tuples and returns a dictionary."}, {"instruction": "Write a Python function `findMode` that returns the mode of a list of integers."}, {"instruction": "Write a Python function `findCommon` that returns a list of common elements from two lists."}, {"instruction": "Write a Python function `printMap` that prints the keys and values of a dictionary in the format `key -> value`."}, {"instruction": "Write a Python function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case."}, {"instruction": "Write a Python function `histogram` that takes a list of integers and returns a frequency map of integers to their frequency in the list."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: constant expressions, bit shifting, arithmetic\n\n### Task", "fingerprint": null, "content": {"code": "constexpr int foo(int a) {\n    return -a << 2; // cxx17-note {{left shift of negative value -10}} \\\n                    // ref-cxx17-note {{left shift of negative value -10}} \\\n                    // cxx17-note {{left shift of negative value -2}} \\\n                    // ref-cxx17-note {{left shift of negative value -2}}\n  }", "docstring": "// cxx17-warning {{shifting a negative signed value is undefined}} \\\n                    // ref-cxx17-warning {{shifting a negative signed value is undefined}} \\\n                    // cxx17-note {{left shift of negative value -1}} \\\n                    // ref-cxx17-note {{left shift of negative value -1}}", "function_name": "negativeShift"}, "id": 7, "seed": "constexpr int foo(int a) {\n    return -a << 2; // cxx17-note {{left shift of negative value -10}} \\\n                    // ref-cxx17-note {{left shift of negative value -10}} \\\n                    // cxx17-note {{left shift of negative value -2}} \\\n                    // ref-cxx17-note {{left shift of negative value -2}}\n  }", "concepts": ["constant expressions", "bit shifting", "arithmetic"], "parsing_result": [{"instruction": "Implement a Python class `Arithmetic` that computes basic arithmetic operations on integers."}, {"instruction": "Implement a Python class `BitVector` that represents a vector of bits."}, {"instruction": "Write a Python function `getDistance` that computes the Euclidean distance between two points."}, {"instruction": "Write a Python class `Counter` that implements a radix-10 counter."}, {"instruction": "Write a Python class `Point` that represents a point in 2-dimensional space. The class should have two attributes, `x` and `y`, which both represent the horizontal and vertical coordinates of the point. The class should have two methods, `distance`, which takes another `Point` object as an argument and returns the distance between the two points, and `line_segment`, which takes another `Point` object as an argument and returns a line segment connecting the two points."}, {"instruction": "Write a Python class `BitCounter` that counts the number of bits in a given integer."}, {"instruction": "Write a Python class `Bit` for representing an unsigned 64-bit integer. The class should have the following methods:\n- `to_unsigned_str`: return a string representation of the integer in base 2.\n- `to_decimal_str`: return a string representation of the integer in base 10.\n- `to_hex_str`: return a string representation of the integer in base 16.\n- `to_binary_str`: return a string representation of the integer in base 2.\n- `to_octal_str`: return a string representation of the integer in base 8.\n- `to_base`: return a string representation of the integer in the given base.\n- `to_base_str`: return a string representation of the integer in the given base.\n- `to_signed_str`: return a string representation of the integer in signed base 2."}, {"instruction": "Create a python class `Date` that represents a date on a calendar."}, {"instruction": "Write a Python class `Binary` that implements a binary number with integer values as its attributes, and overloads the binary operators `+`, `-`, `*`, `/`, and `%`."}, {"instruction": "Create a Python class `Point` that represents a point in 2-dimensional space."}, {"instruction": "Write a Python class called `Binary` that implements binary arithmetic."}, {"instruction": "Implement a Python class `Fraction` that represents a fraction and defines operations for addition, subtraction, multiplication, and division."}, {"instruction": "Write a Python class `BinarySearchTree` that represents a binary search tree."}, {"instruction": "Write a Python class `IntBitShifter` that has a function `shift` that shifts an integer by a given number of bits."}, {"instruction": "Write a Python class `BitSwapper` that has a single instance variable `val`, and methods `setVal` and `getVal` that set and return `val` as a binary bit string."}, {"instruction": "Write a function `isPowerOfTwo` that returns true if a given number is a power of two."}, {"instruction": "Write a Python class `BinaryTree` with methods `inorder`, `preorder`, and `postorder` that compute the in-order, pre-order, and post-order traversals of a binary tree in terms of recursion."}, {"instruction": "Write a Python class `Decimal` that represents a decimal number with a precision of 8 digits."}, {"instruction": "Implement a Python class `Fraction` that represents rational numbers. The class must be able to perform basic arithmetic operations on rational numbers."}, {"instruction": "Implement a Python class `Binary` that supports binary arithmetic and bitwise operations."}, {"instruction": "Create a Python class `BinaryTree` that implements a binary search tree."}, {"instruction": "Create a Python class `Number` that represents a number in base 2."}, {"instruction": "Write a Python class `Vector` that implements a vector in 2D space. You may choose to implement the vector using an array of integers or a tuple of floating point numbers."}, {"instruction": "Write a Python class `CountingMachine` that implements the following behavior:\n\n- `def __init__(self, start)` - the constructor stores `start` as an instance attribute\n- `def step(self)` - increments the attribute `start` by 1\n- `def get_count(self)` - returns the value of the attribute `start`\n- `def reset(self)` - resets the attribute `start` to 0"}, {"instruction": "Implement a Python class `TwoNumberArithmetic` with an instance method `add` that adds two integers."}, {"instruction": "Write a Python class `TwoButtonControl` that contains two buttons, each with a label, an on/off state, and a callback function."}, {"instruction": "Write a Python class `IntPair` that represents a pair of integers. Your class should have a constructor with 2 integer arguments, and an `add` function that adds its arguments and returns the result."}, {"instruction": "Write a Python class `ShiftRegister` that implements a 3-bit shift register with an initial value."}, {"instruction": "Implement a Python class `BitCounter` that contains a method `count_bits` that counts the number of bits that are equal to 1."}, {"instruction": "Create a Python class `Fraction` that represents a fraction object."}, {"instruction": "Implement a Python class `BitField` that stores a string of bits, and provides methods for manipulating the bits."}, {"instruction": "Write a Python function `intToBase` that returns the integer given in a base 2 to base 10."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: boolean state, debouncing, button presses\n\n### Task", "fingerprint": null, "content": {"code": "boolean isButtonPressed(void) {\n  // read the state of the switch into a local variable:\n  int reading = digitalRead(buttonPin);\n\n  // check to see if you just pressed the button \n  // (i.e. the input went from LOW to HIGH),  and you've waited \n  // long enough since the last press to ignore any noise:  \n\n  // If the switch changed, due to noise or pressing:\n  if (reading != lastButtonState) {\n    // reset the debouncing timer\n    lastDebounceTime = millis();\n  } \n  \n  if ((millis() - lastDebounceTime) > debounceDelay) {\n    // whatever the reading is at, it's been there for longer\n    // than the debounce delay, so take it as the actual current state:\n\n    // if the button state has changed:\n    if (reading != buttonState) {\n      buttonState = reading;\n\n      // only toggle the LED if the new button state is HIGH\n      if (buttonState == HIGH) {\n        lastButtonState = reading;\n        setRegisterPin(LCD_BTN, HIGH);\n        return true;\n      }else{\n        setRegisterPin(LCD_BTN, LOW);\n      }\n    }\n  }\n\n  // save the reading.  Next time through the loop,\n  // it'll be the lastButtonState:\n  lastButtonState = reading;\n  return false;\n}", "docstring": "//Serial.println(\" Fahrenheit\");", "function_name": "getTemp"}, "id": 14, "seed": "boolean isButtonPressed(void) {\n  // read the state of the switch into a local variable:\n  int reading = digitalRead(buttonPin);\n\n  // check to see if you just pressed the button \n  // (i.e. the input went from LOW to HIGH),  and you've waited \n  // long enough since the last press to ignore any noise:  \n\n  // If the switch changed, due to noise or pressing:\n  if (reading != lastButtonState) {\n    // reset the debouncing timer\n    lastDebounceTime = millis();\n  } \n  \n  if ((millis() - lastDebounceTime) > debounceDelay) {\n    // whatever the reading is at, it's been there for longer\n    // than the debounce delay, so take it as the actual current state:\n\n    // if the button state has changed:\n    if (reading != buttonState) {\n      buttonState = reading;\n\n      // only toggle the LED if the new button state is HIGH\n      if (buttonState == HIGH) {\n        lastButtonState = reading;\n        setRegisterPin(LCD_BTN, HIGH);\n        return true;\n      }else{\n        setRegisterPin(LCD_BTN, LOW);\n      }\n    }\n  }\n\n  // save the reading.  Next time through the loop,\n  // it'll be the lastButtonState:\n  lastButtonState = reading;\n  return false;\n}", "concepts": ["boolean state", "debouncing", "button presses"], "parsing_result": [{"instruction": "Create a Python function `isButtonPressed` that takes a boolean input representing whether a button has been pressed. The function should return True if the button has been pressed for more than 200 ms."}, {"instruction": "Create a Python function `checkPresses` that returns True if a button has been pressed for at least 500 milliseconds."}, {"instruction": "Create a Python function `isButtonPressed` that takes a button press event and returns its boolean state."}, {"instruction": "Write a Python function `debounce` that takes a list of 0s and 1s, representing button presses, and outputs a new list where 0s and 1s are only printed when the state of the button changes."}, {"instruction": "Create a function `isBtnPressed` that takes a button state and returns true if the button is pressed."}, {"instruction": "Write a Python function that takes a number of button presses and returns the state of the button."}, {"instruction": "Create a Python function `buttonPress` that returns True when a button is pressed and False if it is not. This function must debounce the button presses."}, {"instruction": "Create a Python function `isPressed` that takes a string with a list of button presses and returns true if the string contains consecutive button presses."}, {"instruction": "Create a Python function `pressButton` that takes a string and prints the button presses in the string.\n\nThe string will consist of either an ordered sequence of buttons, or a sequence of button presses that correspond to button sequences.\n\nFor example, if the text is \"a\", then the user presses the button once. If the text is \"ab\", then the user presses the button twice. If the text is \"a12ab34\", then the user presses 12 buttons, then the buttons in the sequence \"ab\" are triggered, followed by 34 buttons."}, {"instruction": "Create a Python function `isOn` that returns whether or not a switch is on."}, {"instruction": "Write a function `is_pressed` that takes a boolean state and returns true if the state is pressed. The function is debounced: it should return false if the button is pressed for less than 100ms in a row."}, {"instruction": "Write a Python function that simulates a keypad button press in a remote control."}, {"instruction": "Create a function `checkButton` that returns `True` if a button is pressed for at least 100 ms, and `False` otherwise. The function should use function decorators to perform debouncing."}, {"instruction": "Write a function that takes two integer arrays as input. The function returns true if the first array is a permutation of the second array."}, {"instruction": "Create a Python function `debounce` that takes a function and returns a new function that delays a function's execution by a given amount of time."}, {"instruction": "Create a Python function `toggle` that returns true when a button is pressed. The function should be debounced (i.e., ignore multiple consecutive button presses)."}, {"instruction": "Create a Python function `isPressed` that returns true when the user presses a button, and false otherwise."}, {"instruction": "Write a Python function `checkDebouncing` that takes a list of button presses and a list of valid button states, and returns true if the button presses are valid."}, {"instruction": "Write a Python function `debounced` that, when passed a function `f`, returns a new function that:\n\n- takes a sequence of arguments\n- delays `f` by 100ms and passes the delay to `f` with the arguments\n- returns the result of `f`"}, {"instruction": "Create a Python function `buttonPressed` that takes a button press and returns whether it is debounced (i.e., whether the button has been pressed for at least 100 milliseconds)."}, {"instruction": "Create a function `debounce` that takes a function and an interval (in milliseconds) as its arguments and returns a new debounced function that will only call the original function every interval milliseconds."}, {"instruction": "Create a Python function `autoClicker` that performs a mouse click whenever a button is pressed within a certain time interval."}, {"instruction": "Create a Python function `buttonPressed` that takes a list of button presses and returns a list of tuples where each tuple contains two elements: the time at which the button was pressed and a boolean value indicating whether the button was pressed."}, {"instruction": "Create a Python function `debounce` that takes a function and returns a function that will only call the original function once every 50 milliseconds. The returned function should also only return the latest argument passed to the original function."}, {"instruction": "Write a Python function `button_pressed` that returns true if a user has provided a button press."}, {"instruction": "Develop a Python program that displays a GUI with a button, displaying a message when the button is pressed."}, {"instruction": "Create a Python function `isButtonPressed` that returns true if the user has pressed the button within the last two seconds."}, {"instruction": "Create a Python function `debounce` that takes a state and a function `f` as inputs. The function `f` should take a state `x` and a signal `y` as inputs and return a new state `z`. The function `f` should only be called if `y == True` and only when the state has not changed from the previous call."}, {"instruction": "Write a Python function `isRising` that returns true if a given boolean state is rising (true transitions to true) and false otherwise."}, {"instruction": "Write a Python function `debounce` that takes a function `f` and a duration `d` and returns a function `f_debounced` that runs `f` at most once every `d` seconds, even if `f` is called multiple times in that duration."}, {"instruction": "Using the `pygame` library and a single button, write a program to count how many times the user presses the button./README.md\n# Code Challenge #100\n\n## The Challenge\n\nCreate a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: easy\nconcepts: locking, garbage collection, finalizer\n/Test-IOLab/Assets/Samples/Scripts/Test.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Test : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            Debug.Log(i);\n        }\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}/Test-IOLab/Assets/Samples/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\", menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}\n/Test-IOLab/Assets/Samples/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0, tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type, value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensAPI.cs\n\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n[CreateAssetMenu(fileName = \"Singleton\", menuName = \"TokensAPI\")]\npublic class TokensAPI : ScriptableObject\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensManager.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class TokensManager : MonoBehaviour\n{\n    public Text tokenType, tokenValue;\n\n    private void Start()\n    {\n        StartCoroutine(TokensAPI.Instance.GetToken());\n        StartCoroutine(TokensAPI.Instance.SetToken());\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            StartCoroutine(TokensAPI.Instance.GetToken());\n        }\n\n        if (Input.GetKeyDown(KeyCode.S))\n        {\n            StartCoroutine(TokensAPI.Instance.SetToken());\n        }\n    }\n}\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR void PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87 (PairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tbool V_3 = false;\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\t// lock(this) {\n\t\tV_0 = __this;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0005:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_0 = V_0;\n\t\t\tMonitor_Enter_mC5B353DD83A0B0155DF6FBCC4DF5A580C25534C5(L_0, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\t\t// if (swigCPtr.Handle != global::System.IntPtr.Zero) {\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A * L_1 = __this->get_address_of_swigCPtr_2();\n\t\t\tintptr_t L_2 = HandleRef_get_Handle_m095712F299EA36BF75975343C726FA160EE38277((HandleRef_t876E76124F400D12395BF61D562162AB6822204A *)L_1, /*hidden argument*/NULL);\n\t\t\tbool L_3 = IntPtr_op_Inequality_mB4886A806009EA825EFCC60CD2A7F6EB8E273A61((intptr_t)L_2, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\tV_2 = L_3;\n\t\t\tbool L_4 = V_2;\n\t\t\tif (!L_4)\n\t\t\t{\n\t\t\t\tgoto IL_005a;\n\t\t\t}\n\t\t}\n\nIL_0028:\n\t\t{\n\t\t\t// if (swigCMemOwn) {\n\t\t\tbool L_5 = ((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->get_swigCMemOwn_1();\n\t\t\tV_3 = L_5;\n\t\t\tbool L_6 = V_3;\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0048;\n\t\t\t}\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\t// swigCMemOwn = false;\n\t\t\t((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->set_swigCMemOwn_1((bool)0);\n\t\t\t// SharingClientPINVOKE.delete_PairingListener(swigCPtr);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_7 = __this->get_swigCPtr_2();\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(SharingClientPINVOKE_tFF4292D2BC5A9EB345172E6D4F8BE281B3799A1F_il2cpp_TypeInfo_var);\n\t\t\tSharingClientPINVOKE_delete_PairingListener_m3062D45600088FD3230AF5587AC8AB7A4C246B64(L_7, /*hidden argument*/NULL);\n\t\t}\n\nIL_0048:\n\t\t{\n\t\t\t// swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_8;\n\t\t\tmemset(&L_8, 0, sizeof(L_8));\n\t\t\tHandleRef__ctor_mCD64E7F91766FE7602EE34A8CEEF6C1EF4C943BB((&L_8), NULL, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\t__this->set_swigCPtr_2(L_8);\n\t\t}\n\nIL_005a:\n\t\t{\n\t\t\t// global::System.GC.SuppressFinalize(this);\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(GC_tC1D7BD74E8F44ECCEF5CD2B5D84BFF9AAE02D01D_il2cpp_TypeInfo_var);\n\t\t\tGC_SuppressFinalize_m037319A9B95A5BA437E806DE592802225EE5B425(__this, /*hidden argument*/NULL);\n\t\t\t// base.Dispose();\n\t\t\tListener_Dispose_mF59F4962F238FD2A986747D0092EC14293296D30(__this, /*hidden argument*/NULL);\n\t\t\tIL2CPP_LEAVE(0x76, FINALLY_006b);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_006b;\n\t}\n\nFINALLY_006b:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_9 = V_1;\n\t\t\tif (!L_9)\n\t\t\t{\n\t\t\t\tgoto IL_0075;\n\t\t\t}\n\t\t}\n\nIL_006e:\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_10 = V_0;\n\t\t\tMonitor_Exit_m49A1E5356D984D0B934BB97A305E2E5E207225C2(L_10, /*hidden argument*/NULL);\n\t\t}\n\nIL_0075:\n\t\t{\n\t\t\tIL2CPP_RESET_LEAVE(0x76);\n\t\t\tIL2CPP_END_FINALLY(107)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(107)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x76, IL_0076)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t}\n\nIL_0076:\n\t{\n\t\t// }\n\t\treturn;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "PairingListener_Finalize_m82AB68AB825ECE83AA5351C4FBB3A5568D9D1B96"}, "id": 18, "seed": "IL2CPP_METHOD_ATTR void PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87 (PairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tbool V_3 = false;\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\t// lock(this) {\n\t\tV_0 = __this;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0005:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_0 = V_0;\n\t\t\tMonitor_Enter_mC5B353DD83A0B0155DF6FBCC4DF5A580C25534C5(L_0, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\t\t// if (swigCPtr.Handle != global::System.IntPtr.Zero) {\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A * L_1 = __this->get_address_of_swigCPtr_2();\n\t\t\tintptr_t L_2 = HandleRef_get_Handle_m095712F299EA36BF75975343C726FA160EE38277((HandleRef_t876E76124F400D12395BF61D562162AB6822204A *)L_1, /*hidden argument*/NULL);\n\t\t\tbool L_3 = IntPtr_op_Inequality_mB4886A806009EA825EFCC60CD2A7F6EB8E273A61((intptr_t)L_2, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\tV_2 = L_3;\n\t\t\tbool L_4 = V_2;\n\t\t\tif (!L_4)\n\t\t\t{\n\t\t\t\tgoto IL_005a;\n\t\t\t}\n\t\t}\n\nIL_0028:\n\t\t{\n\t\t\t// if (swigCMemOwn) {\n\t\t\tbool L_5 = ((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->get_swigCMemOwn_1();\n\t\t\tV_3 = L_5;\n\t\t\tbool L_6 = V_3;\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0048;\n\t\t\t}\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\t// swigCMemOwn = false;\n\t\t\t((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->set_swigCMemOwn_1((bool)0);\n\t\t\t// SharingClientPINVOKE.delete_PairingListener(swigCPtr);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_7 = __this->get_swigCPtr_2();\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(SharingClientPINVOKE_tFF4292D2BC5A9EB345172E6D4F8BE281B3799A1F_il2cpp_TypeInfo_var);\n\t\t\tSharingClientPINVOKE_delete_PairingListener_m3062D45600088FD3230AF5587AC8AB7A4C246B64(L_7, /*hidden argument*/NULL);\n\t\t}\n\nIL_0048:\n\t\t{\n\t\t\t// swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_8;\n\t\t\tmemset(&L_8, 0, sizeof(L_8));\n\t\t\tHandleRef__ctor_mCD64E7F91766FE7602EE34A8CEEF6C1EF4C943BB((&L_8), NULL, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\t__this->set_swigCPtr_2(L_8);\n\t\t}\n\nIL_005a:\n\t\t{\n\t\t\t// global::System.GC.SuppressFinalize(this);\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(GC_tC1D7BD74E8F44ECCEF5CD2B5D84BFF9AAE02D01D_il2cpp_TypeInfo_var);\n\t\t\tGC_SuppressFinalize_m037319A9B95A5BA437E806DE592802225EE5B425(__this, /*hidden argument*/NULL);\n\t\t\t// base.Dispose();\n\t\t\tListener_Dispose_mF59F4962F238FD2A986747D0092EC14293296D30(__this, /*hidden argument*/NULL);\n\t\t\tIL2CPP_LEAVE(0x76, FINALLY_006b);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_006b;\n\t}\n\nFINALLY_006b:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_9 = V_1;\n\t\t\tif (!L_9)\n\t\t\t{\n\t\t\t\tgoto IL_0075;\n\t\t\t}\n\t\t}\n\nIL_006e:\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_10 = V_0;\n\t\t\tMonitor_Exit_m49A1E5356D984D0B934BB97A305E2E5E207225C2(L_10, /*hidden argument*/NULL);\n\t\t}\n\nIL_0075:\n\t\t{\n\t\t\tIL2CPP_RESET_LEAVE(0x76);\n\t\t\tIL2CPP_END_FINALLY(107)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(107)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x76, IL_0076)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t}\n\nIL_0076:\n\t{\n\t\t// }\n\t\treturn;\n\t}\n}", "concepts": ["locking", "garbage collection", "finalizer\n/Test-IOLab/Assets/Samples/Scripts/Test.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Test : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            Debug.Log(i);\n        }\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}/Test-IOLab/Assets/Samples/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\"", "menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}\n/Test-IOLab/Assets/Samples/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0", "tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type", "value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensAPI.cs\n\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n[CreateAssetMenu(fileName = \"Singleton\"", "menuName = \"TokensAPI\")]\npublic class TokensAPI : ScriptableObject\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0", "tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0", "tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensManager.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class TokensManager : MonoBehaviour\n{\n    public Text tokenType", "tokenValue;\n\n    private void Start()\n    {\n        StartCoroutine(TokensAPI.Instance.GetToken());\n        StartCoroutine(TokensAPI.Instance.SetToken());\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            StartCoroutine(TokensAPI.Instance.GetToken());\n        }\n\n        if (Input.GetKeyDown(KeyCode.S))\n        {\n            StartCoroutine(TokensAPI.Instance.SetToken());\n        }\n    }\n}"], "parsing_result": [{"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Write a C# function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in an integer."}, {"instruction": "Write a Python script that counts the number of lines in a file and outputs it to a text file."}, {"instruction": "Write a Python function that counts the number of words in a given string."}, {"instruction": "Implement the `Token` class to store a token's type and value. Create a class `TokenInfo` that stores information about a token. Create a TokenGenerator class that generates a set of tokens for the TokenManager to use."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Create a Unity project and implement a token system in it, as described above."}, {"instruction": "Create a visual representation of the design process of the tokens manager using the Design Tokens asset."}, {"instruction": "Write a C# function `SayMyName` that prints your name."}, {"instruction": "Write a C++ program that computes the Fibonacci sequence."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python program that counts the number of tokens in a given string."}, {"instruction": "Write a C# program that counts the number of tokens in the `TokenInfo` scriptable object, spawns a `TokenGenerator` object with a token number of `tokenNum` and assigns an instance of `TokenInfo` to the `tokenInfo` field of the `TokenGenerator` component."}, {"instruction": "Write a C# program that creates an object of class `Token` and displays its type and value in the Unity console."}, {"instruction": "Write a C# function `getToken` that returns a random token from a list.\n\n/Assets/Samples/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0, tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type, value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}/Assets/Samples/Scripts/TokensAPI.cs\n\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n[CreateAssetMenu(fileName = \"Singleton\", menuName = \"TokensAPI\")]\npublic class TokensAPI : ScriptableObject\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}/Assets/Samples/Scripts/TokensManager.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class TokensManager : MonoBehaviour\n{\n    public Text tokenType, tokenValue;\n\n    private void Start()\n    {\n        StartCoroutine(TokensAPI.Instance.GetToken());\n        StartCoroutine(TokensAPI.Instance.SetToken());\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            StartCoroutine(TokensAPI.Instance.GetToken());\n        }\n\n        if (Input.GetKeyDown(KeyCode.S))\n        {\n            StartCoroutine(TokensAPI.Instance.SetToken());\n        }\n    }\n}/Assets/Samples/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\", menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}"}, {"instruction": "Write a C# program that prints out a token every time the T key is pressed."}, {"instruction": "Write a Python function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a Python function `countVowels` that counts the number of vowels in a given string."}, {"instruction": "Write a Python function `countTokens` that counts the number of words in a given string."}, {"instruction": "Write a Python program that adds a set of integers and returns the total."}, {"instruction": "Write a C# function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a function `isPalindrome` that detects if a given string is a palindrome."}, {"instruction": "Create a function `createToken` that creates a token object."}, {"instruction": "Create a Unity application that shows a single text field that outputs a random token from a list of tokens. The tokens should be generated via a script asset. The script asset should have a list of tokens and a method to get a random token from that list.\n\nThe application should have a button to call the method to generate a random token."}, {"instruction": "Write a Python function `countLetters` that returns the number of letters in a given string."}, {"instruction": "Write a Python function `countDigits` that returns the number of digits in an integer."}, {"instruction": "Write a Python program that outputs the number of tokens in the given file."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: static method, dynamic method, static method, object initialization, accessor, mutator, function call, class instantiation, member access\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Pass_resetTextures(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Pass *arg1 = (cc::scene::Pass *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Pass>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->resetTextures();\n    \n    \n    return true;\n}", "docstring": "// js_function", "function_name": "js_cc_scene_Pass_resetUBOs"}, "id": 19, "seed": "static bool js_cc_scene_Pass_resetTextures(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Pass *arg1 = (cc::scene::Pass *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Pass>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->resetTextures();\n    \n    \n    return true;\n}", "concepts": ["static method", "dynamic method", "static method", "object initialization", "accessor", "mutator", "function call", "class instantiation", "member access"], "parsing_result": [{"instruction": "Create a Python class `Point` that represents a two-dimensional point."}, {"instruction": "Create a Python class `Person` whose constructor accepts a name and returns an object with three attributes:\n- `name`: a string representing the person's name\n- `age`: an integer representing the person's age\n- `birthday`: a date object representing the person's birthday\n\nThe `Person` class should include a `birthday()` method that returns a string representation of the person's birthday in the format \"Month, Date Year\"."}, {"instruction": "Create a Python class `Counter` that provides a counter for incrementing and decrementing integers."}, {"instruction": "Implement a Python class `Vector` that represents a vector in 3 dimensions and returns the magnitude of the vector."}, {"instruction": "Create a Python class `Vector` that implements a two-dimensional vector. The vector class should store its elements in two floating-point numbers, `x` and `y`. It should include a static method `Distance` that takes two vectors as parameters and returns the distance between them, and a dynamic method `Length` that returns the length of the vector."}, {"instruction": "Create a Python class `Rectangle` that contains four attributes, `length`, `width`, `height`, and `area`, as well as a method, `volume`, that returns the volume of the rectangle."}, {"instruction": "Create a Python class `Rectangle` that represents a two-dimensional rectangle with sides `a` and `b` and a color value. The class should have three methods:\n\n- `area`: returns the area of the rectangle\n- `perimeter`: returns the perimeter of the rectangle\n- `get_color`: returns the color value of the rectangle"}, {"instruction": "Create a Python class `Rectangle` that represents a rectangle."}, {"instruction": "Create a Python class called `Point` that represents a Cartesian point, and has a `calcDistance` static method that calculates the distance between two points."}, {"instruction": "Create a Python class `Rectangle` that holds the height and width of a rectangle, and has a method `area` that returns the area of the rectangle."}, {"instruction": "Design a Python class called `MyList` that represents a list of integers. The class should have the following attributes:\n\n- `elements`: a list of integers\n- `size`: the number of elements in `elements`\n- `capacity`: the number of elements the `elements` list can store\n\nThe class should have the following methods:\n\n- `add`: adds an element to the end of the `elements` list\n- `remove`: removes the last element from the `elements` list\n- `insert`: inserts an element at a specified index in the `elements` list\n- `find`: returns the index of the first occurrence of a specified element in `elements`\n- `clear`: clears the `elements` list\n- `isEmpty`: returns `True` if `elements` is empty, `False` otherwise\n- `print`: prints the `elements` list"}, {"instruction": "Create a Python class `Stat` that contains the following methods:\n\n- `mean` which calculates the arithmetic mean of a list of numbers\n- `variance` which calculates the variance of a list of numbers\n- `standard_deviation` which calculates the standard deviation of a list of numbers"}, {"instruction": "Define a `Person` class with properties for name, age, and favorite color. Define a `Greeter` class with a `greet` method that takes a `Person` object as its argument and returns a greeting in the format \"Hi, my name is {person's name}. My age is {person's age}. My favorite color is {person's favorite color}.\"."}, {"instruction": "Write a Python class `Student` that defines a student with name, age, and major. The class should include a `getStudentInfo` method that returns the name, age, and major of a student."}, {"instruction": "Create a Python class `Employee` with the following properties:\n- `name`\n- `salary`\n\nCreate a Python class `Manager` with the following properties:\n- `name`\n- `salary`\n- `employees`\n\nCreate a Python function `calculateSalaries` that calculates the total salary of all Employee objects in the Manager object."}, {"instruction": "Create a Python class `Vector` that represents a two-dimensional vector."}, {"instruction": "Create a Python class `Vector` with three integer fields: `x, y, z`. Write a Python class method `length` that returns the length of a vector. Write a Python class method `dot_product` that computes the dot product of two vectors. Write a Python class method `cross_product` that computes the cross product of two vectors. Write a Python class method `add` that adds two vectors and returns a new vector. Write a Python class method `scalar_mul` that multiplies a vector by a scalar and returns a new vector."}, {"instruction": "Create a Python class for a bank account."}, {"instruction": "Write a Python class that will represent a bank account, with the following properties and methods:\n- `account_holder`: the name of the account holder\n- `balance`: the current balance of the account\n- `deposit(amount)`: adds money to the account balance\n- `withdraw(amount)`: subtracts money from the account balance\n- `check_balance()`: returns the current account balance"}, {"instruction": "Create a Python class `Stack` that implements a stack data structure."}, {"instruction": "Create a Python class `Rectangle`.\n\nThe class should have two attributes: `length` and `width`.\n\nThe class should have two methods: `area` and `perimeter`. The method `area` should return the rectangle's area, and `perimeter` should return the rectangle's perimeter."}, {"instruction": "Create a Python class `Student` with a static method `getName` that returns the name of the Student, and three instance methods `setName`, `setGPA`, and `getGPA` that set and return the name and GPA of a Student."}, {"instruction": "Implement a Python class `Vector` that represents a vector in Euclidean space and has the following methods:\n\n- `dot(u, v)`: returns the dot product of two vectors\n- `cross(u, v)`: returns the cross product of two vectors\n- `unit_vector()`: returns a unit vector of the same direction as the current vector\n- `angle(u)`: returns the angle between two vectors\n- `add(u)`: returns the sum of two vectors\n- `sub(u)`: returns the difference of two vectors\n- `multiply(u, c)`: returns the product of a vector and a constant\n- `divide(u, c)`: returns the quotient of a vector and a constant\n- `magnitude()`: returns the magnitude of the vector\n- `normalize()`: returns a unit vector of the same direction as the current vector"}, {"instruction": "Create a Python class `Point` that has two attributes, `x` and `y`. The class should have static and dynamic methods, accessor and mutator functions, and a function to initialize an object of the class."}, {"instruction": "Create a Python class `Circle`.\n\nA circle has a center, and a radius.\n\nThe center of a circle is a tuple of two integers, containing the center's x-coordinate and y-coordinate.\n\nThe radius of a circle is an integer.\n\nA circle has the following public methods:\n- `calc_area()`: returns a float representing the area of the circle\n- `calc_perimeter()`: returns a float representing the perimeter of the circle\n\nA circle also has the following public static methods:\n- `calc_circle_area(radius)`: returns a float representing the area of a circle with the given radius.\n- `calc_circle_perimeter(radius)`: returns a float representing the perimeter of a circle with the given radius.\n\nCreate a constructor for the class `Circle`, which takes in two integers, the center's x-coordinate and the center's y-coordinate, and an integer, the radius.\n\nDefine the `Circle` class's `__str__` method to print a string representation of the circle."}, {"instruction": "Create a Python class `Counter` that keeps track of the number of objects of that class."}, {"instruction": "Create a Python class `Node` that represents a node in a singly-linked list. It should have the following members:\n\n- data - the integer stored in the node\n- next - a pointer to the next node (type `Node`)\n\nAdditionally, the class should have the following methods:\n\n- `insert` - inserts a new node with the given data after the current node\n- `delete` - deletes the current node\n- `reverse` - reverses the linked list\n- `get_data` - returns the data of the current node\n- `get_next` - returns the next node in the linked list\n- `print_list` - prints the contents of the linked list"}, {"instruction": "Implement a Python class of a point."}, {"instruction": "Create a Python class `CircularQueue` that implements a circular queue."}, {"instruction": "Create a Python class `Counter` that keeps track of its member variable `value` and implements the following member functions:\n- `increment_by`: increments the counter by a given value\n- `increment`: increments the counter by one\n- `decrement_by`: decrements the counter by a given value\n- `decrement`: decrements the counter by one\n- `reset`: resets the counter to zero\n- `get`: returns the current value of the counter"}, {"instruction": "Implement a Python class `ArithmeticProgression` that models an arithmetic progression. The class should have a parameterized constructor that takes a start value and a step size as arguments, and the following methods:\n- `get_start()`\n- `get_step()`\n- `increment()`\n- `get_current()`\n- `reset()`\n- `is_done()`\n\nThe value returned by `get_current()` should be the next term in the progression after the value returned by the previous call to `get_current()`. `reset()` resets the progression to its starting point and `is_done()` returns True when the progression reaches the end of its sequence."}, {"instruction": "Create a class `Dice` that represents a dice."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: struct/class instantiation, dynamic allocation, type casting, function overload, pointer arithmetic\n\n### Task", "fingerprint": null, "content": {"code": "soap_instantiate_ns3__FEDetRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FEDetRequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEDetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEDetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEADetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEADetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECompConsResponse\"))\n\t\treturn soap_instantiate_ns3__FECompConsResponse(soap, n, NULL, NULL, size);\n\tns3__FEDetRequest *p;\n\tsize_t k = sizeof(ns3__FEDetRequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FEDetRequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FEDetRequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FEDetRequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FEDetRequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_in_ns3__FEDetRequest"}, "id": 22, "seed": "soap_instantiate_ns3__FEDetRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FEDetRequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEDetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEDetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEADetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEADetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECompConsResponse\"))\n\t\treturn soap_instantiate_ns3__FECompConsResponse(soap, n, NULL, NULL, size);\n\tns3__FEDetRequest *p;\n\tsize_t k = sizeof(ns3__FEDetRequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FEDetRequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FEDetRequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FEDetRequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FEDetRequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "concepts": ["struct/class instantiation", "dynamic allocation", "type casting", "function overload", "pointer arithmetic"], "parsing_result": [{"instruction": "Implement a Python program that asks the user for three integers, and then prints the sum and product of those three numbers."}, {"instruction": "Write a Python program that parses two integers from a file, adds them together, and writes the result to a file."}, {"instruction": "Create a Python class `Complex` that represents a complex number."}, {"instruction": "Write a Python program that solves a quadratic equation."}, {"instruction": "Write a Python program to simulate a simple bank account."}, {"instruction": "Implement a Python program `random_series` that generates a sequence of random numbers."}, {"instruction": "Write a Python program that simulates a simple banking system. The customer's balance should be 10000.00. The user should be able to deposit, withdraw, and print the balance."}, {"instruction": "Write a Python program that constructs a doubly-linked list of integers."}, {"instruction": "Write a Python program that takes an array of integers and returns the first missing positive integer."}, {"instruction": "Write a Python program that uses a structure-like class named `Rectangle` to model a rectangle. The class should have two instance variables named `width` and `height`, and two methods named `set_width` and `set_height` that will set the values of the instance variables. It should also have a method named `get_area` that returns the area of the rectangle."}, {"instruction": "Create a Python program that reads a range of integers from the command-line and prints the following results:\n\n- the minimum value in the range\n- the maximum value in the range\n- the number of even values in the range\n- the number of odd values in the range\n- the number of zeros in the range\n- the sum of the integers in the range\n- the average value of the integers in the range"}, {"instruction": "Write a Python program that prompts the user to enter a number between 0 and 9 (inclusive), and prints the cardinal number of that number."}, {"instruction": "Write a Python function `fizzbuzz` that takes a positive integer `n`, and prints all numbers from 1 to `n` in order. However, if the number is divisible by 3, the program should print `Fizz` instead. If the number is divisible by 5, the program should print `Buzz`. If the number is divisible by both 3 and 5, the program should print `FizzBuzz`."}, {"instruction": "Write a Python class `Person` that implements the following methods:\n* `__init__()` with a default name and age\n* `getName()`\n* `getAge()`\n* `setName(name)`\n* `setAge(age)`"}, {"instruction": "Write a Python program that reads in a string and a character, and prints out the number of occurrences of the character in the string."}, {"instruction": "Write a Python function that when given a list of integers, returns a list of all possible sets of indices in the input list."}, {"instruction": "Write a Python program to generate a fibonacci sequence of length n."}, {"instruction": "Implement a Python program that prompts the user to enter an integer n, then creates and prints an n x n matrix of n x n size. The matrix is filled with the numbers 0, 1, 2, ..., n^2 - 1. When n = 3, the matrix should be:\n```\n0 1 2\n3 4 5\n6 7 8\n```"}, {"instruction": "Write a Python program that creates a song struct and prints its lyrics."}, {"instruction": "Write a Python program that reads a list of integers from standard input and prints the sum of the first and the last elements."}, {"instruction": "Implement a Python program that reads in a text file (passed as a command-line argument), and outputs a JSON file containing the number of occurrences of each word."}, {"instruction": "Write a Python program that takes an integer and returns a list of integers that is equivalent to the inputted integer, but with each value increased by 1."}, {"instruction": "Write a Python program that implements a `Rectangle` class, with a constructor that takes its length and width, and two methods: `getArea` and `getPerimeter`."}, {"instruction": "Implement a Python program that reads in the size of 2-dimensional array `M` and creates a 2-dimensional array `M` of integers. Then, it reads in `R` rows of `M`, and for each row, it reads in `C` elements of the row and fills it into a 1-dimensional array `row`. Finally, it prints out the 1-dimensional array `row`."}, {"instruction": "Write a Python program that uses the Mersenne prime generator algorithm to generate a list of 100 Mersenne primes of the form 2<sup>n</sup>\u2005\u2212\u20051."}, {"instruction": "Implement the following Python classes and functions:\n- `Random` class that provides random integers and floating point values between 0 and 1.\n- `Point` class that represents a point in 2D space.\n- `Vector` class that represents a vector in 2D space.\n- `Triangle` class that represents a triangle in 3D space.\n- `Rectangle` class that represents a rectangle in 2D space.\n- `Circle` class that represents a circle in 2D space.\n- `Ellipse` class that represents an ellipse in 2D space."}, {"instruction": "Write a Python function that returns a list of the first n positive integers."}, {"instruction": "Write a Python function `fib` that returns the Nth Fibonacci number, where N is an integer greater than or equal to 0."}, {"instruction": "Write a Python program that creates a class `Student`, which stores information about an individual student's name and a floating point GPA. The class should also have a function `getGPA`, which returns the student's GPA."}, {"instruction": "Write a Python program that takes a sequence of numbers as input and returns the new sequence with duplicates removed."}, {"instruction": "Write a Python program that implements the C++ function `gcd` from the first example."}, {"instruction": "Write a Python function `reverseString` that reverses a string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: hash tables, encapsulation, exception handling, threading, hash map\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool KeyHandler_ValueExists_mF5375C620ADF2D5B81AFA657D39C7DFB42F73EFF (KeyHandler_tB9094857C733957C9D709512D2AD478828B119FF * __this, String_t* ___name0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&String_t_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tString_t* L_0 = ___name0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\tString_t* L_1 = ((String_t_StaticFields*)il2cpp_codegen_static_fields_for(String_t_il2cpp_TypeInfo_var))->get_Empty_5();\n\t\t___name0 = L_1;\n\t}\n\nIL_000a:\n\t{\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_2 = __this->get_values_5();\n\t\tV_0 = L_2;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_3 = V_0;\n\t\tMonitor_Enter_mBEB6CC84184B46F26375EC3FC8921D16E48EA4C4(L_3, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_4 = __this->get_values_5();\n\t\tString_t* L_5 = ___name0;\n\t\tNullCheck(L_4);\n\t\tbool L_6;\n\t\tL_6 = VirtFuncInvoker1< bool, RuntimeObject * >::Invoke(19 /* System.Boolean System.Collections.Hashtable::Contains(System.Object) */, L_4, L_5);\n\t\tV_2 = L_6;\n\t\tIL2CPP_LEAVE(0x34, FINALLY_002a);\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_7 = V_1;\n\t\t\tif (!L_7)\n\t\t\t{\n\t\t\t\tgoto IL_0033;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_8 = V_0;\n\t\t\tMonitor_Exit_mA776B403DA88AC77CDEEF67AB9F0D0E77ABD254A(L_8, /*hidden argument*/NULL);\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x34, IL_0034)\n\t}\n\nIL_0034:\n\t{\n\t\tbool L_9 = V_2;\n\t\treturn L_9;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "KeyHandler_Flush_m56255985F7D2CBDE0231B579C9795A56B516F3C7"}, "id": 26, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool KeyHandler_ValueExists_mF5375C620ADF2D5B81AFA657D39C7DFB42F73EFF (KeyHandler_tB9094857C733957C9D709512D2AD478828B119FF * __this, String_t* ___name0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&String_t_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tString_t* L_0 = ___name0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\tString_t* L_1 = ((String_t_StaticFields*)il2cpp_codegen_static_fields_for(String_t_il2cpp_TypeInfo_var))->get_Empty_5();\n\t\t___name0 = L_1;\n\t}\n\nIL_000a:\n\t{\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_2 = __this->get_values_5();\n\t\tV_0 = L_2;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_3 = V_0;\n\t\tMonitor_Enter_mBEB6CC84184B46F26375EC3FC8921D16E48EA4C4(L_3, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_4 = __this->get_values_5();\n\t\tString_t* L_5 = ___name0;\n\t\tNullCheck(L_4);\n\t\tbool L_6;\n\t\tL_6 = VirtFuncInvoker1< bool, RuntimeObject * >::Invoke(19 /* System.Boolean System.Collections.Hashtable::Contains(System.Object) */, L_4, L_5);\n\t\tV_2 = L_6;\n\t\tIL2CPP_LEAVE(0x34, FINALLY_002a);\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_7 = V_1;\n\t\t\tif (!L_7)\n\t\t\t{\n\t\t\t\tgoto IL_0033;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_8 = V_0;\n\t\t\tMonitor_Exit_mA776B403DA88AC77CDEEF67AB9F0D0E77ABD254A(L_8, /*hidden argument*/NULL);\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x34, IL_0034)\n\t}\n\nIL_0034:\n\t{\n\t\tbool L_9 = V_2;\n\t\treturn L_9;\n\t}\n}", "concepts": ["hash tables", "encapsulation", "exception handling", "threading", "hash map"], "parsing_result": [{"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Implement a Python class `HashTable` that implements hash tables."}, {"instruction": "Create a Python class `HashTable` that stores key-value pairs in a hash table."}, {"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Write a Python class `HashTable` that creates a hash table."}, {"instruction": "Implement a Python class `HashTable` that uses a hash table to store dictionaries."}, {"instruction": "Implement a Python class `HashTable` that stores key-value pairs using a hash map."}, {"instruction": "Implement a Python class `HashMap` that stores key-value pairs."}, {"instruction": "Implement a Python class `HashTable` that maps keys to values."}, {"instruction": "Write a Python class `HashTable` that implements a hash table to store key-value pairs.\nts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n# Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcep#!/bin/bash\n\n# Install needed software\nsudo apt-get update\nsudo apt-get install -y make cmake\n\n# Clone this repo\ngit clone https://github.com/taylorjg/cpp-coding-challenge\n\n# Build and run the program\ncd cpp-coding-challenge/example_1/\ncmake.\nmake\n./example_1\n\n# Cleanup\ncd..\nrm -rf cpp-coding-challenge\n\necho \"Done. Now you're ready to create your own exampl\ne.\"ge: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n# Example 3\n### Properties\ncategory: function implementation\nlangua# Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n# Example 10\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: hard\nconcepts: integer sequences, recursion, base case\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python class `Cache` that implements a simple cache, acceptable with respect to time complexity."}, {"instruction": "Implement a Python class `HashTable` that implements a hash table using Python dictionaries."}, {"instruction": "Implement a Python class `HashTable` that stores key-value pairs."}, {"instruction": "Create a Python class `HashTable` that implements a hash table using Python dictionaries."}, {"instruction": "Write a Python class `Account` that creates a bank account with a balance, username, and password."}, {"instruction": "Implement a thread-safe hash map with `get`, `put`, and `remove` methods."}, {"instruction": "Write a Python class `HashMap` that implements a hash map."}, {"instruction": "Create a Python class `HashTable` that stores and accesses key-value pairs using a hash map."}, {"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Create a Python class `User` with four attributes: the name of the user, the username, and password, and a set of friends."}, {"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Write a class in Python that uses the hash map data structure and implements the following methods:\n\n- `add`\n- `remove`\n- `size`\n- `contains`\n- `get`"}, {"instruction": "Implement an object-oriented Python class `SafeQueue` that provides a thread-safe queue interface. The class should function like the `queue.Queue` class in the Python Standard Library."}, {"instruction": "Create a Python class `HashTable` that implements a hash table."}, {"instruction": "Create a Python class `User` with the following properties:\n- a unique user ID\n- a user name\n- a password\n- a list of groups\n- a list of books"}, {"instruction": "Implement a Python class that represents a hash table and provides functionality as described below.\n\n- `__init__` takes a size parameter for the initial size of the hash table.\n- `put` takes an integer key and value and adds the key, value pair to the table.\n- `containsKey` takes an integer key and returns `True` if the key is present in the table and `False` otherwise.\n- `get` takes an integer key and returns the value associated with the key if the key is present in the table and raises an exception otherwise.\n- `remove` takes an integer key and removes the key, value pair from the table if the key is present in the table and raises an exception otherwise."}, {"instruction": "Implement a Python class `Account` that models an account with a balance and an initial balance."}, {"instruction": "Implement a Python class `HashTable` that is similar to a hash table."}, {"instruction": "Implement a Python class `HashTable` that supports key-value pairs and avoids collisions using separate chaining."}, {"instruction": "Implement a Python class `HashTable` that supports hash lookups and updates."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: pass-by-value, arithmetic operators, conditional execution, template specialization\n\n### Task", "fingerprint": null, "content": {"code": "LinearQuadraticStage approximateStage(OptimalControlProblem& optimalControProblem, TrajectoryRef start, StateTrajectoryRef end,\n                                      bool isInitialTime) {\n  const auto modelData = approximateIntermediateLQ(optimalControProblem, start.t, start.x, start.u, MultiplierCollection());\n\n  // checking the numerical properties\n  const auto errSize = checkSize(modelData, start.x.rows(), start.u.rows());\n  if (!errSize.empty()) {\n    throw std::runtime_error(\"[[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errSize);\n  }\n  const std::string errProperties =\n      checkDynamicsProperties(modelData) + checkCostProperties(modelData) + checkConstraintProperties(modelData);\n  if (!errProperties.empty()) {\n    throw std::runtime_error(\"[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errProperties);\n  }\n\n  LinearQuadraticStage lqStage;\n  const auto dt = end.t - start.t;\n\n  lqStage.cost = modelData.cost;\n  lqStage.cost *= dt;\n\n  // Linearized Dynamics after discretization: x0[k+1] + dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k])\n  lqStage.dynamics = approximateDynamics(modelData, start, dt);\n  // Adapt the offset to account for discretization and the nominal trajectory :\n  // dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k]) - x0[k+1]\n  lqStage.dynamics.f -= end.x;\n\n  lqStage.constraints = approximateConstraints(modelData, isInitialTime);\n\n  return lqStage;\n}", "docstring": "// checking the numerical properties", "function_name": "getLinearQuadraticApproximation"}, "id": 29, "seed": "LinearQuadraticStage approximateStage(OptimalControlProblem& optimalControProblem, TrajectoryRef start, StateTrajectoryRef end,\n                                      bool isInitialTime) {\n  const auto modelData = approximateIntermediateLQ(optimalControProblem, start.t, start.x, start.u, MultiplierCollection());\n\n  // checking the numerical properties\n  const auto errSize = checkSize(modelData, start.x.rows(), start.u.rows());\n  if (!errSize.empty()) {\n    throw std::runtime_error(\"[[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errSize);\n  }\n  const std::string errProperties =\n      checkDynamicsProperties(modelData) + checkCostProperties(modelData) + checkConstraintProperties(modelData);\n  if (!errProperties.empty()) {\n    throw std::runtime_error(\"[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errProperties);\n  }\n\n  LinearQuadraticStage lqStage;\n  const auto dt = end.t - start.t;\n\n  lqStage.cost = modelData.cost;\n  lqStage.cost *= dt;\n\n  // Linearized Dynamics after discretization: x0[k+1] + dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k])\n  lqStage.dynamics = approximateDynamics(modelData, start, dt);\n  // Adapt the offset to account for discretization and the nominal trajectory :\n  // dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k]) - x0[k+1]\n  lqStage.dynamics.f -= end.x;\n\n  lqStage.constraints = approximateConstraints(modelData, isInitialTime);\n\n  return lqStage;\n}", "concepts": ["pass-by-value", "arithmetic operators", "conditional execution", "template specialization"], "parsing_result": [{"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers using recursion and pass-by-value."}, {"instruction": "Implement a Python function `sumUp` that calculates the sum of two integers passed as parameters. If the two integers are equal, return 10 times their sum."}, {"instruction": "Implement a Python function `sumList` that returns the sum of all elements in a list."}, {"instruction": "Create a Python function `multiply` that takes a set of integers and multiplies them together. The function should allow for integers that are passed as arguments."}, {"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Implement a Python function `fibonacci` that returns the nth Fibonacci number."}, {"instruction": "Write a Python function `compute` that takes a string representing an arithmetic expression and returns the value of the expression. The expression contains only the following arithmetic operators: `+`, `-`, `*`, `/`. The expression does not contain any other characters."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two integers using Euclid's algorithm."}, {"instruction": "Implement a Python function `is_palindrome` that takes a string and returns whether it is a palindrome."}, {"instruction": "Implement a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python function `isPrime` that checks if a number is prime."}, {"instruction": "Implement a Python function `sumOfSquares` that computes the sum of the squares of all positive integers less than 100."}, {"instruction": "Implement a Python function `factorial` that returns the factorial of an integer."}, {"instruction": "Implement a Python function `isPerm` that returns True if two lists of integers are permutations of each other."}, {"instruction": "Implement a Python function `add` that returns the sum of two numbers."}, {"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers using `pass-by-value` arithmetic."}, {"instruction": "Implement a Python function `generatePascalTriangle` that prints the first N levels of Pascal's triangle."}, {"instruction": "Write a Python function `compress` that takes a string and returns the compressed version of the string."}, {"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Implement a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Implement a Python function `isEven` that takes an integer and returns True if the number is even, False otherwise."}, {"instruction": "Create a Python function `sumDigits` that returns the sum of the digits in a number using recursion."}, {"instruction": "Write a Python function `sum_digits` that returns the sum of digits in an integer."}, {"instruction": "Implement a Python function `m**n` that returns `m` raised to the power of `n`."}, {"instruction": "Write a Python function `make_adder` that takes in an integer n and returns a function that adds n to whatever it is given as input."}, {"instruction": "Write a Python function `class_average` that computes the average of the grade of each class, returning the average of the average."}, {"instruction": "Implement a Python function `multiply` that takes two integers, and returns the product of the two."}, {"instruction": "Implement a Python function `sumIntegers` that returns the sum of all integers between 1 and a given integer, inclusive."}, {"instruction": "Write a function `add_two` that takes a number, adds two to it, and returns the result. The function must work for any number type."}, {"instruction": "Write a Python function `addTwo` that adds two numbers."}, {"instruction": "Implement a Python function `add` that adds two integers."}, {"instruction": "Implement the `add_vectors` function in Python, which takes a list of vectors of integers and returns the sum of all vectors."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: object instantiation, typecasting\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Model_updateLightingmap(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Model *arg1 = (cc::scene::Model *) NULL ;\n    cc::Texture2D *arg2 = (cc::Texture2D *) NULL ;\n    cc::Vec4 *arg3 = 0 ;\n    cc::Vec4 temp3 ;\n    \n    if(argc != 2) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 2);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Model>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,2,SWIGTYPE_p_cc__Texture2D\"); \n    // %typemap(in) SWIGTYPE&\n    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,3,SWIGTYPE_p_cc__Vec4\");\n    arg3 = &temp3;\n    \n    (arg1)->updateLightingmap(arg2,(cc::Vec4 const &)*arg3);\n    \n    \n    return true;\n}", "docstring": "// %typemap(in) SWIGTYPE*", "function_name": "js_cc_scene_Model_updateWorldBoundsForJSBakedSkinningModel"}, "id": 38, "seed": "static bool js_cc_scene_Model_updateLightingmap(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Model *arg1 = (cc::scene::Model *) NULL ;\n    cc::Texture2D *arg2 = (cc::Texture2D *) NULL ;\n    cc::Vec4 *arg3 = 0 ;\n    cc::Vec4 temp3 ;\n    \n    if(argc != 2) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 2);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Model>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) SWIGTYPE*\n    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,2,SWIGTYPE_p_cc__Texture2D\"); \n    // %typemap(in) SWIGTYPE&\n    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());\n    SE_PRECONDITION2(ok, false, \"Model_updateLightingmap,3,SWIGTYPE_p_cc__Vec4\");\n    arg3 = &temp3;\n    \n    (arg1)->updateLightingmap(arg2,(cc::Vec4 const &)*arg3);\n    \n    \n    return true;\n}", "concepts": ["object instantiation", "typecasting"], "parsing_result": [{"instruction": "Write a Python class `Employee` that holds a full name, email, and salary. Provide methods for printing a sentence about the employee and calculating the yearly salary."}, {"instruction": "Write a Python program to represent a `Point` class with x and y coordinates. The class should have an `update` method that accepts x and y coordinates as arguments and assigns them to the x and y coordinates of the instance."}, {"instruction": "Implement a Python class `Student` that has attributes `name`, `age`, and `ranking`."}, {"instruction": "Implement a Python class `Person` with the following properties:\n- name: a string representing the person's name\n- age: an integer representing the person's age"}, {"instruction": "Implement a Python class `Stack` that implements a last-in, first-out (LIFO) stack."}, {"instruction": "Write a Python class `Node` that represents a node in a linked list."}, {"instruction": "Write a class `Rectangle` that calculates the area and perimeter of a rectangle."}, {"instruction": "Implement a Python class `Point` using the `__init__` and `__str__` methods."}, {"instruction": "Create a Python class `Person` with a method `say_name` that prints a person's name."}, {"instruction": "Implement a Python class `Point` that has attributes `x` and `y`."}, {"instruction": "Create a Python class `Fraction` that handles fractions."}, {"instruction": "Write a Python class, `Point`, that represents a point on a Cartesian plane."}, {"instruction": "Write a Python class `Point` that represents a point in 2D."}, {"instruction": "Implement a Python class `Fraction` that supports basic arithmetic operations on fractions, as well as equality checking."}, {"instruction": "Implement a Python class `BinarySearchTree` that defines a binary search tree."}, {"instruction": "Implement a Python class `Vector` that represents a geometric vector."}, {"instruction": "Write a Python class `Point` that defines the x and y coordinates of a point."}, {"instruction": "Write a class `Rectangle` that has a constructor that takes two arguments `width` and `height`, both of type `float`. It also has a method `area` that returns the area of the rectangle."}, {"instruction": "Write a Python class `Average` that takes an arbitrary number of integer values as input, and calculates the average of those values."}, {"instruction": "Implement a Python class `Point` with two attributes: `x` and `y`, and two methods: `distance` and `angle`."}, {"instruction": "Write a Python class `Student` that implements a student record."}, {"instruction": "Write a Python class `Point` that implements a point (x, y) in a 2D plane."}, {"instruction": "Create a Python class named `Point` that represents a two-dimensional point in space."}, {"instruction": "Implement a Python `Person` class with the following properties and behaviors:\n\n- `name`: a string that represents a person's name\n- `age`: an integer that represents a person's age\n- `speak`: a function that prints a greeting about the person's age and name\n- `add_age`: a function that increments the age of the person"}, {"instruction": "Write a Python class `Shape` that has a method `perimeter` that calculates the perimeter of a shape."}, {"instruction": "Write a Python class `Average` that calculates the average of any number of given integers."}, {"instruction": "Write a Python class `Stack` that implements a stack."}, {"instruction": "Implement a Python class `Circle` with the following methods:\n- `__init__`: initializes the instance with a radius (required)\n- `getArea`: returns the area of the circle\n- `getPerimeter`: returns the perimeter of the circle"}, {"instruction": "Implement a Python class `Account` that has two fields `balance` and `limit`. Instantiate an object of this class and implement getters and setters for the two fields."}, {"instruction": "Write a Python class `IntegerSet` to represent a set of integers, using a binary search tree."}, {"instruction": "Write a Python class `Fraction` that implements rational number arithmetic."}, {"instruction": "Create a Python class `Point` with attributes `x` and `y`."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: vector iteration, Euclidean distance, geometry, minimum bounding box\n\n### Task", "fingerprint": null, "content": {"code": "GTEST_TEST(AabbTest, PlaneOverlap) {\n  // The aabb is *not* defined at the origin of the hierarchy frame.\n  const Vector3d p_HoBo_H = Vector3d{0.5, 0.25, -0.75};\n  const Vector3d half_width{1, 2, 3};\n  Aabb aabb_H{p_HoBo_H, half_width};\n\n  // Use brute force to find the position of the \"lowest\" corner of the box\n  // measured from Ho and expressed in frame P. \"Lowest\" means the corner with\n  // the smallest z-component. Note: the \"z-component\" trick only works because\n  // we expect the plane to be Pz = 0.\n  auto lowest_corner = [&half_width, &p_HoBo_H](const RotationMatrixd& R_PH) {\n    Vector3d p_HoCmin_P =\n        Vector3d::Constant(std::numeric_limits<double>::infinity());\n    for (const double x_sign : {-1.0, 1.0}) {\n      for (const double y_sign : {-1.0, 1.0}) {\n        for (const double z_sign : {-1.0, 1.0}) {\n          const Vector3d signs{x_sign, y_sign, z_sign};\n          const Vector3d p_BoC_H = half_width.cwiseProduct(signs);\n          const Vector3d p_HoC_P = R_PH * (p_HoBo_H + p_BoC_H);\n          if (p_HoC_P(2) < p_HoCmin_P(2)) {\n            p_HoCmin_P = p_HoC_P;\n          }\n        }\n      }\n    }\n    return p_HoCmin_P;\n  };\n\n  // Test epsilon is the product of three factors:\n  //  - machine epsilon\n  //  - Two orders of magnitude attributed to the various transformations.\n  //  - A scale factor that is the maximum of (box size, p_HoBo, p_PoHo)\n  const double kEps = 300 * std::numeric_limits<double>::epsilon();\n  // An arbitrary collection of orientations for the box's hierarchy frame H\n  // in the plane frame P.\n  std::vector<AngleAxisd> R_PHs{\n      AngleAxisd{0, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitZ()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 7, Vector3d{1, 2, 3}.normalized()},\n      AngleAxisd{7 * M_PI / 6, Vector3d{-1, 2, -3}.normalized()},\n      AngleAxisd{12 * M_PI / 7, Vector3d{1, -2, 3}.normalized()}\n  };\n  // An arbitrary collection of poses of the plane in the query frame Q.\n  std::vector<RigidTransformd> X_QPs{\n      RigidTransformd{},  // Identity matrix.\n      RigidTransformd{\n          RotationMatrixd{AngleAxisd{M_PI / 4, Vector3d{1, 2, 3}.normalized()}},\n          Vector3d{1, 2, 3}},\n      RigidTransformd{RotationMatrixd{AngleAxisd{\n                          12 * M_PI / 7, Vector3d{-1, -1, 3}.normalized()}},\n                      Vector3d{-3, -1, 2}}\n  };\n  for (const auto& angle_axis_PH : R_PHs) {\n    const RotationMatrixd R_PH{angle_axis_PH};\n    const Vector3d p_HoCmin_P = lowest_corner(R_PH);\n    for (const auto& X_QP : X_QPs) {\n      // Define the plane in the query frame Q.\n      const Vector3d& Pz_Q = X_QP.rotation().col(2);\n      Plane<double> plane_Q{Pz_Q, X_QP.translation()};\n\n      // We position Ho such that Cmin lies on the z = 0 plane in Frame P. Given\n      // we know p_HoCmin_P, we know its current z-value. To put it at zero, we\n      // must displace it in the negative of that z value. The x- and y-values\n      // don't matter, so we pick values we know not to be zero.\n      {\n        // Place the minimum corner just \"above\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Place the minimum corner just \"below\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n\n      // We repeat the same task but with Cmax. Cmax is the reflection of Cmin\n      // over Bo (the origin of the box). We'll express all vectors in the P\n      // frame so we can place that corner just above and below the Pz = 0\n      // plane using the same trick as documented above.\n      const Vector3d p_HoBo_P = R_PH * p_HoBo_H;\n      const Vector3d p_HoCmax_P = p_HoCmin_P + 2 * (p_HoBo_P - p_HoCmin_P);\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it up epsilon to\n        // guarantee intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it down epsilon to\n        // guarantee _no_ intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n    }\n  }\n}", "docstring": "// (if expect_overlap is false) or inside (if true).", "function_name": "GTEST_TEST"}, "id": 40, "seed": "GTEST_TEST(AabbTest, PlaneOverlap) {\n  // The aabb is *not* defined at the origin of the hierarchy frame.\n  const Vector3d p_HoBo_H = Vector3d{0.5, 0.25, -0.75};\n  const Vector3d half_width{1, 2, 3};\n  Aabb aabb_H{p_HoBo_H, half_width};\n\n  // Use brute force to find the position of the \"lowest\" corner of the box\n  // measured from Ho and expressed in frame P. \"Lowest\" means the corner with\n  // the smallest z-component. Note: the \"z-component\" trick only works because\n  // we expect the plane to be Pz = 0.\n  auto lowest_corner = [&half_width, &p_HoBo_H](const RotationMatrixd& R_PH) {\n    Vector3d p_HoCmin_P =\n        Vector3d::Constant(std::numeric_limits<double>::infinity());\n    for (const double x_sign : {-1.0, 1.0}) {\n      for (const double y_sign : {-1.0, 1.0}) {\n        for (const double z_sign : {-1.0, 1.0}) {\n          const Vector3d signs{x_sign, y_sign, z_sign};\n          const Vector3d p_BoC_H = half_width.cwiseProduct(signs);\n          const Vector3d p_HoC_P = R_PH * (p_HoBo_H + p_BoC_H);\n          if (p_HoC_P(2) < p_HoCmin_P(2)) {\n            p_HoCmin_P = p_HoC_P;\n          }\n        }\n      }\n    }\n    return p_HoCmin_P;\n  };\n\n  // Test epsilon is the product of three factors:\n  //  - machine epsilon\n  //  - Two orders of magnitude attributed to the various transformations.\n  //  - A scale factor that is the maximum of (box size, p_HoBo, p_PoHo)\n  const double kEps = 300 * std::numeric_limits<double>::epsilon();\n  // An arbitrary collection of orientations for the box's hierarchy frame H\n  // in the plane frame P.\n  std::vector<AngleAxisd> R_PHs{\n      AngleAxisd{0, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 2, Vector3d::UnitZ()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitX()},\n      AngleAxisd{M_PI / 4, Vector3d::UnitY()},\n      AngleAxisd{M_PI / 7, Vector3d{1, 2, 3}.normalized()},\n      AngleAxisd{7 * M_PI / 6, Vector3d{-1, 2, -3}.normalized()},\n      AngleAxisd{12 * M_PI / 7, Vector3d{1, -2, 3}.normalized()}\n  };\n  // An arbitrary collection of poses of the plane in the query frame Q.\n  std::vector<RigidTransformd> X_QPs{\n      RigidTransformd{},  // Identity matrix.\n      RigidTransformd{\n          RotationMatrixd{AngleAxisd{M_PI / 4, Vector3d{1, 2, 3}.normalized()}},\n          Vector3d{1, 2, 3}},\n      RigidTransformd{RotationMatrixd{AngleAxisd{\n                          12 * M_PI / 7, Vector3d{-1, -1, 3}.normalized()}},\n                      Vector3d{-3, -1, 2}}\n  };\n  for (const auto& angle_axis_PH : R_PHs) {\n    const RotationMatrixd R_PH{angle_axis_PH};\n    const Vector3d p_HoCmin_P = lowest_corner(R_PH);\n    for (const auto& X_QP : X_QPs) {\n      // Define the plane in the query frame Q.\n      const Vector3d& Pz_Q = X_QP.rotation().col(2);\n      Plane<double> plane_Q{Pz_Q, X_QP.translation()};\n\n      // We position Ho such that Cmin lies on the z = 0 plane in Frame P. Given\n      // we know p_HoCmin_P, we know its current z-value. To put it at zero, we\n      // must displace it in the negative of that z value. The x- and y-values\n      // don't matter, so we pick values we know not to be zero.\n      {\n        // Place the minimum corner just \"above\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Place the minimum corner just \"below\" the plane.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmin_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n\n      // We repeat the same task but with Cmax. Cmax is the reflection of Cmin\n      // over Bo (the origin of the box). We'll express all vectors in the P\n      // frame so we can place that corner just above and below the Pz = 0\n      // plane using the same trick as documented above.\n      const Vector3d p_HoBo_P = R_PH * p_HoBo_H;\n      const Vector3d p_HoCmax_P = p_HoCmin_P + 2 * (p_HoBo_P - p_HoCmin_P);\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it up epsilon to\n        // guarantee intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) + kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_TRUE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n      {\n        // Put the maximum corner *on* the z = 0 plane in Frame P. The bulk of\n        // the box now extends *below* the plane; so bump it down epsilon to\n        // guarantee _no_ intersection.\n        const Vector3d p_PoHo_P{Vector3d{0.5, -0.25, -p_HoCmax_P(2) - kEps}};\n        RigidTransformd X_PH{R_PH, p_PoHo_P};\n        EXPECT_FALSE(Aabb::HasOverlap(aabb_H, plane_Q, X_QP * X_PH));\n      }\n    }\n  }\n}", "concepts": ["vector iteration", "Euclidean distance", "geometry", "minimum bounding box"], "parsing_result": [{"instruction": "Write a function `findMaxRect` that takes a vector of vectors and returns the index of the vector with the largest area enclosed by a rectangle."}, {"instruction": "Write a Python function `getBoundingBox` that takes a list of points and returns the minimum bounding box of those points."}, {"instruction": "Implement a Python function `findCircleCenter` that returns the center of a circle when given the radius and the coordinates of the center."}, {"instruction": "Implement a Python function `calculateHull` that takes a list of points and returns the minimum bounding rectangle."}, {"instruction": "Given a set of points `P`, find the minimum bounding box that contains all of the points."}, {"instruction": "Create a Python function `findClosest` that returns the two closest points from a list of points."}, {"instruction": "- Implement a function that takes in two lists of points, and returns the minimum bounding box around them.\n- The minimum bounding box is the smallest box that can be drawn around the points, while still containing all the points.\n- The box should be defined by two points, which are the two corners of the box.\n- The function should return a list of two points, where each point is a list of floats."}, {"instruction": "Given a list of 2D points, find the bounding box around the points, or the smallest rectangle that can contain all the points."}, {"instruction": "Write a Python function `find_minimum_bounding_box` that takes in a set of 2D points and returns the minimum bounding box that contains all of the points."}, {"instruction": "Write a Python function `calculateDistance` that calculates the distance between two points on a 2D plane."}, {"instruction": "Write a Python function `findMinDistance` that takes two vectors of x-y pairs and returns the shortest Euclidean distance between any two points."}, {"instruction": "Write a Python function `farthest_points` that takes a list of 2D points and returns the two points that are farthest from each other."}, {"instruction": "Write a Python function `distanceBetweenPoints` that calculates the Euclidean distance between two points."}, {"instruction": "Write a Python function `pointsInsideCircle` that checks if a vector of points are inside a circle with a given radius and center point."}, {"instruction": "Create a Python function `find_centroid` that finds the centroid of a given vector."}, {"instruction": "Create a Python function `findClosest` that takes a list of coordinates and returns the coordinates of the pair that are closest to each other."}, {"instruction": "Create a Python function `nearest` that takes a vector of points and returns the point closest to the origin."}, {"instruction": "Implement a Python function `euclidDist` that takes two points on a 2D plane and returns the Euclidean distance between the points."}, {"instruction": "Create a Python function `collisionDetection` that detects collision between two arbitrarily-shaped objects."}, {"instruction": "Implement a function `furthestPoints` that returns the furthest points from a given set of points."}, {"instruction": "Write a Python function `findOptimalPlacements` that returns a vector of vectors of two integers, representing the optimal position of one or more peanuts in front of a window."}, {"instruction": "Create a Python function `getDistance` that takes a set of points and returns the Euclidean distance between them."}, {"instruction": "Create a Python function `closestPair` that finds the closest pair of points in a given list of 2D points."}, {"instruction": "Write a Python function `distance` that returns the Euclidean distance between two points."}, {"instruction": "Write a Python function `findClosestPair` that returns the closest pair of points from a point set."}, {"instruction": "Create a Python function `gravity` that calculates the acceleration due to gravity of an object at a distance."}, {"instruction": "Write a Python function `findBoundingBox` that takes two vectors of coordinates and returns the minimum bounding box (mouth, eye, and nose) as a vector of pairs."}, {"instruction": "Write a Python function `distanceBetweenPoints` that takes two points and returns the Euclidean distance between them."}, {"instruction": "Implement a Python function `findCenter` that finds the center of a cluster of points."}, {"instruction": "Write a Python function `minBoundingBox` that computes the minimum bounding box of a set of points."}, {"instruction": "Write a Python function `closestPair` that finds the closest pair of points in a vector of points."}, {"instruction": "Implement a function that takes a list of points and returns the minimum bounding box for those points."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: string manipulation, string concatenation, substring extraction, character encoding\n/README.md\n# Programming-Concepts\nA repository for a weekly collection of programming concepts\n\n## Resources\n- [The C++ Programming Language](https://www.stroustrup.com/Programming/)\n\n## Contributing\nIf you are a beginner looking to contribute to the repository, feel free to fork the repository and submit a pull request.\n\n## License\nThis repository is licensed under the [MIT License](LICENSE).\n\n### Task", "fingerprint": null, "content": {"code": "string cc_smart_shorten(string& s, int limiter){\n    //s = s.substr(0, limiter * 2);\n    int nl_pos = s.find_first_of(\"<\");\n    s = s.substr(0, nl_pos);\n    if(s.size() <= limiter) return s;\n\n    string ret = s.substr(0, limiter);\n    if(nl_pos <= limiter) return ret;\n\n    for(int i = limiter; i < s.size(); ++i){\n        if(i < s.size() - 3){\n            if(s[i] == -17 && s[i+1] == -68 && s[i+2] == -116) break;\n            if(s[i] == -29 && s[i+1] == -128 && s[i+2] == -126) break;\n            if(s[i] == ',' || s[i] == '.') break;\n        }\n        ret += s[i];\n    }\n\n    return ret;\n}", "docstring": "/* Exit immediately */", "function_name": "database_fatal"}, "id": 41, "seed": "string cc_smart_shorten(string& s, int limiter){\n    //s = s.substr(0, limiter * 2);\n    int nl_pos = s.find_first_of(\"<\");\n    s = s.substr(0, nl_pos);\n    if(s.size() <= limiter) return s;\n\n    string ret = s.substr(0, limiter);\n    if(nl_pos <= limiter) return ret;\n\n    for(int i = limiter; i < s.size(); ++i){\n        if(i < s.size() - 3){\n            if(s[i] == -17 && s[i+1] == -68 && s[i+2] == -116) break;\n            if(s[i] == -29 && s[i+1] == -128 && s[i+2] == -126) break;\n            if(s[i] == ',' || s[i] == '.') break;\n        }\n        ret += s[i];\n    }\n\n    return ret;\n}", "concepts": ["string manipulation", "string concatenation", "substring extraction", "character encoding\n/README.md\n# Programming-Concepts\nA repository for a weekly collection of programming concepts\n\n## Resources\n- [The C++ Programming Language](https://www.stroustrup.com/Programming/)\n\n## Contributing\nIf you are a beginner looking to contribute to the repository", "feel free to fork the repository and submit a pull request.\n\n## License\nThis repository is licensed under the [MIT License](LICENSE)."], "parsing_result": [{"instruction": "Source\n- [Codewars](https://www.codewars.com/)\n/c++/example-9.cpp\n// Write a C++ function celsiusToFahrenheit that converts Celsius to Fahrenheit.\n// The formula for conversion is:\n// F = C * 9 / 5 + 32\n\n#include <iostream>\n\nfloat celsiusToFahrenheit(float celsius) {\n    return celsius * 9 / 5 + 32;\n}\n\nint main() {\n    std::cout << celsiusToFahrenheit(0) << std::endl;\n    std::cout << celsiusToFahrenheit(100) << std::endl;\n    std::cout << celsiusToFahrenheit(212) << std::endl;\n\n    return 0;\n}\n/c++/example-1.cpp\n// Create a C++ function charFrequency that returns a frequency map of characters in a string.\n// The map returned should contain the characters in the string as keys and their frequencies as values.\n\n#include <iostream>\n#include <map>\n\nstd::map<char, int> charFrequency(std::string str) {\n    std::map<char, int> m; // empty map\n\n    // iterate through str\n    for (char ch : str) {\n        // if ch is in m, increment its value\n        if (m.count(ch)) {\n            ++m[ch];\n        } else {\n            // otherwise, add it as a new key with a value of 1\n            m.insert(std::make_pair(ch, 1));\n        }\n    }\n\n    return m;\n}\n\nint main() {\n    std::cout << charFrequency(\"hello\") << std::endl;\n    std::cout << charFrequency(\"abc\") << std::endl;\n    std::cout << charFrequency(\"aabbcc\") << std::endl;\n\n    return 0;\n}\n/c++/example-2.cpp\n// Create a C++ function isPrime that checks if a number is prime.\n\n#include <iostream>\n\nbool isPrime(int num) {\n    // 0 and 1 are not prime numbers\n    if (num < 2) {\n        return false;\n    }\n\n    // iterate from 2 to floor(sqrt(num))\n    for (int i = 2; i * i <= num; ++i) {\n        // if any number in the range divides num evenly\n        // num is not prime\n        if (num % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    std::cout << boolalpha << isPrime(0) << std::endl;\n    std::cout << boolalpha << isPrime(1) << std::endl;\n    std::cout << boolalpha << isPrime(2) << std::endl;\n    std::cout << boolalpha << isPrime(3) << std::endl;\n    std::cout << boolalpha << isPrime(4) << std::endl;\n    std::cout << boolalpha << isPrime(5) << std::endl;\n    std::cout << boolalpha << isPrime(6) << std::endl;\n    std::cout << boolalpha << isPrime(7) << std::endl;\n    std::cout << boolalpha << isPrime(8) << std::endl;\n    std::cout << boolalpha << isPrime(9) << std::endl;\n    std::cout << boolalpha << isPrime(10) << std::endl;\n    std::cout << boolalpha << isPrime(11) << std::endl;\n    std::cout << boolalpha << isPrime(12) << std::endl;\n\n    return 0;\n}"}, {"instruction": "Coding Guidelines\n- **Do not** copy code from other people's solutions.\n- **Do not** copy code from other repositories.\n- **Do not** copy code from online resources.\n- **Do not** copy code from exams (even if the exam is fake).\n- **Do not** ask anyone else to help you with your task.\n- **Do not** use the internet to find solutions to tasks.\n- **Do not** use solutions to tasks you found on the internet.\n- **Do not** use solutions to tasks you found on the internet.\n- **Do not** ask others to help you with your task.\n- **Do not** ask others to help you with your task.\n- **Do not** ask others to help you with your task.\n- **Do not** ask others to help you with your task.\n- **Do not** ask others to help you with your task.\n\n**This is not a malicious request. This is a request for a good-faith effort to continue to improve the repository.**\n\nThis repository is hosted on GitHub, and the owner of the repository grants the users the right to use it for their personal needs.\n\n### Repository Maintenance Guidelines\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n- **Do not** delete tasks.\n\n**This is not a malicious request. This is a request for a good-faith effort to continue to improve the repository.**\n\nThis repository is hosted on GitHub, and the owner of the repository grants the users the right to use it for their personal needs.\n\n### Resources\n- [Checkstyle](https://checkstyle.sourceforge.io/)\n- [Linux Subsystem for Windows](https://docs.microsoft.com/en-us/windows/wsl/install-win10)\n- [Visual Studio Code](https://code.visualstudio.com/)\n- [Visual Studio](https://visualstudio.microsoft.com/)\n- [Visual Studio Code Cpp Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)\n- [Git for Windows](https://git-scm.com/download/win)\n- [GitHub Desktop](https://desktop.github.com/)\n- [Visual Studio Code Markdown Preview Enhanced](https://github.com/shd101wyy/vscode-markdown-preview-enhanced)\n- [Visual Studio Code Spell Checker](https://github.com/streetsidesoftware/vscode-spell-checker)\n- [Visual Studio Code TSLint](https://github.com/Microsoft/vscode-tslint)\n/C++/dev/solution.cpp\n#include <iostream>\n#include <array>\n#include <string>\n\nusing std::cout;\nusing std::endl;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n\n    return 0;\n}\n/C++/dev/solution_hard.cpp\n#include <iostream>\n#include <array>\n#include <string>\n\nusing std::cout;\nusing std::endl;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n\n    return 0;\n}\n/C++/dev/Makefile\n# TODO: add a Makefile"}, {"instruction": "Form\n\nCreate a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Format\nCreate a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Format\nEach task must adhere to the following format:\n- `category`: the type of task (e.g., function implementation, class implementation, or program implementation)\n- `language`: the programming language to be used\n- `difficulty`: the complexity level of the task (e.g., easy, medium, or hard)\n- `concepts`: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Submission Process\n- For each task, create a branch with the format `task1-task1-submission`, where `task1-task1-submission` is the name of the task being submitted.\n- Create a pull request that will merge the branch into the `main` branch.\n/Tasks/task9-celsiusToFahrenheit/celsiusToFahrenheit.cpp\n#include <iostream>\n\nfloat celsiusToFahrenheit(float celsius) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task1-maxOfTwo/maxOfTwo.cpp\n#include <iostream>\n\nint maxOfTwo(int a, int b) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task8-celsiusToFahrenheit/README.md\n# Task 8 - Celsius to Fahrenheit\nImplement a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit and returns the result./Tasks/task5-findMin/findMin.cpp\n#include <iostream>\n\nint findMin(int* arr, int size) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task6-swap/swap.cpp\n#include <iostream>\n\nvoid swap(int* a, int* b) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task4-maxOfTwo/maxOfTwo.cpp\n#include <iostream>\n\nint maxOfTwo(int a, int b) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task3-countVowels/countVowels.cpp\n#include <iostream>\n\nint countVowels(std::string str) {\n\n}\n\nint main() {\n\n    return 0;\n}/Tasks/task2-isPrime/isPrime.cpp\n#include <iostream>\n\nbool isPrime(int n) {\n\n}\n\nint main() {\n\n    return 0;\n}"}, {"instruction": "Ideas\n- Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n#"}, {"instruction": "Submission Guidelines\nAs part of your submission, please include:\n\n- The original task, including category, language, difficulty, and concepts.\n- Your solution to the task, in the appropriate language.\n- A link to your profile page in your GitHub account.\n\n### Review Guidelines\nWhen reviewing your pull request, please consider the following:\n\n- **Readability:** Does the solution follow good coding practices and is it easy to understand?\n- **Up-to-date:** Have you updated the solution to the latest version of the programming concept?\n- **Originality:** Is the solution unique and does it address the original programming concept?\n- **Testing:** Have you included tests that verify the solution is correct and address the expected behavior?\n- **Documentation:** Do you have a comprehensive README file that details the task, solution, and any necessary resources?\n- **Comments:** Do you have comments in your code that explain why you're doing something a certain way?\n- **Efficiency:** Have you considered the efficiency of your solution and are you using appropriate data structures and algorithms?\n- **Licensing:** Have you followed the licensing guidelines and included attribution in your solution?"}, {"instruction": "Guidelines\nCreate a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Ideas\n- Implement a function that returns the number of vowels in a string (e.g., \"Hello World\" -> 3)\n- Implement a function that returns the number of consonants in a string (\"Hello World\" -> 8)\n- Implement a function that reverses a string (\"Hello\" -> \"olleH\")\n- Implement a function that determines if a string is a palindrome (\"racecar\" -> true, \"hello\" -> false)\n- Implement a function that determines if a string is a pangram (e.g., \"The quick brown fox jumps over the lazy dog\" -> true)\n- Implement a function that determines if a string is a rotation of another string (e.g., \"Hello World\" rotates to \"World Hello\" -> true)\n- Create a function that returns a string with all non-alphanumeric characters removed (e.g., \"Hello World!\" -> \"HelloWorld\"\n- Implement a function that determines if a string is a pangram using a frequency map (e.g., \"The quick brown fox jumps over the lazy dog\" -> true)\n- Implement a function that determines if a number is prime (e.g., 9 -> false, 11 -> true)\n- Create a function that returns a frequency map of characters in a string (e.g., \"Hello World!\" -> {\"H\" -> 1, \"e\" -> 2, \"l\" -> 3, \"o\" -> 2, \" \" -> 1, \"W\" -> 1, \"r\" -> 1, \"d\" -> 1, \"!\" -> 1})\n- Implement a function that returns the nth Fibonacci number (e.g., 0 -> 1, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 5, 5 -> 8, 6 -> 13, 7 -> 21, 8 -> 34, 9 -> 55)\n- Implement a function that returns the value of a mathematical expression (e.g., \"1 + 2\" -> 3, \"1 + 5\" -> 6, \"3 * 5\" -> 15, \"(1 + 2) * 5\" -> 15, \"4 + (12 / 3)\" -> 5)\n/Examples/C++/celsiusToFahrenheit.cpp\n/*\n    Author: \n    Date: 4/11/2018\n    Purpose: Convert Celsius to Fahrenheit\n*/\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int celsius;\n    float fahrenheit;\n\n    cout << \"Enter a temperature in Celsius: \";\n    cin >> celsius;\n\n    fahrenheit = celsius * (9.0/5.0) + 32;\n\n    cout << celsius << \" degrees Celsius is \" << fahrenheit << \" degrees Fahrenheit.\";\n\n    return 0;\n}\n/Examples/C++/findMin.cpp\n/*\n    Author: \n    Date: 4/14/2018\n    Purpose: Find the minimum element in a vector of integers\n*/\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMin(vector<int> &arr) {\n    int min = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return min;\n}\n\nint main() {\n    vector<int> arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};\n    int min = findMin(arr);\n    cout << min;\n    return 0;\n}\n/Examples/C++/swap.c\n/*\n    Author: \n    Date: 4/14/2018\n    Purpose: Swap the values of two integers using pass-by-reference\n*/\n\n#include <iostream>\nusing namespace std;\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nint main() {\n    int a = 0, b = 0;\n    cout << \"Enter a: \";\n    cin >> a;\n    cout << \"Enter b: \";\n    cin >> b;\n    swap(a, b);\n    cout << \"a = \" << a << \", b = \" << b;\n\n    return 0;\n}\n/Examples/C++/maxOfTwo.cpp\n/*\n    Author: \n    Date: 4/11/2018\n    Purpose: Return the larger of two integers using the ternary operator\n*/\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cout << \"Enter a: \";\n    cin >> a;\n    cout << \"Enter b: \";\n    cin >> b;\n    cout << \"max(\" << a << \", \" << b << \") = \" << (a > b ? a : b);\n    return 0;\n}\n/Examples/C++/countVowels.c\n/*\n    Author: \n    Date: 4/11/2018\n    Purpose: Count the number of vowels (a, e, i, o, u) in a string\n    Properties: category: function implementation, language: C++, difficulty: easy, concepts: string traversal, case-insensitive comparison, loop with condition\n*/\n\n#include <iostream>\nusing namespace std;\n\nint countVowels(string s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    string s;\n    cout << \"Enter a string: \";\n    getline(cin, s);\n    int count = countVowels(s);\n    cout << count << \" vowels in \" << s;\n    return 0;\n}"}, {"instruction": "Submission Workflow\n1. Fork the repository.\n2. Create a new folder in the root directory of this repository named `{concept}`.\n3. Create a new file in the folder named `{language}-{difficulty}-{concept}.md`.\n4. Write a description of the programming concept within the file, and copy the template below.\n5. Open a pull request against the main branch.\n\n```md"}, {"instruction": "Submission Process\n1. Create a new branch named `task-<task number>` and make your changes in this branch.\n2. Create a pull request from this branch to `master` branch.\n/task-11/README.md\n# Task 11\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: hard\n- concepts: bitwise operators, XOR, AND, OR, truth tables, boolean algebra\n\n## Task\nCreate a function `bitwiseAND` that takes two integers and returns the bitwise AND of the two.\n/task-1/README.md\n# Task 1\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: arithmetic operations, assignment, types\n\n## Task\nCreate a C++ function `isEven` that takes an integer and returns true if the integer is even, false otherwise.\n/task-3/README.md\n# Task 3\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: string manipulation, string concatenation, substring extraction, character encoding\n\n## Task\nCreate a function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n/task-5/README.md\n# Task 5\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: linear search, comparison, iteration\n\n## Task\nCreate a C++ function `findMin` to return the smallest element in a vector of integers.\n/task-2/README.md\n# Task 2\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: arithmetic operations, assignment, types\n\n## Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n/task-10/README.md\n# Task 10\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: arithmetic conversion, temperature formulas\n\n## Task\nCreate a function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n/task-9/README.md\n# Task 9\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: medium\n- concepts: recursion, base case, integer sequences\n\n## Task\nImplement a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n/task-4/README.md\n# Task 4\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: ternary operator, conditional logic, function return\n\n## Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n/task-8/README.md\n# Task 8\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: arithmetic conversion, temperature formulas\n\n## Task\nCreate a function `fahrenheitToCelsius` that converts Fahrenheit to Celsius.\n/task-6/README.md\n# Task 6\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: pass-by-reference, temporary variable, in-place mutation\n\n## Task\nCreate a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n/task-1/task-1.cpp\n#include <iostream>\nusing namespace std;\n\nbool isEven(int n) {\n    return (n % 2 == 0);\n}\n\nint main() {\n    int n;\n    cout << \"Enter an integer: \";\n    cin >> n;\n    if (isEven(n)) {\n        cout << \"The integer is even\";\n    } else {\n        cout << \"The integer is odd\";\n    }\n    cout << endl;\n    return 0;\n}\n/task-7/README.md\n# Task 7\n\n## Properties\n- category: function implementation\n- language: C++\n- difficulty: easy\n- concepts: bitwise operators, XOR, AND, OR, truth tables, boolean algebra\n\n## Task\nImplement a C++ function `bitwiseXOR` that takes two integers and returns the bitwise XOR of the two.\n/task-7/task-7.cpp\n#include <iostream>\nusing namespace std;\n\nint bitwiseXOR(int a, int b) {\n    return a ^ b;\n}\n\nint main() {\n    int a, b;\n    cout << \"Enter two integers: \";\n    cin >> a >> b;\n    cout << \"The bitwise XOR of \" << a << \" and \" << b << \" is \" << bitwiseXOR(a, b) << endl;\n    return 0;\n}\n/task-12/task-12.cpp\n#include <iostream>\nusing namespace std;\n\nint bitwiseAND(int a, int b) {\n    return a & b;\n}\n\nint main() {\n    int a, b;\n    cout << \"Enter two integers: \";\n    cin >> a >> b;\n    cout << \"The bitwise AND of \" << a << \" and \" << b << \" is \" << bitwiseAND(a, b) << endl;\n    return 0;\n}"}, {"instruction": "Sources\n- [Code Wars](https://www.codewars.com/)\n- [Codingame](https://www.codingame.com/)\n- [CodeFights](https://codefights.com)\n- [CodeChef](https://www.codechef.com)\n- [CodeSignal](https://codesignal.com)\n- [LeetCode](https://leetcode.com)\n- [TopCoder](https://www.topcoder.com)\n- [Project Euler](https://projecteuler.net)\n- [HackerRank](https://www.hackerrank.com)\n- [HackerEarth](https://www.hackerearth.com)\n- [HackerRank](https://www.hackerrank.com)\n/CPP/maxOfTwo.cpp\n#include <iostream>\n\nint mof2(int a, int b){\n  if(a < b){\n    return b;\n  }\n  else{\n    return a;\n  }\n}\n\nint main(){\n  int a, b;\n  std::cin >> a >> b;\n  std::cout << mof2(a, b);\n}\n/C/factorial.c\n#include <stdio.h>\n\nint factorial(int n){\n  int i;\n  int result = 1;\n  for(i = 1; i <= n; i++){\n    result *= i;\n  }\n  return result;\n}\n\nint main(){\n  int n;\n  printf(\"%d\\n\", factorial(n));\n}\n/C++/countVowels.cpp\n#include <iostream>\n#include <string>\n\nint countVowels(std::string str){\n  int count = 0;\n  for(int i = 0; i < str.size(); i++){\n    if(str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u'){\n      count += 1;\n    }\n  }\n  return count;\n}\n\nint main(){\n  std::string str;\n  getline(std::cin, str);\n  std::cout << countVowels(str) << std::endl;\n}"}, {"instruction": "Submission Guidelines\n- Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used."}, {"instruction": "Categories\n- [x] array implementation\n- [x] class implementation\n- [x] function implementation\n- [x] program implementation\n- [x] string implementation"}, {"instruction": "Submission\nSubmit a pull request with your task.\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Complete the function below\nint findMin(vector<int> v) {\n\tint min = v[0];\n\tfor (int i = 0; i < v.size(); i++)\n\t{\n\t\tif (v[i] < min)\n\t\t{\n\t\t\tmin = v[i];\n\t\t}\n\t}\n\treturn min;\n}\n\n//Driver code\nint main() {\n    vector<int> v = { 1, 2, 3, 4, 5 };\n    int result = findMin(v);\n    cout << result;\n}\n#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\n// Complete the function below\nunordered_map<char, int> charFrequency(string s) {\n\tunordered_map<char, int> freq;\n\tfor (int i = 0; i < s.size(); i++)\n\t{\n\t\tfreq[s[i]] += 1;\n\t}\n\treturn freq;\n}\n\n//Driver code\nint main() {\n    string s = \"Hello World!\";\n    unordered_map<char, int> result = charFrequency(s);\n    cout << result['H'];\n    cout << result['o'];\n}\n#include <iostream>\nusing namespace std;\n\nint findMin(int a, int b) {\n\treturn a < b ? a : b;\n}\n\n//Driver code\nint main() {\n\tint a = 2, b = 4;\n\tint result = findMin(a, b);\n\tcout << result;\n}\n#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\n// Complete the function below\nbool isPrime(int n) {\n\tfor (int i = 2; i <= n / 2; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n//Driver code\nint main() {\n\tint n;\n\tcin >> n;\n\tbool result = isPrime(n);\n\tcout << result;\n}\n#include <iostream>\nusing namespace std;\n\nint countVowels(string s) {\n\tint vowels = 0;\n\tfor (int i = 0; i < s.size(); i++)\n\t{\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\t\t{\n\t\t\tvowels += 1;\n\t\t}\n\t}\n\treturn vowels;\n}\n\n//Driver code\nint main() {\n\tstring s;\n\tcin >> s;\n\tint result = countVowels(s);\n\tcout << result;\n}\n#include <iostream>\nusing namespace std;\n\n// Complete the function below\nint celsiusToFahrenheit(int celsius) {\n\treturn (celsius * 1.8) + 32;\n}\n\n//Driver code\nint main() {\n\tint celsius;\n\tcin >> celsius;\n\tint result = celsiusToFahrenheit(celsius);\n\tcout << result;\n}\n#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\n// Complete the function below\nbool isPrime(int n) {\n\tfor (int i = 2; i <= n / 2; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n//Driver code\nint main() {\n\tint n;\n\tcin >> n;\n\tbool result = isPrime(n);\n\tcout << result;\n}"}, {"instruction": "Format\nThe format of programming tasks is prescribed by the [Code Review StackExchange](https://codereview.stackexchange.com/tags/source-code/info) guidelines.\n\n### Note\nThis repository is a collection of programming concepts. It is not a programming course.\n/* Write a C++ function swap that exchanges the values of two integers using pass-by-reference. */\n\n#include <iostream>\nusing std::cin;\nusing std::cout;\nusing std::endl;\n\nint main() {\n    int num1, num2;\n    cout << \"Enter two integers: \";\n    cin >> num1 >> num2;\n    cout << \"num1 = \" << num1 << \", num2 = \" << num2 << endl;\n\n    cout << \"Swap the values...\" << endl;\n    int temp = num1;\n    num1 = num2;\n    num2 = temp;\n    cout << \"num1 = \" << num1 << \", num2 = \" << num2 << endl;\n\n    return 0;\n}"}, {"instruction": "Format\nEach task is formatted as follows:\n\n```\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nWrite a C++ function `isPrime` that checks if a number is prime.\n```\n\nThe properties of a task are separated by colons and are placed on their own line above the task description. The task is then separated by a line of three dashes and is followed by a single space.\n\n## Credits\nThis repository was created as a project for the [Programming Concepts](https://www.reddit.com/r/programmingconcepts) subreddit.\ncharFrequency(char *string)\n{\n    map<char, int> frequencyMap;\n\n    for (int i = 0; string[i]!= '\\0'; i++)\n    {\n        if (frequencyMap.find(string[i]) == frequencyMap.end())\n        {\n            frequencyMap.insert({ string[i], 1 });\n        }\n        else\n        {\n            frequencyMap[string[i]] += 1;\n        }\n    }\n\n    return frequencyMap;\n}\n\nint main()\n{\n    char string[] = \"This is a string to test the function.\";\n\n    map<char, int> frequencyMap = charFrequency(string);\n\n    for (auto it = frequencyMap.begin(); it!= frequencyMap.end(); ++it)\n    {\n        cout << it->first << \" appears \" << it->second << \" times.\" << endl;\n    }\n\n    return 0;\n}/C++/charFrequency.cpp\n#include <iostream>\n#include <map>\n\nusing namespace std;\n\nmap<char, int>"}, {"instruction": "Template\n```\n## Properties\ncategory: category\nlanguage: language\ndifficulty: difficulty\nconcepts: concept1, concept2, etc.\n\n### Task\n```\n/CPP/isPrime.cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    } else if (n <= 3) {\n        return true;\n    } else if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n\n    for (int i = 6; i * i <= n; i += 6) {\n        if (n % (i - 1) == 0 || n % (i + 1) == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    int num = 0;\n\n    cout << \"Enter an integer: \";\n    cin >> num;\n\n    cout << num << \" is prime: \" << isPrime(num) << endl;\n\n    return 0;\n}"}, {"instruction": "-Submission Checklist\n- [ ] The task has a clear description of the problem\n- [ ] The task has a clear set of specifications\n- [ ] The task has one or more examples\n- [ ] The task has a clear set of examples\n- [ ] The task has a clear set of expected outputs\n- [ ] The task has a clear set of expected errors\n- [ ] The task has a clear set of sample solutions\n- [ ] The task has a clear set of sample tests\n- [ ] The task has a clear set of sample inputs and outputs\n- [ ] The task has a clear set of unit tests/c++/fibonacci.cpp\n// C++ program to find the Nth Fibonacci number \r\n// using recursion\r\n#include <iostream>\r\nusing namespace std;\r\n\r\n// Recursive function to find Nth Fibonacci number \r\nint fibonacci(int n) \r\n{ \r\n\tif (n <= 1) \r\n\t\treturn n; \r\n\treturn fibonacci(n - 1) + fibonacci(n - 2); \r\n} \r\n\r\n// Driver code \r\nint main() \r\n{ \r\n\tint n = 9; \r\n\tcout << fibonacci(n); \r\n\treturn 0; \r\n}"}, {"instruction": "Guidelines\nPlease follow the guidelines outlined in [this article](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file-a-practical-guide/) when creating a task guide.#include <iostream>\n#include <map>\n#include <string>\n#include <vector>\nusing namespace std;\n\nmap<char, int> charFrequency(string s) {\n  // create frequency map\n  map<char, int> freq;\n  // map iterator\n  map<char, int>::iterator it;\n  // loop through string\n  for(int i = 0; i < s.length(); i++) {\n    // convert string to char\n    char c = s.at(i);\n    // increment frequency for each character\n    freq[c]++;\n  }\n  return freq;\n}\n\nint main() {\n  // your code goes here\n  cout << \"Hello World!\" << endl;\n  string s = \"Hello World!\";\n  map<char, int> freq = charFrequency(s);\n  for(auto i : freq) {\n    cout << i.first << \": \" << i.second << endl;\n  }\n}#include <iostream>\n#include <map>\nusing namespace std;\n\nbool isPrime(int n) {\n  // return false for non-positive numbers\n  if(n <= 0) return false;\n  // loop through numbers from 2 to n-1\n  for(int i = 2; i < n; i++) {\n    // if divisible by any of those numbers, return false\n    if(n % i == 0) return false;\n  }\n  // if none of those numbers were divisible, return true\n  return true;\n}\n\nint main() {\n  // your code goes here\n  cout << \"Hello World!\" << endl;\n  cout << isPrime(5) << endl;\n  cout << isPrime(11) << endl;\n  cout << isPrime(-5) << endl;\n  cout << isPrime(0) << endl;\n}"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: class member function, class initialization, function definition\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_SubModel_update(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SubModel *arg1 = (cc::scene::SubModel *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::SubModel>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->update();\n    \n    \n    return true;\n}", "docstring": "// js_dtoroverride", "function_name": "js_delete_cc_scene_SubModel"}, "id": 45, "seed": "static bool js_cc_scene_SubModel_update(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::SubModel *arg1 = (cc::scene::SubModel *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::SubModel>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->update();\n    \n    \n    return true;\n}", "concepts": ["class member function", "class initialization", "function definition"], "parsing_result": [{"instruction": "Create a Python class `LinkedList` that implements a singly linked list."}, {"instruction": "Create a Python class `Rectangle` that represents a rectangle on a Cartesian plane with a given width and height."}, {"instruction": "Create a Python class `Book` with the following attributes:\n- title: the title of the book, a string\n- author: the author of the book, a string\n- pages: the number of pages in the book, an integer\n\nThe class should have a single instance method `summary()` that prints a summary of the book to standard output."}, {"instruction": "Create a Python class `Polynomial` that represents a polynomial. The class must have two member functions: `add` and `evaluate`."}, {"instruction": "Write a Python class `Node` that represents a node in a linked list."}, {"instruction": "Design a Python class `Person` with the following properties:\n- name\n- age\n- zipcode\n\nDesign a Python class `Student` that inherits the properties of `Person` and adds the following properties:\n- school\n- grade\n\nDesign a Python class `Teacher` that inherits the properties of `Person` and adds the following properties:\n- department\n- yearsOfExperience"}, {"instruction": "Write a Python program to implement the Fibonacci sequence."}, {"instruction": "Create a Python class `Rectangle` with instance variables `length` and `width` and two member functions `getArea` and `getPerimeter`."}, {"instruction": "Create a class `Node` with a `next` member. Write a function `reverseNodes` that takes as input a `Node` and reverses the nodes in place."}, {"instruction": "Implement a Python class `Triangle` that represents a 2-dimensional triangle with vertices at (x, y) and (x+1, y+1)."}, {"instruction": "Implement a Python `Point` class with attributes `x` and `y` that represents a two-dimensional point."}, {"instruction": "Implement a cute cat class and write a Python program that creates two cat objects and prints them out."}, {"instruction": "Implement a Python class `Student` that contains the following:\n\n- Student ID\n- Name\n- Grade"}, {"instruction": "Create a new Python program named `hash-map.py` that implements a hash map using a dictionary."}, {"instruction": "Implement a Python class `Rectangle` with the following properties:\n- width\n- height\n- area\n- perimeter"}, {"instruction": "Create a Python class `Point` that contains two class member variables `x` and `y` of type `int`. Create appropriate class member functions to find out the distance to a point."}, {"instruction": "Write a Python class `BankAccount` that has an associated balance and a `deposit` function."}, {"instruction": "Create a Python `Node` class that implements a singly linked list node."}, {"instruction": "Implement a Python class `FizzBuzz` that allows for a given integer `n` to be passed in and prints out the numbers from 1 to `n` in succession, except for multiples of 3 print \"Fizz\", multiples of 5 print \"Buzz\", and multiples of both print \"FizzBuzz\"."}, {"instruction": "Write a Python program that implements the `Factorial` class. The class must have a `factorial` function that calculates the factorial of a non-negative integer."}, {"instruction": "Write a Python program to simulate the rolling of two dice."}, {"instruction": "Implement a Python class `Circle` that represents a simple circle. The class should have the following member functions:\n\n- `getArea()`: returns the area of the circle\n- `getCircumference()`: returns the circumference of the circle"}, {"instruction": "Create a Python class `Stack` that has a `push` method which adds an element to the stack and a `pop` method which removes an element from the stack."}, {"instruction": "Implement a class `Student` with appropriate member variables and functions."}, {"instruction": "Write a Python class `Calculator` that has the following functions:\n\n- `add`: adds two numbers\n- `subtract`: subtracts one number from another\n- `multiply`: multiplies two numbers\n- `divide`: divides one number by another"}, {"instruction": "Implement a Python class called `BankAccount` that represents a bank account. It should have the following attributes:\n- `accountBalance`\n- `interestRate`\n\nIt should have the following methods:\n- `deposit`\n- `withdraw`\n- `getAccountBalance`"}, {"instruction": "Implement a Python class `Perfect` that represents a perfect number."}, {"instruction": "Write a Python program `IsList` that implements a class called `IsList`, which stores a Python list in an attribute `lst` and has the following member functions:\n\n- `IsList`, which initializes an `IsList` object with an empty Python list\n- `add`, which adds an element to the Python list\n- `remove`, which removes an element from the Python list\n- `print`, which returns the list as a string"}, {"instruction": "Write a class `QuadraticEquation` that computes the roots of a quadratic equation."}, {"instruction": "Create a Python class `VertexBufferObject` with the following features:\n- a constructor that initializes member variables\n- a member function `render` that draws the object"}, {"instruction": "Create a Python class `Person` that implements the `__init__` function for creating a person object, and a function `greet` that prints a greeting message."}, {"instruction": "Implement a Python class that performs a square root operation."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: Python\ndifficulty: medium\nconcepts: file I/O, texture loading, 1D textures\n\n### Task", "fingerprint": null, "content": {"code": "GLuint createTFF1DTexture(const char* filename)\n{\n\t// read in the user defined data of transfer function\n\tifstream inFile(filename, ifstream::in);\n\tif (!inFile)\n\t{\n\t\tcerr << \"Error openning file: \" << filename << endl;\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tconst int MAX_CNT = 10000;\n\tGLubyte *tff = (GLubyte *)calloc(MAX_CNT, sizeof(GLubyte));\n\tinFile.read(reinterpret_cast<char *>(tff), MAX_CNT);\n\tif (inFile.eof())\n\t{\n\t\tsize_t bytecnt = inFile.gcount();\n\t\t*(tff + bytecnt) = '\\0';\n\t\tcout << \"bytecnt \" << bytecnt << endl;\n\t}\n\telse\n\t{\n\t\tcout << filename << \" read failed \" << endl;\n\t}\n\tGLuint tff1DTexture;\n\tglGenTextures(1, &tff1DTexture);\n\tglBindTexture(GL_TEXTURE_1D, tff1DTexture);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n\tglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\tglTexImage1D(GL_TEXTURE_1D, 0, GL_RGBA8, 256, 0, GL_RGBA, GL_UNSIGNED_BYTE, tff);\n\tfree(tff);\n\treturn tff1DTexture;\n}", "docstring": "// Create the shader program", "function_name": "createShaderProgram"}, "id": 46, "seed": "GLuint createTFF1DTexture(const char* filename)\n{\n\t// read in the user defined data of transfer function\n\tifstream inFile(filename, ifstream::in);\n\tif (!inFile)\n\t{\n\t\tcerr << \"Error openning file: \" << filename << endl;\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tconst int MAX_CNT = 10000;\n\tGLubyte *tff = (GLubyte *)calloc(MAX_CNT, sizeof(GLubyte));\n\tinFile.read(reinterpret_cast<char *>(tff), MAX_CNT);\n\tif (inFile.eof())\n\t{\n\t\tsize_t bytecnt = inFile.gcount();\n\t\t*(tff + bytecnt) = '\\0';\n\t\tcout << \"bytecnt \" << bytecnt << endl;\n\t}\n\telse\n\t{\n\t\tcout << filename << \" read failed \" << endl;\n\t}\n\tGLuint tff1DTexture;\n\tglGenTextures(1, &tff1DTexture);\n\tglBindTexture(GL_TEXTURE_1D, tff1DTexture);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n\tglTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n\tglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\tglTexImage1D(GL_TEXTURE_1D, 0, GL_RGBA8, 256, 0, GL_RGBA, GL_UNSIGNED_BYTE, tff);\n\tfree(tff);\n\treturn tff1DTexture;\n}", "concepts": ["file I/O", "texture loading", "1D textures"], "parsing_result": [{"instruction": "Write a Python program that loads a 3D model from a .obj file and outputs it to a .png file."}, {"instruction": "Create a Python program to render a 3D point cloud from a file containing 3D points."}, {"instruction": "Write a Python program which loads a texture from a file, converts it to a 1D texture, and displays it on a window."}, {"instruction": "Write a Python program that loads a 1D texture from a file and outputs it to the console."}, {"instruction": "Write a Python program to load and display texture from a given file."}, {"instruction": "Write a Python program that reads a texture from a file and displays it on the screen."}, {"instruction": "Write a Python program that creates a texture in OpenGL using an image file."}, {"instruction": "Write a Python program that creates a 2D texture."}, {"instruction": "Write a Python program that renders a 3D texture to a 1D texture by averaging adjacent pixels."}, {"instruction": "Write a Python program that loads a texture and displays it using OpenGL."}, {"instruction": "Write a Python program that uses OpenGL to load a 1D texture image file and display it in an OpenGL window."}, {"instruction": "Write a Python program that loads a texture from a file and creates three 1D textures that are copies of the loaded texture."}, {"instruction": "Write a Python program that renders a cube texture."}, {"instruction": "Write a Python program that reads an image and outputs a pixelated version."}, {"instruction": "Implement a Python function to load a texture into a 1D OpenGL texture."}, {"instruction": "Write a Python program that loads a texture from a file, converts it to grayscale, and saves it as a PNG file."}, {"instruction": "Write a Python program that reads information from a file and renders a 1D texture of the data."}, {"instruction": "Write a Python function that loads a 2D or 3D texture into a 1D texture."}, {"instruction": "Write a Python script that reads in a text file, counts the number of occurrences of each word in it, and writes a new file with each word on a separate line, along with its number of occurrences."}, {"instruction": "Create a Python program that draws a simple 2D isometric sine wave on a texture."}, {"instruction": "Write a Python program to create a 1D texture."}, {"instruction": "Create a Python program that loads a 2D texture and displays it on the screen, using a 1D texture."}, {"instruction": "Create a program with Python that reads a texture file and outputs a 1D texture array for OpenGL."}, {"instruction": "Write a program that loads a texture from a file and displays it on the screen."}, {"instruction": "Implement a program that loads a texture from disk, then displays the texture using the GLUT library."}, {"instruction": "Write a Python program that loads a desired texture, displays a GUI for the user to select the desired texture, and displays the texture on a given window."}, {"instruction": "Write a Python program that loads and displays a 1D texture image, using the `pyglet` library."}, {"instruction": "Write a Python program that takes a PNG image file and draws a 1D texture over it."}, {"instruction": "Implement a Python program that loads a texture from a file, and then renders it to the screen."}, {"instruction": "Write a program that loads a texture from a file, and displays it to the user using OpenGL."}, {"instruction": "Create a Python program that loads and renders an arbitrary image on the screen."}, {"instruction": "Write a Python program that loads a texture, and then draws a 1-D texture with the same image repeated."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: internet connection, ESP8266\n\n### Note\nPlease ensure that your snippet includes all the relevant code and comments. Including the keyword of function, variables, and comments is always good to have in the example, so that we can follow the syntax and comments easily.\n\n### Task", "fingerprint": null, "content": {"code": "void setup(void){\n  pinMode(2, OUTPUT);\n  randomSeed(10);\n  strip.begin();\n  strip.show();\n\n  //server.on(\"/\", handleRoot);\n  \n    server.on(\"/RainbowCycle\", [](){\n    val = 2;\n    Serial.println(\"RainbowCycle\");\n    rainbowCycle(20);\n  });\n  \n  server.on(\"/Rainbow\", [](){\n    val = 3;\n    Serial.println(\"Rainbow\");\n    rainbow(20);  \n  });\n    server.on(\"/ChaseRainbow\", [](){\n    val = 4;\n    Serial.println(\"ChaseRainbow\");\n    theaterChaseRainbow(50);\n  });\n  \n    server.on(\"/2_Color\", [](){\n     Serial.println(\"2_Color\");\n     doubleColor = 1;\n  });\n\n  server.begin();\n  Serial.println(\"HTTP server started\");\n  \n  Serial.begin(115200);\n  EEPROM.begin(512);\n  delay(10);\n  Serial.println();\n  Serial.println();\n  Serial.println(\"Startup\");\n  // read eeprom for ssid and pass\n  Serial.println(\"Reading EEPROM ssid\");\n  String esid;\n  for (int i = 0; i < 32; ++i)\n    {\n      esid += char(EEPROM.read(i));\n    }\n  Serial.print(\"SSID: \");\n  Serial.println(esid);\n  Serial.println(\"Reading EEPROM pass\");\n  String epass = \"\";\n  for (int i = 32; i < 96; ++i)\n    {\n      epass += char(EEPROM.read(i));\n    }\n  Serial.print(\"PASS: \");\n  Serial.println(epass);  \n  if ( esid.length() > 1 ) {\n      // test esid \n      //WiFi.mode(WIFI_AP_STA);\n      //WiFi.disconnect();\n      //delay(100);\n      WiFi.begin(esid.c_str(), epass.c_str());\n      WiFi.config(IPAddress(192,168,8,187), IPAddress(192,168,8,1), IPAddress(255,255,255,0),IPAddress(192,168,8,1));\n      if (testWifi()) {\n        launchWeb(0);\n        return;\n      }\n  }\n  setupAP();\n/*  \n  WiFi.begin(ssid, password);\n  WiFi.config(IPAddress(192,168,1,187), IPAddress(192,168,1,1), IPAddress(255,255,255,0),IPAddress(192,168,1,1));\n  Serial.println(\"\");\n\n  // Wait for connection\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"Connected to \");\n  Serial.println(ssid);\n  Serial.print(\"IP address: \");\n  Serial.println(WiFi.localIP());\n\n  if (MDNS.begin(\"esp8266\")) {\n    Serial.println(\"MDNS responder started\");\n  }\n  */\n  #if defined (__AVR_ATtiny85__)\n    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);\n  #endif\n\n  \n\n}", "docstring": "//", "function_name": "handleRoot"}, "id": 48, "seed": "void setup(void){\n  pinMode(2, OUTPUT);\n  randomSeed(10);\n  strip.begin();\n  strip.show();\n\n  //server.on(\"/\", handleRoot);\n  \n    server.on(\"/RainbowCycle\", [](){\n    val = 2;\n    Serial.println(\"RainbowCycle\");\n    rainbowCycle(20);\n  });\n  \n  server.on(\"/Rainbow\", [](){\n    val = 3;\n    Serial.println(\"Rainbow\");\n    rainbow(20);  \n  });\n    server.on(\"/ChaseRainbow\", [](){\n    val = 4;\n    Serial.println(\"ChaseRainbow\");\n    theaterChaseRainbow(50);\n  });\n  \n    server.on(\"/2_Color\", [](){\n     Serial.println(\"2_Color\");\n     doubleColor = 1;\n  });\n\n  server.begin();\n  Serial.println(\"HTTP server started\");\n  \n  Serial.begin(115200);\n  EEPROM.begin(512);\n  delay(10);\n  Serial.println();\n  Serial.println();\n  Serial.println(\"Startup\");\n  // read eeprom for ssid and pass\n  Serial.println(\"Reading EEPROM ssid\");\n  String esid;\n  for (int i = 0; i < 32; ++i)\n    {\n      esid += char(EEPROM.read(i));\n    }\n  Serial.print(\"SSID: \");\n  Serial.println(esid);\n  Serial.println(\"Reading EEPROM pass\");\n  String epass = \"\";\n  for (int i = 32; i < 96; ++i)\n    {\n      epass += char(EEPROM.read(i));\n    }\n  Serial.print(\"PASS: \");\n  Serial.println(epass);  \n  if ( esid.length() > 1 ) {\n      // test esid \n      //WiFi.mode(WIFI_AP_STA);\n      //WiFi.disconnect();\n      //delay(100);\n      WiFi.begin(esid.c_str(), epass.c_str());\n      WiFi.config(IPAddress(192,168,8,187), IPAddress(192,168,8,1), IPAddress(255,255,255,0),IPAddress(192,168,8,1));\n      if (testWifi()) {\n        launchWeb(0);\n        return;\n      }\n  }\n  setupAP();\n/*  \n  WiFi.begin(ssid, password);\n  WiFi.config(IPAddress(192,168,1,187), IPAddress(192,168,1,1), IPAddress(255,255,255,0),IPAddress(192,168,1,1));\n  Serial.println(\"\");\n\n  // Wait for connection\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"Connected to \");\n  Serial.println(ssid);\n  Serial.print(\"IP address: \");\n  Serial.println(WiFi.localIP());\n\n  if (MDNS.begin(\"esp8266\")) {\n    Serial.println(\"MDNS responder started\");\n  }\n  */\n  #if defined (__AVR_ATtiny85__)\n    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);\n  #endif\n\n  \n\n}", "concepts": ["internet connection", "ESP8266\n\n### Note\nPlease ensure that your snippet includes all the relevant code and comments. Including the keyword of function", "variables", "and comments is always good to have in the example", "so that we can follow the syntax and comments easily."], "parsing_result": [{"instruction": "Write a Python class called `WifiConnector` that enables users to connect to a WiFi network remotely, using the ESP8266 chip."}, {"instruction": "Create a Python class called `InternetConnection` that provides a method `send_message` to send a message on an ESP8266 WiFi module through the serial port."}, {"instruction": "Create a Python class `WiFi` with the following methods:\n- `update` to connect the ESP8266 to the local network.\n- `disconnect` to disconnect the ESP8266 from the local network.\n- `is_connected` to check whether the ESP8266 is connected to the local network."}, {"instruction": "Write a Python function to connect to an ESP8266 module and send commands."}, {"instruction": "Write a Python class `WiFiConnection` that establishes a connection to an external WiFi network. This class should include the following functions:\n- `__init__`: takes two parameters, `ssid` and `password`, and initializes the connection to the network.\n- `isConnected`: returns `True` if the connection is established, `False` otherwise."}, {"instruction": "Create a Python class called `IoTDevice` that collects data from a sensor."}, {"instruction": "Write a Python class `ESP8266` that connects to the ESP8266 WiFi module and allows data transfer to and from the host computer, as well as sending and receiving commands."}, {"instruction": "Write a Python function `downloadFile` that allows a user to download a file from the internet using an ESP8266.\n/examples/example3/example3.cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring toBinary(int x) {\n    string s;\n    while (x > 0) {\n        s += (x % 2) + '0';\n        x /= 2;\n    }\n    return s;\n}\n\nint main() {\n    cout << \"Please enter a non-negative number: \";\n    int x;\n    cin >> x;\n    cout << \"The binary representation of \" << x << \" is \" << toBinary(x) << endl;\n    return 0;\n}/examples/example5/example5.cpp\n#include <iostream>\n\nusing namespace std;\n\nvoid swap(int& x, int& y) {\n    int tmp = x;\n    x = y;\n    y = tmp;\n}\n\nint main() {\n    int x = 5;\n    int y = 6;\n    cout << \"Initial x: \" << x << \", y: \" << y << endl;\n    swap(x, y);\n    cout << \"Swapped x: \" << x << \", y: \" << y << endl;\n    return 0;\n}/examples/example1/example1.cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint sumVector(vector<int> v) {\n    int sum = 0;\n    for (int x : v) {\n        sum += x;\n    }\n    return sum;\n}\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    cout << \"Vector: \" << v.size() << \" elements\" << endl;\n    cout << \"Sum: \" << sumVector(v) << endl;\n    return 0;\n}"}, {"instruction": "Using the example ESP8266 code, implement a simple class that allows users to make GET requests to a REST API."}, {"instruction": "Write a Python function `is_internet_connected` that checks if there is an internet connection."}, {"instruction": "Write a Python snippet that publishes a message to an MQTT broker on the internet using the ESP8266 Wi-Fi module."}, {"instruction": "Write a Python class `Display` that writes an HTTP message to a serial port."}, {"instruction": "Write a snippet of Python code to connect your ESP8266 to the Internet and get the current time."}, {"instruction": "Implement a Python class named `ESP8266` that represents an ESP8266 module."}, {"instruction": "Implement an ESP8266 class that can be used to make HTTP GET requests."}, {"instruction": "Write a Python class `ESP8266` that represents a Wi-Fi connected ESP8266 device."}, {"instruction": "In the file `ESP8266.py`, write a Python function `getData` that connects to a URL and retrieves data from the address. This function should be a public function of the `ESP8266` class."}, {"instruction": "Implement a class `ESP8266` that allows us to send and receive data through an ESP8266 module through Wi-Fi."}, {"instruction": "Implement a Python class `ESP8266` that is capable of connecting to the internet using the ESP8266 chip."}, {"instruction": "Write a Python class `Connection` that implements a HTTP connection. The class should have a function `request` that takes a string to send as an argument, and returns the response as a string."}, {"instruction": "Write a Python class called `Network` that encapsulates the features and behavior of an ESP8266 network."}, {"instruction": "Write a Python class named `ESP8266` that encapsulates the `ESP8266` module as a class."}, {"instruction": "Create a Python class `WiFi` that connects to a WiFi network."}, {"instruction": "Implement a Python class `ESP8266` that allows you to control the ESP8266 over the internet."}, {"instruction": "Implement a Python program that sends a request to an online API with specified parameters and prints the response."}, {"instruction": "Write a Python function `display_weather` that prints the current weather on the screen.\n\nThe function should use `urllib` to perform the request to the OpenWeatherMap API."}, {"instruction": "Write a class `TCPClient` that establishes a TCP connection to a remote server and is used to transfer data to and from the server."}, {"instruction": "Write a Python function `esp8266_post` that sends a HTTP POST request to an ESP8266 server."}, {"instruction": "Design a Python class `IoT` that implements a simple, basic IoT device. This device will have a temperature sensor connected to it via a microcontroller and communication via an 802.11 Wi-Fi network. The IoT device will measure and store the temperature and store it for future use."}, {"instruction": "Write a Python class to connect to an ESP8266 module using a TCP/IP connection."}, {"instruction": "Create a `device.py` file that contains the class definition of a device. The class should have at least 3 attributes and 2 methods.\n- `SSID`: the name of the WiFi network to connect to\n- `PASSWORD`: the WiFi network password to connect to\n- `check_connection()`: check whether there is an internet connection\n- `send_message()`: send a message of a given length to a given serial port"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: hard\nconcepts: string parsing, variable declarations, STL iterators, STL sorting, comparison, pointer arithmetic, pointer dereferencing, reference, integers, string manipulation, input streams, error handling, loops, loops control, boolean logic, recursion, recursion control, pointer control, sorting control, comparison control, iteration\n/algorithms/searching/linear_search/README.md\n# Linear search\n\n## Problem\nGiven an array of integers and a target value, find the index of the target value in the array. If the target value is not found in the array, return -1.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n### Task", "fingerprint": null, "content": {"code": "void YY(int i) // |\n{\n    punto da = strade[i];\n    punto a = strade[i+1];\n    \n    bool swapped = false;\n    // sempre dal basso verso l'alto\n    if ( a.y < da.y) swap(da, a),swapped = true;;\n    \n    punto *prima = lower_bound(fx, fx+F, da, cmpX);\n    punto *ultima = upper_bound(fx, fx+F, a, cmpX);\n    ultima--;\n    \n    if (prima == fx+F || prima->x != da.x|| ultima < prima)\n    { l_senza += pointDist(strade[i], strade[i+1]); return; }\n    \n    int ind_prima = prima - fx;\n    int ind_ultima = ultima - fx;\n    \n    error(ind_prima);\n    error(ind_ultima);\n    \n    int RMQY = rmq_x(ind_prima,ind_ultima);\n    error(RMQY);\n    smax(max_dist, RMQY);\n    if ( !swapped){\n        smax(max_dist, l_senza+ pointDist(strade[i], (*prima)));\n        l_senza = pointDist((*ultima), a);}\n    else\n    {\n        smax(max_dist, l_senza+ pointDist(strade[i], (*ultima)));\n        l_senza = pointDist((*prima), da);\n    }\n    error(max_dist);\n}", "docstring": "// sempre da sx a dx", "function_name": "XX"}, "id": 50, "seed": "void YY(int i) // |\n{\n    punto da = strade[i];\n    punto a = strade[i+1];\n    \n    bool swapped = false;\n    // sempre dal basso verso l'alto\n    if ( a.y < da.y) swap(da, a),swapped = true;;\n    \n    punto *prima = lower_bound(fx, fx+F, da, cmpX);\n    punto *ultima = upper_bound(fx, fx+F, a, cmpX);\n    ultima--;\n    \n    if (prima == fx+F || prima->x != da.x|| ultima < prima)\n    { l_senza += pointDist(strade[i], strade[i+1]); return; }\n    \n    int ind_prima = prima - fx;\n    int ind_ultima = ultima - fx;\n    \n    error(ind_prima);\n    error(ind_ultima);\n    \n    int RMQY = rmq_x(ind_prima,ind_ultima);\n    error(RMQY);\n    smax(max_dist, RMQY);\n    if ( !swapped){\n        smax(max_dist, l_senza+ pointDist(strade[i], (*prima)));\n        l_senza = pointDist((*ultima), a);}\n    else\n    {\n        smax(max_dist, l_senza+ pointDist(strade[i], (*ultima)));\n        l_senza = pointDist((*prima), da);\n    }\n    error(max_dist);\n}", "concepts": ["string parsing", "variable declarations", "STL iterators", "STL sorting", "comparison", "pointer arithmetic", "pointer dereferencing", "reference", "integers", "string manipulation", "input streams", "error handling", "loops", "loops control", "boolean logic", "recursion", "recursion control", "pointer control", "sorting control", "comparison control", "iteration\n/algorithms/searching/linear_search/README.md\n# Linear search\n\n## Problem\nGiven an array of integers and a target value", "find the index of the target value in the array. If the target value is not found in the array", "return -1.\n\nYou may assume that each input would have exactly one solution", "and you may not use the same element twice."], "parsing_result": [{"instruction": "Create a C++ function `linear_search` that returns the index of the target value in the array."}, {"instruction": "Implement a C++ function `linearSearch` that takes an array of integers and a target integer as input, and returns the index of the target integer in the array.\n\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n#"}, {"instruction": "Implement the linear search algorithm."}, {"instruction": "Write a function `linearSearch` that returns the index of the target value in an array of integers. If the target value is not found, return -1."}, {"instruction": "Write a C++ function `linearSearch` that returns the index of the target value in the array, or -1 if the target value is not found."}, {"instruction": "Design an algorithm that can take an array of integers and a target value and return the index of the target value in the array.\n\n#"}, {"instruction": "Write a C++ function `linearSearch` that returns the index of the target value in the array, or -1 if the value is not present in the array."}, {"instruction": "Write a Python function called `linearSearch` that takes two arguments: (1) an array of integers and (2) a target value to search for in the array. The function should return the index of the target value in the array if it is found, or `-1` if it is not. Assume that the target value will always be in the array."}, {"instruction": "Create a function that returns the index of the target value in the given array, or -1 if the target value is not in the array."}, {"instruction": "Write a function `linearSearch` that takes an array of integers and the value to search for and returns the index of the target value in the array or -1 if the target value is not found.\n\n### Constraints\n- Time complexity: $O(n)$\n- Space complexity: $O(1)$\n\n#"}, {"instruction": "Implement the `linear_search` function in the given [linear_search.h](./linear_search.h) header file.\n\n## Solution\nThe `linear_search` function in [linear_search.c](./linear_search.c) is implemented.\n\n## Testing\nThe following commands can be used for testing:\n- `make` to build the program\n- `make test` to run the test program"}, {"instruction": "Write a C++ function `linearSearch` that returns the index of a target value in a given array of integers."}, {"instruction": "Write a function that returns the index of the target value in the array. If the value is not found, return -1.\n\n## Solution\n```\nvoid linear_search( int array[], int n, int target )\n{\n    int index = -1;\n    for( int i = 0; i < n; i++ )\n    {\n        if( array[ i ] == target )\n        {\n            index = i;\n            break;\n        }\n    }\n\n    return index;\n}\n```\n\n## Complexity\nThe time complexity of this algorithm is O(n).\n\nThe space complexity of this algorithm is O(1)."}, {"instruction": "1\nWrite a C++ function `linearSearch` that takes an input vector of integers and an integer and returns the index of the target integer in the vector. If the target integer is not found, return -1.\n\n### Task 2\nWrite a C++ function `linearSearch2` that takes an input vector of integers and an integer and returns the index of the first target integer in the vector. If the target integer is not found, return -1.\n\n## Solution\nLinear search is an algorithm that finds the index of a given integer in a linear collection. It iterates through the collection, looking for the given integer. If the integer is found, it returns the index of the integer in the collection. If the integer is not found, it returns -1.\n\nThis algorithm has a time complexity of O(n), where n is the length of the collection. It iterates through the collection once, making it a linear search algorithm."}, {"instruction": "Write a function that takes two parameters, an array of integers and a target value, and returns the index of where the target value first occurs in the array. If the target value is not found in the array, return -1.\n\n## Algorithm\n1. Iterate through the array.\n2. Compare the current element with the target value.\n3. If the current element equals the target value, return the index of the current element.\n4. If the current element does not equal the target value, return -1.\n\n#"}, {"instruction": "Write a linear search algorithm that takes an array of integers and a target value as input.\n\n## Solution\nThe linear search algorithm will iterate over the array, comparing each element to the target value. If the target value is found, the algorithm will return the index of that element. Otherwise, the algorithm will return -1.\n\n### Code\n```python\ndef linear_search(array, target):\n  for index, value in enumerate(array):\n    if value == target:\n      return index\n  return -1\n```\n\n## Complexity Analysis\n- Time Complexity: O(n), where n is the length of the input array.\n- Space Complexity: O(1), the algorithm uses a constant amount of memory."}, {"instruction": "Given an array of integers and a target value, find the index of the target value in the array. If the target value is not found in the array, return -1.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n#"}, {"instruction": "Write a function that implements a linear search (also known as a sequential search).\n\n#"}, {"instruction": "Create a C++ function `linearSearch` that returns the index of the target element in a vector of integers."}, {"instruction": "Implement a C++ function `linearSearch` that takes an array of integers and a target value.\n\n## Solution"}, {"instruction": "Write a C++ function `linearSearch` that returns the index of the target value in a given array, or -1 if the target value is not found.\n\n#"}, {"instruction": "Create a C++ function `linearSearch` that takes an input array and a target value as input and returns the index of the target value in the array.\n\n#"}, {"instruction": "Write a function `linearSearch` that takes an array of integers and a target value, and returns the index of the target value in the array. If the target value is not found in the array, return -1."}, {"instruction": "Write a function `linearSearch` that finds the index of the target value in the given array.\n\n- `linearSearch` must use a linear search algorithm.\n- The input array must be a sorted array.\n- If the target is not found in the array, the function must return -1.\n- If the target is found at index $i$, the function must return $i$.\n\n#"}, {"instruction": "Implement a C++ function that returns the index of a target value in an array of integers.\n\n## Algorithm\n\nThe algorithm is simple:\n\n1. Iterate through the array.\n2. If the current element is equal to the target value, return the current index.\n3. Otherwise, move on to the next element."}, {"instruction": "Implement a function `linearSearch` that returns the index of the target value in the array."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: easy\nconcepts: loop, map, string/string to integer conversion, integer/string operations\n\n### Task", "fingerprint": null, "content": {"code": "SumsOfAllDigit sumAlldigit(string strLimitNum,map<string,SumsOfAllDigit> &memoMap)\n{\t\n\t//Memoization \ud65c\uc6a9\n\tmap<string, SumsOfAllDigit>::iterator iter =memoMap.find(strLimitNum);\n\tif (iter != memoMap.end())\n\t{\t\t\n\t\treturn iter->second;\n\t}\n\tSumsOfAllDigit result;\n\t//\ud55c\uc790\ub9bf\uc218\uc77c \uacbd\uc6b0\n\tif (strLimitNum.length() == 1)\n\t{\n\t\t//int num = strLimitNum.at(0)-'0';\n\t\tint num = atoi(strLimitNum.c_str());\n\t\tfor (int i = 0; i <= num; i++)\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += 1;\n\t\t}\n\t\treturn result;\n\t}\n\t//---------------\uc5ec\uae30\uae4c\uc9c0 \uae30\uc800\n\tchar tempBuf[11];\n\n\t//\"\uccab\uc790\ub9bf\uc218\ub9cc\uc788\uace0 \ub098\uba38\uc9c0 0\uc758 \ud569\uacc4\" + \"\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ubd80\ud130 \ub9cc\ub4e0 \uc22b\uc790\uc758 \ud569\uacc4\"\n\t//\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ud569\uacc4\uad6c\ud558\uae30\n\tstring subDigits= strLimitNum.substr(1, strLimitNum.length() - 1);\n\tint subDigitsNum =atoi(subDigits.c_str());//\ub9e8\uc55e\uc790\ub9ac\ub97c \uc81c\uc678\ud55c \uc22b\uc790\n\tint firstDigitNum = strLimitNum.at(0) - '0';//\ub9e8\uc55e\uc790\ub9ac \uc22b\uc790\n\tif (0 == subDigitsNum)//\ub9e8 \uc55e\uc790\ub9ac \ube7c\uace0 \ub2e4 0\uc77c \uacbd\uc6b0\n\t{\n\t\tstring digitsOfNines;//\ud55c \uc790\ub9bf\uc218\uac00 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsOfNines.push_back('9');\n\t\tSumsOfAllDigit sumsOfNumberWithStartingOne;//\ud55c \uc790\ub9bf\uc218 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790\uc758 \ud569\uacc4\n\t\tint numberWithStartingOne = atoi(digitsOfNines.c_str()) + 1;\n\t\tsumsOfNumberWithStartingOne = sumAlldigit(digitsOfNines, memoMap);//9...\uc758 \uac83 \uad6c\ud558\uae30\n\t\t//sumsOfNumberWithStartingOne.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t\t\n\t\t//\ub9e8\uc55e\uc790\ub9ac \uc218\ub97c \ub2e4 \ub354\ud558\uae30\n\t\t//for (int i = 1; i < firstDigitNum; i++)//1\ubd80\ud130\uc778 \uc774\uc720\ub294 \ub9e8\uc55e\uc790\ub9ac\ub294 0\uc744 \uc148\ud558\uc9c0 \uc54a\uc544\uc11c\n\t\tfor (int i = 0; i < firstDigitNum; i++)//\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += numberWithStartingOne;//\n\t\t}\n\t\tresult.m_sumsOfDigit[firstDigitNum] += 1;\n\t\tresult = result + (sumsOfNumberWithStartingOne * firstDigitNum) ;//\ub9e8\uc55e\uc790\ub9ac\uc218\ub9cc \ubc14\ub00c\uba74\uc11c \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\tresult.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t}\n\telse\n\t{\n\t\tstring digitsWithAllZeroExceptFirst;//\ub9e8\uc55e\uc790\ub9ac \uc81c\uc678 0\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tdigitsWithAllZeroExceptFirst.push_back(strLimitNum.at(0));\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsWithAllZeroExceptFirst.push_back('0');\n\t\t//subDigits\uc758 \uc55e\uc790\ub9ac\uac00 0\uc77c \uacbd\uc6b0\ub300\ube44\n\t\tsprintf(tempBuf, \"%d\", atoi(subDigits.c_str()));\n\t\t//SumsOfAllDigit subDigitsSum = sumAlldigit(subDigits, memoMap);\n\t\tSumsOfAllDigit subDigitsSum = sumAlldigit(string(tempBuf), memoMap);\n\t\tresult = sumAlldigit(digitsWithAllZeroExceptFirst, memoMap) + subDigitsSum;\n\n\t\tsprintf(tempBuf, \"%d\", subDigitsNum);\n\t\t\n\t\tresult.m_sumsOfDigit[0] += ((subDigitsNum )* ((int)subDigits.length() - (int)string(tempBuf).length()))- (int)string(tempBuf).length();//-1\uc740 0\uc774 \uc911\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\t\n\t\tresult.m_sumsOfDigit[firstDigitNum] += subDigitsNum;//0\uc77c\ub54c\ub294 \ub354\ud574\uc838\uc11c \uc628\ub2e4.\uc148\ud558\uc9c0 \ub9d0\uac83\n\t}\n\n\t\n\t\n\t//Memoization \n\tmemoMap.insert(pair<string, SumsOfAllDigit>(strLimitNum, result));\n\treturn result;\n}", "docstring": "//result.printAllSums();", "function_name": "main"}, "id": 52, "seed": "SumsOfAllDigit sumAlldigit(string strLimitNum,map<string,SumsOfAllDigit> &memoMap)\n{\t\n\t//Memoization \ud65c\uc6a9\n\tmap<string, SumsOfAllDigit>::iterator iter =memoMap.find(strLimitNum);\n\tif (iter != memoMap.end())\n\t{\t\t\n\t\treturn iter->second;\n\t}\n\tSumsOfAllDigit result;\n\t//\ud55c\uc790\ub9bf\uc218\uc77c \uacbd\uc6b0\n\tif (strLimitNum.length() == 1)\n\t{\n\t\t//int num = strLimitNum.at(0)-'0';\n\t\tint num = atoi(strLimitNum.c_str());\n\t\tfor (int i = 0; i <= num; i++)\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += 1;\n\t\t}\n\t\treturn result;\n\t}\n\t//---------------\uc5ec\uae30\uae4c\uc9c0 \uae30\uc800\n\tchar tempBuf[11];\n\n\t//\"\uccab\uc790\ub9bf\uc218\ub9cc\uc788\uace0 \ub098\uba38\uc9c0 0\uc758 \ud569\uacc4\" + \"\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ubd80\ud130 \ub9cc\ub4e0 \uc22b\uc790\uc758 \ud569\uacc4\"\n\t//\uadf8\ub2e4\uc74c \uc790\ub9bf\uc218 \ud569\uacc4\uad6c\ud558\uae30\n\tstring subDigits= strLimitNum.substr(1, strLimitNum.length() - 1);\n\tint subDigitsNum =atoi(subDigits.c_str());//\ub9e8\uc55e\uc790\ub9ac\ub97c \uc81c\uc678\ud55c \uc22b\uc790\n\tint firstDigitNum = strLimitNum.at(0) - '0';//\ub9e8\uc55e\uc790\ub9ac \uc22b\uc790\n\tif (0 == subDigitsNum)//\ub9e8 \uc55e\uc790\ub9ac \ube7c\uace0 \ub2e4 0\uc77c \uacbd\uc6b0\n\t{\n\t\tstring digitsOfNines;//\ud55c \uc790\ub9bf\uc218\uac00 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsOfNines.push_back('9');\n\t\tSumsOfAllDigit sumsOfNumberWithStartingOne;//\ud55c \uc790\ub9bf\uc218 \uc791\uc740 9\ub85c \uc774\ub904\uc9c4 \uc22b\uc790\uc758 \ud569\uacc4\n\t\tint numberWithStartingOne = atoi(digitsOfNines.c_str()) + 1;\n\t\tsumsOfNumberWithStartingOne = sumAlldigit(digitsOfNines, memoMap);//9...\uc758 \uac83 \uad6c\ud558\uae30\n\t\t//sumsOfNumberWithStartingOne.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t\t\n\t\t//\ub9e8\uc55e\uc790\ub9ac \uc218\ub97c \ub2e4 \ub354\ud558\uae30\n\t\t//for (int i = 1; i < firstDigitNum; i++)//1\ubd80\ud130\uc778 \uc774\uc720\ub294 \ub9e8\uc55e\uc790\ub9ac\ub294 0\uc744 \uc148\ud558\uc9c0 \uc54a\uc544\uc11c\n\t\tfor (int i = 0; i < firstDigitNum; i++)//\n\t\t{\n\t\t\tresult.m_sumsOfDigit[i] += numberWithStartingOne;//\n\t\t}\n\t\tresult.m_sumsOfDigit[firstDigitNum] += 1;\n\t\tresult = result + (sumsOfNumberWithStartingOne * firstDigitNum) ;//\ub9e8\uc55e\uc790\ub9ac\uc218\ub9cc \ubc14\ub00c\uba74\uc11c \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\tresult.m_sumsOfDigit[0] += subDigits.length();//0\uac1c\uc218 \ub354\ud558\uae30\t\t\n\t}\n\telse\n\t{\n\t\tstring digitsWithAllZeroExceptFirst;//\ub9e8\uc55e\uc790\ub9ac \uc81c\uc678 0\ub85c \uc774\ub904\uc9c4 \uc22b\uc790 \ub9cc\ub4e4\uae30\n\t\tdigitsWithAllZeroExceptFirst.push_back(strLimitNum.at(0));\n\t\tfor (int i = 0; i < subDigits.size(); i++)\n\t\t\tdigitsWithAllZeroExceptFirst.push_back('0');\n\t\t//subDigits\uc758 \uc55e\uc790\ub9ac\uac00 0\uc77c \uacbd\uc6b0\ub300\ube44\n\t\tsprintf(tempBuf, \"%d\", atoi(subDigits.c_str()));\n\t\t//SumsOfAllDigit subDigitsSum = sumAlldigit(subDigits, memoMap);\n\t\tSumsOfAllDigit subDigitsSum = sumAlldigit(string(tempBuf), memoMap);\n\t\tresult = sumAlldigit(digitsWithAllZeroExceptFirst, memoMap) + subDigitsSum;\n\n\t\tsprintf(tempBuf, \"%d\", subDigitsNum);\n\t\t\n\t\tresult.m_sumsOfDigit[0] += ((subDigitsNum )* ((int)subDigits.length() - (int)string(tempBuf).length()))- (int)string(tempBuf).length();//-1\uc740 0\uc774 \uc911\ubcf5\ub418\uae30 \ub54c\ubb38\n\t\t\n\t\tresult.m_sumsOfDigit[firstDigitNum] += subDigitsNum;//0\uc77c\ub54c\ub294 \ub354\ud574\uc838\uc11c \uc628\ub2e4.\uc148\ud558\uc9c0 \ub9d0\uac83\n\t}\n\n\t\n\t\n\t//Memoization \n\tmemoMap.insert(pair<string, SumsOfAllDigit>(strLimitNum, result));\n\treturn result;\n}", "concepts": ["loop", "map", "string/string to integer conversion", "integer/string operations"], "parsing_result": [{"instruction": "Write a Python class called `WordCount` that keeps track of the frequency of each word in a string."}, {"instruction": "Classify the following strings as either a palindrome or not.\n\n- \"racecar\"\n- \"level\"\n- \"malayalam\"\n- \"lion\""}, {"instruction": "Create a Python class `Record` that includes a name and an ID number."}, {"instruction": "Create a Python class `Person` with attributes `name` and `age`."}, {"instruction": "Create a Python class `Map` that contains a list of points. The points are represented by tuples of two coordinates, (x, y). Add a method `distance` that returns the Euclidean distance between two points."}, {"instruction": "Implement a Python class `Integer` with the following properties:\n\n- The class must support the following methods:\n  - `Integer.add(self, other)`\n  - `Integer.subtract(self, other)`\n  - `Integer.multiply(self, other)`\n  - `Integer.divide(self, other)`\n  - `Integer.remainder(self, other)`\n- The class must support the following operations:\n  - `Integer.\\_\\_str\\_\\_(self)`\n  - `Integer.\\_\\_repr\\_\\_(self)`\n\nThe class should mimic the built-in `int` type by providing the same functionality."}, {"instruction": "Write a function `Area` that takes a list of length-2 lists representing the two end points of a rectangle and returns the area of the rectangle."}, {"instruction": "Write a Python class `Stack` that implements a last-in-first-out (LIFO) stack."}, {"instruction": "Create a Python class `DataDictionaries` that stores a mapping from data type to its expected size in bytes."}, {"instruction": "Create a Python class `Node` that implements an unordered linked list."}, {"instruction": "Create a class `Counter` with a data member `n`, an int type, that is initially set to 0. Write a class method `increment` that increments the value of `n` by 1. Write a class method `print` that prints the value of `n` to the terminal."}, {"instruction": "Create a Python class `Counter` that stores a count of its occurrences."}, {"instruction": "Create a Python class `Data` with two methods: `add` and `remove`. The `add` method will take a string and add it to the end of the class. The `remove` method will take a string and remove it from the class."}, {"instruction": "Write a Python class `WordFrequency` that takes a string and returns a map of words to frequencies."}, {"instruction": "Write a Python class, `Array` that represents an array of integers."}, {"instruction": "Write a Python class `Stack` that implements a stack."}, {"instruction": "Implement a Python class `Calculator` that contains the following methods:\n\n- `add`: adds two integers and returns the sum\n- `subtract`: subtracts two integers and returns the difference\n- `multiply`: multiplies two integers and returns the product\n- `divide`: divides two integers and returns the quotient\n- `square`: squares an integer and returns the result\n- `power`: raises an integer to an exponent and returns the result\n- `max`: takes any number of integers and returns the largest\n- `min`: takes any number of integers and returns the smallest\n- `sum`: takes any number of integers and returns the sum\n- `average`: takes any number of integers and returns the average"}, {"instruction": "Write a Python class called `Node` that represents a node in a linked list. The class should have two instance variables: `data` and `next`, which store a data element and a reference to the next node in the list, respectively."}, {"instruction": "Create a Python class `Node` that represents a node of a singly-linked list."}, {"instruction": "Implement a Python class `Stack` that implements a stack."}, {"instruction": "Create a Python class `Stack` that implements a stack data structure."}, {"instruction": "Create a class `BinaryTree` with the following methods:\n- `add` which adds a value to a binary tree (if it isn't already there)\n- `remove` which removes a value from a binary tree (if it exists)\n- `print` which prints a binary tree to the console\n- `isBalanced` which returns true if a binary tree is balanced (i.e., all subtrees differ by no more than 1 from each other) and false if it is not"}, {"instruction": "Write a Python class that implements a Stack."}, {"instruction": "Write a Python class `MyList` that has methods `append`, `remove`, and `count` that mimic the list methods."}, {"instruction": "Create a Python class `Time` that holds a time of the day as hour, minute, and second. Implement the following methods:\n\n- `Time.__init__` to initialize a new `Time` object\n- `time` to return the time as a string in the format \"h:mm:ss\", where `h` is the hour, and `mm` and `ss` are the minute and second, with leading zeroes to ensure that the string has exactly the form \"hh:mm:ss\"\n- `add` to add a time to another time as a `Time` object, and return a `Time` object representing the result.\n- `subtract` to subtract a time from another time, and return a new `Time` object representing the result.\n- `isEarlier` to determine if one time is earlier than another.\n- `isLater` to determine if one time is later than another.\n- `isEarlierOrEqual` to determine if one time is earlier or equal to another.\n- `isLaterOrEqual` to determine if one time is later or equal to another."}, {"instruction": "Write a Python class `Matrix` that implements a matrix with two dimensions."}, {"instruction": "Create a Python class `List` that implements a singly-linked list."}, {"instruction": "Write a Python class `Poem` that has a method `count_words(self)` that takes a string representing a poem and returns a dictionary mapping words to their frequencies."}, {"instruction": "Write a Python class named `Counter` that keeps track of the number of times something happens."}, {"instruction": "Write a Python class `Name` that stores a person's first and last name."}, {"instruction": "Implement the `Stack` class as a Python class."}, {"instruction": "Write a Python function `get_int` that returns an integer from a string."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: medium\nconcepts: iterators, STL, reflection\n\n### Task", "fingerprint": null, "content": {"code": "void List_1_AddEnumerable_m1553189708_gshared (List_1_t3612285922 * __this, RuntimeObject* ___enumerable0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_AddEnumerable_m1553189708_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tRuntimeObject* V_1 = NULL;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tRuntimeObject* L_0 = ___enumerable0;\n\t\tNullCheck((RuntimeObject*)L_0);\n\t\tRuntimeObject* L_1 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<System.Int32>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 20), (RuntimeObject*)L_0);\n\t\tV_1 = (RuntimeObject*)L_1;\n\t}\n\nIL_0007:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_001a;\n\t\t}\n\nIL_000c:\n\t\t{\n\t\t\tRuntimeObject* L_2 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tint32_t L_3 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<System.Int32>::get_Current() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 21), (RuntimeObject*)L_2);\n\t\t\tV_0 = (int32_t)L_3;\n\t\t\tint32_t L_4 = V_0;\n\t\t\tNullCheck((List_1_t3612285922 *)__this);\n\t\t\t((  void (*) (List_1_t3612285922 *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3612285922 *)__this, (int32_t)L_4, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\tRuntimeObject* L_5 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_5);\n\t\t\tbool L_6 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t3774429009_il2cpp_TypeInfo_var, (RuntimeObject*)L_5);\n\t\t\tif (L_6)\n\t\t\t{\n\t\t\t\tgoto IL_000c;\n\t\t\t}\n\t\t}\n\nIL_0025:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x35, FINALLY_002a);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t2748878030 *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_7 = V_1;\n\t\t\tif (L_7)\n\t\t\t{\n\t\t\t\tgoto IL_002e;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\nIL_002e:\n\t\t{\n\t\t\tRuntimeObject* L_8 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_8);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t4289139908_il2cpp_TypeInfo_var, (RuntimeObject*)L_8);\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x35, IL_0035)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t2748878030 *)\n\t}\n\nIL_0035:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "List_1_System_Collections_IList_set_Item_m37152599_gshared"}, "id": 64, "seed": "void List_1_AddEnumerable_m1553189708_gshared (List_1_t3612285922 * __this, RuntimeObject* ___enumerable0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (List_1_AddEnumerable_m1553189708_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tint32_t V_0 = 0;\n\tRuntimeObject* V_1 = NULL;\n\tException_t2748878030 * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t2748878030 * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = 0;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\tRuntimeObject* L_0 = ___enumerable0;\n\t\tNullCheck((RuntimeObject*)L_0);\n\t\tRuntimeObject* L_1 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<System.Int32>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 20), (RuntimeObject*)L_0);\n\t\tV_1 = (RuntimeObject*)L_1;\n\t}\n\nIL_0007:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_001a;\n\t\t}\n\nIL_000c:\n\t\t{\n\t\t\tRuntimeObject* L_2 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_2);\n\t\t\tint32_t L_3 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<System.Int32>::get_Current() */, IL2CPP_RGCTX_DATA(method->declaring_type->rgctx_data, 21), (RuntimeObject*)L_2);\n\t\t\tV_0 = (int32_t)L_3;\n\t\t\tint32_t L_4 = V_0;\n\t\t\tNullCheck((List_1_t3612285922 *)__this);\n\t\t\t((  void (*) (List_1_t3612285922 *, int32_t, const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9)->methodPointer)((List_1_t3612285922 *)__this, (int32_t)L_4, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->declaring_type->rgctx_data, 9));\n\t\t}\n\nIL_001a:\n\t\t{\n\t\t\tRuntimeObject* L_5 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_5);\n\t\t\tbool L_6 = InterfaceFuncInvoker0< bool >::Invoke(1 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t3774429009_il2cpp_TypeInfo_var, (RuntimeObject*)L_5);\n\t\t\tif (L_6)\n\t\t\t{\n\t\t\t\tgoto IL_000c;\n\t\t\t}\n\t\t}\n\nIL_0025:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x35, FINALLY_002a);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t2748878030 *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_7 = V_1;\n\t\t\tif (L_7)\n\t\t\t{\n\t\t\t\tgoto IL_002e;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\nIL_002e:\n\t\t{\n\t\t\tRuntimeObject* L_8 = V_1;\n\t\t\tNullCheck((RuntimeObject*)L_8);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t4289139908_il2cpp_TypeInfo_var, (RuntimeObject*)L_8);\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x35, IL_0035)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t2748878030 *)\n\t}\n\nIL_0035:\n\t{\n\t\treturn;\n\t}\n}", "concepts": ["iterators", "STL", "reflection"], "parsing_result": [{"instruction": "Create a Python function `checkIfMagicSquare` that returns true if a matrix is a magic square."}, {"instruction": "Given a Python list of integers, write a function that returns a new list containing only the even numbers."}, {"instruction": "Create a Python function `sum` that computes the sum of all the elements in a list."}, {"instruction": "Create a Python function `isAnagram` that checks for anagrams using iterators."}, {"instruction": "Create a Python function `flatten` that flattens a nested list of integers."}, {"instruction": "Create a Python function `creditCalc` which calculates the monthly payment of a credit loan given its parameters."}, {"instruction": "Write a Python function `is_iterable` that returns true if an object is an iterable."}, {"instruction": "Create a Python function `isPythagoreanTriple` that returns true if the parameters are the length of the sides of a right triangle."}, {"instruction": "Create a Python function `capitalize` that takes a string as input and returns a capitalized version of the string using iterators."}, {"instruction": "Create a Python function `get_keys` that returns the keys of a dictionary."}, {"instruction": "Create a Python function `sortSquares` that sorts a list of numbers into descending order using a Python sort, where each element is the square of another element."}, {"instruction": "Create a Python function `sumOfNumbers` that returns the sum of the integers in a file."}, {"instruction": "Write a Python function `reverse` that takes a list and returns a reversed copy."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Create a Python function `fibonacci` that returns the nth Fibonacci number using recursion."}, {"instruction": "Write a Python function `sum` that returns the sum of the elements of a list of numbers."}, {"instruction": "Write a Python function `reverseList` that reverses a list, using iterators."}, {"instruction": "Create a Python function `reverse` that reverses the characters in a string and returns the result."}, {"instruction": "Create a Python function `print_all_files` that prints out the name of every file in a directory."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `map` that applies a function to every element in a list."}, {"instruction": "Create a Python function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a Python function `get_function_name` that takes a callable as a parameter, and returns a string of the callable's name."}, {"instruction": "Write an iterator class that iterates through all possible permutations of the passed list of numbers."}, {"instruction": "Implement a Python function `get_upper_divisors` that returns the upper divisors of a given number."}, {"instruction": "Create a Python function `reflection` that returns a reflection of a string."}, {"instruction": "Create a Python function `palindrome` that returns true if a given string is a palindrome."}, {"instruction": "Create a Python function `isAnagram` that returns true if two strings are anagrams of each other."}, {"instruction": "Write a Python function `toBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Implement a Python function `isAnagram` that returns true if two strings are anagrams of each other."}, {"instruction": "Create a Python function `map` that's a clone of the built-in Python function of the same name."}, {"instruction": "Create a Python function `binarySearch` that returns the index of a target integer in an array using recursion."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: hard\nconcepts: #\n\n### Task", "fingerprint": null, "content": {"code": "double NeuroSimSubArrayReadLatency(SubArray *subArray) {\t// For 1 weighted sum task on selected columns\n\tif (!param->NeuroSimDynamicPerformance) { return 0; }\t// Skip this function if param->NeuroSimDynamicPerformance is false\n\tif (subArray->cell.memCellType == Type::SRAM) {   // SRAM\n\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->capRow1, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->precharger.CalculateLatency(1e20, subArray->capCol, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->senseAmp.CalculateLatency(subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\tif (subArray->shiftAddEnable) {\n\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\t// There are numReadPulse times of shift-and-add\n\t\t}\n\t\tdouble resPullDown = CalculateOnResistance(subArray->cell.widthSRAMCellNMOS * subArray->tech.featureSize, NMOS, subArray->inputParameter.temperature, subArray->tech);\n\t\tdouble tau = (subArray->resCellAccess + resPullDown) * (subArray->capCellAccess + subArray->capCol) + subArray->resCol * subArray->capCol / 2;\n\t\ttau *= log(subArray->tech.vdd / (subArray->tech.vdd - subArray->cell.minSenseVoltage / 2));   /* one signal raises and the other drops, so cell.minSenseVoltage/2 is enough */\n\t\tdouble gm = CalculateTransconductance(subArray->cell.widthAccessCMOS * subArray->tech.featureSize, NMOS, subArray->tech);\n\t\tdouble beta = 1 / (resPullDown * gm);\n\t\tdouble colRamp = 0;\n\t\tsubArray->colDelay = horowitz(tau, beta, subArray->wlDecoder.rampOutput, &colRamp) * subArray->numRow * subArray->numReadPulse * subArray->activityRowRead;\n\n\t\treturn \tsubArray->wlDecoder.readLatency +\n\t\t\t\tsubArray->precharger.readLatency +\n\t\t\t\tsubArray->colDelay +\n\t\t\t\tsubArray->senseAmp.readLatency +\n\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\tsubArray->shiftAdd.readLatency;\n\n\t} \n    else {\t// eNVM\n\t\tif (subArray->digitalModeNeuro) {\t// Digital eNVM, row by row operation\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tif(subArray->parallelRead == true) \n                {   // for the parallel readout\n                    //void NewSwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {\t// For simplicity, assume shift register is ideal\n                    double capToDrive=MAX(subArray->capRow2,subArray->capRow1);\n                    double resToDrive=subArray->resRow;\n                    subArray->wlBlSwitchMatrix.CalculateLatency(1e20, capToDrive, resToDrive, subArray->numReadPulse * subArray->activityRowRead, 1);\n                   \n                    // only need the wl-bl decoder\n                    double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n                    // subArray->colDelay = 2.3 * subArray->resCol * capBL; //column delay\n                    \n                    // Calculate column latency\n\t\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;  // assume the 15~20% voltage drop is enough for sensing\n \n                    // the read circuit\n                    // The input capacitance of the read circuit\n                    double Cin_ReadCircuit = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\n                    // Use the maximum read current to determine the readpulsewidth\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n                    subArray->cell.readPulseWidth = Cin_ReadCircuit * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\n                    // Delay at the Mux the mux is driving the read circuit\n                    double colRamp=0;\n                    subArray->mux.CalculateLatency(colRamp, Cin_ReadCircuit, 1); // the drive resistance should be the input resistance of the read circuit, the cap is the cap of\n\n                    // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n                    int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n                    int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n                    subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n                    subArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n                    subArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n                   if (subArray->shiftAddEnable) {\n                       // two shift adders are needed. one to add\n                       subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n                   }\n                                \n                   return  MAX(subArray->wlBlSwitchMatrix.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n                           subArray->readCircuit.readLatency +\n                           subArray->subtractor.readLatency +\n                           subArray->colDelay+ // need furthercheck\n                           subArray->shiftAdd.readLatency;                \n                }\n                else {\n                   double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n\t\t\t\t   subArray->wlDecoder.CalculateLatency(1e20, subArray->capRow2, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\t\t\t   double colRamp = 0;\n\t\t\t\t   // double tau = subArray->resCol * capBL / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t   // subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t   // subArray->colDelay = 2.3 * subArray->resCol * capBL;\n\t\t\t\t   double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n                   subArray->colDelay = tau * 0.2 * subArray->numColMuxed * subArray->numRow * subArray->numReadPulse;                   \n                   subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t   // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\t   int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\t   int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n\t\t\t\t   subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n\t\t\t\t   double capInputLoad = capBL + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\t   subArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\t   if (subArray->shiftAddEnable) {\n\t\t\t\t\t   subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n                        subArray->colDelay+\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n                }\n                        \n\t\t\t} else {        // Cross-point\n\t\t\t\tdouble wlDecoderLoad = subArray->colDecoderDriver.capInvInput + subArray->colDecoderDriver.capTgGateN + subArray->colDecoderDriver.capTgGateP;\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, wlDecoderLoad, NULL, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderDriver.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow1, subArray->capRow1, subArray->resRow, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tdouble colRamp = 0;\n\t\t\t\t// double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t// subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t// subArray->colDelay = 2.3 * subArray->resCol * subArray->capCol;\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n                subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t// Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\tint numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\tint numInput = numAdder * subArray->numCellPerSynapse;\n\t\t\t\tsubArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP*numInput, 1, 1);\n\t\t\t\tdouble capInputLoad = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\tsubArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency + subArray->wlDecoderDriver.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency);\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t} else {\t// Analog eNVM\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->wlDecoderOutput.capNorInput, NULL, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderOutput.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow2, subArray->resRow, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->blSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);    // Don't care write\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n                    // Cin is the capacitance to collect the charge\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\t// the maximum read current\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlDecoderOutput.readLatency +\n\t\t\t\t\t\tsubArray->blSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency + \n                        subArray->colDelay;\n\n\t\t\t} else {\t\t// Cross-point\n\t\t\t\tsubArray->wlSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\tdouble Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n                // the column delay\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t}\n\t}\n}", "docstring": "// calculate the area from Subarray class", "function_name": "NeuroSimSubArrayArea"}, "id": 65, "seed": "double NeuroSimSubArrayReadLatency(SubArray *subArray) {\t// For 1 weighted sum task on selected columns\n\tif (!param->NeuroSimDynamicPerformance) { return 0; }\t// Skip this function if param->NeuroSimDynamicPerformance is false\n\tif (subArray->cell.memCellType == Type::SRAM) {   // SRAM\n\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->capRow1, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->precharger.CalculateLatency(1e20, subArray->capCol, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\tsubArray->senseAmp.CalculateLatency(subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\tif (subArray->shiftAddEnable) {\n\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\t// There are numReadPulse times of shift-and-add\n\t\t}\n\t\tdouble resPullDown = CalculateOnResistance(subArray->cell.widthSRAMCellNMOS * subArray->tech.featureSize, NMOS, subArray->inputParameter.temperature, subArray->tech);\n\t\tdouble tau = (subArray->resCellAccess + resPullDown) * (subArray->capCellAccess + subArray->capCol) + subArray->resCol * subArray->capCol / 2;\n\t\ttau *= log(subArray->tech.vdd / (subArray->tech.vdd - subArray->cell.minSenseVoltage / 2));   /* one signal raises and the other drops, so cell.minSenseVoltage/2 is enough */\n\t\tdouble gm = CalculateTransconductance(subArray->cell.widthAccessCMOS * subArray->tech.featureSize, NMOS, subArray->tech);\n\t\tdouble beta = 1 / (resPullDown * gm);\n\t\tdouble colRamp = 0;\n\t\tsubArray->colDelay = horowitz(tau, beta, subArray->wlDecoder.rampOutput, &colRamp) * subArray->numRow * subArray->numReadPulse * subArray->activityRowRead;\n\n\t\treturn \tsubArray->wlDecoder.readLatency +\n\t\t\t\tsubArray->precharger.readLatency +\n\t\t\t\tsubArray->colDelay +\n\t\t\t\tsubArray->senseAmp.readLatency +\n\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\tsubArray->shiftAdd.readLatency;\n\n\t} \n    else {\t// eNVM\n\t\tif (subArray->digitalModeNeuro) {\t// Digital eNVM, row by row operation\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tif(subArray->parallelRead == true) \n                {   // for the parallel readout\n                    //void NewSwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double numRead, double numWrite) {\t// For simplicity, assume shift register is ideal\n                    double capToDrive=MAX(subArray->capRow2,subArray->capRow1);\n                    double resToDrive=subArray->resRow;\n                    subArray->wlBlSwitchMatrix.CalculateLatency(1e20, capToDrive, resToDrive, subArray->numReadPulse * subArray->activityRowRead, 1);\n                   \n                    // only need the wl-bl decoder\n                    double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n                    // subArray->colDelay = 2.3 * subArray->resCol * capBL; //column delay\n                    \n                    // Calculate column latency\n\t\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;  // assume the 15~20% voltage drop is enough for sensing\n \n                    // the read circuit\n                    // The input capacitance of the read circuit\n                    double Cin_ReadCircuit = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\n                    // Use the maximum read current to determine the readpulsewidth\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n                    subArray->cell.readPulseWidth = Cin_ReadCircuit * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\n                    // Delay at the Mux the mux is driving the read circuit\n                    double colRamp=0;\n                    subArray->mux.CalculateLatency(colRamp, Cin_ReadCircuit, 1); // the drive resistance should be the input resistance of the read circuit, the cap is the cap of\n\n                    // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n                    int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n                    int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n                    subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n                    subArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n                    subArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n                   if (subArray->shiftAddEnable) {\n                       // two shift adders are needed. one to add\n                       subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n                   }\n                                \n                   return  MAX(subArray->wlBlSwitchMatrix.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n                           subArray->readCircuit.readLatency +\n                           subArray->subtractor.readLatency +\n                           subArray->colDelay+ // need furthercheck\n                           subArray->shiftAdd.readLatency;                \n                }\n                else {\n                   double capBL = subArray->lengthCol * 0.2e-15 / 1e-6;\n\t\t\t\t   subArray->wlDecoder.CalculateLatency(1e20, subArray->capRow2, NULL, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead, 1);\t// Don't care write\n\t\t\t\t   double colRamp = 0;\n\t\t\t\t   // double tau = subArray->resCol * capBL / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t   // subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t   // subArray->colDelay = 2.3 * subArray->resCol * capBL;\n\t\t\t\t   double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n                   subArray->colDelay = tau * 0.2 * subArray->numColMuxed * subArray->numRow * subArray->numReadPulse;                   \n                   subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t   // Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\t   int numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\t   int numInput = numAdder * subArray->numCellPerSynapse; // number of input of the mux\n\t\t\t\t   subArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP * numInput, 1, 1);\n\t\t\t\t   double capInputLoad = capBL + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\t   subArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\t   subArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\t   if (subArray->shiftAddEnable) {\n\t\t\t\t\t   subArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency)+\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n                        subArray->colDelay+\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n                }\n                        \n\t\t\t} else {        // Cross-point\n\t\t\t\tdouble wlDecoderLoad = subArray->colDecoderDriver.capInvInput + subArray->colDecoderDriver.capTgGateN + subArray->colDecoderDriver.capTgGateP;\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, wlDecoderLoad, NULL, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderDriver.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow1, subArray->capRow1, subArray->resRow, subArray->numRow * subArray->activityRowRead * subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tdouble colRamp = 0;\n\t\t\t\t// double tau = subArray->resCol * subArray->capCol / 2 * (subArray->cell.resMemCellOff + subArray->resCol / 3) / (subArray->cell.resMemCellOff + subArray->resCol);\n\t\t\t\t// subArray->colDelay = horowitz(tau, 0, 1e20, &colRamp);\n\t\t\t\t// subArray->colDelay = 2.3 * subArray->resCol * subArray->capCol;\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n                subArray->mux.CalculateLatency(colRamp, 0, 1);\n\t\t\t\t// Here numColMuxed can mean how many synapses share 1 adder or how many columns share 1 S/A\n\t\t\t\tint numAdder = (int)ceil(((double)subArray->numCol / subArray->numCellPerSynapse) / subArray->numColMuxed);   // numCol is divisible by numCellPerSynapse\n\t\t\t\tint numInput = numAdder * subArray->numCellPerSynapse;\n\t\t\t\tsubArray->muxDecoder.CalculateLatency(1e20, subArray->mux.capTgGateN * numInput, subArray->mux.capTgGateP*numInput, 1, 1);\n\t\t\t\tdouble capInputLoad = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1);\n\t\t\t\tsubArray->voltageSenseAmp.CalculateLatency(capInputLoad, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->adder.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->dff.CalculateLatency(1e20, subArray->numRow * subArray->numReadPulse * subArray->activityRowRead);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, subArray->dff.capTgDrain, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);    // There are numReadPulse times of shift-and-add\n\t\t\t\t}\n\t\t\t\treturn  MAX(subArray->wlDecoder.readLatency + subArray->wlDecoderDriver.readLatency, subArray->muxDecoder.readLatency + subArray->mux.readLatency);\n\t\t\t\t\t\tsubArray->voltageSenseAmp.readLatency +\n\t\t\t\t\t\tsubArray->adder.readLatency +\n\t\t\t\t\t\tsubArray->dff.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t} else {\t// Analog eNVM\n\t\t\tif (subArray->cell.accessType == CMOS_access) {   // 1T1R\n\t\t\t\tsubArray->wlDecoder.CalculateLatency(1e20, subArray->wlDecoderOutput.capNorInput, NULL, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->wlDecoderOutput.CalculateLatency(subArray->wlDecoder.rampOutput, subArray->capRow2, subArray->resRow, 1, 1);\t// Don't care write\n\t\t\t\tsubArray->blSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);    // Don't care write\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n                    // Cin is the capacitance to collect the charge\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\t// the maximum read current\n                    double Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlDecoderOutput.readLatency +\n\t\t\t\t\t\tsubArray->blSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency + \n                        subArray->colDelay;\n\n\t\t\t} else {\t\t// Cross-point\n\t\t\t\tsubArray->wlSwitchMatrix.CalculateLatency(1e20, subArray->capRow1, subArray->resRow, subArray->numReadPulse, 1);\t// Don't care write\n\t\t\t\tif (subArray->readCircuit.mode == CMOS) {\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capTgDrain + subArray->readCircuit.capPmosGate;\n\t\t\t\t\tdouble Imax = subArray->numRow * subArray->cell.readVoltage / subArray->cell.resMemCellOn;\n\t\t\t\t\tsubArray->cell.readPulseWidth = Cin * subArray->readCircuit.voltageIntThreshold / Imax * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t} else {    // mode==OSCILLATION\n\t\t\t\t\tdouble Cin = subArray->capCol + subArray->mux.capTgDrain * (2 + subArray->numColMuxed - 1) + subArray->readCircuit.capInvInput;\n\t\t\t\t\tdouble Rmin = subArray->cell.resMemCellOn / subArray->numRow;\n\t\t\t\t\tdouble Rp = 1 / (1/Rmin + 1/subArray->readCircuit.R_OSC_OFF);\n\t\t\t\t\tdouble t_rise = -Rp * Cin * log((subArray->readCircuit.Vth - subArray->readCircuit.Vrow * Rp / Rmin) / (subArray->readCircuit.Vhold - subArray->readCircuit.Vrow * Rp / Rmin));\n\t\t\t\t\tsubArray->cell.readPulseWidth = t_rise * subArray->readCircuit.maxNumIntPerCycle;\n\t\t\t\t}\n                // the column delay\n\t\t\t\tdouble tau = subArray->capCol*(subArray->cell.resMemCellAvg/(subArray->numRow/2));\n\t\t\t\tsubArray->colDelay = tau * 0.2 * subArray->numReadPulse * subArray->numColMuxed;\n\t\t\t\tsubArray->readCircuit.CalculateLatency(subArray->numReadPulse);\n\t\t\t\tsubArray->subtractor.CalculateLatency(1e20, 0, subArray->numReadPulse);\n\t\t\t\tif (subArray->shiftAddEnable) {\n\t\t\t\t\tsubArray->shiftAdd.CalculateLatency(subArray->numReadPulse);\n\t\t\t\t}\n\t\t\t\treturn \tsubArray->wlSwitchMatrix.readLatency +\n\t\t\t\t\t\tsubArray->readCircuit.readLatency +\n\t\t\t\t\t\tsubArray->subtractor.readLatency +\n\t\t\t\t\t\tsubArray->shiftAdd.readLatency;\n\t\t\t}\n\t\t}\n\t}\n}", "concepts": ["#"], "parsing_result": [{"instruction": "Implement a Python class `Stack` that represents a stack."}, {"instruction": "Implement a Python class to represent a video game player with the following properties:\n\n- name\n- total time played\n- amount of coins\n- inventory of items"}, {"instruction": "Implement a Python class called `MyLinkedList` that simulates a singly-linked list."}, {"instruction": "Implement a Python class `Person` that represents a person with two fields: `name` and `age`. Create a constructor that initializes the name and age of the person."}, {"instruction": "Write a Python class `Vector` that implements a two-dimensional vector."}, {"instruction": "Create a Python class `Person` that defines a person's name, age, and height."}, {"instruction": "Write a Python class `Stack` that implements a stack as a list, keeping track of its size."}, {"instruction": "Write a Python class `Fraction` that represents a fraction."}, {"instruction": "Write a Python class `Point` that represents a point in 2D space, and contains the following methods:\n- `__init__`: takes two integer parameters, `x` and `y`, and sets the point's x- and y-coordinates accordingly\n- `distance`: takes another Point object and returns the distance between this point and the given point\n- `translate`: takes an integer parameter `d`, and translates the point by `d` units in both directions\n- `scale`: takes a floating point parameter `s`, and scales the point by a factor of `s`\n- `printPoint`: prints the point in the form `(x, y)`"}, {"instruction": "Write a Python class `Queue` with two methods `enqueue` and `dequeue`. The `enqueue` method adds a new element to the queue, and the `dequeue` method removes the oldest element from the queue."}, {"instruction": "Create a Python class `Deck` that represents a standard deck of cards."}, {"instruction": "Create a Python class `Person` that has attributes `name` and `age`, and has the following methods:\n1. `getName()`\n2. `getAge()`\n3. `increaseAge()`\n4. `isOlderThan(otherPerson)`"}, {"instruction": "#"}, {"instruction": "Write a class `Date` that models a date in the ISO 8601 format. It should support the following functionality:\n\n- default initialization\n- initialization with ISO 8601 string\n- comparison\n- addition and subtraction\n- format printing\n- date arithmetic"}, {"instruction": "Write a Python `class` that implements a stack."}, {"instruction": "Create a Python class `Stack` that implements a stack data structure."}, {"instruction": "Implement a Python class `Polygon` that stores the number of sides of a polygon and its name./python/1.1_count_digits/solution.py\n# Count the number of digits in an integer.\n\n# Input: An integer.\n# Output: The number of digits in the integer.\n# Examples:\n# 123 -> 3\n# 120 -> 3\n# 1200 -> 4\n# -123 -> 3\n# 0 -> 1\n\n\ndef countDigits(n):\n    if n >= 0:\n        return len(str(n))\n    else:\n        return len(str(-n))\n\n\n# Examples\nprint(countDigits(123))\nprint(countDigits(120))\nprint(countDigits(1200))\nprint(countDigits(-123))\nprint(countDigits(0))\n/python/1.3_count_words/solution.py\n# Count the number of words in a string.\n\n# Input: A string.\n# Output: The number of words in the string.\n# Examples:\n# '' -> 0\n# ' a ' -> 0\n# '   ' -> 0\n# ' ' -> 1\n# ' '   ' ' -> 1\n# ' one ' -> 1\n# ' one two ' -> 2\n# ' one two three ' -> 3\n# ' one two three four ' -> 4\n# ' one two three four five ' -> 5\n# ' one two three four five six ' -> 6\n# ' one two three four five six seven ' -> 7\n# ' one two three four five six seven eight ' -> 8\n# 'one two three four five six seven eight nine ten' -> 10\n\n\ndef countWords(s):\n    return len(s.split())\n\n\n# Examples\nprint(countWords(''))\nprint(countWords(' a '))\nprint(countWords('   '))\nprint(countWords(' '))\nprint(countWords('   '))\nprint(countWords(' one '))\nprint(countWords(' one two '))\nprint(countWords(' one two three '))\nprint(countWords(' one two three four '))\nprint(countWords(' one two three four five '))\nprint(countWords(' one two three four five six '))\nprint(countWords(' one two three four five six seven '))\nprint(countWords(' one two three four five six seven eight '))\nprint(countWords('one two three four five six seven eight nine ten'))\n/python/1.2_is_prime/solution.py\n# Check if a number is prime.\n\n# Input: A number.\n# Output: A boolean.\n# Examples:\n# isPrime(0) -> False\n# isPrime(1) -> False\n# isPrime(2) -> True\n# isPrime(3) -> True\n# isPrime(11) -> True\n# isPrime(12) -> False\n# isPrime(-1) -> False\n# isPrime(-2) -> False\n\n\ndef isPrime(n):\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n# Examples\nprint(isPrime(0))\nprint(isPrime(1))\nprint(isPrime(2))\nprint(isPrime(3))\nprint(isPrime(11))\nprint(isPrime(12))\nprint(isPrime(-1))\nprint(isPrime(-2))\n/python/1.4_reverse_string/solution.py\n# Reverse a string using the STL iterators.\n\n# Input: A string.\n# Output: The reversed string (using STL iterators).\n# Examples:\n# '' -> ''\n# ' ' -> ' '\n# '   ' -> '   '\n# 'a' -> 'a'\n# 'abc' -> 'cba'\n# 'ab' -> 'ba'\n# 'z' -> 'z'\n# '   z   ' -> '   z   '\n# '   z   a   b   c   ' -> '   c   b   a   z   '\n\n\ndef reverseString(s):\n    return \"\".join(reversed(s))\n\n\n# Examples\nprint(reverseString(''))\nprint(reverseString(' '))\nprint(reverseString('   '))\nprint(reverseString('a'))\nprint(reverseString('abc'))\nprint(reverseString('ab'))\nprint(reverseString('z'))\nprint(reverseString('   z   '))\nprint(reverseString('   z   a   b   c   '))"}, {"instruction": "Implement a Python class `Stack` that contains a list of stack elements."}, {"instruction": "Write a class `Rectangle` that represents a rectangle in 2D space, with a height and width. Add a method `area` to calculate the area of the rectangle."}, {"instruction": "Write a Python class `Point` that represents a point in 2D space."}, {"instruction": "Write a Python class `Matrix` that implements a matrix as a 2-dimensional list."}, {"instruction": "Write a Python class `Queue` that implements a queue using a Python list."}, {"instruction": "Write a Python class `Fraction` that models fractional numbers and supports arithmetic operations."}, {"instruction": "#"}, {"instruction": "Implement a Python class called `BinarySearchTree` that uses binary search trees to perform maximum, minimum, and search operations."}, {"instruction": "Write a Python class `Calculator` that implements basic arithmetic operations."}, {"instruction": "Write a Python class `MyList` that behaves like a Python list."}, {"instruction": "Create a Python class `Point` with attributes `x` and `y` and methods `getx` and `gety`."}, {"instruction": "Create a C# class `Rectangle` that contains two properties `Width` and `Height` of type `float`, and a method `Area` that returns the rectangle area."}, {"instruction": "Create a Python class `PrimeFactorGenerator` that generates all of the prime factors of a number."}, {"instruction": "Write a Python class `BinarySearchTree` that implements a binary search tree."}, {"instruction": "Write a Python class `Point` with an `__init__` method that takes an integer as input and sets the x coordinate of the point to that integer (e.g., `p = Point(10)`)."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: C method, C++ method, pointer arithmetic, return value, boolean type\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_Scene_autoReleaseAssets_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::Scene *arg1 = (cc::Scene *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::Scene>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"Scene_autoReleaseAssets_set,2,SWIGTYPE_bool\"); \n    cc_Scene_autoReleaseAssets_set(arg1,arg2);\n    \n    \n    return true;\n}", "docstring": "// %typemap(in) bool", "function_name": "js_cc_Scene_onBatchCreated"}, "id": 66, "seed": "static bool js_cc_Scene_autoReleaseAssets_set(se::State& s)\n{\n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::Scene *arg1 = (cc::Scene *) NULL ;\n    bool arg2 ;\n    \n    arg1 = SE_THIS_OBJECT<cc::Scene>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    // %typemap(in) bool\n    ok &= sevalue_to_native(args[0], &arg2);\n    SE_PRECONDITION2(ok, false, \"Scene_autoReleaseAssets_set,2,SWIGTYPE_bool\"); \n    cc_Scene_autoReleaseAssets_set(arg1,arg2);\n    \n    \n    return true;\n}", "concepts": ["C method", "C++ method", "pointer arithmetic", "return value", "boolean type"], "parsing_result": [{"instruction": "Write a C++ class `MyString` that implements a string class using C-style methods that supports the following operations:\n\n- `MyString(const char *)`\n- `MyString(const MyString &)`\n- `MyString concat(const MyString &)`\n- `int length()`\n- `char *toCStr()`\n- `MyString substr(int start, int length)`\n- `bool equals(const MyString &)`"}, {"instruction": "Implement a Python class `Node` that represents a node in a singly-linked list."}, {"instruction": "Create a Python class `Vector` that implements a basic vector class."}, {"instruction": "Implement a Python class `Foo` that has a method `bar` that takes an integer parameter `x`, and returns a boolean indicating whether the input value `x` is even."}, {"instruction": "Implement a Python class `Rectangle`."}, {"instruction": "Implement a Python class `ParkingLot` that represents a parking lot."}, {"instruction": "Create a Python class called `Rectangle` with the following attributes:\n- `width` (type `int`)\n- `height` (type `int`)\n\nCreate a method called `area` that returns the area of the rectangle."}, {"instruction": "Create a Python class called `Rectangle` that contains two instance variables and two methods:\n- 2 instance variables: width and height\n- 2 methods: `perimeter` and `area`"}, {"instruction": "Write a Python class `Node` that represents a node in a singly-linked list."}, {"instruction": "Implement a Python class `Rectangle` with methods `area`, `perimeter`, and `isSquare`."}, {"instruction": "Implement a C++ class `Node` that has a single data field of type `int` and an optional pointer to the next `Node`."}, {"instruction": "Implement a Python class `BinaryTree` with the following methods:\n\n- `insert`\n- `contains`\n- `preOrderTraverse`\n- `inOrderTraverse`\n- `postOrderTraverse`"}, {"instruction": "Create a Python class `Matrix` that implements matrix multiplication."}, {"instruction": "Create a Python class `Complex` that implements a complex number in the form a + bi, where a and b are real numbers and i is the imaginary unit. Implement a method `get_real` that returns the real component of the complex number as a float, and a method `get_imag` that returns the imaginary component of the complex number as a float. Also implement methods `conjugate` and `norm` that return the complex conjugate and the norm of a complex number, respectively."}, {"instruction": "Write a Python class `Set` that implements a mathematical set."}, {"instruction": "Write a Python class `PyBool` that implements a boolean type."}, {"instruction": "Implement a Python class `Point` that represents a point in a two-dimensional Cartesian coordinate system.\n* Implement a method `distance` that calculates the distance between two points.\n* Implement a method `distance` that calculates the distance between two points.\n* Implement a method `slope` that calculates the slope of a straight line between two points."}, {"instruction": "Write a Python class `Node` that contains the following methods:\n1. `get_data` that returns the node's value\n2. `get_next` that returns the next node\n3. `set_data` that sets the node's value\n4. `set_next` that sets the next node\n5. `__init__` that initializes the node with a `data` value and a `next` node"}, {"instruction": "Implement a Python class `Node` that contains two elements: a value and a pointer to the next element."}, {"instruction": "Implement the `reverseString` function."}, {"instruction": "Write a Python class `Student` with two attributes: `name` and `gpa`. `Student` has two methods: `writeGpa` and `readGpa`. `writeGpa` takes a `float` as a parameter and changes the `gpa` attribute. `readGpa` returns the `gpa` attribute as a `float`."}, {"instruction": "Write a Python class `Node` that stores a single value."}, {"instruction": "Implement a Python class `Student` with the following properties:\n\n- `name`: a string\n- `age`: an integer\n- `gpa`: a float\n\nHave the class provide the following methods:\n\n- `getName`: returns the name of the student\n- `getAge`: returns the age of the student\n- `getGPA`: returns the GPA of the student"}, {"instruction": "Create a Python class `MyString` that performs similar functionality to the string class."}, {"instruction": "Write a Python class `Node` that defines a singly linked list node."}, {"instruction": "Implement a C++ class `Point` that represents points in a 2D coordinate system."}, {"instruction": "Create a Python class `Point` with properties `x` and `y` and methods `set` and `get`."}, {"instruction": "Write a Python class `PyPerson` with attributes `name` and `age`. Implement a method `__bool__` that returns `True` if the person is older than 18."}, {"instruction": "Implement a Python class `Vector` that stores a list of three elements and provides methods for calculating the vector's magnitude, dot product, and cross product."}, {"instruction": "Implement the following functions for the `Complex` class (a class representing a complex number):\n\n- `__init__`: initializes the real and imaginary parts to `0`\n- `add`: adds two complex numbers\n- `sub`: subtracts two complex numbers\n- `mul`: multiplies two complex numbers\n- `abs`: returns the absolute value of the complex number\n- `conj`: returns the complex conjugate of the complex number"}, {"instruction": "Implement a Python class `Counter` that can be used to count and count down from a given integer."}, {"instruction": "Create a Python class `Node` that is a linked list node containing a value and a reference to the next node."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: Python\ndifficulty: medium\nconcepts: UDP sockets, asynchronous, threads, struct\n\n### Task", "fingerprint": null, "content": {"code": "int client() {\n\t/*\n\tSimple udp client\n\t*/\n\tstruct sockaddr_in si_other;\n\tint s, slen = sizeof(si_other);\n\tchar buf[1500];\n\tchar message[BUFLEN];\n\tWSADATA wsa;\n\tchar ip_address[20];\n\n\tprintf(\"input the IP address, for default press d\\n\");\n\tscanf(\"%s\", ip_address);\n\tif (strcmp(ip_address, \"d\") == 0)\n\t\tstrcpy(ip_address, SERVER);\n\n\t//Initialise winsock\n\tprintf(\"\\nInitialising Winsock...\");\n\tif (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)\n\t{\n\t\tprintf(\"Failed. Error Code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\tprintf(\"Initialised.\\n\");\n\n\t//create socket\n\tif ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == SOCKET_ERROR)\n\t{\n\t\tprintf(\"socket() failed with error code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//setup address structure\n\tmemset((char *)&si_other, 0, sizeof(si_other));\n\tsi_other.sin_family = AF_INET;\n\tsi_other.sin_port = htons(PORT);\n\tsi_other.sin_addr.S_un.S_addr = inet_addr(ip_address);\n\n\tAS_FIELDS* asfieldo = (AS_FIELDS*)malloc(sizeof(AS_FIELDS));\n\tasfieldo->a = s;\n\tasfieldo->b = slen;\n\tasfieldo->si_other = si_other;\n\tDWORD myThreadID, dwExit= 0;\n\tHANDLE myHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\n\tchar c;\n\tgetchar();\n\n\tdo {\n\t\t// menu\n\t\tprintf(\"CLIENT MENU:\\n\");\n\t\tprintf(\"t - text message:\\n\");\n\t\tprintf(\"c - change connection:\\n\");\n\t\tprintf(\"f - send faulty packet:\\n\");\n\t\tprintf(\"d - doimplementacia:\\n\");\n\t\tprintf(\"e - exit program:\\n\");\n\t\tc = getchar();\n\t\tgetchar();\n\t\tswitch (c) {\n\t\tcase 't':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_text(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'c':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tchange_conn(s, si_other, slen);\n\t\t\tc = 'e';\n\t\t\tbreak;\n\t\tcase 'f':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_faulty_packet(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'd':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tdoimplementacia(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'e':\n\t\t\treturn 1;\n\t\t}\n\t} while (c != 'e');\n\t\n\tclosesocket(s);\n\tWSACleanup();\n\treturn 0;\n}", "docstring": "//try to receive some data, this is a blocking call", "function_name": "send_text"}, "id": 69, "seed": "int client() {\n\t/*\n\tSimple udp client\n\t*/\n\tstruct sockaddr_in si_other;\n\tint s, slen = sizeof(si_other);\n\tchar buf[1500];\n\tchar message[BUFLEN];\n\tWSADATA wsa;\n\tchar ip_address[20];\n\n\tprintf(\"input the IP address, for default press d\\n\");\n\tscanf(\"%s\", ip_address);\n\tif (strcmp(ip_address, \"d\") == 0)\n\t\tstrcpy(ip_address, SERVER);\n\n\t//Initialise winsock\n\tprintf(\"\\nInitialising Winsock...\");\n\tif (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)\n\t{\n\t\tprintf(\"Failed. Error Code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\tprintf(\"Initialised.\\n\");\n\n\t//create socket\n\tif ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == SOCKET_ERROR)\n\t{\n\t\tprintf(\"socket() failed with error code : %d\\n\", WSAGetLastError());\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t//setup address structure\n\tmemset((char *)&si_other, 0, sizeof(si_other));\n\tsi_other.sin_family = AF_INET;\n\tsi_other.sin_port = htons(PORT);\n\tsi_other.sin_addr.S_un.S_addr = inet_addr(ip_address);\n\n\tAS_FIELDS* asfieldo = (AS_FIELDS*)malloc(sizeof(AS_FIELDS));\n\tasfieldo->a = s;\n\tasfieldo->b = slen;\n\tasfieldo->si_other = si_other;\n\tDWORD myThreadID, dwExit= 0;\n\tHANDLE myHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\n\tchar c;\n\tgetchar();\n\n\tdo {\n\t\t// menu\n\t\tprintf(\"CLIENT MENU:\\n\");\n\t\tprintf(\"t - text message:\\n\");\n\t\tprintf(\"c - change connection:\\n\");\n\t\tprintf(\"f - send faulty packet:\\n\");\n\t\tprintf(\"d - doimplementacia:\\n\");\n\t\tprintf(\"e - exit program:\\n\");\n\t\tc = getchar();\n\t\tgetchar();\n\t\tswitch (c) {\n\t\tcase 't':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_text(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'c':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tchange_conn(s, si_other, slen);\n\t\t\tc = 'e';\n\t\t\tbreak;\n\t\tcase 'f':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tsend_faulty_packet(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'd':\n\t\t\tTerminateThread(myHandle, dwExit);\n\t\t\tdoimplementacia(s, si_other, slen);\n\t\t\tmyHandle = CreateThread(0, 0, sendingThread, (void*)asfieldo, 0, &myThreadID);\n\t\t\tcontinue;\n\t\tcase 'e':\n\t\t\treturn 1;\n\t\t}\n\t} while (c != 'e');\n\t\n\tclosesocket(s);\n\tWSACleanup();\n\treturn 0;\n}", "concepts": ["UDP sockets", "asynchronous", "threads", "struct"], "parsing_result": [{"instruction": "Write a Python class `UDPServer` that creates a UDP server and listens for messages."}, {"instruction": "Implement a Python class `UDPSocket` that models a UDP socket that allows clients to send and receive packets of data."}, {"instruction": "Create a program in Python that continually accepts a UDP packet, extracts the data, and prints it to the console."}, {"instruction": "Create a Python class `Server` that implements a server that receives multiple client connections and sends time-stamped messages to them."}, {"instruction": "Implement an asynchronous network client in Python using UDP sockets."}, {"instruction": "Create a Python class called `UDPServer` that creates a UDP server."}, {"instruction": "Create a Python class `Client` that simulates a simple client-server chat application."}, {"instruction": "Implement a UDP echo server that accepts client connections and sends the received data back with the same data length."}, {"instruction": "Create a Python class `UDPServer` that implements a UDP server."}, {"instruction": "Create a Python class that emulates a UDP server, listens on a port, and responds to UDP requests using threads."}, {"instruction": "Create a class `Incrementor` that implements a thread-safe `increment` method. The class should support two behaviors:\n\n1. The `increment` method should return the next integer, and\n2. The `increment` method should block until a value has been written.\n\nThe class should be implemented using a thread-safe `queue` and `threading.Lock` (e.g., a single `threading.Lock` for the class, or a `threading.Lock` for each instance of the class)."}, {"instruction": "Create a Python class called `Datagram` that represents a datagram in the Internet protocol."}, {"instruction": "Write a Python class that runs as a UDP server and receives a list of `struct`s, and returns a list of `struct`s back to the sender."}, {"instruction": "Implement a UDP server program that accepts numeric input from a client and returns the double of the number using the socket module and threading."}, {"instruction": "Write a Python class `UDPServer` that implements a server that receives a string from a client, performs some operation on the string, and sends the result to the client."}, {"instruction": "Write a Python class `UDPServer` that serves as a local UDP server that receives datagrams and then prints the received data."}, {"instruction": "Implement a Python UDP socket server that accepts a message and returns the message back to the client, using threads and asynchronous programming."}, {"instruction": "Create a Python class `UDPSocket` that implements a UDP client/server socket."}, {"instruction": "Create a Python class that implements a UDP socket in asynchronous mode using threads."}, {"instruction": "Write a TCP client and server that allows a user to send a message to another user and receive a reply."}, {"instruction": "Write a Python class `UDPConn` that implements a connection between 2 processes using a UDP socket. The class must have the following public methods:\n\n- `connect`: takes 2 arguments: `address` and `port`, which are used to connect to a server listening on that address and port\n- `send`: takes 1 argument: `data`, which is used to send a message to the server\n- `recv`: takes no arguments, and returns a string containing the received message"}, {"instruction": "Create a Python class `UDPSocket` that implements the [UDP socket API](https://docs.python.org/3/library/socket.html#socket.socket)."}, {"instruction": "Create a Python class `UDPServer` that implements an asynchronous UDP server."}, {"instruction": "Create a Python class `SynchronizedQueue` that implements a thread-safe queue."}, {"instruction": "Create a Python class `UDPClient` that sends UDP messages to a UDP server."}, {"instruction": "Create a Python class `UDPServer` that implements a UDP server that broadcasts messages from a client."}, {"instruction": "Implement a UDP server that responds to SRP login requests by responding with a challenge."}, {"instruction": "Create a Python class `UDPServer` that provides a UDP server that can receive a single message."}, {"instruction": "Write a Python class `UDPClient` that sends UDP datagrams using `socket.SOCK_DGRAM` and `socket.AF_INET` addressing."}, {"instruction": "Implement a Python class `UDPServer` that provides an asynchronous UDP server. The server should be configured to listen for incoming messages, process each message, and return a response."}]}
