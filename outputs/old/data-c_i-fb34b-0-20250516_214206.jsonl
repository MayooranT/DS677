{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: generic programming, C# List<T> class\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1__ctor_m2716C5BEDCDB58D5B0C144DA4837DAF99E86D871_gshared (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 * __this, RuntimeObject* ___collection0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var);\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tRuntimeObject* V_0 = NULL;\n\tint32_t V_1 = 0;\n\tRuntimeObject* V_2 = NULL;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tNullCheck((RuntimeObject *)__this);\n\t\tObject__ctor_m88880E0413421D13FD95325EDCE231707CE1F405((RuntimeObject *)__this, /*hidden argument*/NULL);\n\t\tRuntimeObject* L_0 = ___collection0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000f;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentNullException_m539081110B94B71D92C9761B273E617B23B4BBA5((int32_t)6, /*hidden argument*/NULL);\n\t}\n\nIL_000f:\n\t{\n\t\tRuntimeObject* L_1 = ___collection0;\n\t\tV_0 = (RuntimeObject*)((RuntimeObject*)IsInst((RuntimeObject*)L_1, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2)));\n\t\tRuntimeObject* L_2 = V_0;\n\t\tif (!L_2)\n\t\t{\n\t\t\tgoto IL_0050;\n\t\t}\n\t}\n\t{\n\t\tRuntimeObject* L_3 = V_0;\n\t\tNullCheck((RuntimeObject*)L_3);\n\t\tint32_t L_4;\n\t\tL_4 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* System.Int32 System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::get_Count() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_3);\n\t\tV_1 = (int32_t)L_4;\n\t\tint32_t L_5 = V_1;\n\t\tif (L_5)\n\t\t{\n\t\t\tgoto IL_002f;\n\t\t}\n\t}\n\t{\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_6 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_6);\n\t\treturn;\n\t}\n\nIL_002f:\n\t{\n\t\tint32_t L_7 = V_1;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_8 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)(AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)SZArrayNew(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 1), (uint32_t)L_7);\n\t\t__this->set__items_1(L_8);\n\t\tRuntimeObject* L_9 = V_0;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_10 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)__this->get__items_1();\n\t\tNullCheck((RuntimeObject*)L_9);\n\t\tInterfaceActionInvoker2< AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*, int32_t >::Invoke(5 /* System.Void System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::CopyTo(T[],System.Int32) */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_9, (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)L_10, (int32_t)0);\n\t\tint32_t L_11 = V_1;\n\t\t__this->set__size_2(L_11);\n\t\treturn;\n\t}\n\nIL_0050:\n\t{\n\t\t__this->set__size_2(0);\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_12 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_12);\n\t\tRuntimeObject* L_13 = ___collection0;\n\t\tNullCheck((RuntimeObject*)L_13);\n\t\tRuntimeObject* L_14;\n\t\tL_14 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<kcp2k.Kcp/AckItem>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 3), (RuntimeObject*)L_13);\n\t\tV_2 = (RuntimeObject*)L_14;\n\t}\n\nIL_0069:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_0077;\n\t\t}\n\nIL_006b:\n\t\t{\n\t\t\tRuntimeObject* L_15 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_15);\n\t\t\tAckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  L_16;\n\t\t\tL_16 = InterfaceFuncInvoker0< AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<kcp2k.Kcp/AckItem>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 4), (RuntimeObject*)L_15);\n\t\t\tNullCheck((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this);\n\t\t\t((  void (*) (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *, AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5)->methodPointer)((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this, (AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 )L_16, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5));\n\t\t}\n\nIL_0077:\n\t\t{\n\t\t\tRuntimeObject* L_17 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_17);\n\t\t\tbool L_18;\n\t\t\tL_18 = InterfaceFuncInvoker0< bool >::Invoke(0 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var, (RuntimeObject*)L_17);\n\t\t\tif (L_18)\n\t\t\t{\n\t\t\t\tgoto IL_006b;\n\t\t\t}\n\t\t}\n\nIL_007f:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x8B, FINALLY_0081);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_0081;\n\t}\n\nFINALLY_0081:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_19 = V_2;\n\t\t\tif (!L_19)\n\t\t\t{\n\t\t\t\tgoto IL_008a;\n\t\t\t}\n\t\t}\n\nIL_0084:\n\t\t{\n\t\t\tRuntimeObject* L_20 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_20);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var, (RuntimeObject*)L_20);\n\t\t}\n\nIL_008a:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(129)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(129)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x8B, IL_008b)\n\t}\n\nIL_008b:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "List_1_InsertRange_mDEF514565A34924F191DBC38F0E98BE48AD1AB6A_gshared"}, "id": 1, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1__ctor_m2716C5BEDCDB58D5B0C144DA4837DAF99E86D871_gshared (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 * __this, RuntimeObject* ___collection0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var);\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tRuntimeObject* V_0 = NULL;\n\tint32_t V_1 = 0;\n\tRuntimeObject* V_2 = NULL;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tNullCheck((RuntimeObject *)__this);\n\t\tObject__ctor_m88880E0413421D13FD95325EDCE231707CE1F405((RuntimeObject *)__this, /*hidden argument*/NULL);\n\t\tRuntimeObject* L_0 = ___collection0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000f;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentNullException_m539081110B94B71D92C9761B273E617B23B4BBA5((int32_t)6, /*hidden argument*/NULL);\n\t}\n\nIL_000f:\n\t{\n\t\tRuntimeObject* L_1 = ___collection0;\n\t\tV_0 = (RuntimeObject*)((RuntimeObject*)IsInst((RuntimeObject*)L_1, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2)));\n\t\tRuntimeObject* L_2 = V_0;\n\t\tif (!L_2)\n\t\t{\n\t\t\tgoto IL_0050;\n\t\t}\n\t}\n\t{\n\t\tRuntimeObject* L_3 = V_0;\n\t\tNullCheck((RuntimeObject*)L_3);\n\t\tint32_t L_4;\n\t\tL_4 = InterfaceFuncInvoker0< int32_t >::Invoke(0 /* System.Int32 System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::get_Count() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_3);\n\t\tV_1 = (int32_t)L_4;\n\t\tint32_t L_5 = V_1;\n\t\tif (L_5)\n\t\t{\n\t\t\tgoto IL_002f;\n\t\t}\n\t}\n\t{\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_6 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_6);\n\t\treturn;\n\t}\n\nIL_002f:\n\t{\n\t\tint32_t L_7 = V_1;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_8 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)(AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)SZArrayNew(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 1), (uint32_t)L_7);\n\t\t__this->set__items_1(L_8);\n\t\tRuntimeObject* L_9 = V_0;\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_10 = (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)__this->get__items_1();\n\t\tNullCheck((RuntimeObject*)L_9);\n\t\tInterfaceActionInvoker2< AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*, int32_t >::Invoke(5 /* System.Void System.Collections.Generic.ICollection`1<kcp2k.Kcp/AckItem>::CopyTo(T[],System.Int32) */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 2), (RuntimeObject*)L_9, (AckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C*)L_10, (int32_t)0);\n\t\tint32_t L_11 = V_1;\n\t\t__this->set__size_2(L_11);\n\t\treturn;\n\t}\n\nIL_0050:\n\t{\n\t\t__this->set__size_2(0);\n\t\tIL2CPP_RUNTIME_CLASS_INIT(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0));\n\t\tAckItemU5BU5D_t16E6F0F8EDCAD3760512E2474ED18BA9CF03862C* L_12 = ((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35_StaticFields*)il2cpp_codegen_static_fields_for(IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 0)))->get__emptyArray_5();\n\t\t__this->set__items_1(L_12);\n\t\tRuntimeObject* L_13 = ___collection0;\n\t\tNullCheck((RuntimeObject*)L_13);\n\t\tRuntimeObject* L_14;\n\t\tL_14 = InterfaceFuncInvoker0< RuntimeObject* >::Invoke(0 /* System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable`1<kcp2k.Kcp/AckItem>::GetEnumerator() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 3), (RuntimeObject*)L_13);\n\t\tV_2 = (RuntimeObject*)L_14;\n\t}\n\nIL_0069:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tgoto IL_0077;\n\t\t}\n\nIL_006b:\n\t\t{\n\t\t\tRuntimeObject* L_15 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_15);\n\t\t\tAckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  L_16;\n\t\t\tL_16 = InterfaceFuncInvoker0< AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475  >::Invoke(0 /* T System.Collections.Generic.IEnumerator`1<kcp2k.Kcp/AckItem>::get_Current() */, IL2CPP_RGCTX_DATA(method->klass->rgctx_data, 4), (RuntimeObject*)L_15);\n\t\t\tNullCheck((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this);\n\t\t\t((  void (*) (List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *, AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 , const RuntimeMethod*))IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5)->methodPointer)((List_1_t2DB9B7314D41FB8C9F99391E55195E3865AB0C35 *)__this, (AckItem_tD2ED0619A5C91987CDF01FD4C960708EF1524475 )L_16, /*hidden argument*/IL2CPP_RGCTX_METHOD_INFO(method->klass->rgctx_data, 5));\n\t\t}\n\nIL_0077:\n\t\t{\n\t\t\tRuntimeObject* L_17 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_17);\n\t\t\tbool L_18;\n\t\t\tL_18 = InterfaceFuncInvoker0< bool >::Invoke(0 /* System.Boolean System.Collections.IEnumerator::MoveNext() */, IEnumerator_t5956F3AFB7ECF1117E3BC5890E7FC7B7F7A04105_il2cpp_TypeInfo_var, (RuntimeObject*)L_17);\n\t\t\tif (L_18)\n\t\t\t{\n\t\t\t\tgoto IL_006b;\n\t\t\t}\n\t\t}\n\nIL_007f:\n\t\t{\n\t\t\tIL2CPP_LEAVE(0x8B, FINALLY_0081);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_0081;\n\t}\n\nFINALLY_0081:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tRuntimeObject* L_19 = V_2;\n\t\t\tif (!L_19)\n\t\t\t{\n\t\t\t\tgoto IL_008a;\n\t\t\t}\n\t\t}\n\nIL_0084:\n\t\t{\n\t\t\tRuntimeObject* L_20 = V_2;\n\t\t\tNullCheck((RuntimeObject*)L_20);\n\t\t\tInterfaceActionInvoker0::Invoke(0 /* System.Void System.IDisposable::Dispose() */, IDisposable_t099785737FC6A1E3699919A94109383715A8D807_il2cpp_TypeInfo_var, (RuntimeObject*)L_20);\n\t\t}\n\nIL_008a:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(129)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(129)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x8B, IL_008b)\n\t}\n\nIL_008b:\n\t{\n\t\treturn;\n\t}\n}", "concepts": ["generic programming", "C# List<T> class"], "parsing_result": [{"instruction": "Write a C++ function `dynamicSort` that sorts a C# `List<T>` object using the `System.Predicate` generic delegate."}, {"instruction": "Write a C++ function `cloneVector` that returns a copy of a vector of integers."}, {"instruction": "Write a C++ function `removeDuplicates` that removes duplicate elements from a list of integers."}, {"instruction": "Write a C++ function `intersection` that returns the intersection of two vectors."}, {"instruction": "Write a C++ function `removeDuplicates` that returns a vector with duplicates removed."}, {"instruction": "Create a C# function `unique` that returns a list with duplicates removed."}, {"instruction": "Write a C# function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Write a C++ function `vectorUnion` that takes two vectors of type T as input and returns a new vector containing all unique elements."}, {"instruction": "Create a C++ function `findAllDuplicates` that returns a vector of all elements that occur more than once in a vector of integers."}, {"instruction": "Write a C# function `removeDuplicates` that returns a List<T> with duplicates removed."}, {"instruction": "Write a C++ function `removeDuplicates` that returns a generic list with duplicates removed."}, {"instruction": "Write a C++ function `printVector` that prints a vector of integers."}, {"instruction": "Create a C++ function `removeDuplicatesFromList` that removes all duplicates from a given `std::list<T>` of any type."}, {"instruction": "Implement a C++ function `replaceElements` that replaces each element in an array with the greatest element to the right of that element."}, {"instruction": "Write a C++ function `removeDuplicates` that returns a vector with duplicates removed using the C# List<T> class."}, {"instruction": "Create a C++ function `mergeSort` that sorts a list of integers using merge sort."}, {"instruction": "Write a C++ function `removeDuplicates` that returns a vector with duplicates removed."}, {"instruction": "Write a C++ function `removeDuplicatesGeneric` that returns a vector with duplicates removed."}, {"instruction": "Create a C++ function `removeDuplicates` that takes a C# List<T> and removes duplicates."}, {"instruction": "Write a C++ function `removeDuplicates` that returns a vector with duplicates removed."}, {"instruction": "Implement a C# function `removeDuplicates` that returns a `List<T>` with duplicates removed."}, {"instruction": "Write a C++ function `removeDuplicates` that returns an `std::list` with duplicates removed."}, {"instruction": "Write a C++ function `reverse` that reverses the elements of a vector."}, {"instruction": "Write a C++ function `countElements` that counts the number of occurrences of a given element in a vector."}, {"instruction": "Write a C++ function `mergeSort` that sorts a vector of integers using the merge sort algorithm."}, {"instruction": "Write a C++ function `reverseList` that reverses a List<T> object."}, {"instruction": "Write a C++ function `swap` that swaps two elements in a vector."}, {"instruction": "Write a C++ function `removeDuplicates` that removes all duplicates from a vector of integers."}, {"instruction": "Write a C++ function `removeDuplicates2` that returns a vector with duplicates removed using a generic class."}, {"instruction": "Write a C# function `removeDuplicates` that returns a list with duplicates removed."}, {"instruction": "Implement a C++ function `removeDuplicates` that uses the `List<T>` generic class to return a vector with duplicates removed."}, {"instruction": "Write a C# function `removeDuplicates` that returns a list without duplicates."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: bitwise operations, integer representation\n\n### Task", "fingerprint": null, "content": {"code": "bool testUnpacker(){\r\n\tuint32 inst = 0xdeadface;\r\n\tsize_t unpackerSize = sizeof(Instruction::UNPACKER);\r\n\t//std::cout << \"sizeof(Instruction::UNPACKER) = \" << unpackerSize << endl;\r\n\tif(unpackerSize != sizeof(uint32)){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tInstruction::UNPACKER &inst2= reinterpret_cast<Instruction::UNPACKER &>(inst);\r\n\r\n\tif(inst2.i.op != inst2.j.op){\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}", "docstring": "//char *buffer = new char[length];\r", "function_name": "readFile"}, "id": 3, "seed": "bool testUnpacker(){\r\n\tuint32 inst = 0xdeadface;\r\n\tsize_t unpackerSize = sizeof(Instruction::UNPACKER);\r\n\t//std::cout << \"sizeof(Instruction::UNPACKER) = \" << unpackerSize << endl;\r\n\tif(unpackerSize != sizeof(uint32)){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tInstruction::UNPACKER &inst2= reinterpret_cast<Instruction::UNPACKER &>(inst);\r\n\r\n\tif(inst2.i.op != inst2.j.op){\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}", "concepts": ["bitwise operations", "integer representation"], "parsing_result": [{"instruction": "Write a C++ function `isPrime` that determines if a given integer is a prime number."}, {"instruction": "Write a C++ function `isPowerOfTwo` that returns true if a given integer is a power of two."}, {"instruction": "Write a C++ function `reverseBits` that reverses the bits of a given integer."}, {"instruction": "Write a C++ function `decimalToBinary` that converts a decimal integer to its binary representation."}, {"instruction": "Write a C++ function `decimalToBinary` that converts a non-negative integer to its binary representation."}, {"instruction": "Write a C++ function `toBinary` that converts an integer to a binary string."}, {"instruction": "Write a C++ function `sumDigits` that returns the sum of the digits of an integer."}, {"instruction": "Write a C++ function `even` that determines if an integer is even."}, {"instruction": "Write a C++ function `isPrime` that returns true if an integer is prime."}, {"instruction": "Write a C++ function `isPowerOf2` that determines if a given integer is a power of 2."}, {"instruction": "Write a C++ function `sumOdd` that computes the sum of odd integers in an array."}, {"instruction": "Write a C++ function `parity` that returns the parity of an integer."}, {"instruction": "Write a C++ function `countBits` that returns the number of bits in an integer."}, {"instruction": "Create a C++ function `intToBinary` that converts an integer to a binary string."}, {"instruction": "Write a C++ function `evenOddCheck` that returns true if a given integer is even or odd."}, {"instruction": "Write a C++ function `clearBits` that sets the rightmost n bits to 0 in a given integer."}, {"instruction": "Write a C++ function `parity` that returns the parity of an integer."}, {"instruction": "Write a C++ function `longestSequence` that finds the longest sequence in an array of integers."}, {"instruction": "Write a C++ function `toHex` that converts a non-negative integer to a hexadecimal string."}, {"instruction": "Write a C++ function `swap` that swaps two integers without using extra memory."}, {"instruction": "Write a C++ function `divisibleBy11` that returns true if a given integer is divisible by 11."}, {"instruction": "Create a C++ function `isBitSet` that returns true if the bit at index `i` of an integer `x` is set, and false otherwise."}, {"instruction": "Write a C++ function `zero` that returns a 32-bit integer with all bits set to zero."}, {"instruction": "Create a C++ function `bitFlipper` that flips the bits in an integer from 0 to 1 and vice versa."}, {"instruction": "Write a C++ function `isPrime` that returns true if a given non-negative integer is prime."}, {"instruction": "Write a C++ function `intToBinaryString` that converts an integer into a binary string."}, {"instruction": "Write a C++ function `isEven` that returns true if an integer is even."}, {"instruction": "Write a C++ function `isPrime` that returns true if a non-negative integer is prime."}, {"instruction": "Write a C++ function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a C++ function `isPalindromicPrime` that returns true if a given integer is a palindromic prime.\n/cpp/arrays/find_min_in_array.cpp\n#include <iostream>\n#include <vector>\n\nint findMin(const std::vector<int>& v);\n\nint main() {\n  std::vector<int> v = { 1, 2, 3, 4, 5, 6, 7 };\n  int minimum = findMin(v);\n  std::cout << \"Minimum in array: \" << minimum << std::endl;\n}\n\nint findMin(const std::vector<int>& v) {\n  int min = v[0];\n  for(int i = 1; i < v.size(); i++) {\n    if(v[i] < min) {\n      min = v[i];\n    }\n  }\n  return min;\n}\n/python/functions/is_palindrome.py\nfrom typing import List\n\ndef isPalindrome(word : str) -> bool:\n    return word == word[::-1]\n\ndef main():\n    print(isPalindrome(\"racecar\"))\n    print(isPalindrome(\"race\"))\n    print(isPalindrome(\"racecars\"))\n\nif __name__ == \"__main__\":\n    main()\n/cpp/array/sum_of_even_and_odd_indices.cpp\n//\n// Created by  on 13/01/2021.\n//\n\n#include <iostream>\n#include <vector>\n#include <array>\n\nusing namespace std;\n\nint main() {\n\n    int sum_even = 0;\n    int sum_odd = 0;\n\n    for(int i = 0; i < arr.size(); i++){\n        if(i % 2 == 0) // even\n            sum_even += arr[i];\n        else  // odd\n            sum_odd += arr[i];\n    }\n\n    cout << \"Sum of even indices: \" << sum_even << endl;\n    cout << \"Sum of odd indices: \" << sum_odd << endl;\n\n}/cpp/arrays/find_max_in_array.cpp\n#include <iostream>\n#include <vector>\n\nint findMax(const std::vector<int>& v);\n\nint main() {\n  std::vector<int> v = { 1, 2, 3, 4, 5, 6, 7 };\n  int maximum = findMax(v);\n  std::cout << \"Maximum in array: \" << maximum << std::endl;\n}\n\nint findMax(const std::vector<int>& v) {\n  int max = v[0];\n  for(int i = 1; i < v.size(); i++) {\n    if(v[i] > max) {\n      max = v[i];\n    }\n  }\n  return max;\n}\n/cpp/arrays/sum_of_array.cpp\n#include <iostream>\n#include <vector>\n\nint sum(const std::vector<int>& v);\n\nint main() {\n  std::vector<int> v = { 1, 2, 3, 4, 5, 6, 7 };\n  int sum = sum(v);\n  std::cout << \"Sum of array: \" << sum << std::endl;\n}\n\nint sum(const std::vector<int>& v) {\n  int total = 0;\n  for(int i = 0; i < v.size(); i++) {\n    total += v[i];\n  }\n  return total;\n}\n/cpp/strings/count_words.cpp\n#include <iostream>\n#include <string>\n#include <sstream>\n\n// Count the number of words in a string\nvoid countWords(const std::string& str);\n\nint main() {\n  std::string str = \"This is a sentence with five words.\";\n  countWords(str);\n}\n\nvoid countWords(const std::string& str) {\n  std::istringstream ss(str);\n  int count = 0;\n  std::string word;\n  while(ss >> word) {\n    count++;\n  }\n  std::cout << \"Number of words: \" << count << std::endl;\n}\n/cpp/strings/to_binary.cpp\n#include <iostream>\n#include <string>\n\n// Convert a non-negative integer to a binary string\nstd::string toBinary(int num);\n\nint main() {\n  for(int i = 0; i < 10; i++) {\n    std::string binary = toBinary(i);\n    std::cout << i << \" - \" << binary << std::endl;\n  }\n}\n\nstd::string toBinary(int num) {\n  std::string binary = \"\";\n  while(num) {\n    binary = std::to_string(num % 2) + binary;\n    num /= 2;\n  }\n  return binary;\n}\n/cpp/strings/sum_digits.cpp\n#include <iostream>\n#include <string>\n\n// Count the number of digits in an integer\nint countDigits(int num);\n\nint main() {\n  for(int i = 0; i < 10; i++) {\n    std::cout << i << \" - \" << countDigits(i) << std::endl;\n  }\n}\n\nint countDigits(int num) {\n  int count = 0;\n  while(num) {\n    num /= 10;\n    count++;\n  }\n  return count;\n}\n/cpp/strings/sum_words.cpp\n#include <iostream>\n#include <string>\n\n// Count the number of words in a string\nint countWords(const std::string& str);\n\nint main() {\n  std::string str = \"This is a sentence with five words.\";\n  int count = countWords(str);\n  std::cout << \"Number of words: \" << count << std::endl;\n}\n\nint countWords(const std::string& str) {\n  int count = 0;\n  std::string word;\n  std::istringstream ss(str);\n  while(ss >> word) {\n    count++;\n  }\n  return count;\n}"}, {"instruction": "Write a C++ function `findMissingNumber` that returns the missing number in an array of length n+1 consisting of the numbers 1, 2, 3, ..., n."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: arithmetic conversion, temperature formulas\n\n### Task\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: hard\nconcepts: generic programming, list traversal, map, return value, STL map\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_ICollection_CopyTo_mE384ED5CFB72BD40E4ED9118312BBCCA784A85A8_gshared (List_1_t4172DDD081E8C31E82629AD17BC2912ECE329CCD * __this, RuntimeArray * ___array0, int32_t ___arrayIndex1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeArray * L_0 = ___array0;\n\t\tif (!L_0)\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tRuntimeArray * L_1 = ___array0;\n\t\tNullCheck((RuntimeArray *)L_1);\n\t\tint32_t L_2;\n\t\tL_2 = Array_get_Rank_mE9E4804EA433AA2265F9D9CA3B1B5082ECD757D0((RuntimeArray *)L_1, /*hidden argument*/NULL);\n\t\tif ((((int32_t)L_2) == ((int32_t)1)))\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)7, /*hidden argument*/NULL);\n\t}\n\nIL_0012:\n\t{\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tCachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E* L_3 = (CachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E*)__this->get__items_1();\n\t\tRuntimeArray * L_4 = ___array0;\n\t\tint32_t L_5 = ___arrayIndex1;\n\t\tint32_t L_6 = (int32_t)__this->get__size_2();\n\t\tArray_Copy_m3F127FFB5149532135043FFE285F9177C80CB877((RuntimeArray *)(RuntimeArray *)L_3, (int32_t)0, (RuntimeArray *)L_4, (int32_t)L_5, (int32_t)L_6, /*hidden argument*/NULL);\n\t\tgoto IL_0033;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&ArrayTypeMismatchException_tFD610FDA00012564CB75AFCA3A489F29CF628784_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0029;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0029:\n\t{ // begin catch(System.ArrayTypeMismatchException)\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)((int32_t)18), /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_0033;\n\t} // end catch (depth: 1)\n\nIL_0033:\n\t{\n\t\treturn;\n\t}\n}", "docstring": "// end catch (depth: 1)", "function_name": "List_1_System_Collections_IList_Add_mB11B0BE086058B75AABAFE706CC3AAA0012259E8_gshared"}, "id": 4, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void List_1_System_Collections_ICollection_CopyTo_mE384ED5CFB72BD40E4ED9118312BBCCA784A85A8_gshared (List_1_t4172DDD081E8C31E82629AD17BC2912ECE329CCD * __this, RuntimeArray * ___array0, int32_t ___arrayIndex1, const RuntimeMethod* method)\n{\n\til2cpp::utils::ExceptionSupportStack<RuntimeObject*, 1> __active_exceptions;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 2> __leave_targets;\n\t{\n\t\tRuntimeArray * L_0 = ___array0;\n\t\tif (!L_0)\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tRuntimeArray * L_1 = ___array0;\n\t\tNullCheck((RuntimeArray *)L_1);\n\t\tint32_t L_2;\n\t\tL_2 = Array_get_Rank_mE9E4804EA433AA2265F9D9CA3B1B5082ECD757D0((RuntimeArray *)L_1, /*hidden argument*/NULL);\n\t\tif ((((int32_t)L_2) == ((int32_t)1)))\n\t\t{\n\t\t\tgoto IL_0012;\n\t\t}\n\t}\n\t{\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)7, /*hidden argument*/NULL);\n\t}\n\nIL_0012:\n\t{\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tCachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E* L_3 = (CachedShadowRecordU5BU5D_tFB0A186B518D32E07B7026306DEA9081F967962E*)__this->get__items_1();\n\t\tRuntimeArray * L_4 = ___array0;\n\t\tint32_t L_5 = ___arrayIndex1;\n\t\tint32_t L_6 = (int32_t)__this->get__size_2();\n\t\tArray_Copy_m3F127FFB5149532135043FFE285F9177C80CB877((RuntimeArray *)(RuntimeArray *)L_3, (int32_t)0, (RuntimeArray *)L_4, (int32_t)L_5, (int32_t)L_6, /*hidden argument*/NULL);\n\t\tgoto IL_0033;\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\tif(il2cpp_codegen_class_is_assignable_from (((RuntimeClass*)il2cpp_codegen_initialize_runtime_metadata_inline((uintptr_t*)&ArrayTypeMismatchException_tFD610FDA00012564CB75AFCA3A489F29CF628784_il2cpp_TypeInfo_var)), il2cpp_codegen_object_class(e.ex)))\n\t\t{\n\t\t\tIL2CPP_PUSH_ACTIVE_EXCEPTION(e.ex);\n\t\t\tgoto CATCH_0029;\n\t\t}\n\t\tthrow e;\n\t}\n\nCATCH_0029:\n\t{ // begin catch(System.ArrayTypeMismatchException)\n\t\tThrowHelper_ThrowArgumentException_m49831D19CFA6026A62C5D52FA7A8E162EBD4DD6A((int32_t)((int32_t)18), /*hidden argument*/NULL);\n\t\tIL2CPP_POP_ACTIVE_EXCEPTION();\n\t\tgoto IL_0033;\n\t} // end catch (depth: 1)\n\nIL_0033:\n\t{\n\t\treturn;\n\t}\n}", "concepts": ["generic programming", "list traversal", "map", "return value", "STL map"], "parsing_result": [{"instruction": "Write a C++ function `frequency` that returns a map of the elements and the number of times they appear in the vector."}, {"instruction": "Write a C++ function `combineMap` that returns a map containing the union of two maps."}, {"instruction": "Write a C++ function `maxValue` that returns the maximum value in a C++ map."}, {"instruction": "Create a C++ function `topK` that returns the top K most frequent words appearing in a sentence."}, {"instruction": "Create a C++ function `sumMapValues` that returns the sum of all values in a map of integers."}, {"instruction": "Write a C++ function `findMode` that returns the mode of a vector."}, {"instruction": "Given a vector of integers, return a vector containing all the elements that appear at least twice."}, {"instruction": "Create a C++ function `mapProduct` that returns the product of all elements in a map."}, {"instruction": "Write a C++ function `dictionarySort` that sorts a vector of strings based on the alphabetical order of their first characters."}, {"instruction": "Write a C++ function `mostCommonFrequency` that returns the value with the highest frequency in a map."}, {"instruction": "Write a C++ function `map` that takes a function, `f`, and a vector of integers as parameters. For each element, `f` is called to compute a new value, and then the new value is placed into a new vector."}, {"instruction": "Write a C++ function `combineLists` that merges two lists of integers into a set."}, {"instruction": "Write a C++ function `countWords` that returns the number of unique words in a string."}, {"instruction": "Create a C++ function `sum` that returns the sum of the elements in a vector of integers."}, {"instruction": "Write a C++ function `wordCount` that returns a map of the number of times each word occurs in a string."}, {"instruction": "Write a C++ function `findDuplicates` that returns a vector of duplicate elements from a vector of integers without using a set."}, {"instruction": "Create a C++ function `findInMap` that takes a map and a key, and returns the associated value if the key exists, or the default value otherwise."}, {"instruction": "Write a C++ function `mergeSorted` that returns a vector of integers containing the elements of two sorted vectors."}, {"instruction": "Create a C++ function `wordCount` that returns a map of words in a string and their frequency."}, {"instruction": "Write a C++ function `printDictionary` that recursively prints a dictionary of strings."}, {"instruction": "Create a C++ function `findMaximum` that returns the maximum value in a list of `Pair` objects."}, {"instruction": "Create a C++ function `mostFrequent` that returns the most frequent element in a vector of integers."}, {"instruction": "Write a C++ function `findKey` that returns the key from a map that has the largest value."}, {"instruction": "Write a C++ function `reverseMap` that reverses a map."}, {"instruction": "Create a C++ function `printMapValues` that takes a map as input and prints the values in the map."}, {"instruction": "Write a C++ function `merge` that merges two sorted maps into one sorted map, while preserving the order of elements."}, {"instruction": "Create a C++ function `sumMapValues` that takes a map and returns the sum of the values."}, {"instruction": "Create a C++ function `findLongestWord` that returns the longest word in a sentence."}, {"instruction": "Write a C++ function `mergeSortedLists` that sorts a list of lists using a recursive mergesort algorithm."}, {"instruction": "Write a C++ function `sortMap` that returns a vector of key-value pairs from a map, sorted by key in ascending order."}, {"instruction": "Write a C++ function `wordFrequency` that returns a frequency map of words in a string."}, {"instruction": "Create a C++ function `findDuplicate` that returns the first duplicate value in a vector of integers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: C++\ndifficulty: easy\nconcepts: constant expressions, bit shifting, arithmetic\n\n### Task", "fingerprint": null, "content": {"code": "constexpr int foo(int a) {\n    return -a << 2; // cxx17-note {{left shift of negative value -10}} \\\n                    // ref-cxx17-note {{left shift of negative value -10}} \\\n                    // cxx17-note {{left shift of negative value -2}} \\\n                    // ref-cxx17-note {{left shift of negative value -2}}\n  }", "docstring": "// cxx17-warning {{shifting a negative signed value is undefined}} \\\n                    // ref-cxx17-warning {{shifting a negative signed value is undefined}} \\\n                    // cxx17-note {{left shift of negative value -1}} \\\n                    // ref-cxx17-note {{left shift of negative value -1}}", "function_name": "negativeShift"}, "id": 7, "seed": "constexpr int foo(int a) {\n    return -a << 2; // cxx17-note {{left shift of negative value -10}} \\\n                    // ref-cxx17-note {{left shift of negative value -10}} \\\n                    // cxx17-note {{left shift of negative value -2}} \\\n                    // ref-cxx17-note {{left shift of negative value -2}}\n  }", "concepts": ["constant expressions", "bit shifting", "arithmetic"], "parsing_result": [{"instruction": "Implement a C++ class `Fraction` that represents a fractional number."}, {"instruction": "Implement a C++ class `PowerfulInteger` that stores a value as a power of 2, and supports `add`, `subtract`, `multiply`, and `divide` operations."}, {"instruction": "Write a C++ class `Point` that represents a two-dimensional point in space. Your class should have a public method `distance` that returns the distance between two points."}, {"instruction": "Write a class, `PowerOfTwo`, that represents a positive integer that is a power of two. It should have a static constant member, `maxPower`, that stores the largest integer that is a power of two. It should have a constructor that accepts an integer, `n`, and initializes `value` to the integer if it is a power of two; otherwise, it should throw an exception. It should have a method, `isPowerOfTwo`, that returns true if `value` is a power of two."}, {"instruction": "Write a C++ class `BitManipulation` that includes a static method `whichBit` that returns the 0-indexed position of the most significant bit set in an unsigned integer."}, {"instruction": "Write a C++ class `Point` that represents an x-y coordinate, with methods to add, subtract, and calculate the distance between two points."}, {"instruction": "Write a C++ class `BitCounter` that returns the number of bits set to 1 in an integer."}, {"instruction": "Create a C++ class named `Point` that represents a two-dimensional point. The class must have the following members:\n- two private members of type `double`, named `x` and `y`, representing the x- and y-coordinates of the point\n- a public member function `distance`, which takes a second `Point` instance as a parameter and returns the Euclidean distance between the two points\n- a public member function `translate`, which takes a `Point` instance as a parameter and translates the current point by adding the x- and y-coordinates of the parameter to the corresponding x- and y-coordinates of the current point\n- a public member function `scale`, which takes a `double` as a parameter and scales the current point by multiplying its x- and y-coordinates by the parameter"}, {"instruction": "Implement a C++ class `BitSet` that represents a bit set in binary representation."}, {"instruction": "Create a C++ class `Binary` that represents a binary integer."}, {"instruction": "Write a C++ class `Binary` that implements binary arithmetic."}, {"instruction": "Implement a C++ class `Fraction` with operator overloading to support the following operations:\n- a fraction is equal to a fraction\n- a fraction is less than a fraction\n- a fraction is greater than a fraction\n- two fractions are added\n- two fractions are subtracted\n- two fractions are multiplied\n- two fractions are divided"}, {"instruction": "Write a C++ class `Complex` that implements a complex number with real and imaginary components."}, {"instruction": "Write a C++ class `BitString` that represents a bit string. The class should have the following functionality:\n- a constructor that initializes the bit string\n- a method `getLength` that returns the length of the bit string\n- a method `setBit` that sets the value of a single bit\n- a method `getBit` that returns the value of a single bit\n- a method `toString` that returns a string representation of the bit string, where 0 represents False, and 1 represents True"}, {"instruction": "Write a C++ class `BinaryCounter` that represents a binary counter. The class should have member functions `setCount`, `getCount`, and `incrementCount`. The `setCount` function takes an integer as its argument and sets the counter's count to the specified value. The `getCount` function returns the counter's current count as an integer. The `incrementCount` function increments the counter's count by 1."}, {"instruction": "Write a C++ class `BitVector` that contains a series of bits."}, {"instruction": "Write a C++ class `Fraction` with methods `add`, `subtract`, `multiply`, `divide` and `print` that implements arithmetic operations for fractions."}, {"instruction": "Write a class `Integer` that represents integers in binary (base 2). Implement the following member functions:\n\n- `Integer()`\n- `Integer(const std::string&)`\n- `Integer(int)`\n- `void print()`\n- `int toInteger()`\n- `bool isZero()`\n- `bool isOne()`\n- `bool isNegative()`\n- `bool isPositive()`\n- `bool equals(const Integer&)`\n- `bool notEquals(const Integer&)`\n- `bool greaterThan(const Integer&)`\n- `bool greaterThanEquals(const Integer&)`\n- `bool lessThan(const Integer&)`\n- `bool lessThanEquals(const Integer&)`\n- `Integer bitShiftLeft(int)`\n- `Integer bitShiftRight(int)`\n- `Integer add(const Integer&)`\n- `Integer subtract(const Integer&)`\n- `Integer multiply(const Integer&)`\n- `Integer divideBy(const Integer&)`\n- `Integer moduloBy(const Integer&)`\n- `Integer bitAnd(const Integer&)`\n- `Integer bitOr(const Integer&)`\n- `Integer bitXor(const Integer&)`\n- `Integer bitNot()`\n- `Integer notEquals(const Integer&)`"}, {"instruction": "Implement a C++ class `Fraction` that represents fractions. The class must be able to perform basic arithmetic operations on fractions represented in the form of numerator/denominator."}, {"instruction": "Implement a C++ class `BitShift` that can perform bit-shifting operations."}, {"instruction": "Create a C++ class `Sieve` that implements a simple Sieve of Eratosthenes algorithm."}, {"instruction": "Create a C++ class `Fraction` that represents a fraction."}, {"instruction": "Write a C++ class `BinarySearchTree` that implements a binary search tree."}, {"instruction": "Write a class `Arithmetic` that provides an interface for basic arithmetic operations."}, {"instruction": "Implement a C++ class `Fraction` that has an integer numerator and a non-zero integer denominator."}, {"instruction": "Write a C++ class `BinaryTree` that contains a root node and two child nodes. The class must provide basic operations for manipulation of the tree."}, {"instruction": "Create a C++ class `BinaryTree` that implements a binary tree. Your class must support the following operations:\n- `BinaryTree(int n)`: a binary tree that is an empty tree if `n` is negative, or a single node if `n` is 0 or 1, or a full tree of height 2 if `n` is 2 or 3, and so on\n- `BinaryTree(int n, int k, int l)`: a binary tree that is a full tree if `n` is 2 or 3, and so on, with left child `k` and right child `l`\n- `void insert(int k)`: inserts a node with value `k` into the tree\n- `vector<int> inorder()`: return a vector of all values in the tree in in-order traversal order"}, {"instruction": "Write a C++ class `Fraction` that represents a fraction, with the following operations:\n- `add`\n- `subtract`\n- `multiply`\n- `divide`\n- `getDecimal`"}, {"instruction": "Implement a class `Fraction` that stores a fraction. The class should support the following operations:\n\n- default constructor (takes no arguments and initializes the fraction to 0)\n- constructor that takes a single integer argument and initializes the fraction to that integer (e.g., Fraction a(5); creates a fraction with the value 5/1)\n- constructor that takes two integer arguments and initializes the fraction to that numerator/denominator (e.g., Fraction a(2, 3); creates a fraction with the value 2/3)\n- `int getNumerator()` and `int getDenominator()` methods that return the numerator and denominator of the fraction, respectively\n- `void setNumerator(int)`, `void setDenominator(int)`, and `void set(int, int)` methods that set the numerator, denominator, and fraction to that numerator/denominator respectively\n- `void reduce()` method that reduces the fraction\n- `void multiply(Fraction)` method that multiplies the fraction by another fraction\n- `bool operator==(Fraction)` method that compares the fraction to another fraction for equality\n- `bool operator<(Fraction)` method that compares the fraction to another fraction for less than\n- `Fraction operator*(Fraction)` method that returns the product of the two fractions"}, {"instruction": "Create a C++ class `Fraction` that models a rational number and includes functions to add, subtract, multiply, and divide two `Fraction` objects."}, {"instruction": "Implement a C++ `Fraction` class that represents a fraction with integer numerator and denominator.\n/cpp/tasks/palindrome/palindrome.cpp\n#include <string>\n\nbool isPalindrome(std::string str) {\n    int i = 0;\n    int j = str.length() - 1;\n    while (i < j) {\n        while (!std::isalnum(str[i])) {\n            i++;\n        }\n        while (!std::isalnum(str[j])) {\n            j--;\n        }\n        if (std::tolower(str[i++]) != std::tolower(str[j--])) {\n            return false;\n        }\n    }\n    return true;\n}\n/cpp/tasks/count-digits/count-digits.cpp\nint countDigits(int n) {\n    if (n < 0) {\n        n = -n;\n    }\n    int count = 0;\n    while (n) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n/cpp/tasks/power/power.cpp\ndouble power(double base, int exp) {\n    if (exp == 0) {\n        return 1;\n    }\n    double result = base;\n    for (int i = 0; i < exp - 1; i++) {\n        result *= base;\n    }\n    return result;\n}\n/cpp/tasks/find-common/find-common.cpp\n#include <map>\n#include <vector>\n\nstd::vector<int> findCommon(std::vector<int>& a, std::vector<int>& b) {\n    std::map<int, int> freq;\n    for (int i = 0; i < a.size(); i++) {\n        freq[a[i]]++;\n    }\n    std::vector<int> result;\n    for (int i = 0; i < b.size(); i++) {\n        if (freq.find(b[i]) != freq.end()) {\n            result.push_back(b[i]);\n            freq[b[i]]--;\n            if (freq[b[i]] == 0) {\n                freq.erase(b[i]);\n            }\n        }\n    }\n    return result;\n}\n/cpp/tasks/sum-vector/sum-vector.cpp\nint sumVector(std::vector<int>& v) {\n    int sum = 0;\n    for (int n : v) {\n        sum += n;\n    }\n    return sum;\n}\n/cpp/tasks/is-palindrome/is-palindrome.cpp\nbool isPalindrome(std::string str) {\n    int i = 0;\n    int j = str.length() - 1;\n    while (i < j) {\n        while (!std::isalnum(str[i])) {\n            i++;\n        }\n        while (!std::isalnum(str[j])) {\n            j--;\n        }\n        if (std::tolower(str[i++]) != std::tolower(str[j--])) {\n            return false;\n        }\n    }\n    return true;\n}\n/cpp/tasks/find-common/find-common.md\n# Find common elements\n## Problem\nGiven two vectors, find and return a vector containing all the common elements of the two vectors."}, {"instruction": "Write a C++ class `Fraction` that implements basic arithmetic operations on fractional numbers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string sorting, equality comparison, STL sort\n\n### Task\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: boolean state, debouncing, button presses\n\n### Task", "fingerprint": null, "content": {"code": "boolean isButtonPressed(void) {\n  // read the state of the switch into a local variable:\n  int reading = digitalRead(buttonPin);\n\n  // check to see if you just pressed the button \n  // (i.e. the input went from LOW to HIGH),  and you've waited \n  // long enough since the last press to ignore any noise:  \n\n  // If the switch changed, due to noise or pressing:\n  if (reading != lastButtonState) {\n    // reset the debouncing timer\n    lastDebounceTime = millis();\n  } \n  \n  if ((millis() - lastDebounceTime) > debounceDelay) {\n    // whatever the reading is at, it's been there for longer\n    // than the debounce delay, so take it as the actual current state:\n\n    // if the button state has changed:\n    if (reading != buttonState) {\n      buttonState = reading;\n\n      // only toggle the LED if the new button state is HIGH\n      if (buttonState == HIGH) {\n        lastButtonState = reading;\n        setRegisterPin(LCD_BTN, HIGH);\n        return true;\n      }else{\n        setRegisterPin(LCD_BTN, LOW);\n      }\n    }\n  }\n\n  // save the reading.  Next time through the loop,\n  // it'll be the lastButtonState:\n  lastButtonState = reading;\n  return false;\n}", "docstring": "//Serial.println(\" Fahrenheit\");", "function_name": "getTemp"}, "id": 14, "seed": "boolean isButtonPressed(void) {\n  // read the state of the switch into a local variable:\n  int reading = digitalRead(buttonPin);\n\n  // check to see if you just pressed the button \n  // (i.e. the input went from LOW to HIGH),  and you've waited \n  // long enough since the last press to ignore any noise:  \n\n  // If the switch changed, due to noise or pressing:\n  if (reading != lastButtonState) {\n    // reset the debouncing timer\n    lastDebounceTime = millis();\n  } \n  \n  if ((millis() - lastDebounceTime) > debounceDelay) {\n    // whatever the reading is at, it's been there for longer\n    // than the debounce delay, so take it as the actual current state:\n\n    // if the button state has changed:\n    if (reading != buttonState) {\n      buttonState = reading;\n\n      // only toggle the LED if the new button state is HIGH\n      if (buttonState == HIGH) {\n        lastButtonState = reading;\n        setRegisterPin(LCD_BTN, HIGH);\n        return true;\n      }else{\n        setRegisterPin(LCD_BTN, LOW);\n      }\n    }\n  }\n\n  // save the reading.  Next time through the loop,\n  // it'll be the lastButtonState:\n  lastButtonState = reading;\n  return false;\n}", "concepts": ["boolean state", "debouncing", "button presses"], "parsing_result": [{"instruction": "Create a C++ function `debounce` that debounces button presses."}, {"instruction": "Create a C++ function `isButtonPressed` that returns true if a button is pressed."}, {"instruction": "Write a C++ function `debounce` that takes a boolean state and a number of button presses and returns true if and only if the state has been changed from false to true exactly once and only if the number of button presses is greater than or equal to the number of button presses required to trigger the state change."}, {"instruction": "Create a C++ function `isButtonPressed` that returns true if a button is pressed."}, {"instruction": "Create a C++ function `pressButton` that returns true if the button is pressed and false if it is not."}, {"instruction": "Create a C++ function `isButtonPressed` that takes a millisecond count and returns true if the button has been pressed at least once within that time."}, {"instruction": "Create a C++ function `button` that takes a boolean state and a button press, and returns a new boolean state."}, {"instruction": "Create a C++ function `debounceButton` that takes boolean inputs representing button presses and returns only the onset of a button press, even if the button is held down."}, {"instruction": "Create a C++ function `debouncePress` that returns true if the given button press has been detected as a press. The debounce time is 0.1 seconds."}, {"instruction": "Create a C++ function `isButtonPressed` that takes a vector of boolean states and returns the most frequent state."}, {"instruction": "Create a C++ function `isButtonPressed` that returns true if a button has been pressed for a specified duration."}, {"instruction": "Create a C++ function `debounce` that takes a boolean state and a number of button presses, and returns the number of button presses after the debouncing window (300 ms) has passed."}, {"instruction": "Create a function `debounce` that takes an event handler and returns a debounced version of the event handler, that will only be called after a certain amount of time has passed."}, {"instruction": "Create a C++ function `countButtonPresses` that counts the number of button presses in a sequence of button presses."}, {"instruction": "Create a C++ function `debounce` that returns true if a button has been pressed within a 1 second time window."}, {"instruction": "Create a C++ function `buttonCheck` that returns true if a button is pressed."}, {"instruction": "Write a C++ function `isButtonPressed` that returns true if a given key is pressed."}, {"instruction": "Create a C++ function `buttonPress` that, when given a button press, returns the state of the button."}, {"instruction": "Create a C++ function `debounce` that takes a button press from a user and returns true if the button was pressed at least twice within a one second interval; otherwise, returns false."}, {"instruction": "Create a C++ function `handleButtonPresses` that debounces button presses, where the function only returns true once the button is pressed for 400 milliseconds."}, {"instruction": "Create a C++ function `debounce` that takes a boolean and a button press in milliseconds, and returns true if the button was pressed in the last n milliseconds."}, {"instruction": "Create a C++ function `isDebounced` that will return true for three consecutive button presses."}, {"instruction": "Create a C++ function `debounce` that takes a button input and returns a debounce signal for it."}, {"instruction": "Create a C++ function `isButtonPressed` that returns true if the user has pressed a button in the last 100 ms."}, {"instruction": "Write a C++ function `buttonDebounce` that debounces a button provided with a debouncing time in milliseconds."}, {"instruction": "Create a C++ function `buttonDebounce` that implements debouncing of button presses."}, {"instruction": "Create a C++ function `debounce` that debounces (turns an as-fast-as-possible on/off signal into a slower on/off signal) a button press."}, {"instruction": "Create a C++ function `debounce` that takes an integer and a `bool` as inputs. The function should return a `bool` which is `false` when the integer is 0 and `true` when the integer is not 0. The function should only return `true` if the button is pressed at most once in the last 100ms."}, {"instruction": "Create a C++ function `isButtonPressed` that takes a button press and returns a boolean confirmation if the button is pressed."}, {"instruction": "Write a C++ function `debounce` that returns a boolean for whether a button was pressed."}, {"instruction": "Create a C++ function `buttonPress` that takes a string of button presses and returns the time between them as an integer."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: C++\ndifficulty: easy\nconcepts: locking, garbage collection, finalizer\n/Test-IOLab/Assets/Samples/Scripts/Test.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Test : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            Debug.Log(i);\n        }\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}/Test-IOLab/Assets/Samples/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\", menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}\n/Test-IOLab/Assets/Samples/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0, tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type, value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensAPI.cs\n\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n[CreateAssetMenu(fileName = \"Singleton\", menuName = \"TokensAPI\")]\npublic class TokensAPI : ScriptableObject\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensManager.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class TokensManager : MonoBehaviour\n{\n    public Text tokenType, tokenValue;\n\n    private void Start()\n    {\n        StartCoroutine(TokensAPI.Instance.GetToken());\n        StartCoroutine(TokensAPI.Instance.SetToken());\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            StartCoroutine(TokensAPI.Instance.GetToken());\n        }\n\n        if (Input.GetKeyDown(KeyCode.S))\n        {\n            StartCoroutine(TokensAPI.Instance.SetToken());\n        }\n    }\n}\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_METHOD_ATTR void PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87 (PairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tbool V_3 = false;\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\t// lock(this) {\n\t\tV_0 = __this;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0005:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_0 = V_0;\n\t\t\tMonitor_Enter_mC5B353DD83A0B0155DF6FBCC4DF5A580C25534C5(L_0, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\t\t// if (swigCPtr.Handle != global::System.IntPtr.Zero) {\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A * L_1 = __this->get_address_of_swigCPtr_2();\n\t\t\tintptr_t L_2 = HandleRef_get_Handle_m095712F299EA36BF75975343C726FA160EE38277((HandleRef_t876E76124F400D12395BF61D562162AB6822204A *)L_1, /*hidden argument*/NULL);\n\t\t\tbool L_3 = IntPtr_op_Inequality_mB4886A806009EA825EFCC60CD2A7F6EB8E273A61((intptr_t)L_2, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\tV_2 = L_3;\n\t\t\tbool L_4 = V_2;\n\t\t\tif (!L_4)\n\t\t\t{\n\t\t\t\tgoto IL_005a;\n\t\t\t}\n\t\t}\n\nIL_0028:\n\t\t{\n\t\t\t// if (swigCMemOwn) {\n\t\t\tbool L_5 = ((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->get_swigCMemOwn_1();\n\t\t\tV_3 = L_5;\n\t\t\tbool L_6 = V_3;\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0048;\n\t\t\t}\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\t// swigCMemOwn = false;\n\t\t\t((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->set_swigCMemOwn_1((bool)0);\n\t\t\t// SharingClientPINVOKE.delete_PairingListener(swigCPtr);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_7 = __this->get_swigCPtr_2();\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(SharingClientPINVOKE_tFF4292D2BC5A9EB345172E6D4F8BE281B3799A1F_il2cpp_TypeInfo_var);\n\t\t\tSharingClientPINVOKE_delete_PairingListener_m3062D45600088FD3230AF5587AC8AB7A4C246B64(L_7, /*hidden argument*/NULL);\n\t\t}\n\nIL_0048:\n\t\t{\n\t\t\t// swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_8;\n\t\t\tmemset(&L_8, 0, sizeof(L_8));\n\t\t\tHandleRef__ctor_mCD64E7F91766FE7602EE34A8CEEF6C1EF4C943BB((&L_8), NULL, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\t__this->set_swigCPtr_2(L_8);\n\t\t}\n\nIL_005a:\n\t\t{\n\t\t\t// global::System.GC.SuppressFinalize(this);\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(GC_tC1D7BD74E8F44ECCEF5CD2B5D84BFF9AAE02D01D_il2cpp_TypeInfo_var);\n\t\t\tGC_SuppressFinalize_m037319A9B95A5BA437E806DE592802225EE5B425(__this, /*hidden argument*/NULL);\n\t\t\t// base.Dispose();\n\t\t\tListener_Dispose_mF59F4962F238FD2A986747D0092EC14293296D30(__this, /*hidden argument*/NULL);\n\t\t\tIL2CPP_LEAVE(0x76, FINALLY_006b);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_006b;\n\t}\n\nFINALLY_006b:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_9 = V_1;\n\t\t\tif (!L_9)\n\t\t\t{\n\t\t\t\tgoto IL_0075;\n\t\t\t}\n\t\t}\n\nIL_006e:\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_10 = V_0;\n\t\t\tMonitor_Exit_m49A1E5356D984D0B934BB97A305E2E5E207225C2(L_10, /*hidden argument*/NULL);\n\t\t}\n\nIL_0075:\n\t\t{\n\t\t\tIL2CPP_RESET_LEAVE(0x76);\n\t\t\tIL2CPP_END_FINALLY(107)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(107)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x76, IL_0076)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t}\n\nIL_0076:\n\t{\n\t\t// }\n\t\treturn;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "PairingListener_Finalize_m82AB68AB825ECE83AA5351C4FBB3A5568D9D1B96"}, "id": 18, "seed": "IL2CPP_METHOD_ATTR void PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87 (PairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * __this, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_method (PairingListener_Dispose_mEAC62A7FCA1528D07EC6D329F96D82F76A3E9C87_MetadataUsageId);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tbool V_3 = false;\n\tException_t * __last_unhandled_exception = 0;\n\tNO_UNUSED_WARNING (__last_unhandled_exception);\n\tException_t * __exception_local = 0;\n\tNO_UNUSED_WARNING (__exception_local);\n\tint32_t __leave_target = -1;\n\tNO_UNUSED_WARNING (__leave_target);\n\t{\n\t\t// lock(this) {\n\t\tV_0 = __this;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0005:\n\ttry\n\t{ // begin try (depth: 1)\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_0 = V_0;\n\t\t\tMonitor_Enter_mC5B353DD83A0B0155DF6FBCC4DF5A580C25534C5(L_0, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\t\t// if (swigCPtr.Handle != global::System.IntPtr.Zero) {\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A * L_1 = __this->get_address_of_swigCPtr_2();\n\t\t\tintptr_t L_2 = HandleRef_get_Handle_m095712F299EA36BF75975343C726FA160EE38277((HandleRef_t876E76124F400D12395BF61D562162AB6822204A *)L_1, /*hidden argument*/NULL);\n\t\t\tbool L_3 = IntPtr_op_Inequality_mB4886A806009EA825EFCC60CD2A7F6EB8E273A61((intptr_t)L_2, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\tV_2 = L_3;\n\t\t\tbool L_4 = V_2;\n\t\t\tif (!L_4)\n\t\t\t{\n\t\t\t\tgoto IL_005a;\n\t\t\t}\n\t\t}\n\nIL_0028:\n\t\t{\n\t\t\t// if (swigCMemOwn) {\n\t\t\tbool L_5 = ((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->get_swigCMemOwn_1();\n\t\t\tV_3 = L_5;\n\t\t\tbool L_6 = V_3;\n\t\t\tif (!L_6)\n\t\t\t{\n\t\t\t\tgoto IL_0048;\n\t\t\t}\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\t// swigCMemOwn = false;\n\t\t\t((Listener_t3466CE06B278C6B8D8CC0655DF5EC0000BF962C2 *)__this)->set_swigCMemOwn_1((bool)0);\n\t\t\t// SharingClientPINVOKE.delete_PairingListener(swigCPtr);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_7 = __this->get_swigCPtr_2();\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(SharingClientPINVOKE_tFF4292D2BC5A9EB345172E6D4F8BE281B3799A1F_il2cpp_TypeInfo_var);\n\t\t\tSharingClientPINVOKE_delete_PairingListener_m3062D45600088FD3230AF5587AC8AB7A4C246B64(L_7, /*hidden argument*/NULL);\n\t\t}\n\nIL_0048:\n\t\t{\n\t\t\t// swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);\n\t\t\tHandleRef_t876E76124F400D12395BF61D562162AB6822204A  L_8;\n\t\t\tmemset(&L_8, 0, sizeof(L_8));\n\t\t\tHandleRef__ctor_mCD64E7F91766FE7602EE34A8CEEF6C1EF4C943BB((&L_8), NULL, (intptr_t)(0), /*hidden argument*/NULL);\n\t\t\t__this->set_swigCPtr_2(L_8);\n\t\t}\n\nIL_005a:\n\t\t{\n\t\t\t// global::System.GC.SuppressFinalize(this);\n\t\t\tIL2CPP_RUNTIME_CLASS_INIT(GC_tC1D7BD74E8F44ECCEF5CD2B5D84BFF9AAE02D01D_il2cpp_TypeInfo_var);\n\t\t\tGC_SuppressFinalize_m037319A9B95A5BA437E806DE592802225EE5B425(__this, /*hidden argument*/NULL);\n\t\t\t// base.Dispose();\n\t\t\tListener_Dispose_mF59F4962F238FD2A986747D0092EC14293296D30(__this, /*hidden argument*/NULL);\n\t\t\tIL2CPP_LEAVE(0x76, FINALLY_006b);\n\t\t}\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_006b;\n\t}\n\nFINALLY_006b:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_9 = V_1;\n\t\t\tif (!L_9)\n\t\t\t{\n\t\t\t\tgoto IL_0075;\n\t\t\t}\n\t\t}\n\nIL_006e:\n\t\t{\n\t\t\tPairingListener_tA9A6FFE27AE743A53F7ED4CB1E3FA257B968F694 * L_10 = V_0;\n\t\t\tMonitor_Exit_m49A1E5356D984D0B934BB97A305E2E5E207225C2(L_10, /*hidden argument*/NULL);\n\t\t}\n\nIL_0075:\n\t\t{\n\t\t\tIL2CPP_RESET_LEAVE(0x76);\n\t\t\tIL2CPP_END_FINALLY(107)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(107)\n\t{\n\t\tIL2CPP_JUMP_TBL(0x76, IL_0076)\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t}\n\nIL_0076:\n\t{\n\t\t// }\n\t\treturn;\n\t}\n}", "concepts": ["locking", "garbage collection", "finalizer\n/Test-IOLab/Assets/Samples/Scripts/Test.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Test : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            Debug.Log(i);\n        }\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}/Test-IOLab/Assets/Samples/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\"", "menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}\n/Test-IOLab/Assets/Samples/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0", "tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type", "value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensAPI.cs\n\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n[CreateAssetMenu(fileName = \"Singleton\"", "menuName = \"TokensAPI\")]\npublic class TokensAPI : ScriptableObject\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0", "tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0", "tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensManager.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class TokensManager : MonoBehaviour\n{\n    public Text tokenType", "tokenValue;\n\n    private void Start()\n    {\n        StartCoroutine(TokensAPI.Instance.GetToken());\n        StartCoroutine(TokensAPI.Instance.SetToken());\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            StartCoroutine(TokensAPI.Instance.GetToken());\n        }\n\n        if (Input.GetKeyDown(KeyCode.S))\n        {\n            StartCoroutine(TokensAPI.Instance.SetToken());\n        }\n    }\n}"], "parsing_result": [{"instruction": "Write a C# program that generates a set of tokens."}, {"instruction": "Write a C# function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a C# function `countWords` that counts the number of words in a given string."}, {"instruction": "Write a C# function `ToBinary` that converts a non-negative integer to a binary string."}, {"instruction": "Write a C# function `swap` that exchanges the values of two integers using pass-by-reference."}, {"instruction": "Implement the `Token` class to store a token's type and value. Create a class `TokensManager` that uses the `TokensAPI` class to retrieve tokens in the Update() function."}, {"instruction": "Write a Python function `gcd` that returns the greatest common divisor of two integers."}, {"instruction": "Write a C# function `swap` that exchanges the values of two integers using pass-by-reference."}, {"instruction": "Create a Unity project and implement a token system in it, as described above."}, {"instruction": "Create a visual representation of the design process of the tokens manager using the Design Tokens Lab."}, {"instruction": "Write a C# function `SayMyName` that prints your name."}, {"instruction": "Write a C++ program that computes the Fibonacci sequence."}, {"instruction": "Write a C# script that displays a token on screen."}, {"instruction": "Write a C# program that retrieves and displays a token from a shared resource."}, {"instruction": "Write a C# program that counts the number of tokens in the `TokenInfo` asset."}, {"instruction": "Write a C# program that creates an object of class `Token` and displays its type and value."}, {"instruction": "Write a C# function `getToken` that returns a random token from a list of tokens."}, {"instruction": "Write a C# program that prints out a token every time the T key is pressed."}, {"instruction": "Write a Python function `count_digits` that returns the number of digits in an integer.\n\n### Properties\ncategory: function implementation\nlanguage: Python\ndifficulty: easy\nconcepts: digit counting, loop control, integer division"}, {"instruction": "Write a C# function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a C++ function `toBinary` that converts a non-negative integer to a binary string.\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokensAPI : MonoBehaviour\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}"}, {"instruction": "Write a C# method `GetBMI` that returns the BMI of a given person.\n/Test-IOLab/Assets/Samples/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\nclass Token\n{\n    public string type;\n    public string value;\n}/Test-IOLab/Assets/Samples/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\", menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}\n/Test-IOLab/Assets/Samples/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0, tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type, value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensAPI.cs\n\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n[CreateAssetMenu(fileName = \"Singleton\", menuName = \"TokensAPI\")]\npublic class TokensAPI : ScriptableObject\n{\n    private Token[] tokenInfos;\n    private static TokensAPI instance;\n\n    public static TokensAPI Instance\n    {\n        get\n        {\n            if (instance == null)\n            {\n                instance = Resources.Load(\"TokensAPI\") as TokensAPI;\n                if (instance == null)\n                {\n                    instance = CreateInstance<TokensAPI>();\n                    instance.name = \"TokensAPI\";\n                }\n            }\n            return instance;\n        }\n    }\n\n    public void SetTokenInfos(Token[] tokens)\n    {\n        tokenInfos = tokens;\n    }\n\n    public IEnumerator GetToken()\n    {\n        Debug.Log(\"GetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n\n    public IEnumerator SetToken()\n    {\n        Debug.Log(\"SetToken\");\n\n        if (tokenInfos == null)\n        {\n            Debug.LogError(\"Token Info is not set.\");\n            yield break;\n        }\n\n        int index = Random.Range(0, tokenInfos.Length);\n        yield return new WaitForSeconds(1);\n        Debug.Log(tokenInfos[index].type + \" : \" + tokenInfos[index].value);\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/TokensManager.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class TokensManager : MonoBehaviour\n{\n    public Text tokenType, tokenValue;\n\n    private void Start()\n    {\n        StartCoroutine(TokensAPI.Instance.GetToken());\n        StartCoroutine(TokensAPI.Instance.SetToken());\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            StartCoroutine(TokensAPI.Instance.GetToken());\n        }\n\n        if (Input.GetKeyDown(KeyCode.S))\n        {\n            StartCoroutine(TokensAPI.Instance.SetToken());\n        }\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/Test.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Test : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            Debug.Log(i);\n        }\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n/Test-IOLab/Assets/Scripts/BMI.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class BMI : MonoBehaviour\n{\n    public InputField weight, height;\n    public Text result;\n\n    public void GetBMI()\n    {\n        if (weight.text.Length == 0 || height.text.Length == 0)\n        {\n            result.text = \"Please enter the value.\";\n        }\n\n        float weightNum = float.Parse(weight.text);\n        float heightNum = float.Parse(height.text);\n\n        float bmi = weightNum / heightNum / heightNum * 10000;\n\n        result.text = \"BMI : \" + bmi;\n    }\n}\n/Test-IOLab/Assets/Samples/Scripts/Calculator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class Calculator : MonoBehaviour\n{\n    // UI Components\n    public InputField inputField1, inputField2;\n    public Text resultText;\n\n    // API\n    public CalculatorAPI calculatorAPI;\n\n    // Input\n    private string input1, input2;\n\n    private void Start()\n    {\n        // Set default input.\n        input1 = \"0\";\n        input2 = \"0\";\n    }\n\n    private void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.P))\n        {\n            Add();\n        }\n        else if (Input.GetKeyDown(KeyCode.M))\n        {\n            Subtract();\n        }\n        else if (Input.GetKeyDown(KeyCode.D))\n        {\n            Multiply();\n        }\n        else if (Input.GetKeyDown(KeyCode.Q))\n        {\n            Divide();\n        }\n    }\n\n    private void Add()\n    {\n        input1 = inputField1.text;\n        input2 = inputField2.text;\n\n        // API\n        StartCoroutine(calculatorAPI.Add(input1, input2));\n    }\n\n    private void Subtract()\n    {\n        input1 = inputField1.text;\n        input2 = inputField2.text;\n\n        // API\n        StartCoroutine(calculatorAPI.Subtract(input1, input2));\n    }\n\n    private void Multiply()\n    {\n        input1 = inputField1.text;\n        input2 = inputField2.text;\n\n        // API\n        StartCoroutine(calculatorAPI.Multiply(input1, input2));\n    }\n\n    private void Divide()\n    {\n        input1 = inputField1.text;\n        input2 = inputField2.text;\n\n        // API\n        StartCoroutine(calculatorAPI.Divide(input1, input2));\n    }\n}"}, {"instruction": "Write a C# function `isPalindrome` that returns true if a given string is a palindrome."}, {"instruction": "Write a C# class `Test` with an empty `main` method."}, {"instruction": "Write a C# program that prints the numbers from 1 to 100."}, {"instruction": "Write a C# function `countWords` that counts the number of words in a given string."}, {"instruction": "Create a Unity project that generates a token and displays it on the screen."}, {"instruction": "Create a Unity application that shows a single text field that outputs a random token from a specified dictionary of tokens."}, {"instruction": "Write a C# function `getToken` that returns a random token from a given set.\n/IOLab/Assets/Scripts/Token.cs\n\ufeffusing System;\n\n[Serializable]\npublic class Token\n{\n    public string type;\n    public string value;\n}/IOLab/Assets/Scripts/TokenInfo.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"TokenInfo\", menuName = \"TokenInfo\")]\npublic class TokenInfo : ScriptableObject\n{\n    public Token[] tokenInfos;\n}/IOLab/Assets/Scripts/TokenGenerator.cs\n\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TokenGenerator : MonoBehaviour\n{\n    public int tokenNum;\n    public TokenInfo tokenInfo;\n\n    private void Awake()\n    {\n        Token[] tokens = new Token[tokenNum];\n\n        for (int i = 0; i < tokenNum; i++)\n        {\n            int index = Random.Range(0, tokenInfo.tokenInfos.Length);\n            tokens[i] = new Token()\n            {\n                type = tokenInfo.tokenInfos[index].type, value = tokenInfo.tokenInfos[index].value\n            };\n        }\n\n        TokensAPI.Instance.SetTokenInfos(tokens);\n    }\n}"}, {"instruction": "Write a Unity C# script that allows for the user to get and set tokens."}, {"instruction": "Write a C++ function `gcd` that returns the greatest common divisor of two integers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: string reversal, iterators, STL\n\n### Task\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: palindrome check, string comparison\n\n### Task\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: linear search, comparison, iteration\n\n### Task\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: vector traversal, type casting, arithmetic mean\n\n### Task\nCreate a C++ function `average` that calculates the average of integers in a vector.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: C++\ndifficulty: easy\nconcepts: static method, dynamic method, static method, object initialization, accessor, mutator, function call, class instantiation, member access\n\n### Task", "fingerprint": null, "content": {"code": "static bool js_cc_scene_Pass_resetTextures(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Pass *arg1 = (cc::scene::Pass *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Pass>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->resetTextures();\n    \n    \n    return true;\n}", "docstring": "// js_function", "function_name": "js_cc_scene_Pass_resetUBOs"}, "id": 19, "seed": "static bool js_cc_scene_Pass_resetTextures(se::State& s)\n{\n    // js_function\n    \n    CC_UNUSED bool ok = true;\n    const auto& args = s.args();\n    size_t argc = args.size();\n    cc::scene::Pass *arg1 = (cc::scene::Pass *) NULL ;\n    \n    if(argc != 0) {\n        SE_REPORT_ERROR(\"wrong number of arguments: %d, was expecting %d\", (int)argc, 0);\n        return false;\n    }\n    arg1 = SE_THIS_OBJECT<cc::scene::Pass>(s);\n    SE_PRECONDITION2(arg1, false, \"%s: Invalid Native Object\", __FUNCTION__); \n    (arg1)->resetTextures();\n    \n    \n    return true;\n}", "concepts": ["static method", "dynamic method", "static method", "object initialization", "accessor", "mutator", "function call", "class instantiation", "member access"], "parsing_result": [{"instruction": "Create a C++ class `Mean` that has a member variable `total` of type `int` and a member method `mean` that calculates the average of the values stored in the member variable."}, {"instruction": "Create a C++ class `Point` with a private variable `x` of type `double`. \nCreate a C++ function `distance` that is a static member function that computes the distance from a `Point` to an origin `(0, 0)`."}, {"instruction": "Create a C++ class `Account` with the following properties and behaviors:\n1. `amount` (a double) representing the current balance of the account\n2. a `deposit` method that adds to the account balance\n3. a `withdraw` method that subtracts from the account balance\n4. a `getAmount` method that returns the account balance"}, {"instruction": "Implement a C++ class `Date` that represents a date in a year. The class should have the following operations:\n- the constructor that initializes the data members to some arbitrary values (e.g., 1/1/2000)\n- a method `display` to print the date in the format `mm/dd/yyyy`\n- a method `next` that advances the date to the next day."}, {"instruction": "Create a C++ class `Rectangle` that models a rectangle with a height and a width. It should provide appropriate accessors and mutators for height and width. It should also contain a static method that calculates the area of the rectangle and a dynamic method that calculates the area of the rectangle.\n\n#"}, {"instruction": "Create a C++ class `Person` with attributes `name` and `age`. Create member functions `getName` and `getAge` to access the values of the attributes, and `setName` and `setAge` to modify the values of the attributes."}, {"instruction": "Create a C++ class `Shape` that represents two-dimensional shapes. The class should have a static method `area` that calculates the area of the shape."}, {"instruction": "Create a C++ class `Vector` to represent vectors of integers."}, {"instruction": "Create a C++ class `Point` that represents a Cartesian point with `x` and `y` coordinates. Provide methods for accessing the points' coordinates and for checking if two points are the same."}, {"instruction": "Create a C++ class `Student` that stores student data, including the student's first name, last name, and ID number, and the average score."}, {"instruction": "Design a Point class that stores a Cartesian coordinate pair. The Point class should have the following member functions:\n- a constructor with two parameters (x and y coordinates)\n- a static method, `display()`, that prints the current Point instance\n- a dynamic method, `getDistance()`, that returns the distance between a Point instance and the origin (0, 0)\n- a static method, `display()`, that prints all the Point instances"}, {"instruction": "Create a C++ class `Point` with x, y, z coordinates and getters and setters for each coordinate. Create a class `Sphere` that has the radius of a sphere as a member variable and has a static method `area` that calculates the area of a sphere. Define a constructor for `Sphere` that allows the user to define the radius of the sphere."}, {"instruction": "Define the `List` class, which provides functionality to dynamically add integers to an array. The class must provide the following functions:\n\n- `bool add(int value)`: adds an integer to the list. Additon is done by creating a new list with the new integer added, then iteratively copying the new list into the original\n- `int get(int index)`: returns the value at a specified index in the list\n- `int getSize()`: returns the size of the list"}, {"instruction": "Create a C++ class `Point` that represents a coordinate point in a plane, and includes the following methods:\n\n- `constructor`: takes two integers as arguments and assigns them to the `x` and `y` coordinates of the `Point`.\n- `getX`: returns the value of the `x` coordinate.\n- `getY`: returns the value of the `y` coordinate.\n- `getDistance`: returns the distance of the `Point` from the origin."}, {"instruction": "Create a C++ class `String` that contains a string of characters and has the following methods:\n- `getCharAt(int index)` returns the character at a given index\n- `getLength()` returns the length of the string\n- `setCharAt(char c, int index)` replaces the character at a given index with a new character\n- `concat(String s)` returns a new string containing the concatenation of two strings\n- `substring(int begin, int end)` returns a string containing a substring of the current string\n- `toUpper()` returns a string in upper case\n- `toLower()` returns a string in lower case"}, {"instruction": "Create C++ classes `Date` and `Time`, representing a date and a time. The `Date` class should have member variables for month, day, and year, as well as a static method `isLeapYear` to check if the year is a leap year. The `Time` class should have member variables for hour, minute, and second, and a static method `isAM` to check if the time is in the morning (0 or 1) or in the afternoon (2 or 3). The `Date` class should have three constructors. The `Time` class should have one constructor."}, {"instruction": "Create a C++ class `Student` that has the following fields:\n\n- a first name\n- a last name\n- a numeric ID number\n- a numeric grade average\n\nThe class should have the following methods:\n\n- a default constructor\n- a member function `getName` that returns the student's name\n- a member function `setName` that sets the student's name\n- a member function `getGrade` that returns the student's grade average\n- a member function `setGrade` that sets the student's grade average"}, {"instruction": "Write a C++ class `Person` with the following properties:\n- `name` (string)\n- `age` (integer)\n\nand the following methods:\n- `sayName` (prints the person's name)\n- `sayAge` (prints the person's age)\n\nCreate a C++ class `Student` that has the following properties:\n- `name` (string)\n- `age` (integer)\n- `major` (string)\n\nand the following methods:\n- `sayName` (prints the student's name)\n- `sayAge` (prints the student's age)\n- `sayMajor` (prints the student's major)"}, {"instruction": "Create a C++ class `Date` with private fields `m_month`, `m_day`, and `m_year` where each field is an `int`. Create appropriate accessor and mutator methods. Include a static method `isLeap` that checks if a year is a leap year. Include a static method `isValid` that checks if a date is valid. Include a static method `isBefore` that checks if one date is before another. Include a static method `isValid` that checks if a date is valid. Include a static method `isBefore` that checks if one date is before another. Include an operator overload `<<` to print `Date` objects."}, {"instruction": "Create a C++ class `Point` with an x and a y coordinate. Create a `Point` object with x = 5 and y = 3, then print its x and y coordinates."}, {"instruction": "Create a C++ class `Person` with public data members `name` and `age`. The class should have a public member method `greet` that prints a greeting string \"Hello, my name is NAME and I am AGE years old.\" where name and age are replaced by the corresponding member data. Create a static member method `getGreeting` that returns the greeting string from the `greet` method. Create an object of the `Person` class and call `getGreeting` to print the string."}, {"instruction": "Create a C++ class `Circle` that represents a circle with a radius."}, {"instruction": "Create a C++ class `Complex` that represents complex numbers."}, {"instruction": "Create a C++ class `Clock` that represents a clock in 24-hour format."}, {"instruction": "Create a C++ class `Vector` that stores doubles in a dynamically-allocated array."}, {"instruction": "Create a C++ class `Matrix` that represents a square matrix of integers. It must have the following methods:\n\n- `Matrix(int n)`: a constructor that takes a size n and initializes all members of the matrix to n x n zeroes\n- `Matrix(const Matrix &m)`: a copy constructor that takes a reference to a matrix m and copies its members to its own members\n- `static Matrix identity(int n)`: a static method that takes a size n and returns a square identity matrix of size n\n- `int get(int i, int j)`: a method that takes an integer pair (i, j) and returns the value of the matrix element at position (i, j)\n- `void set(int i, int j, int v)`: a method that takes an integer pair (i, j) and an integer v and sets the matrix element at position (i, j) to v\n- `Matrix operator+(const Matrix &m)`: an operator overloading method that takes a reference to a matrix m and returns a new matrix that is the sum of the calling matrix and m\n- `Matrix operator*(const Matrix &m)`: an operator overloading method that takes a reference to a matrix m and returns a new matrix that is the product of the calling matrix and m\n- `Matrix transpose()`: a method that returns a new matrix that is the transpose of the calling matrix\n- `Matrix inverse()`: a method that returns a new matrix that is the inverse of the calling matrix"}, {"instruction": "Implement a C++ class `Time` that defines a time in terms of hours, minutes, and seconds."}, {"instruction": "Create a C++ class `Node` that stores a single integer value and references to the two neighboring nodes. The class `Node` should be implemented to support the following operations:\n- `Node()`: constructs an empty node with the default value 0.\n- `Node(int value)`: constructs a node with the specified value.\n- `Node(Node& node)`: constructs a node with the same value as the parameter node.\n- `Node& operator=(Node& node)`: assigns a node to the current node.\n- `int getValue()`: returns the value stored in the node.\n- `Node& getPrevious()`: returns the reference to the previous node.\n- `void setPrevious(Node& node)`: sets the previous node to the specified node.\n- `Node& getNext()`: returns the reference to the next node.\n- `void setNext(Node& node)`: sets the next node to the specified node."}, {"instruction": "Create a C++ class `Student` with `name`, `gpa`, and `credits` as public fields. Provide methods for `getName`, `getGPA`, and `getCredits`."}, {"instruction": "Implement a C++ class `Rectangle` that encapsulates the attributes of a rectangle. You must implement the following methods:\n\n- A default constructor that initializes the width and height to 1.\n- A constructor that initializes the width and height to the given dimensions.\n- A method `print` that prints a string representation of the rectangle to the console.\n- A method `set` that sets the width and height of the rectangle to the given dimensions.\n- A method `getArea` that returns the area of the rectangle.\n- A method `getPerimeter` that returns the perimeter of the rectangle.\n- A method `resize` that resizes the width and height of the rectangle by a given factor."}, {"instruction": "Create a C++ class `Node`, which represents a node in a linked list.\n- The class should have a constructor that takes an integer as an argument\n- The class should have a method `next` that returns a `Node` pointer"}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, mathematical computation\n\n### Task\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: loop-based exponentiation, floating point arithmetic\n\n### Task\nWrite a C++ function `power` that computes base raised to an integer exponent.\n\n## Example 9\n### Properties\ncategory: program implementation\nlanguage: C++\ndifficulty: medium\nconcepts: struct/class instantiation, dynamic allocation, type casting, function overload, pointer arithmetic\n\n### Task", "fingerprint": null, "content": {"code": "soap_instantiate_ns3__FEDetRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FEDetRequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEDetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEDetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEADetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEADetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECompConsResponse\"))\n\t\treturn soap_instantiate_ns3__FECompConsResponse(soap, n, NULL, NULL, size);\n\tns3__FEDetRequest *p;\n\tsize_t k = sizeof(ns3__FEDetRequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FEDetRequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FEDetRequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FEDetRequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FEDetRequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "docstring": "/* appease -Wall -Werror */", "function_name": "soap_in_ns3__FEDetRequest"}, "id": 22, "seed": "soap_instantiate_ns3__FEDetRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)\n{\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"soap_instantiate_ns3__FEDetRequest(%p, %d, %s, %s)\\n\", (void*)soap, n, type?type:\"\", arrayType?arrayType:\"\"));\n\t(void)type; (void)arrayType; /* appease -Wall -Werror */\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEDetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEDetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECAEADetRequest\"))\n\t\treturn soap_instantiate_ns3__FECAEADetRequest(soap, n, NULL, NULL, size);\n\tif (soap && type && !soap_match_tag(soap, type, \"ns3:FECompConsResponse\"))\n\t\treturn soap_instantiate_ns3__FECompConsResponse(soap, n, NULL, NULL, size);\n\tns3__FEDetRequest *p;\n\tsize_t k = sizeof(ns3__FEDetRequest);\n\tstruct soap_clist *cp = soap_link(soap, SOAP_TYPE_afip_ns3__FEDetRequest, n, afip_fdelete);\n\tif (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)\n\t\treturn NULL;\n\tif (n < 0)\n\t{\tp = SOAP_NEW(soap, ns3__FEDetRequest);\n\t\tif (p)\n\t\t\tp->soap = soap;\n\t}\n\telse\n\t{\tp = SOAP_NEW_ARRAY(soap, ns3__FEDetRequest, n);\n\t\tk *= n;\n\t\tif (p)\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tp[i].soap = soap;\n\t}\n\tDBGLOG(TEST, SOAP_MESSAGE(fdebug, \"Instantiated ns3__FEDetRequest location=%p n=%d\\n\", (void*)p, n));\n\tif (size)\n\t\t*size = k;\n\tif (!p)\n\t\tsoap->error = SOAP_EOM;\n\telse if (cp)\n\t\tcp->ptr = (void*)p;\n\treturn p;\n}", "concepts": ["struct/class instantiation", "dynamic allocation", "type casting", "function overload", "pointer arithmetic"], "parsing_result": [{"instruction": "Implement a C++ program that reads a number from the user and displays that many Fibonacci numbers."}, {"instruction": "Write a C++ program that creates an array of pointers to integers and randomly generates 100 numbers between 1 and 100. The program then prints the number of integers in the array that are even."}, {"instruction": "Create a C++ program that prompts the user for a series of numbers and prints the sum of their squares."}, {"instruction": "Write a C++ program that creates a dynamic array of integers and stores elements in the array."}, {"instruction": "Write a C++ program that creates a `pizza` object."}, {"instruction": "Implement a C++ program that creates a dynamic array of pointers to `Person` objects. The array is dynamically resized based on user input. The program should allow the user to choose to either add a new person to the array or print the information of all the people."}, {"instruction": "Write a C++ program that reads a file containing a line of text. The program should then output the file's contents in its reverse order."}, {"instruction": "Write a C++ program that reads in integers from standard input and prints out the largest and the sum of all of them."}, {"instruction": "Write a program that prompts the user for the number of students in a class, then prompts the user for the names of each student. The program then displays the list of students in alphabetical order."}, {"instruction": "Create a C++ program that implements a simple text database system. The database should store bank accounts (account number, balance) and bank account transactions (date, account number, amount). The program should support the following operations:\n\n1. Create a new bank account\n2. Deposit into a bank account\n3. Withdraw from a bank account\n4. Print the entire bank account history of a bank account\n5. Print the balance of a bank account\n6. Exit\n/task-2/README.md\n## Task 2\n\n### Properties\ncategory: program implementation\nlanguage: C++\ndifficulty: easy\nconcepts: struct/class instantiation, dynamic allocation, type casting\n\n### Task\nCreate a C++ program that implements a simple text database system. The database should store bank accounts (account number, balance) and bank account transactions (date, account number, amount). The program should support the following operations:\n\n1. Create a new bank account\n2. Deposit into a bank account\n3. Withdraw from a bank account\n4. Print the entire bank account history of a bank account\n5. Print the balance of a bank account\n6. Exit\n/task-1/README.md\n## Task 1\n\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: pass-by-reference, temporary variable, in-place mutation\n\n### Task\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference."}, {"instruction": "Write a C++ program to implement the `libpoly` library, which allows the user to perform basic polynomial operations, including addition, subtraction, multiplication, and division."}, {"instruction": "Write a C++ program that reads in a file containing a series of integers and prints out the sum and mean of those integers."}, {"instruction": "Write a C++ program that reads the coordinates of a point in 2D space and outputs the distance to the origin."}, {"instruction": "Write a C++ program that prints the first 100 Fibonacci numbers."}, {"instruction": "Write a C++ program that prompts the user for a list of integers, and outputs the sum of the integers."}, {"instruction": "Write a C++ program that emulates a simple calculator."}, {"instruction": "Implement a C++ program that simulates a simple banking system."}, {"instruction": "Write a C++ program that prompts the user for a positive integer and prints the prime numbers between 1 and that number, inclusive."}, {"instruction": "Write a C++ program that prompts the user to enter 2 integers and prints the result of their sum, difference, product, and quotient (if the second integer is nonzero)."}, {"instruction": "Implement a C++ program that takes a positive integer (or floating point number) from the user. The program then uses the `ceil` function to round the number up to the nearest integer, and outputs the rounded number to the console."}, {"instruction": "Write a C++ program that reads two integers, a and b, and checks whether a is a multiple of b."}, {"instruction": "Write a C++ program that demonstrates the use of dynamic memory allocation."}, {"instruction": "Implement a C++ program that takes in the names of three files as command-line arguments, and prints the contents of the first file to the second, with the third file inserted in the middle. The contents of the third file are not to be printed to the second file."}, {"instruction": "Write a C++ program that takes the name of a text file as an argument on the command line and prints the number of words in the file, as well as the number of distinct words."}, {"instruction": "Implement the following C++ program in a file named `powers.cpp`:\n```c++\n#include <iostream>\n#include <cstdint>\n#include <iomanip>\n\nusing namespace std;\n\nint main() {\n    int64_t base = 0;\n    int64_t exp = 0;\n\n    /*\n     * TODO: read base and exp into base and exp respectively\n     */\n\n    int64_t result = power(base, exp);\n    cout << result << endl;\n\n    return 0;\n}\n\n/*\n * TODO: write function implementation for a function named `power` that\n * computes base raised to an integer exponent.\n */\n```"}, {"instruction": "Write a C++ program that defines a `Book` data type with the following fields:\n- `id`\n- `title`\n- `author`\n- `price`\n\nWrite a C++ program that defines a `BookStore` data type with the following fields:\n- `name`\n- `books`\n\nWrite a C++ program that defines a `BookStore` data type with the following fields:\n- `name`\n- `books`\n- `library`\n\nWrite a C++ program that defines a `BookStore` data type with the following fields:\n- `name`\n- `books`\n- `library`\n- `borrowedBooks`"}, {"instruction": "Write a C++ program that takes in a series of unsigned integers on command line arguments, and outputs the total number of positive, negative, and zero integers."}, {"instruction": "Write a C++ program that reads a text file containing a sorted list of integers. The program should print the list of integers in reverse order."}, {"instruction": "Write a C++ program that inputs a sequence of positive integers from the user, where each integer corresponds to a unit of currency. The sequence is ended by entering a negative integer. The program should calculate and print the total number of currencies, the average amount per currency, and the total value of all the currencies."}, {"instruction": "Write a C++ program that simulates a simple bank account."}, {"instruction": "Write a C++ program that computes the average of a list of non-negative floating point numbers."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string parsing, input streams, STL iterators\n\n### Task\nWrite a C++ function `countWords` that counts the number of words in a given string.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set intersection, hash sets, vector operations\n\n### Task\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: number system conversion, string building, modulus\n\n### Task\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: set for uniqueness, STL conversion, sorting\n\n### Task\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 9\n### Properties\ncategory: class implementation\nlanguage: C++\ndifficulty: medium\nconcepts: hash tables, encapsulation, exception handling, threading, hash map\n\n### Task", "fingerprint": null, "content": {"code": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool KeyHandler_ValueExists_mF5375C620ADF2D5B81AFA657D39C7DFB42F73EFF (KeyHandler_tB9094857C733957C9D709512D2AD478828B119FF * __this, String_t* ___name0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&String_t_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tString_t* L_0 = ___name0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\tString_t* L_1 = ((String_t_StaticFields*)il2cpp_codegen_static_fields_for(String_t_il2cpp_TypeInfo_var))->get_Empty_5();\n\t\t___name0 = L_1;\n\t}\n\nIL_000a:\n\t{\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_2 = __this->get_values_5();\n\t\tV_0 = L_2;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_3 = V_0;\n\t\tMonitor_Enter_mBEB6CC84184B46F26375EC3FC8921D16E48EA4C4(L_3, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_4 = __this->get_values_5();\n\t\tString_t* L_5 = ___name0;\n\t\tNullCheck(L_4);\n\t\tbool L_6;\n\t\tL_6 = VirtFuncInvoker1< bool, RuntimeObject * >::Invoke(19 /* System.Boolean System.Collections.Hashtable::Contains(System.Object) */, L_4, L_5);\n\t\tV_2 = L_6;\n\t\tIL2CPP_LEAVE(0x34, FINALLY_002a);\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_7 = V_1;\n\t\t\tif (!L_7)\n\t\t\t{\n\t\t\t\tgoto IL_0033;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_8 = V_0;\n\t\t\tMonitor_Exit_mA776B403DA88AC77CDEEF67AB9F0D0E77ABD254A(L_8, /*hidden argument*/NULL);\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x34, IL_0034)\n\t}\n\nIL_0034:\n\t{\n\t\tbool L_9 = V_2;\n\t\treturn L_9;\n\t}\n}", "docstring": "// end finally (depth: 1)", "function_name": "KeyHandler_Flush_m56255985F7D2CBDE0231B579C9795A56B516F3C7"}, "id": 26, "seed": "IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool KeyHandler_ValueExists_mF5375C620ADF2D5B81AFA657D39C7DFB42F73EFF (KeyHandler_tB9094857C733957C9D709512D2AD478828B119FF * __this, String_t* ___name0, const RuntimeMethod* method)\n{\n\tstatic bool s_Il2CppMethodInitialized;\n\tif (!s_Il2CppMethodInitialized)\n\t{\n\t\til2cpp_codegen_initialize_runtime_metadata((uintptr_t*)&String_t_il2cpp_TypeInfo_var);\n\t\ts_Il2CppMethodInitialized = true;\n\t}\n\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * V_0 = NULL;\n\tbool V_1 = false;\n\tbool V_2 = false;\n\tException_t * __last_unhandled_exception = 0;\n\til2cpp::utils::ExceptionSupportStack<int32_t, 1> __leave_targets;\n\t{\n\t\tString_t* L_0 = ___name0;\n\t\tif (L_0)\n\t\t{\n\t\t\tgoto IL_000a;\n\t\t}\n\t}\n\t{\n\t\tString_t* L_1 = ((String_t_StaticFields*)il2cpp_codegen_static_fields_for(String_t_il2cpp_TypeInfo_var))->get_Empty_5();\n\t\t___name0 = L_1;\n\t}\n\nIL_000a:\n\t{\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_2 = __this->get_values_5();\n\t\tV_0 = L_2;\n\t\tV_1 = (bool)0;\n\t}\n\nIL_0013:\n\ttry\n\t{ // begin try (depth: 1)\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_3 = V_0;\n\t\tMonitor_Enter_mBEB6CC84184B46F26375EC3FC8921D16E48EA4C4(L_3, (bool*)(&V_1), /*hidden argument*/NULL);\n\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_4 = __this->get_values_5();\n\t\tString_t* L_5 = ___name0;\n\t\tNullCheck(L_4);\n\t\tbool L_6;\n\t\tL_6 = VirtFuncInvoker1< bool, RuntimeObject * >::Invoke(19 /* System.Boolean System.Collections.Hashtable::Contains(System.Object) */, L_4, L_5);\n\t\tV_2 = L_6;\n\t\tIL2CPP_LEAVE(0x34, FINALLY_002a);\n\t} // end try (depth: 1)\n\tcatch(Il2CppExceptionWrapper& e)\n\t{\n\t\t__last_unhandled_exception = (Exception_t *)e.ex;\n\t\tgoto FINALLY_002a;\n\t}\n\nFINALLY_002a:\n\t{ // begin finally (depth: 1)\n\t\t{\n\t\t\tbool L_7 = V_1;\n\t\t\tif (!L_7)\n\t\t\t{\n\t\t\t\tgoto IL_0033;\n\t\t\t}\n\t\t}\n\nIL_002d:\n\t\t{\n\t\t\tHashtable_t7565AB92A12227AD5BADD6911F10D87EE52509AC * L_8 = V_0;\n\t\t\tMonitor_Exit_mA776B403DA88AC77CDEEF67AB9F0D0E77ABD254A(L_8, /*hidden argument*/NULL);\n\t\t}\n\nIL_0033:\n\t\t{\n\t\t\tIL2CPP_END_FINALLY(42)\n\t\t}\n\t} // end finally (depth: 1)\n\tIL2CPP_CLEANUP(42)\n\t{\n\t\tIL2CPP_RETHROW_IF_UNHANDLED(Exception_t *)\n\t\tIL2CPP_JUMP_TBL(0x34, IL_0034)\n\t}\n\nIL_0034:\n\t{\n\t\tbool L_9 = V_2;\n\t\treturn L_9;\n\t}\n}", "concepts": ["hash tables", "encapsulation", "exception handling", "threading", "hash map"], "parsing_result": [{"instruction": "Create a C++ class `WordCounter` that stores the word counts from a given text file."}, {"instruction": "Implement a C++ class `Hash` that can hold key-value pairs, with a hash function and some other appropriate methods."}, {"instruction": "Create a C++ class `HashTable` that stores key-value pairs efficiently."}, {"instruction": "Create a C++ class `HashTable` that implements a hash table using a vector of `std::map`s."}, {"instruction": "Create a C++ class `HashTable` which acts as a hash table, with a hash function and an array of buckets to store key-value pairs."}, {"instruction": "Create a C++ class `MyHashMap` that implements a hash table."}, {"instruction": "Write a C++ class `HashTable` that stores key-value pairs in a hash table and provides the following functionality:\n\n1. Set a value for a key\n2. Get the value for a key\n3. Delete a key and its value\n4. Return the size of the hash table\n5. Return the keys of the hash table\n6. Return the values of the hash table"}, {"instruction": "Implement a C++ class `HashMap` with the following requirements:\n- data members: an array of `int` elements, an array of `string` elements, and the number of elements in the array\n- constructor: user-given key and value to create the hash entry\n- public member functions:\n    - `insert`: insert an entry into the hash table\n    - `find`: find an entry in the hash table\n    - `remove`: remove an entry from the hash table\n    - `print`: print all entries in the hash table"}, {"instruction": "Implement a C++ class `HashTable` that stores key-value pairs."}, {"instruction": "Implement a C++ class `HashTable` that supports unique insertion and retrieving of strings."}, {"instruction": "Implement a C++ class `HuffmanTree` that represents a Huffman tree."}, {"instruction": "Write a C++ class `HashTable` that implements a hash table."}, {"instruction": "Write a C++ class `HashTable` that implements a hash table for arbitrary data types."}, {"instruction": "Implement a C++ class `TreeNode` that stores the value of the node as well as the left and right children."}, {"instruction": "Create a C++ class `HashTable` that emulates a simple hash table. It uses the `std::unordered_map` for its internal storage."}, {"instruction": "Create a C++ class `WordCounter` that uses a hash table to count the number of occurrences of each word in a string."}, {"instruction": "Create a C++ class `WordMap` that maps strings to integers."}, {"instruction": "Implement a thread-safe hash map with `get`, `put`, and `remove` operations."}, {"instruction": "Write a C++ class `HashTable` that implements a hash table."}, {"instruction": "Create a C++ class `HashTable` that stores and retrieves objects via key values."}, {"instruction": "Create a C++ class `HashTable` that supports insertion, deletion, and lookup of values."}, {"instruction": "Create a C++ class `HashTable` that implements a hash table."}, {"instruction": "Create a C++ class `HashTable` that provides functionality for mapping strings to integers."}, {"instruction": "Write a class `HashTable` that overrides the `[]` and `map` operators to allow for both projected and direct access to elements in a hash table."}, {"instruction": "Implement an object-oriented class called `SafeQueue` that provides a thread-safe queue."}, {"instruction": "Create a C++ class `HashTable` that stores the contents of a hash table in a vector."}, {"instruction": "Create a C++ class `Dictionary` that implements an in-memory dictionary using a hash map."}, {"instruction": "Implement a C++ class `HashTable` that uses a perfect hash function to store values into a hash table."}, {"instruction": "Implement a C++ class `Array` that behaves like a C-style array."}, {"instruction": "Implement a class `Dictionary` that uses a hash table to store key-value pairs."}, {"instruction": "Implement a C++ class `Stopwatch` that measures the time elapsed between starting and stopping the timer."}, {"instruction": "Implement a C++ class `HashMap` that contains an underlying hash table."}]}
{"prompt": "Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:\n\n- category: the type of task (e.g., function implementation, class implementation, or program implementation)\n- language: the programming language to be used\n- difficulty: the complexity level of the task (e.g., easy, medium, or hard)\n- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task\n\nDesign the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.\n\n## Example 1\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: digit counting, loop control, integer division\n\n### Task\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n\n## Example 2\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: string traversal, case-insensitive comparison, loop with condition\n\n### Task\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n\n## Example 3\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: STL map, frequency count, loop traversal\n\n### Task\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n\n## Example 4\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: recursion, base case, integer sequences\n\n### Task\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n\n## Example 5\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: medium\nconcepts: prime number check, loop optimization\n\n### Task\nCreate a C++ function `isPrime` that checks if a number is prime.\n\n## Example 6\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: recursion, modulo, Euclidean algorithm\n\n### Task\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n\n## Example 7\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: ternary operator, conditional logic, function return\n\n### Task\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n\n## Example 8\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: easy\nconcepts: range-based for loop, vector iteration, accumulation\n\n### Task\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n\n## Example 9\n### Properties\ncategory: function implementation\nlanguage: C++\ndifficulty: hard\nconcepts: pass-by-value, arithmetic operators, conditional execution, template specialization\n\n### Task", "fingerprint": null, "content": {"code": "LinearQuadraticStage approximateStage(OptimalControlProblem& optimalControProblem, TrajectoryRef start, StateTrajectoryRef end,\n                                      bool isInitialTime) {\n  const auto modelData = approximateIntermediateLQ(optimalControProblem, start.t, start.x, start.u, MultiplierCollection());\n\n  // checking the numerical properties\n  const auto errSize = checkSize(modelData, start.x.rows(), start.u.rows());\n  if (!errSize.empty()) {\n    throw std::runtime_error(\"[[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errSize);\n  }\n  const std::string errProperties =\n      checkDynamicsProperties(modelData) + checkCostProperties(modelData) + checkConstraintProperties(modelData);\n  if (!errProperties.empty()) {\n    throw std::runtime_error(\"[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errProperties);\n  }\n\n  LinearQuadraticStage lqStage;\n  const auto dt = end.t - start.t;\n\n  lqStage.cost = modelData.cost;\n  lqStage.cost *= dt;\n\n  // Linearized Dynamics after discretization: x0[k+1] + dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k])\n  lqStage.dynamics = approximateDynamics(modelData, start, dt);\n  // Adapt the offset to account for discretization and the nominal trajectory :\n  // dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k]) - x0[k+1]\n  lqStage.dynamics.f -= end.x;\n\n  lqStage.constraints = approximateConstraints(modelData, isInitialTime);\n\n  return lqStage;\n}", "docstring": "// checking the numerical properties", "function_name": "getLinearQuadraticApproximation"}, "id": 29, "seed": "LinearQuadraticStage approximateStage(OptimalControlProblem& optimalControProblem, TrajectoryRef start, StateTrajectoryRef end,\n                                      bool isInitialTime) {\n  const auto modelData = approximateIntermediateLQ(optimalControProblem, start.t, start.x, start.u, MultiplierCollection());\n\n  // checking the numerical properties\n  const auto errSize = checkSize(modelData, start.x.rows(), start.u.rows());\n  if (!errSize.empty()) {\n    throw std::runtime_error(\"[[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errSize);\n  }\n  const std::string errProperties =\n      checkDynamicsProperties(modelData) + checkCostProperties(modelData) + checkConstraintProperties(modelData);\n  if (!errProperties.empty()) {\n    throw std::runtime_error(\"[qp_solver::approximateStage] Ill-posed problem at intermediate time: \" + std::to_string(start.t) + \"\\n\" +\n                             errProperties);\n  }\n\n  LinearQuadraticStage lqStage;\n  const auto dt = end.t - start.t;\n\n  lqStage.cost = modelData.cost;\n  lqStage.cost *= dt;\n\n  // Linearized Dynamics after discretization: x0[k+1] + dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k])\n  lqStage.dynamics = approximateDynamics(modelData, start, dt);\n  // Adapt the offset to account for discretization and the nominal trajectory :\n  // dx[k+1] = A dx[k] + B du[k] + F(x0[k], u0[k]) - x0[k+1]\n  lqStage.dynamics.f -= end.x;\n\n  lqStage.constraints = approximateConstraints(modelData, isInitialTime);\n\n  return lqStage;\n}", "concepts": ["pass-by-value", "arithmetic operators", "conditional execution", "template specialization"], "parsing_result": [{"instruction": "Implement a C++ function `isInteger` that returns `true` if the parameter is an integer, and `false` otherwise."}, {"instruction": "Implement a C++ function `isPalindrome` that checks if a string is a palindrome."}, {"instruction": "Implement a C++ function `median` that returns the median element in a vector of integers."}, {"instruction": "Implement a C++ template function `max` that returns the larger of two values."}, {"instruction": "Implement a C++ function `factorial` that calculates factorials."}, {"instruction": "Implement a C++ function `maxOfThree` that returns the larger of three integers using conditional execution."}, {"instruction": "Implement a C++ function `intReverse` that reverses the digits of an integer using pass-by-value."}, {"instruction": "Implement a C++ function `maxOfFour` that returns the largest of four integers."}, {"instruction": "Implement a C++ function `equals` that returns true if two integer values are equal, and false otherwise."}, {"instruction": "Implement a C++ function `find` that returns the first (or any) instance of an element in a vector of integers."}, {"instruction": "Write a C++ function `square` that takes a number as a template argument and returns a value of the same type as the template argument with the same value as the template argument squared."}, {"instruction": "Implement a C++ function `adder` that adds two floating-point numbers and returns the result."}, {"instruction": "Implement a C++ function `subtract` that subtracts one integer from another."}, {"instruction": "Implement a C++ function `maxOfThree` that returns the larger of three integers."}, {"instruction": "Implement a C++ function `sum` that returns the sum of two integers using pass-by-value."}, {"instruction": "Implement a C++ function `maxOfThree` that returns the largest of three integers."}, {"instruction": "Implement a C++ function `quadraticRoot` that returns the two roots of a quadratic equation using pass-by-value."}, {"instruction": "Write a C++ function `isDivisibleBy` that returns `true` if a number is evenly divisible by another number."}, {"instruction": "Implement a C++ function `compare` that compares two integers and returns the larger of the two using pass-by-value."}, {"instruction": "Implement a C++ function `compare` that returns the sign of the difference between two numbers."}, {"instruction": "Implement a C++ function `f` that takes three integers, representing the lengths of three sides of a triangle, and returns a string representing the type of triangle, or \"not a triangle\" if the lengths cannot be used to form a triangle."}, {"instruction": "Create a C++ function `max` that returns the larger of two numbers, using template specialization."}, {"instruction": "Implement a C++ function `area` that returns the area of a rectangle."}, {"instruction": "Implement a C++ function `maxOfThree` that returns the largest of three integers."}, {"instruction": "Write a C++ function `increment` to increment an integer by one using the following rules:\n- if the integer is negative, set it to zero\n- if the integer is zero, set it to one\n- if the integer is positive, increment it by one"}, {"instruction": "Implement a C++ function `sqrt` that returns the square root of a double."}, {"instruction": "Implement a C++ function `swap` that swaps the values of two integers using pass-by-value."}, {"instruction": "Implement a C++ template function `pow` that raises an integer to a power."}, {"instruction": "Implement a C++ function `sum` that takes a variadic number of arguments and returns the sum of all arguments."}, {"instruction": "Implement a C++ function `max` that returns the larger of two numbers, using the conditional operator and template specialization."}, {"instruction": "Implement a C++ function `reverse` that reverses the order of the digits of a number."}, {"instruction": "Implement a C++ function `addVectors` that takes two vectors of integers as input and returns a vector containing the sum of the corresponding elements."}]}
