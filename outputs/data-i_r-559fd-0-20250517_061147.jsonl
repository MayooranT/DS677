{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nImplement a C++ function `binarySearch` that searches for a value in a vector of sorted integers.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "run_arduino", "docstring": "/* returns the thread identifier. */", "code": "int main()\n{\n    MSG Msg;\n    WNDCLASSEX wc;\n    //hWndMain = FindWindowA(\"TApplication\", \"EMU\"); // search for external emulator\n\n    // Registering the Window Class\n    wc.cbSize = sizeof(WNDCLASSEX);\n    wc.style = 0;\n    wc.lpfnWndProc = WndProc;\n    wc.cbClsExtra = 0;\n    wc.cbWndExtra = 0;\n    wc.hInstance = hInstance;\n    wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);\n    wc.hCursor = LoadCursor(NULL, IDC_ARROW);\n    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);\n    wc.lpszMenuName = NULL;\n    wc.lpszClassName = g_szClassName;\n    wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);\n    if (!RegisterClassEx(&wc))\n    {\n        MessageBox(NULL, \"Window Registration Failed!\", \"Error!\", MB_ICONEXCLAMATION | MB_OK);\n        return 0;\n    }\n    hFont = CreateFont(-16, 0, 0, 0, FW_NORMAL, 0, 0, 0, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, FF_DONTCARE, \"Courier New\");\n\n    // Creating the Window\n    hWndMain = CreateWindowEx(WS_EX_CLIENTEDGE, g_szClassName,\n        \"Arduino Simulator 2019 WizIO\",\n        WS_OVERLAPPEDWINDOW,CW_USEDEFAULT, CW_USEDEFAULT, 640, 480,\n        NULL, NULL, hInstance, NULL);\n    if (hWndMain == NULL)\n    {\n        MessageBox(NULL, \"Window Creation Failed!\", \"Error!\", MB_ICONEXCLAMATION | MB_OK);\n        return 0;\n    }\n    SetWindowPos(hWndMain, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOACTIVATE or SWP_NOMOVE or SWP_NOSIZE);\n\n    // Creating the Edit\n    hEdit = CreateWindowEx(WS_EX_CLIENTEDGE, \"EDIT\", \"\",\n                           WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_MULTILINE | ES_AUTOVSCROLL, // | ES_AUTOHSCROLL,\n                           0, 200, 620, 240,\n                           hWndMain, (HMENU)0, GetModuleHandle(NULL), NULL);\n    SendMessage(hEdit, WM_SETFONT, (WPARAM)hFont, MAKELPARAM(true, 0));\n\n    extern void create_leds();\n    create_leds();\n\n    extern void createDisplay();\n    createDisplay();\n\n    ShowWindow(hWndMain, 1);\n    UpdateWindow(hWndMain);\n\n    run_arduino();\n\n    // The Message Loop\n    while (GetMessage(&Msg, NULL, 0, 0) > 0)\n    {\n        TranslateMessage(&Msg);\n        DispatchMessage(&Msg);\n    }\n    startedArduino = 0;\n    return Msg.wParam;\n}", "seed": "0", "concepts": ["no concept"], "instruction": "Implement a C++ function `binarySearch` that searches for a value in a vector of sorted integers.", "response": "```cpp\n#include <vector>\n\nint binarySearch(const std::vector<int>& arr, int target) {\n    int left = 0, right = arr.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(binarySearch({1, 2, 3, 4, 5}, 2) == 1);\n    assert(binarySearch({1, 2, 3, 4, 5}, 5) == 4);\n    assert(binarySearch({1, 2, 3, 4, 5}, 0) == -1);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `square` that returns the square of an integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "GetAllFiles", "docstring": "//\u662f\u6587\u4ef6\u76f4\u63a5\u52a0\u5165", "code": "void AddFileToZip(zipFile zf, string fileNameInZip, string srcFile)\n{\n\tFILE* srcfp = NULL;\n\n\t//\u521d\u59cb\u5316\u5199\u5165zip\u7684\u6587\u4ef6\u4fe1\u606f\n\t//zip_fileinfo zi;\n\tzip_fileinfo   zi = { 0 };\n\n\tzi.tmz_date.tm_sec = zi.tmz_date.tm_min = zi.tmz_date.tm_hour =\n\t\tzi.tmz_date.tm_mday = zi.tmz_date.tm_mon = zi.tmz_date.tm_year = 0;\n\tzi.dosDate = 0;\n\tzi.internal_fa = 0;\n\tzi.external_fa = 0;\n\n\t//\u5982\u679csrcFile\u4e3a\u7a7a\uff0c\u52a0\u5165\u7a7a\u76ee\u5f55    \n\tstring new_file_name = \"\";\n\t//if (fileNameInZip == \"json\")\n\t//\tfileNameInZip = \"\";\n\tnew_file_name += fileNameInZip;\n\tif (srcFile == \"\")\n\t{\n\t\tnew_file_name += \"/\";\n\t}\n\n\t//\u5728zip\u6587\u4ef6\u4e2d\u521b\u5efa\u65b0\u6587\u4ef6    \n\t//zipOpenNewFileInZip(zf, new_file_name.c_str(), &zi, NULL, 0, NULL, 0, NULL, Z_DEFLATED, Z_DEFAULT_COMPRESSION);\n\tzipOpenNewFileInZip(zf, new_file_name.c_str(), &zi, NULL, 0, NULL, 0, NULL, 0, Z_DEFAULT_COMPRESSION);//\u6ce8\u610f\u8fd9\u91cc\uff0c0\uff0c\u9ed8\u8ba4\u538b\u7f29\u7b97\u6cd5\u4e3aStore.\n\n\tif (srcFile != \"\")\n\t{\n\t\t//\u6253\u5f00\u6e90\u6587\u4ef6    \n\t\tfopen_s(&srcfp, srcFile.c_str(), \"rb\");\n\t\tif (srcfp == NULL)\n\t\t{\n\t\t\tprintf(\"\u65e0\u6cd5\u6dfb\u52a0\u6587\u4ef6: %s !\\n\", srcFile);\n\t\t\tzipCloseFileInZip(zf); //\u5173\u95edzip\u6587\u4ef6  \n\t\t\treturn;\n\t\t}\n\n\t\t//\u8bfb\u5165\u6e90\u6587\u4ef6\u5e76\u5199\u5165zip\u6587\u4ef6    \n\t\tchar buf[100 * 1024]; //buffer    \n\t\tint numBytes = 0;\n\t\twhile (!feof(srcfp))\n\t\t{\n\t\t\tnumBytes = fread(buf, 1, sizeof(buf), srcfp);\n\t\t\tzipWriteInFileInZip(zf, buf, numBytes);\n\t\t\tif (ferror(srcfp))\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//\u5173\u95ed\u6e90\u6587\u4ef6    \n\t\tfclose(srcfp);\n\t}\n\n\t//\u5173\u95edzip\u6587\u4ef6    \n\tzipCloseFileInZip(zf);\n}", "seed": "5", "concepts": ["integer literal", "integer constant", "integer literal conversion"], "instruction": "Write a C++ function `square` that returns the square of an integer.", "response": "```cpp\nint square(int n) { return n * n; }\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(square(2) == 4);\n    assert(square(-5) == 25);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `intDivisors` that returns a vector of all the integer divisors of a positive integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "to_d3d_element", "docstring": "// https://learn.microsoft.com/en-us/windows/win32/api/d3d12/ns-d3d12-d3d12_input_element_desc", "code": "inline D3D12_INPUT_ELEMENT_DESC to_d3d_element(\n      const std::unique_ptr<graphics::shaders::ivert_element>& e_p,\n      graphics::input_data_class_t inClass,\n      graphics::input_slot_t slot) noexcept\n   {\n\n      // https://learn.microsoft.com/en-us/windows/win32/api/d3d12/ns-d3d12-d3d12_input_element_desc\n      D3D12_INPUT_ELEMENT_DESC ret;\n      ret.SemanticName = e_p->name().c_str();\n      ret.SemanticIndex = static_cast<UINT>(e_p->index());\n      ret.InputSlotClass = graphics::to_d3d_input_class(inClass);\n      ret.InputSlot = graphics::to_d3d_input_slot(slot);\n      ret.Format = e_p->format();\n      ret.AlignedByteOffset = D3D12_APPEND_ALIGNED_ELEMENT;\n      ret.InstanceDataStepRate = 0;\n      return ret;\n   }", "seed": "7", "concepts": ["variable declaration", "variable assignment", "arithmetic", "integer division"], "instruction": "Write a C++ function `intDivisors` that returns a vector of all the integer divisors of a positive integer.", "response": "```cpp\n#include <vector>\n\nstd::vector<int> intDivisors(int n) {\n    std::vector<int> divisors;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) divisors.push_back(i);\n    }\n    return divisors;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(intDivisors(4) == std::vector<int>({1, 2, 4}));\n    assert(intDivisors(12) == std::vector<int>({1, 2, 3, 4, 6, 12}));\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `Output` with a `print` method that takes in a string and prints it to STDOUT.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "init", "docstring": "//init fine", "code": "bool load_files()\n{\n     //Load bg image\n     background = load_image( \"bg.png\" );\n     dot = load_image( \"dot.bmp\" );\n     \n     //load font\n     font = TTF_OpenFont( \"lazy.ttf\", 24 );\n     \n     //if problem\n     if( dot == NULL || background == NULL )\n     {\n         return false;\n     }\n     if( font == NULL )\n     {\n         return false;\n     }\n     \n     return true;\n}", "seed": "15", "concepts": ["data type", "standard output"], "instruction": "Create a C++ class `Output` with a `print` method that takes in a string and prints it to STDOUT.", "response": "```cpp\n#include <string>\n#include <iostream>\n\nclass Output {\npublic:\n    void print(const std::string& str) {\n        std::cout << str << std::endl;\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Output output;\n    output.print(\"Hello world!\");\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "Source", "docstring": "// We need to URL-encode the string.", "code": "StatusOr<std::string> FetchRegion(ExternalAccountTokenSourceAwsInfo const& info,\n                                  std::string const& metadata_token,\n                                  HttpClientFactory const& cf,\n                                  Options const& opts,\n                                  internal::ErrorContext const& ec) {\n  for (auto const* name : {\"AWS_REGION\", \"AWS_DEFAULT_REGION\"}) {\n    auto env = internal::GetEnv(name);\n    if (env.has_value()) return std::move(*env);\n  }\n\n  auto payload = GetMetadata(info.region_url, metadata_token, cf, opts);\n  if (!payload) return std::move(payload).status();\n  if (payload->empty()) {\n    return InvalidArgumentError(\n        absl::StrCat(\"invalid (empty) region returned from \", info.region_url),\n        GCP_ERROR_INFO().WithContext(ec));\n  }\n  // The metadata service returns an availability zone, so we must remove the\n  // last character to return the region.\n  payload->pop_back();\n  return *std::move(payload);\n}", "seed": "16", "concepts": ["fibonacci sequence", "recursion"], "instruction": "Create a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.", "response": "```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that computes the sum of the first N positive integers, where N is read from the console.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "doit", "docstring": "// output the debug if the map file is present", "code": "int main (int argc, char * * argv)\n#endif\n{\n\t// Just call doit and show possible errors.\n\n\ttry\n\t{\n\t\treturn doit (argc, argv);\n\t}\n\tcatch (std::logic_error & e)\n\t{\n\t\t* perr << \"ERROR: \" << e.what () << endl <<\n\t\t\t\"This error is unexpected, please \"\n\t\t\t\"send a bug report.\" << endl;\n\t}\n\tcatch (std::exception & e)\n\t{\n\t\t* perr << \"ERROR: \" << e.what () << endl;\n\t}\n\tcatch (Usage &)\n\t{\n\t\tcerr <<\t\"Pasmo v. \" << pasmoversion <<\n\t\t\t\" (C) 2004-2005 Julian Albo\\n\\n\"\n\t\t\t\"Usage:\\n\\n\"\n\t\t\t\"\\tpasmo [options] source object [symbol]\\n\\n\"\n\t\t\t\"See the README file for details.\\n\";\n\t}\n\tcatch (...)\n\t{\n\t\tcerr << \"ERROR: Unexpected exception.\\n\"\n\t\t\t\"Please send a bug report.\\n\";\n\t}\n\n\t// Added to fix Debian bug report #394733\n\treturn 1;\n}", "seed": "21", "concepts": ["integer literal", "type inference"], "instruction": "Write a C++ program that computes the sum of the first N positive integers, where N is read from the console.", "response": "```cpp\n#include <iostream>\n\nint main() {\n    int n;\n    std::cout << \"Enter n: \";\n    std::cin >> n;\n\n    int result = 0;\n    for (int i = 0; i <= n; ++i) {\n        result += i;\n    }\n\n    std::cout << \"Sum of \" << n << \" positive integers is \" << result << std::endl;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sum(3) == 6);\n    assert(sum(4) == 10);\n    assert(sum(5) == 15);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ class `Person` that stores a person's name and age.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "isConnected", "docstring": "// Check if all non-zero degree vertices are visited", "code": "int isEulerian()\n{\n    // Check is all non-zero degree vertices are connected\n    if(isConnected() == false)\n        return 0;\n    // Count vertices with odd degree\n    int odd = 0;\n    for(int i = 0; i < N; i++)\n        if(adj[i].size() & 1)\n        odd++;\n    // If count is more than 2, then graph is not Eulerian\n    if(odd > 2)\n        return 0;\n    // If odd count is 2, then semi-eulerian\n    // If odd count is 0, then eulerian\n    // Note that odd count can never be 1 for undirected graph\n    return (odd)? 1 : 2;\n}", "seed": "22", "concepts": [""], "instruction": "Write a C++ class `Person` that stores a person's name and age.", "response": "```cpp\n#include <string>\n\nclass Person {\nprivate:\n    std::string name;\n    int age;\npublic:\n    Person(const std::string& name, int age) : name(name), age(age) {}\n    std::string getName() const { return name; }\n    int getAge() const { return age; }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Person p(\"Alice\", 30);\n    assert(p.getName() == \"Alice\");\n    assert(p.getAge() == 30);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program to implement the basic operations of a stack.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "IsXInputDevice", "docstring": "// Loop over all devices", "code": "static BOOL CALLBACK DIEnumEffectsCallback(LPCDIEFFECTINFO ei, LPVOID pvRef)\n{\n  //HRESULT              hr;\n  //LPDIRECTINPUTDEVICE8 lpdid = (LPDIRECTINPUTDEVICE8)pvRef;    \n  Assert (ei->dwSize>=sizeof(DIEFFECTINFO));\n\n  if (DIEFT_GETTYPE(ei->dwEffType) == DIEFT_CONSTANTFORCE)\n  {\n    LogF(\"Constant force %s\",ei->tszName);\n    LogF(\"  Static  %s\",(const char *)GetParamNames(ei->dwStaticParams));\n    LogF(\"  Dynamic %s\",(const char *)GetParamNames(ei->dwDynamicParams));\n  }\n  if (DIEFT_GETTYPE(ei->dwEffType) == DIEFT_RAMPFORCE)\n  {\n    LogF(\"Ramp force %s\",ei->tszName);\n    LogF(\"  Static  %s\",(const char *)GetParamNames(ei->dwStaticParams));\n    LogF(\"  Dynamic %s\",(const char *)GetParamNames(ei->dwDynamicParams));\n  }\n  if (DIEFT_GETTYPE(ei->dwEffType) == DIEFT_PERIODIC)\n  {\n    LogF(\"Periodic %s\",ei->tszName);\n    LogF(\"  Static  %s\",(const char *)GetParamNames(ei->dwStaticParams));\n    LogF(\"  Dynamic %s\",(const char *)GetParamNames(ei->dwDynamicParams));\n  }\n  if (DIEFT_GETTYPE(ei->dwEffType) == DIEFT_CONDITION)\n  {\n    LogF(\"Condition %s\",ei->tszName);\n    LogF(\"  Static  %s\",(const char *)GetParamNames(ei->dwStaticParams));\n    LogF(\"  Dynamic %s\",(const char *)GetParamNames(ei->dwDynamicParams));\n  }\n\n\n  return DIENUM_CONTINUE;\n}", "seed": "23", "concepts": ["no concept"], "instruction": "Write a C++ program to implement the basic operations of a stack.", "response": "```cpp\n#include <stack>\n\nstruct Stack {\n    std::stack<int> s;\n\n    void push(int x) {\n        s.push(x);\n    }\n\n    int top() {\n        return s.top();\n    }\n\n    bool empty() {\n        return s.empty();\n    }\n\n    void pop() {\n        s.pop();\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Stack s;\n    s.push(1);\n    assert(!s.empty());\n    assert(s.top() == 1);\n    s.push(2);\n    assert(s.top() == 2);\n    s.pop();\n    assert(s.empty());\n    s.pop();\n    assert(s.empty());\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `Person` with a `name` string and an `age` int. Implement the function `greet` that takes a `Person` and returns a string.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "sendScoreToDisplay", "docstring": "// stop transmitting", "code": "void sendBallCreditToDisplay(byte gameCredits_in, byte gameBalls_in)\n{\n  wireWriteData[0] = ASCII_DOLLAR;\n  wireWriteData[1] = ASCII_C;\n  wireWriteData[2] = ASCII_A;\n  wireWriteData[3] = ASCII_N;\n  wireWriteData[4] = (8); // this is ID for Credit-Ball PinScore display\n  wireWriteData[5] = 10; // 10 displays as blank\n  wireWriteData[6] = (gameCredits_in/10);\n  wireWriteData[7] = (gameCredits_in-(wireWriteData[6]*10));\n  wireWriteData[8] = 10; //10 displays as blank\n  wireWriteData[9] = 0;\n  wireWriteData[10] = gameBalls_in;\n  wireWriteData[11] = ASCII_CR;\n\n  Wire.beginTransmission(4); // transmit to player one Arduino LED\n  Wire.write(wireWriteData,12);\n  Wire.endTransmission();    // stop transmitting\n\n  return;\n}", "seed": "35", "concepts": ["if-else-if", "ternary operator"], "instruction": "Create a C++ class `Person` with a `name` string and an `age` int. Implement the function `greet` that takes a `Person` and returns a string.", "response": "```cpp\nclass Person {\n    std::string name;\n    int age;\n    Person(std::string name, int age) : name(name), age(age) {}\n    std::string greet() { return \"Hello, my name is \" + name + \" and I am \" + std::to_string(age) + \" years old.\"; }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Person p(\"Rajesh\", 20);\n    assert(p.greet() == \"Hello, my name is Rajesh and I am 20 years old.\");\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nImplement a C++ class `Fraction` with static methods `toDecimal` and `toFraction` that converts a string representation of a fraction into a decimal fraction and a fraction into a string representation, respectively.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "Swap", "docstring": "//this is the trade off element as we can see.", "code": "Iter find_the_max(Iter i1,Iter i2){\n    //here we can use the next part of the loop and find a loop invariant as we can see\n    Iter max = i1;\n    i1++;\n    while(i1!=i2){\n        if(*max<*i1){\n            max = i1;\n        }\n        ++i1;\n    }\n    return max;\n}", "seed": "42", "concepts": ["number literal"], "instruction": "Implement a C++ class `Fraction` with static methods `toDecimal` and `toFraction` that converts a string representation of a fraction into a decimal fraction and a fraction into a string representation, respectively.", "response": "```cpp\n#include <string>\n#include <stdexcept>\n\nclass Fraction {\npublic:\n    Fraction(int numerator = 0, int denominator = 1) :\n        numerator_(numerator), denominator_(denominator) {\n        if (denominator == 0) {\n            throw std::invalid_argument(\"denominator cannot be zero\");\n        }\n        reduce();\n    }\n\n    static double toDecimal(const std::string& fraction) {\n        int numerator = 0, denominator = 1;\n        int current_sign = 1, index = 0;\n        if (fraction[0] == '-') {\n            current_sign = -1;\n            index = 1;\n        }\n        int integer_part = 0;\n        while (index < fraction.size() && fraction[index] != '/') {\n            integer_part = 10 * integer_part + fraction[index] - '0';\n            ++index;\n        }\n        if (!(fraction[index] == '/' && index + 1 < fraction.size())) {\n            throw std::invalid_argument(std::string(\"invalid format: \") + fraction);\n        }\n        ++index;\n        int fractional_part = 0;\n        while (index < fraction.size()) {\n            fractional_part = 10 * fractional_part + fraction[index] - '0';\n            ++index;\n        }\n        numerator = current_sign * (integer_part * denominator + fractional_part);\n        denominator = denominator * 10;\n        return static_cast<double>(numerator) / denominator;\n    }\n\n    static std::string toFraction(double fraction) {\n        int numerator = static_cast<int>(fraction);\n        int denominator = 1;\n        while (fraction - static_cast<double>(numerator) >= 1e-6) {\n            fraction -= static_cast<double>(numerator) / denominator;\n            numerator = static_cast<int>(fraction * denominator);\n            ++denominator;\n        }\n        return std::to_string(numerator) + \"/\" + std::to_string(denominator);\n    }\n\nprivate:\n    void reduce() {\n        if (numerator < 0) {\n            numerator = -numerator;\n            denominator = -denominator;\n        }\n        int gcd = 1;\n        int p = numerator, q = denominator;\n        while (q != 0) {\n            int r = p % q;\n            p = q;\n            q = r;\n            gcd = p;\n        }\n        numerator /= gcd;\n        denominator /= gcd;\n    }\n\n    int numerator_;\n    int denominator_;\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(Fraction::toDecimal(\"3/4\") == 0.75);\n    assert(Fraction::toDecimal(\"2/3\") == 0.66666667);\n    assert(Fraction::toDecimal(\"0/1\") == 0);\n    assert(Fraction::toDecimal(\"-2/3\") == -0.66666667);\n\n    assert(Fraction::toFraction(3.0 / 4.0) == \"3/4\");\n    assert(Fraction::toFraction(3.0 / 5.0) == \"6/10\");\n    assert(Fraction::toFraction(1.0 / 1.0) == \"1/1\");\n    assert(Fraction::toFraction(2.0) == \"2\");\n\n    assert(Fraction::toFraction(-3.0 / 4.0) == \"-3/4\");\n    assert(Fraction::toFraction(-3.0 / 5.0) == \"-6/10\");\n    assert(Fraction::toFraction(-1.0 / 1.0) == \"-1\");\n    assert(Fraction::toFraction(-2.0) == \"-2\");\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `printTable` that prints out a multiplication table.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "create_metric_tensor2D", "docstring": "//only for ndim = 3!!", "code": "double compute_inner_product_fast(const double *x, data_info d){\n    //Try to eliminate some inefficiencies in the code, no more explicit transposing\n    //Optimize matrix products to reduce the number of multiplications all in a singls\n    //function.\n    //\n    //data_info d = *((struct data_info *)data);\n    double max,sum,squarediff, dp;\n    int i, j, t, s;\n    //row1, col2, row2\n    //B*-1 * alpha(B) \n    //resulting B_shape * ndim array\n    sum=0;\n    squarediff=0;\n\n    for (int i = 0 ; i < d.B_shape ; i++ ){\n        for (int j = 0 ; j < d.ndim ; j++ ){\n            for (int k = 0 ; k < d.B_shape ; k++ ){\n                sum += d._cycle_cocycle_I[i][k]*d.rep[k][j];\n            }\n        \n            d.M1[i][j] = sum;\n            sum=0; \n \n        }\n    }\n    \n\n    sum=0;\n    //need the diagonal values first\n    for (int r = 0; r < d.B_shape; r++){\n        for (int k = 0; k < d.ndim; k++){\n            // VALID ONLY FOR d.ndim == 3!!!!!!!!!\n            t = (k*2)%d.ndim;\n            s = (k*2+1)%d.ndim;\n            sum += d.Z[k] * d.M1[r][k] * d.M1[r][k];\n            sum += d.Z[k+3] * 2 * d.M1[r][t]*d.M1[r][s];\n        }\n        if(sum<0)sum=500;\n        d.diag2[r] = sum;\n        d.diag[r] = sqrt(sum);\n\n        sum=0;\n    }\n    max=d.diag2[d.diag_ind];\n\n    for (int r = 0 ; r < d.nz_size ; r++ ){\n        i = d._zi[r];\n        j = d._zj[r];\n        if(i==j){\n            dp = d.diag2[i]/max - d._ip_mat[i][j];\n            d.stored_dp[r] = dp;\n            squarediff += pow(dp, 2);\n            //squarediff += pow((d.diag2[i] - d._ip_mat[i][j]), 2);\n        }\n        else{\n            for (int k = 0 ; k < d.ndim ; k++ ){\n                sum += d.Z[k] * (d.M1[i][k]*d.M1[j][k]);\n            \n                // VALID ONLY FOR d.ndim == 3!!!!!!!!!\n                t = (k*2)%d.ndim;\n                s = (k*2+1)%d.ndim;\n\n                sum += d.Z[k+3]*(d.M1[i][t]*d.M1[j][s] + d.M1[i][s]*d.M1[j][t]);\n            }\n            dp = sum/d.diag[i]/d.diag[j] - d._ip_mat[i][j];\n            d.stored_dp[r] = dp;\n            squarediff += pow(dp, 2);\n            //squarediff += pow((sum - d._ip_mat[i][j]), 2);\n            sum=0;\n        }\n    }\n    return squarediff;\n}", "seed": "46", "concepts": ["Dry-run", "output"], "instruction": "Write a C++ function `printTable` that prints out a multiplication table.", "response": "```cpp\n#include <iostream>\n\nvoid printTable(int n) {\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            std::cout << i * j << \" \";\n        }\n        std::cout << std::endl;\n    }\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    printTable(1);\n    printTable(2);\n    printTable(3);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ function `strcat` that appends one string onto the end of another string.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "getBytePattern", "docstring": "// byte b = i;", "code": "unsigned long getLongPattern(int i) {\n  unsigned long l;\n  // Shift a 1 to the ith bit\n  // unsigned long l = (unsigned long)1L<<i;\n  // Or, use bitset to set an individual bit (count from right)\n  bitSet(l, i);\n  return l;\n}", "seed": "48", "concepts": ["string addition", "type conversion"], "instruction": "Create a C++ function `strcat` that appends one string onto the end of another string.", "response": "```cpp\n#include <string>\n\nstd::string strcat(const std::string& a, const std::string& b) {\n    return a + b;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(strcat(\"Hello\", \" world\") == \"Hello world\");\n    assert(strcat(\"Hello\", \"\") == \"Hello\"); \n    assert(strcat(\"\", \"Hello\") == \"Hello\");\n    assert(strcat(\"\", \"\") == \"\");\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that prints the first 100 Fibonacci numbers.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "printNote", "docstring": "// the right note.", "code": "void clearNote (uint8_t note) {\n  if ((note < LOWEST_NOTE) || (note > HIGHEST_NOTE)) {\n    return;\n  }\n  // See comments in printNote about Y coordinates of notes\n  int noteY = NOTE_YS + notecoords[note-LOWEST_NOTE]*NOTE_YO;\n  if (noteY != 0) {\n    if (sharps[note-LOWEST_NOTE]) {\n      fillNote(note, NOTE_SXO, noteY, ST77XX_WHITE);\n      fillSharp(noteY, ST77XX_WHITE);\n    } else {\n      fillNote(note, NOTE_XO, noteY, ST77XX_WHITE);\n    }\n  }\n}", "seed": "63", "concepts": ["arithmetical operations"], "instruction": "Write a C++ program that prints the first 100 Fibonacci numbers.", "response": "```cpp\n#include <iostream>\n#include <vector>\n\nint fibonacci(int n) {\n    std::vector<int> nums(n);\n    nums[0] = 1;\n    nums[1] = 1;\n    for (int i = 2; i < n; ++i) {\n        nums[i] = nums[i - 1] + nums[i - 2];\n    }\n    return nums[n - 1];\n}\n\nint main() {\n    for (int i = 0; i < 100; ++i) {\n        std::cout << fibonacci(i) << std::endl;\n    }\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(2) == 2);\n    assert(fibonacci(3) == 3);\n    assert(fibonacci(10) == 55);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that prints the number of seconds in a day.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "Split", "docstring": "//\u5148\u5c06\u8981\u5207\u5272\u7684\u5b57\u7b26\u4e32\u4ecestring\u7c7b\u578b\u8f6c\u6362\u4e3achar*\u7c7b\u578b", "code": "double AngleNormalization(double angle) {\n    // Constrain to less than pi\n    while (angle > M_PI) angle -= 2.0 * M_PI;\n\n    // Constrain to greater than -pi\n    while (angle < -M_PI) angle += 2.0 * M_PI;\n    return angle;\n}", "seed": "64", "concepts": ["numeric constant", "literal"], "instruction": "Write a C++ program that prints the number of seconds in a day.", "response": "```cpp\n#include <cassert>\n\nint main() {\n    assert(timeInDay(24, 0) == 86400);\n    assert(timeInDay(23, 59) == 86399);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(timeInDay(24, 0) == 86400);\n    assert(timeInDay(23, 59) == 86399);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `CharCounter` that defines a method `countChar` that returns the number of occurrences of a specified character in a string.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "denoiseb_rd47_select", "docstring": "//__VIVADO_SYNTH__", "code": "inline hw_uint<16> denoiseb_rd48_select(raw_cache& raw, int d0, int d1) {\n#ifdef __VIVADO_SYNTH__\n#endif //__VIVADO_SYNTH__\n  // denoiseb_rd48 read pattern: { denoiseb_update_0[d0, d1] -> raw[3 + 2d0, 1 + d1] : -1 <= d0 <= 961 and -1 <= d1 <= 1082 }\n  // Read schedule : { denoiseb_update_0[d0, d1] -> [2 + d1, 1 + d0, 2] : -1 <= d0 <= 961 and -1 <= d1 <= 1082 }\n  // Write schedule: { raw_update_0[d0, d1] -> [d1, d0, 1] : -2 <= d0 <= 962 and -3 <= d1 <= 1084 }\n  // DD fold: { denoiseb_update_0[d0, d1] -> 965 : -1 <= d0 <= 960 and -1 <= d1 <= 1082; denoiseb_update_0[d0, d1] -> (4 + d0) : d0 = 961 and -1 <= d1 <= 1082 }\n  auto value_raw_raw_update_0_write1 = raw.raw_raw_update_0_write1_merged_banks_25.peek_965();\n  return value_raw_raw_update_0_write1;\n#ifndef __VIVADO_SYNTH__\n\tcout << \"Error: Unsupported offsets: \" << \" d0 = \" << d0  << \" d1 = \" << d1  << endl;\n\tassert(false);\n\treturn 0;\n#endif //__VIVADO_SYNTH__\n}", "seed": "65", "concepts": ["ASCII character", "ASCII encoding"], "instruction": "Create a C++ class `CharCounter` that defines a method `countChar` that returns the number of occurrences of a specified character in a string.", "response": "```cpp\nclass CharCounter {\npublic:\n    int countChar(const std::string& str, char c) {\n        int count = 0;\n        for (char cc : str) {\n            if (cc == c) ++count;\n        }\n        return count;\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    CharCounter counter;\n    assert(counter.countChar(\"Hello\", 'l') == 2);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `maxOfThree` that returns the maximum of three integers.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "findElm_P", "docstring": "//----------------------------------------", "code": "address_parent findElmName_P(List_parent L, infotype_parent x) {\n    /**\n    * IS : List_parent L mungkin kosong\n    * FS : mengembalikan elemen dengan info nim = x.nim,\n    * FS : mengembalikan elemen dengan info = x,\n           mengembalikan Nil jika tidak ditemukan\n    */\n    address_parent P = first(L);\n    do {\n        if(P->info.name == x.name) {\n            return P;\n        }\n        P = next(P);\n    } while(P != first(L));\n    return NULL;\n}", "seed": "66", "concepts": ["conditional statement", "ternary operator"], "instruction": "Write a C++ function `maxOfThree` that returns the maximum of three integers.", "response": "```cpp\nint maxOfThree(int a, int b, int c) {\n    return std::max(a, std::max(b, c));\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfThree(2, 5, 3) == 5);\n    assert(maxOfThree(1, 1, 1) == 1);\n    assert(maxOfThree(1, 2, 3) == 3);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ class `Fibonacci` that implements the Fibonacci sequence of numbers, with fast lookups.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "drawBackgroundWaveform", "docstring": "//RGB(255, 128, 0)", "code": "UINT EndAnalyzeThread(LPVOID pParam)\n{\n\tpAnalyzeDlg->m_bRunAnalyze = FALSE;\n\n\t// Wait\n\twhile (bRunAnalyzeThread) { Sleep(1); }\n\n\tReadImageKill();\n\tNetClo(ConnectSocket);\n\tConnectSocket = NULL;\n\n\n\t// Change Button\n\tpAnalyzeDlg->m_Btn_PlayAnalyze.SetWindowTextW(_T(\"Play\"));\n\tpAnalyzeDlg->m_Btn_PlayAnalyze.EnableWindow(TRUE);\n\n\treturn 0;\n}", "seed": "70", "concepts": ["memoization", "dynamic programming"], "instruction": "Write a C++ class `Fibonacci` that implements the Fibonacci sequence of numbers, with fast lookups.", "response": "```cpp\n#include <vector>\n#include <unordered_map>\n\nclass Fibonacci {\npublic:\n    Fibonacci() : fibonacci_({0, 1}) {}\n    int operator[](int n) {\n        if (n >= fibonacci_.size()) {\n            int prev1 = fibonacci_.back();\n            int prev2 = fibonacci_[fibonacci_.size() - 2];\n            while (fibonacci_.size() <= n) {\n                fibonacci_.push_back(prev1 + prev2);\n                prev2 = prev1;\n                prev1 = fibonacci_.back();\n            }\n        }\n        return fibonacci_[n];\n    }\nprivate:\n    std::vector<int> fibonacci_;\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\n#include <unordered_map>\nint main() {\n    Fibonacci fib;\n    assert(fib[0] == 0);\n    assert(fib[1] == 1);\n    assert(fib[5] == 5);\n    assert(fib[10] == 55);\n    assert(fib[12] == 144);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ function `binarySearch` that returns true if a given integer is present in a sorted list of integers.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "main", "docstring": "//inchidem conexiunea cu baza de date", "code": "int LoginClient (struct thData tdL)\n{\n    int credentialsLen;\n    char *credentials = (char*) malloc (62);\n\n    fflush (stdout); //golim buffer-ul succesiv\n    if (read (tdL.cl, &credentialsLen, 4) <= 0)\n    {\n        printf(\"[Thread %d]\\n\",tdL.idThread);\n        perror (\"Eroare la read()-ul lungimii string-ului de credentials de la client.\\n\");\n    }\n    //printf(\"%d\\n\",credentialsLen);\n\n    fflush (stdout);\n    if (read(tdL.cl,credentials,credentialsLen) <=0)\n    {\n        printf(\"[Thread %d]\\n\",tdL.idThread);\n        perror (\"Eroare la read()-ul stringului de credentials de la client.\\n\");\n    }\n    //printf(\"%s\\n\",credentials);\n\n    char* password = (char*) malloc (30);\n    char *pch;\n\n    bzero(username, 30);\n    bzero(password, 30);\n\n    pch = strtok(credentials, \"$\");\n    strcpy(username, pch);\n    pch = strtok(NULL, \"$\");\n    strcpy(password, pch);\n\n    //criptam parola cu functia MD5\n    std::string encryptedPassword;\n    encryptedPassword=md5(password);\n\n    printf(\"Cautam in LearNet.db datele de logare si trimitem clientului confirmarea daca acestea sunt gasite.\\n\");\n    int confirmation=0;\n    QSqlQuery query;\n\n    char * enc_pass = new char[encryptedPassword.length() + 1];\n    std::copy(encryptedPassword.begin(), encryptedPassword.end(), enc_pass);\n    enc_pass[encryptedPassword.size()] = '\\0';\n\n    /*\n    strcpy (interogare, \"SELECT * FROM users WHERE username LIKE '\");\n    strcat (interogare, username);\n    strcat (interogare, \"%' ;\");\n    */\n\n    query.prepare(\"SELECT * FROM users WHERE username=? and encrypted_password=?\");\n    query.bindValue(0, username);\n    query.bindValue(1,enc_pass);\n\n    //executam interogarea si trimitem la server confirmarea\n    query.exec();\n    if (query.first()) //arata prima inregistrare din tabela care corespunde selectului\n    {\n        confirmation=1;//am gasit userul\n        printf(\"Am gasit username-ul %s, cu parola criptata %s.\\n\", username, enc_pass);\n\n        if (write (tdL.cl, &confirmation, 4) <=0)\n        {\n            printf(\"[Thread %d] \",tdL.idThread);\n            perror (\"[Thread]Eroare la write()-ul confirmarii de Login catre client.\\n\");\n        }\n    }\n    else\n    {\n        confirmation=0; //username-ul introdus sau parola sunt gresite\n        printf(\"Nu am gasit username-ul %s, cu parola criptata %s.\\n\", username, enc_pass);\n        if (write (tdL.cl, &confirmation, 4) <=0)\n        {\n            printf(\"[Thread %d] \",tdL.idThread);\n            perror (\"[Thread]Eroare la write()-ul confirmarii de Login catre client.\\n\");\n        }\n    }\n    return confirmation;\n}", "seed": "74", "concepts": ["binary search", "random access iteration"], "instruction": "Create a C++ function `binarySearch` that returns true if a given integer is present in a sorted list of integers.", "response": "```cpp\nbool binarySearch(const std::vector<int>& a, int n) {\n    int i = 0, j = a.size() - 1;\n    while (i <= j) {\n        int mid = (i + j) / 2;\n        if (a[mid] == n) return true;\n        else if (a[mid] < n) i = mid + 1;\n        else j = mid - 1;\n    }\n    return false;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(binarySearch({1, 2, 3, 4, 5}, 1) == true);\n    assert(binarySearch({1, 2, 3, 4, 5}, 5) == true);\n    assert(binarySearch({1, 2, 3, 4, 5}, 6) == false);\n    assert(binarySearch({1, 2, 3, 4, 5}, 4) == true);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `Fraction` that represents a fraction. The class should have the following properties:\n\n- `numerator`: a private integer that stores the numerator of the fraction\n- `denominator`: a private integer that stores the denominator of the fraction\n- `decimal`: a public function that returns the decimal value of the fraction\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "open_firmware_file", "docstring": "// Success", "code": "int get_firmware_size(int *firmware_size)\n{\n    int err = TP_SUCCESS;\n    struct stat file_stat;\n\n    // Make Sure File Handler is Valid\n    if(g_firmware_fd < 0)\n    {\n        ERROR_PRINTF(\"%s: FW file has not been opened. firmware_fd=%d.\\r\\n\", __func__, g_firmware_fd);\n        err = EBADFD;\n        goto GET_FIRMWARE_SIZE_EXIT;\n    }\n\n    // Get File Status\n    err = fstat(g_firmware_fd, &file_stat);\n    if(err < 0)\n    {\n        ERROR_PRINTF(\"%s: Fail to Get Firmware File Size! errno=%d.\\r\\n\", __func__, errno);\n        err = TP_ERR_FILE_NOT_FOUND;\n    }\n    else\n    {\n        //DEBUG_PRINTF(\"%s: File Size = %zd.\\r\\n\", __func__, file_stat.st_size);\n        *firmware_size = file_stat.st_size;\n        err = TP_SUCCESS;\n    }\n\nGET_FIRMWARE_SIZE_EXIT:\n    return err;\n}", "seed": "93", "concepts": ["numerical constants"], "instruction": "Create a C++ class `Fraction` that represents a fraction. The class should have the following properties:\n\n- `numerator`: a private integer that stores the numerator of the fraction\n- `denominator`: a private integer that stores the denominator of the fraction\n- `decimal`: a public function that returns the decimal value of the fraction", "response": "```cpp\nclass Fraction {\nprivate:\n    int numerator;\n    int denominator;\n\npublic:\n    Fraction(int numerator, int denominator) : numerator(numerator), denominator(denominator) {}\n\n    double decimal() const {\n        return static_cast<double>(numerator) / denominator;\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Fraction f(1, 2);\n    assert(f.decimal() == 0.5);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `CountingSort` with method `sort` that sorts a vector of integers using counting sort.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "setup", "docstring": "/*\n  byte storage = EEPROM.read(0);\n  if (storage == 255 || storage == DEFAULT_ADDRESS){\n    current_address = DEFAULT_ADDRESS;\n  }\n  else {\n    current_address = storage;\n  }\n  */", "code": "void resetAddress(byte address){\n  //EEPROM.write(0, address); \n  current_address = address;\n  Wire.onReceive(receiveEvent);\n  Wire.begin(address);\n  return;\n}", "seed": "95", "concepts": ["constant", "conditional operator", "return"], "instruction": "Create a C++ class `CountingSort` with method `sort` that sorts a vector of integers using counting sort.", "response": "```cpp\n#include <vector>\n#include <algorithm>\n\nclass CountingSort {\n public:\n    void sort(std::vector<int>& nums) {\n        int minVal = *std::min_element(nums.begin(), nums.end());\n        int maxVal = *std::max_element(nums.begin(), nums.end());\n        std::vector<int> counts(maxVal - minVal + 1, 0);\n        for (int n : nums) {\n            ++counts[n - minVal];\n        }\n        int idx = 0;\n        for (int i = 0; i < counts.size(); ++i) {\n            while (counts[i]-- > 0) {\n                nums[idx++] = i + minVal;\n            }\n        }\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    CountingSort cs;\n    std::vector<int> nums = {3, 4, 1, 2, 5, 7, 3, 2, 2, 5};\n    cs.sort(nums);\n    assert(nums == std::vector<int>({1, 2, 2, 2, 3, 3, 4, 5, 5, 7}));\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nImplement a C++ class `RationalNumber` that represents a rational number.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "attachPlugins", "docstring": "// not GTA", "code": "static int32\ngetSizeBreakableModel(void *object, int32 offset, int32)\n{\n\tBreakable *breakable = *PLUGINOFFSET(Breakable*, object, offset);\n\tif(breakable == nil)\n\t\treturn 0; //4;\n\treturn 56 + breakable->numVertices*(12+8+4) +\n\t            breakable->numFaces*(6+2) +\n\t            breakable->numMaterials*(32+32+12);\n}", "seed": "96", "concepts": ["division", "integer division"], "instruction": "Implement a C++ class `RationalNumber` that represents a rational number.", "response": "```cpp\nclass RationalNumber {\npublic:\n    RationalNumber() {}\n    RationalNumber(int num, int den) : numerator(num), denominator(den) {}\n    RationalNumber operator+(const RationalNumber& other) const {\n        int d = lcm(denominator, other.denominator);\n        return RationalNumber(numerator * d / denominator + other.numerator * d / other.denominator, d);\n    }\n    RationalNumber operator-(const RationalNumber& other) const {\n        int d = lcm(denominator, other.denominator);\n        return RationalNumber(numerator * d / denominator - other.numerator * d / other.denominator, d);\n    }\n    RationalNumber operator*(const RationalNumber& other) const {\n        return RationalNumber(numerator * other.numerator, denominator * other.denominator);\n    }\n    RationalNumber operator/(const RationalNumber& other) const {\n        return RationalNumber(numerator * other.denominator, denominator * other.numerator);\n    }\n    bool operator==(const RationalNumber& other) const {\n        return numerator == other.numerator && denominator == other.denominator;\n    }\n    int getNum() const { return numerator; }\n    int getDen() const { return denominator; }\nprivate:\n    int numerator;\n    int denominator;\n    static int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n    static int lcm(int a, int b) {\n        return a * b / gcd(a, b);\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    RationalNumber r1 = RationalNumber(1, 2);\n    RationalNumber r2 = RationalNumber(1, 3);\n    assert(r1 + r2 == RationalNumber(5, 6));\n    assert(r1 - r2 == RationalNumber(-1, 6));\n    assert(r1 * r2 == RationalNumber(1, 6));\n    assert(r1 / r2 == RationalNumber(3, 2));\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ program that reads a file containing a sequence of integers and outputs the smallest and largest integers in the sequence.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "DECL_LOADGLEXT_PROC", "docstring": "// Duplicate in GL_ARB_get_program_binary", "code": "static bool DECL_LOADGLEXT_PROC(EXT_stencil_two_side)\n{\n    //correct extension ??? maybe \"GL_ATI_separate_stencil\"\n    LOAD_GLPROC( glStencilFuncSeparate );\n    LOAD_GLPROC( glStencilMaskSeparate );\n    LOAD_GLPROC( glStencilOpSeparate   );\n    return true;\n}", "seed": "105", "concepts": ["traversal", "search", "binary search"], "instruction": "Create a C++ program that reads a file containing a sequence of integers and outputs the smallest and largest integers in the sequence.", "response": "```cpp\n#include <cassert>\n#include <cstdlib>\n#include <fstream>\n#include <iostream>\n#include <vector>\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" input.txt\\n\";\n        return EXIT_FAILURE;\n    }\n\n    std::ifstream input(argv[1]);\n    if (!input) {\n        std::cerr << \"Failed to open input file: \" << argv[1] << '\\n';\n        return EXIT_FAILURE;\n    }\n\n    std::vector<int> nums;\n    int num;\n    while (input >> num) {\n        nums.push_back(num);\n    }\n    if (!input.eof()) {\n        std::cerr << \"Error while reading input file.\\n\";\n        return EXIT_FAILURE;\n    }\n\n    int minVal = nums[0];\n    int maxVal = nums[0];\n    for (int num : nums) {\n        if (num < minVal) minVal = num;\n        if (num > maxVal) maxVal = num;\n    }\n\n    std::cout << \"Minimum: \" << minVal << '\\n';\n    std::cout << \"Maximum: \" << maxVal << '\\n';\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\n#include \"io.h\"\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" input.txt\\n\";\n        return EXIT_FAILURE;\n    }\n\n    auto result = readInputFile(argv[1]);\n    assert(result.min == 5);\n    assert(result.max == 10);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `isPrime` that determines whether an integer is prime.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "MkInformName", "docstring": "//\u0414\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 \u0447\u0430\u0441\u0442\u0438", "code": "int MakeOneStrForTree(char *oneStr, char *Name, char *Ext, PAR_FILE *pf)//\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0434\u043b\u044f \u043e\u0442\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u0434\u0435\u0440\u0435\u0432\u0435\n{\n   char size[32], *as;\n   if(pf->type == 48)                                        //\u042d\u0442\u043e \u0438\u043c\u044f \u043f\u0430\u043f\u043a\u0438\n   {  sprintf(oneStr, \"%s\", Name);                           //\u0414\u043b\u044f \u043f\u0430\u043f\u043a\u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u043c\n      return 0;\n   }\n   if(prMEDIA == 1)                                          //\u041f\u0430\u043f\u043a\u0430 MEDIA\n      if(ChangeNameInMEDIA(Name, Ext, pf) == 1) return 1;    //\u0418\u0437\u043c\u0435\u043d\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0432 \u043f\u0430\u043f\u043a\u0435 MEDIA\n   if(prMEDIA == 1 && Conf.altName == 0 && tabMME != NULL)\n      MkInformName(Name, Ext);                               //\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438\u043c\u0435\u043d\u0438\n   if(*Ext != 0)                                             //\u0414\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0435\u0441\u0442\u044c\n   {  lstrcat(Name, \".\");\n      lstrcat(Name, Ext);\n   }\n   int l = sprintf(oneStr, \"  %s\", Name);\n   for(int i=l; i<256; i++)                                  //\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u0445\u0432\u043e\u0441\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438\n       *(oneStr + i) = ' ';\n   switch(Conf.typeSize)                                     //0-\u0431\u0430\u0439\u0442\u044b, 1-\u041a\u0431\u0430\u0439\u0442\u044b, 2-\u041c\u0431\u0430\u0439\u0442\u044b, 3-\u0413\u0411\u0430\u0439\u0442\u044b\n   {  case 0: sprintf(size, \"%12.0lf\", double(pf->SizeF));\n              as = Char_Dig_p(size, 15);  break;             //\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0440\u0430\u0437\u0440\u044f\u0434\u043a\u0443\n      case 1: sprintf(size, \"%11.1lf\", double(pf->SizeF)/1024.0);\n              as = Char_Dig_p_n(size, 12, 1);  break;        //\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0440\u0430\u0437\u0440\u044f\u0434\u043a\u0443\n      case 2: sprintf(size, \"%9.2lf\", double(pf->SizeF)/1024.0/1024.0);\n              as = Char_Dig_p_n(size, 9, 2);  break;         //\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0440\u0430\u0437\u0440\u044f\u0434\u043a\u0443\n      case 3: sprintf(size, \"%7.3lf\", double(pf->SizeF)/1024.0/1024.0/1024.0);\n              as = Char_Dig_p_n(size, 6, 3);  break;         //\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0440\u0430\u0437\u0440\u044f\u0434\u043a\u0443\n   }\n/*\n   if(prMEDIA == 1 && Conf.altName == 0 && tabMME != NULL)\n     if((tabMME + indTabMME)->dt.year !=  pf.Year ||\n        (tabMME + indTabMME)->dt.mon  !=  pf.Mon  ||\n        (tabMME + indTabMME)->dt.day  !=  pf.Day  ||\n        (tabMME + indTabMME)->dt.hour !=  pf.Hour ||\n        (tabMME + indTabMME)->dt.min  !=  pf.Min  ||\n        (tabMME + indTabMME)->dt.sec  !=  pf.Sec)\n     {\n        char sf[260], sb[260], ss[260];\n        wsprintf(sf, \"\u0412 \u0444\u0430\u0439\u043b\u0435: %02d.%02d.%04d  %02d:%02d:%02d\", pf.Day, pf.Mon, pf.Year, pf.Hour, pf.Min, pf.Sec);\n        wsprintf(sb, \"\u0412 \u0431\u0430\u0437\u0435:    %02d.%02d.%04d  %02d:%02d:%02d\",\n                    (tabMME + indTabMME)->dt.day, (tabMME + indTabMME)->dt.mon, (tabMME + indTabMME)->dt.year,\n                    (tabMME + indTabMME)->dt.hour, (tabMME + indTabMME)->dt.min, (tabMME + indTabMME)->dt.sec);\n        WORD wHour = WORD((tabMME + indTabMME)->timeLong / 3600);\n        int M1 = (tabMME + indTabMME)->timeLong - wHour * 3600;\n        WORD wMinute = WORD(M1 / 60);\n        WORD wSecond = WORD(M1 - wMinute * 60);\n        wsprintf(ss, \"\u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c: %02d:%02d:%02d\", wHour, wMinute, wSecond);\n        Error4(\"\u041d\u0435\u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0434\u0430\u0442:\", ss, sb, sf);\n     }\n*/\n   char sDate[64], sTime[64], Pr = ' ';\n   SYSTEMTIME sysTime;\n   if(prMEDIA == 1 && Conf.altName == 0 &&                   //\u042d\u0442\u043e \u043f\u0430\u043f\u043a\u0430 MEDIA \u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438\u043c\u0435\u043d\u0438\n      tabMME != NULL && *(DWORD*)Ext == 0x006F7276 &&        //\u0415\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 MME \u0438 \u0444\u0430\u0439\u043b \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c *.vro\n      Conf.typeTime == 0 &&                                  //0-\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0438, 1-\u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430\n      indTabMME != -1)                                       //\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043c\u0435\u043d\n   {  pf->Year = (tabMME + indTabMME)->dt.year;\n\t  pf->Mon = BYTE((tabMME + indTabMME)->dt.mon);\n\t  pf->Day = BYTE((tabMME + indTabMME)->dt.day);\n\t  pf->Hour = BYTE((tabMME + indTabMME)->dt.hour);\n\t  pf->Min = BYTE((tabMME + indTabMME)->dt.min);\n\t  pf->Sec = BYTE((tabMME + indTabMME)->dt.sec);\n      Pr = 'R';\n   }\n   sysTime.wYear = (pf->Year == 0) ? WORD(1900) : pf->Year;\n   sysTime.wMonth = (pf->Mon == 0) ? WORD(1) : pf->Mon;\n   sysTime.wDay = (pf->Day == 0) ? WORD(1) : pf->Day;\n   sysTime.wHour = pf->Hour;\n   sysTime.wMinute = pf->Min;\n   sysTime.wSecond = pf->Sec;\n   sysTime.wDayOfWeek = 1;\n   sysTime.wMilliseconds = 0;\n\n   GetDateFormat(LOCALE_USER_DEFAULT, DATE_SHORTDATE, &sysTime, NULL, sDate, 64);\n   GetTimeFormat(LOCALE_USER_DEFAULT, TIME_FORCE24HOURFORMAT | LOCALE_NOUSEROVERRIDE, &sysTime, NULL, sTime, 64);\n/*\n   int prNoDT = 0;                                           //\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u0442\u044b/\u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0447\u0430\u0441\u044b \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b)\n   if((sysTime.wYear == 2004 && sysTime.wMonth == 1 && sysTime.wDay == 1) ||\n       sysTime.wYear >= 2055 || sysTime.wYear < 2004) prNoDT = 1;                 //\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u0442\u044b/\u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0447\u0430\u0441\u044b \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b)\n   if(prNoDT == 1)                                           //\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u0442\u044b/\u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0447\u0430\u0441\u044b \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b)\n   {  for(int i=0; i<sizeof(sDate); i++)\n      {  if(*(sDate+i) == 0)  break;\n         if(*(sDate+i) >= '0' && *(sDate+i) <= '9') *(sDate+i) = '-';\n      }\n      for(int i=0; i<sizeof(sTime); i++)\n      {  if(*(sTime+i) == 0)  break;\n         if(*(sTime+i) >= '0' && *(sTime+i) <= '9') *(sTime+i) = '-';\n      }\n   }\n*/\n   if(prMEDIA == 1 && Conf.altName == 0 &&                   //\u042d\u0442\u043e \u043f\u0430\u043f\u043a\u0430 MEDIA \u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438\u043c\u0435\u043d\u0438\n      tabMME != NULL && *(DWORD*)Ext == 0x006F7276 &&        //\u0415\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 MME \u0438 \u0444\u0430\u0439\u043b \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c *.vro\n      indTabMME != -1)                                       //\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043c\u0435\u043d\n   {  sysTime.wHour = WORD((tabMME + indTabMME)->timeLong / 3600);\n      int M1 = (tabMME + indTabMME)->timeLong - sysTime.wHour * 3600;\n      sysTime.wMinute = WORD(M1 / 60);\n      sysTime.wSecond = WORD(M1 - sysTime.wMinute * 60);\n      sysTime.wMilliseconds = 0;\n      char sLTime[64];\n      GetTimeFormat(LOCALE_USER_DEFAULT, TIME_FORCE24HOURFORMAT | LOCALE_NOUSEROVERRIDE, &sysTime, NULL, sLTime, 64);\n      if(Conf.ViewVRO == 1)                                  //0-\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 *.vro, 1-\u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c\n         for(int i=l-4; i<l; i++)                            //\u0421\u0442\u0435\u0440\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 .vro \u0438 \u0442\u043e\u0447\u043a\u0443\n             *(oneStr + i) = ' ';\n      int n = (Conf.poz_Ql == 0) ? 59 : 63;\n      if(Conf.poz_In == 0)                                   //\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0437\u0430\u043f\u0438\u0441\u0438: 0-\u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435, 1-\u0432 \u0438\u043c\u0435\u043d\u0438, 2-\u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c\n         sprintf(oneStr + n,  \"%s        \", (tabMME + indTabMME)->nameIn);\n      if(Conf.poz_Ql == 0)                                   //\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0438: 0-\u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435, 1-\u0432 \u0438\u043c\u0435\u043d\u0438, 2-\u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c\n         sprintf(oneStr + 66, \"%s        \", (tabMME + indTabMME)->Qual);\n      sprintf(oneStr+70, \"%s %s  [%8s]  %c %10s  %8s\", as, strSize[Conf.typeSize], sLTime, Pr, sDate, sTime);\n   }\n   else  sprintf(oneStr + 52, \"%s %s  %10s  %8s\", as, strSize[Conf.typeSize], sDate, sTime);\n   return 0;\n}", "seed": "107", "concepts": ["base case", "integer sequences"], "instruction": "Write a C++ function `isPrime` that determines whether an integer is prime.", "response": "```cpp\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(7) == true);\n    assert(isPrime(14) == false);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `predict` that takes two integer values, `hours` and `minutes` and returns `true` if the alarm is \"on\" based on the following rules:\n1. If `hours` is 7 or later, the alarm is \"on\" if `minutes` is greater than 44.\n2. If `hours` is 5 or later, the alarm is \"on\" if `minutes` is greater than 22.\n3. Otherwise, the alarm is \"off\".\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "insertatN", "docstring": "// Insert at head \r", "code": "int main() {\r\n    \r\n    int delnum;\r\n    \r\n    insert(1);\r\n    insert(2);\r\n    insert(3);\r\n    insert(4);\r\n    \r\n    printlist();\r\n\r\n    printf(\"##########\\n\");\r\n    insertatN(6, 2);\r\n    printlist();\r\n\r\n    deletenode(1);\r\n    \r\n    reverselist();\r\n    printf(\"\\n\\n\");\r\n    \r\n    printlist();\r\n    \r\n    delnum = findmiddle();\r\n    \r\n    printf(\"MIDDLE : %d\\n\", delnum);\r\n    \r\n    /* Added for testing purpose */\r\n    addloop();\r\n    \r\n    struct node *loopnode = findloop();\r\n    printf(\"LoopNode : %d\\n\", loopnode->data);\r\n\r\n    removeloop();\r\n    printlist();\r\n\r\n    \r\n    return 0;\r\n}", "seed": "114", "concepts": ["logical operators", "conditional logic"], "instruction": "Write a C++ function `predict` that takes two integer values, `hours` and `minutes` and returns `true` if the alarm is \"on\" based on the following rules:\n1. If `hours` is 7 or later, the alarm is \"on\" if `minutes` is greater than 44.\n2. If `hours` is 5 or later, the alarm is \"on\" if `minutes` is greater than 22.\n3. Otherwise, the alarm is \"off\".", "response": "```cpp\nbool predict(int hours, int minutes) {\n    if (hours >= 7) return minutes > 44;\n    if (hours >= 5) return minutes > 22;\n    return false;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(predict(7, 50) == true);\n    assert(predict(7, 25) == false);\n    assert(predict(4, 45) == false);\n    assert(predict(4, 22) == true);\n    assert(predict(5, 50) == true);\n    assert(predict(5, 25) == false);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `fibonacci` that returns the nth Fibonacci number.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "decryptPbData", "docstring": "//\u89e3\u5bc6", "code": "int decryptPbKey(unsigned char *cipherData, int cipherDataLen, char *clientSN, char *seedKey, unsigned char *outPbKey) {\n\n\tchar hardwareInfo[500];\n\tmemset(hardwareInfo, 0, 500);\n\tint infoLen = getHardwareInfo(hardwareInfo);\n\n\t//printf(\"getHardwareInfo:%d\\n \", hardwareInfo);\n\n\tchar transSeedKey[50];\n\tmemset(transSeedKey, 0, 50);\n\tint transSeedLen;//= transferSeedKey(seedKey, 50, transSeedKey);\n\n\t\t\t\t\t //transSeedKey=seedKey;\n\ttransSeedLen = 32;\n\n\t//\u5904\u7406\n\tchar orginalData[600];\n\tmemset(orginalData, 0, 600);\n\n\tstrcat(orginalData, clientSN);\n\tstrcat(orginalData, \"_\");\n\tstrcat(orginalData, hardwareInfo);\n\t//strcat(orginalData, \"_\");\n\t//strcat(orginalData, seedKey);\n\n\t//printf(\"orginalData:%s len:%d\\n \", orginalData, strlen(orginalData));\n\n\tchar md5Value[33];\n\tmemset(md5Value, 0, 33);\n\n\tgetMd5WithSeed(orginalData, strlen(orginalData), seedKey, 16, md5Value);\n\n\t//printf(\" md5 value:%s \\n\", md5Value);\n\t//===================================\n\n\tunsigned char iv[AES_BLOCK_SIZE];//\u52a0\u5bc6\u7684\u521d\u59cb\u5316\u5411\u91cf\n\tmemset(iv, 0, AES_BLOCK_SIZE);\n\n\tAES_KEY aes;\n\tif (AES_set_decrypt_key((unsigned char*)md5Value, 128, &aes) < 0)\n\t{\n\t\tprintf(\"init aes key error.\\n\");\n\t\treturn 0;\n\t}\n\n\tAES_cbc_encrypt((unsigned char*)cipherData, outPbKey, cipherDataLen, &aes, iv, AES_DECRYPT);\n\n\n\treturn 1;\n\n}", "seed": "118", "concepts": ["recursion", "base case", "constant value"], "instruction": "Write a C++ function `fibonacci` that returns the nth Fibonacci number.", "response": "```cpp\n#include <vector>\n\nint fibonacci(int n) {\n    std::vector<int> res(n + 1);\n    res[0] = 0;\n    res[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        res[i] = res[i - 1] + res[i - 2];\n    }\n    return res[n];\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nImplement a C++ class `Factorial` with a method `calculate` that computes the factorial of a non-negative integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "p_GeoDaWeight__GetSparsity", "docstring": "// invoke the function", "code": "int p_GeoDaWeight__GetMinNeighbors(SEXP xp)\n{\n  // grab the object as a XPtr (smart pointer) to GeoDaWeight\n  Rcpp::XPtr<GeoDaWeight> ptr(xp);\n\n  // invoke the function\n  int min_nbrs = ptr->GetMinNbrs();\n\n  return min_nbrs;\n}", "seed": "125", "concepts": ["factorial", "integer arithmetic"], "instruction": "Implement a C++ class `Factorial` with a method `calculate` that computes the factorial of a non-negative integer.", "response": "```cpp\nclass Factorial {\npublic:\n    int calculate(int n) {\n        int result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Factorial fact;\n    assert(fact.calculate(0) == 1);\n    assert(fact.calculate(1) == 1);\n    assert(fact.calculate(2) == 2);\n    assert(fact.calculate(3) == 6);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite two C++ classes, `Color` and `ColorList`, that represent a color (saved as a red, blue, and green value) and a list of colors (represented as a vector of `Color` objects).\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "sequentialCall", "docstring": "// run sequential step case producing an immediate value", "code": "impl::reference::unreleased_treeture<O> parallelCall(impl::reference::dependencies<DepsKind>&& deps, const I& in, const Funs& ... funs) const {\n\t\t\t// check for the base case\n\t\t\tconst auto& base = this->base;\n\t\t\tif (bc_test(in)) {\n\t\t\t\treturn impl::reference::spawn<root>(std::move(deps), [=] {\n\t\t\t\t\treturn detail::call_first().template call<O>(base, in);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// run step case\n\t\t\tconst auto& step = this->step;\n\t\t\treturn impl::reference::spawn<root>(\n\t\t\t\t\t// the dependencies of the new task\n\t\t\t\t\tstd::move(deps),\n\t\t\t\t\t// the process version (sequential):\n\t\t\t\t\t[=] { return detail::call_last().template call<impl::sequential::unreleased_treeture<O>>(step, in, funs.sequential_call()...).get(); },\n\t\t\t\t\t// the split version (parallel):\n\t\t\t\t\t[=] { return detail::call_first().template call<impl::reference::unreleased_treeture<O>>(step, in, funs.parallel_call()...); }\n\t\t\t);\n\t\t}", "seed": "130", "concepts": ["randomness", "pseudo-random numbers"], "instruction": "Write two C++ classes, `Color` and `ColorList`, that represent a color (saved as a red, blue, and green value) and a list of colors (represented as a vector of `Color` objects).", "response": "```cpp\n#include <cstdint>\n#include <vector>\n\nstruct Color {\n    uint8_t red;\n    uint8_t blue;\n    uint8_t green;\n};\n\nclass ColorList {\nprivate:\n    std::vector<Color> colors;\n\npublic:\n    ColorList() : colors() {}\n\n    void addColor(const Color& color) {\n        colors.push_back(color);\n    }\n\n    uint32_t sumR() const {\n        uint32_t total = 0;\n        for (const Color& color : colors) {\n            total += color.red;\n        }\n        return total;\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Color red = {255, 0, 0};\n    Color green = {0, 255, 0};\n    Color blue = {0, 0, 255};\n    Color yellow = {255, 255, 0};\n    ColorList list;\n    list.addColor(red);\n    list.addColor(green);\n    list.addColor(blue);\n    list.addColor(yellow);\n    assert(list.sumR() == 650);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ function `isInt` that takes a string and returns true if it can be parsed as an integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "parsePathsFile", "docstring": "// Note: we do not free() the malloc buffer, because the strings in it are used by exec()", "code": "static int run(const char* path, const std::vector<const char*>& args, bool affinity=false)\n{\n\t// build NULL termintated argv[] with argv[0] being path to exectuable \n\tconst char* argv[args.size()+2];\n\targv[0] = path;\n\tint i=1;\n\tfor(std::vector<const char*>::const_iterator it=args.begin(); it != args.end(); ++it) {\n\t\targv[i++] = *it;\n\t}\n\targv[i] = NULL;\n\n\t// fork and exec\n\tpid_t pid = fork();\n\tswitch(pid) {\n\tcase -1:\t// error\n\t\treturn -1;\n\tcase 0:\t\t// child\n\t\tif ( affinity ) {\n#if __i386__\n\t\t\tint mib[] = { CTL_KERN, KERN_AFFINITY, 1, 1 };\n\t\t\tint namelen = 4;\n\t\t\tsysctl(mib, namelen, NULL, NULL, NULL, 0);\n#endif\n\t\t}\n\t\texecv(path, (char**)argv);\n\t\t_exit(127);\n\tdefault:\t// parent \n\t\tint childStatus;\n\t\tif (waitpid (pid, &childStatus, 0) != pid)\n\t\t\treturn -1;\n\t\treturn childStatus;\n\t}\n}", "seed": "136", "concepts": ["input parsing", "integer parsing"], "instruction": "Create a C++ function `isInt` that takes a string and returns true if it can be parsed as an integer.", "response": "```cpp\n#include <string>\n#include <cctype>\n\nbool isInt(const std::string& str) {\n    if (str.empty()) return false;\n    int i = 0;\n    if (str[i] == '-') ++i;\n    for (; i < str.size(); ++i) {\n        if (!std::isdigit(str[i])) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isInt(\"10\") == true);\n    assert(isInt(\"-123\") == true);\n    assert(isInt(\"0\") == true);\n    assert(isInt(\"123-\") == false);\n    assert(isInt(\"123.\") == false);\n    assert(isInt(\"-0123\") == false);\n    assert(isInt(\"\") == false);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ class `Fraction` that implements a fraction with the following interface:\n- public constructor that takes two ints: numerator and denominator\n- public constructor that takes a single int: the numerator is set to 0 and the denominator is set to the given int\n- public destructor\n- public method `int getNum()` that returns the numerator\n- public method `int getDen()` that returns the denominator\n- public method `void setNum(int)` that sets the numerator\n- public method `void setDen(int)` that sets the denominator\n- public method `void set(int, int)` that sets both the numerator and denominator\n- public method `void set(Fraction)` that sets both the numerator and denominator of the given fraction\n- public method `Fraction add(Fraction)` that returns the sum of the two fractions\n- public method `Fraction subtract(Fraction)` that returns the difference of the two fractions\n- public method `Fraction multiply(Fraction)` that returns the product of the two fractions\n- public method `Fraction divide(Fraction)` that returns the quotient of the two fractions\n- public method `bool equals(Fraction)` that returns true if the two fractions are equal\n- public method `bool greaterThan(Fraction)` that returns true if the first fraction is greater than the second\n- public method `bool lessThan(Fraction)` that returns true if the first fraction is less than the second\n- public method `bool greaterThanOrEqualTo(Fraction)` that returns true if the first fraction is greater than or equal to the second\n- public method `bool lessThanOrEqualTo(Fraction)` that returns true if the first fraction is less than or equal to the second\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "condition_to_capnp", "docstring": "// ops vectors when the current query condition.", "code": "Status reader_to_capnp(\n    const Query& query,\n    const Reader& reader,\n    capnp::QueryReader::Builder* reader_builder) {\n  const auto& array_schema = query.array_schema();\n\n  // Subarray layout\n  const auto& layout = layout_str(query.layout());\n  reader_builder->setLayout(layout);\n\n  // Subarray\n  auto subarray_builder = reader_builder->initSubarray();\n  RETURN_NOT_OK(\n      subarray_to_capnp(array_schema, query.subarray(), &subarray_builder));\n\n  // Read state\n  RETURN_NOT_OK(read_state_to_capnp(array_schema, reader, reader_builder));\n\n  const auto& condition = query.condition();\n  if (condition.has_value()) {\n    auto condition_builder = reader_builder->initCondition();\n    RETURN_NOT_OK(condition_to_capnp(condition.value(), &condition_builder));\n  }\n\n  // If stats object exists set its cap'n proto object\n  stats::Stats* stats = reader.stats();\n  if (stats != nullptr) {\n    auto stats_builder = reader_builder->initStats();\n    RETURN_NOT_OK(stats_to_capnp(*stats, &stats_builder));\n  }\n\n  return Status::Ok();\n}", "seed": "138", "concepts": ["bit operations", "operator overloading"], "instruction": "Write a C++ class `Fraction` that implements a fraction with the following interface:\n- public constructor that takes two ints: numerator and denominator\n- public constructor that takes a single int: the numerator is set to 0 and the denominator is set to the given int\n- public destructor\n- public method `int getNum()` that returns the numerator\n- public method `int getDen()` that returns the denominator\n- public method `void setNum(int)` that sets the numerator\n- public method `void setDen(int)` that sets the denominator\n- public method `void set(int, int)` that sets both the numerator and denominator\n- public method `void set(Fraction)` that sets both the numerator and denominator of the given fraction\n- public method `Fraction add(Fraction)` that returns the sum of the two fractions\n- public method `Fraction subtract(Fraction)` that returns the difference of the two fractions\n- public method `Fraction multiply(Fraction)` that returns the product of the two fractions\n- public method `Fraction divide(Fraction)` that returns the quotient of the two fractions\n- public method `bool equals(Fraction)` that returns true if the two fractions are equal\n- public method `bool greaterThan(Fraction)` that returns true if the first fraction is greater than the second\n- public method `bool lessThan(Fraction)` that returns true if the first fraction is less than the second\n- public method `bool greaterThanOrEqualTo(Fraction)` that returns true if the first fraction is greater than or equal to the second\n- public method `bool lessThanOrEqualTo(Fraction)` that returns true if the first fraction is less than or equal to the second", "response": "```cpp\n#include <iostream>\n\nclass Fraction {\nprivate:\n    int num;\n    int den;\npublic:\n    Fraction(int i, int j) : num(i), den(j) { }\n    Fraction(int i) : num(0), den(i) { }\n    ~Fraction() { }\n\n    int getNum() const { return num; }\n    int getDen() const { return den; }\n    void setNum(int n) { num = n; }\n    void setDen(int d) { den = d; }\n    void set(int n, int d) { num = n; den = d; }\n    void set(const Fraction& f) { num = f.num; den = f.den; }\n\n    Fraction add(const Fraction& f) { return Fraction(num * f.den + den * f.num, den * f.den); }\n    Fraction subtract(const Fraction& f) { return Fraction(num * f.den - den * f.num, den * f.den); }\n    Fraction multiply(const Fraction& f) { return Fraction(num * f.num, den * f.den); }\n    Fraction divide(const Fraction& f) { return Fraction(num * f.den, den * f.num); }\n\n    bool equals(const Fraction& f) const { return num * f.den == den * f.num; }\n    bool greaterThan(const Fraction& f) const { return num * f.den > den * f.num; }\n    bool lessThan(const Fraction& f) const { return num * f.den < den * f.num; }\n    bool greaterThanOrEqualTo(const Fraction& f) const { return num * f.den >= den * f.num; }\n    bool lessThanOrEqualTo(const Fraction& f) const { return num * f.den <= den * f.num; }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\n#include <iostream>\nint main() {\n    Fraction f(2, 3);\n    assert(f.getNum() == 2);\n    assert(f.getDen() == 3);\n    f.setNum(10);\n    f.setDen(20);\n    assert(f.getNum() == 10);\n    assert(f.getDen() == 20);\n\n    Fraction g(3);\n    assert(g.getNum() == 0);\n    assert(g.getDen() == 3);\n\n    Fraction h(f);\n    assert(h.getNum() == 2);\n    assert(h.getDen() == 3);\n\n    assert(f.add(g).getNum() == 13);\n    assert(f.subtract(g).getNum() == -7);\n    assert(f.multiply(g).getNum() == 6);\n    assert(f.divide(g).getNum() == 20);\n    assert(f.equals(g));\n    assert(f.greaterThan(h));\n    assert(f.lessThan(h));\n    assert(f.greaterThanOrEqualTo(h));\n    assert(f.lessThanOrEqualTo(h));\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that prints the first 100 prime numbers.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "TerminateLease", "docstring": "//", "code": "WINAPI \nGetLeasingApplicationExpirationTime(\n    __in HANDLE LeasingApplication,\n    __in LONG RequestTimeToLiveMilliseconds,\n    __out PLONG RemainingTimeToLiveMilliseconds,\n    __out PLONGLONG KernelCurrentTime\n    )\n\n/*++\n \nRoutine Description:\n \n    Gets the time for which the local application is guaranteed to have valid leases.\n \nParameters Description:\n \n    LeaseApplication - lease application handle.\n\n    RemainingTimeToLiveMilliseconds - on return, it contains the current lease \n        expiration time in milliseconds.\n\n    KernelCurrentTime - on return, contains the kernel system time\n \nReturn Value:\n \n    TRUE if arguments are valid, FALSE otherwise.\n \n--*/\n\n{\n    DWORD BytesReturned = 0;\n\n    GET_LEASING_APPLICATION_EXPIRATION_INPUT_BUFFER DeviceIoctlGetTTLInputBuffer;\n    ZeroMemory(&DeviceIoctlGetTTLInputBuffer, sizeof(GET_LEASING_APPLICATION_EXPIRATION_INPUT_BUFFER));\n    GET_LEASING_APPLICATION_EXPIRATION_OUTPUT_BUFFER DeviceIoctlGetTTLOutputBuffer;\n    ZeroMemory(&DeviceIoctlGetTTLOutputBuffer, sizeof(GET_LEASING_APPLICATION_EXPIRATION_OUTPUT_BUFFER));\n\n    //\n    // Check to see if the user mode lease layer \n    // has been successfully initialized.\n    //\n\n    if (!IsInitializeCalled)\n    {\n        AcquireExclusiveLock lock(*LeaseLayerLock);\n        {\n            if (!IsInitializeCalled)\n            {\n                InitializeLeaseLayer();\n                IsInitializeCalled = TRUE;\n            }\n        }\n    }\n\n    if (!IsLeaseLayerInitialized()) {\n\n        return FALSE;\n    }\n\n    //\n    // Check arguments.\n    //\n    if (NULL == RemainingTimeToLiveMilliseconds ||\n        NULL == KernelCurrentTime ||\n        NULL == LeasingApplication ||\n        INVALID_HANDLE_VALUE == LeasingApplication\n        ) {\n\n        SetLastError(ERROR_INVALID_PARAMETER);\n\n        return FALSE;\n    }\n\n    //\n    // Populate device IOCTL input buffer.\n    //\n    DeviceIoctlGetTTLInputBuffer.LeasingApplicationHandle = LeasingApplication;\n    DeviceIoctlGetTTLInputBuffer.RequestTimeToLive = RequestTimeToLiveMilliseconds;\n\n    if (RequestTimeToLiveMilliseconds > 0)\n    {\n        LeaseLayerEvents.GetContainerLeasingTTL(LONGLONG(LeasingApplication), RequestTimeToLiveMilliseconds);\n    }\n\n    //\n    // Send the add leasing application Device IOCTL.\n    //\n    auto DeviceIoctlReturn = DeviceIoControl(\n        IOCTL_GET_LEASING_APPLICATION_EXPIRATION_TIME,\n        &DeviceIoctlGetTTLInputBuffer,\n        sizeof(GET_LEASING_APPLICATION_EXPIRATION_INPUT_BUFFER),\n        &DeviceIoctlGetTTLOutputBuffer, \n        sizeof(GET_LEASING_APPLICATION_EXPIRATION_OUTPUT_BUFFER),\n        &BytesReturned);\n    *KernelCurrentTime = DeviceIoctlGetTTLOutputBuffer.KernelSystemTime;\n    *RemainingTimeToLiveMilliseconds = DeviceIoctlGetTTLOutputBuffer.TimeToLive;\n    //\n    // Check return code of DeviceIoControl.\n    //\n    if (NT_SUCCESS(DeviceIoctlReturn)) {\n        //\n        // We are expecting non-empty output buffer.\n        //\n        ASSERT_IFNOT(\n            sizeof(GET_LEASING_APPLICATION_EXPIRATION_OUTPUT_BUFFER) == BytesReturned,\n            \"GetLeasingApplicationExpirationTime IOCTL return size is wrong \");\n        ASSERT_IFNOT(0 <= *RemainingTimeToLiveMilliseconds, \"GetLeasingApplicationExpirationTime RemainingTimeToLiveMilliseconds < 0 \");\n\n        return TRUE;\n    }\n\n    return FALSE;\n}", "seed": "140", "concepts": ["integer division"], "instruction": "Write a C++ program that prints the first 100 prime numbers.", "response": "```cpp\n#include <iostream>\n#include <vector>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> primes;\n    for (int i = 2; primes.size() < 100; ++i) {\n        if (isPrime(i)) primes.push_back(i);\n    }\n    for (int p : primes) {\n        std::cout << p << std::endl;\n    }\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    // TODO\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ function `average` that returns the average of all elements in an array of integers.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "Max", "docstring": "//\u6c42n\u4e2a\u6570\u7684max ", "code": "void push_down(Splay *x){//\u4e0b\u653e\u6807\u8bb0 \n\tif(x==null)return;\n\tif(x->rev){//\u533a\u95f4\u7ffb\u8f6c \n\t\tx->rev=0,x->son[0]->rev^=1,x->son[1]->rev^=1;\n\t\tswap(x->son[0],x->son[1]),swap(x->maxl,x->maxr);\n\t}\n\tif(x->same){//\u533a\u95f4\u8d4b\u503c \n\t\tx->same=0,x->son[0]->key=x->son[1]->key=x->key;\n\t\tx->son[0]->same=x->son[1]->same=1;\n\t\tx->sum=x->key*x->size;\n\t\tx->maxl=x->maxr=x->maxt=(x->key>0?x->sum:x->key);\n\t}\n}", "seed": "141", "concepts": ["average", "math", "summation"], "instruction": "Create a C++ function `average` that returns the average of all elements in an array of integers.", "response": "```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& arr) {\n    int sum = 0;\n    for (int i : arr) {\n        sum += i;\n    }\n    return double(sum) / arr.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = average({1, 2, 3});\n    assert(res == 2.0);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nImplement a C++ class `Expression` that evaluates a mathematical expression. The class should have the following functions:\n\n- `evaluate`: Takes in a vector of strings representing the expression. The strings can be numbers, operators, and parentheses. Operators include `+`, `-`, `*`, `/`, `^`. Parentheses have the form `()`. For example, the expression `(1+2)*3` can be represented as `{\"(\", \"1\", \"+\", \"2\", \")\", \"*\", \"3\"}`.\n- `getPrecedence`: Takes in a string representing an operator. Returns an integer representing the precedence of that operator. The operators `+`, `-`, `*`, `/`, `^` have a precedence of 1, 2, 3, 4, and 5, respectively.\n- `evaluateRPN`: Takes in a vector of strings representing the reverse-polish notation of an expression. The strings can be numbers, operators, and parentheses. Operators include `+`, `-`, `*`, `/`, `^`. Parentheses have the form `()`. For example, the expression `1+2*3` can be represented as `{\"1\", \"2\", \"3\", \"*\", \"+\"}`. Returns the evaluation of the expression.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "BubbleSort", "docstring": "//sorting", "code": "int main(){\n\tint x = 8;\n\tint arrAngka[] = {5,34,32,25,75,42,22,2};\n\n\tcout << \"Data Sebelum Diurutkan\"<<endl;\n\tfor (int i = 0; i < 8; i++)\n\t{\n\t\tcout<<arrAngka[i]<<\"  \";\n\t}\n\tcout<<endl<<endl;\n\tcout << \"Data Sebelum Diurutkan\"<<endl;\n\tBubbleSort(arrAngka,x);\n\t// SelectionSort(arrAngka,x);\n\tcout<<endl;\n\treturn 0;\n}", "seed": "147", "concepts": ["expression evaluation"], "instruction": "Implement a C++ class `Expression` that evaluates a mathematical expression. The class should have the following functions:\n\n- `evaluate`: Takes in a vector of strings representing the expression. The strings can be numbers, operators, and parentheses. Operators include `+`, `-`, `*`, `/`, `^`. Parentheses have the form `()`. For example, the expression `(1+2)*3` can be represented as `{\"(\", \"1\", \"+\", \"2\", \")\", \"*\", \"3\"}`.\n- `getPrecedence`: Takes in a string representing an operator. Returns an integer representing the precedence of that operator. The operators `+`, `-`, `*`, `/`, `^` have a precedence of 1, 2, 3, 4, and 5, respectively.\n- `evaluateRPN`: Takes in a vector of strings representing the reverse-polish notation of an expression. The strings can be numbers, operators, and parentheses. Operators include `+`, `-`, `*`, `/`, `^`. Parentheses have the form `()`. For example, the expression `1+2*3` can be represented as `{\"1\", \"2\", \"3\", \"*\", \"+\"}`. Returns the evaluation of the expression.", "response": "```cpp\n#include <vector>\n#include <string>\n#include <stack>\n#include <unordered_map>\n\nclass Expression {\n  public:\n    int evaluate(const std::vector<std::string>& tokens) {\n        std::stack<int> stack;\n        for (const std::string& token : tokens) {\n            if (token == \"*\") {\n                int b = stack.top(); stack.pop();\n                int a = stack.top(); stack.pop();\n                stack.push(a * b);\n            } else if (token == \"/\") {\n                int b = stack.top(); stack.pop();\n                int a = stack.top(); stack.pop();\n                stack.push(a / b);\n            } else if (token == \"+\") {\n                int b = stack.top(); stack.pop();\n                int a = stack.top(); stack.pop();\n                stack.push(a + b);\n            } else if (token == \"-\") {\n                int b = stack.top(); stack.pop();\n                int a = stack.top(); stack.pop();\n                stack.push(a - b);\n            } else if (token == \"^\") {\n                int b = stack.top(); stack.pop();\n                int a = stack.top(); stack.pop();\n                stack.push(a ^ b);\n            } else {\n                stack.push(std::stoi(token));\n            }\n        }\n        return stack.top();\n    }\n  private:\n    static std::unordered_map<std::string, int> precedence;\n};\n\nstd::unordered_map<std::string, int> Expression::precedence = {\n    {\"+\", 1}, {\"-\", 1}, {\"*\", 2}, {\"/\", 2}, {\"^\", 3}\n};\n\nint Expression::evaluateRPN(const std::vector<std::string>& tokens) {\n    std::stack<int> stack;\n    for (const std::string& token : tokens) {\n        if (precedence.count(token)) {\n            int b = stack.top(); stack.pop();\n            int a = stack.top(); stack.pop();\n            stack.push(a + b * precedence[token]);\n        } else {\n            stack.push(std::stoi(token));\n        }\n    }\n    return stack.top();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = Expression().evaluate({\"1\", \"2\", \"3\", \"*\", \"+\"});\n    assert(result == 7);\n\n    result = Expression().evaluate({\"(\", \"1\", \"+\", \"2\", \")\", \"*\", \"3\"});\n    assert(result == 9);\n\n    result = Expression().evaluate({\"1\", \"2\", \"3\", \"+\", \"*\", \"4\", \"+\"});\n    assert(result == 10);\n\n    result = Expression().evaluate({\"2\", \"1\", \"+\", \"3\", \"*\"});\n    assert(result == 9);\n\n    result = Expression().evaluate({\"2\", \"1\", \"-\", \"3\", \"*\"});\n    assert(result == 1);\n\n    result = Expression().evaluate({\"2\", \"1\", \"/\", \"3\", \"*\"});\n    assert(result == 2);\n\n    result = Expression().evaluate({\"2\", \"1\", \"^\", \"3\", \"*\"});\n    assert(result == 8);\n\n    result = Expression().evaluate({\"(\", \"1\", \"+\", \"2\", \")\", \"*\", \"3\", \"*\", \"4\", \"+\"});\n    assert(result == 18);\n\n    result = Expression().evaluate({\"(\", \"1\", \"+\", \"2\", \")\", \"*\", \"(\", \"3\", \"+\", \"4\", \")\"}).evaluate({\n        \"(\", \"1\", \"+\", \"2\", \")\", \"*\", \"3\", \"+\", \"4\", \")\"\n    });\n    assert(result == 9);\n\n    result = Expression().evaluate({\n        \"(\", \"1\", \"+\", \"2\", \")\", \"*\", \"(\", \"3\", \"+\", \"4\", \")\", \"*\", \"(\", \"5\", \"+\", \"6\", \")\"\n    }).evaluate({\n        \"(\", \"1\", \"+\", \"2\", \")\", \"*\", \"(\", \"3\", \"+\", \"4\", \")\", \"*\", \"(\", \"5\", \"+\", \"6\", \")\"\n    });\n    assert(result == 104);\n\n    std::vector<std::string> tokens = {\"1\", \"2\", \"3\", \"*\", \"+\", \"4\", \"-\", \"5\", \"/\"};\n    assert(Expression().evaluate(tokens) == 1);\n\n    tokens = {\"1\", \"2\", \"3\", \"*\", \"+\", \"4\", \"-\", \"5\", \"/\"};\n    assert(Expression().evaluateRPN(tokens) == 1);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `isEven` that takes a positive integer argument and returns `true` if the number is even, and `false` otherwise.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "SEXYHOOK_BEGIN", "docstring": "//\u4eee\u60f3\u30e1\u30bd\u30c3\u30c9", "code": "SEXYHOOK_BEGIN(int,SEXYHOOK_CLASS,&Child::g,())\n\t\t\t{\n\t\t\t\treturn 103;\t//Child::g\n\t\t\t}", "seed": "151", "concepts": ["bit manipulation", "logical operators", "modulo", "iteration", "bit shifting"], "instruction": "Write a C++ function `isEven` that takes a positive integer argument and returns `true` if the number is even, and `false` otherwise.", "response": "```cpp\nbool isEven(int n) {\n    return n % 2 == 0;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isEven(2) == true);\n    assert(isEven(5) == false);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nGiven the following code in a C++ file, what is the output?\n\n``` c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n  int N = 1024;\n\n  cout << (N & 15) << endl;\n  cout << (N / 16) << endl;\n  cout << (N << 4) << endl;\n  cout << (N >> 4) << endl;\n\n  cout << ((N << 4) - N) << endl;\n  cout << ((N + N) / 2) << endl;\n  cout << ((N / 2) + (N >> 1)) << endl;\n  cout << ((N << 2) - N) << endl;\n\n  return 0;\n}\n```\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "MimeOleGetContentTypeExt", "docstring": "// Done\r", "code": "MIMEOLEAPI MimeOleVariantFree(LPPROPVARIANT pProp)\r\n{\r\n    // Locals\r\n    HRESULT     hr=S_OK;\r\n\r\n    // Invalid Arg\r\n    Assert(pProp);\r\n\r\n    // Handle Variant Type...\r\n    switch(pProp->vt)\r\n    {\r\n    case VT_NULL:\r\n    case VT_EMPTY:\r\n    case VT_ILLEGAL:\r\n    case VT_UI1:\r\n    case VT_I2:\r\n    case VT_UI2:\r\n    case VT_I4:\r\n    case VT_UI4:\r\n    case VT_I8:\r\n    case VT_UI8:\r\n    case VT_R4:\r\n    case VT_R8:\r\n    case VT_CY:\r\n    case VT_DATE:\r\n    case VT_BOOL:\r\n    case VT_ERROR:\r\n    case VT_FILETIME:\r\n        break;\r\n\r\n    case VT_CF:\r\n    case VT_CLSID:\r\n    case VT_LPWSTR:\r\n    case VT_LPSTR:\r\n        if ((LPVOID)pProp->pszVal != NULL)\r\n            MemFree((LPVOID)pProp->pszVal);\r\n        break;\r\n\r\n    case VT_BLOB:\r\n        if (pProp->blob.pBlobData)\r\n            MemFree(pProp->blob.pBlobData);\r\n        break;\r\n\r\n    case VT_STREAM:\r\n        if (pProp->pStream)\r\n            pProp->pStream->Release();\r\n        break;\r\n\r\n    case VT_STORAGE:\r\n        if (pProp->pStorage)\r\n            pProp->pStorage->Release();\r\n        break;\r\n\r\n    default:\r\n        Assert(FALSE);\r\n        hr = TrapError(E_INVALIDARG);\r\n        break;\r\n    }\r\n\r\n    // Init\r\n    MimeOleVariantInit(pProp);\r\n\r\n    // Done\r\n    return hr;\r\n}", "seed": "153", "concepts": ["modulo", "integer division", "reverse engineering"], "instruction": "Given the following code in a C++ file, what is the output?\n\n``` c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n  int N = 1024;\n\n  cout << (N & 15) << endl;\n  cout << (N / 16) << endl;\n  cout << (N << 4) << endl;\n  cout << (N >> 4) << endl;\n\n  cout << ((N << 4) - N) << endl;\n  cout << ((N + N) / 2) << endl;\n  cout << ((N / 2) + (N >> 1)) << endl;\n  cout << ((N << 2) - N) << endl;\n\n  return 0;\n}\n```", "response": "```\n0\n1\n1024\n256\n1024\n512\n256\n0\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    // check the output here\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ program to solve the [24 Game](https://en.wikipedia.org/wiki/24_Game) using a stack and a binary search tree. The program should return all possible solutions to the 24 game, and should be able to solve the game using any of 3 or more of the 4 given input options.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "citanje_trajanja_poslova", "docstring": "//citanje datoteke red po red", "code": "void citanje_zavrsetaka_poslova(int N){\n\n\t//varijabla za u\u010ditavanje redova\n\tstring redak;\n\t//brojac redaka\n\tint brojac=0;\n\t//pocetna vrijednost u datoteci\n\tint redovi, kolone;\n\t//broj poslova u ovom ispitivanju\n\tint broj_aktivnih_poslova=vektor_poslova[N];\n\n\t//ime glavne ulazne datoteke\n\tifstream ulazna(zavrsetci_poslova.c_str());\n\n\tif(!ulazna){\n\t\tcout<<\"Pogreska prilikom otvaranja datoteke! Datoteka \"<<dolasci_poslova<<\" nije uspjesno otvorena ili se ne nalazi u trenutnom direktoriju\"<<endl;\n\t\treturn;\n\t}\n\n\t//citanje datoteke red po red\n\twhile(getline(ulazna,redak)){\n\n\t\tstring poms;\n\t\tstringstream sTok(redak);\n\t\t//ucitavam sTok u poms\n\t\tint pomi;\n\n\t\tif(brojac==0){\n\t\t\tsTok>>redovi;\n\t\t\tsTok>>kolone;\n\n\t\t\tif((redovi!=konstante.broj_skupova) || (kolone!=konstante.max_br_poslova)){\n\t\t\t\tcout<<\"Procitana datoteka nije kompatibilna sa zadanim problemom. Prekid rada.\"<<endl;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif(brojac==(N+1)){\n\t\t\tint i=0;\n\t\t\twhile(sTok>>pomi){\n\t\t\t\tposlovi[i].Deadline=pomi;\n\t\t\t\ti++;\n\n\t\t\t\tif(i==broj_aktivnih_poslova)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tbrojac++;\n\t}\n}", "seed": "155", "concepts": ["stack", "BST", "red-black tree"], "instruction": "Create a C++ program to solve the [24 Game](https://en.wikipedia.org/wiki/24_Game) using a stack and a binary search tree. The program should return all possible solutions to the 24 game, and should be able to solve the game using any of 3 or more of the 4 given input options.", "response": "```cpp\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <algorithm>\n\nstd::vector<std::vector<int>> solve24(const std::vector<int>& nums) {\n    std::set<std::vector<int>> seen;\n    std::stack<std::vector<int>> q;\n\n    if (nums.size() == 4) {\n        q.push(nums);\n    } else {\n        for (int i = 0; i < 4; ++i) {\n            for (int j = i + 1; j < 4; ++j) {\n                std::vector<int> a = nums;\n                std::vector<int> b(a.begin(), a.begin() + i);\n                b.insert(b.end(), a.begin() + j, a.end());\n                std::vector<int> c(b.begin() + i, b.begin() + j);\n                c.insert(c.end(), b.begin(), b.begin() + i);\n                c.insert(c.end(), b.begin() + j, b.end());\n                std::vector<int> d(c.begin() + i, c.begin() + j);\n                d.insert(d.end(), c.begin(), c.begin() + i);\n                d.insert(d.end(), c.begin() + j, c.end());\n                std::vector<int> e(d.begin() + i, d.begin() + j);\n                e.insert(e.end(), d.begin(), d.begin() + i);\n                e.insert(e.end(), d.begin() + j, d.end());\n                q.push(c);\n                q.push(d);\n                q.push(e);\n            }\n        }\n    }\n\n    std::vector<std::vector<int>> res;\n    while (!q.empty()) {\n        auto v = q.top();\n        q.pop();\n        if (seen.find(v) == seen.end()) {\n            seen.insert(v);\n            if (std::abs(v[0] - 24.0) < 1e-6) {\n                res.push_back(v);\n            } else {\n                for (int i = 0; i < 4; ++i) {\n                    for (int j = i + 1; j < 4; ++j) {\n                        std::vector<int> tmp(v);\n                        tmp[i] = tmp[i] + tmp[j];\n                        q.push(tmp);\n                        tmp[j] = tmp[i] - tmp[j];\n                        q.push(tmp);\n                        tmp[i] = tmp[i] * tmp[j];\n                        q.push(tmp);\n                        if (tmp[j] != 0) {\n                            tmp[j] = tmp[i] / tmp[j];\n                        }\n                        q.push(tmp);\n                    }\n                }\n            }\n        }\n    }\n    return res;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = solve24({1, 2, 3, 4});\n    assert(res.size() == 1);\n    assert(res[0] == std::vector<int>({4, 1, 1, 2}));\n\n    res = solve24({2, 1, 1, 4});\n    assert(res.size() == 2);\n    assert(res[0] == std::vector<int>({4, 1, 1, 1}));\n    assert(res[1] == std::vector<int>({4, 1, 1, 2}));\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ program to sum the integers from 1 to 100.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "filter", "docstring": "//filtering is skipped if s==0.0", "code": "void filter(int w,int h,T* src,T* dst)\n\t{\n\t\tif(w<=4.0*sx || h<=4.0*sy)\n\t\t\tthrow std::invalid_argument(\"\\'sx\\' and \\'sy\\' should be less than about w/4 or h/4!\");\n\t\t\n\t\t//filtering is skipped if s==0.0\n\t\tif(sx==0.0 && sy==0.0)\n\t\t\treturn;\n\t\telse if(sx==0.0)\n\t\t\tfilter_v<T>(w,h,src,dst);\n\t\telse if(sy==0.0)\n\t\t\tfilter_h<T>(w,h,src,dst);\n\t\telse\n\t\t{\n\t\t\tfilter_v<T>(w,h,src,dst);\n\t\t\tfilter_h<T>(w,h,dst,dst); //only filter_h() allows src==dst.\n\t\t}\n\t}", "seed": "167", "concepts": ["integer summation", "loop condition", "arithmetic operations"], "instruction": "Create a C++ program to sum the integers from 1 to 100.", "response": "```cpp\n#include <iostream>\n\nint main() {\n    int sum = 0;\n    for (int i = 1; i <= 100; ++i) {\n        sum += i;\n    }\n    std::cout << sum << std::endl;\n}\n```\n</response>\n\n<tests>"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ function `isPrime` that tests if a number is prime.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "demosaicb_rd1_select", "docstring": "//__VIVADO_SYNTH__", "code": "inline hw_uint<16> demosaicb_rd10_select(denoise_cache& denoise, int d0, int d1) {\n#ifdef __VIVADO_SYNTH__\n#endif //__VIVADO_SYNTH__\n  // demosaicb_rd10 read pattern: { demosaicb_update_0[d0, d1] -> denoise[2d0, d1] : 0 <= d0 <= 960 and 0 <= d1 <= 1081 }\n  // Read schedule : { demosaicb_update_0[d0, d1] -> [3 + d1, 2 + d0, 4] : 0 <= d0 <= 960 and 0 <= d1 <= 1081 }\n  // Write schedule: { denoise_update_0[d0, d1] -> [2 + d1, 1 + d0, 3] : -1 <= d0 <= 961 and -1 <= d1 <= 1082 }\n  // DD fold: { demosaicb_update_0[d0, d1] -> 964 : 0 <= d0 <= 960 and 0 <= d1 <= 1081 }\n  auto value_denoise_denoise_update_0_write0 = denoise.denoise_denoise_update_0_write0_merged_banks_9.peek_964();\n  return value_denoise_denoise_update_0_write0;\n#ifndef __VIVADO_SYNTH__\n\tcout << \"Error: Unsupported offsets: \" << \" d0 = \" << d0  << \" d1 = \" << d1  << endl;\n\tassert(false);\n\treturn 0;\n#endif //__VIVADO_SYNTH__\n}", "seed": "169", "concepts": ["modular arithmetic", "integer division", "bitwise operators"], "instruction": "Create a C++ function `isPrime` that tests if a number is prime.", "response": "```cpp\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(7));\n    assert(!isPrime(8));\n    assert(!isPrime(1));\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ function `isPowerOfTwo` that returns true if the given integer is a power of 2.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "readAttributeHeader", "docstring": "//size of header attribute = 22", "code": "int checkCondition(int flags,  int value_of_flags){ // Ham kiem tra dieu kien: Chi xuat neu la tap tin archieve hoac thu muc + tap tin chua bi xoa\n    if (flags != 0 && flags != 2  && (value_of_flags == 32 || value_of_flags == 268435456)) {\n        return 1;\n     }\n    return 0;\n}", "seed": "170", "concepts": ["bit manipulation", "bitwise operators"], "instruction": "Create a C++ function `isPowerOfTwo` that returns true if the given integer is a power of 2.", "response": "```cpp\nbool isPowerOfTwo(int n) {\n    if (n < 1) return false;\n    while (n > 1) {\n        if (n % 2 != 0) return false;\n        n /= 2;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPowerOfTwo(1) == true);\n    assert(isPowerOfTwo(2) == true);\n    assert(isPowerOfTwo(4) == true);\n    assert(isPowerOfTwo(32) == true);\n    assert(isPowerOfTwo(256) == true);\n    assert(isPowerOfTwo(1024) == true);\n    assert(isPowerOfTwo(23) == false);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that takes two 8-bit integers and returns their bitwise AND.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "InitialChessType", "docstring": "//\u8bbe\u7f6e\u68cb\u8c31\u4fdd\u5b58\u76ee\u5f55", "code": "VOID SetChessType(int i,HMENU hMenu)\n{\t\n\tif(i==chesstype||i>=chessNum)//\u6240\u9009\u68cb\u79cd\u975e\u5f53\u524d\u68cb\u79cd\n\t\treturn;\n\tif (game.GameMode != -1)\n\t{\n\t\tMsgBox(\"\u5bf9\u5f08\u6b63\u5728\u8fdb\u884c\uff0c\u4e0d\u80fd\u8fdb\u884c\u68cb\u79cd\u5207\u6362\uff01\", \"error\", 0);\n\t\treturn;\n\t}\n\n\tdelete GameType;\n\n\tchesstype=i;//\u7f6e\u65b0\u8bed\u8a00\u6807\u5fd7\n\tstrcpy(gameSet.DefualtChess, chessType[chesstype].chessStr);\n\tfor(int i=0;i<chessNum;i++)\n\t{\n\t\tif(i==chesstype)\n\t\t\tCheckMenuItem(hMenu,CHESSTYPE+i,MF_CHECKED);\n\t\telse\n\t\t\tCheckMenuItem(hMenu,CHESSTYPE+i,MF_UNCHECKED);\t\t\t\n\t}\n\t//\u52a8\u6001\u83b7\u53d6DLL\u5e93\u4e2d\u51fd\u6570\u5730\u5740\n\tCT_InitModule = (_InitModule)GetProcAddress(chessType[chesstype].chessTP, \"InitModule\");\n\n\tGameType = (CChess*)CT_InitModule(MainWnd->hWnd, chessType[chesstype].LibPath);\n\tGameType->SetBoard(MainWnd->GetBoardPos());\n\tInvalidateRect(MainWnd->hWnd,NULL,false);\n\n\t//\u8bbe\u7f6e\u81ea\u52a8\u622a\u56fe\u76ee\u5f55\n\tstrcpy(gameSet.PrintScrDir,\".\\\\chess manual\\\\\");\n\tstrcat(gameSet.PrintScrDir,chessType[chesstype].chessStr);\n\tstrcat(gameSet.PrintScrDir,\"\\\\bmp\");\n\tCreateFolder(gameSet.PrintScrDir);\n\t//\u8bbe\u7f6e\u68cb\u8c31\u4fdd\u5b58\u76ee\u5f55\n\tstrcpy(gameSet.cmDir, \".\\\\chess manual\\\\\");\n\tstrcat(gameSet.cmDir,chessType[chesstype].chessStr);\n\tstrcat(gameSet.cmDir,\"\\\\sgf\");\n\tCreateFolder(gameSet.cmDir);\n\n\treturn;\n}", "seed": "172", "concepts": ["bitwise operations", "logical operations"], "instruction": "Write a C++ program that takes two 8-bit integers and returns their bitwise AND.", "response": "```cpp\nint bitwiseAnd(int x, int y) {\n    return x & y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(bitwiseAnd(0, 0) == 0);\n    assert(bitwiseAnd(1, 1) == 1);\n    assert(bitwiseAnd(2, 2) == 2);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `isEven` that returns true if and only if the specified integer is even.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "testing_level_set_max_min", "docstring": "//std::cout<<\"At time t = \"<<time<<\": MIN(phi) = \"<<ret1<<\" , MAX(phi) = \"<<ret0<< std::endl;", "code": "bool\npt_in_cell(const Mesh& msh, const point<T,2>& point_to_find, const typename Mesh::cell_type& cl)\n{\n    auto pts =points(msh,cl);\n \n    //std::cout<<\"Point to find \"<<std::setprecision(15)<<point_to_find.x()<<\", \"<<point_to_find.y()<<std::endl;\n\n   // std::cout<<\"Min x \"<<std::setprecision(15)<<pts[0].x()<<\", max x \"<<pts[1].x()<<std::endl;\n\n    //std::cout<<\"Min y \"<<std::setprecision(15)<<pts[1].y()<<\", max y \"<<pts[2].y()<<std::endl;\n\n    T epsilon = 1e-10;\n     if( (pts[0].x()-epsilon)<=point_to_find.x() && (pts[1].x()+epsilon)>=point_to_find.x() && (pts[1].y()-epsilon)<=point_to_find.y() && (pts[2].y()+epsilon)>=point_to_find.y() )\n         return TRUE;\n    else\n        return FALSE;\n  \n}", "seed": "173", "concepts": ["integer literals", "integer promotion"], "instruction": "Write a C++ function `isEven` that returns true if and only if the specified integer is even.", "response": "```cpp\nbool isEven(int n) {\n    return n % 2 == 0;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isEven(10) == true);\n    assert(isEven(3) == false);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `factorial` that returns the factorial of a non-negative integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "fireMenu", "docstring": "//Captures the number from the user of what ship to fire from", "code": "int moveMenu(void){\t\t\t//Creates the move menu, which asks the user which ship he wished to move.\n\t\tcout << \" Battleship    \" << endl << endl;\n\t\tcout << \" Please select the ship you would like to move.\" << endl<< endl;\n\t\tcout << \" 1. Carrier\" <<endl; \n\t\tcout << \" 2. Cruiser\" <<endl;\n\t\tcout << \" 3. Submarine\" << endl; \n\t\tcout << \" 4. Battleship\" << endl; \n\t\tcout << \" 5. Destroyer\" << endl;\n\n\t\tcin >> moveS;\t//Captures the number from the user of which ship to move\n\t\treturn moveS;\n}", "seed": "176", "concepts": ["return statement", "arithmetic operation"], "instruction": "Write a C++ function `factorial` that returns the factorial of a non-negative integer.", "response": "```cpp\nint factorial(int n) {\n    return n <= 0 ? 1 : n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(4) == 24);\n    assert(factorial(3) == 6);\n    assert(factorial(0) == 1);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a README.md file for a C++ repository.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "leaf_nodes", "docstring": "//If tree is not empty", "code": "int main()\n{\n    //Initialize tree as empty\n    treeNode *root;\n    root = NULL;\n    int n, data;\n    //Accept the no. of elements and elements as user input\n    scanf(\"%d\", &n);\n\n    for (int i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &data);\n        root = insertIntoTree(root, data);\n    }\n\n    printf(\"\\nNo. of leaf nodes in the binary search tree = %d\", leaf_nodes(root));\n    printf(\"\\n\");\n    return 0;\n}", "seed": "179", "concepts": ["README file", "Markdown syntax"], "instruction": "Create a README.md file for a C++ repository.", "response": "```\n# This is the title of the repository\n\nThis repository contains my C++ code samples.\n```\n</response>\n\n<tests>\n```cpp\n// This is a test\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `computeExponent` that performs the computation `a^b` without using the built-in function `pow` or the `*`, `/`, and `%` operators.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "MimeOleContentBaseFromBody", "docstring": "// Return\r", "code": "MIMEOLEAPI MimeOleGetRelatedSection(\r\n                                    IMimeMessageTree   *pTree,\r\n                                    boolean             fCreate,\r\n                                    LPHBODY             phRelated,\r\n                                    boolean            *pfMultiple)\r\n{\r\n    // Locals\r\n    HRESULT     hr=S_OK;\r\n    HBODY       hRoot;\r\n    FINDBODY    rFind;\r\n    PROPVARIANT rVariant;\r\n\r\n    // Invalid Args\r\n    if (NULL == pTree || NULL == phRelated)\r\n        return TrapError(E_INVALIDARG);\r\n\r\n    // Init\r\n    ZeroMemory(&rFind, sizeof(FINDBODY));\r\n\r\n    // Find first multipart/related section\r\n    rFind.pszPriType = (LPSTR)STR_CNT_MULTIPART;\r\n    rFind.pszSubType = (LPSTR)STR_SUB_RELATED;\r\n\r\n    // Init\r\n    if (pfMultiple)\r\n        *pfMultiple = FALSE;\r\n\r\n    // Find First\r\n    if (SUCCEEDED(pTree->FindFirst(&rFind, phRelated)))\r\n    {\r\n        // Is there another multipart/related section\r\n        if (pfMultiple && SUCCEEDED(pTree->FindNext(&rFind, &hRoot)))\r\n            *pfMultiple = TRUE;\r\n\r\n        // Done\r\n        goto exit;\r\n    }\r\n\r\n    // If no Create, fail\r\n    if (FALSE == fCreate)\r\n    {\r\n        hr = TrapError(MIME_E_NOT_FOUND);\r\n        goto exit;\r\n    }\r\n\r\n    // Get the Root Body\r\n    CHECKHR(hr = pTree->GetBody(IBL_ROOT, NULL, &hRoot));\r\n\r\n    // Setup Variant\r\n    rVariant.vt = VT_LPSTR;\r\n    rVariant.pszVal = (LPSTR)STR_MIME_MPART_RELATED;\r\n\r\n    // If Root is empty\r\n    if (pTree->IsBodyType(hRoot, IBT_EMPTY) == S_OK)\r\n    {\r\n        // Set the Content Type\r\n        CHECKHR(hr = pTree->SetBodyProp(hRoot, PIDTOSTR(PID_HDR_CNTTYPE), 0, &rVariant));\r\n\r\n        // Set phRelated\r\n        *phRelated = hRoot;\r\n    }\r\n\r\n    // If root is non-multipart, convert it to multipart/related\r\n    else if (pTree->IsContentType(hRoot, STR_CNT_MULTIPART, NULL) == S_FALSE)\r\n    {\r\n        // Conver this body to a multipart/related\r\n        CHECKHR(hr = pTree->ToMultipart(hRoot, STR_SUB_RELATED, phRelated));\r\n    }\r\n\r\n    // Otherwise, if root is multipart/mixed\r\n    else if (pTree->IsContentType(hRoot, NULL, STR_SUB_MIXED) == S_OK)\r\n    {\r\n        // Insert First Child of multipart/mixed as multipart/related\r\n        CHECKHR(hr = pTree->InsertBody(IBL_FIRST, hRoot, phRelated));\r\n\r\n        // Set the Content Type\r\n        CHECKHR(hr = pTree->SetBodyProp(*phRelated, PIDTOSTR(PID_HDR_CNTTYPE), 0, &rVariant));\r\n    }\r\n\r\n    // Otherwise, if root is multipart/alternative\r\n    else if (pTree->IsContentType(HBODY_ROOT, NULL, STR_SUB_ALTERNATIVE) == S_OK)\r\n    {\r\n        // Convert this body to a multipart/related (alternative becomes first child)\r\n        CHECKHR(hr = pTree->ToMultipart(HBODY_ROOT, STR_SUB_RELATED, phRelated));\r\n\r\n        // Should I set multipart/related; start=multipart/alternative at this point ?\r\n    }\r\n\r\n    // Otherwise, for unknown multipart content types\r\n    else\r\n    {\r\n        // Convert this body to a multipart/related\r\n        CHECKHR(hr = pTree->ToMultipart(HBODY_ROOT, STR_SUB_RELATED, phRelated));\r\n    }\r\n\r\nexit:\r\n    // Done\r\n    return hr;\r\n}", "seed": "181", "concepts": ["loop termination", "code complexity"], "instruction": "Write a C++ function `computeExponent` that performs the computation `a^b` without using the built-in function `pow` or the `*`, `/`, and `%` operators.", "response": "```cpp\nint computeExponent(int a, int b) {\n    if (b == 0) return 1;\n    if (b < 0) return 1 / computeExponent(a, -b);\n    int result = 1;\n    for (int i = 0; i < b; ++i) {\n        result *= a;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(computeExponent(2, 3) == 8);\n    assert(computeExponent(3, 4) == 81);\n    assert(computeExponent(10, 0) == 1);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that converts a given integer to its binary representation.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "CLOCK_InitUsb1Pfd", "docstring": "/* Set the new value and enable output. */", "code": "bool CLOCK_EnableUsbhs1PhyPllClock(clock_usb_phy_src_t src, uint32_t freq)\n{\n    const clock_usb_pll_config_t g_ccmConfigUsbPll = {.loopDivider = 0U, .src = 0};\n    CLOCK_InitUsb2Pll(&g_ccmConfigUsbPll);\n    USBPHY2->CTRL &= ~USBPHY_CTRL_SFTRST_MASK; /* release PHY from reset */\n    USBPHY2->CTRL &= ~USBPHY_CTRL_CLKGATE_MASK;\n\n    USBPHY2->PWD = 0;\n    USBPHY2->CTRL |= USBPHY_CTRL_ENAUTOCLR_PHY_PWD_MASK | USBPHY_CTRL_ENAUTOCLR_CLKGATE_MASK |\n                     USBPHY_CTRL_ENUTMILEVEL2_MASK | USBPHY_CTRL_ENUTMILEVEL3_MASK;\n\n    freq = (uint32_t)src;\n    freq++;\n    return true;\n}", "seed": "187", "concepts": ["bit manipulation", "arithmetic operations", "integer representation"], "instruction": "Write a C++ program that converts a given integer to its binary representation.", "response": "```cpp\n#include <string>\n#include <iostream>\n#include <sstream>\n\nstd::string toBinary(int n) {\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n\nint main() {\n    std::string str;\n    std::cout << \"Please enter an integer: \";\n    std::cin >> str;\n    std::cout << \"Binary representation: \" << toBinary(std::stoi(str)) << std::endl;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 6\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `valueInit` that initializes a variable to 0 using only integer literals and comments.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "ColumnsNO", "docstring": "//This part checks if all rows have equal number of elements", "code": "int main()\n{\n\tfloat MAT1[100][100], MAT2[100][100], MATRES[100][100], MAT1I[100][100], MAT2I[100][100], MATRESI[100][100]; //MAT1 is a matrix with m rows & n columns, MAT2 is a matrix with p rows and q columns\n\tstring strMAT1, strMAT2, strMATRES, operation;\n\tint m, n, p, q, checkinp, checkoperation, isComplex;\n\tfloat determinant;\n\tgetline(cin, strMAT1);\n\tm = RowsNO(strMAT1);\n\tn = ColumnsNO(strMAT1);\n\tcheckinp = CheckInput(strMAT1, m, n);\n\tif (checkinp == 0)\n\t{\n\t\tERROR\n\t}\n\tif (checkinp == 2)\n\t{\n\t\tisComplex = 1;\n\t}\n\tStringToArray(strMAT1, MAT1, MAT1I, m, n);\n\tgetline(cin, operation);\n\tif (operation.length() != 1)\n\t{\n\t\tERROR\n\t}\n\tswitch (operation[0])\n\t{\n\tcase '+':\n\t\tgetline(cin, strMAT2);\n\t\tp = RowsNO(strMAT2);\n\t\tq = ColumnsNO(strMAT2);\n\t\tcheckinp = CheckInput(strMAT2, p, q);\n\t\tStringToArray(strMAT2, MAT2, MAT2I, p, q);\n\t\tcheckoperation = AddorSubtract(MAT1, MAT1I, MAT2, MAT2I, MATRES, MATRESI, m, n, p, q, operation[0]);\n\t\tif (checkinp == 0 || checkoperation == 0)\n\t\t{\n\t\t\tERROR\n\t\t}\n\t\tstrMATRES = ArrayToString(MATRES, MATRESI, m, n);\n\t\tcout << strMATRES;\n\t\tbreak;\n\tcase '-':\n\t\tgetline(cin, strMAT2);\n\t\tp = RowsNO(strMAT2);\n\t\tq = ColumnsNO(strMAT2);\n\t\tcheckinp = CheckInput(strMAT2, p, q);\n\t\tStringToArray(strMAT2, MAT2, MAT2I, p, q);\n\t\tcheckoperation = AddorSubtract(MAT1, MAT1I, MAT2, MAT2I, MATRES, MATRESI, m, n, p, q, operation[0]);\n\t\tif (checkinp == 0 || checkoperation == 0)\n\t\t{\n\t\t\tERROR\n\t\t}\n\t\tstrMATRES = ArrayToString(MATRES, MATRESI, m, n);\n\t\tcout << strMATRES;\n\t\tbreak;\n\tcase '*':\n\t\tgetline(cin, strMAT2);\n\t\tp = RowsNO(strMAT2);\n\t\tq = ColumnsNO(strMAT2);\n\t\tcheckinp = CheckInput(strMAT2, m, n);\n\t\tStringToArray(strMAT2, MAT2, MAT2I, p, q);\n\t\tcheckoperation = Multiply(MAT1, MAT1I, MAT2, MAT2I, MATRES, MATRESI, m, n, p, q);\n\t\tif (checkinp == 0 || checkoperation == 0)\n\t\t{\n\t\t\tERROR\n\t\t}\n\t\tstrMATRES = ArrayToString(MATRES, MATRESI, m, q);\n\t\tcout << strMATRES;\n\t\tbreak;\n\tcase '^':\n\t\tif (m != n)\n\t\t{\n\t\t\tERROR\n\t\t}\n\t\tfloat power;\n\t\tcin >> power;\n\t\tif (power < 0 || power - (int)power != 0 || isComplex == 1)\n\t\t{\n\t\t\tERROR\n\t\t}\n\t\tfor (int i = 0; i < m; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t{\n\t\t\t\tMAT2[i][j] = MAT1[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 2; i <= power; i++)\n\t\t{\n\t\t\tMultiply(MAT2, MAT2I, MAT1, MAT1I, MATRES, MATRESI, m, m, m, m);\n\t\t\tfor (int i = 0; i < m; i++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t\t{\n\t\t\t\t\tMAT2[i][j] = MATRES[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstrMATRES = ArrayToString(MATRES, MAT1I, m, m);\n\t\tcout << strMATRES;\n\t\tbreak;\n\tcase 'T':\n\t\tif (isComplex == 1)\n\t\t{\n\t\t\tERROR\n\t\t}\n\t\tTranspose(MAT1, MATRES, m, n);\n\t\tstrMATRES = ArrayToString(MATRES, MAT1I, n, m);\n\t\tcout << strMATRES;\n\t\tbreak;\n\tcase 'D':\n\t\tcheckoperation = Determinant(MAT1, m, n, determinant);\n\t\tif (checkoperation == 0 || isComplex == 1)\n\t\t{\n\t\t\tERROR\n\t\t}\n\t\tcout << determinant;\n\t\tbreak;\n\tcase 'I':\n\t\tcheckoperation = Inverse(MAT1, MATRES, m, n);\n\t\tif (checkoperation == 0 || isComplex == 1)\n\t\t{\n\t\t\tERROR\n\t\t}\n\t\tstrMATRES = ArrayToString(MATRES, MAT1I, m, n);\n\t\tcout << strMATRES;\n\t\tbreak;\n\tcase '/':\n\t\tgetline(cin, strMAT2);\n\t\tp = RowsNO(strMAT2);\n\t\tq = ColumnsNO(strMAT2);\n\t\tcheckinp = CheckInput(strMAT2, p, q);\n\t\tStringToArray(strMAT2, MAT2, MAT2I, p, q);\n\t\tcheckoperation = Divide(MAT1, MAT2, MATRES, m, n, p, q);\n\t\tif (checkinp == 0 || checkoperation == 0 || isComplex == 1)\n\t\t{\n\t\t\tERROR\n\t\t}\n\t\tstrMATRES = ArrayToString(MATRES, MAT1I, m, q);\n\t\tcout << strMATRES;\n\t\tbreak;\n\tdefault: ERROR\n\t}\n\treturn 0;\n}", "seed": "188", "concepts": ["value initialization", "integer literals", "comment"], "instruction": "Write a C++ function `valueInit` that initializes a variable to 0 using only integer literals and comments.", "response": "```cpp\nint valueInit = 0; // Integer literal `0` is the only valid initializer.\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(valueInit == 0);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `nextPowerOfTwo` that returns the smallest power of two greater than or equal to its argument.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "CompressLz77", "docstring": "// |A| = 2", "code": "int main(int argv, char **args){\n\t//CompressDIR(\"./doc\", \"bb\");\n\t//DecompressDIR(\"bb\", \"./doc1\");\n\tif(argv == 4){\n\t\tif(strcmp(args[1], \"-c\") == 0) {\n\t\t\tIO::FastOutput Out(args[3], IO::_50MB_);\n\t\t\tCompress(args[2], Out);\n\t\t}\n\t\tif(strcmp(args[1], \"-d\") == 0) {\n\t\t\tIO::FastInput In(args[2], IO::_50MB_);\n\t\t\tDecompress(In, args[3]);\n\t\t}\n\n\t\tif(strcmp(args[1], \"-rc\") == 0 || strcmp(args[1], \"-cr\") == 0)\n\t\t\tCompressDIR(args[2], args[3]);\n\t\tif(strcmp(args[1], \"-rd\") == 0 || strcmp(args[1], \"-dr\") == 0)\n\t\t\tDecompressDIR(args[2], args[3]);\n\n\t\tif(strcmp(args[1], \"-fc\") == 0 || strcmp(args[1], \"-cf\") == 0)\n\t\t\tLZ77::CompressLz77(bitset<1024 * 32 * 8 + 1>(), args[2], args[3], 64, 1024 * 8);\n\t\tif(strcmp(args[1], \"-fd\") == 0 || strcmp(args[1], \"-df\") == 0) \n\t\t\tLZ77::DecompressLz77(bitset<1024 * 32 * 8 + 1>(), args[2], args[3]);\n\t}else {\n\t\tputs(\"Uesage:\");\n\t\tputs(\"-c file1 file2: \u8868\u793a\u5c06\u6587\u4ef61\u538b\u7f29\u4e3a\u6587\u4ef62, \u4f7f\u7528\u54c8\u592b\u66fc\u7f16\u7801\");\n\t\tputs(\"-d file1 file2: \u8868\u793a\u5c06\u6587\u4ef61\u89e3\u538b\u95ee\u6587\u4ef62, \u4f7f\u7528\u54c8\u592b\u66fc\u7f16\u7801\");\n\t\tputs(\"-fc file1 file2: \u8868\u793a\u5c06\u6587\u4ef61\u538b\u7f29\u4e3a\u6587\u4ef62, \u4f7f\u7528Lz77\u7b97\u6cd5 (\u614e\u7528, \u5f88\u6162, \u538b\u7f29\u7387\u6709\u65f6\u4e0d\u7406\u60f3)\");\n\t\tputs(\"-fd file1 file2: \u8868\u793a\u5c06\u6587\u4ef61\u89e3\u538b\u95ee\u6587\u4ef62, \u4f7f\u7528lz77\u7b97\u6cd5 (\u614e\u7528, \u5f88\u6162, \u538b\u7f29\u7387\u6709\u65f6\u4e0d\u7406\u60f3)\");\n\t}\n\treturn 0;\n}", "seed": "193", "concepts": ["bitwise operator", "logical operator", "shifting"], "instruction": "Write a C++ function `nextPowerOfTwo` that returns the smallest power of two greater than or equal to its argument.", "response": "```cpp\nint nextPowerOfTwo(int n) {\n    int val = 1;\n    while (val < n) {\n        val *= 2;\n    }\n    return val;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(nextPowerOfTwo(10) == 16);\n    assert(nextPowerOfTwo(15) == 16);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 9\n<instruction>\n\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "ProcessResponseLoadArmy", "docstring": "//army id = server_id * 100000 + sequece", "code": "int32_t ProcessResponseCreateArmy(SSMessageEntry& entry) {\n  MessageSSResponseCreateArmy* message =\n      static_cast<MessageSSResponseCreateArmy*>(entry.get());\n  if (!message) return ERR_INTERNAL;\n  int64_t player_id = message->master_id();\n  LogicPlayer* player = server->GetPlayerByID(player_id);\n  if (message->is_fail()) {\n    if (!player) {\n      ERROR_LOG(logger)(\"CreateArmy Fail, PlayerID:%ld, player not exist\", player_id);\n      return ERR_OK;\n    }\n    player->SendErrorCodeToClient(ERR_ARMY_NAME, MSG_CS_REQUEST_CREATE_ARMY);\n    return ERR_OK;\n  }\n  sy::ArmyInfo& info = *message->mutable_info();\n\n  //\u5728LogicServer\u91cc\u9762\u521b\u5efa\u519b\u56e2\n  info.set_level(1);\n  info.set_donate_time(GetVirtualSeconds());\n  server->AddArmy(info);\n  Army* army_info = server->GetArmyByID(info.army_id());\n  if (!army_info) {\n    ERROR_LOG(logger)(\"CreateArmy, InternalError\");\n    return ERR_INTERNAL;\n  }\n\n  //\u628a\u81ea\u5df1\u63d2\u5165\u5230\u519b\u56e2\u957f\u7684\u4f4d\u5b50\u4e0a\u9762\u53bb\n  sy::ArmyMemberInfo& member = *message->mutable_master();\n  member.set_army_id(info.army_id());\n  member.set_position(ARMY_POSITION_MASTER);\n  if (player) {\n    player->MakeArmyMemberInfo(&member);\n    player->UpdateArmyMemberInfo(member);\n  }\n  army_info->members().push_back(member);\n\n  if (player) {\n    player->ProcessResponseCreateArmy(info);\n  }\n  server->OnPlayerJoinArmy(player->uid(), army_info);\n\n  //\u66f4\u65b0\u73a9\u5bb6\u7684\u519b\u56e2\n  MessageSSOnJoinArmy update_army;\n  update_army.set_army_id(info.army_id());\n  update_army.set_player_id(member.player_id());\n  server->SendServerMessageToDB(MSG_SS_ON_JOIN_ARMY, &update_army);\n  return ERR_OK;\n}", "seed": "194", "concepts": [""], "instruction": "", "response": "</response>\n\n<tests>"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that outputs the next largest number (in string format) given a non-negative integer in base-10.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "getSoundBytes", "docstring": "//printf(\"getSoundBytes: \\n\");", "code": "BOOL InitMachine(void)\n{\n\tsnd_bSound = 1;\n\tXBuf = (unsigned char*)malloc(sizeof(char) * WIDTH * HEIGHT);\n\tif (!XBuf) {\n\t\treturn 0;\n\t}\n\t\n#ifdef SOUND\n\tInitSound(snd_bSound);\n#endif // SOUND\n\n#ifdef USE_JOYSTICK\n\tInitDInput();\n#endif // USE_JOYSTICK\n\n\t//InitInfo();\n\n\tbytes = (unsigned char*)malloc(WIDTH * HEIGHT * 4);\n\tsoundBytes = (short*)malloc(2048 * 4);\n\tsoundBytesWork = (short*)malloc(2048 * 4);\n\t\n\tfor (int n = 0; n < 256; n++) {\n\t\tPalTable[n] = 0xFF000000;\n\t\tPalTable[n] |= (((n >> 2) & 7) << 21);\n\t\tPalTable[n] |= ((n >> 5) << 13);\n\t\tPalTable[n] |= ((n & 3) << 6);\n\t}\n\n\treturn 1;\n}", "seed": "195", "concepts": ["magic number", "arithmetic calculation"], "instruction": "Write a C++ program that outputs the next largest number (in string format) given a non-negative integer in base-10.", "response": "```cpp\n#include <string>\n#include <vector>\n\nstd::string nextLargestNumber(int num) {\n    std::string s = std::to_string(num);\n    std::vector<int> digits;\n    for (char c : s) digits.push_back(c - '0');\n\n    for (int i = 0; i < (int)digits.size() - 1; i++) {\n        if (digits[i] < digits[i+1]) {\n            std::swap(digits[i], digits[i+1]);\n            break;\n        }\n    }\n\n    for (int i = 0; i < (int)digits.size() - 1; i++) {\n        if (digits[i] > digits[i+1]) {\n            std::swap(digits[i], digits[i+1]);\n            break;\n        }\n    }\n\n    std::string result;\n    for (int digit : digits) result.push_back('0' + digit);\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(nextLargestNumber(123) == \"123\");\n    assert(nextLargestNumber(1234) == \"1243\");\n    assert(nextLargestNumber(12345) == \"12345\");\n    assert(nextLargestNumber(987654321) == \"987654321\");\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `Math` that has functions `add`, `subtract`, `product`, and `quotient` that take two integer parameters and return their sum, difference, product, or quotient.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "CombineAllHeight", "docstring": "// \u5bf9tmpArr\u4e2d\u7684Z,\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f", "code": "BOOL IsBottomPlaneValid( CSmartLoop *pCutLoop, CSmartLoop *PlaneLoop, double dTol, double dRatio )\n{\n\t// \u5224\u65ad\u4e24\u4e2a\u73af\u7684\u91cd\u53e0\u7387\u6709\u591a\u5927\n\tdouble dLength = 0., dOverLap = 0. ;\n\tCSmartCurve *pCurve = PlaneLoop->m_pCurve ;\n\tfor( ; pCurve ; pCurve = pCurve->next )\n\t{\n\t\tdLength += pCurve->GetLength () ;\n\t}\n\t\n\tdouble dDist[2] = { 0., 0. } ;\n\tCSmartSect *pSect = PlaneLoop->GetSectHead () ;\n\tPNT2D start, end ;\n\tfor( ; pSect ; pSect = pSect->next )\n\t{\n\t\tpSect->GetEnd ( end ) ;\n\t\tpSect->GetStart ( start ) ;\n\n\t\tdDist[0] = MinDistPntAndContour( pCutLoop, start ) ;\n\t\tdDist[1] = MinDistPntAndContour( pCutLoop, end ) ;\n\t\tif( dDist[0] < dTol && dDist[1] < dTol )\n\t\t{\n\t\t\tdOverLap += pSect->GetLength () ;\n\t\t}\n\t}\n\tif( dOverLap / dLength > dRatio )\n\t\treturn FALSE ;\n\treturn TRUE ;\n}", "seed": "198", "concepts": ["if statement", "switch statement", "conditionals"], "instruction": "Create a C++ class `Math` that has functions `add`, `subtract`, `product`, and `quotient` that take two integer parameters and return their sum, difference, product, or quotient.", "response": "```cpp\nclass Math {\npublic:\n    int add(int a, int b) const {\n        return a + b;\n    }\n\n    int subtract(int a, int b) const {\n        return a - b;\n    }\n\n    int product(int a, int b) const {\n        return a * b;\n    }\n\n    int quotient(int a, int b) const {\n        return a / b;\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Math math;\n    assert(math.add(1, 2) == 3);\n    assert(math.subtract(1, 2) == -1);\n    assert(math.product(1, 2) == 2);\n    assert(math.quotient(1, 2) == 0);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ program that prints the number 110.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "demosaicb_rd12_select", "docstring": "//__VIVADO_SYNTH__", "code": "inline hw_uint<16> demosaicb_rd13_select(denoise_cache& denoise, int d0, int d1) {\n#ifdef __VIVADO_SYNTH__\n#endif //__VIVADO_SYNTH__\n  // demosaicb_rd13 read pattern: { demosaicb_update_0[d0, d1] -> denoise[1 + 2d0, d1] : 0 <= d0 <= 960 and 0 <= d1 <= 1081 }\n  // Read schedule : { demosaicb_update_0[d0, d1] -> [3 + d1, 2 + d0, 4] : 0 <= d0 <= 960 and 0 <= d1 <= 1081 }\n  // Write schedule: { denoise_update_0[d0, d1] -> [2 + d1, 1 + d0, 3] : -1 <= d0 <= 961 and -1 <= d1 <= 1082 }\n  // DD fold: { demosaicb_update_0[d0, d1] -> 964 : 0 <= d0 <= 960 and 0 <= d1 <= 1081 }\n  auto value_denoise_denoise_update_0_write1 = denoise.denoise_denoise_update_0_write1_merged_banks_9.peek_964();\n  return value_denoise_denoise_update_0_write1;\n#ifndef __VIVADO_SYNTH__\n\tcout << \"Error: Unsupported offsets: \" << \" d0 = \" << d0  << \" d1 = \" << d1  << endl;\n\tassert(false);\n\treturn 0;\n#endif //__VIVADO_SYNTH__\n}", "seed": "200", "concepts": ["constant integer literal", "uninitialized variable"], "instruction": "Create a C++ program that prints the number 110.", "response": "```cpp\n#include <iostream>\n\nint main() {\n    std::cout << 110;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(true);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `baseConvert` that converts a number in base-10 to another base.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "TEST_F", "docstring": "// AIA OCSP url is included, but does not return a successful ocsp response.", "code": "TEST_F(HTTPSHardFailTest, RevokedStapled) {\n  if (!SystemSupportsOCSPStapling()) {\n    LOG(WARNING)\n        << \"Skipping test because system doesn't support OCSP stapling\";\n    return;\n  }\n\n  if (!SystemSupportsHardFailRevocationChecking()) {\n    LOG(WARNING) << \"Skipping test because system doesn't support hard fail \"\n                 << \"revocation checking\";\n    return;\n  }\n\n  EmbeddedTestServer::ServerCertificateConfig cert_config;\n\n  // AIA OCSP url is included, but does not return a successful ocsp response.\n  cert_config.ocsp_config = EmbeddedTestServer::OCSPConfig(\n      EmbeddedTestServer::OCSPConfig::ResponseType::kTryLater);\n\n  cert_config.stapled_ocsp_config = EmbeddedTestServer::OCSPConfig(\n      {{OCSPRevocationStatus::REVOKED,\n        EmbeddedTestServer::OCSPConfig::SingleResponse::Date::kValid}});\n\n  CertStatus cert_status;\n  DoConnection(cert_config, &cert_status);\n\n  EXPECT_EQ(CERT_STATUS_REVOKED, cert_status & CERT_STATUS_ALL_ERRORS);\n  EXPECT_TRUE(cert_status & CERT_STATUS_REV_CHECKING_ENABLED);\n}", "seed": "203", "concepts": ["base conversion"], "instruction": "Write a C++ function `baseConvert` that converts a number in base-10 to another base.", "response": "```cpp\n#include <string>\n\nstd::string baseConvert(int n, int base) {\n    std::string result;\n    while (n != 0) {\n        int digit = n % base;\n        if (digit < 10) {\n            result += ('0' + digit);\n        } else {\n            result += ('A' + digit - 10);\n        }\n        n /= base;\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(baseConvert(10, 2) == \"1010\");\n    assert(baseConvert(10, 16) == \"A\");\n    assert(baseConvert(255, 16) == \"FF\");\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `digitDistance` that returns the sum of the absolute value of the difference between two given integers.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "vpgl_load_rational_camera_from_txt_process_cons", "docstring": "// label image", "code": "bool vpgl_load_rational_camera_from_txt_process(bprb_func_process& pro)\n{\n  if (pro.n_inputs()< 1) {\n    std::cout << \"lvpgl_load_rational_camera_from_txt_process: The input number should be 1\" << std::endl;\n    return false;\n  }\n\n  // get the inputs\n  std::string camera_filename = pro.get_input<std::string>(0);\n\n  vpgl_camera_double_sptr ratcam = read_rational_camera_from_txt<double>(camera_filename);\n\n  if ( !ratcam.as_pointer() ) {\n    std::cerr << \"Failed to load rational camera from file\" << camera_filename << std::endl;\n    return false;\n  }\n\n  pro.set_output_val<vpgl_camera_double_sptr>(0, ratcam);\n\n  return true;\n}", "seed": "204", "concepts": ["summation", "modular arithmetic"], "instruction": "Write a C++ function `digitDistance` that returns the sum of the absolute value of the difference between two given integers.", "response": "```cpp\n#include <algorithm>\n\nint digitDistance(int a, int b) {\n    int dist = 0;\n    for (int i = 0; i < 5; ++i) {\n        dist += std::abs((a % 10) - (b % 10));\n        a /= 10;\n        b /= 10;\n    }\n    return dist;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(digitDistance(12345, 10900) == 20);\n    assert(digitDistance(0, 1) == 1);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 4\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `powerOfTwo` that determines if a non-negative integer is a power of two.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "strip_chart_win1_canvas1_event_callback", "docstring": "/* gxv_end_connections */", "code": "Notify_value\nwin1_event_proc( Xv_window  win, Event *event,\n\t\t Notify_arg arg, Notify_event_type type)\n{\n\n  xv_get(win, XV_KEY_DATA, INSTANCE);\n  \n  switch(event_action(event)) {\n\n  case WIN_RESIZE:\n\n    // Release backing Pixmap\n\n    if(gd.back_xid) XFreePixmap(gd.dpy,gd.back_xid);\n    \n    // recompute sizes\n\n    gd.win_height =  xv_get(gd.Strip_chart_win1->win1,WIN_HEIGHT);\n    gd.win_width =  xv_get(gd.Strip_chart_win1->win1,WIN_WIDTH);\n    gd.plot_height = gd.win_height - gd.p->bottom_margin;\n    gd.plot_width = gd.win_width -  gd.p->right_margin;\n\n    // force a recalc on the times, and a retrieve\n\n    check_retrieve(true);\n    \n    if (gd.p->debug) {\n      cerr << \"Resizing window\" << endl;\n      cerr << \"  pixels_per_sec: \" << gd.pixels_per_sec << endl;\n      cerr << \"  win_height: \" << gd.win_height << endl;\n      cerr << \"  win_width: \" << gd.win_width << endl;\n      cerr << \"  plot_height: \" << gd.plot_height << endl;\n      cerr << \"  plot_width: \" << gd.plot_width << endl;\n      cerr << \"  Start time: \" << utimstr(gd.start_time) << endl;\n      cerr << \"  End   time: \" << utimstr(gd.end_time) << endl;\n    }\n\n    // create new backing Pixmap\n\n    gd.back_xid =  XCreatePixmap(gd.dpy, gd.canvas_xid,\n\t\t\t\t gd.win_width, gd.win_height,\n\t\t\t\t DefaultDepth(gd.dpy,0));\n\n    do_draw();\n\n    break;\n\n  default: {}\n\n  }\n  \n  \n  /* gxv_start_connections DO NOT EDIT THIS SECTION */\n  \n  /* gxv_end_connections */\n  \n  return notify_next_event_func(win, (Notify_event) event, arg, type);\n\n}", "seed": "205", "concepts": ["type casting", "integer operations"], "instruction": "Write a C++ function `powerOfTwo` that determines if a non-negative integer is a power of two.", "response": "```cpp\n#include <cmath>\n\nbool powerOfTwo(int n) {\n    return (n != 0 && (n & (n - 1)) == 0);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(powerOfTwo(1) == true);\n    assert(powerOfTwo(0) == true);\n    assert(powerOfTwo(4) == true);\n    assert(powerOfTwo(16) == true);\n    assert(powerOfTwo(23) == false);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nImplement a C++ function `power` that raises a number to a power using recursion.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "get_default_charset", "docstring": "// We are defaulting everything to Latin1 except JSON which is utf-8.", "code": "static endian_ness check_byte_order_mark(const utf16string &str)\n    {\n        if(str.empty())\n        {\n            return unknown;\n        }\n        const unsigned char *src = (const unsigned char *)&str[0];\n        \n        // little endian\n        if(src[0] == 0xFF && src[1] == 0xFE)\n        {\n            return little_endian;\n        }\n\n        // big endian\n        else if(src[0] == 0xFE && src[1] == 0xFF)\n        {\n            return big_endian;\n        }\n\n        return unknown;\n    }", "seed": "209", "concepts": ["none (code is self-explanatory)"], "instruction": "Implement a C++ function `power` that raises a number to a power using recursion.", "response": "```cpp\n#include <cmath>\n\nint power(int x, int n) {\n    if (n == 0) return 1;\n    return x * power(x, n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2, 0) == 1);\n    assert(power(2, 1) == 2);\n    assert(power(2, -1) == 0.5);\n    assert(power(2, 2) == 4);\n    assert(power(2, 3) == 8);\n    assert(power(2, 4) == 16);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `convertToDecimal` that converts a string of numeric characters into its equivalent decimal value.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "appd_iot_json_add_key_value", "docstring": "//add comma at the end if last operation is not start", "code": "appd_iot_error_code_t appd_iot_json_add_string_key_value\n(json_t* json, const char* key, const char* strval)\n{\n  //do escape, get the size\n  return appd_iot_json_add_key_value(json, key, (void*)strval, APPD_IOT_STRING);\n}", "seed": "210", "concepts": ["string conversion", "integer conversion", "string operations"], "instruction": "Write a C++ function `convertToDecimal` that converts a string of numeric characters into its equivalent decimal value.", "response": "```cpp\nint convertToDecimal(const std::string& numStr) {\n    int result = 0;\n    int exponent = 0;\n    for (int i = numStr.length() - 1; i >= 0; --i) {\n        if (numStr[i] < '0' || numStr[i] > '9') return 0;\n        result += (numStr[i] - '0') * std::pow(10, exponent);\n        exponent++;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(convertToDecimal(\"123\") == 123);\n    assert(convertToDecimal(\"123456\") == 123456);\n    assert(convertToDecimal(\"0\") == 0);\n    assert(convertToDecimal(\"10\") == 10);\n    assert(convertToDecimal(\"100\") == 100);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ class `Fraction` that represents a fraction. The class should have two data members, an integer numerator and an integer denominator. It should also have two member functions, `setNumerator` for setting the numerator and `setDenominator` for setting the denominator.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "lua_ref_create_module", "docstring": "// \u8ba9\u5185\u5b58\u5757\u6307\u5411\u4e00\u4e2aRef\u5bf9\u8c61", "code": "int lua_ref_retain_module(lua_State *L)\n{\n    // \u4ece\u6808\u5e95\u8fd4\u56de\u5bf9\u8c61\n    Ref **obj = (Ref **)lua_touserdata(L, 1);\n    luaL_argcheck(L, obj != NULL, 1, \"invalid user data\");\n    int argc = lua_gettop(L) - 1;\n    if (argc == 0)\n    {\n        (*obj)->retain();\n        return 1;\n    }\n    else\n    {\n        std::cout << \"argc should\" << argc << endl;\n        return 0;\n    }\n}", "seed": "218", "concepts": ["input parsing", "integer division"], "instruction": "Write a C++ class `Fraction` that represents a fraction. The class should have two data members, an integer numerator and an integer denominator. It should also have two member functions, `setNumerator` for setting the numerator and `setDenominator` for setting the denominator.", "response": "```cpp\n#include <cassert>\n\nclass Fraction {\npublic:\n    Fraction(int n = 0, int d = 1) : numerator(n), denominator(d) {}\n    void setNumerator(int n) {\n        numerator = n;\n    }\n    void setDenominator(int d) {\n        denominator = d;\n    }\nprivate:\n    int numerator = 0;\n    int denominator = 1;\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Fraction f({1, 2});\n    assert(f.numerator == 1);\n    assert(f.denominator == 2);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "ParseFileParallel", "docstring": "// wait for parsing to finish", "code": "inline Result ParseFile(const std::filesystem::path& filepath, const MaterialLibrary& mtllib)\n{\n    if (filepath.empty()) {\n        auto error = std::make_error_code(std::errc::invalid_argument);\n        return Result{ Attributes{}, Shapes{}, Materials{}, Error{ error } };\n    }\n\n    auto file = sys::File(filepath);\n\n    if (!file) {\n        return Result{ Attributes{}, Shapes{}, Materials{}, Error{ file.error() } };\n    }\n\n    auto context = std::make_shared<SharedContext>();\n\n    context->material.library = std::holds_alternative<std::monostate>(mtllib.Value()) ? nullptr : &mtllib;\n\n    if (std::holds_alternative<std::vector<std::filesystem::path>>(mtllib.Value())) {\n        context->material.basepath = filepath.parent_path();\n    }\n\n    auto chunks = std::vector<Chunk>();\n\n    auto t1 = std::chrono::steady_clock::now();\n\n    if (file.size() <= kSingleThreadCutoff) {\n        ParseFileSequential(&file, &chunks, context);\n    } else {\n        ParseFileParallel(&file, &chunks, context);\n    }\n\n    auto t2 = std::chrono::steady_clock::now();\n\n    context->debug.parse.total_time = t2 - t1;\n\n    // check if an error occured\n    size_t running_line_num = size_t{};\n    for (auto& chunk : chunks) {\n        if (chunk.error.code) {\n            chunk.error.line_num += running_line_num;\n            return Result{ Attributes{}, Shapes{}, Materials{}, chunk.error };\n        }\n        running_line_num += chunk.text.line_count;\n    }\n\n    t1 = std::chrono::steady_clock::now();\n\n    auto result = Merge(chunks, context);\n\n    t2 = std::chrono::steady_clock::now();\n\n    context->debug.merge.total_time = t2 - t1;\n\n    // std::cout << DumpDebug(file, *context);\n\n    auto memory = size_t{ 0 };\n\n    for (const auto& chunk : chunks) {\n        memory += SizeInBytes(chunk);\n    }\n\n    // Free memory in a different thread\n    if (memory > kMemoryRecyclingSize) {\n        auto recycle = std::thread([](std::vector<Chunk>&&) {}, std::move(chunks));\n        recycle.detach();\n    }\n\n    return result;\n}", "seed": "222", "concepts": ["function call", "function arguments", "function scope"], "instruction": "Write a C++ function `factorial` that calculates the factorial of a non-negative integer.", "response": "```cpp\nint factorial(int n) {\n    int result = 1;\n    for (int i = 1; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a program that converts a decimal number to binary.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "p_GeoDaWeight__GetNumObs", "docstring": "// invoke the function", "code": "bool p_GeoDaWeight__IsSymmetric(SEXP xp)\n{\n  // grab the object as a XPtr (smart pointer) to GeoDaWeight\n  Rcpp::XPtr<GeoDaWeight> ptr(xp);\n\n  // invoke the function\n  bool is_sym = ptr->IsSymmetric();\n\n  return is_sym;\n}", "seed": "223", "concepts": ["decimal to binary conversion", "conversion to base 10", "conversion to base 2"], "instruction": "Write a program that converts a decimal number to binary.", "response": "```cpp\n#include <string>\n\nstd::string decimalToBinary(int n) {\n    std::string result;\n    while (n != 0) {\n        result = std::string(1, '0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(decimalToBinary(1) == \"1\");\n    assert(decimalToBinary(5) == \"101\");\n    assert(decimalToBinary(10) == \"1010\");\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `Integer` with an overloaded `+` operator for addition, an overloaded `-` operator for subtraction, and an overloaded `*` operator for multiplication.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "main_identifier", "docstring": "//\u65e0\u9650\u5b9a\u6807\u8bc6\u7b26\uff0c\u6709\u9650\u5b9a\u6807\u8bc6\u7b26\uff0c\u540d\u5b57\uff0c\u8bf7\u770b\u672c\u4eba\u7b80\u4e66\uff0c\u7eea\u8bba\u3002", "code": "bool main_expression() {\n    C1 Ca,*Cb = new C1();\n    int C1::*p_member = &C1::member;\n    //\u8868\u8fbe\u5f0f\u7684\u6982\u5ff5\uff0c\u5728\u672c\u4eba\u7b80\u4e66\u5185\u6709\u53d9\u8ff0\uff0c\u6b64\u5904\u4e0d\u518d\u505a\u9648\u8ff0\u3002\n    //\u521d\u7b49\u8868\u8fbe\u5f0f\uff1a                                    //\u521d\u7b49\u8868\u8fbe\u5f0f\u5b58\u5728\u5728\u8868\u8fbe\u5f0f\u5d4c\u5957\u4e2d\uff0c\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u57fa\u672c\u5355\u4f4d\n    int j;\n    1;                                              //\u5b57\u9762\u91cf\n    j;                                              //\u5bf9\u4e00\u4e2a\u5b9e\u4f53\u547d\u540d\u7684\u540d\u5b57\n    [](){};                                         //lanbda\u8868\u8fbe\u5f0f\n    fun(1,2,3,4,5,6);                               //\u4f7f\u7528\u4e86\u6298\u53e0\u8868\u8fbe\u5f0f\u8fd4\u56de\uff0c\u8fd9\u91cc\u7684\u6298\u53e0\u8868\u8fbe\u5f0f\u662f\u521d\u5b9a\u8868\u8fbe\u5f0f\n    (1+2+3);                                        //\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\uff0c\u6574\u4e2a\u62ec\u53f7\u5f53\u4f5c\u4e00\u4e2a\u521d\u7b49\u8868\u8fbe\u5f0f\n                                                    //\u89e3\u91ca\uff1a\u4e3a\u4ec0\u4e48\u62ec\u53f7\u4f18\u5148\u8ba1\u7b97\n                                                    //\u56e0\u4e3a\u4e00\u4e2a\u8868\u8fbe\u5f0f\u901a\u5e38\u90fd\u662f\u7531\u8fd0\u7b97\u6570\u548c\u8fd0\u7b97\u7b26\u7ec4\u6210\n                                                    //\u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u4e00\u5806\u521d\u7b49\u8868\u8fbe\u5f0f\u5d4c\u5957\uff0c\u4e4b\u540e\u987a\u5e8f\u6267\u884c\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u521d\u7b49\u8868\u8fbe\u5f0f\u7684\u503c\u5373\u53ef\n                                                    //\u56e0\u6b64\uff0c\u62ec\u53f7\u5185\u7684\u503c\u56de\u5728\u6240\u7ed3\u5408\u7684\u8fd0\u7b97\u7b26\u8fdb\u884c\u8868\u8fbe\u5f0f\u6c42\u503c\u4e4b\u524d\u88ab\u6c42\u503c\n    //\u4e0d\u6c42\u503c\u8868\u8fbe\u5f0f\uff1a\n    sizeof(std::cout<<1);\n    decltype(std::cout<<2);\n    typeid(j += 4);\n    //\u4ee5\u53canoexpect\u548c\u6c42\u5305\u5927\u5c0f\u7684sizeof\n                                                    //\u4e0d\u6c42\u503c\u8868\u8fbe\u5f0f\u7684\u610f\u4e49\u5c31\u5728\u4e8e\uff0c\u5728\u7f16\u8bd1\u671f\u83b7\u5f97\u4e00\u4e2a\u6570\u636e\uff0c\u5e76\u4e0d\u5728\u8fd0\u884c\u65f6\u5bf9\u8fd0\u7b97\u6570\u6c42\u503c\uff0c\u4ee5\u4e0a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u8fd0\u7b97\u7b26\n                                                    //\u7279\u4f8b\uff0ctypeid\u5728\u5b58\u5bf9\u5b58\u5728\u591a\u6001\u7684\u5bf9\u884c\u6c42\u7c7b\u578b\u65f6\uff0c\u56de\u6c42\u52a8\u6001\u7c7b\u578b\uff0c\u6b64\u65f6\u4f1a\u5bf9\u8868\u8fbe\u5f0f\u6c42\u503c\n    //\u5f03\u503c\u8868\u8fbe\u5f0f\n    //\u6982\u5ff5\uff0c\u5f03\u503c\u8868\u8fbe\u5f0f\u5b9e\u9645\u4e0a\u5c31\u662f\u8868\u660e\uff0c\u5f53\u524d\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u88ab\u8fd0\u7b97\u7b26\u6240\u9700\u8981\u800c\u88ab\u4e22\u5f03\n    j;                                              //\u4e00\u4e2a\u5927\u7684\u8868\u8fbe\u5f0f\uff0c\u5355\u72ec\u7531\u4e00\u4e2a\u6807\u8bc6\u7b26\u7684\n    Ca.member;\n    Cb->member;\n    Ca.*p_member;\n    Cb->*p_member;                                  //\u5bf9\u4e8e\u8fd9\u4e00\u7c7b\u7684\u6210\u5458\u8bbf\u95ee\u8868\u8fbe\u5f0f\n    j == 2?1:2;                                     //\u6761\u4ef6\u8868\u8fbe\u5f0f\n    1,2,3,4;                                        //\u9017\u53f7\u8868\u8fbe\u5f0f\n    //\u8868\u8fbe\u5f0f\u8bed\u53e5                                      //\u8868\u8fbe\u5f0f\u8bed\u53e5\uff0c\u5373\u6240\u6709\u4ee5;\u7ed3\u5c3e\u7684\u8868\u8fbe\u5f0f\uff0c\u662fC++\u987a\u5e8f\u6267\u884c\u7684\u7a0b\u5e8f\u7247\u6bb5\n    //\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5728\u7b80\u4e66\u4e2d\u63cf\u8ff0\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n    return true;\n}", "seed": "224", "concepts": ["string-to-integer conversion"], "instruction": "Create a C++ class `Integer` with an overloaded `+` operator for addition, an overloaded `-` operator for subtraction, and an overloaded `*` operator for multiplication.", "response": "```cpp\nclass Integer {\npublic:\n    Integer(int v) : value(v) {}\n    Integer operator+(const Integer& other) const {\n        return Integer(value + other.value);\n    }\n    Integer operator-(const Integer& other) const {\n        return Integer(value - other.value);\n    }\n    Integer operator*(const Integer& other) const {\n        return Integer(value * other.value);\n    }\n    friend std::ostream& operator<<(std::ostream& os, const Integer& i) {\n        return os << i.value;\n    }\nprivate:\n    int value;\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(Integer(5) + Integer(5) == 10);\n    assert(Integer(10) - Integer(5) == 5);\n    assert(Integer(3) * Integer(3) == 9);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `decimalToHex` that converts a decimal to a hexadecimal string.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "pythia_higgs_events_generator", "docstring": "// How many events you want to see ", "code": "int main() \n{\n    Int_t simulated_events = 10000; // each event is understood as a pp colition\n\n    pythia_higgs_events_generator(simulated_events);\n\n    return 0;\n}", "seed": "246", "concepts": ["decimal conversion", "ASCII arithmetic"], "instruction": "Write a C++ function `decimalToHex` that converts a decimal to a hexadecimal string.", "response": "```cpp\n#include <string>\n#include <sstream>\n\nstd::string decimalToHex(int n) {\n    std::stringstream ss;\n    ss << std::hex << n;\n    return ss.str();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(decimalToHex(10) == \"a\");\n    assert(decimalToHex(0) == \"0\");\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `toNumber` that converts a string to an integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "PyButtonWidget", "docstring": "// If making a new widget add it at the end.", "code": "static auto PyCheckBoxWidget(PyObject* self, PyObject* args, PyObject* keywds)\n    -> PyObject* {\n  BA_PYTHON_TRY;\n  PyObject* size_obj = Py_None;\n  PyObject* pos_obj = Py_None;\n  PyObject* text_obj = Py_None;\n  PyObject* value_obj = Py_None;\n  PyObject* on_value_change_call_obj = Py_None;\n  PyObject* on_select_call_obj = Py_None;\n  PyObject* scale_obj = Py_None;\n  PyObject* is_radio_button_obj = Py_None;\n  PyObject* maxwidth_obj = Py_None;\n  PyObject* parent_obj = Py_None;\n  PyObject* edit_obj = Py_None;\n  ContainerWidget* parent_widget = nullptr;\n  PyObject* text_scale_obj = Py_None;\n  PyObject* textcolor_obj = Py_None;\n  PyObject* autoselect_obj = Py_None;\n  PyObject* color_obj = Py_None;\n\n  static const char* kwlist[] = {\"edit\",\n                                 \"parent\",\n                                 \"size\",\n                                 \"position\",\n                                 \"text\",\n                                 \"value\",\n                                 \"on_value_change_call\",\n                                 \"on_select_call\",\n                                 \"text_scale\",\n                                 \"textcolor\",\n                                 \"scale\",\n                                 \"is_radio_button\",\n                                 \"maxwidth\",\n                                 \"autoselect\",\n                                 \"color\",\n                                 nullptr};\n  if (!PyArg_ParseTupleAndKeywords(\n          args, keywds, \"|OOOOOOOOOOOOOOO\", const_cast<char**>(kwlist),\n          &edit_obj, &parent_obj, &size_obj, &pos_obj, &text_obj, &value_obj,\n          &on_value_change_call_obj, &on_select_call_obj, &text_scale_obj,\n          &textcolor_obj, &scale_obj, &is_radio_button_obj, &maxwidth_obj,\n          &autoselect_obj, &color_obj)) {\n    return nullptr;\n  }\n\n  if (!g_base->CurrentContext().IsEmpty()) {\n    throw Exception(\"UI functions must be called with no context set.\");\n  }\n\n  // Grab the edited widget or create a new one.\n  Object::Ref<CheckBoxWidget> widget;\n  if (edit_obj != Py_None) {\n    widget = dynamic_cast<CheckBoxWidget*>(UIV1Python::GetPyWidget(edit_obj));\n    if (!widget.Exists()) {\n      throw Exception(\"Invalid or nonexistent widget.\",\n                      PyExcType::kWidgetNotFound);\n    }\n  } else {\n    parent_widget = parent_obj == Py_None\n                        ? g_ui_v1->screen_root_widget()\n                        : dynamic_cast<ContainerWidget*>(\n                            UIV1Python::GetPyWidget(parent_obj));\n    if (parent_widget == nullptr) {\n      throw Exception(\"Parent widget nonexistent or not a container.\",\n                      PyExcType::kWidgetNotFound);\n    }\n    widget = Object::New<CheckBoxWidget>();\n  }\n\n  // set applicable values ----------------------------\n  if (size_obj != Py_None) {\n    Point2D p = Python::GetPyPoint2D(size_obj);\n    widget->SetWidth(p.x);\n    widget->SetHeight(p.y);\n  }\n  if (pos_obj != Py_None) {\n    Point2D p = Python::GetPyPoint2D(pos_obj);\n    widget->set_translate(p.x, p.y);\n  }\n  if (autoselect_obj != Py_None) {\n    widget->set_auto_select(Python::GetPyBool(autoselect_obj));\n  }\n  if (text_obj != Py_None) {\n    widget->SetText(g_base->python->GetPyLString(text_obj));\n  }\n  if (value_obj != Py_None) {\n    widget->SetValue(Python::GetPyBool(value_obj));\n  }\n  if (color_obj != Py_None) {\n    std::vector<float> c = Python::GetPyFloats(color_obj);\n    if (c.size() != 3)\n      throw Exception(\"Expected 3 floats for color.\", PyExcType::kValue);\n    widget->set_color(c[0], c[1], c[2]);\n  }\n  if (maxwidth_obj != Py_None) {\n    widget->SetMaxWidth(Python::GetPyFloat(maxwidth_obj));\n  }\n  if (is_radio_button_obj != Py_None) {\n    widget->SetIsRadioButton(Python::GetPyBool(is_radio_button_obj));\n  }\n  if (scale_obj != Py_None) {\n    widget->set_scale(Python::GetPyFloat(scale_obj));\n  }\n  if (on_value_change_call_obj != Py_None) {\n    widget->SetOnValueChangeCall(on_value_change_call_obj);\n  }\n  if (on_select_call_obj != Py_None) {\n    widget->SetOnSelectCall(on_select_call_obj);\n  }\n  if (text_scale_obj != Py_None) {\n    widget->SetTextScale(Python::GetPyFloat(text_scale_obj));\n  }\n  if (textcolor_obj != Py_None) {\n    std::vector<float> c = Python::GetPyFloats(textcolor_obj);\n    if (c.size() != 3 && c.size() != 4) {\n      throw Exception(\"Expected 3 or 4 float values for textcolor.\",\n                      PyExcType::kValue);\n    }\n    if (c.size() == 3) {\n      widget->set_text_color(c[0], c[1], c[2], 1.0f);\n    } else {\n      widget->set_text_color(c[0], c[1], c[2], c[3]);\n    }\n  }\n\n  // if making a new widget add it at the end\n  if (edit_obj == Py_None) {\n    g_ui_v1->AddWidget(widget.Get(), parent_widget);\n  }\n\n  return widget->NewPyRef();\n\n  BA_PYTHON_CATCH;\n}", "seed": "256", "concepts": ["integer value", "constant"], "instruction": "Write a C++ function `toNumber` that converts a string to an integer.", "response": "```cpp\n#include <string>\n\nint toNumber(const std::string& str) {\n    return std::stoi(str);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toNumber(\"123\") == 123);\n    assert(toNumber(\"-321\") == -321);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ class `Fraction` that represents a fraction.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "checkState", "docstring": "// checks every possible win state for X and O", "code": "int chooseSpace(std::array<state, 9> b, int m) { // returns best space for the AI to play - tries to block player \n    // tries to win\n    if (b[4] == empty) {\n        return 4;\n    } else if (b[5] == X && b[7] == X && b[8] == empty) {\n        return 8;\n    } else if (m == 1) {\n        if (b[4] == X) {\n            return 0;\n        }\n    } else if (b[0] == O && b[1] == O && b[2] == empty) {\n        return 2;\n    } else if (b[1] == O && b[2] == O && b[0] == empty) {\n        return 0;\n    } else if (b[0] == O && b[2] == O && b[1] == empty) {\n        return 1;\n    } else if (b[3] == O && b[4] == O && b[5] == empty) {\n        return 5;\n    } else if (b[4] == O && b[5] == O && b[3] == empty) {\n        return 3;\n    } else if (b[3] == O && b[5] == O && b[4] == empty) {\n        return 4;\n    } else if (b[6] == O && b[7] == O && b[8] == empty) {\n        return 8;\n    } else if (b[7] == O && b[8] == O && b[6] == empty) {\n        return 6;\n    } else if (b[6] == O && b[8] == O && b[7] == empty) {\n        return 7;\n    } else if (b[0] == O && b[3] == O && b[6] == empty) {\n        return 6;\n    } else if (b[3] == O && b[6] == O && b[0] == empty) {\n        return 0;\n    } else if (b[0] == O && b[6] == O && b[3] == empty) {\n        return 3;\n    } else if (b[1] == O && b[4] == O && b[7] == empty) {\n        return 7;\n    } else if (b[4] == O && b[7] == O && b[1] == empty) {\n        return 1;\n    } else if (b[1] == O && b[7] == O && b[4] == empty) {\n        return 4;\n    } else if (b[2] == O && b[5] == O && b[8] == empty) {\n        return 8;\n    } else if (b[5] == O && b[8] == O && b[2] == empty) {\n        return 2;\n    } else if (b[2] == O && b[8] == O && b[5] == empty) {\n        return 5;\n    } else if (b[0] == O && b[4] == O && b[8] == empty) {\n        return 8;\n    } else if (b[4] == O && b[8] == O && b[0] == empty) {\n        return 0;\n    } else if (b[0] == O && b[8] == O && b[4] == empty) {\n        return 4;\n    } else if (b[2] == O && b[4] == O && b[6] == empty) {\n        return 6;\n    } else if (b[4] == O && b[6] == O && b[2] == empty) {\n        return 2;\n    } else if (b[2] == O && b[6] == O && b[4] == empty) {\n        return 4;\n    }\n\n    // if cannot win, tries to block player\n    if (b[4] == empty) {\n        return 4;\n    }\n    if (b[0] == X && b[1] == X && b[2] == empty) {\n        return 2;\n    } else if (b[1] == X && b[2] == X && b[0] == empty) {\n        return 0;\n    } else if (b[0] == X && b[2] == X && b[1] == empty) {\n        return 1;\n    }\n    if (b[3] == X && b[4] == X && b[5] == empty) {\n        return 5;\n    } else if (b[4] == X && b[5] == X && b[3] == empty) {\n        return 3;\n    } else if (b[3] == X && b[5] == X && b[4] == empty) {\n        return 4;\n    }\n    if (b[6] == X && b[7] == X && b[8] == empty) {\n        return 8;\n    } else if (b[7] == X && b[8] == X && b[6] == empty) {\n        return 6;\n    } else if (b[6] == X && b[8] == X && b[7] == empty) {\n        return 7;\n    }\n    if (b[0] == X && b[3] == X && b[6] == empty) {\n        return 6;\n    } else if (b[3] == X && b[6] == X && b[0] == empty) {\n        return 0;\n    } else if (b[0] == X && b[6] == X && b[3] == empty) {\n        return 3;\n    }\n    if (b[1] == X && b[4] == X && b[7] == empty) {\n        return 7;\n    } else if (b[4] == X && b[7] == X && b[1] == empty) {\n        return 1;\n    } else if (b[1] == X && b[7] == X && b[4] == empty) {\n        return 4;\n    }\n    if (b[2] == X && b[5] == X && b[8] == empty) {\n        return 8;\n    } else if (b[5] == X && b[8] == X && b[2] == empty) {\n        return 2;\n    } else if (b[2] == X && b[8] == X && b[5] == empty) {\n        return 5;\n    }\n    if (b[0] == X && b[4] == X && b[8] == empty) {\n        return 8;\n    } else if (b[4] == X && b[8] == X && b[0] == empty) {\n        return 0;\n    } else if (b[0] == X && b[8] == X && b[4] == empty) {\n        return 4;\n    }\n    if (b[2] == X && b[4] == X && b[6] == empty) {\n        return 6;\n    } else if (b[4] == X && b[6] == X && b[2] == empty) {\n        return 2;\n    } else if (b[2] == X && b[6] == X && b[4] == empty) {\n        return 4;\n    }\n\n    //if cant win or block pick middle side (not corner)\n    if (b[1] == empty && b[7] == empty) {\n        return 1;\n    } else if (b[3] == empty && b[5] == empty) {\n        return 3;\n    } else if (b[5] == empty && b[3] == empty) {\n        return 5;\n    } else if (b[7] == empty && b[1] == empty) {\n        return 7;\n    } else if (b[0] == empty) {\n        return 0;\n    } else if (b[2] == empty) {\n        return 2;\n    } else if (b[6] == empty) {\n        return 6;\n    } else if (b[8] == empty) {\n        return 8;\n    }\n\n    std::cout << \"error\";\n    return 4;\n}", "seed": "258", "concepts": ["modulo operator", "base conversion"], "instruction": "Write a C++ class `Fraction` that represents a fraction.", "response": "```cpp\nclass Fraction {\n    public:\n        Fraction(int num, int denom) : num_(num), denom_(denom) {}\n        \n        void print() const {\n            std::cout << num_ << \"/\" << denom_ << \"\\n\";\n        }\n        \n        Fraction multiply(const Fraction& other) const {\n            return Fraction(num_ * other.num_, denom_ * other.denom_);\n        }\n        \n        Fraction divide(const Fraction& other) const {\n            return Fraction(num_ * other.denom_, denom_ * other.num_);\n        }\n        \n    private:\n        int num_;\n        int denom_;\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Fraction a(2, 3);\n    Fraction b(4, 5);\n    assert(a.multiply(b).num_ == 8);\n    assert(a.multiply(b).denom_ == 15);\n    assert(a.divide(b).num_ == 6);\n    assert(a.divide(b).denom_ == 10);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a class `Clock` that models a time. The class must provide methods for setting and getting the time, as well as for adding/subtracting time. The class must be able to handle both 24-hour time and 12-hour time; when setting time, the hour should be between 0 and 23, or 1 and 12./code/examples/class/figure/figure.cpp\n#include \"figure.h\"\n\nvoid Figure::print() {\n\tstd::cout << \"Area: \" << getArea() << std::endl;\n}/code/examples/class/rectangle/rectangle.h\n#pragma once\n\n#include <iostream>\n\nclass Rectangle {\nprivate:\n\tfloat length;\n\tfloat width;\n\npublic:\n\tRectangle(float l, float w) {\n\t\tlength = l;\n\t\twidth = w;\n\t}\n\n\tfloat getArea() {\n\t\treturn length * width;\n\t}\n\n\tvoid print() {\n\t\tstd::cout << \"Area: \" << getArea() << std::endl;\n\t}\n};/code/examples/function/countDigits/countDigits.cpp\n#include <iostream>\n\nint countDigits(int number) {\n\tint count = 0;\n\twhile (number) {\n\t\tnumber /= 10;\n\t\tcount++;\n\t}\n\treturn count;\n}\n\nint main() {\n\tint result = countDigits(88);\n\tstd::cout << \"The number of digits in 88 is \" << result << std::endl;\n\tresult = countDigits(11111);\n\tstd::cout << \"The number of digits in 11111 is \" << result << std::endl;\n\treturn 0;\n}/code/examples/class/rectangle/rectangle.cpp\n#include <iostream>\n#include \"rectangle.h\"\n\nint main() {\n\tRectangle rect(2, 4);\n\tstd::cout << \"Area: \" << rect.getArea() << std::endl;\n\treturn 0;\n}/code/examples/function/countVowels/countVowels.cpp\n#include <iostream>\n\nint countVowels(std::string word) {\n\tint count = 0;\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tswitch (word[i]) {\n\t\tcase 'a':\n\t\tcase 'e':\n\t\tcase 'i':\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'A':\n\t\tcase 'E':\n\t\tcase 'I':\n\t\tcase 'O':\n\t\tcase 'U':\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nint main() {\n\tint result = countVowels(\"Apple\");\n\tstd::cout << \"The number of vowels in 'Apple' is \" << result << std::endl;\n\tresult = countVowels(\"Orange\");\n\tstd::cout << \"The number of vowels in 'Orange' is \" << result << std::endl;\n\tresult = countVowels(\"mango\");\n\tstd::cout << \"The number of vowels in 'mango' is \" << result << std::endl;\n\treturn 0;\n}/code/examples/class/circle/circle.h\n#pragma once\n\n#include <iostream>\n\nclass Circle {\nprivate:\n\tfloat radius;\n\npublic:\n\tCircle(float r) {\n\t\tradius = r;\n\t}\n\n\tfloat getArea() {\n\t\treturn 3.141592653589793238462643383279502884197 * radius * radius;\n\t}\n\n\tvoid print() {\n\t\tstd::cout << \"Area: \" << getArea() << std::endl;\n\t}\n};/code/examples/class/figure/figure.h\n#pragma once\n\n#include <iostream>\n\nclass Figure {\npublic:\n\tvirtual float getArea() { return 0; }\n\tvirtual void print() { std::cout << \"Area: \" << getArea() << std::endl; }\n};/code/examples/class/square/square.cpp\n#include <iostream>\n#include \"square.h\"\n\nint main() {\n\tSquare sq(3);\n\tstd::cout << \"Area: \" << sq.getArea() << std::endl;\n\treturn 0;\n}/code/examples/class/circle/circle.cpp\n#include <iostream>\n#include \"circle.h\"\n\nint main() {\n\tCircle cr(3);\n\tstd::cout << \"Area: \" << cr.getArea() << std::endl;\n\treturn 0;\n}/code/examples/function/gcd/gcd.cpp\n#include <iostream>\n\nint gcd(int a, int b) {\n\tif (a < 0) a = -a;\n\tif (b < 0) b = -b;\n\n\tint c;\n\twhile (a != 0) {\n\t\tc = a;\n\t\ta = b % a;\n\t\tb = c;\n\t}\n\n\treturn b;\n}\n\nint main() {\n\tint result = gcd(36, 63);\n\tstd::cout << \"The greatest common divisor of 36 and 63 is \" << result << std::endl;\n\n\tresult = gcd(20, -24);\n\tstd::cout << \"The greatest common divisor of 20 and -24 is \" << result << std::endl;\n\n\tresult = gcd(1, 4);\n\tstd::cout << \"The greatest common divisor of 1 and 4 is \" << result << std::endl;\n\treturn 0;\n}/code/examples/class/square/square.h\n#pragma once\n\n#include <iostream>\n\nclass Square : public Figure {\nprivate:\n\tfloat length;\n\npublic:\n\tSquare(float l) {\n\t\tlength = l;\n\t}\n\n\tfloat getArea() {\n\t\treturn length * length;\n\t}\n};\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "__slab_remove", "docstring": "// Not removed if only single element is present", "code": "inline void __slab_move_to_front(cache_t *cp, slab_t *slab)\n{\n    if (cp->slabs == slab)\n    {\n        return;\n    }\n\n    __slab_remove(cp, slab);\n\n    // Empty list\n    if (!cp->slabs)\n    {\n        slab->prev = slab;\n        slab->next = slab;\n        cp->slabs_back = slab;\n    }\n    // Append element to front\n    else\n    {\n        slab->prev = cp->slabs;\n        cp->slabs->next = slab;\n        slab->next = cp->slabs_back;\n        cp->slabs_back->prev = slab;\n    }\n\n    cp->slabs = slab;\n}", "seed": "272", "concepts": ["modulo operation", "arithmetic"], "instruction": "Create a class `Clock` that models a time. The class must provide methods for setting and getting the time, as well as for adding/subtracting time. The class must be able to handle both 24-hour time and 12-hour time; when setting time, the hour should be between 0 and 23, or 1 and 12./code/examples/class/figure/figure.cpp\n#include \"figure.h\"\n\nvoid Figure::print() {\n\tstd::cout << \"Area: \" << getArea() << std::endl;\n}/code/examples/class/rectangle/rectangle.h\n#pragma once\n\n#include <iostream>\n\nclass Rectangle {\nprivate:\n\tfloat length;\n\tfloat width;\n\npublic:\n\tRectangle(float l, float w) {\n\t\tlength = l;\n\t\twidth = w;\n\t}\n\n\tfloat getArea() {\n\t\treturn length * width;\n\t}\n\n\tvoid print() {\n\t\tstd::cout << \"Area: \" << getArea() << std::endl;\n\t}\n};/code/examples/function/countDigits/countDigits.cpp\n#include <iostream>\n\nint countDigits(int number) {\n\tint count = 0;\n\twhile (number) {\n\t\tnumber /= 10;\n\t\tcount++;\n\t}\n\treturn count;\n}\n\nint main() {\n\tint result = countDigits(88);\n\tstd::cout << \"The number of digits in 88 is \" << result << std::endl;\n\tresult = countDigits(11111);\n\tstd::cout << \"The number of digits in 11111 is \" << result << std::endl;\n\treturn 0;\n}/code/examples/class/rectangle/rectangle.cpp\n#include <iostream>\n#include \"rectangle.h\"\n\nint main() {\n\tRectangle rect(2, 4);\n\tstd::cout << \"Area: \" << rect.getArea() << std::endl;\n\treturn 0;\n}/code/examples/function/countVowels/countVowels.cpp\n#include <iostream>\n\nint countVowels(std::string word) {\n\tint count = 0;\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tswitch (word[i]) {\n\t\tcase 'a':\n\t\tcase 'e':\n\t\tcase 'i':\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'A':\n\t\tcase 'E':\n\t\tcase 'I':\n\t\tcase 'O':\n\t\tcase 'U':\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nint main() {\n\tint result = countVowels(\"Apple\");\n\tstd::cout << \"The number of vowels in 'Apple' is \" << result << std::endl;\n\tresult = countVowels(\"Orange\");\n\tstd::cout << \"The number of vowels in 'Orange' is \" << result << std::endl;\n\tresult = countVowels(\"mango\");\n\tstd::cout << \"The number of vowels in 'mango' is \" << result << std::endl;\n\treturn 0;\n}/code/examples/class/circle/circle.h\n#pragma once\n\n#include <iostream>\n\nclass Circle {\nprivate:\n\tfloat radius;\n\npublic:\n\tCircle(float r) {\n\t\tradius = r;\n\t}\n\n\tfloat getArea() {\n\t\treturn 3.141592653589793238462643383279502884197 * radius * radius;\n\t}\n\n\tvoid print() {\n\t\tstd::cout << \"Area: \" << getArea() << std::endl;\n\t}\n};/code/examples/class/figure/figure.h\n#pragma once\n\n#include <iostream>\n\nclass Figure {\npublic:\n\tvirtual float getArea() { return 0; }\n\tvirtual void print() { std::cout << \"Area: \" << getArea() << std::endl; }\n};/code/examples/class/square/square.cpp\n#include <iostream>\n#include \"square.h\"\n\nint main() {\n\tSquare sq(3);\n\tstd::cout << \"Area: \" << sq.getArea() << std::endl;\n\treturn 0;\n}/code/examples/class/circle/circle.cpp\n#include <iostream>\n#include \"circle.h\"\n\nint main() {\n\tCircle cr(3);\n\tstd::cout << \"Area: \" << cr.getArea() << std::endl;\n\treturn 0;\n}/code/examples/function/gcd/gcd.cpp\n#include <iostream>\n\nint gcd(int a, int b) {\n\tif (a < 0) a = -a;\n\tif (b < 0) b = -b;\n\n\tint c;\n\twhile (a != 0) {\n\t\tc = a;\n\t\ta = b % a;\n\t\tb = c;\n\t}\n\n\treturn b;\n}\n\nint main() {\n\tint result = gcd(36, 63);\n\tstd::cout << \"The greatest common divisor of 36 and 63 is \" << result << std::endl;\n\n\tresult = gcd(20, -24);\n\tstd::cout << \"The greatest common divisor of 20 and -24 is \" << result << std::endl;\n\n\tresult = gcd(1, 4);\n\tstd::cout << \"The greatest common divisor of 1 and 4 is \" << result << std::endl;\n\treturn 0;\n}/code/examples/class/square/square.h\n#pragma once\n\n#include <iostream>\n\nclass Square : public Figure {\nprivate:\n\tfloat length;\n\npublic:\n\tSquare(float l) {\n\t\tlength = l;\n\t}\n\n\tfloat getArea() {\n\t\treturn length * length;\n\t}\n};", "response": "...\n</response>\n\n<tests>\n..."}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `isPrime` that returns true if a given integer is prime.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "denoiseb_rd43_select", "docstring": "//__VIVADO_SYNTH__", "code": "inline hw_uint<16> denoiseb_rd44_select(raw_cache& raw, int d0, int d1) {\n#ifdef __VIVADO_SYNTH__\n#endif //__VIVADO_SYNTH__\n  // denoiseb_rd44 read pattern: { denoiseb_update_0[d0, d1] -> raw[2 + 2d0, 2 + d1] : -1 <= d0 <= 961 and -1 <= d1 <= 1082 }\n  // Read schedule : { denoiseb_update_0[d0, d1] -> [2 + d1, 1 + d0, 2] : -1 <= d0 <= 961 and -1 <= d1 <= 1082 }\n  // Write schedule: { raw_update_0[d0, d1] -> [d1, d0, 1] : -2 <= d0 <= 962 and -3 <= d1 <= 1084 }\n  // DD fold: {  }\n  auto value_raw_raw_update_0_write0 = raw.raw_raw_update_0_write0_merged_banks_25.peek_0();\n  return value_raw_raw_update_0_write0;\n#ifndef __VIVADO_SYNTH__\n\tcout << \"Error: Unsupported offsets: \" << \" d0 = \" << d0  << \" d1 = \" << d1  << endl;\n\tassert(false);\n\treturn 0;\n#endif //__VIVADO_SYNTH__\n}", "seed": "275", "concepts": ["integer division", "integer operations"], "instruction": "Write a C++ function `isPrime` that returns true if a given integer is prime.", "response": "```cpp\nbool isPrime(int n) {\n    if (n <= 3) return n >= 2;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(7) == true);\n    assert(isPrime(10) == false);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `SelectionSort` that implements the selection sort algorithm.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "grow_piece", "docstring": "// See if piece dies after growing!", "code": "bool any_enemies_around_piece(int tx, int ty)\n{\n\tint x1, y1, x2, y2, x, y;\n\n\t// Clip search so we don't go outside map.\n\tx1 = MAX(0, tx - 1);\n\ty1 = MAX(0, ty - 1);\n\tx2 = MIN(MAX_BOARD_WIDTH, tx + 1);\n\ty2 = MIN(MAX_BOARD_HEIGHT, ty + 1);\n\n\tfor (y = y1 ; y <= y2 ; y++)\n\t{\n\t\tfor (x = x1 ; x <= x2 ; x++)\n\t\t{\n\t\t\tif (board[x][y][PIECE].gfx == BLANK) continue;\n\n\t\t\t// Does this piece belong to another wizard? And can this piece attack or grow?\n\t\t\tif (!is_piece_friendly(x, y, PIECE) && (board[x][y][PIECE].combat > 0 ||\n\t\t\t\t(board[x][y][PIECE].grow_chance > 0 && board[x][y][PIECE].defence > 0))) return true; \n\t\t}    \n\t}\n\n\treturn false;\n}", "seed": "276", "concepts": ["selection sort", "array iteration", "insertion sort"], "instruction": "Create a C++ class `SelectionSort` that implements the selection sort algorithm.", "response": "```cpp\n#include <vector>\n\nclass SelectionSort {\npublic:\n    SelectionSort(std::vector<int>& arr) : arr(arr) {}\n\n    void sort() {\n        for (int i = 0; i < arr.size(); ++i) {\n            int minIndex = i;\n            for (int j = i + 1; j < arr.size(); ++j) {\n                if (arr[j] < arr[minIndex]) minIndex = j;\n            }\n            std::swap(arr[i], arr[minIndex]);\n        }\n    }\n\nprivate:\n    std::vector<int>& arr;\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\n#include <vector>\nint main() {\n    std::vector<int> arr = {3, 1, 4, 2};\n    SelectionSort selectionSort(arr);\n    selectionSort.sort();\n    assert(arr == std::vector<int>({1, 2, 3, 4}));\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ class `FizzBuzz` that implements the FizzBuzz problem.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "dynamicDz", "docstring": "//\tprintf(\" _Xv = %0.2f _Yv = %0.2f\\n\", Xk, Yk);\t\t\t", "code": "int dynamicDzTz(double F, double L, double Xn, double Yn, double Kn, double Vn, double Vmax, double a, float Tz, double Dz, double Rc, double Xc, double Yc, double Kc, double Vc,\n\t\t  double* Fn, double* Ln, double* Fk, double* Lk, double* Fv, double* Lv, double* Fc, double* Lc, double* Kk, double* Vk, double* tm, double* tc, double* tpt)\n{\n\t//\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0445\u043e\u0434\u0430 \u0431\u0435\u0437 \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u0438\n\tint result = 0;\n\tdouble Vcx, Vcy;\t//\u0421\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u0441\u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0446\u0435\u043b\u0438\n\tdouble Km, Vm;\t\t//\u041a\u0443\u0440\u0441 \u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043c\u0430\u043d\u0435\u0432\u0440\u0430 \u0431\u0435\u0437 \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u0438\n\tpdinxy(Kc, Vc, &Vcx, &Vcy);\n\tresult = sblDzTz(Xc, Yc, Vcx, Vcy, Dz, Vmax, Tz, &Km, &Vm);\n//\tprintf(\"____ res1 = %d\\n\", result);\n\tif (result == 0) return 0;\n\t\n\tdouble dV = 0.1;\t// \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u043b\u044c\u0442\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438\n\tdouble Tr = Tz;\t// \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u044f\n\tint i = 0;\n\tdouble _Vm;\n\tdo\n\t{\n\t\tprintf(\"____ Vm = %0.3f\\n\", Vm);\n\t\tresult = dynamicDz(F, L, Xn, Yn, Kn, Vn, Vm, a, Dz, Rc, Xc, Yc, Kc, Vc,\n\t\t\t  Kk, tm, Fn, Ln, Fk, Lk, Fv, Lv, Fc, Lc, tc, tpt);\n//\t\tprintf(\"____ res2 = %d\\n\", result);\n\t\t//if (result == 0) return 0;\n\t\tTr = *tm;\n\t\tif (Tz>Tr && result == 1) \n\t\t{\n\t\t\tif (dV>0) dV /=2;\n\t\t\tdV = -1*ABS(dV);\n\t\t\tVm += dV;\n\t\t\t\n\t\t\t\n\t\t} else \n\t\t{\n\t\t\tif (dV<0) dV /=2;\t\t\t\n\t\t\tdV = ABS(dV);\n\t\t\tVm +=dV;\n\t\t} \n\t\tprintf(\"___ %d ____ Tz = %.1f; Tr = %.1f; dT = %.1f\\n\", i, Tz, Tr, ABS(Tz-Tr));\n\t\ti++;\n\t} while (ABS(Tz-Tr)>1.0 && i<1000);\n\tif (result == 0) return 0;\n\tif (i == 1000) return 0;\n\t*Vk = Vm;\n\treturn 1;\n}", "seed": "278", "concepts": ["fizzbuzz", "modulo", "arithmetic operation"], "instruction": "Write a C++ class `FizzBuzz` that implements the FizzBuzz problem.", "response": "```cpp\n#include <iostream>\n\nclass FizzBuzz {\npublic:\n    FizzBuzz(int n) : n(n) {}\n    void print() {\n        for (int i = 1; i <= n; ++i) {\n            std::cout << fizzBuzz(i) << \" \";\n        }\n    }\nprivate:\n    int n;\n    std::string fizzBuzz(int n) {\n        if (n % 3 == 0 && n % 5 == 0) return \"FizzBuzz\";\n        if (n % 3 == 0) return \"Fizz\";\n        if (n % 5 == 0) return \"Buzz\";\n        return std::to_string(n);\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    FizzBuzz fizzBuzz(15);\n    fizzBuzz.print();\n    // Output: 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ function `base10` that converts a string of digits to base-10.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "FilterTempFile", "docstring": "//\u67e5\u8be2\u6587\u4ef6\u540d\u5f53\u4e2d\u662f\u5426\u5305\u542bpstrFileName", "code": "static std::string BinaryHashToHexString(const unsigned char *hash, int len)\n{\n\tstd::string out;\n\t\n\t// reverse enough space to gain a little speedup\n\tout.reserve(len * 2 + 1);  \n\tfor (int i = 0; i < len; ++i)\n\t\tout += D_NumFmt(\"%02x\", (int)hash[i]).c_str();\n\treturn out;\n}", "seed": "282", "concepts": ["base-10", "decimal number system"], "instruction": "Create a C++ function `base10` that converts a string of digits to base-10.", "response": "```cpp\n#include <string>\n#include <stdexcept>\n\nint base10(const std::string& s) {\n    int result = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] < '0' || s[i] > '9')\n            throw std::invalid_argument(\"s must be a string of digits\");\n        result = result * 10 + s[i] - '0';\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(base10(\"12345\") == 12345);\n    assert(base10(\"2959\") == 2959);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ `Student` class to help organize student information.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "make_json", "docstring": "// std::cout << json.to_string() << std::endl;", "code": "json_type make_json3() {\n    \n    \n    \n        json_type vec1(amo::json_value_array);\n        /*vec1.push_back(\"1\");\n        vec1.push_back(\"2\");\n        vec1.push_back(\"3\");\n        */\n        \n        json_type vec2(amo::json_value_array);\n        /*vec2.push_back(4);\n        vec2.push_back(5);\n        vec2.push_back(6);*/\n        \n        json_type vec3(amo::json_value_array);\n        \n        {\n            json_type arr3(amo::json_value_array);\n            /*arr3.push_back(7);\n            arr3.push_back(8);\n            arr3.push_back(9);*/\n            \n            vec3.push_back(arr3);\n            vec3.push_back(arr3);\n            vec3.push_back(arr3);\n        }\n        \n        \n        json_type json;\n        /*\tjson.put(\"vec1\", vec1);\n        \tjson.put(\"vec2\", vec2);\n        \tjson.put(\"vec3\", vec3);*/\n        ;\n        \n        json_type info;\n        //info.put(\"m_bool\", true);\n        ////info.put(\"m_char\", 'c');\n        //info.put(\"m_int8_t\", 8);\n        //info.put(\"m_int16_t\", 16);\n        //info.put(\"m_int32_t\", 32);\n        //info.put(\"m_int64_t\", 64);\n        //info.put(\"m_uint8_t\", 8u);\n        //info.put(\"m_uint16_t\", 16u);\n        //info.put(\"m_uint32_t\", 32u);\n        //info.put(\"m_uin64_t\", 64u);\n        //info.put(\"m_float\", 1.0);\n        //info.put(\"m_double\", 2.22);\n        //info.put(\"m_string\", \"string txt\");\n        \n        json.put(\"m_jsoninfo2\", info);\n        json.put(\"m_jsoninfo3\", info);\n        \n        \n        json_type jsoninfoclass;\n        jsoninfoclass.put(\"m_jsoninfo1\", info);\n        jsoninfoclass.put(\"m_jsoninfo2\", info);\n        \n        json.put(\"m_jsoninfo2\", jsoninfoclass);\n        json.put(\"m_jsoninfo3\", jsoninfoclass);\n        \n        json_type arr(amo::json_value_array);\n        arr.push_back(jsoninfoclass);\n        arr.push_back(jsoninfoclass);\n        arr.push_back(jsoninfoclass);\n        arr.push_back(jsoninfoclass);\n        \n        json.put(\"m_jsoninfo4\", arr);\n        json.put(\"m_jsoninfo5\", arr);\n        \n        json_type arr2(amo::json_value_array);\n        arr2.push_back(arr);\n        arr2.push_back(arr);\n        arr2.push_back(arr);\n        json.put(\"m_jsoninfo6\", arr2);\n        \n        return json;\n    }", "seed": "293", "concepts": ["string parsing", "string manipulation", "string traversal"], "instruction": "Create a C++ `Student` class to help organize student information.", "response": "```cpp\n#include <string>\n\nclass Student {\n    std::string name;\n    std::string major;\n    double gpa;\npublic:\n    Student(std::string name, std::string major, double gpa) : name(name), major(major), gpa(gpa) {}\n    const std::string& getName() const { return name; }\n    const std::string& getMajor() const { return major; }\n    double getGpa() const { return gpa; }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Student a(\"\", \"cs\", 3.5);\n    assert(a.getName() == \"\");\n    assert(a.getMajor() == \"cs\");\n    assert(a.getGpa() == 3.5);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nImplement a C++ class `BitSet` that stores bits in an array.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "InitList", "docstring": "// for now link list is null,the cursor of last element is 0", "code": "int Malloc_SSL(StaticLinkList space)\n{\n\t// Get index of free element\n\tint i = space[0].cur;\n\n\tif (space[0].cur)\n\t\t// Use next element als alternate element\n\t\tspace[0].cur = space[i].cur;\n\n\treturn i;\n}", "seed": "294", "concepts": ["bitwise operations", "bit shifting", "unsigned integers"], "instruction": "Implement a C++ class `BitSet` that stores bits in an array.", "response": "```cpp\n#include <vector>\n\nclass BitSet {\nprivate:\n    std::vector<bool> bits;\npublic:\n    BitSet(int n) {\n        bits.resize(n);\n    }\n    void set(int bit) {\n        bits[bit] = true;\n    }\n    bool get(int bit) {\n        return bits[bit];\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    BitSet bs(10);\n    bs.set(0);\n    bs.set(1);\n    bs.set(2);\n    bs.set(3);\n    assert(bs.get(0));\n    assert(bs.get(1));\n    assert(bs.get(2));\n    assert(bs.get(3));\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `sumFactorial` that returns the sum of the factorials of all positive integers up to and including a given integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "display", "docstring": "//glutSolidTorus(5.0f, 10.0f, 40, 40);", "code": "void idle() {\n    float t, desiredFrameTime, frameTime;\n    static float tLast = 0.0;\n\n    // Get elapsed time\n    t = glutGet(GLUT_ELAPSED_TIME);\n    // convert milliseconds to seconds\n    t /= 1000.0;\n\n    // Calculate frame time\n    frameTime = t - tLast;\n    // Calculate desired frame time\n    desiredFrameTime = 1.0 / (float) (60);\n\n    // Check if the desired frame time was achieved. If not, skip animation.\n    if (frameTime <= desiredFrameTime)\n        return;\n\n    for (int i = 0; i < 2; ++i) {\n        if (position[i] == positionTransition[i]) continue;\n        int direction = getSignal(position[i] - positionTransition[i]);\n        positionTransition[i] += direction * speed;\n        if (direction != getSignal(position[i] - positionTransition[i]))\n            positionTransition[i] = position[i];\n\n    }\n\n    glutPostRedisplay();\n}", "seed": "297", "concepts": ["recursion", "base case"], "instruction": "Write a C++ function `sumFactorial` that returns the sum of the factorials of all positive integers up to and including a given integer.", "response": "```cpp\nint sumFactorial(int n) {\n    int result = 0;\n    for (int i = 1; i <= n; ++i) {\n        result += factorial(i);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumFactorial(5) == 153);\n    assert(sumFactorial(10) == 38725);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program to create a binary search tree from a vector of integers, and then traverse the tree in the following ways:\n- in-order\n- pre-order\n- post-order\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "stepInNeighbourhood", "docstring": "// Explore the neighbourhood and return the firstly found better option", "code": "int localSearch(solution &sol_bits, int MAX_EVALUATIONS) {\n  int tam_sol_bits = sol_bits.v.size();\n  solution_int sol;\n  bool stop = false;\n  int evaluations = 0;\n\n  BitsToInt(sol_bits, sol);\n  updateSolution(sol);\n\n  while (!stop && evaluations < MAX_EVALUATIONS) {\n    stop = stepInNeighbourhood(sol, evaluations, MAX_EVALUATIONS-evaluations);\n    // cout << sol.fitness << \"\\t\" << iterations << endl;\n  }\n\n  // output: Fitness - Time - Iterations\n  // cout << sol.fitness << \"\\t\" << (double) t_total / CLOCKS_PER_SEC << \"\\t\" << iterations<< endl;\n  IntToBits(sol, sol_bits, tam_sol_bits);\n  return evaluations;\n}", "seed": "303", "concepts": ["balanced binary search tree", "BST traversal", "tree search"], "instruction": "Write a C++ program to create a binary search tree from a vector of integers, and then traverse the tree in the following ways:\n- in-order\n- pre-order\n- post-order", "response": "```cpp\n#include <vector>\n#include <iostream>\n\ntemplate <typename T>\nstruct BinarySearchTreeNode {\n    BinarySearchTreeNode* left;\n    BinarySearchTreeNode* right;\n    T data;\n};\n\ntemplate <typename T>\nBinarySearchTreeNode<T>* createBSTFromVector(const std::vector<T>& nums) {\n    if (nums.empty()) return nullptr;\n    T mid = nums.front();\n    BinarySearchTreeNode<T>* root = new BinarySearchTreeNode<T>;\n    root->data = mid;\n    root->left = createBSTFromVector(std::vector<T>(nums.begin() + 1, nums.end()));\n    root->right = createBSTFromVector(std::vector<T>(nums.begin() + 1, nums.end()));\n    return root;\n}\n\ntemplate <typename T>\nvoid inorder(BinarySearchTreeNode<T>* root, std::function<void(T)> func) {\n    if (root == nullptr) return;\n    inorder(root->left, func);\n    func(root->data);\n    inorder(root->right, func);\n}\n\ntemplate <typename T>\nvoid preorder(BinarySearchTreeNode<T>* root, std::function<void(T)> func) {\n    if (root == nullptr) return;\n    func(root->data);\n    preorder(root->left, func);\n    preorder(root->right, func);\n}\n\ntemplate <typename T>\nvoid postorder(BinarySearchTreeNode<T>* root, std::function<void(T)> func) {\n    if (root == nullptr) return;\n    postorder(root->left, func);\n    postorder(root->right, func);\n    func(root->data);\n}\n\nint main() {\n    std::vector<int> nums = {2, 1, 3, 4, 5, 6};\n    BinarySearchTreeNode<int>* root = createBSTFromVector(nums);\n    std::vector<int> result;\n    inorder(root, [&](int x) { result.push_back(x); });\n    assert(result == std::vector<int>({1, 2, 3, 4, 5, 6}));\n    result.clear();\n    preorder(root, [&](int x) { result.push_back(x); });\n    assert(result == std::vector<int>({2, 1, 3, 4, 5, 6}));\n    result.clear();\n    postorder(root, [&](int x) { result.push_back(x); });\n    assert(result == std::vector<int>({1, 4, 5, 6, 3, 2}));\n    return 0;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() { }\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `Fibonacci` that implements the Fibonacci sequence via recursion and memoization.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "bfs", "docstring": "//root's 2^0 father is root", "code": "int LCA(int u, int v)\n{\n\tif (dis[u] > dis[v])swap(u, v);\n\tint du = dis[u], dv = dis[v];\n\tint tu = u, tv = v;\n\tfor (int det = dv - du, i = 0;det; det>>=1, i++)\n\t\tif (det&1)//det if u's high - v's high;\n\t\ttv = fa[tv][i];//let deeper point up(2^i) until det = 1;\n\tif (tu == tv)return tu;\n\tfor (int i = DEG - 1; i >= 0; i--)\n\t{\n\t\tif (fa[tu][i] == fa[tv][i])continue;\n\t\ttu = fa[tu][i];\n\t\ttv = fa[tv][i];\n\t}\n\treturn fa[tu][0];\n}", "seed": "306", "concepts": ["recursion", "memoization"], "instruction": "Create a C++ class `Fibonacci` that implements the Fibonacci sequence via recursion and memoization.", "response": "```cpp\n#include <vector>\n\nclass Fibonacci {\npublic:\n    std::vector<int> fib;\n    Fibonacci(int n) : fib(n + 1, 0) {\n        fib[0] = 0;\n        fib[1] = 1;\n    }\n\n    int operator[](int i) {\n        if (fib[i] == 0) {\n            fib[i] = (*this)[i - 1] + (*this)[i - 2];\n        }\n        return fib[i];\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    Fibonacci f(5);\n    assert(f[0] == 0);\n    assert(f[1] == 1);\n    assert(f[2] == 1);\n    assert(f[3] == 2);\n    assert(f[4] == 3);\n    assert(f[5] == 5);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ program to solve the Travelling Salesman Problem.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "scalar_add", "docstring": "// generic, this still optimizes correctly on MSVC.", "code": "bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {\n  // the effective x buffer is from `xstart..x.len()`, so exit early\n  // if we can't get that current range.\n  if (x.len() < start || y.len() > x.len() - start) {\n      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));\n  }\n\n  bool carry = false;\n  for (size_t index = 0; index < y.len(); index++) {\n    limb xi = x[index + start];\n    limb yi = y[index];\n    bool c1 = false;\n    bool c2 = false;\n    xi = scalar_add(xi, yi, c1);\n    if (carry) {\n      xi = scalar_add(xi, 1, c2);\n    }\n    x[index + start] = xi;\n    carry = c1 | c2;\n  }\n\n  // handle overflow\n  if (carry) {\n    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));\n  }\n  return true;\n}", "seed": "316", "concepts": ["dynamic programming", "recursive backtracking", "tree traversal", "memoization"], "instruction": "Create a C++ program to solve the Travelling Salesman Problem.", "response": "```cpp\n#include <vector>\n\nint tsp(const std::vector<std::vector<int>>& distances) {\n    int n = distances.size();\n    std::vector<int> path(n);\n    for (int i = 0; i < n; i++) {\n        path[i] = i;\n    }\n    return tsp(distances, path, 0, n - 1, 0);\n}\n\nint tsp(const std::vector<std::vector<int>>& distances, const std::vector<int>& path, int start, int end, int totalDistance) {\n    if (end < 0) return totalDistance;\n    int minDistance = totalDistance + distances[path[start]][path[end]];\n    for (int i = start + 1; i < end; i++) {\n        int temp = path[i];\n        path[i] = path[start];\n        path[start] = temp;\n        int newTotalDistance = tsp(distances, path, start + 1, end, totalDistance + distances[path[start]][path[end]]);\n        if (newTotalDistance < minDistance) minDistance = newTotalDistance;\n        temp = path[i];\n        path[i] = path[start];\n        path[start] = temp;\n    }\n    return minDistance;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(tsp({{0, 10, 15, 20}, {10, 0, 35, 25}, {15, 35, 0, 30}, {20, 25, 30, 0}}) == 55);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that performs some function on data in a binary file.\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint findMin(vector<int> arr) {\n    int min = arr[0];\n    for (auto elem : arr) {\n        min = min < elem ? min : elem;\n    }\n    return min;\n}\n\nint main() {\n    vector<int> arr = {1, 6, 10, 8, 4, 5, 8, 4, 5, 1};\n    int min = findMin(arr);\n    cout << min << endl;\n    return 0;\n}\n}\n#include <iostream>\n\nint factorial(int n) {\n    int result = 1;\n    for (int i = n; i > 1; --i) {\n        result *= i;\n    }\n    return result;\n}\n\nint main() {\n    int n = 5;\n    std::cout << factorial(n) << \"!\\n\";\n    return 0;\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint sumVector(vector<int> arr) {\n    int sum = 0;\n    for (auto elem : arr) {\n        sum += elem;\n    }\n    return sum;\n}\n\nint main() {\n    vector<int    return 0;\n}\n> arr = {1, 6, 10, 8, 4, 5, 8, 4, 5, 1};\n    int sum = sumVector(arr);\n    cout << sum << endl;\n#include <iostream>\n\nint gcd(int a, inteturn 0;\n}\n b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    if (b == 0) {\n        return a;\n    }\n\n    // Euclidean algorithm\n    return gcd(b, a % b);\n}\n\nint main() {\n    int a = 100, b = 50;\n    std::cout << gcd(a, b) << '\\n';\n    rd::endl;\n    return 0;\n}\n#include <iostream>\n\nint main() {\n    int n = 5;\n    int result = 1;\n    for (int i = n; i > 1; --i) {\n        result *= i;\n    }\n    std::cout << result << \"!\\n\";\n    std::cout << st#include <iostream>\n#include <set>\n\nbool findCommon(std::set<int> A, std::set<int> B) {\n    for (auto elem : A) {\n        if (B.find(elem) != B.end()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::set<int> A = {1, 2, 3, 4};\n    std::set<int> B = {4, 5, 6, 7};\n    bool result = findCommon(A, B);\n    std::cout << (result ? \"true\\n\" : \"false\\n\");\n    return 0;\n}\n0;\n}\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ndouble average(vector<int> arr) {\n    double sum = 0;\n    for (auto elem : arr) {\n        sum += elem;\n    }\n    return sum / arr.size();\n}\n\nint main() {\n    vector<int> arr = {1, 6, 10, 8, 4, 5, 8, 4, 5, 1};\n    double avg = average(arr);\n    cout << avg << endl;\n    return #include <iostream>\n\nint main() {\n    int n = 10, m = 20;\n    std::cout << (n | m) << '\\n';\n    std::cout << (n & m) << '\\n';\n    std::cout << (n ^ m) << '\\n';\n    std::cout << (n << 2) << '\\n';\n    std::cout << (m >> 5) << '\\n';\n    return 0;\n}\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isPalindrome(string s) {\n    int start = 0, end = s.length() - 1;\n    while (start < end) {\n        if (s[start++] != s[end--]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    string s = \"radar\";\n    bool result = isPalindrome(s);\n    cout << (result ? \"true\\n\" : \"false\\n\");\n    return 0;\n}\nn\" : \"false\\n\");\n    return 0;\n}\n#include <iostream>\n#include <string>\n\nbool isAnagram(std::string s, std::string t) {\n    if (s.length()!= t.length()) {\n        return false;\n    }\n\n    int alphabet[26];\n    for (int i = 0; i < 26; ++i) {\n        alphabet[i] = 0;\n    }\n\n    for (auto c : s) {\n        ++alphabet[c - 'a'];\n    }\n\n    for (auto c : t) {\n        if (alphabet[c - 'a'] == 0) {\n            return false;\n        }\n        --alphabet[c - 'a'];\n    }\n\n    return true;\n}\n\nint main() {\n    std::string s = \"test\", t = \"tset\";\n    bool result = isAnagram(s, t);\n    std::cout << (result? \"true\\#include <iostream>\n\nint main() {\n    int n = 10, m = 20;\n    std::cout << (true ? n : m) << '\\n';\n    std::cout << (false ? n : m) << '\\n';\n    std::cout << (n ? n : m) << '\\n';\n    std::cout << (m ? n : m) << '\\n';\n    return 0;\n}\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "getFire", "docstring": "//Return where to fire.", "code": "string getname(void){\t//Returns the player's name\n\treturn name;\n}", "seed": "319", "concepts": ["bitmasking", "bit-packed data representation"], "instruction": "Write a C++ program that performs some function on data in a binary file.\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint findMin(vector<int> arr) {\n    int min = arr[0];\n    for (auto elem : arr) {\n        min = min < elem ? min : elem;\n    }\n    return min;\n}\n\nint main() {\n    vector<int> arr = {1, 6, 10, 8, 4, 5, 8, 4, 5, 1};\n    int min = findMin(arr);\n    cout << min << endl;\n    return 0;\n}\n}\n#include <iostream>\n\nint factorial(int n) {\n    int result = 1;\n    for (int i = n; i > 1; --i) {\n        result *= i;\n    }\n    return result;\n}\n\nint main() {\n    int n = 5;\n    std::cout << factorial(n) << \"!\\n\";\n    return 0;\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint sumVector(vector<int> arr) {\n    int sum = 0;\n    for (auto elem : arr) {\n        sum += elem;\n    }\n    return sum;\n}\n\nint main() {\n    vector<int    return 0;\n}\n> arr = {1, 6, 10, 8, 4, 5, 8, 4, 5, 1};\n    int sum = sumVector(arr);\n    cout << sum << endl;\n#include <iostream>\n\nint gcd(int a, inteturn 0;\n}\n b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    if (b == 0) {\n        return a;\n    }\n\n    // Euclidean algorithm\n    return gcd(b, a % b);\n}\n\nint main() {\n    int a = 100, b = 50;\n    std::cout << gcd(a, b) << '\\n';\n    rd::endl;\n    return 0;\n}\n#include <iostream>\n\nint main() {\n    int n = 5;\n    int result = 1;\n    for (int i = n; i > 1; --i) {\n        result *= i;\n    }\n    std::cout << result << \"!\\n\";\n    std::cout << st#include <iostream>\n#include <set>\n\nbool findCommon(std::set<int> A, std::set<int> B) {\n    for (auto elem : A) {\n        if (B.find(elem) != B.end()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::set<int> A = {1, 2, 3, 4};\n    std::set<int> B = {4, 5, 6, 7};\n    bool result = findCommon(A, B);\n    std::cout << (result ? \"true\\n\" : \"false\\n\");\n    return 0;\n}\n0;\n}\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ndouble average(vector<int> arr) {\n    double sum = 0;\n    for (auto elem : arr) {\n        sum += elem;\n    }\n    return sum / arr.size();\n}\n\nint main() {\n    vector<int> arr = {1, 6, 10, 8, 4, 5, 8, 4, 5, 1};\n    double avg = average(arr);\n    cout << avg << endl;\n    return #include <iostream>\n\nint main() {\n    int n = 10, m = 20;\n    std::cout << (n | m) << '\\n';\n    std::cout << (n & m) << '\\n';\n    std::cout << (n ^ m) << '\\n';\n    std::cout << (n << 2) << '\\n';\n    std::cout << (m >> 5) << '\\n';\n    return 0;\n}\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isPalindrome(string s) {\n    int start = 0, end = s.length() - 1;\n    while (start < end) {\n        if (s[start++] != s[end--]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    string s = \"radar\";\n    bool result = isPalindrome(s);\n    cout << (result ? \"true\\n\" : \"false\\n\");\n    return 0;\n}\nn\" : \"false\\n\");\n    return 0;\n}\n#include <iostream>\n#include <string>\n\nbool isAnagram(std::string s, std::string t) {\n    if (s.length()!= t.length()) {\n        return false;\n    }\n\n    int alphabet[26];\n    for (int i = 0; i < 26; ++i) {\n        alphabet[i] = 0;\n    }\n\n    for (auto c : s) {\n        ++alphabet[c - 'a'];\n    }\n\n    for (auto c : t) {\n        if (alphabet[c - 'a'] == 0) {\n            return false;\n        }\n        --alphabet[c - 'a'];\n    }\n\n    return true;\n}\n\nint main() {\n    std::string s = \"test\", t = \"tset\";\n    bool result = isAnagram(s, t);\n    std::cout << (result? \"true\\#include <iostream>\n\nint main() {\n    int n = 10, m = 20;\n    std::cout << (true ? n : m) << '\\n';\n    std::cout << (false ? n : m) << '\\n';\n    std::cout << (n ? n : m) << '\\n';\n    std::cout << (m ? n : m) << '\\n';\n    return 0;\n}", "response": "```cpp\n#include <iostream>\n\nint main() {\n    int n = 10, m = 20;\n    std::cout << (n ? n : m) << '\\n';\n    std::cout << (false ? n : m) << '\\n';\n    std::cout << (n ? n : m) << '\\n';\n    std::cout << (m ? n : m) << '\\n';\n    return 0;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(true ? 10 : 20 == 10);\n    assert(false ? 10 : 20 == 20);\n    assert(10 ? 10 : 20 == 10);\n    assert(20 ? 10 : 20 == 20);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 8\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nImplement a C++ function `minCoins` that returns the minimum number of coins needed to make a given amount of change.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "ErrDBInitDatabase", "docstring": "//", "code": "VOID DBReportTachmentEvent( const INST * const pinst, const IFMP ifmp, const MessageId msgidTachment, PCWSTR wszDatabaseName, const BOOL fCacheAlive = fFalse, const BOOL fDirtyCacheAlive = fFalse )\n{\n    FMP * pfmp = &g_rgfmp[ifmp];\n\n    Assert( pinst );\n    Assert( pfmp );\n    Assert( msgidTachment );\n    Assert( wszDatabaseName );\n\n    if ( pfmp->FIsTempDB() )\n    {\n        //  we don't log the temp DB attach/detach\n        return;\n    }\n\n    // report our successful {create|attach|detach} and timings\n\n    WCHAR wszSeconds[16];\n    WCHAR wszFmpId[16];\n    WCHAR wszKeepCacheAlive[24];\n    WCHAR wszAddlFixedData[250];\n\n    __int64 usecTach = 0;\n    ULONG cbTimingResourceDataSequence = 0;\n    WCHAR * wszTimingResourceDataSequence = NULL;\n    CIsamSequenceDiagLog * pisdl = NULL;\n    switch( msgidTachment )\n    {\n        case CREATE_DATABASE_DONE_ID:\n            pisdl = &pfmp->m_isdlCreate;\n            Assert( pisdl->EFinalStep() == eCreateDone );\n            break;\n        case ATTACH_DATABASE_DONE_ID:\n            pisdl = &pfmp->m_isdlAttach;\n            Assert( pisdl->EFinalStep() == eAttachDone );\n            break;\n        case DETACH_DATABASE_DONE_ID:\n            pisdl = &pfmp->m_isdlDetach;\n            Assert( pisdl->EFinalStep() == eDetachDone );\n            break;\n        default:\n            AssertSz( fFalse, \"Unknown msgid = %d for *tachment event!\", msgidTachment );\n    }\n    if ( pisdl )\n    {\n        usecTach = pisdl->UsecTimer( eSequenceStart, pisdl->EFinalStep() );\n        cbTimingResourceDataSequence = pisdl->CbSprintTimings();\n        wszTimingResourceDataSequence = (WCHAR *)_alloca( cbTimingResourceDataSequence );\n        pisdl->SprintTimings( wszTimingResourceDataSequence, cbTimingResourceDataSequence );\n        pisdl->SprintFixedData( wszAddlFixedData, sizeof(wszAddlFixedData) );\n        pisdl->TermSequence();\n    }\n\n    if ( msgidTachment == CREATE_DATABASE_DONE_ID || msgidTachment == ATTACH_DATABASE_DONE_ID )\n    {\n        INT ich = wcslen( wszAddlFixedData );\n        OSStrCbFormatW( wszAddlFixedData + ich, _cbrg( wszAddlFixedData ) - ich * sizeof(WCHAR), L\",\\ndbv = \" );\n        ich = wcslen( wszAddlFixedData );\n        FormatDbvEfvMapping( ifmp, wszAddlFixedData + ich, _cbrg( wszAddlFixedData ) - ich * sizeof(WCHAR) );\n    }\n\n    //  We might consider truncating the timing sequence data when usecTach < 100000 /* 100 ms */, or\n    //  even skipping the whole event altogether.  Probably good to make this behavior based upon the\n    //  event logging level.\n\n    OSStrCbFormatW( wszSeconds, sizeof(wszSeconds), L\"%I64d\", usecTach / 1000000 /* convert to seconds */ );\n    OSStrCbFormatW( wszFmpId, sizeof(wszFmpId), L\"%d\", (ULONG)ifmp );\n    OSStrCbFormatW( wszKeepCacheAlive, sizeof(wszKeepCacheAlive), L\"%d %d\", fCacheAlive, fDirtyCacheAlive );\n\n    const WCHAR * rgszT[6] = { wszFmpId, wszDatabaseName, wszSeconds, wszTimingResourceDataSequence, wszKeepCacheAlive, wszAddlFixedData };\n\n    UtilReportEvent(\n        eventInformation,\n        GENERAL_CATEGORY,\n        msgidTachment,\n        _countof( rgszT ),\n        rgszT,\n        0,\n        NULL,\n        pinst );\n}", "seed": "323", "concepts": ["greedy algorithm"], "instruction": "Implement a C++ function `minCoins` that returns the minimum number of coins needed to make a given amount of change.", "response": "```cpp\n#include <vector>\n#include <algorithm>\n\nint minCoins(int amount, const std::vector<int>& coins) {\n    std::vector<int> dp(amount + 1);\n    std::fill(dp.begin(), dp.end(), INT_MAX);\n    dp[0] = 0;\n    for (int c : coins) {\n        for (int i = c; i <= amount; i++) {\n            dp[i] = std::min(dp[i], dp[i - c] + 1);\n        }\n    }\n    return dp[amount] == INT_MAX ? -1 : dp[amount];\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(minCoins(15, {2, 5, 10}) == 3);\n    assert(minCoins(20, {2, 5, 10}) == 2);\n    assert(minCoins(2, {2, 5, 10}) == -1);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `hello` that prints the phrase \"Hello World!\" to the console.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "Java_nimbus_nativestructs_CSet_delete", "docstring": "// delete the actual set", "code": "JNIEXPORT jint JNICALL Java_nimbus_nativestructs_CSet_c_1iterInit(JNIEnv *, jobject, jint si)\n{\t\n\tsettype* set = csetSetFactory.Get(si);\n\n\t// create a new iterator for this set\n\tsetconstiter* pIter = new setconstiter(set->begin());\n\t\n\t// check whether or not we have created an iterator for this map before\n\tIndexedIterMapType* indexedIters = 0;\n\tSetToItersMapConstIter iter = setToIterMap.find(si);\n\tif (iter != setToIterMap.end())\n\t{\n\t\t// if we have, then we will want to add a new set const iter with a new index\n\t\tindexedIters = iter->second;\n\t}\n\telse\n\t{\n\t\t// if we haven't yet, we will need to make a new map for the indexed iterators and add it to the map\n\t\tindexedIters = new IndexedIterMapType();\n\t\tsetToIterMap.insert(std::pair<int, IndexedIterMapType*>(si, indexedIters));\n\t}\n\t\n\tint newIndex = indexedIters->size();\n\tindexedIters->insert(std::pair<int, setconstiter*>(newIndex, pIter));\n\treturn newIndex;\n}", "seed": "324", "concepts": ["console output", "variable declaration", "function call"], "instruction": "Write a C++ function `hello` that prints the phrase \"Hello World!\" to the console.", "response": "```cpp\n#include <iostream>\n\nvoid hello() { std::cout << \"Hello World!\"; }\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(true);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `BitOperations` that defines the following member functions:\n\n- `bitCount` that calculates the number of 1s in a given integer\n- `setBit` that sets the bit at a given position in a given integer to 1\n- `clearBit` that sets the bit at a given position in a given integer to 0\n- `swapBit` that swaps the value of two bits in a given integer\n- `isBitSet` that checks if the bit at a given position is set in a given integer\n- `getBit` that returns the value of the bit at a given position in a given integer\n- `dibits` that returns a given integer with the bits at the given positions swapped\n- `invert` that inverts the value of all the bits in a given integer\n- `rotate` that rotates the bits in a given integer to the left or right by the given number of positions\n- `firstSetBit` that returns the position of the first 1 bit in a given integer (the least significant bit is at position 0)\n- `lastSetBit` that returns the position of the last 1 bit in a given integer (the least significant bit is at position 0)\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "parse_eight_digits_unrolled", "docstring": "// val = (val * 2561) >> 8;", "code": "fastfloat_really_inline void round(adjusted_mantissa& am, callback cb) noexcept {\n  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;\n  if (-am.power2 >= mantissa_shift) {\n    // have a denormal float\n    int32_t shift = -am.power2 + 1;\n    cb(am, std::min<int32_t>(shift, 64));\n    // check for round-up: if rounding-nearest carried us to the hidden bit.\n    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;\n    return;\n  }\n\n  // have a normal float, use the default shift.\n  cb(am, mantissa_shift);\n\n  // check for carry\n  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {\n    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());\n    am.power2++;\n  }\n\n  // check for infinite: we could have carried to an infinite power\n  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());\n  if (am.power2 >= binary_format<T>::infinite_power()) {\n    am.power2 = binary_format<T>::infinite_power();\n    am.mantissa = 0;\n  }\n}", "seed": "328", "concepts": ["bitwise operations", "bitwise inversion", "bitwise shift", "bitwise AND", "bitwise OR", "bitwise XOR", "bitwise complement"], "instruction": "Create a C++ class `BitOperations` that defines the following member functions:\n\n- `bitCount` that calculates the number of 1s in a given integer\n- `setBit` that sets the bit at a given position in a given integer to 1\n- `clearBit` that sets the bit at a given position in a given integer to 0\n- `swapBit` that swaps the value of two bits in a given integer\n- `isBitSet` that checks if the bit at a given position is set in a given integer\n- `getBit` that returns the value of the bit at a given position in a given integer\n- `dibits` that returns a given integer with the bits at the given positions swapped\n- `invert` that inverts the value of all the bits in a given integer\n- `rotate` that rotates the bits in a given integer to the left or right by the given number of positions\n- `firstSetBit` that returns the position of the first 1 bit in a given integer (the least significant bit is at position 0)\n- `lastSetBit` that returns the position of the last 1 bit in a given integer (the least significant bit is at position 0)", "response": "```cpp\n#include <cstdint>\n\nclass BitOperations {\n  public:\n    int64_t bitCount(int64_t n) { return __builtin_popcount(n); }\n    int64_t setBit(int64_t n, int position) { return n | (1LL << position); }\n    int64_t clearBit(int64_t n, int position) { return n & (~(1LL << position)); }\n    int64_t swapBit(int64_t n, int position1, int position2) {\n        return clearBit(n, position1) | (n & (1LL << position2)) | (1LL << position1) |\n               (n & (1LL << position2));\n    }\n    bool isBitSet(int64_t n, int position) { return (n & (1LL << position)) != 0; }\n    int64_t getBit(int64_t n, int position) { return (n >> position) & 1; }\n    int64_t dibits(int64_t n, int position1, int position2) {\n        return (n & ((1LL << position1) - 1)) | ((n >> position2) & ((1LL << (64 - position2)) - 1));\n    }\n    int64_t invert(int64_t n) { return ~n + 1; }\n    int64_t rotate(int64_t n, int rotate) {\n        int64_t mask = rotate % 64;\n        return ((n >> mask) | (n << (64 - mask)));\n    }\n    int64_t firstSetBit(int64_t n) {\n        int64_t mask = 1;\n        for (int64_t i = 0; i < 64; i++) {\n            if ((n & mask) != 0) return i;\n            mask <<= 1;\n        }\n        return -1;\n    }\n    int64_t lastSetBit(int64_t n) {\n        int64_t mask = (1LL << 63);\n        for (int64_t i = 63; i >= 0; i--) {\n            if ((n & mask) != 0) return i;\n            mask >>= 1;\n        }\n        return -1;\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    BitOperations bo;\n    assert(bo.bitCount(255) == 8);\n    assert(bo.setBit(0, 2) == 4);\n    assert(bo.clearBit(4, 2) == 0);\n    assert(bo.swapBit(4, 1, 2) == 6);\n    assert(bo.isBitSet(4, 1));\n    assert(!bo.isBitSet(4, 2));\n    assert(bo.getBit(4, 1) == 1);\n    assert(bo.getBit(4, 2) == 0);\n    assert(bo.dibits(40, 3, 5) == 12);\n    assert(bo.invert(4) == -5);\n    assert(bo.rotate(4, 1) == 2);\n    assert(bo.firstSetBit(4) == 2);\n    assert(bo.lastSetBit(4) == 1);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `maxSubarraySum` that returns the sum of the maximum subarray of an array.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "demosaic_byb_rd1_select", "docstring": "//__VIVADO_SYNTH__", "code": "inline hw_uint<16> demosaic_byb_rd2_select(demosaic_bx_cache& demosaic_bx, int d0, int d1) {\n#ifdef __VIVADO_SYNTH__\n#endif //__VIVADO_SYNTH__\n  // demosaic_byb_rd2 read pattern: { demosaic_byb_update_0[d0, d1] -> demosaic_bx[2d0, 2 + d1] : 0 <= d0 <= 959 and 0 <= d1 <= 1079 }\n  // Read schedule : { demosaic_byb_update_0[d0, d1] -> [5 + d1, 3 + d0, 8] : 0 <= d0 <= 959 and 0 <= d1 <= 1079 }\n  // Write schedule: { demosaic_bx_update_0[d0, d1] -> [3 + d1, 3 + d0, 7] : 0 <= d0 <= 959 and 0 <= d1 <= 1081 }\n  // DD fold: {  }\n  auto value_demosaic_bx_demosaic_bx_update_0_write0 = demosaic_bx.demosaic_bx_demosaic_bx_update_0_write0_merged_banks_3.peek_0();\n  return value_demosaic_bx_demosaic_bx_update_0_write0;\n#ifndef __VIVADO_SYNTH__\n\tcout << \"Error: Unsupported offsets: \" << \" d0 = \" << d0  << \" d1 = \" << d1  << endl;\n\tassert(false);\n\treturn 0;\n#endif //__VIVADO_SYNTH__\n}", "seed": "329", "concepts": ["dynamic programming"], "instruction": "Write a C++ function `maxSubarraySum` that returns the sum of the maximum subarray of an array.", "response": "```cpp\n#include <vector>\n\nint maxSubarraySum(const std::vector<int>& nums) {\n    int maxSum = 0;\n    int currSum = 0;\n\n    for (int n : nums) {\n        currSum += n;\n        if (currSum > maxSum) maxSum = currSum;\n        else if (currSum < 0) currSum = 0;\n    }\n\n    return maxSum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxSubarraySum({1, 2, 3}) == 6);\n    assert(maxSubarraySum({1, -2, 3}) == 3);\n    assert(maxSubarraySum({-1, -2, -3}) == -1);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ function `reverseBits` that reverses the order of bits in a 32-bit integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "PyUIBounds", "docstring": "// current (which can be bigger).", "code": "static auto PyShowAd(PyObject* self, PyObject* args, PyObject* keywds)\n    -> PyObject* {\n  BA_PYTHON_TRY;\n  BA_PRECONDITION(g_base->InLogicThread());\n  const char* purpose;\n  PyObject* on_completion_call_obj = Py_None;\n  int pass_actually_showed = false;\n  static const char* kwlist[] = {\"purpose\", \"on_completion_call\", nullptr};\n  if (!PyArg_ParseTupleAndKeywords(\n          args, keywds, \"s|O\", const_cast<char**>(kwlist), &purpose,\n          &on_completion_call_obj, &pass_actually_showed)) {\n    return nullptr;\n  }\n  g_base->plus()->SetAdCompletionCall(on_completion_call_obj,\n                                      static_cast<bool>(pass_actually_showed));\n\n  // In cases where we support ads, store our callback and kick one off.\n  // We'll then fire our callback once its done.\n  // If we *don't* support ads, just store our callback and then kick off\n  // an ad-view-complete message ourself so the event flow is similar..\n  if (g_core->platform->GetHasAds()) {\n    g_core->platform->ShowAd(purpose);\n  } else {\n    g_base->plus()->PushAdViewComplete(purpose, false);\n  }\n  Py_RETURN_NONE;\n  BA_PYTHON_CATCH;\n}", "seed": "338", "concepts": ["bit manipulation", "XOR", "2's complement"], "instruction": "Create a C++ function `reverseBits` that reverses the order of bits in a 32-bit integer.", "response": "```cpp\n#include <cstdint>\n#include <bitset>\n\nuint32_t reverseBits(uint32_t n) {\n    return std::bitset<32>(n).reverse().to_ulong();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseBits(0b10101010) == 0b01010101u);\n    assert(reverseBits(0b10000000) == 0b00000001u);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a string is a palindrome, ignoring case, punctuation, and spaces.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "jacobian3D_sums", "docstring": "//then the other entries", "code": "double objectivefunc2D(unsigned n, const double *x, double *grad, void *dd)\n{\n    double ans;\n    data_info d = *((struct data_info *)dd); \n    create_full_rep(d.cycle_size, d.ndim, d._cycle_rep, d.start, d.x_size/d.ndim, x, d.rep);\n    create_metric_tensor2D(d.ndim, x, d.Z);\n    ans = compute_inner_product_fast2D(x, d);\n    if (grad) {\n        //Jacobian calc not working!!\n        //jacobian3D_sums(grad, x, d);\n        //forward_difference_grad(grad, x, ans, dd, 1e-5);\n        central_difference_grad2D(grad, x, dd, 1e-5);\n    }\n    //std::cout<<ans<<std::endl;\n    return ans; \n}", "seed": "340", "concepts": ["integer value", "bitwise operation", "bit shifting", "logical operation"], "instruction": "Write a C++ function `isPalindrome` that returns true if a string is a palindrome, ignoring case, punctuation, and spaces.", "response": "```cpp\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nbool isPalindrome(const std::string& str) {\n    std::string s = str;\n    std::remove_if(s.begin(), s.end(), isalpha);\n    std::transform(s.begin(), s.end(), s.begin(), [](char c) {\n        return std::tolower(c);\n    });\n    std::reverse(s.begin(), s.end());\n    return s == str;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"A man a plan a canal Panama\") == true);\n    assert(isPalindrome(\"Was it a car or a cat I saw\") == true);\n    assert(isPalindrome(\"Noel sees Leon\") == true);\n    assert(isPalindrome(\"detartrated\") == true);\n    assert(isPalindrome(\"A Santa at NASA\") == false);\n    assert(isPalindrome(\"palindrome\") == false);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\n\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "split_roots", "docstring": "// f = f(-x) or -f(-x)", "code": "void cycle_tuples(vector< vector<size_t> > &res, const vector<size_t> &perm) {\n  const size_t &n = perm.size();\n  res.resize(0);\n  vector<bool> seen(n, false);\n  for(size_t i = 0; i < n; ++i) {\n    if( not seen[i] ) {\n      if(perm[i] == i) {\n        res.push_back(vector<size_t>(1, i));\n        seen[i] = true;\n      } else {\n        vector<size_t> cycle(1, i);\n        size_t k = perm[i];\n        while( k != i ) {\n          cycle.push_back(k);\n          seen[k] = true;\n          k = perm[k];\n        }\n        res.push_back(cycle);\n      }\n    }\n  }\n  // sort using the length of the cycles\n  sort(res.begin(),\n      res.end(),\n      [](const vector<size_t> &a, const vector<size_t> &b) {\n      return a.size() > b.size();\n      });\n}", "seed": "348", "concepts": [""], "instruction": "", "response": "</response>\n\n<tests>"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `nthTriangleNumber` that returns the `n`th triangle number.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "init_system_matrix_toyexample", "docstring": "// central elements", "code": "NumericVector numerical_solution_toyexample(NumericVector param, int nx)\n{\n    int nml = compute_matrix_dimension_toyexample(nx);\n    NumericVector x(nx);\n    NumericVector b(nx);\n    NumericMatrix mle(nml, 3);\n\n    mle = init_system_matrix_toyexample(param, nx);\n    b = init_right_part_toyexample(param, nx);\n    x = linear_solver_toyexample(mle, b);\n    //x = linear_solver_direct_toyexample(mle, b);\n    return x;\n}", "seed": "354", "concepts": ["triangle number"], "instruction": "Write a C++ function `nthTriangleNumber` that returns the `n`th triangle number.", "response": "```cpp\nint nthTriangleNumber(int n) {\n    return n * (n + 1) / 2;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(nthTriangleNumber(0) == 0);\n    assert(nthTriangleNumber(1) == 1);\n    assert(nthTriangleNumber(2) == 3);\n    assert(nthTriangleNumber(3) == 6);\n    assert(nthTriangleNumber(4) == 10);\n    assert(nthTriangleNumber(5) == 15);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `gcd` to return the greatest common divisor of two integers.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "CDC_Init_FS", "docstring": "/* USER CODE END 3 */", "code": "static int8_t CDC_DeInit_FS(void)\r\n{\r\n    /* USER CODE BEGIN 4 */\r\n    return (USBD_OK);\r\n    /* USER CODE END 4 */\r\n}", "seed": "366", "concepts": ["mathematical computation", "modulo"], "instruction": "Write a C++ function `gcd` to return the greatest common divisor of two integers.", "response": "```cpp\nint gcd(int x, int y) {\n    return y == 0 ? x : gcd(y, x % y);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(2, 4) == 2);\n    assert(gcd(10, 12) == 2);\n    assert(gcd(25, 20) == 5);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that prints out the first 50 terms of the sequence `1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...`.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "insert_fieldtest", "docstring": "//      cout << \"inside databasefunc::insert_fieldtest()\" << endl;", "code": "string generate_insert_fieldtest_SQL_command(\n      string fieldtest_date,string brief_label,string description)\n   {\n//   cout << \"inside databasefunc::generate_fieldtest_SQL_command()\" << endl;\n\n      string SQL_command=\"insert into fieldtests \";\n      SQL_command += \"(start_time_stamp,description,label) \";\n      SQL_command += \"values( \";\n      SQL_command += \"'\"+fieldtest_date+\"',\";\n      SQL_command += \"'\"+description+\"',\";\n      SQL_command += \"'\"+brief_label+\"'\";\n      SQL_command += \");\";\n\n      cout << SQL_command << endl;\n      return SQL_command;\n   }", "seed": "369", "concepts": ["The number sequence."], "instruction": "Write a C++ program that prints out the first 50 terms of the sequence `1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...`.", "response": "```cpp\n#include <iostream>\nint main() {\n    int a = 1, b = 1;\n    for (int i = 0; i < 50; i++) {\n        std::cout << a << \", \";\n        int temp = a + b;\n        a = b;\n        b = temp;\n    }\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    // Sanity check that the program works.\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ program that determines whether or not a user-supplied integer is prime.#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid reverseString(string input) {\n    string output = \"\";\n    for (int i = input.length() - 1; i >= 0; i--) {\n        output += input[i];\n    }\n    cout << output << endl;\n}\n\nint main() {\n    string input;\n    cout << \"Enter a string to be reversed: \";\n    getline(cin, input);\n    reverseString(input);\n    return 0;\n}#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint average(vector<int> input) {\n    int sum = 0;\n    for (int i = 0; i < input.size(); i++) {\n        sum += input[i];\n    }\n    return sum / input.size();\n}\n\nint main() {\n    vector<int> input = {2, 5, 8, 5, 1, 9, 3, 3, 3, 3};\n    int result = average(input);\n    cout << \"The average is \" << result << endl;\n    return 0;\n}#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint findMin(vector<int> input) {\n    int min = input[0];\n    for (int i = 0; i < input.size(); i++) {\n        if (input[i] < min) {\n            min = input[i];\n        }\n    }\n    return min;\n}\n\nint main() {\n    vector<int> input = {2, 5, 8, 5, 1, 9, 3, 3, 3, 3};\n    int result = findMin(input);\n    cout << \"The minimum value is \" << result << endl;\n    return 0;\n}#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool isPrime(int number) {\n    for (int i = 2; i < number; i++) {\n        if (number % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int number;\n    cout << \"Enter an integer to check: \";\n    cin >> number;\n    if (isPrime(number)) {\n        cout << number << \" is prime\" << endl;\n    } else {\n        cout << number << \" is not prime\" << endl;\n    }\n    return 0;\n}#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> removeDuplicates(vector<int> input) {\n    vector<int> result;\n    for (int i = 0; i < input.size(); i++) {\n        bool duplicate = false;\n        for (int j = 0; j < result.size(); j++) {\n            if (result[j] == input[i]) {\n                duplicate = true;\n            }\n        }\n        if (!duplicate) {\n            result.push_back(input[i]);\n        }\n    }\n    return result;\n}\n\nint main() {\n    vector<int> input = {2, 5, 8, 5, 1, 9, 3, 3, 3, 3};\n    vector<int> result = removeDuplicates(input);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint power(int base, int exponent) {\n    int result = 1;\n    for (int i = 0; i < exponent; i++) {\n        result *= base;\n    }\n    return result;\n}\n\nint main() {\n    int base;\n    int exponent;\n    cout << \"Enter a base: \";\n    cin >> base;\n    cout << \"Enter an exponent: \";\n    cin >> exponent;\n    int result = power(base, exponent);\n    cout << base << \" raised to \" << exponent << \" is \" << result << endl;\n    return 0;\n}\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "upcall_flush_chan", "docstring": "// Nop.", "code": "CDECL void\nupcall_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n    LOG_UPCALL_ENTRY(task);\n    task->log(rust_log::UPCALL | rust_log::COMM,\n              \"port: 0x%\" PRIxPTR \", dptr: 0x%\" PRIxPTR\n              \", size: 0x%\" PRIxPTR \", chan_no: %d\",\n              (uintptr_t) port, (uintptr_t) dptr, port->unit_sz,\n              port->chans.length());\n\n    if (port->receive(dptr)) {\n        return;\n    }\n\n    // No data was buffered on any incoming channel, so block this task\n    // on the port. Remember the rendezvous location so that any sender\n    // task can write to it before waking up this task.\n\n    task->log(rust_log::COMM, \"<=== waiting for rendezvous data ===\");\n    task->rendezvous_ptr = dptr;\n    task->block(port, \"waiting for rendezvous data\");\n    task->yield(3);\n}", "seed": "381", "concepts": ["prime number check", "integer sequence"], "instruction": "Create a C++ program that determines whether or not a user-supplied integer is prime.#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid reverseString(string input) {\n    string output = \"\";\n    for (int i = input.length() - 1; i >= 0; i--) {\n        output += input[i];\n    }\n    cout << output << endl;\n}\n\nint main() {\n    string input;\n    cout << \"Enter a string to be reversed: \";\n    getline(cin, input);\n    reverseString(input);\n    return 0;\n}#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint average(vector<int> input) {\n    int sum = 0;\n    for (int i = 0; i < input.size(); i++) {\n        sum += input[i];\n    }\n    return sum / input.size();\n}\n\nint main() {\n    vector<int> input = {2, 5, 8, 5, 1, 9, 3, 3, 3, 3};\n    int result = average(input);\n    cout << \"The average is \" << result << endl;\n    return 0;\n}#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint findMin(vector<int> input) {\n    int min = input[0];\n    for (int i = 0; i < input.size(); i++) {\n        if (input[i] < min) {\n            min = input[i];\n        }\n    }\n    return min;\n}\n\nint main() {\n    vector<int> input = {2, 5, 8, 5, 1, 9, 3, 3, 3, 3};\n    int result = findMin(input);\n    cout << \"The minimum value is \" << result << endl;\n    return 0;\n}#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool isPrime(int number) {\n    for (int i = 2; i < number; i++) {\n        if (number % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int number;\n    cout << \"Enter an integer to check: \";\n    cin >> number;\n    if (isPrime(number)) {\n        cout << number << \" is prime\" << endl;\n    } else {\n        cout << number << \" is not prime\" << endl;\n    }\n    return 0;\n}#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> removeDuplicates(vector<int> input) {\n    vector<int> result;\n    for (int i = 0; i < input.size(); i++) {\n        bool duplicate = false;\n        for (int j = 0; j < result.size(); j++) {\n            if (result[j] == input[i]) {\n                duplicate = true;\n            }\n        }\n        if (!duplicate) {\n            result.push_back(input[i]);\n        }\n    }\n    return result;\n}\n\nint main() {\n    vector<int> input = {2, 5, 8, 5, 1, 9, 3, 3, 3, 3};\n    vector<int> result = removeDuplicates(input);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint power(int base, int exponent) {\n    int result = 1;\n    for (int i = 0; i < exponent; i++) {\n        result *= base;\n    }\n    return result;\n}\n\nint main() {\n    int base;\n    int exponent;\n    cout << \"Enter a base: \";\n    cin >> base;\n    cout << \"Enter an exponent: \";\n    cin >> exponent;\n    int result = power(base, exponent);\n    cout << base << \" raised to \" << exponent << \" is \" << result << endl;\n    return 0;\n}", "response": "```cpp\nint main() {\n    return 0;\n}\n```\n</response>\n\n<tests>\n```cpp\nint main() {\n    return 0;\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `midpoint` that returns the middle element of a linked list of integers.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "demosaicb_rd9_select", "docstring": "//__VIVADO_SYNTH__", "code": "inline hw_uint<288> denoise_demosaicb_update_0_read_bundle_read(denoise_cache& denoise, int d0, int d1) {\n  // # of ports in bundle: 18\n    // demosaicb_rd0\n    // demosaicb_rd1\n    // demosaicb_rd2\n    // demosaicb_rd3\n    // demosaicb_rd4\n    // demosaicb_rd5\n    // demosaicb_rd6\n    // demosaicb_rd7\n    // demosaicb_rd8\n    // demosaicb_rd9\n    // demosaicb_rd10\n    // demosaicb_rd11\n    // demosaicb_rd12\n    // demosaicb_rd13\n    // demosaicb_rd14\n    // demosaicb_rd15\n    // demosaicb_rd16\n    // demosaicb_rd17\n\n\thw_uint<288> result;\n\thw_uint<16> demosaicb_rd0_res = demosaicb_rd0_select(denoise, d0, d1);\n\tset_at<0, 288>(result, demosaicb_rd0_res);\n\thw_uint<16> demosaicb_rd1_res = demosaicb_rd1_select(denoise, d0, d1);\n\tset_at<16, 288>(result, demosaicb_rd1_res);\n\thw_uint<16> demosaicb_rd2_res = demosaicb_rd2_select(denoise, d0, d1);\n\tset_at<32, 288>(result, demosaicb_rd2_res);\n\thw_uint<16> demosaicb_rd3_res = demosaicb_rd3_select(denoise, d0, d1);\n\tset_at<48, 288>(result, demosaicb_rd3_res);\n\thw_uint<16> demosaicb_rd4_res = demosaicb_rd4_select(denoise, d0, d1);\n\tset_at<64, 288>(result, demosaicb_rd4_res);\n\thw_uint<16> demosaicb_rd5_res = demosaicb_rd5_select(denoise, d0, d1);\n\tset_at<80, 288>(result, demosaicb_rd5_res);\n\thw_uint<16> demosaicb_rd6_res = demosaicb_rd6_select(denoise, d0, d1);\n\tset_at<96, 288>(result, demosaicb_rd6_res);\n\thw_uint<16> demosaicb_rd7_res = demosaicb_rd7_select(denoise, d0, d1);\n\tset_at<112, 288>(result, demosaicb_rd7_res);\n\thw_uint<16> demosaicb_rd8_res = demosaicb_rd8_select(denoise, d0, d1);\n\tset_at<128, 288>(result, demosaicb_rd8_res);\n\thw_uint<16> demosaicb_rd9_res = demosaicb_rd9_select(denoise, d0, d1);\n\tset_at<144, 288>(result, demosaicb_rd9_res);\n\thw_uint<16> demosaicb_rd10_res = demosaicb_rd10_select(denoise, d0, d1);\n\tset_at<160, 288>(result, demosaicb_rd10_res);\n\thw_uint<16> demosaicb_rd11_res = demosaicb_rd11_select(denoise, d0, d1);\n\tset_at<176, 288>(result, demosaicb_rd11_res);\n\thw_uint<16> demosaicb_rd12_res = demosaicb_rd12_select(denoise, d0, d1);\n\tset_at<192, 288>(result, demosaicb_rd12_res);\n\thw_uint<16> demosaicb_rd13_res = demosaicb_rd13_select(denoise, d0, d1);\n\tset_at<208, 288>(result, demosaicb_rd13_res);\n\thw_uint<16> demosaicb_rd14_res = demosaicb_rd14_select(denoise, d0, d1);\n\tset_at<224, 288>(result, demosaicb_rd14_res);\n\thw_uint<16> demosaicb_rd15_res = demosaicb_rd15_select(denoise, d0, d1);\n\tset_at<240, 288>(result, demosaicb_rd15_res);\n\thw_uint<16> demosaicb_rd16_res = demosaicb_rd16_select(denoise, d0, d1);\n\tset_at<256, 288>(result, demosaicb_rd16_res);\n\thw_uint<16> demosaicb_rd17_res = demosaicb_rd17_select(denoise, d0, d1);\n\tset_at<272, 288>(result, demosaicb_rd17_res);\n\treturn result;\n}", "seed": "382", "concepts": ["linked list traversal", "two-pointer algorithm"], "instruction": "Write a C++ function `midpoint` that returns the middle element of a linked list of integers.", "response": "```cpp\n#include <cstddef>\n\nint midpoint(ListNode* list) {\n    auto slow = list, fast = list;\n    while (fast != nullptr and fast->next != nullptr) {\n        fast = fast->next->next;\n        slow = slow->next;\n    }\n    return slow->val;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(midpoint(ListNode(1)) == 1);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nImplement a C++ function `sumVector` that returns the sum of all elements in a vector of integers.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\nint sumVector(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int n : nums) {\n        sum += n;\n    }\n    return sum;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(sumVector({1, 2, 3}) == 6);\n    assert(sumVector({-1, -2, -3}) == -6);\n    assert(sumVector({}) == 0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isAnagram` that returns true if two strings are anagrams of each other.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <algorithm>\n\nbool isAnagram(const std::string& a, const std::string& b) {\n    std::string sa = a, sb = b;\n    std::sort(sa.begin(), sa.end());\n    std::sort(sb.begin(), sb.end());\n    return sa == sb;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isAnagram(\"listen\", \"silent\") == true);\n    assert(isAnagram(\"hello\", \"world\") == false);\n}\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ program that reads in a tree structure represented by a nested list of strings. The strings will represent each node of the tree, with the last string being the root of the tree.\n\nThe program should then print out the tree as a list of strings. Each child should be separated by a comma and a space.\n\nFor example, the following tree:\n```\na\nb\nc\nd\ne\nf\ng\n```\n\nwould be represented as the following nested list:\n```\n(a (b (c) (d)) (e (f) (g)))\n```\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "varAssign", "docstring": "// This case should not be reachable", "code": "void assign( Seq<Instr>* seq   // Target instruction sequence to extend\n           , Expr *lhsExpr     // Expression on left-hand side\n           , Expr *rhs         // Expression on right-hand side\n           )\n{\n  Expr lhs = *lhsExpr;\n\n  AssignCond always;\n  always.tag = ALWAYS;\n\n  // -----------------------------------------------------------\n  // Case: v := rhs, where v is a variable and rhs an expression\n  // -----------------------------------------------------------\n  if (lhs.tag == VAR) {\n    varAssign(seq, always, lhs.var, rhs);\n    return;\n  }\n\n  // ---------------------------------------------------------\n  // Case: *lhs := rhs where lhs is not a var or rhs not a var\n  // ---------------------------------------------------------\n  if (lhs.tag == DEREF &&\n        (lhs.deref.ptr->tag != VAR ||\n         rhs->tag != VAR)) {\n    assert(!isLit(lhs.deref.ptr));\n    lhs.deref.ptr = simplify(seq, lhs.deref.ptr);\n    rhs = putInVar(seq, rhs);\n  }\n\n  // -------------------------------------------------\n  // Case: *v := rhs where v is a var and rhs is a var\n  // -------------------------------------------------\n  if (lhs.tag == DEREF) {\n    Instr instr;\n    instr.tag        = ST1;\n    instr.ST1.data   = srcReg(rhs->var);\n    instr.ST1.buffer = A;\n    seq->append(instr);\n    instr.tag        = ST2;\n    instr.ST2.addr   = srcReg(lhs.deref.ptr->var);\n    instr.ST2.buffer = A;\n    seq->append(instr);\n    instr.tag        = ST3;\n    seq->append(instr);\n    return;\n  }\n\n  // This case should not be reachable\n  assert(false);\n}", "seed": "387", "concepts": ["string traversal", "map", "integer comparisons"], "instruction": "Write a C++ program that reads in a tree structure represented by a nested list of strings. The strings will represent each node of the tree, with the last string being the root of the tree.\n\nThe program should then print out the tree as a list of strings. Each child should be separated by a comma and a space.\n\nFor example, the following tree:\n```\na\nb\nc\nd\ne\nf\ng\n```\n\nwould be represented as the following nested list:\n```\n(a (b (c) (d)) (e (f) (g)))\n```", "response": "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<std::string> flattenTree(const std::string& nestedList) {\n    std::vector<std::string> result;\n    std::string s = nestedList;\n    while (s.find(\"(\") != std::string::npos) {\n        size_t p1 = s.find(\"(\");\n        size_t p2 = s.find(\")\");\n        result.push_back(s.substr(0, p1));\n        std::string children = s.substr(p1 + 1, p2 - p1 - 1);\n        s = children;\n    }\n    result.push_back(s);\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(flattenTree(\"(a (b (c) (d)) (e (f) (g)))\") == std::vector<std::string>({\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"}));\n    assert(flattenTree(\"()\") == std::vector<std::string>({\"()\"}));\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nImplement a C++ function `maxOfTwo` that returns the larger of two integers using the ternary operator.\n</instruction>\n\n<response>\n```cpp\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(maxOfTwo(3, 7) == 7);\n    assert(maxOfTwo(-5, -2) == -2);\n    assert(maxOfTwo(10, 10) == 10);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nThe number sequence `1, 3, 7, 15, 31, ...` is defined like this:\n\n- `1` is the first element of the sequence\n- `a` the next element in the sequence is `a + 2 ^ (a mod 3)`\n\nWrite a C++ program that prints out the first 64 elements of this sequence.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "round_up_bigint", "docstring": "// ....9999 to ...10000, which could cause a false halfway point.", "code": "inline void parse_mantissa(bigint& result, parsed_number_string& num, size_t max_digits, size_t& digits) noexcept {\n  // try to minimize the number of big integer and scalar multiplication.\n  // therefore, try to parse 8 digits at a time, and multiply by the largest\n  // scalar value (9 or 19 digits) for each step.\n  size_t counter = 0;\n  digits = 0;\n  limb value = 0;\n#ifdef FASTFLOAT_64BIT_LIMB\n  size_t step = 19;\n#else\n  size_t step = 9;\n#endif\n\n  // process all integer digits.\n  const char* p = num.integer.ptr;\n  const char* pend = p + num.integer.len();\n  skip_zeros(p, pend);\n  // process all digits, in increments of step per loop\n  while (p != pend) {\n    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {\n      parse_eight_digits(p, value, counter, digits);\n    }\n    while (counter < step && p != pend && digits < max_digits) {\n      parse_one_digit(p, value, counter, digits);\n    }\n    if (digits == max_digits) {\n      // add the temporary value, then check if we've truncated any digits\n      add_native(result, limb(powers_of_ten_uint64[counter]), value);\n      bool truncated = is_truncated(p, pend);\n      if (num.fraction.ptr != nullptr) {\n        truncated |= is_truncated(num.fraction);\n      }\n      if (truncated) {\n        round_up_bigint(result, digits);\n      }\n      return;\n    } else {\n      add_native(result, limb(powers_of_ten_uint64[counter]), value);\n      counter = 0;\n      value = 0;\n    }\n  }\n\n  // add our fraction digits, if they're available.\n  if (num.fraction.ptr != nullptr) {\n    p = num.fraction.ptr;\n    pend = p + num.fraction.len();\n    if (digits == 0) {\n      skip_zeros(p, pend);\n    }\n    // process all digits, in increments of step per loop\n    while (p != pend) {\n      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {\n        parse_eight_digits(p, value, counter, digits);\n      }\n      while (counter < step && p != pend && digits < max_digits) {\n        parse_one_digit(p, value, counter, digits);\n      }\n      if (digits == max_digits) {\n        // add the temporary value, then check if we've truncated any digits\n        add_native(result, limb(powers_of_ten_uint64[counter]), value);\n        bool truncated = is_truncated(p, pend);\n        if (truncated) {\n          round_up_bigint(result, digits);\n        }\n        return;\n      } else {\n        add_native(result, limb(powers_of_ten_uint64[counter]), value);\n        counter = 0;\n        value = 0;\n      }\n    }\n  }\n\n  if (counter != 0) {\n    add_native(result, limb(powers_of_ten_uint64[counter]), value);\n  }\n}", "seed": "388", "concepts": ["bitwise operations", "bit shifting"], "instruction": "The number sequence `1, 3, 7, 15, 31, ...` is defined like this:\n\n- `1` is the first element of the sequence\n- `a` the next element in the sequence is `a + 2 ^ (a mod 3)`\n\nWrite a C++ program that prints out the first 64 elements of this sequence.", "response": "```cpp\n#include <iostream>\n\nvoid printSequence(int limit) {\n    std::cout << 1 << '\\n';\n    int a = 1;\n    while (limit > 1) {\n        a = a + 2 << (a % 3);\n        --limit;\n        std::cout << a << '\\n';\n    }\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    printSequence(64);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `reverseString` that takes a string and returns its reverse using STL iterators.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string reverseString(const std::string& str) {\n    return std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(reverseString(\"abc\") == \"cba\");\n    assert(reverseString(\"\") == \"\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `countDigits` that returns the number of digits in an integer.\n</instruction>\n\n<response>\n```cpp\nint countDigits(int n) {\n    int count = 0;\n    do {\n        count++;\n        n /= 10;\n    } while (n != 0);\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countDigits(12345) == 5);\n    assert(countDigits(0) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\n\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "LTR114_GetErrorString", "docstring": "/*\n     * \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0441\u043e\u043e\u0431\u0448\u0435\u043d\u0438\u0435\u043c \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0435\u0439 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043a\u043e\u0434\u0443 \u043e\u0448\u0438\u0431\u043a\u0438.\n     * \u041e\u041f\u0418\u0421\u0410\u041d\u0418\u0415\n     * \u041f\u0410\u0420\u0410\u041c\u0415\u0422\u0420\u042b\n     *   err - \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438 (\u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0442\u0440\u0438\u0446\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c), \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 LTR114.\n     * \u0412\u041e\u0417\u0412\u0420\u0410\u0429\u0410\u0415\u041c\u041e\u0415 \u0417\u041d\u0410\u0427\u0415\u041d\u0418\u0415\n     *   \u0423\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043a\u043e\u0434\u0443.\n     *   NULL - \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438.\n     */", "code": "INT LTR114_GetFrame\n    (\n    PTLTR114 hnd,\n    DWORD *buf\n    )\n{\n    /*\n     * \u0421\u0431\u043e\u0440 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u0430\u0434\u0440\u0430 \u0441 \u0410\u0426\u041f \u043c\u043e\u0434\u0443\u043b\u044f LTR11.\n     * \u041e\u041f\u0418\u0421\u0410\u041d\u0418\u0415\n     *   \u041c\u043e\u0434\u0443\u043b\u044c LTR11 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0440\u0435\u0436\u0438\u043c \u0441\u0431\u043e\u0440\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u0430\u0434\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.\n     *   \u041f\u0440\u0438\u043d\u044f\u0442\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044f \u0437\u0430\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0432 \u0431\u0443\u0444\u0435\u0440. \u041e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f\n     *   \u043f\u043e \u043f\u0440\u0438\u0435\u043c\u0443 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u0443 (\u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u0430\n     *   \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0434\u0438\u0441\u043a\u0440\u0435\u0442\u0438\u0437\u0430\u0446\u0438\u0438).\n     * \u041f\u0410\u0420\u0410\u041c\u0415\u0422\u0420\u042b\n     *   hnd - \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u044f;\n     *   buf - \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u0431\u0443\u0444\u0435\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u044b\u0435 \u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0435.\n     * \u0412\u041e\u0417\u0412\u0420\u0410\u0429\u0410\u0415\u041c\u041e\u0415 \u0417\u041d\u0410\u0427\u0415\u041d\u0418\u0415\n     *   \u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u043b\u0438 0 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442 \u0432 \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u043c \u043a\u0430\u0434\u0440\u0435.\n     *   \u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e       - \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438 (\u0441\u043c. \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0444\u0430\u0439\u043b).\n     */\n    DWORD cmd;\n    DWORD rd_buf[LTR114_MAX_LCHANNEL*2 + 2];\n    INT ret_val = 0, res;\n    double adcrate;\n\n    if (hnd == NULL)\n        return LTR114_ERR_INVALID_DESCR;\n    if (hnd->Active)\n        return LTR114_ERR_ALREADY_RUN;\n\tif (hnd->Reserve==NULL)\n\t\treturn LTR114_ERR_MODULE_CLOSED;\n        \n    if ((hnd->LChQnt <= 0) || (LTR114_MAX_LCHANNEL < hnd->LChQnt))\n        return LTR114_ERR_INVALID_ADCLCHQNT;\n    \n    if ((adcrate = LTR114_FREQ((*hnd))) <= 0.0)\n       return LTR114_ERR_INVALID_ADCRATE;\n    \n\t//\u0437\u0430\u043f\u0443\u0441\u043a \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0438, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430\n\tif (!(((PLTR114_INTERNAL_DATA)hnd->Reserve)->status & LTR114_INTSTATUS_CALIBRATED) && \n\t\t!(hnd->SpecialFeatures & LTR114_FEATURES_CBR_DIS))\n\t{\n\t\tres = LTR114_Calibrate(hnd);\n\t\tif (res!=LTR_OK)\n\t\t\treturn res;\n\t}\n\n\n   // hnd->Active = TRUE;\n    if ((ret_val = start_ltr114(hnd, 1)) == LTR_OK)\n    {\n        long n;\n        DWORD *pbuf;\n        DWORD tick;\n        DWORD tm_out;\n\n        tick = GetTickCount();\n        /* \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u0430 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0434\u0438\u0441\u043a\u0440\u0435\u0442\u0438\u0437\u0430\u0446\u0438\u0438 */\n        tm_out = (DWORD)((double)1 * hnd->FrameLength / adcrate + ack_tm_out + 0.5);\n        pbuf = rd_buf;\n        do\n        {\n            if ((n = LTR_Recv(&hnd->Channel, pbuf, NULL, 2*hnd->LChQnt + 1, tm_out)) < 0)\n            {\n                ret_val = n;\n            }\n            else if (n > 0)\n            {\n                unsigned a;\n\n                /* \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441\u0431\u043e\u0440\u0430 \u043a\u0430\u0434\u0440\u0430 (\u043f\u043e \u043f\u0440\u0438\u0445\u043e\u0434\u0443 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f) */\n               pbuf += n;\n                a = pbuf[-1] & ack_mask;\n                if (a == stop_ack)                   /* \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u0434\u0438\u043d \u043a\u0430\u0434\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 */\n                {\n                    ret_val = pbuf - rd_buf;\n                    if (--ret_val <= 0)\n                    {\n                        ret_val = LTR114_ERR_GETFRAME;\n                    }\n                    else\n                    {\n                        (void)memcpy(buf, rd_buf, ret_val * sizeof(DWORD));\n                    }\n                }\n                else if (n < hnd->LChQnt + 1)        /* \u043d\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 */\n                {\n                    ret_val = LTR114_ERR_GETFRAME;\n                }\n             }\n        } while ((f_elapsed_time(tick) <= tm_out) && (ret_val == LTR_OK) && (n > 0));\n    }\n\n    cmd = LTR010CMD_STOP;  //\u043e\u0441\u0442\u0430\u043d\u043e\u0432 \u043c\u043e\u0434\u0443\u043b\u044f - \u043f\u043e\u0441\u044b\u043b\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b STOP\n        \n    LTR_Send(&hnd->Channel, &cmd, 1, send_tm_out); \n\n    hnd->Active = FALSE;\n\n    return ret_val;\n}", "seed": "390", "concepts": [""], "instruction": "", "response": "</response>\n\n<tests>"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `countWords` that counts the number of words in a given string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <sstream>\n#include <iterator>\n\nint countWords(const std::string& str) {\n    std::istringstream iss(str);\n    return std::distance(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countWords(\"Hello world\") == 2);\n    assert(countWords(\"One\") == 1);\n    assert(countWords(\"\") == 0);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nWrite a C++ function `toBinary` that converts a non-negative integer to a binary string.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nstd::string toBinary(int n) {\n    if (n == 0) return \"0\";\n    std::string result;\n    while (n > 0) {\n        result = char('0' + (n % 2)) + result;\n        n /= 2;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(toBinary(5) == \"101\");\n    assert(toBinary(0) == \"0\");\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `findCommon` that returns a vector of common elements from two vectors.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findCommon(const std::vector<int>& a, const std::vector<int>& b) {\n    std::unordered_set<int> s(a.begin(), a.end());\n    std::vector<int> result;\n    for (int val : b) {\n        if (s.count(val)) result.push_back(val);\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = findCommon({1, 2, 3}, {3, 4, 5});\n    assert(result == std::vector<int>({3}));\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nWrite a C++ function `power` that computes base raised to an integer exponent.\n</instruction>\n\n<response>\n```cpp\ndouble power(double base, int exp) {\n    double result = 1.0;\n    for (int i = 0; i < exp; ++i) {\n        result *= base;\n    }\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(power(2.0, 3) == 8.0);\n    assert(power(5.0, 0) == 1.0);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ program that generates all permutations of a given set of characters.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "GetConsoleData", "docstring": "// \u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30af\u30b7\u30e7\u30f3", "code": "DWORD UpdateConsoleData(UPDATE_COMSOLE_DATA& data)\n{\n\t// \u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30af\u30b7\u30e7\u30f3\n\tCoCriticalSectionCtrl critical(GetConsoleCritical());\n\n\tUPDATE_COMSOLE_DATA& console_data = GetConsoleData(data.macaddr, critical);\n\tif (&console_data == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tif (strcmp((LPCTSTR)console_data.status, \"OFFDUTY\") == 0)\n\t{\n\t\tconsole_data.ipaddr.Empty();\n\t\tconsole_data.ipmask.Empty();\n\n\t\treturn 0;\n\t}\n\n\t// \u6700\u7d42\u66f4\u65b0\n\tGetSystemTime(&console_data.latest_time);\n\tSystemTimeToTzSpecificLocalTime(NULL, &console_data.latest_time, &console_data.latest_time);\n\n\tif (!data.ipaddr.IsEmpty())\n\t{\n\t\tconsole_data.ipaddr = data.ipaddr;\n\t}\n\tif (!data.ipmask.IsEmpty())\n\t{\n\t\tconsole_data.ipmask = data.ipmask;\n\t}\n\tif (!data.hostname.IsEmpty())\n\t{\n\t\tconsole_data.hostname = data.hostname;\n\t}\n\tif (!data.username.IsEmpty())\n\t{\n\t\tconsole_data.username = data.username;\n\t}\n\tif (!data.boot_time.IsEmpty())\n\t{\n\t\tconsole_data.boot_time = data.boot_time;\n\t}\n\tif (!data.time_span.IsEmpty())\n\t{\n\t\tconsole_data.time_span = data.time_span;\n\t}\n\tif (!data.cpu_usage.IsEmpty())\n\t{\n\t\tconsole_data.cpu_usage = data.cpu_usage;\n\t}\n\tif (!data.process.IsEmpty())\n\t{\n\t\tconsole_data.process = data.process;\n\t}\n\tif (!data.dwMemoryLoad.IsEmpty())\n\t{\n\t\tconsole_data.dwMemoryLoad = data.dwMemoryLoad;\n\t}\n\tif (!data.dwTotalPhys.IsEmpty())\n\t{\n\t\tconsole_data.dwTotalPhys = data.dwTotalPhys;\n\t}\n\tif (!data.dwAvailPhys.IsEmpty())\n\t{\n\t\tconsole_data.dwAvailPhys = data.dwAvailPhys;\n\t}\n\tif (!data.dwTotalVirtual.IsEmpty())\n\t{\n\t\tconsole_data.dwTotalVirtual = data.dwTotalVirtual;\n\t}\n\tif (!data.dwAvailVirtual.IsEmpty())\n\t{\n\t\tconsole_data.dwAvailVirtual = data.dwAvailVirtual;\n\t}\n\tif (!data.ulFreeBytesAvailable.IsEmpty())\n\t{\n\t\tconsole_data.ulFreeBytesAvailable = data.ulFreeBytesAvailable;\n\t}\n\tif (!data.ulTotalNumberOfBytes.IsEmpty())\n\t{\n\t\tconsole_data.ulTotalNumberOfBytes = data.ulTotalNumberOfBytes;\n\t}\n\tif (!data.ulTotalNumberOfFreeBytes.IsEmpty())\n\t{\n\t\tconsole_data.ulTotalNumberOfFreeBytes = data.ulTotalNumberOfFreeBytes;\n\t}\n\tif (!data.in_packet.IsEmpty())\n\t{\n\t\tconsole_data.in_packet = data.in_packet;\n\t}\n\tif (!data.out_packet.IsEmpty())\n\t{\n\t\tconsole_data.out_packet = data.out_packet;\n\t}\n\tif (!data.connections.IsEmpty())\n\t{\n\t\tconsole_data.connections = data.connections;\n\t}\n\n\treturn 0;\n}", "seed": "394", "concepts": ["recursion", "memoization", "counting", "backtracking"], "instruction": "Create a C++ program that generates all permutations of a given set of characters.", "response": "```cpp\n#include <string>\n#include <vector>\n\nvoid generatePermutations(std::string str,\n                          std::vector<std::string>& result,\n                          int startIndex) {\n    if (startIndex == str.size()) {\n        result.push_back(str);\n    } else {\n        for (int i = startIndex; i < str.size(); ++i) {\n            std::swap(str[startIndex], str[i]);\n            generatePermutations(str, result, startIndex + 1);\n            std::swap(str[startIndex], str[i]);\n        }\n    }\n}\n\nstd::vector<std::string> getPermutations(std::string str) {\n    std::vector<std::string> result;\n    generatePermutations(str, result, 0);\n    return result;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\n#include <unordered_set>\nint main() {\n    std::unordered_set<std::string> expected = { \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\" };\n    auto result = getPermutations(\"abc\");\n    assert(result == expected);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nWrite a recursive C++ function `factorial` that calculates the factorial of a non-negative integer.\n</instruction>\n\n<response>\n```cpp\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(factorial(0) == 1);\n    assert(factorial(5) == 120);\n    assert(factorial(3) == 6);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `celsiusToFahrenheit` that converts Celsius to Fahrenheit.\n</instruction>\n\n<response>\n```cpp\ndouble celsiusToFahrenheit(double celsius) {\n    return celsius * 9.0 / 5.0 + 32;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(celsiusToFahrenheit(0) == 32.0);\n    assert(celsiusToFahrenheit(100) == 212.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `gcd` that returns the greatest common divisor of two integers.\n</instruction>\n\n<response>\n```cpp\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(gcd(48, 18) == 6);\n    assert(gcd(101, 103) == 1);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `isPrime` that checks if a number is prime.\n</instruction>\n\n<response>\n```cpp\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPrime(2) == true);\n    assert(isPrime(17) == true);\n    assert(isPrime(4) == false);\n    assert(isPrime(1) == false);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nWrite a C++ function `primeFactors` that returns a vector of prime factors of a non-negative integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "get_fieldtest_time", "docstring": "//   cout << \"inside databasefunc::get_fieldtest_time()\" << endl;", "code": "bool insert_platform(gis_database* gis_database_ptr,string description)\n   {\n//      cout << \"inside databasefunc::insert_platform()\" << endl;\n\n      string curr_insert_command=\n         databasefunc::generate_insert_platform_SQL_command(description);\n      \n      vector<string> insert_commands;\n      insert_commands.push_back(curr_insert_command);\n//      cout << \"insert_commands.back() = \" << insert_commands.back() << endl;\n//      cout << \"gis_database_ptr = \" << gis_database_ptr << endl;\n\n      gis_database_ptr->set_SQL_commands(insert_commands);\n      return gis_database_ptr->execute_SQL_commands();\n   }", "seed": "396", "concepts": ["Prime factorization", "Sieve of Eratosthenes", "multiplication"], "instruction": "Write a C++ function `primeFactors` that returns a vector of prime factors of a non-negative integer.", "response": "```cpp\n#include <vector>\nstd::vector<int> primeFactors(int n) {\n    std::vector<int> factors;\n    for (int i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) factors.push_back(n);\n    return factors;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = primeFactors(20);\n    assert(result[0] == 2);\n    assert(result[1] == 2);\n    assert(result[2] == 5);\n}\n```"}
{"prompt": "You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.\n\n## Example 1\n<instruction>\nWrite a C++ function `countVowels` that takes a string and returns the number of vowels (a, e, i, o, u), ignoring case.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n#include <cctype>\n\nint countVowels(const std::string& str) {\n    int count = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(countVowels(\"Hello World\") == 3);\n    assert(countVowels(\"AEIOU\") == 5);\n    assert(countVowels(\"xyz\") == 0);\n}\n```\n</tests>\n\n## Example 2\n<instruction>\nCreate a C++ function `charFrequency` that returns a frequency map of characters in a string.\n</instruction>\n\n<response>\n```cpp\n#include <map>\n#include <string>\n\nstd::map<char, int> charFrequency(const std::string& str) {\n    std::map<char, int> freq;\n    for (char c : str) {\n        ++freq[c];\n    }\n    return freq;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto result = charFrequency(\"aabbc\");\n    assert(result['a'] == 2);\n    assert(result['b'] == 2);\n    assert(result['c'] == 1);\n}\n```\n</tests>\n\n## Example 3\n<instruction>\nWrite a C++ function `findMin` to return the smallest element in a vector of integers.\n</instruction>\n\n<response>\n```cpp\nint findMin(const std::vector<int>& arr) {\n    int minVal = arr[0];\n    for (int num : arr) {\n        if (num < minVal) minVal = num;\n    }\n    return minVal;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(findMin({3, 1, 4, 2}) == 1);\n    assert(findMin({-1, -5, -3}) == -5);\n}\n```\n</tests>\n\n## Example 4\n<instruction>\nWrite a C++ function `removeDuplicates` that returns a vector with duplicates removed.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n#include <set>\n\nstd::vector<int> removeDuplicates(const std::vector<int>& nums) {\n    std::set<int> seen(nums.begin(), nums.end());\n    return std::vector<int>(seen.begin(), seen.end());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto res = removeDuplicates({1, 2, 2, 3});\n    assert(res == std::vector<int>({1, 2, 3}));\n}\n```\n</tests>\n\n## Example 5\n<instruction>\nCreate a C++ function `average` that calculates the average of integers in a vector.\n</instruction>\n\n<response>\n```cpp\n#include <vector>\n\ndouble average(const std::vector<int>& nums) {\n    if (nums.empty()) return 0.0;\n    int sum = 0;\n    for (int n : nums) sum += n;\n    return static_cast<double>(sum) / nums.size();\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(average({2, 4, 6}) == 4.0);\n    assert(average({}) == 0.0);\n}\n```\n</tests>\n\n## Example 6\n<instruction>\nWrite a C++ function `isPalindrome` that returns true if a given string is a palindrome.\n</instruction>\n\n<response>\n```cpp\n#include <string>\n\nbool isPalindrome(const std::string& str) {\n    return str == std::string(str.rbegin(), str.rend());\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(isPalindrome(\"madam\") == true);\n    assert(isPalindrome(\"hello\") == false);\n}\n```\n</tests>\n\n## Example 7\n<instruction>\nWrite a C++ function `swap` that exchanges the values of two integers using pass-by-reference.\n</instruction>\n\n<response>\n```cpp\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    int x = 5, y = 10;\n    swap(x, y);\n    assert(x == 10 && y == 5);\n}\n```\n</tests>\n\n## Example 8\n<instruction>\nCreate a C++ function `fibonacci` that returns the nth Fibonacci number using recursion.\n</instruction>\n\n<response>\n```cpp\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    assert(fibonacci(0) == 0);\n    assert(fibonacci(1) == 1);\n    assert(fibonacci(5) == 5);\n}\n```\n</tests>\n\n## Example 9\n<instruction>\nCreate a C++ class `Factorial` that computes the factorial of a given integer.\n</instruction>\n\n<response>", "fingerprint": null, "function_name": "denoise_rd1_select", "docstring": "//__VIVADO_SYNTH__", "code": "inline hw_uint<32> denoiseb_denoise_update_0_read_bundle_read(denoiseb_cache& denoiseb, int d0, int d1) {\n  // # of ports in bundle: 2\n    // denoise_rd0\n    // denoise_rd1\n\n\thw_uint<32> result;\n\thw_uint<16> denoise_rd0_res = denoise_rd0_select(denoiseb, d0, d1);\n\tset_at<0, 32>(result, denoise_rd0_res);\n\thw_uint<16> denoise_rd1_res = denoise_rd1_select(denoiseb, d0, d1);\n\tset_at<16, 32>(result, denoise_rd1_res);\n\treturn result;\n}", "seed": "397", "concepts": ["factorial", "recursion"], "instruction": "Create a C++ class `Factorial` that computes the factorial of a given integer.", "response": "```cpp\nclass Factorial {\npublic:\n    Factorial(int n) : n(n) {}\n\n    int get() {\n        return factorial(n);\n    }\n\nprivate:\n    int n;\n\n    int factorial(int n) {\n        if (n == 1) return 1;\n        return n * factorial(n - 1);\n    }\n};\n```\n</response>\n\n<tests>\n```cpp\n#include <cassert>\nint main() {\n    auto f1 = Factorial(5);\n    assert(f1.get() == 120);\n    auto f2 = Factorial(10);\n    assert(f2.get() == 3628800);\n}\n```"}
